
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 38 00 20 7d 26 00 00 5d 7a 01 00 51 26 00 00     .8. }&..]z..Q&..
  10:	51 26 00 00 51 26 00 00 51 26 00 00 00 00 00 00     Q&..Q&..Q&......
	...
  2c:	65 23 00 00 51 26 00 00 00 00 00 00 11 23 00 00     e#..Q&.......#..
  3c:	51 26 00 00                                         Q&..

00000040 <_irq_vector_table>:
  40:	15 24 00 00 25 05 01 00 15 24 00 00 15 24 00 00     .$..%....$...$..
  50:	15 24 00 00 15 24 00 00 15 24 00 00 15 24 00 00     .$...$...$...$..
  60:	15 24 00 00 15 24 00 00 15 24 00 00 15 24 00 00     .$...$...$...$..
  70:	15 24 00 00 15 24 00 00 15 24 00 00 15 24 00 00     .$...$...$...$..
  80:	15 24 00 00 15 24 00 00 15 24 00 00 15 24 00 00     .$...$...$...$..
  90:	15 24 00 00 15 24 00 00 15 24 00 00 15 24 00 00     .$...$...$...$..
  a0:	15 24 00 00 15 24 00 00 15 24 00 00 15 24 00 00     .$...$...$...$..
  b0:	15 24 00 00 15 24 00 00 15 24 00 00 15 24 00 00     .$...$...$...$..
  c0:	15 24 00 00 15 24 00 00 15 24 00 00 15 24 00 00     .$...$...$...$..
  d0:	15 24 00 00 15 24 00 00 15 24 00 00                 .$...$...$..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f808 	bl	114 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <__udivmoddi4>:
     114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     118:	4607      	mov	r7, r0
     11a:	468c      	mov	ip, r1
     11c:	4608      	mov	r0, r1
     11e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     120:	4615      	mov	r5, r2
     122:	463c      	mov	r4, r7
     124:	4619      	mov	r1, r3
     126:	2b00      	cmp	r3, #0
     128:	f040 80c6 	bne.w	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     12c:	4282      	cmp	r2, r0
     12e:	fab2 f782 	clz	r7, r2
     132:	d946      	bls.n	1c2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x2>
     134:	b14f      	cbz	r7, 14a <CONFIG_NRF52_ANOMALY_132_DELAY_US>
     136:	f1c7 0e20 	rsb	lr, r7, #32
     13a:	fa24 fe0e 	lsr.w	lr, r4, lr
     13e:	fa00 f307 	lsl.w	r3, r0, r7
     142:	40bd      	lsls	r5, r7
     144:	ea4e 0c03 	orr.w	ip, lr, r3
     148:	40bc      	lsls	r4, r7
     14a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14e:	fa1f fe85 	uxth.w	lr, r5
     152:	fbbc f9f8 	udiv	r9, ip, r8
     156:	0c22      	lsrs	r2, r4, #16
     158:	fb08 c319 	mls	r3, r8, r9, ip
     15c:	fb09 fa0e 	mul.w	sl, r9, lr
     160:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     164:	459a      	cmp	sl, r3
     166:	d928      	bls.n	1ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4d>
     168:	18eb      	adds	r3, r5, r3
     16a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     16e:	d204      	bcs.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     170:	459a      	cmp	sl, r3
     172:	d902      	bls.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     174:	f1a9 0002 	sub.w	r0, r9, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030a 	sub.w	r3, r3, sl
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f8 	udiv	r2, r3, r8
     184:	fb08 3312 	mls	r3, r8, r2, r3
     188:	fb02 fe0e 	mul.w	lr, r2, lr
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a6      	cmp	lr, r4
     192:	d914      	bls.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     19a:	d203      	bcs.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     19c:	45a6      	cmp	lr, r4
     19e:	d901      	bls.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 040e 	sub.w	r4, r4, lr
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b11e      	cbz	r6, 1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     1ae:	40fc      	lsrs	r4, r7
     1b0:	2300      	movs	r3, #0
     1b2:	6034      	str	r4, [r6, #0]
     1b4:	6073      	str	r3, [r6, #4]
     1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1ba:	4648      	mov	r0, r9
     1bc:	e7dd      	b.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     1be:	4613      	mov	r3, r2
     1c0:	e7f0      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1c2:	b902      	cbnz	r2, 1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     1c4:	deff      	udf	#255	; 0xff
     1c6:	bb87      	cbnz	r7, 22a <CONFIG_FLASH_SIZE+0x2a>
     1c8:	1a83      	subs	r3, r0, r2
     1ca:	2101      	movs	r1, #1
     1cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d0:	b2aa      	uxth	r2, r5
     1d2:	fbb3 fcfe 	udiv	ip, r3, lr
     1d6:	0c20      	lsrs	r0, r4, #16
     1d8:	fb0e 331c 	mls	r3, lr, ip, r3
     1dc:	fb0c f802 	mul.w	r8, ip, r2
     1e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e4:	4598      	cmp	r8, r3
     1e6:	d963      	bls.n	2b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x30>
     1e8:	18eb      	adds	r3, r5, r3
     1ea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1ee:	d204      	bcs.n	1fa <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x3a>
     1f0:	4598      	cmp	r8, r3
     1f2:	d902      	bls.n	1fa <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x3a>
     1f4:	f1ac 0002 	sub.w	r0, ip, #2
     1f8:	442b      	add	r3, r5
     1fa:	eba3 0308 	sub.w	r3, r3, r8
     1fe:	b2a4      	uxth	r4, r4
     200:	fbb3 fcfe 	udiv	ip, r3, lr
     204:	fb0e 331c 	mls	r3, lr, ip, r3
     208:	fb0c f202 	mul.w	r2, ip, r2
     20c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     210:	42a2      	cmp	r2, r4
     212:	d94f      	bls.n	2b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x34>
     214:	192c      	adds	r4, r5, r4
     216:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     21a:	d204      	bcs.n	226 <CONFIG_FLASH_SIZE+0x26>
     21c:	42a2      	cmp	r2, r4
     21e:	d902      	bls.n	226 <CONFIG_FLASH_SIZE+0x26>
     220:	f1ac 0302 	sub.w	r3, ip, #2
     224:	442c      	add	r4, r5
     226:	1aa4      	subs	r4, r4, r2
     228:	e7be      	b.n	1a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3b>
     22a:	f1c7 0c20 	rsb	ip, r7, #32
     22e:	fa20 f80c 	lsr.w	r8, r0, ip
     232:	fa00 f307 	lsl.w	r3, r0, r7
     236:	fa24 fc0c 	lsr.w	ip, r4, ip
     23a:	40bd      	lsls	r5, r7
     23c:	ea4c 0203 	orr.w	r2, ip, r3
     240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     244:	b2ab      	uxth	r3, r5
     246:	fbb8 fcfe 	udiv	ip, r8, lr
     24a:	0c11      	lsrs	r1, r2, #16
     24c:	fb0e 801c 	mls	r0, lr, ip, r8
     250:	fb0c f903 	mul.w	r9, ip, r3
     254:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     258:	4581      	cmp	r9, r0
     25a:	fa04 f407 	lsl.w	r4, r4, r7
     25e:	d923      	bls.n	2a8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x28>
     260:	1828      	adds	r0, r5, r0
     262:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     266:	d204      	bcs.n	272 <CONFIG_FLASH_SIZE+0x72>
     268:	4581      	cmp	r9, r0
     26a:	d902      	bls.n	272 <CONFIG_FLASH_SIZE+0x72>
     26c:	f1ac 0102 	sub.w	r1, ip, #2
     270:	4428      	add	r0, r5
     272:	eba0 0009 	sub.w	r0, r0, r9
     276:	b292      	uxth	r2, r2
     278:	fbb0 fcfe 	udiv	ip, r0, lr
     27c:	fb0e 001c 	mls	r0, lr, ip, r0
     280:	fb0c f803 	mul.w	r8, ip, r3
     284:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     288:	4598      	cmp	r8, r3
     28a:	d90f      	bls.n	2ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x2c>
     28c:	18eb      	adds	r3, r5, r3
     28e:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     292:	d204      	bcs.n	29e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     294:	4598      	cmp	r8, r3
     296:	d902      	bls.n	29e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     298:	f1ac 0202 	sub.w	r2, ip, #2
     29c:	442b      	add	r3, r5
     29e:	eba3 0308 	sub.w	r3, r3, r8
     2a2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a6:	e791      	b.n	1cc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xc>
     2a8:	4661      	mov	r1, ip
     2aa:	e7e2      	b.n	272 <CONFIG_FLASH_SIZE+0x72>
     2ac:	4662      	mov	r2, ip
     2ae:	e7f6      	b.n	29e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     2b0:	4660      	mov	r0, ip
     2b2:	e7a2      	b.n	1fa <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x3a>
     2b4:	4663      	mov	r3, ip
     2b6:	e7b6      	b.n	226 <CONFIG_FLASH_SIZE+0x26>
     2b8:	4283      	cmp	r3, r0
     2ba:	d905      	bls.n	2c8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x48>
     2bc:	b10e      	cbz	r6, 2c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x42>
     2be:	e9c6 7000 	strd	r7, r0, [r6]
     2c2:	2100      	movs	r1, #0
     2c4:	4608      	mov	r0, r1
     2c6:	e776      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2c8:	fab3 f183 	clz	r1, r3
     2cc:	b981      	cbnz	r1, 2f0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     2ce:	4283      	cmp	r3, r0
     2d0:	d301      	bcc.n	2d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x56>
     2d2:	42ba      	cmp	r2, r7
     2d4:	d80a      	bhi.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>
     2d6:	1abc      	subs	r4, r7, r2
     2d8:	eb60 0303 	sbc.w	r3, r0, r3
     2dc:	2001      	movs	r0, #1
     2de:	469c      	mov	ip, r3
     2e0:	2e00      	cmp	r6, #0
     2e2:	d068      	beq.n	3b6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x136>
     2e4:	e9c6 4c00 	strd	r4, ip, [r6]
     2e8:	2100      	movs	r1, #0
     2ea:	e764      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2ec:	4608      	mov	r0, r1
     2ee:	e7f7      	b.n	2e0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x60>
     2f0:	f1c1 0c20 	rsb	ip, r1, #32
     2f4:	408b      	lsls	r3, r1
     2f6:	fa22 f40c 	lsr.w	r4, r2, ip
     2fa:	431c      	orrs	r4, r3
     2fc:	fa02 f501 	lsl.w	r5, r2, r1
     300:	fa00 f301 	lsl.w	r3, r0, r1
     304:	fa27 f20c 	lsr.w	r2, r7, ip
     308:	fa20 fb0c 	lsr.w	fp, r0, ip
     30c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     310:	4313      	orrs	r3, r2
     312:	fbbb f8f9 	udiv	r8, fp, r9
     316:	fa1f fe84 	uxth.w	lr, r4
     31a:	fb09 bb18 	mls	fp, r9, r8, fp
     31e:	0c1a      	lsrs	r2, r3, #16
     320:	fb08 fa0e 	mul.w	sl, r8, lr
     324:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     328:	4592      	cmp	sl, r2
     32a:	fa07 f701 	lsl.w	r7, r7, r1
     32e:	d93e      	bls.n	3ae <CONFIG_BT_HCI_TX_STACK_SIZE+0x12e>
     330:	18a2      	adds	r2, r4, r2
     332:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     336:	d204      	bcs.n	342 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     338:	4592      	cmp	sl, r2
     33a:	d902      	bls.n	342 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     33c:	f1a8 0002 	sub.w	r0, r8, #2
     340:	4422      	add	r2, r4
     342:	eba2 020a 	sub.w	r2, r2, sl
     346:	b29b      	uxth	r3, r3
     348:	fbb2 f8f9 	udiv	r8, r2, r9
     34c:	fb09 2218 	mls	r2, r9, r8, r2
     350:	fb08 fe0e 	mul.w	lr, r8, lr
     354:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     358:	4596      	cmp	lr, r2
     35a:	d92a      	bls.n	3b2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x132>
     35c:	18a2      	adds	r2, r4, r2
     35e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     362:	d204      	bcs.n	36e <CONFIG_BT_HCI_TX_STACK_SIZE+0xee>
     364:	4596      	cmp	lr, r2
     366:	d902      	bls.n	36e <CONFIG_BT_HCI_TX_STACK_SIZE+0xee>
     368:	f1a8 0302 	sub.w	r3, r8, #2
     36c:	4422      	add	r2, r4
     36e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     372:	fba0 9305 	umull	r9, r3, r0, r5
     376:	eba2 020e 	sub.w	r2, r2, lr
     37a:	429a      	cmp	r2, r3
     37c:	46ce      	mov	lr, r9
     37e:	4698      	mov	r8, r3
     380:	d302      	bcc.n	388 <CONFIG_BT_HCI_TX_STACK_SIZE+0x108>
     382:	d106      	bne.n	392 <CONFIG_BT_HCI_TX_STACK_SIZE+0x112>
     384:	454f      	cmp	r7, r9
     386:	d204      	bcs.n	392 <CONFIG_BT_HCI_TX_STACK_SIZE+0x112>
     388:	ebb9 0e05 	subs.w	lr, r9, r5
     38c:	eb63 0804 	sbc.w	r8, r3, r4
     390:	3801      	subs	r0, #1
     392:	b186      	cbz	r6, 3b6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x136>
     394:	ebb7 030e 	subs.w	r3, r7, lr
     398:	eb62 0708 	sbc.w	r7, r2, r8
     39c:	fa07 fc0c 	lsl.w	ip, r7, ip
     3a0:	40cb      	lsrs	r3, r1
     3a2:	ea4c 0303 	orr.w	r3, ip, r3
     3a6:	40cf      	lsrs	r7, r1
     3a8:	e9c6 3700 	strd	r3, r7, [r6]
     3ac:	e79c      	b.n	2e8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     3ae:	4640      	mov	r0, r8
     3b0:	e7c7      	b.n	342 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     3b2:	4643      	mov	r3, r8
     3b4:	e7db      	b.n	36e <CONFIG_BT_HCI_TX_STACK_SIZE+0xee>
     3b6:	4631      	mov	r1, r6
     3b8:	e6fd      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     3ba:	0000      	movs	r0, r0
     3bc:	0000      	movs	r0, r0
	...

000003c0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     3c4:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     3c8:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     3ca:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
     3cc:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     3ce:	42a6      	cmp	r6, r4
{
     3d0:	4688      	mov	r8, r1
     3d2:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     3d4:	d818      	bhi.n	408 <CONFIG_BT_RX_STACK_SIZE+0x8>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     3d6:	4d1c      	ldr	r5, [pc, #112]	; (448 <CONFIG_BT_RX_STACK_SIZE+0x48>)
     3d8:	fba3 0105 	umull	r0, r1, r3, r5
     3dc:	a318      	add	r3, pc, #96	; (adr r3, 440 <CONFIG_BT_RX_STACK_SIZE+0x40>)
     3de:	e9d3 2300 	ldrd	r2, r3, [r3]
     3e2:	f7ff fe7d 	bl	e0 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     3e6:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     3e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     3ec:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     3f0:	a313      	add	r3, pc, #76	; (adr r3, 440 <CONFIG_BT_RX_STACK_SIZE+0x40>)
     3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
     3f6:	fba4 0105 	umull	r0, r1, r4, r5
     3fa:	f7ff fe71 	bl	e0 <__aeabi_uldivmod>
     3fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     402:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     408:	4c0f      	ldr	r4, [pc, #60]	; (448 <CONFIG_BT_RX_STACK_SIZE+0x48>)
     40a:	a30d      	add	r3, pc, #52	; (adr r3, 440 <CONFIG_BT_RX_STACK_SIZE+0x40>)
     40c:	e9d3 2300 	ldrd	r2, r3, [r3]
     410:	fba6 0104 	umull	r0, r1, r6, r4
     414:	f7ff fe64 	bl	e0 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     418:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     41c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     420:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     424:	a306      	add	r3, pc, #24	; (adr r3, 440 <CONFIG_BT_RX_STACK_SIZE+0x40>)
     426:	e9d3 2300 	ldrd	r2, r3, [r3]
     42a:	fba1 0104 	umull	r0, r1, r1, r4
     42e:	f7ff fe57 	bl	e0 <__aeabi_uldivmod>
     432:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     436:	6038      	str	r0, [r7, #0]
}
     438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     43c:	f3af 8000 	nop.w
     440:	1afd498d 	.word	0x1afd498d
     444:	00000007 	.word	0x00000007
     448:	3b9aca00 	.word	0x3b9aca00
     44c:	00000000 	.word	0x00000000

00000450 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
     454:	4cab      	ldr	r4, [pc, #684]	; (704 <CONFIG_BT_COMPANY_ID+0x113>)
{
     456:	b08f      	sub	sp, #60	; 0x3c
	if (!adv || !adv->is_enabled) {
     458:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
	if (!enable) {
     45c:	2800      	cmp	r0, #0
     45e:	f000 8139 	beq.w	6d4 <CONFIG_BT_COMPANY_ID+0xe3>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     462:	f012 0701 	ands.w	r7, r2, #1
     466:	f040 81b7 	bne.w	7d8 <CONFIG_BT_COMPANY_ID+0x1e7>
	ull_filter_adv_update(lll->filter_policy);
     46a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
     46e:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
     470:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
     474:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
     478:	f00f fcf8 	bl	fe6c <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     47c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
     480:	0741      	lsls	r1, r0, #29
     482:	d42d      	bmi.n	4e0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x6c>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     484:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     488:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     48c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     490:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     494:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     498:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
     49c:	f1b8 0f00 	cmp.w	r8, #0
     4a0:	d011      	beq.n	4c6 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x52>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
     4a2:	4898      	ldr	r0, [pc, #608]	; (704 <CONFIG_BT_COMPANY_ID+0x113>)
     4a4:	4641      	mov	r1, r8
     4a6:	f00a f8b9 	bl	a61c <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
     4aa:	f898 3000 	ldrb.w	r3, [r8]
     4ae:	065a      	lsls	r2, r3, #25
     4b0:	d505      	bpl.n	4be <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4a>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     4b2:	2106      	movs	r1, #6
     4b4:	f005 fc78 	bl	5da8 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     4b8:	2800      	cmp	r0, #0
     4ba:	f000 81c9 	beq.w	850 <__data_size+0x31>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     4be:	4891      	ldr	r0, [pc, #580]	; (704 <CONFIG_BT_COMPANY_ID+0x113>)
     4c0:	4649      	mov	r1, r9
     4c2:	f00a f8ab 	bl	a61c <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     4c6:	f898 3000 	ldrb.w	r3, [r8]
     4ca:	f013 0f0e 	tst.w	r3, #14
     4ce:	f040 80ee 	bne.w	6ae <CONFIG_BT_COMPANY_ID+0xbd>
		if (lll->conn) {
     4d2:	6a23      	ldr	r3, [r4, #32]
     4d4:	b19b      	cbz	r3, 4fe <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8a>
	return BT_HCI_ERR_CMD_DISALLOWED;
     4d6:	270c      	movs	r7, #12
}
     4d8:	4638      	mov	r0, r7
     4da:	b00f      	add	sp, #60	; 0x3c
     4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
     4e0:	463a      	mov	r2, r7
     4e2:	f104 016b 	add.w	r1, r4, #107	; 0x6b
     4e6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     4ea:	f00f fe25 	bl	10138 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
     4ee:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
     4f0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
     4f4:	d0c6      	beq.n	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
			ull_filter_rpa_update(false);
     4f6:	4638      	mov	r0, r7
     4f8:	f00f fcd2 	bl	fea0 <ull_filter_rpa_update>
     4fc:	e7c2      	b.n	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
		link = ll_rx_link_alloc();
     4fe:	f008 ff7b 	bl	93f8 <ll_rx_link_alloc>
		if (!link) {
     502:	4682      	mov	sl, r0
     504:	2800      	cmp	r0, #0
     506:	f000 81ad 	beq.w	864 <__data_size+0x45>
		node_rx = ll_rx_alloc();
     50a:	f008 ff81 	bl	9410 <ll_rx_alloc>
		if (!node_rx) {
     50e:	4683      	mov	fp, r0
     510:	2800      	cmp	r0, #0
     512:	f000 81ac 	beq.w	86e <__data_size+0x4f>
		conn = ll_conn_acquire();
     516:	f00a ff6f 	bl	b3f8 <ll_conn_acquire>
		if (!conn) {
     51a:	4605      	mov	r5, r0
     51c:	2800      	cmp	r0, #0
     51e:	f000 81a3 	beq.w	868 <__data_size+0x49>
		if (!conn_lll->link_tx_free) {
     522:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
     524:	f64f 73ff 	movw	r3, #65535	; 0xffff
     528:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
     52a:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
     52e:	2800      	cmp	r0, #0
     530:	f000 8194 	beq.w	85c <__data_size+0x3d>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     534:	f105 0268 	add.w	r2, r5, #104	; 0x68
     538:	f105 0164 	add.w	r1, r5, #100	; 0x64
     53c:	930b      	str	r3, [sp, #44]	; 0x2c
     53e:	f005 fc3f 	bl	5dc0 <memq_init>
			conn_lll->phy_tx = PHY_1M;
     542:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     546:	4b70      	ldr	r3, [pc, #448]	; (708 <CONFIG_BT_COMPANY_ID+0x117>)
			conn_lll->phy_tx = PHY_1M;
     548:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
     54c:	f022 0207 	bic.w	r2, r2, #7
     550:	f442 7288 	orr.w	r2, r2, #272	; 0x110
     554:	f042 0201 	orr.w	r2, r2, #1
     558:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
     55c:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
     560:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     564:	f062 027f 	orn	r2, r2, #127	; 0x7f
     568:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
     56c:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
     570:	f022 0207 	bic.w	r2, r2, #7
     574:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
     578:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
     57c:	f022 0207 	bic.w	r2, r2, #7
     580:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
     584:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
     588:	f022 0207 	bic.w	r2, r2, #7
     58c:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     590:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
     594:	2600      	movs	r6, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     596:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
     59a:	2206      	movs	r2, #6
     59c:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
     5a0:	e9c5 6612 	strd	r6, r6, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     5a4:	676e      	str	r6, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
     5a6:	f8a5 6078 	strh.w	r6, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
     5aa:	85ee      	strh	r6, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
     5ac:	632e      	str	r6, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
     5ae:	f885 603b 	strb.w	r6, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
     5b2:	652e      	str	r6, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
     5b4:	f8a5 60c4 	strh.w	r6, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
     5b8:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
     5bc:	f8a5 60d0 	strh.w	r6, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
     5c0:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     5c4:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
     5c8:	f885 60e6 	strb.w	r6, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
     5cc:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     5d0:	f8a5 610c 	strh.w	r6, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     5d4:	f8a5 6120 	strh.w	r6, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
     5d8:	f008 f9f6 	bl	89c8 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     5dc:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     5e0:	f8a5 6138 	strh.w	r6, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     5e4:	f022 0203 	bic.w	r2, r2, #3
     5e8:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
     5ec:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
     5f0:	f8a5 6140 	strh.w	r6, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
     5f4:	f022 0218 	bic.w	r2, r2, #24
     5f8:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     5fc:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
     600:	f885 6143 	strb.w	r6, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     604:	f022 0207 	bic.w	r2, r2, #7
     608:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
     60c:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
     610:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
     614:	f366 1245 	bfi	r2, r6, #5, #1
     618:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
     61c:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     620:	f8a5 6164 	strh.w	r6, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
     624:	f366 02c3 	bfi	r2, r6, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
     628:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
     62c:	2100      	movs	r1, #0
     62e:	2000      	movs	r0, #0
     630:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
     634:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->periph.llcp_type = 0U;
     638:	f885 60d9 	strb.w	r6, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
     63c:	f8a5 6184 	strh.w	r6, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
     640:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     644:	f8a5 61ac 	strh.w	r6, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
     648:	f8a5 61b8 	strh.w	r6, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     64c:	f00b fa1a 	bl	ba84 <ull_conn_default_tx_octets_get>
     650:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
     654:	f00b fa1c 	bl	ba90 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     658:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
     65c:	4a2b      	ldr	r2, [pc, #172]	; (70c <CONFIG_BT_COMPANY_ID+0x11b>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     65e:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     662:	400a      	ands	r2, r1
     664:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     668:	f00b fa18 	bl	ba9c <ull_conn_default_phy_tx_get>
     66c:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
     670:	f360 0202 	bfi	r2, r0, #0, #3
     674:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     678:	f00b fa16 	bl	baa8 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
     67c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     67e:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     680:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     684:	f8c5 61c4 	str.w	r6, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     688:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
     68c:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
     690:	e9c5 6674 	strd	r6, r6, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     694:	e9c5 6672 	strd	r6, r6, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
     698:	e9c5 6605 	strd	r6, r6, [r5, #20]
	hdr->ref = 0U;
     69c:	702e      	strb	r6, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     69e:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     6a0:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
     6a4:	f010 fc8c 	bl	10fc0 <lll_clock_wait>
		if (err) {
     6a8:	2800      	cmp	r0, #0
     6aa:	f040 80d3 	bne.w	854 <__data_size+0x35>
	uint8_t ch_map = lll->chan_map;
     6ae:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6b2:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     6b4:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6b8:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
     6bc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     6c0:	f005 fcfe 	bl	60c0 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     6c4:	bb20      	cbnz	r0, 710 <CONFIG_BT_COMPANY_ID+0x11f>
	if (adv->lll.conn) {
     6c6:	6a23      	ldr	r3, [r4, #32]
     6c8:	2b00      	cmp	r3, #0
     6ca:	f43f af04 	beq.w	4d6 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x62>
		conn_release(adv);
     6ce:	f009 fc7b 	bl	9fc8 <conn_release.constprop.0>
     6d2:	e700      	b.n	4d6 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x62>
	if (!adv || !adv->is_enabled) {
     6d4:	f012 0701 	ands.w	r7, r2, #1
     6d8:	f43f aefe 	beq.w	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
	if (adv->lll.conn) {
     6dc:	6a23      	ldr	r3, [r4, #32]
     6de:	b15b      	cbz	r3, 6f8 <CONFIG_BT_COMPANY_ID+0x107>
		adv->lll.conn->periph.cancelled = 1U;
     6e0:	f893 2020 	ldrb.w	r2, [r3, #32]
     6e4:	f042 0202 	orr.w	r2, r2, #2
     6e8:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
     6ec:	6a23      	ldr	r3, [r4, #32]
     6ee:	f893 3020 	ldrb.w	r3, [r3, #32]
     6f2:	07d8      	lsls	r0, r3, #31
     6f4:	f53f aeef 	bmi.w	4d6 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x62>
}
     6f8:	b00f      	add	sp, #60	; 0x3c
     6fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6fe:	f009 bca5 	b.w	a04c <disable.part.0>
     702:	bf00      	nop
     704:	20001c28 	.word	0x20001c28
     708:	01480148 	.word	0x01480148
     70c:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
     710:	f899 1001 	ldrb.w	r1, [r9, #1]
     714:	4602      	mov	r2, r0
     716:	4640      	mov	r0, r8
     718:	f009 fd3c 	bl	a194 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     71c:	4958      	ldr	r1, [pc, #352]	; (880 <__data_size+0x61>)
	uint16_t interval = adv->interval;
     71e:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
     722:	2331      	movs	r3, #49	; 0x31
     724:	2500      	movs	r5, #0
     726:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     728:	fba0 0101 	umull	r0, r1, r0, r1
     72c:	a352      	add	r3, pc, #328	; (adr r3, 878 <__data_size+0x59>)
     72e:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
     732:	e9c4 5505 	strd	r5, r5, [r4, #20]
	hdr->ref = 0U;
     736:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
     738:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
     73a:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     73c:	f7ff fcd0 	bl	e0 <__aeabi_uldivmod>
     740:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
     742:	f006 fdc1 	bl	72c8 <ticker_ticks_now_get>
     746:	4606      	mov	r6, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     748:	f1b9 0f00 	cmp.w	r9, #0
     74c:	d108      	bne.n	760 <CONFIG_BT_COMPANY_ID+0x16f>
     74e:	f898 5000 	ldrb.w	r5, [r8]
     752:	f005 050f 	and.w	r5, r5, #15
     756:	f1a5 0501 	sub.w	r5, r5, #1
     75a:	fab5 f585 	clz	r5, r5
     75e:	096d      	lsrs	r5, r5, #5
     760:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
     764:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     766:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
     76a:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     76e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
     772:	d036      	beq.n	7e2 <CONFIG_BT_COMPANY_ID+0x1f1>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     774:	2000      	movs	r0, #0
     776:	4a43      	ldr	r2, [pc, #268]	; (884 <__data_size+0x65>)
     778:	f8df 910c 	ldr.w	r9, [pc, #268]	; 888 <__data_size+0x69>
     77c:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
     77e:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     780:	f10d 0834 	add.w	r8, sp, #52	; 0x34
     784:	9301      	str	r3, [sp, #4]
     786:	9205      	str	r2, [sp, #20]
     788:	2103      	movs	r1, #3
     78a:	e9cd 0002 	strd	r0, r0, [sp, #8]
     78e:	9406      	str	r4, [sp, #24]
     790:	4633      	mov	r3, r6
     792:	9000      	str	r0, [sp, #0]
     794:	f8cd 8020 	str.w	r8, [sp, #32]
     798:	f8cd 901c 	str.w	r9, [sp, #28]
     79c:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
     79e:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     7a0:	f006 fcc6 	bl	7130 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     7a4:	4641      	mov	r1, r8
     7a6:	f008 feb7 	bl	9518 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     7aa:	2800      	cmp	r0, #0
     7ac:	d18b      	bne.n	6c6 <CONFIG_BT_COMPANY_ID+0xd5>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     7ae:	4a37      	ldr	r2, [pc, #220]	; (88c <__data_size+0x6d>)
     7b0:	9205      	str	r2, [sp, #20]
     7b2:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     7b6:	9200      	str	r2, [sp, #0]
     7b8:	e9cd 0003 	strd	r0, r0, [sp, #12]
     7bc:	e9cd 0001 	strd	r0, r0, [sp, #4]
     7c0:	f8cd 901c 	str.w	r9, [sp, #28]
     7c4:	f8cd 8020 	str.w	r8, [sp, #32]
     7c8:	9406      	str	r4, [sp, #24]
     7ca:	4633      	mov	r3, r6
     7cc:	2201      	movs	r2, #1
     7ce:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     7d0:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     7d2:	f006 fcad 	bl	7130 <ticker_start>
     7d6:	e02e      	b.n	836 <__data_size+0x17>
			return 0;
     7d8:	2700      	movs	r7, #0
}
     7da:	4638      	mov	r0, r7
     7dc:	b00f      	add	sp, #60	; 0x3c
     7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_adv_ticker_ext[handle].ticks_slot_window =
     7e2:	4a2b      	ldr	r2, [pc, #172]	; (890 <__data_size+0x71>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     7e4:	482b      	ldr	r0, [pc, #172]	; (894 <__data_size+0x75>)
		ret = ticker_start_ext(
     7e6:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     7e8:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     7ec:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
     7f0:	9406      	str	r4, [sp, #24]
     7f2:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
     7f4:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     7f6:	2391      	movs	r3, #145	; 0x91
     7f8:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
     7fc:	4b22      	ldr	r3, [pc, #136]	; (888 <__data_size+0x69>)
     7fe:	9307      	str	r3, [sp, #28]
     800:	4b20      	ldr	r3, [pc, #128]	; (884 <__data_size+0x65>)
     802:	9305      	str	r3, [sp, #20]
     804:	f64f 73ff 	movw	r3, #65535	; 0xffff
     808:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
     80a:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
     80e:	9303      	str	r3, [sp, #12]
     810:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     814:	a318      	add	r3, pc, #96	; (adr r3, 878 <__data_size+0x59>)
     816:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
     81a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
     81e:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     822:	f7ff fc5d 	bl	e0 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     826:	4633      	mov	r3, r6
     828:	e9cd 5000 	strd	r5, r0, [sp]
     82c:	464a      	mov	r2, r9
     82e:	4628      	mov	r0, r5
     830:	2103      	movs	r1, #3
     832:	f006 fc27 	bl	7084 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
     836:	4641      	mov	r1, r8
     838:	f008 fe6e 	bl	9518 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     83c:	2800      	cmp	r0, #0
     83e:	f47f af42 	bne.w	6c6 <CONFIG_BT_COMPANY_ID+0xd5>
	adv->is_enabled = 1;
     842:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
     846:	f043 0301 	orr.w	r3, r3, #1
     84a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	return 0;
     84e:	e643      	b.n	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
			return BT_HCI_ERR_INVALID_PARAM;
     850:	2712      	movs	r7, #18
     852:	e641      	b.n	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
			conn_release(adv);
     854:	f009 fbb8 	bl	9fc8 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     858:	2703      	movs	r7, #3
     85a:	e63d      	b.n	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     85c:	f105 006c 	add.w	r0, r5, #108	; 0x6c
     860:	6768      	str	r0, [r5, #116]	; 0x74
     862:	e667      	b.n	534 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc0>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     864:	2707      	movs	r7, #7
     866:	e637      	b.n	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
			ll_rx_release(node_rx);
     868:	4658      	mov	r0, fp
     86a:	f008 fdd7 	bl	941c <ll_rx_release>
			ll_rx_link_release(link);
     86e:	4650      	mov	r0, sl
     870:	f008 fdc8 	bl	9404 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     874:	2707      	movs	r7, #7
     876:	e62f      	b.n	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
     878:	1afd498d 	.word	0x1afd498d
     87c:	00000007 	.word	0x00000007
     880:	3b9aca00 	.word	0x3b9aca00
     884:	0000a205 	.word	0x0000a205
     888:	00008a69 	.word	0x00008a69
     88c:	00009d59 	.word	0x00009d59
     890:	20001c9c 	.word	0x20001c9c
     894:	84e72a00 	.word	0x84e72a00

00000898 <ull_adv_time_update>:
{
     898:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
     89a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
     89e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
     8a0:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
     8a4:	460d      	mov	r5, r1
     8a6:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     8a8:	2101      	movs	r1, #1
     8aa:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
     8ae:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
     8b0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     8b4:	f005 fc04 	bl	60c0 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
     8b8:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     8ba:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
     8bc:	4628      	mov	r0, r5
     8be:	f009 fc69 	bl	a194 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     8c2:	491d      	ldr	r1, [pc, #116]	; (938 <ull_adv_time_update+0xa0>)
     8c4:	a31a      	add	r3, pc, #104	; (adr r3, 930 <ull_adv_time_update+0x98>)
     8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
     8ca:	fba0 0101 	umull	r0, r1, r0, r1
     8ce:	f7ff fc07 	bl	e0 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
     8d2:	6923      	ldr	r3, [r4, #16]
     8d4:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     8d6:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
     8d8:	d220      	bcs.n	91c <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
     8da:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
     8dc:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     8de:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     8e0:	4a16      	ldr	r2, [pc, #88]	; (93c <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     8e2:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     8e4:	4b16      	ldr	r3, [pc, #88]	; (940 <ull_adv_time_update+0xa8>)
     8e6:	1aa2      	subs	r2, r4, r2
     8e8:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
     8ec:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     8ee:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     8f0:	2300      	movs	r3, #0
     8f2:	440a      	add	r2, r1
     8f4:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
     8f6:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     8f8:	4912      	ldr	r1, [pc, #72]	; (944 <ull_adv_time_update+0xac>)
     8fa:	9105      	str	r1, [sp, #20]
     8fc:	e9cd 3303 	strd	r3, r3, [sp, #12]
     900:	2103      	movs	r1, #3
     902:	b2d2      	uxtb	r2, r2
     904:	9606      	str	r6, [sp, #24]
     906:	9300      	str	r3, [sp, #0]
     908:	4618      	mov	r0, r3
     90a:	f006 fc83 	bl	7214 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
     90e:	4631      	mov	r1, r6
     910:	f008 fe02 	bl	9518 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     914:	b948      	cbnz	r0, 92a <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
     916:	6125      	str	r5, [r4, #16]
}
     918:	b00a      	add	sp, #40	; 0x28
     91a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
     91c:	d902      	bls.n	924 <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
     91e:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
     920:	2300      	movs	r3, #0
     922:	e7dc      	b.n	8de <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
     924:	2000      	movs	r0, #0
}
     926:	b00a      	add	sp, #40	; 0x28
     928:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     92a:	200c      	movs	r0, #12
}
     92c:	b00a      	add	sp, #40	; 0x28
     92e:	bd70      	pop	{r4, r5, r6, pc}
     930:	1afd498d 	.word	0x1afd498d
     934:	00000007 	.word	0x00000007
     938:	3b9aca00 	.word	0x3b9aca00
     93c:	20001c28 	.word	0x20001c28
     940:	8d3dcb09 	.word	0x8d3dcb09
     944:	00008a69 	.word	0x00008a69

00000948 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
     948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     94c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
     94e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
     950:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     952:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     956:	b2b6      	uxth	r6, r6
     958:	4431      	add	r1, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     95a:	f013 0307 	ands.w	r3, r3, #7
{
     95e:	b08b      	sub	sp, #44	; 0x2c
     960:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     962:	fa1f f981 	uxth.w	r9, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     966:	f040 81a3 	bne.w	cb0 <event_conn_upd_prep+0x368>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     96a:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
     96e:	eba9 0107 	sub.w	r1, r9, r7
     972:	fa1f f981 	uxth.w	r9, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
     976:	0409      	lsls	r1, r1, #16
     978:	f100 820c 	bmi.w	d94 <event_conn_upd_prep+0x44c>
     97c:	4690      	mov	r8, r2
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
     97e:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
     982:	2a00      	cmp	r2, #0
     984:	f2c0 8135 	blt.w	bf2 <event_conn_upd_prep+0x2aa>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
     988:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
     98c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     990:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
     994:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
     998:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
     99c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     9a0:	4293      	cmp	r3, r2
     9a2:	d006      	beq.n	9b2 <event_conn_upd_prep+0x6a>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     9a4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     9a8:	f003 030f 	and.w	r3, r3, #15
     9ac:	2b06      	cmp	r3, #6
     9ae:	f000 8247 	beq.w	e40 <event_conn_upd_prep+0x4f8>
	if (conn == conn_upd_curr) {
     9b2:	4bb1      	ldr	r3, [pc, #708]	; (c78 <event_conn_upd_prep+0x330>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     9b4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
     9b8:	681a      	ldr	r2, [r3, #0]
     9ba:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
     9bc:	bf04      	itt	eq
     9be:	2200      	moveq	r2, #0
     9c0:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
     9c2:	2d00      	cmp	r5, #0
     9c4:	f000 8144 	beq.w	c50 <event_conn_upd_prep+0x308>
     9c8:	6828      	ldr	r0, [r5, #0]
     9ca:	2800      	cmp	r0, #0
     9cc:	f000 8140 	beq.w	c50 <event_conn_upd_prep+0x308>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
     9d0:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
     9d4:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
     9d8:	6842      	ldr	r2, [r0, #4]
     9da:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
     9de:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
     9e0:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     9e4:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
     9e8:	f000 8117 	beq.w	c1a <event_conn_upd_prep+0x2d2>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
     9ec:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
     9f0:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     9f2:	2318      	movs	r3, #24
     9f4:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
     9f6:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
     9f8:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
     9fc:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
     9fe:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
     a00:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     a02:	4629      	mov	r1, r5
     a04:	f008 fd10 	bl	9428 <ll_rx_put>
		ll_rx_sched();
     a08:	f008 fd18 	bl	943c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
     a0c:	68a3      	ldr	r3, [r4, #8]
     a0e:	2b00      	cmp	r3, #0
     a10:	f2c0 80f7 	blt.w	c02 <event_conn_upd_prep+0x2ba>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
     a14:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
     a16:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
     a1a:	fb10 f009 	smulbb	r0, r0, r9
     a1e:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
     a20:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
     a24:	fb15 f301 	smulbb	r3, r5, r1
     a28:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
     a2a:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     a2c:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
     a30:	f0c0 80ce 	bcc.w	bd0 <event_conn_upd_prep+0x288>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     a34:	fb05 0111 	mls	r1, r5, r1, r0
     a38:	f240 43e2 	movw	r3, #1250	; 0x4e2
     a3c:	488f      	ldr	r0, [pc, #572]	; (c7c <event_conn_upd_prep+0x334>)
     a3e:	b289      	uxth	r1, r1
     a40:	fb03 f101 	mul.w	r1, r3, r1
     a44:	fba1 0100 	umull	r0, r1, r1, r0
     a48:	a389      	add	r3, pc, #548	; (adr r3, c70 <event_conn_upd_prep+0x328>)
     a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
     a4e:	f7ff fb47 	bl	e0 <__aeabi_uldivmod>
     a52:	eba8 0800 	sub.w	r8, r8, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
     a56:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
     a58:	441f      	add	r7, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
     a5a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
     a5e:	1bbe      	subs	r6, r7, r6
     a60:	4456      	add	r6, sl
		conn_interval_us = conn->llcp_cu.interval *
     a62:	f240 47e2 	movw	r7, #1250	; 0x4e2
		} else if (lll->role) {
     a66:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
     a68:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
     a6a:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
     a6e:	f2c0 8196 	blt.w	d9e <event_conn_upd_prep+0x456>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
     a72:	4a83      	ldr	r2, [pc, #524]	; (c80 <event_conn_upd_prep+0x338>)
     a74:	4983      	ldr	r1, [pc, #524]	; (c84 <event_conn_upd_prep+0x33c>)
     a76:	4884      	ldr	r0, [pc, #528]	; (c88 <event_conn_upd_prep+0x340>)
     a78:	f640 438d 	movw	r3, #3213	; 0xc8d
     a7c:	f016 fa77 	bl	16f6e <printk>
     a80:	4040      	eors	r0, r0
     a82:	f380 8811 	msr	BASEPRI, r0
     a86:	f04f 0003 	mov.w	r0, #3
     a8a:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
     a8c:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
     a8e:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     a90:	4a7e      	ldr	r2, [pc, #504]	; (c8c <event_conn_upd_prep+0x344>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     a92:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     a96:	497e      	ldr	r1, [pc, #504]	; (c90 <event_conn_upd_prep+0x348>)
		lll->latency = conn->llcp_cu.latency;
     a98:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112
     a9c:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     a9e:	4432      	add	r2, r6
     aa0:	fbb2 f2f6 	udiv	r2, r2, r6
     aa4:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     aa8:	f242 7210 	movw	r2, #10000	; 0x2710
     aac:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     ab0:	4431      	add	r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     ab2:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     ab4:	fbb1 f1f6 	udiv	r1, r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     ab8:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
     abc:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
     ac0:	8563      	strh	r3, [r4, #42]	; 0x2a
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     ac2:	b28a      	uxth	r2, r1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     ac4:	1d83      	adds	r3, r0, #6
     ac6:	429a      	cmp	r2, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     ac8:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     acc:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     ad0:	dd04      	ble.n	adc <event_conn_upd_prep+0x194>
     ad2:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
     ad6:	33fa      	adds	r3, #250	; 0xfa
     ad8:	441a      	add	r2, r3
     ada:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
     adc:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     ae0:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
     ae4:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
     ae6:	bf44      	itt	mi
     ae8:	2300      	movmi	r3, #0
     aea:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     aee:	2102      	movs	r1, #2
     af0:	2001      	movs	r0, #1
     af2:	f012 fa27 	bl	12f44 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     af6:	2200      	movs	r2, #0
     af8:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     afa:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     afc:	2001      	movs	r0, #1
     afe:	f005 f9af 	bl	5e60 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
     b02:	4964      	ldr	r1, [pc, #400]	; (c94 <event_conn_upd_prep+0x34c>)
     b04:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
     b08:	4620      	mov	r0, r4
     b0a:	f005 f939 	bl	5d80 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
     b0e:	f100 0a03 	add.w	sl, r0, #3
     b12:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
     b16:	4b60      	ldr	r3, [pc, #384]	; (c98 <event_conn_upd_prep+0x350>)
     b18:	9400      	str	r4, [sp, #0]
     b1a:	4652      	mov	r2, sl
     b1c:	2101      	movs	r1, #1
     b1e:	2000      	movs	r0, #0
     b20:	f006 fb90 	bl	7244 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     b24:	f030 0302 	bics.w	r3, r0, #2
     b28:	d00c      	beq.n	b44 <event_conn_upd_prep+0x1fc>
     b2a:	4a55      	ldr	r2, [pc, #340]	; (c80 <event_conn_upd_prep+0x338>)
     b2c:	495b      	ldr	r1, [pc, #364]	; (c9c <event_conn_upd_prep+0x354>)
     b2e:	4856      	ldr	r0, [pc, #344]	; (c88 <event_conn_upd_prep+0x340>)
     b30:	f640 43bc 	movw	r3, #3260	; 0xcbc
     b34:	f016 fa1b 	bl	16f6e <printk>
     b38:	4040      	eors	r0, r0
     b3a:	f380 8811 	msr	BASEPRI, r0
     b3e:	f04f 0003 	mov.w	r0, #3
     b42:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     b44:	4e4d      	ldr	r6, [pc, #308]	; (c7c <event_conn_upd_prep+0x334>)
     b46:	fbab 6b06 	umull	r6, fp, fp, r6
     b4a:	a349      	add	r3, pc, #292	; (adr r3, c70 <event_conn_upd_prep+0x328>)
     b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
     b50:	4630      	mov	r0, r6
     b52:	4659      	mov	r1, fp
     b54:	f7ff fac4 	bl	e0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     b58:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
     b5a:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     b5e:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
     b60:	484f      	ldr	r0, [pc, #316]	; (ca0 <event_conn_upd_prep+0x358>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     b62:	6923      	ldr	r3, [r4, #16]
     b64:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
     b66:	fba5 0100 	umull	r0, r1, r5, r0
     b6a:	2307      	movs	r3, #7
     b6c:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     b70:	4b4c      	ldr	r3, [pc, #304]	; (ca4 <event_conn_upd_prep+0x35c>)
     b72:	9307      	str	r3, [sp, #28]
     b74:	4b4c      	ldr	r3, [pc, #304]	; (ca8 <event_conn_upd_prep+0x360>)
     b76:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
     b78:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     b7a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
     b7e:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     b82:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
     b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b88:	2300      	movs	r3, #0
     b8a:	f7ff faa9 	bl	e0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     b8e:	4643      	mov	r3, r8
     b90:	e9cd 5001 	strd	r5, r0, [sp, #4]
     b94:	9700      	str	r7, [sp, #0]
     b96:	4652      	mov	r2, sl
     b98:	2101      	movs	r1, #1
     b9a:	2000      	movs	r0, #0
     b9c:	f006 fac8 	bl	7130 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     ba0:	f030 0302 	bics.w	r3, r0, #2
     ba4:	d00c      	beq.n	bc0 <event_conn_upd_prep+0x278>
     ba6:	4a36      	ldr	r2, [pc, #216]	; (c80 <event_conn_upd_prep+0x338>)
     ba8:	493c      	ldr	r1, [pc, #240]	; (c9c <event_conn_upd_prep+0x354>)
     baa:	4837      	ldr	r0, [pc, #220]	; (c88 <event_conn_upd_prep+0x340>)
     bac:	f640 43d6 	movw	r3, #3286	; 0xcd6
     bb0:	f016 f9dd 	bl	16f6e <printk>
     bb4:	4040      	eors	r0, r0
     bb6:	f380 8811 	msr	BASEPRI, r0
     bba:	f04f 0003 	mov.w	r0, #3
     bbe:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
     bc0:	f1b9 0f00 	cmp.w	r9, #0
     bc4:	f040 8136 	bne.w	e34 <event_conn_upd_prep+0x4ec>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
     bc8:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
     bca:	b00b      	add	sp, #44	; 0x2c
     bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     bd0:	1a1b      	subs	r3, r3, r0
     bd2:	492a      	ldr	r1, [pc, #168]	; (c7c <event_conn_upd_prep+0x334>)
     bd4:	f240 40e2 	movw	r0, #1250	; 0x4e2
     bd8:	fb03 f000 	mul.w	r0, r3, r0
     bdc:	fba0 0101 	umull	r0, r1, r0, r1
     be0:	a323      	add	r3, pc, #140	; (adr r3, c70 <event_conn_upd_prep+0x328>)
     be2:	e9d3 2300 	ldrd	r2, r3, [r3]
     be6:	f7ff fa7b 	bl	e0 <__aeabi_uldivmod>
     bea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     bee:	4480      	add	r8, r0
     bf0:	e731      	b.n	a56 <event_conn_upd_prep+0x10e>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
     bf2:	f890 20d9 	ldrb.w	r2, [r0, #217]	; 0xd9
     bf6:	2a00      	cmp	r2, #0
     bf8:	f43f aec6 	beq.w	988 <event_conn_upd_prep+0x40>
			conn->periph.llcp_type = LLCP_NONE;
     bfc:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
     c00:	e6c6      	b.n	990 <event_conn_upd_prep+0x48>
			uint32_t ticks_prepare_to_start =
     c02:	68e1      	ldr	r1, [r4, #12]
     c04:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
     c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     c0a:	4291      	cmp	r1, r2
     c0c:	bf2c      	ite	cs
     c0e:	4488      	addcs	r8, r1
     c10:	4490      	addcc	r8, r2
     c12:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
     c14:	eba8 0803 	sub.w	r8, r8, r3
     c18:	e6fc      	b.n	a14 <event_conn_upd_prep+0xcc>
		if ((conn->llcp_cu.interval != lll->interval) ||
     c1a:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
     c1e:	4594      	cmp	ip, r2
     c20:	f47f aee4 	bne.w	9ec <event_conn_upd_prep+0xa4>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     c24:	f240 4ce2 	movw	ip, #1250	; 0x4e2
     c28:	fb0c fe03 	mul.w	lr, ip, r3
     c2c:	f242 7c10 	movw	ip, #10000	; 0x2710
     c30:	fb0c ec01 	mla	ip, ip, r1, lr
     c34:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     c38:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
     c3c:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
     c40:	fa1f fc8c 	uxth.w	ip, ip
     c44:	45e6      	cmp	lr, ip
     c46:	f47f aed1 	bne.w	9ec <event_conn_upd_prep+0xa4>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
     c4a:	2301      	movs	r3, #1
     c4c:	712b      	strb	r3, [r5, #4]
     c4e:	e6d8      	b.n	a02 <event_conn_upd_prep+0xba>
		LL_ASSERT(rx && rx->hdr.link);
     c50:	4a0b      	ldr	r2, [pc, #44]	; (c80 <event_conn_upd_prep+0x338>)
     c52:	4916      	ldr	r1, [pc, #88]	; (cac <event_conn_upd_prep+0x364>)
     c54:	480c      	ldr	r0, [pc, #48]	; (c88 <event_conn_upd_prep+0x340>)
     c56:	f640 4311 	movw	r3, #3089	; 0xc11
     c5a:	f016 f988 	bl	16f6e <printk>
     c5e:	4040      	eors	r0, r0
     c60:	f380 8811 	msr	BASEPRI, r0
     c64:	f04f 0003 	mov.w	r0, #3
     c68:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
     c6a:	6828      	ldr	r0, [r5, #0]
     c6c:	e6b0      	b.n	9d0 <event_conn_upd_prep+0x88>
     c6e:	bf00      	nop
     c70:	1afd498d 	.word	0x1afd498d
     c74:	00000007 	.word	0x00000007
     c78:	20001cbc 	.word	0x20001cbc
     c7c:	3b9aca00 	.word	0x3b9aca00
     c80:	0001bc28 	.word	0x0001bc28
     c84:	0001b828 	.word	0x0001b828
     c88:	0001b7c8 	.word	0x0001b7c8
     c8c:	026259ff 	.word	0x026259ff
     c90:	01c9c37f 	.word	0x01c9c37f
     c94:	20000ed0 	.word	0x20000ed0
     c98:	0000ac69 	.word	0x0000ac69
     c9c:	0001bd08 	.word	0x0001bd08
     ca0:	1afd498d 	.word	0x1afd498d
     ca4:	0000ac11 	.word	0x0000ac11
     ca8:	0000f269 	.word	0x0000f269
     cac:	0001bcf4 	.word	0x0001bcf4
		rx = ll_pdu_rx_alloc_peek(1);
     cb0:	2001      	movs	r0, #1
     cb2:	f008 fbc9 	bl	9448 <ll_pdu_rx_alloc_peek>
		if (!rx) {
     cb6:	4606      	mov	r6, r0
     cb8:	2800      	cmp	r0, #0
     cba:	f000 80cf 	beq.w	e5c <event_conn_upd_prep+0x514>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     cbe:	4874      	ldr	r0, [pc, #464]	; (e90 <event_conn_upd_prep+0x548>)
     cc0:	f005 f828 	bl	5d14 <mem_acquire>
		if (!tx) {
     cc4:	4605      	mov	r5, r0
     cc6:	2800      	cmp	r0, #0
     cc8:	f000 80c8 	beq.w	e5c <event_conn_upd_prep+0x514>
	if (!conn_upd_curr) {
     ccc:	4b71      	ldr	r3, [pc, #452]	; (e94 <event_conn_upd_prep+0x54c>)
     cce:	681a      	ldr	r2, [r3, #0]
     cd0:	2a00      	cmp	r2, #0
     cd2:	f000 80bb 	beq.w	e4c <event_conn_upd_prep+0x504>
		(void)ll_pdu_rx_alloc();
     cd6:	f008 fbd5 	bl	9484 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     cda:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
     cdc:	6832      	ldr	r2, [r6, #0]
     cde:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
     ce2:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     ce4:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
     ce8:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     cec:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     cee:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     cf0:	230c      	movs	r3, #12
     cf2:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     cf4:	71e8      	strb	r0, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
     cf6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
     cfa:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     cfc:	4a66      	ldr	r2, [pc, #408]	; (e98 <event_conn_upd_prep+0x550>)
     cfe:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
					      conn->lll.latency + 6;
     d02:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     d04:	fba2 2303 	umull	r2, r3, r2, r3
     d08:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     d0a:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     d0e:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
     d12:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     d16:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     d1a:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     d1e:	f8a5 300d 	strh.w	r3, [r5, #13]
					      conn->lll.latency + 6;
     d22:	3106      	adds	r1, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     d24:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
     d28:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
     d2c:	4449      	add	r1, r9
	    conn->tx_head &&
     d2e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
					      conn->lll.latency + 6;
     d32:	b289      	uxth	r1, r1
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     d34:	f360 0202 	bfi	r2, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
     d38:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     d3c:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     d40:	f8a5 1011 	strh.w	r1, [r5, #17]
	if (
     d44:	b1bb      	cbz	r3, d76 <event_conn_upd_prep+0x42e>
	    !conn->llcp_enc.pause_tx &&
     d46:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
     d4a:	0796      	lsls	r6, r2, #30
     d4c:	d413      	bmi.n	d76 <event_conn_upd_prep+0x42e>
	    !conn->llcp_phy.pause_tx &&
     d4e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
     d52:	07d0      	lsls	r0, r2, #31
     d54:	d40f      	bmi.n	d76 <event_conn_upd_prep+0x42e>
		if (conn->tx_head == conn->tx_data) {
     d56:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
     d5a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
     d5c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
     d60:	d07f      	beq.n	e62 <event_conn_upd_prep+0x51a>
		} else if (!conn->tx_ctrl) {
     d62:	b962      	cbnz	r2, d7e <event_conn_upd_prep+0x436>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
     d64:	791a      	ldrb	r2, [r3, #4]
     d66:	f002 0203 	and.w	r2, r2, #3
     d6a:	2a03      	cmp	r2, #3
     d6c:	f000 8085 	beq.w	e7a <event_conn_upd_prep+0x532>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
     d70:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
     d74:	e005      	b.n	d82 <event_conn_upd_prep+0x43a>
		if (!conn->tx_ctrl) {
     d76:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
     d7a:	2a00      	cmp	r2, #0
     d7c:	d068      	beq.n	e50 <event_conn_upd_prep+0x508>
	tx->next = conn->tx_ctrl_last->next;
     d7e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
     d82:	681a      	ldr	r2, [r3, #0]
     d84:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
     d86:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
     d88:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
     d8a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
     d8e:	b90b      	cbnz	r3, d94 <event_conn_upd_prep+0x44c>
		conn->tx_data_last = tx;
     d90:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
     d94:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
     d98:	b00b      	add	sp, #44	; 0x2c
     d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				lll->periph.window_widening_periodic_us *
     d9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
     da0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     da2:	fb02 3319 	mls	r3, r2, r9, r3
     da6:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
     da8:	f010 f95c 	bl	11064 <lll_clock_ppm_local_get>
     dac:	4605      	mov	r5, r0
     dae:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
     db2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
     db6:	f010 f957 	bl	11068 <lll_clock_ppm_get>
     dba:	4405      	add	r5, r0
     dbc:	fb06 f505 	mul.w	r5, r6, r5
     dc0:	4b36      	ldr	r3, [pc, #216]	; (e9c <event_conn_upd_prep+0x554>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
     dc2:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
     dc6:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
     dca:	f205 253f 	addw	r5, r5, #575	; 0x23f
     dce:	fba3 3505 	umull	r3, r5, r3, r5
     dd2:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
     dd4:	fb07 f202 	mul.w	r2, r7, r2
			lll->periph.window_widening_prepare_us +=
     dd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_size_prepare_us =
     dda:	6522      	str	r2, [r4, #80]	; 0x50
				lll->periph.window_widening_periodic_us *
     ddc:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
     de0:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
     de2:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
     de4:	3a96      	subs	r2, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
     de6:	4293      	cmp	r3, r2
     de8:	bf28      	it	cs
     dea:	4613      	movcs	r3, r2
			lll->periph.window_widening_periodic_us =
     dec:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->periph.window_widening_periodic_us;
     dee:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     df2:	4d2b      	ldr	r5, [pc, #172]	; (ea0 <event_conn_upd_prep+0x558>)
			lll->periph.window_widening_prepare_us +=
     df4:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
     df8:	2300      	movs	r3, #0
     dfa:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     dfe:	fba0 0105 	umull	r0, r1, r0, r5
     e02:	a321      	add	r3, pc, #132	; (adr r3, e88 <event_conn_upd_prep+0x540>)
     e04:	e9d3 2300 	ldrd	r2, r3, [r3]
     e08:	f7ff f96a 	bl	e0 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     e0c:	4922      	ldr	r1, [pc, #136]	; (e98 <event_conn_upd_prep+0x550>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     e0e:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     e12:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
     e16:	fba1 3000 	umull	r3, r0, r1, r0
     e1a:	0a80      	lsrs	r0, r0, #10
     e1c:	fb07 f000 	mul.w	r0, r7, r0
     e20:	a319      	add	r3, pc, #100	; (adr r3, e88 <event_conn_upd_prep+0x540>)
     e22:	e9d3 2300 	ldrd	r2, r3, [r3]
     e26:	fba0 0105 	umull	r0, r1, r0, r5
     e2a:	f7ff f959 	bl	e0 <__aeabi_uldivmod>
     e2e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
     e32:	e62d      	b.n	a90 <event_conn_upd_prep+0x148>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
     e34:	2201      	movs	r2, #1
     e36:	2102      	movs	r1, #2
     e38:	4610      	mov	r0, r2
     e3a:	f005 f811 	bl	5e60 <mayfly_enable>
     e3e:	e6c3      	b.n	bc8 <event_conn_upd_prep+0x280>
			conn->procedure_expire = 0U;
     e40:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     e42:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
     e46:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
     e4a:	e5b2      	b.n	9b2 <event_conn_upd_prep+0x6a>
		conn_upd_curr = conn;
     e4c:	601c      	str	r4, [r3, #0]
     e4e:	e742      	b.n	cd6 <event_conn_upd_prep+0x38e>
			tx->next = conn->tx_head;
     e50:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
     e52:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
     e56:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
     e5a:	e798      	b.n	d8e <event_conn_upd_prep+0x446>
			return -ENOBUFS;
     e5c:	f06f 0068 	mvn.w	r0, #104	; 0x68
     e60:	e6b3      	b.n	bca <event_conn_upd_prep+0x282>
			conn->tx_data = conn->tx_data->next;
     e62:	6819      	ldr	r1, [r3, #0]
     e64:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
     e68:	2a00      	cmp	r2, #0
     e6a:	d188      	bne.n	d7e <event_conn_upd_prep+0x436>
			tx->next = conn->tx_head->next;
     e6c:	681a      	ldr	r2, [r3, #0]
     e6e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
     e70:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
     e72:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
     e74:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
     e78:	e789      	b.n	d8e <event_conn_upd_prep+0x446>
	    ((pdu_data_tx->llctrl.opcode !=
     e7a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
     e7c:	2a03      	cmp	r2, #3
     e7e:	d0f5      	beq.n	e6c <event_conn_upd_prep+0x524>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
     e80:	2a0a      	cmp	r2, #10
     e82:	f47f af75 	bne.w	d70 <event_conn_upd_prep+0x428>
     e86:	e7f1      	b.n	e6c <event_conn_upd_prep+0x524>
     e88:	1afd498d 	.word	0x1afd498d
     e8c:	00000007 	.word	0x00000007
     e90:	20001d50 	.word	0x20001d50
     e94:	20001cbc 	.word	0x20001cbc
     e98:	d1b71759 	.word	0xd1b71759
     e9c:	431bde83 	.word	0x431bde83
     ea0:	3b9aca00 	.word	0x3b9aca00
     ea4:	00000000 	.word	0x00000000

00000ea8 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
     ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
     eac:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
     eae:	f8d2 8000 	ldr.w	r8, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
     eb2:	681b      	ldr	r3, [r3, #0]
{
     eb4:	b097      	sub	sp, #92	; 0x5c
     eb6:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
     eb8:	930a      	str	r3, [sp, #40]	; 0x28

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
     eba:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
     ebc:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
     ec0:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
     ec4:	4605      	mov	r5, r0
     ec6:	4617      	mov	r7, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
     ec8:	a814      	add	r0, sp, #80	; 0x50
     eca:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
     ecc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
     ed0:	f016 fe14 	bl	17afc <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
     ed4:	f894 9011 	ldrb.w	r9, [r4, #17]

	if (rl_idx != FILTER_IDX_NONE) {
     ed8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
     edc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
     ee0:	d05b      	beq.n	f9a <ull_periph_setup+0xf2>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
     ee2:	465a      	mov	r2, fp
     ee4:	f10d 0147 	add.w	r1, sp, #71	; 0x47
     ee8:	4648      	mov	r0, r9
     eea:	f00e fccf 	bl	f88c <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
     eee:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
     ef2:	3302      	adds	r3, #2
     ef4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
     ef8:	4629      	mov	r1, r5
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
     efa:	2203      	movs	r2, #3
	link = rx->link;
     efc:	f851 6b2e 	ldr.w	r6, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
     f00:	f107 0008 	add.w	r0, r7, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
     f04:	f107 0a04 	add.w	sl, r7, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
     f08:	f016 fdf8 	bl	17afc <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
     f0c:	f107 0318 	add.w	r3, r7, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
     f10:	2204      	movs	r2, #4
     f12:	f105 012a 	add.w	r1, r5, #42	; 0x2a
     f16:	4650      	mov	r0, sl
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
     f18:	930b      	str	r3, [sp, #44]	; 0x2c
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
     f1a:	f016 fdef 	bl	17afc <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
     f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     f20:	2205      	movs	r2, #5
     f22:	f105 013a 	add.w	r1, r5, #58	; 0x3a
     f26:	4618      	mov	r0, r3
     f28:	f016 fde8 	bl	17afc <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
     f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     f2e:	2105      	movs	r1, #5
     f30:	4618      	mov	r0, r3
     f32:	f005 f8c5 	bl	60c0 <util_ones_count_get>
     f36:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
     f38:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
     f3c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
     f40:	f360 0305 	bfi	r3, r0, #0, #6
     f44:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
     f46:	f3c2 0304 	ubfx	r3, r2, #0, #5
     f4a:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
     f4c:	8eab      	ldrh	r3, [r5, #52]	; 0x34
     f4e:	81fb      	strh	r3, [r7, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
     f50:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
     f52:	b299      	uxth	r1, r3
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
     f54:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
     f58:	d905      	bls.n	f66 <ull_periph_setup+0xbe>
     f5a:	331b      	adds	r3, #27
     f5c:	f003 031f 	and.w	r3, r3, #31
     f60:	2b0b      	cmp	r3, #11
     f62:	d800      	bhi.n	f66 <ull_periph_setup+0xbe>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
     f64:	b9f9      	cbnz	r1, fa6 <ull_periph_setup+0xfe>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
     f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
     f68:	68ec      	ldr	r4, [r5, #12]
	hdr->disabled_cb = NULL;
     f6a:	2200      	movs	r2, #0
     f6c:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
     f6e:	f897 3020 	ldrb.w	r3, [r7, #32]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
     f72:	4630      	mov	r0, r6
	lll->periph.initiated = 0U;
     f74:	f362 0300 	bfi	r3, r2, #0, #1
	rx->type = NODE_RX_TYPE_RELEASE;
     f78:	2601      	movs	r6, #1
	lll->periph.initiated = 0U;
     f7a:	f887 3020 	strb.w	r3, [r7, #32]
		ll_rx_put(link, rx);
     f7e:	4629      	mov	r1, r5
	rx->type = NODE_RX_TYPE_RELEASE;
     f80:	712e      	strb	r6, [r5, #4]
		ll_rx_put(link, rx);
     f82:	f008 fa51 	bl	9428 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
     f86:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
     f88:	7126      	strb	r6, [r4, #4]
	ll_rx_put(link, rx);
     f8a:	4621      	mov	r1, r4
     f8c:	f008 fa4c 	bl	9428 <ll_rx_put>
	ll_rx_sched();
     f90:	f008 fa54 	bl	943c <ll_rx_sched>
}
     f94:	b017      	add	sp, #92	; 0x5c
     f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
     f9a:	2206      	movs	r2, #6
     f9c:	a914      	add	r1, sp, #80	; 0x50
     f9e:	4658      	mov	r0, fp
     fa0:	f016 fdac 	bl	17afc <memcpy>
     fa4:	e7a8      	b.n	ef8 <ull_periph_setup+0x50>
	((struct lll_adv *)ftr->param)->conn = NULL;
     fa6:	6823      	ldr	r3, [r4, #0]
     fa8:	2000      	movs	r0, #0
     faa:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
     fac:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
     fb0:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
     fb4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
     fb8:	823b      	strh	r3, [r7, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
     fba:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
     fbe:	0952      	lsrs	r2, r2, #5
     fc0:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
     fc4:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
     fc6:	920d      	str	r2, [sp, #52]	; 0x34
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
     fc8:	f240 42e2 	movw	r2, #1250	; 0x4e2
     fcc:	fb02 f001 	mul.w	r0, r2, r1
	conn->periph.sca = pdu_adv->connect_ind.sca;
     fd0:	f888 30d8 	strb.w	r3, [r8, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
     fd4:	900b      	str	r0, [sp, #44]	; 0x2c
		ceiling_fraction(((lll_clock_ppm_local_get() +
     fd6:	f010 f845 	bl	11064 <lll_clock_ppm_local_get>
     fda:	900c      	str	r0, [sp, #48]	; 0x30
     fdc:	f898 00d8 	ldrb.w	r0, [r8, #216]	; 0xd8
     fe0:	f3c0 00c2 	ubfx	r0, r0, #3, #3
     fe4:	f010 f840 	bl	11068 <lll_clock_ppm_get>
     fe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     fea:	49c5      	ldr	r1, [pc, #788]	; (1300 <ull_periph_setup+0x458>)
     fec:	4403      	add	r3, r0
     fee:	980b      	ldr	r0, [sp, #44]	; 0x2c
     ff0:	fb00 f303 	mul.w	r3, r0, r3
     ff4:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
     ff8:	f203 233f 	addw	r3, r3, #575	; 0x23f
     ffc:	fba1 2303 	umull	r2, r3, r1, r3
    1000:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
    1002:	627b      	str	r3, [r7, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1004:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1008:	8a39      	ldrh	r1, [r7, #16]
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    100a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    100e:	fb03 f202 	mul.w	r2, r3, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    1012:	0843      	lsrs	r3, r0, #1
    1014:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1016:	63ba      	str	r2, [r7, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    1018:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    101a:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    101c:	4ab9      	ldr	r2, [pc, #740]	; (1304 <ull_periph_setup+0x45c>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    101e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    1022:	469e      	mov	lr, r3
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1024:	4bb8      	ldr	r3, [pc, #736]	; (1308 <ull_periph_setup+0x460>)
    1026:	4684      	mov	ip, r0
    1028:	4403      	add	r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    102a:	4402      	add	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    102c:	fbb3 f3f0 	udiv	r3, r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1030:	fbb2 f2f0 	udiv	r2, r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1034:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1038:	f8a8 20c6 	strh.w	r2, [r8, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    103c:	fa1f f28e 	uxth.w	r2, lr
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1040:	fb00 c202 	mla	r2, r0, r2, ip
    1044:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1046:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1048:	fbb2 f2fc 	udiv	r2, r2, ip
    104c:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1050:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1052:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1054:	f8a8 20ce 	strh.w	r2, [r8, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1058:	dd04      	ble.n	1064 <ull_periph_setup+0x1bc>
    105a:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    105e:	31fa      	adds	r1, #250	; 0xfa
    1060:	440a      	add	r2, r1
    1062:	b292      	uxth	r2, r2
    1064:	f8a8 20ca 	strh.w	r2, [r8, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    1068:	4651      	mov	r1, sl
    106a:	2204      	movs	r2, #4
    106c:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
    1070:	f016 fd44 	bl	17afc <memcpy>
		chan_sel = pdu_adv->chan_sel;
    1074:	462b      	mov	r3, r5
    1076:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    107a:	f3c2 1140 	ubfx	r1, r2, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    107e:	07da      	lsls	r2, r3, #31
		chan_sel = pdu_adv->chan_sel;
    1080:	910f      	str	r1, [sp, #60]	; 0x3c
    1082:	910c      	str	r1, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1084:	f100 8115 	bmi.w	12b2 <ull_periph_setup+0x40a>
	cc->status = 0U;
    1088:	f44f 7380 	mov.w	r3, #256	; 0x100
    108c:	83ab      	strh	r3, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    108e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1090:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    1094:	f00f f96a 	bl	1036c <ull_filter_lll_lrpa_used>
    1098:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    109a:	2206      	movs	r2, #6
    109c:	f105 002b 	add.w	r0, r5, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    10a0:	2900      	cmp	r1, #0
    10a2:	f000 80eb 	beq.w	127c <ull_periph_setup+0x3d4>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    10a6:	f105 0124 	add.w	r1, r5, #36	; 0x24
    10aa:	f016 fd27 	bl	17afc <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    10ae:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    10b2:	f105 0025 	add.w	r0, r5, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
    10b6:	f000 80e4 	beq.w	1282 <ull_periph_setup+0x3da>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    10ba:	a914      	add	r1, sp, #80	; 0x50
    10bc:	2206      	movs	r2, #6
    10be:	f016 fd1d 	bl	17afc <memcpy>
	cc->peer_addr_type = peer_addr_type;
    10c2:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    10c6:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    10c8:	4659      	mov	r1, fp
    10ca:	2206      	movs	r2, #6
    10cc:	f105 001f 	add.w	r0, r5, #31
    10d0:	f016 fd14 	bl	17afc <memcpy>
	cc->sca = conn->periph.sca;
    10d4:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
	cc->interval = lll->interval;
    10d8:	89fa      	ldrh	r2, [r7, #14]
    10da:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
    10dc:	8a3a      	ldrh	r2, [r7, #16]
    10de:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->periph.sca;
    10e0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    10e4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->periph.sca;
    10e8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    10ec:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    10ee:	4640      	mov	r0, r8
    10f0:	f00a f98e 	bl	b410 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    10f4:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    10f6:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
    10f8:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    10fa:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    10fc:	4630      	mov	r0, r6
    10fe:	f008 f993 	bl	9428 <ll_rx_put>
		rx->handle = lll->handle;
    1102:	89bb      	ldrh	r3, [r7, #12]
    1104:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    1106:	231b      	movs	r3, #27
    1108:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    110a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    110c:	682e      	ldr	r6, [r5, #0]
		if (chan_sel) {
    110e:	2b00      	cmp	r3, #0
    1110:	f040 80bc 	bne.w	128c <ull_periph_setup+0x3e4>
			cs->csa = 0x00;
    1114:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    1118:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    111a:	4629      	mov	r1, r5
    111c:	4630      	mov	r0, r6
    111e:	f008 f983 	bl	9428 <ll_rx_put>
	ll_rx_sched();
    1122:	f008 f98b 	bl	943c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1126:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
    112a:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
    112e:	f8b7 6042 	ldrh.w	r6, [r7, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1132:	2101      	movs	r1, #1
    1134:	f000 0007 	and.w	r0, r0, #7
    1138:	f00f fda4 	bl	10c84 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    113c:	442e      	add	r6, r5
    113e:	f506 76e1 	add.w	r6, r6, #450	; 0x1c2
    1142:	1831      	adds	r1, r6, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1144:	4682      	mov	sl, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1146:	4871      	ldr	r0, [pc, #452]	; (130c <ull_periph_setup+0x464>)
	conn->ull.ticks_active_to_start = 0U;
    1148:	f04f 0900 	mov.w	r9, #0
	conn->ull.ticks_prepare_to_start =
    114c:	2331      	movs	r3, #49	; 0x31
    114e:	f8c8 3008 	str.w	r3, [r8, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1152:	fba1 0100 	umull	r0, r1, r1, r0
    1156:	a368      	add	r3, pc, #416	; (adr r3, 12f8 <ull_periph_setup+0x450>)
    1158:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
    115c:	f8c8 9004 	str.w	r9, [r8, #4]
	conn->ull.ticks_preempt_to_start =
    1160:	f8c8 900c 	str.w	r9, [r8, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1164:	f7fe ffbc 	bl	e0 <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    116a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    116c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
    116e:	68e5      	ldr	r5, [r4, #12]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1170:	1b9e      	subs	r6, r3, r6
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1172:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1176:	fb03 5502 	mla	r5, r3, r2, r5
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    117a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    117e:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
	conn_offset_us -= ready_delay_us;
    1182:	eba5 030a 	sub.w	r3, r5, sl
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1186:	464a      	mov	r2, r9
    1188:	2102      	movs	r1, #2
	conn->ull.ticks_slot =
    118a:	f8c8 0010 	str.w	r0, [r8, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    118e:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    1190:	930b      	str	r3, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1192:	f004 fe65 	bl	5e60 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1196:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    1198:	4628      	mov	r0, r5
    119a:	f009 f9fb 	bl	a594 <ull_adv_handle_get>
    119e:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    11a0:	4b5b      	ldr	r3, [pc, #364]	; (1310 <ull_periph_setup+0x468>)
    11a2:	9500      	str	r5, [sp, #0]
    11a4:	b2d2      	uxtb	r2, r2
    11a6:	4648      	mov	r0, r9
    11a8:	2101      	movs	r1, #1
    11aa:	f006 f84b 	bl	7244 <ticker_stop>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    11ae:	2801      	cmp	r0, #1
    11b0:	f000 808c 	beq.w	12cc <ull_periph_setup+0x424>
	if (adv->lll.is_hdcd) {
    11b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    11ba:	07db      	lsls	r3, r3, #31
    11bc:	d471      	bmi.n	12a2 <ull_periph_setup+0x3fa>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    11be:	4640      	mov	r0, r8
    11c0:	f00a f926 	bl	b410 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    11c4:	f8df 9144 	ldr.w	r9, [pc, #324]	; 130c <ull_periph_setup+0x464>
    11c8:	fba6 5609 	umull	r5, r6, r6, r9
    11cc:	a34a      	add	r3, pc, #296	; (adr r3, 12f8 <ull_periph_setup+0x450>)
    11ce:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    11d2:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    11d4:	4631      	mov	r1, r6
    11d6:	4628      	mov	r0, r5
    11d8:	f7fe ff82 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    11dc:	68a3      	ldr	r3, [r4, #8]
    11de:	f8cd 8018 	str.w	r8, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    11e2:	f10b 0403 	add.w	r4, fp, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    11e6:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
    11ea:	4b4a      	ldr	r3, [pc, #296]	; (1314 <ull_periph_setup+0x46c>)
    11ec:	9307      	str	r3, [sp, #28]
    11ee:	4b4a      	ldr	r3, [pc, #296]	; (1318 <ull_periph_setup+0x470>)
    11f0:	9305      	str	r3, [sp, #20]
    11f2:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    11f6:	9308      	str	r3, [sp, #32]
    11f8:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    11fc:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    1200:	4846      	ldr	r0, [pc, #280]	; (131c <ull_periph_setup+0x474>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1202:	f04f 0a00 	mov.w	sl, #0
    1206:	e9cd a303 	strd	sl, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    120a:	fba7 0100 	umull	r0, r1, r7, r0
    120e:	2307      	movs	r3, #7
    1210:	1a28      	subs	r0, r5, r0
    1212:	fb03 1107 	mla	r1, r3, r7, r1
    1216:	eb66 0101 	sbc.w	r1, r6, r1
    121a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    121e:	2300      	movs	r3, #0
    1220:	f7fe ff5e 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1226:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    122a:	fba3 0109 	umull	r0, r1, r3, r9
    122e:	a332      	add	r3, pc, #200	; (adr r3, 12f8 <ull_periph_setup+0x450>)
    1230:	e9d3 2300 	ldrd	r2, r3, [r3]
    1234:	f7fe ff54 	bl	e0 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1238:	b2e4      	uxtb	r4, r4
    123a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    123e:	9000      	str	r0, [sp, #0]
    1240:	465b      	mov	r3, fp
    1242:	4622      	mov	r2, r4
    1244:	2101      	movs	r1, #1
    1246:	4650      	mov	r0, sl
    1248:	f005 ff72 	bl	7130 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    124c:	f030 0302 	bics.w	r3, r0, #2
    1250:	d00c      	beq.n	126c <ull_periph_setup+0x3c4>
    1252:	4a33      	ldr	r2, [pc, #204]	; (1320 <ull_periph_setup+0x478>)
    1254:	4933      	ldr	r1, [pc, #204]	; (1324 <ull_periph_setup+0x47c>)
    1256:	4834      	ldr	r0, [pc, #208]	; (1328 <ull_periph_setup+0x480>)
    1258:	f240 13c9 	movw	r3, #457	; 0x1c9
    125c:	f015 fe87 	bl	16f6e <printk>
    1260:	4040      	eors	r0, r0
    1262:	f380 8811 	msr	BASEPRI, r0
    1266:	f04f 0003 	mov.w	r0, #3
    126a:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    126c:	2201      	movs	r2, #1
    126e:	2102      	movs	r1, #2
    1270:	4610      	mov	r0, r2
    1272:	f004 fdf5 	bl	5e60 <mayfly_enable>
}
    1276:	b017      	add	sp, #92	; 0x5c
    1278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    127c:	f016 fc49 	bl	17b12 <memset>
    1280:	e715      	b.n	10ae <ull_periph_setup+0x206>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
    1282:	2206      	movs	r2, #6
    1284:	2100      	movs	r1, #0
    1286:	f016 fc44 	bl	17b12 <memset>
    128a:	e71a      	b.n	10c2 <ull_periph_setup+0x21a>
			lll->data_chan_sel = 1;
    128c:	7f7b      	ldrb	r3, [r7, #29]
    128e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1292:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    1294:	4650      	mov	r0, sl
    1296:	f00e f905 	bl	f4a4 <lll_chan_id>
			cs->csa = 0x01;
    129a:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    129c:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
    129e:	772b      	strb	r3, [r5, #28]
    12a0:	e73b      	b.n	111a <ull_periph_setup+0x272>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    12a2:	2300      	movs	r3, #0
    12a4:	2201      	movs	r2, #1
    12a6:	9300      	str	r3, [sp, #0]
    12a8:	4618      	mov	r0, r3
    12aa:	4611      	mov	r1, r2
    12ac:	f005 ffca 	bl	7244 <ticker_stop>
    12b0:	e785      	b.n	11be <ull_periph_setup+0x316>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    12b2:	4a1b      	ldr	r2, [pc, #108]	; (1320 <ull_periph_setup+0x478>)
    12b4:	491d      	ldr	r1, [pc, #116]	; (132c <ull_periph_setup+0x484>)
    12b6:	481c      	ldr	r0, [pc, #112]	; (1328 <ull_periph_setup+0x480>)
    12b8:	23f1      	movs	r3, #241	; 0xf1
    12ba:	f015 fe58 	bl	16f6e <printk>
    12be:	4040      	eors	r0, r0
    12c0:	f380 8811 	msr	BASEPRI, r0
    12c4:	f04f 0003 	mov.w	r0, #3
    12c8:	df02      	svc	2
    12ca:	e6dd      	b.n	1088 <ull_periph_setup+0x1e0>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    12cc:	f008 f962 	bl	9594 <ull_disable_mark_get>
    12d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12d2:	4283      	cmp	r3, r0
    12d4:	f43f af6e 	beq.w	11b4 <ull_periph_setup+0x30c>
    12d8:	4a11      	ldr	r2, [pc, #68]	; (1320 <ull_periph_setup+0x478>)
    12da:	4915      	ldr	r1, [pc, #84]	; (1330 <ull_periph_setup+0x488>)
    12dc:	4812      	ldr	r0, [pc, #72]	; (1328 <ull_periph_setup+0x480>)
    12de:	f240 239f 	movw	r3, #671	; 0x29f
    12e2:	f015 fe44 	bl	16f6e <printk>
    12e6:	4040      	eors	r0, r0
    12e8:	f380 8811 	msr	BASEPRI, r0
    12ec:	f04f 0003 	mov.w	r0, #3
    12f0:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    12f2:	e75f      	b.n	11b4 <ull_periph_setup+0x30c>
    12f4:	f3af 8000 	nop.w
    12f8:	1afd498d 	.word	0x1afd498d
    12fc:	00000007 	.word	0x00000007
    1300:	431bde83 	.word	0x431bde83
    1304:	026259ff 	.word	0x026259ff
    1308:	01c9c37f 	.word	0x01c9c37f
    130c:	3b9aca00 	.word	0x3b9aca00
    1310:	0000f22d 	.word	0x0000f22d
    1314:	0000f1fd 	.word	0x0000f1fd
    1318:	0000f269 	.word	0x0000f269
    131c:	1afd498d 	.word	0x1afd498d
    1320:	0001be1c 	.word	0x0001be1c
    1324:	0001bd08 	.word	0x0001bd08
    1328:	0001b7c8 	.word	0x0001b7c8
    132c:	0001b8b4 	.word	0x0001b8b4
    1330:	0001be78 	.word	0x0001be78

00001334 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1334:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    1336:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1338:	b08a      	sub	sp, #40	; 0x28
    133a:	4604      	mov	r4, r0
    133c:	460e      	mov	r6, r1
    133e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    1340:	2b03      	cmp	r3, #3
    1342:	d820      	bhi.n	1386 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    1344:	e8df f003 	tbb	[pc, r3]
    1348:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    134c:	4911      	ldr	r1, [pc, #68]	; (1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    134e:	4628      	mov	r0, r5
    1350:	f016 fb8b 	bl	17a6a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1354:	7863      	ldrb	r3, [r4, #1]
    1356:	9304      	str	r3, [sp, #16]
    1358:	78a3      	ldrb	r3, [r4, #2]
    135a:	9303      	str	r3, [sp, #12]
    135c:	78e3      	ldrb	r3, [r4, #3]
    135e:	9302      	str	r3, [sp, #8]
    1360:	7923      	ldrb	r3, [r4, #4]
    1362:	9301      	str	r3, [sp, #4]
    1364:	7963      	ldrb	r3, [r4, #5]
    1366:	9300      	str	r3, [sp, #0]
    1368:	4a0b      	ldr	r2, [pc, #44]	; (1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>)
    136a:	79a3      	ldrb	r3, [r4, #6]
    136c:	9505      	str	r5, [sp, #20]
    136e:	211e      	movs	r1, #30
    1370:	4630      	mov	r0, r6
    1372:	f015 fe09 	bl	16f88 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    1376:	b00a      	add	sp, #40	; 0x28
    1378:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    137a:	4908      	ldr	r1, [pc, #32]	; (139c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14>)
    137c:	e7e7      	b.n	134e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    137e:	4908      	ldr	r1, [pc, #32]	; (13a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18>)
    1380:	e7e5      	b.n	134e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    1382:	4908      	ldr	r1, [pc, #32]	; (13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>)
    1384:	e7e3      	b.n	134e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1386:	4a08      	ldr	r2, [pc, #32]	; (13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>)
    1388:	210a      	movs	r1, #10
    138a:	4628      	mov	r0, r5
    138c:	f015 fdfc 	bl	16f88 <snprintk>
		break;
    1390:	e7e0      	b.n	1354 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    1392:	bf00      	nop
    1394:	0001c698 	.word	0x0001c698
    1398:	0001c6c1 	.word	0x0001c6c1
    139c:	0001c69f 	.word	0x0001c69f
    13a0:	0001c6a6 	.word	0x0001c6a6
    13a4:	0001c6b0 	.word	0x0001c6b0
    13a8:	0001c6ba 	.word	0x0001c6ba

000013ac <disconnecting>:
  bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

  printk("Connected: %s\n", addr);
}

static void disconnecting(struct bt_conn *conn, uint8_t reason) {
    13ac:	b510      	push	{r4, lr}
    13ae:	b088      	sub	sp, #32
    13b0:	460c      	mov	r4, r1
  char addr[BT_ADDR_LE_STR_LEN];

  bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    13b2:	f017 f9a7 	bl	18704 <bt_conn_get_dst>
    13b6:	4669      	mov	r1, sp
    13b8:	f7ff ffbc 	bl	1334 <bt_addr_le_to_str.constprop.0.isra.0>

  printk("Disconnected %s (reason 0x%02x)\n", addr, reason);
    13bc:	4803      	ldr	r0, [pc, #12]	; (13cc <disconnecting+0x20>)
    13be:	4622      	mov	r2, r4
    13c0:	4669      	mov	r1, sp
    13c2:	f015 fdd4 	bl	16f6e <printk>
}
    13c6:	b008      	add	sp, #32
    13c8:	bd10      	pop	{r4, pc}
    13ca:	bf00      	nop
    13cc:	0001c6e4 	.word	0x0001c6e4

000013d0 <connection_established>:
static void connection_established(struct bt_conn *conn, uint8_t err) {
    13d0:	b500      	push	{lr}
    13d2:	b089      	sub	sp, #36	; 0x24
  if (err) {
    13d4:	b129      	cbz	r1, 13e2 <connection_established+0x12>
    printk("Connection failed (err 0x%02x)\n", err);
    13d6:	4809      	ldr	r0, [pc, #36]	; (13fc <connection_established+0x2c>)
}
    13d8:	b009      	add	sp, #36	; 0x24
    13da:	f85d eb04 	ldr.w	lr, [sp], #4
    printk("Connection failed (err 0x%02x)\n", err);
    13de:	f015 bdc6 	b.w	16f6e <printk>
  bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    13e2:	f017 f98f 	bl	18704 <bt_conn_get_dst>
    13e6:	4669      	mov	r1, sp
    13e8:	f7ff ffa4 	bl	1334 <bt_addr_le_to_str.constprop.0.isra.0>
  printk("Connected: %s\n", addr);
    13ec:	4804      	ldr	r0, [pc, #16]	; (1400 <connection_established+0x30>)
    13ee:	4669      	mov	r1, sp
    13f0:	f015 fdbd 	bl	16f6e <printk>
}
    13f4:	b009      	add	sp, #36	; 0x24
    13f6:	f85d fb04 	ldr.w	pc, [sp], #4
    13fa:	bf00      	nop
    13fc:	0001c705 	.word	0x0001c705
    1400:	0001c725 	.word	0x0001c725

00001404 <main>:

/* struct collecting connection callbacks */
struct bt_conn_cb beacon_connection_callbacks = {
    .connected = connection_established, .disconnected = disconnecting};

int main() {
    1404:	b570      	push	{r4, r5, r6, lr}

  int err;

  /* Initialize the Bluetooth Subsystem, no callback passed here */
  err = bt_enable(NULL);
    1406:	2000      	movs	r0, #0
int main() {
    1408:	b088      	sub	sp, #32
  err = bt_enable(NULL);
    140a:	f002 f991 	bl	3730 <bt_enable>
  if (err) {
    140e:	4604      	mov	r4, r0
    1410:	b130      	cbz	r0, 1420 <main+0x1c>
    printk("Bluetooth init failed (err %d)\n", err);
    1412:	4601      	mov	r1, r0
    1414:	4810      	ldr	r0, [pc, #64]	; (1458 <main+0x54>)
   * scan-response callback */
  // err = bt_le_adv_start(BT_LE_ADV_NCONN,
  // advertisement,ARRAY_SIZE(advertisement), NULL,0);

  if (err) {
    printk("Advertising failed to start (err %d)\n", err);
    1416:	f015 fdaa 	bl	16f6e <printk>
  } else {
    printk("Started advertising.\n");
  }

  return 0;
    141a:	4620      	mov	r0, r4
    141c:	b008      	add	sp, #32
    141e:	bd70      	pop	{r4, r5, r6, pc}
  bt_conn_cb_register(&beacon_connection_callbacks);
    1420:	480e      	ldr	r0, [pc, #56]	; (145c <main+0x58>)
  struct bt_le_adv_param adv_param = {
    1422:	4e0f      	ldr	r6, [pc, #60]	; (1460 <main+0x5c>)
  bt_conn_cb_register(&beacon_connection_callbacks);
    1424:	f003 f8de 	bl	45e4 <bt_conn_cb_register>
  printk("Set up advertising.");
    1428:	480e      	ldr	r0, [pc, #56]	; (1464 <main+0x60>)
    142a:	f015 fda0 	bl	16f6e <printk>
  struct bt_le_adv_param adv_param = {
    142e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1430:	ad03      	add	r5, sp, #12
    1432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1434:	6833      	ldr	r3, [r6, #0]
    1436:	602b      	str	r3, [r5, #0]
  err = bt_le_adv_start(&adv_param, advertisement, ARRAY_SIZE(advertisement),
    1438:	490b      	ldr	r1, [pc, #44]	; (1468 <main+0x64>)
    143a:	9400      	str	r4, [sp, #0]
    143c:	4623      	mov	r3, r4
    143e:	2202      	movs	r2, #2
    1440:	a803      	add	r0, sp, #12
    1442:	f002 fd57 	bl	3ef4 <bt_le_adv_start>
  if (err) {
    1446:	4604      	mov	r4, r0
    1448:	b110      	cbz	r0, 1450 <main+0x4c>
    printk("Advertising failed to start (err %d)\n", err);
    144a:	4601      	mov	r1, r0
    144c:	4807      	ldr	r0, [pc, #28]	; (146c <main+0x68>)
    144e:	e7e2      	b.n	1416 <main+0x12>
    printk("Started advertising.\n");
    1450:	4807      	ldr	r0, [pc, #28]	; (1470 <main+0x6c>)
    1452:	f015 fd8c 	bl	16f6e <printk>
  return 0;
    1456:	e7e0      	b.n	141a <main+0x16>
    1458:	0001c734 	.word	0x0001c734
    145c:	20000188 	.word	0x20000188
    1460:	0001b3c0 	.word	0x0001b3c0
    1464:	0001c754 	.word	0x0001c754
    1468:	0001b438 	.word	0x0001b438
    146c:	0001c768 	.word	0x0001c768
    1470:	0001c78e 	.word	0x0001c78e

00001474 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1474:	680b      	ldr	r3, [r1, #0]
    1476:	3301      	adds	r3, #1
    1478:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    147a:	4b01      	ldr	r3, [pc, #4]	; (1480 <char_out+0xc>)
    147c:	681b      	ldr	r3, [r3, #0]
    147e:	4718      	bx	r3
    1480:	2000019c 	.word	0x2000019c

00001484 <__printk_hook_install>:
	_char_out = fn;
    1484:	4b01      	ldr	r3, [pc, #4]	; (148c <__printk_hook_install+0x8>)
    1486:	6018      	str	r0, [r3, #0]
}
    1488:	4770      	bx	lr
    148a:	bf00      	nop
    148c:	2000019c 	.word	0x2000019c

00001490 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    1490:	b507      	push	{r0, r1, r2, lr}
    1492:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    1494:	2100      	movs	r1, #0
{
    1496:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    1498:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    149a:	4803      	ldr	r0, [pc, #12]	; (14a8 <vprintk+0x18>)
    149c:	a901      	add	r1, sp, #4
    149e:	f000 f8f9 	bl	1694 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    14a2:	b003      	add	sp, #12
    14a4:	f85d fb04 	ldr.w	pc, [sp], #4
    14a8:	00001475 	.word	0x00001475

000014ac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    14ac:	b530      	push	{r4, r5, lr}
    14ae:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    14b0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    14b4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    14b6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    14b8:	a901      	add	r1, sp, #4
    14ba:	4805      	ldr	r0, [pc, #20]	; (14d0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    14bc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    14be:	f000 f8e9 	bl	1694 <cbvprintf>

	if (ctx.count < ctx.max) {
    14c2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    14c6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    14c8:	bfb8      	it	lt
    14ca:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    14cc:	b005      	add	sp, #20
    14ce:	bd30      	pop	{r4, r5, pc}
    14d0:	00016f49 	.word	0x00016f49

000014d4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    14d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    14d8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    14dc:	f019 0808 	ands.w	r8, r9, #8
{
    14e0:	4604      	mov	r4, r0
    14e2:	4693      	mov	fp, r2
	if (processing) {
    14e4:	d00d      	beq.n	1502 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    14e6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    14e8:	bf0c      	ite	eq
    14ea:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    14ee:	f049 0920 	orrne.w	r9, r9, #32
    14f2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    14f6:	f38b 8811 	msr	BASEPRI, fp
    14fa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    14fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1502:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1506:	2902      	cmp	r1, #2
    1508:	d107      	bne.n	151a <process_event+0x46>
			evt = process_recheck(mgr);
    150a:	4620      	mov	r0, r4
    150c:	f015 fd49 	bl	16fa2 <process_recheck>
		if (evt == EVT_NOP) {
    1510:	2800      	cmp	r0, #0
    1512:	d0f0      	beq.n	14f6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1514:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1516:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    1518:	d14e      	bne.n	15b8 <process_event+0xe4>
			res = mgr->last_res;
    151a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    151c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    151e:	2f00      	cmp	r7, #0
    1520:	da15      	bge.n	154e <process_event+0x7a>
		*clients = mgr->clients;
    1522:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1524:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1528:	e9c4 8800 	strd	r8, r8, [r4]
    152c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1530:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1532:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1534:	8b21      	ldrh	r1, [r4, #24]
    1536:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    153a:	45ca      	cmp	sl, r9
    153c:	d002      	beq.n	1544 <process_event+0x70>
		if (do_monitors
    153e:	68a3      	ldr	r3, [r4, #8]
    1540:	2b00      	cmp	r3, #0
    1542:	d15a      	bne.n	15fa <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    1544:	b90d      	cbnz	r5, 154a <process_event+0x76>
		    || (transit != NULL)) {
    1546:	2e00      	cmp	r6, #0
    1548:	d071      	beq.n	162e <process_event+0x15a>
    154a:	2300      	movs	r3, #0
    154c:	e056      	b.n	15fc <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    154e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1552:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1554:	2a01      	cmp	r2, #1
    1556:	d81e      	bhi.n	1596 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1558:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    155c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    155e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1560:	b289      	uxth	r1, r1
    1562:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1566:	d10a      	bne.n	157e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1568:	b13d      	cbz	r5, 157a <process_event+0xa6>
    156a:	8b63      	ldrh	r3, [r4, #26]
    156c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    156e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1570:	3301      	adds	r3, #1
    1572:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1574:	2a00      	cmp	r2, #0
    1576:	d1fa      	bne.n	156e <process_event+0x9a>
    1578:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    157a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    157e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1580:	4620      	mov	r0, r4
    1582:	f015 fd0e 	bl	16fa2 <process_recheck>
    1586:	4606      	mov	r6, r0
    1588:	2800      	cmp	r0, #0
    158a:	d0d3      	beq.n	1534 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    158c:	8b23      	ldrh	r3, [r4, #24]
    158e:	f043 0320 	orr.w	r3, r3, #32
    1592:	8323      	strh	r3, [r4, #24]
    1594:	e7cd      	b.n	1532 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1596:	2b04      	cmp	r3, #4
    1598:	d10c      	bne.n	15b4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    159a:	f021 0107 	bic.w	r1, r1, #7
    159e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    15a0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    15a2:	4620      	mov	r0, r4
    15a4:	f015 fcfd 	bl	16fa2 <process_recheck>
    15a8:	4605      	mov	r5, r0
    15aa:	2800      	cmp	r0, #0
    15ac:	d0c1      	beq.n	1532 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    15ae:	f041 0120 	orr.w	r1, r1, #32
    15b2:	8321      	strh	r1, [r4, #24]
    15b4:	2500      	movs	r5, #0
    15b6:	e7bc      	b.n	1532 <process_event+0x5e>
		} else if (evt == EVT_START) {
    15b8:	2803      	cmp	r0, #3
    15ba:	d109      	bne.n	15d0 <process_event+0xfc>
			transit = mgr->transitions->start;
    15bc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15be:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    15c2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15c4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    15c8:	8323      	strh	r3, [r4, #24]
}
    15ca:	2500      	movs	r5, #0
		res = 0;
    15cc:	462f      	mov	r7, r5
    15ce:	e7b1      	b.n	1534 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    15d0:	2804      	cmp	r0, #4
    15d2:	d106      	bne.n	15e2 <process_event+0x10e>
			transit = mgr->transitions->stop;
    15d4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15d6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    15da:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15dc:	f043 0304 	orr.w	r3, r3, #4
    15e0:	e7f2      	b.n	15c8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    15e2:	2805      	cmp	r0, #5
    15e4:	d106      	bne.n	15f4 <process_event+0x120>
			transit = mgr->transitions->reset;
    15e6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15e8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    15ec:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15ee:	f043 0305 	orr.w	r3, r3, #5
    15f2:	e7e9      	b.n	15c8 <process_event+0xf4>
    15f4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    15f6:	462e      	mov	r6, r5
    15f8:	e7e8      	b.n	15cc <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    15fa:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    15fc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1600:	8321      	strh	r1, [r4, #24]
    1602:	f38b 8811 	msr	BASEPRI, fp
    1606:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    160a:	b9fb      	cbnz	r3, 164c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    160c:	bb85      	cbnz	r5, 1670 <process_event+0x19c>
			if (transit != NULL) {
    160e:	b116      	cbz	r6, 1616 <process_event+0x142>
				transit(mgr, transition_complete);
    1610:	491f      	ldr	r1, [pc, #124]	; (1690 <process_event+0x1bc>)
    1612:	4620      	mov	r0, r4
    1614:	47b0      	blx	r6
	__asm__ volatile(
    1616:	f04f 0320 	mov.w	r3, #32
    161a:	f3ef 8b11 	mrs	fp, BASEPRI
    161e:	f383 8812 	msr	BASEPRI_MAX, r3
    1622:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1626:	8b23      	ldrh	r3, [r4, #24]
    1628:	f023 0308 	bic.w	r3, r3, #8
    162c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    162e:	8b23      	ldrh	r3, [r4, #24]
    1630:	06da      	lsls	r2, r3, #27
    1632:	d525      	bpl.n	1680 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1634:	f023 0310 	bic.w	r3, r3, #16
    1638:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    163a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    163c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1640:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1644:	2900      	cmp	r1, #0
    1646:	f47f af5e 	bne.w	1506 <process_event+0x32>
out:
    164a:	e754      	b.n	14f6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    164c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    164e:	2900      	cmp	r1, #0
    1650:	d0dc      	beq.n	160c <process_event+0x138>
	return node->next;
    1652:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    1656:	f8d1 b004 	ldr.w	fp, [r1, #4]
    165a:	463b      	mov	r3, r7
    165c:	4652      	mov	r2, sl
    165e:	4620      	mov	r0, r4
    1660:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1662:	f1b9 0f00 	cmp.w	r9, #0
    1666:	d0d1      	beq.n	160c <process_event+0x138>
    1668:	4649      	mov	r1, r9
    166a:	f8d9 9000 	ldr.w	r9, [r9]
    166e:	e7f2      	b.n	1656 <process_event+0x182>
    1670:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1672:	463b      	mov	r3, r7
    1674:	4652      	mov	r2, sl
    1676:	4620      	mov	r0, r4
    1678:	682d      	ldr	r5, [r5, #0]
    167a:	f015 fcae 	bl	16fda <notify_one>
    167e:	e7c5      	b.n	160c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1680:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1684:	bf1e      	ittt	ne
    1686:	f023 0320 	bicne.w	r3, r3, #32
    168a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    168c:	2102      	movne	r1, #2
    168e:	e7d5      	b.n	163c <process_event+0x168>
    1690:	00017007 	.word	0x00017007

00001694 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1698:	b091      	sub	sp, #68	; 0x44
    169a:	468b      	mov	fp, r1
    169c:	9002      	str	r0, [sp, #8]
    169e:	4692      	mov	sl, r2
    16a0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    16a2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    16a4:	f89a 0000 	ldrb.w	r0, [sl]
    16a8:	b908      	cbnz	r0, 16ae <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    16aa:	4628      	mov	r0, r5
    16ac:	e35f      	b.n	1d6e <cbvprintf+0x6da>
		if (*fp != '%') {
    16ae:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    16b0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    16b4:	d007      	beq.n	16c6 <cbvprintf+0x32>
			OUTC('%');
    16b6:	9b02      	ldr	r3, [sp, #8]
    16b8:	4659      	mov	r1, fp
    16ba:	4798      	blx	r3
    16bc:	2800      	cmp	r0, #0
    16be:	f2c0 8356 	blt.w	1d6e <cbvprintf+0x6da>
    16c2:	3501      	adds	r5, #1
			break;
    16c4:	e212      	b.n	1aec <cbvprintf+0x458>
		} state = {
    16c6:	2218      	movs	r2, #24
    16c8:	2100      	movs	r1, #0
    16ca:	a80a      	add	r0, sp, #40	; 0x28
    16cc:	f016 fa21 	bl	17b12 <memset>
	if (*sp == '%') {
    16d0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    16d4:	2b25      	cmp	r3, #37	; 0x25
    16d6:	d078      	beq.n	17ca <cbvprintf+0x136>
    16d8:	2200      	movs	r2, #0
    16da:	4610      	mov	r0, r2
    16dc:	4696      	mov	lr, r2
    16de:	4694      	mov	ip, r2
    16e0:	4616      	mov	r6, r2
    16e2:	4639      	mov	r1, r7
		switch (*sp) {
    16e4:	f817 3b01 	ldrb.w	r3, [r7], #1
    16e8:	2b2b      	cmp	r3, #43	; 0x2b
    16ea:	f000 809d 	beq.w	1828 <cbvprintf+0x194>
    16ee:	f200 8094 	bhi.w	181a <cbvprintf+0x186>
    16f2:	2b20      	cmp	r3, #32
    16f4:	f000 809b 	beq.w	182e <cbvprintf+0x19a>
    16f8:	2b23      	cmp	r3, #35	; 0x23
    16fa:	f000 809b 	beq.w	1834 <cbvprintf+0x1a0>
    16fe:	b12e      	cbz	r6, 170c <cbvprintf+0x78>
    1700:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1704:	f046 0604 	orr.w	r6, r6, #4
    1708:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    170c:	f1bc 0f00 	cmp.w	ip, #0
    1710:	d005      	beq.n	171e <cbvprintf+0x8a>
    1712:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1716:	f046 0608 	orr.w	r6, r6, #8
    171a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    171e:	f1be 0f00 	cmp.w	lr, #0
    1722:	d005      	beq.n	1730 <cbvprintf+0x9c>
    1724:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1728:	f046 0610 	orr.w	r6, r6, #16
    172c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1730:	b128      	cbz	r0, 173e <cbvprintf+0xaa>
    1732:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1736:	f040 0020 	orr.w	r0, r0, #32
    173a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    173e:	b12a      	cbz	r2, 174c <cbvprintf+0xb8>
    1740:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1748:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    174c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1750:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1754:	2844      	cmp	r0, #68	; 0x44
    1756:	d103      	bne.n	1760 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1758:	f36f 1286 	bfc	r2, #6, #1
    175c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1760:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1764:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1766:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    176a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    176e:	d17b      	bne.n	1868 <cbvprintf+0x1d4>
		conv->width_star = true;
    1770:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1774:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    1778:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    177a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    177e:	781a      	ldrb	r2, [r3, #0]
    1780:	2a2e      	cmp	r2, #46	; 0x2e
    1782:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1786:	bf0c      	ite	eq
    1788:	2101      	moveq	r1, #1
    178a:	2100      	movne	r1, #0
    178c:	f361 0241 	bfi	r2, r1, #1, #1
    1790:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1794:	d174      	bne.n	1880 <cbvprintf+0x1ec>
	if (*sp == '*') {
    1796:	785a      	ldrb	r2, [r3, #1]
    1798:	2a2a      	cmp	r2, #42	; 0x2a
    179a:	d06a      	beq.n	1872 <cbvprintf+0x1de>
	++sp;
    179c:	3301      	adds	r3, #1
	size_t val = 0;
    179e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    17a0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    17a2:	4618      	mov	r0, r3
    17a4:	f810 2b01 	ldrb.w	r2, [r0], #1
    17a8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    17ac:	2f09      	cmp	r7, #9
    17ae:	f240 808e 	bls.w	18ce <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    17b2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    17b6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    17b8:	f3c2 0040 	ubfx	r0, r2, #1, #1
    17bc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    17c0:	f361 0241 	bfi	r2, r1, #1, #1
    17c4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    17c8:	e05a      	b.n	1880 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    17ca:	f10a 0702 	add.w	r7, sl, #2
    17ce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    17d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    17d6:	07d9      	lsls	r1, r3, #31
    17d8:	f140 8149 	bpl.w	1a6e <cbvprintf+0x3da>
			width = va_arg(ap, int);
    17dc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    17e0:	f1b9 0f00 	cmp.w	r9, #0
    17e4:	da07      	bge.n	17f6 <cbvprintf+0x162>
				conv->flag_dash = true;
    17e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    17ea:	f042 0204 	orr.w	r2, r2, #4
    17ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    17f2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    17f6:	075a      	lsls	r2, r3, #29
    17f8:	f140 8142 	bpl.w	1a80 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    17fc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1800:	f1b8 0f00 	cmp.w	r8, #0
    1804:	f280 8141 	bge.w	1a8a <cbvprintf+0x3f6>
				conv->prec_present = false;
    1808:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    180c:	f36f 0341 	bfc	r3, #1, #1
    1810:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1814:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1818:	e137      	b.n	1a8a <cbvprintf+0x3f6>
		switch (*sp) {
    181a:	2b2d      	cmp	r3, #45	; 0x2d
    181c:	d00c      	beq.n	1838 <cbvprintf+0x1a4>
    181e:	2b30      	cmp	r3, #48	; 0x30
    1820:	f47f af6d 	bne.w	16fe <cbvprintf+0x6a>
			conv->flag_zero = true;
    1824:	2201      	movs	r2, #1
	} while (loop);
    1826:	e75c      	b.n	16e2 <cbvprintf+0x4e>
			conv->flag_plus = true;
    1828:	f04f 0c01 	mov.w	ip, #1
    182c:	e759      	b.n	16e2 <cbvprintf+0x4e>
			conv->flag_space = true;
    182e:	f04f 0e01 	mov.w	lr, #1
    1832:	e756      	b.n	16e2 <cbvprintf+0x4e>
			conv->flag_hash = true;
    1834:	2001      	movs	r0, #1
    1836:	e754      	b.n	16e2 <cbvprintf+0x4e>
		switch (*sp) {
    1838:	2601      	movs	r6, #1
    183a:	e752      	b.n	16e2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    183c:	fb0c 0202 	mla	r2, ip, r2, r0
    1840:	3a30      	subs	r2, #48	; 0x30
    1842:	4633      	mov	r3, r6
    1844:	461e      	mov	r6, r3
    1846:	f816 0b01 	ldrb.w	r0, [r6], #1
    184a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    184e:	2f09      	cmp	r7, #9
    1850:	d9f4      	bls.n	183c <cbvprintf+0x1a8>
	if (sp != wp) {
    1852:	4299      	cmp	r1, r3
    1854:	d093      	beq.n	177e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1856:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    185a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    185c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    185e:	f362 0141 	bfi	r1, r2, #1, #1
    1862:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1866:	e78a      	b.n	177e <cbvprintf+0xea>
    1868:	460b      	mov	r3, r1
	size_t val = 0;
    186a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    186c:	f04f 0c0a 	mov.w	ip, #10
    1870:	e7e8      	b.n	1844 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1872:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1876:	f042 0204 	orr.w	r2, r2, #4
    187a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    187e:	3302      	adds	r3, #2
	switch (*sp) {
    1880:	461f      	mov	r7, r3
    1882:	f817 2b01 	ldrb.w	r2, [r7], #1
    1886:	2a6c      	cmp	r2, #108	; 0x6c
    1888:	d041      	beq.n	190e <cbvprintf+0x27a>
    188a:	d825      	bhi.n	18d8 <cbvprintf+0x244>
    188c:	2a68      	cmp	r2, #104	; 0x68
    188e:	d02b      	beq.n	18e8 <cbvprintf+0x254>
    1890:	2a6a      	cmp	r2, #106	; 0x6a
    1892:	d046      	beq.n	1922 <cbvprintf+0x28e>
    1894:	2a4c      	cmp	r2, #76	; 0x4c
    1896:	d04c      	beq.n	1932 <cbvprintf+0x29e>
    1898:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    189a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    189e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    18a2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    18a6:	2a78      	cmp	r2, #120	; 0x78
    18a8:	f200 80d9 	bhi.w	1a5e <cbvprintf+0x3ca>
    18ac:	2a57      	cmp	r2, #87	; 0x57
    18ae:	d84d      	bhi.n	194c <cbvprintf+0x2b8>
    18b0:	2a41      	cmp	r2, #65	; 0x41
    18b2:	d003      	beq.n	18bc <cbvprintf+0x228>
    18b4:	3a45      	subs	r2, #69	; 0x45
    18b6:	2a02      	cmp	r2, #2
    18b8:	f200 80d1 	bhi.w	1a5e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    18bc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    18c0:	2204      	movs	r2, #4
    18c2:	f362 0302 	bfi	r3, r2, #0, #3
    18c6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    18ca:	2301      	movs	r3, #1
			break;
    18cc:	e09e      	b.n	1a0c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    18ce:	fb06 2101 	mla	r1, r6, r1, r2
    18d2:	3930      	subs	r1, #48	; 0x30
    18d4:	4603      	mov	r3, r0
    18d6:	e764      	b.n	17a2 <cbvprintf+0x10e>
	switch (*sp) {
    18d8:	2a74      	cmp	r2, #116	; 0x74
    18da:	d026      	beq.n	192a <cbvprintf+0x296>
    18dc:	2a7a      	cmp	r2, #122	; 0x7a
    18de:	d1db      	bne.n	1898 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    18e0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    18e4:	2206      	movs	r2, #6
    18e6:	e00d      	b.n	1904 <cbvprintf+0x270>
		if (*++sp == 'h') {
    18e8:	785a      	ldrb	r2, [r3, #1]
    18ea:	2a68      	cmp	r2, #104	; 0x68
    18ec:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    18f0:	d106      	bne.n	1900 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    18f2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    18f4:	f361 02c6 	bfi	r2, r1, #3, #4
    18f8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    18fc:	1c9f      	adds	r7, r3, #2
    18fe:	e7cc      	b.n	189a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1900:	4613      	mov	r3, r2
    1902:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1904:	f362 03c6 	bfi	r3, r2, #3, #4
    1908:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    190c:	e7c5      	b.n	189a <cbvprintf+0x206>
		if (*++sp == 'l') {
    190e:	785a      	ldrb	r2, [r3, #1]
    1910:	2a6c      	cmp	r2, #108	; 0x6c
    1912:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1916:	d101      	bne.n	191c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1918:	2104      	movs	r1, #4
    191a:	e7eb      	b.n	18f4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    191c:	4613      	mov	r3, r2
    191e:	2203      	movs	r2, #3
    1920:	e7f0      	b.n	1904 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1922:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1926:	2205      	movs	r2, #5
    1928:	e7ec      	b.n	1904 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    192a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    192e:	2207      	movs	r2, #7
    1930:	e7e8      	b.n	1904 <cbvprintf+0x270>
		conv->unsupported = true;
    1932:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1936:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    193a:	f023 0302 	bic.w	r3, r3, #2
    193e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1942:	f043 0302 	orr.w	r3, r3, #2
    1946:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    194a:	e7a6      	b.n	189a <cbvprintf+0x206>
	switch (conv->specifier) {
    194c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1950:	2920      	cmp	r1, #32
    1952:	f200 8084 	bhi.w	1a5e <cbvprintf+0x3ca>
    1956:	a001      	add	r0, pc, #4	; (adr r0, 195c <cbvprintf+0x2c8>)
    1958:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    195c:	00001a21 	.word	0x00001a21
    1960:	00001a5f 	.word	0x00001a5f
    1964:	00001a5f 	.word	0x00001a5f
    1968:	00001a5f 	.word	0x00001a5f
    196c:	00001a5f 	.word	0x00001a5f
    1970:	00001a5f 	.word	0x00001a5f
    1974:	00001a5f 	.word	0x00001a5f
    1978:	00001a5f 	.word	0x00001a5f
    197c:	00001a5f 	.word	0x00001a5f
    1980:	000018bd 	.word	0x000018bd
    1984:	00001a5f 	.word	0x00001a5f
    1988:	00001a21 	.word	0x00001a21
    198c:	000019e1 	.word	0x000019e1
    1990:	000018bd 	.word	0x000018bd
    1994:	000018bd 	.word	0x000018bd
    1998:	000018bd 	.word	0x000018bd
    199c:	00001a5f 	.word	0x00001a5f
    19a0:	000019e1 	.word	0x000019e1
    19a4:	00001a5f 	.word	0x00001a5f
    19a8:	00001a5f 	.word	0x00001a5f
    19ac:	00001a5f 	.word	0x00001a5f
    19b0:	00001a5f 	.word	0x00001a5f
    19b4:	00001a29 	.word	0x00001a29
    19b8:	00001a21 	.word	0x00001a21
    19bc:	00001a45 	.word	0x00001a45
    19c0:	00001a5f 	.word	0x00001a5f
    19c4:	00001a5f 	.word	0x00001a5f
    19c8:	00001a45 	.word	0x00001a45
    19cc:	00001a5f 	.word	0x00001a5f
    19d0:	00001a21 	.word	0x00001a21
    19d4:	00001a5f 	.word	0x00001a5f
    19d8:	00001a5f 	.word	0x00001a5f
    19dc:	00001a21 	.word	0x00001a21
		conv->specifier_cat = SPECIFIER_SINT;
    19e0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    19e4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    19e6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    19ea:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    19ee:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    19f0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    19f4:	bf02      	ittt	eq
    19f6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    19fa:	f041 0101 	orreq.w	r1, r1, #1
    19fe:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1a02:	2a63      	cmp	r2, #99	; 0x63
    1a04:	d131      	bne.n	1a6a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1a06:	3b00      	subs	r3, #0
    1a08:	bf18      	it	ne
    1a0a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1a0c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1a10:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1a14:	430b      	orrs	r3, r1
    1a16:	f363 0241 	bfi	r2, r3, #1, #1
    1a1a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1a1e:	e6d8      	b.n	17d2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1a20:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1a24:	2002      	movs	r0, #2
    1a26:	e7de      	b.n	19e6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1a28:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1a2c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1a30:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1a34:	2103      	movs	r1, #3
    1a36:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1a3a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1a3c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1a40:	4143      	adcs	r3, r0
    1a42:	e7e3      	b.n	1a0c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1a44:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1a48:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1a4a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1a4e:	f361 0202 	bfi	r2, r1, #0, #3
    1a52:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1a56:	bf14      	ite	ne
    1a58:	2301      	movne	r3, #1
    1a5a:	2300      	moveq	r3, #0
    1a5c:	e7d6      	b.n	1a0c <cbvprintf+0x378>
		conv->invalid = true;
    1a5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1a62:	f043 0301 	orr.w	r3, r3, #1
    1a66:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1a6a:	2300      	movs	r3, #0
    1a6c:	e7ce      	b.n	1a0c <cbvprintf+0x378>
		} else if (conv->width_present) {
    1a6e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1a72:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1a74:	bfb4      	ite	lt
    1a76:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1a7a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    1a7e:	e6ba      	b.n	17f6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1a80:	079b      	lsls	r3, r3, #30
    1a82:	f57f aec7 	bpl.w	1814 <cbvprintf+0x180>
			precision = conv->prec_value;
    1a86:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1a8a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1a8e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1a90:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1a94:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1a98:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1a9c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1a9e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1aa2:	d138      	bne.n	1b16 <cbvprintf+0x482>
			switch (length_mod) {
    1aa4:	1ecb      	subs	r3, r1, #3
    1aa6:	2b04      	cmp	r3, #4
    1aa8:	d822      	bhi.n	1af0 <cbvprintf+0x45c>
    1aaa:	e8df f003 	tbb	[pc, r3]
    1aae:	0903      	.short	0x0903
    1ab0:	2109      	.short	0x2109
    1ab2:	21          	.byte	0x21
    1ab3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1ab4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1ab8:	17da      	asrs	r2, r3, #31
    1aba:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    1abe:	e006      	b.n	1ace <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    1ac0:	3407      	adds	r4, #7
    1ac2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1ac6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1aca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1ace:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1ad2:	f013 0603 	ands.w	r6, r3, #3
    1ad6:	d056      	beq.n	1b86 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    1ad8:	9802      	ldr	r0, [sp, #8]
    1ada:	463b      	mov	r3, r7
    1adc:	4652      	mov	r2, sl
    1ade:	4659      	mov	r1, fp
    1ae0:	f015 fd71 	bl	175c6 <outs>
    1ae4:	2800      	cmp	r0, #0
    1ae6:	f2c0 8142 	blt.w	1d6e <cbvprintf+0x6da>
    1aea:	4405      	add	r5, r0
			continue;
    1aec:	46ba      	mov	sl, r7
    1aee:	e5d9      	b.n	16a4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1af0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1af4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1af6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1afa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1afe:	d105      	bne.n	1b0c <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    1b00:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1b04:	930a      	str	r3, [sp, #40]	; 0x28
    1b06:	2300      	movs	r3, #0
    1b08:	930b      	str	r3, [sp, #44]	; 0x2c
    1b0a:	e7e0      	b.n	1ace <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    1b0c:	2902      	cmp	r1, #2
    1b0e:	d1de      	bne.n	1ace <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    1b10:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    1b14:	e7d0      	b.n	1ab8 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1b16:	2b02      	cmp	r3, #2
    1b18:	d123      	bne.n	1b62 <cbvprintf+0x4ce>
			switch (length_mod) {
    1b1a:	1ecb      	subs	r3, r1, #3
    1b1c:	2b04      	cmp	r3, #4
    1b1e:	d813      	bhi.n	1b48 <cbvprintf+0x4b4>
    1b20:	e8df f003 	tbb	[pc, r3]
    1b24:	120a0a03 	.word	0x120a0a03
    1b28:	12          	.byte	0x12
    1b29:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1b2a:	6822      	ldr	r2, [r4, #0]
    1b2c:	920a      	str	r2, [sp, #40]	; 0x28
    1b2e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    1b30:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1b32:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1b34:	4604      	mov	r4, r0
    1b36:	e7ca      	b.n	1ace <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    1b38:	1de0      	adds	r0, r4, #7
    1b3a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1b3e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    1b42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    1b46:	e7f5      	b.n	1b34 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    1b48:	f854 3b04 	ldr.w	r3, [r4], #4
    1b4c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1b4e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1b50:	f04f 0300 	mov.w	r3, #0
    1b54:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1b56:	d0d3      	beq.n	1b00 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    1b58:	2902      	cmp	r1, #2
    1b5a:	d1b8      	bne.n	1ace <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    1b5c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1b60:	e7d0      	b.n	1b04 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    1b62:	2b04      	cmp	r3, #4
    1b64:	d109      	bne.n	1b7a <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    1b66:	1de3      	adds	r3, r4, #7
    1b68:	f023 0307 	bic.w	r3, r3, #7
    1b6c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1b70:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b74:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1b78:	e7a9      	b.n	1ace <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1b7a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1b7c:	bf04      	itt	eq
    1b7e:	f854 3b04 	ldreq.w	r3, [r4], #4
    1b82:	930a      	streq	r3, [sp, #40]	; 0x28
    1b84:	e7a3      	b.n	1ace <cbvprintf+0x43a>
		switch (conv->specifier) {
    1b86:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1b8a:	2878      	cmp	r0, #120	; 0x78
    1b8c:	d8ae      	bhi.n	1aec <cbvprintf+0x458>
    1b8e:	2862      	cmp	r0, #98	; 0x62
    1b90:	d822      	bhi.n	1bd8 <cbvprintf+0x544>
    1b92:	2825      	cmp	r0, #37	; 0x25
    1b94:	f43f ad8f 	beq.w	16b6 <cbvprintf+0x22>
    1b98:	2858      	cmp	r0, #88	; 0x58
    1b9a:	d1a7      	bne.n	1aec <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1b9c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1ba0:	9300      	str	r3, [sp, #0]
    1ba2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1ba6:	ab04      	add	r3, sp, #16
    1ba8:	aa0c      	add	r2, sp, #48	; 0x30
    1baa:	f015 fcc6 	bl	1753a <encode_uint>
    1bae:	4682      	mov	sl, r0
			if (precision >= 0) {
    1bb0:	f1b8 0f00 	cmp.w	r8, #0
    1bb4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1bb8:	db0c      	blt.n	1bd4 <cbvprintf+0x540>
				conv->flag_zero = false;
    1bba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1bbe:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1bc2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1bc6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1bc8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1bcc:	d902      	bls.n	1bd4 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    1bce:	eba8 0303 	sub.w	r3, r8, r3
    1bd2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1bd4:	4680      	mov	r8, r0
    1bd6:	e03d      	b.n	1c54 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    1bd8:	3863      	subs	r0, #99	; 0x63
    1bda:	2815      	cmp	r0, #21
    1bdc:	d886      	bhi.n	1aec <cbvprintf+0x458>
    1bde:	a201      	add	r2, pc, #4	; (adr r2, 1be4 <cbvprintf+0x550>)
    1be0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1be4:	00001c65 	.word	0x00001c65
    1be8:	00001cc9 	.word	0x00001cc9
    1bec:	00001aed 	.word	0x00001aed
    1bf0:	00001aed 	.word	0x00001aed
    1bf4:	00001aed 	.word	0x00001aed
    1bf8:	00001aed 	.word	0x00001aed
    1bfc:	00001cc9 	.word	0x00001cc9
    1c00:	00001aed 	.word	0x00001aed
    1c04:	00001aed 	.word	0x00001aed
    1c08:	00001aed 	.word	0x00001aed
    1c0c:	00001aed 	.word	0x00001aed
    1c10:	00001d23 	.word	0x00001d23
    1c14:	00001cf1 	.word	0x00001cf1
    1c18:	00001cf5 	.word	0x00001cf5
    1c1c:	00001aed 	.word	0x00001aed
    1c20:	00001aed 	.word	0x00001aed
    1c24:	00001c3d 	.word	0x00001c3d
    1c28:	00001aed 	.word	0x00001aed
    1c2c:	00001cf1 	.word	0x00001cf1
    1c30:	00001aed 	.word	0x00001aed
    1c34:	00001aed 	.word	0x00001aed
    1c38:	00001cf1 	.word	0x00001cf1
			if (precision >= 0) {
    1c3c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1c40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1c44:	db0a      	blt.n	1c5c <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    1c46:	4641      	mov	r1, r8
    1c48:	4650      	mov	r0, sl
    1c4a:	f015 ff31 	bl	17ab0 <strnlen>
			bpe = bps + len;
    1c4e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1c52:	2600      	movs	r6, #0
		if (bps == NULL) {
    1c54:	f1ba 0f00 	cmp.w	sl, #0
    1c58:	d10c      	bne.n	1c74 <cbvprintf+0x5e0>
    1c5a:	e747      	b.n	1aec <cbvprintf+0x458>
				len = strlen(bps);
    1c5c:	4650      	mov	r0, sl
    1c5e:	f015 ff20 	bl	17aa2 <strlen>
    1c62:	e7f4      	b.n	1c4e <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c66:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1c6a:	2600      	movs	r6, #0
			bps = buf;
    1c6c:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1c70:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1c74:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1c78:	b106      	cbz	r6, 1c7c <cbvprintf+0x5e8>
			nj_len += 1U;
    1c7a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1c7c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1c80:	06d0      	lsls	r0, r2, #27
    1c82:	d568      	bpl.n	1d56 <cbvprintf+0x6c2>
			nj_len += 2U;
    1c84:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1c86:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1c88:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1c8a:	bf48      	it	mi
    1c8c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1c8e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1c90:	bf48      	it	mi
    1c92:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1c94:	f1b9 0f00 	cmp.w	r9, #0
    1c98:	dd76      	ble.n	1d88 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    1c9a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1c9e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1ca2:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1ca6:	9303      	str	r3, [sp, #12]
    1ca8:	0753      	lsls	r3, r2, #29
    1caa:	d46d      	bmi.n	1d88 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    1cac:	0650      	lsls	r0, r2, #25
    1cae:	d561      	bpl.n	1d74 <cbvprintf+0x6e0>
					if (sign != 0) {
    1cb0:	b146      	cbz	r6, 1cc4 <cbvprintf+0x630>
						OUTC(sign);
    1cb2:	9b02      	ldr	r3, [sp, #8]
    1cb4:	4659      	mov	r1, fp
    1cb6:	4630      	mov	r0, r6
    1cb8:	4798      	blx	r3
    1cba:	2800      	cmp	r0, #0
    1cbc:	db57      	blt.n	1d6e <cbvprintf+0x6da>
						sign = 0;
    1cbe:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1cc0:	3501      	adds	r5, #1
						sign = 0;
    1cc2:	461e      	mov	r6, r3
					pad = '0';
    1cc4:	2330      	movs	r3, #48	; 0x30
    1cc6:	e056      	b.n	1d76 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    1cc8:	071e      	lsls	r6, r3, #28
    1cca:	d40f      	bmi.n	1cec <cbvprintf+0x658>
				sign = ' ';
    1ccc:	f013 0610 	ands.w	r6, r3, #16
    1cd0:	bf18      	it	ne
    1cd2:	2620      	movne	r6, #32
			sint = value->sint;
    1cd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1cd8:	2b00      	cmp	r3, #0
    1cda:	f6bf af5f 	bge.w	1b9c <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    1cde:	4252      	negs	r2, r2
    1ce0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1ce4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1ce8:	262d      	movs	r6, #45	; 0x2d
    1cea:	e757      	b.n	1b9c <cbvprintf+0x508>
				sign = '+';
    1cec:	262b      	movs	r6, #43	; 0x2b
    1cee:	e7f1      	b.n	1cd4 <cbvprintf+0x640>
		switch (conv->specifier) {
    1cf0:	2600      	movs	r6, #0
    1cf2:	e753      	b.n	1b9c <cbvprintf+0x508>
			if (value->ptr != NULL) {
    1cf4:	980a      	ldr	r0, [sp, #40]	; 0x28
    1cf6:	b340      	cbz	r0, 1d4a <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1cf8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1cfc:	9300      	str	r3, [sp, #0]
    1cfe:	aa0c      	add	r2, sp, #48	; 0x30
    1d00:	ab04      	add	r3, sp, #16
    1d02:	2100      	movs	r1, #0
    1d04:	f015 fc19 	bl	1753a <encode_uint>
				conv->altform_0c = true;
    1d08:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1d0c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1d10:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1d14:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1d18:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1d1a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1d1e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1d20:	e746      	b.n	1bb0 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    1d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1d24:	2907      	cmp	r1, #7
    1d26:	f63f aee1 	bhi.w	1aec <cbvprintf+0x458>
    1d2a:	e8df f001 	tbb	[pc, r1]
    1d2e:	040c      	.short	0x040c
    1d30:	08080c06 	.word	0x08080c06
    1d34:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1d36:	701d      	strb	r5, [r3, #0]
		break;
    1d38:	e6d8      	b.n	1aec <cbvprintf+0x458>
		*(short *)dp = (short)count;
    1d3a:	801d      	strh	r5, [r3, #0]
		break;
    1d3c:	e6d6      	b.n	1aec <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    1d3e:	17ea      	asrs	r2, r5, #31
    1d40:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1d44:	e6d2      	b.n	1aec <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1d46:	601d      	str	r5, [r3, #0]
		break;
    1d48:	e6d0      	b.n	1aec <cbvprintf+0x458>
			bps = "(nil)";
    1d4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1e14 <cbvprintf+0x780>
    1d4e:	4606      	mov	r6, r0
			bpe = bps + 5;
    1d50:	f10a 0805 	add.w	r8, sl, #5
    1d54:	e78e      	b.n	1c74 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    1d56:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1d58:	bf48      	it	mi
    1d5a:	3301      	addmi	r3, #1
    1d5c:	e793      	b.n	1c86 <cbvprintf+0x5f2>
					OUTC(pad);
    1d5e:	4618      	mov	r0, r3
    1d60:	9303      	str	r3, [sp, #12]
    1d62:	4659      	mov	r1, fp
    1d64:	9b02      	ldr	r3, [sp, #8]
    1d66:	4798      	blx	r3
    1d68:	2800      	cmp	r0, #0
    1d6a:	9b03      	ldr	r3, [sp, #12]
    1d6c:	da04      	bge.n	1d78 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    1d6e:	b011      	add	sp, #68	; 0x44
    1d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1d74:	2320      	movs	r3, #32
    1d76:	444d      	add	r5, r9
    1d78:	464a      	mov	r2, r9
				while (width-- > 0) {
    1d7a:	2a00      	cmp	r2, #0
    1d7c:	eba5 0109 	sub.w	r1, r5, r9
    1d80:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    1d84:	dceb      	bgt.n	1d5e <cbvprintf+0x6ca>
    1d86:	460d      	mov	r5, r1
		if (sign != 0) {
    1d88:	b136      	cbz	r6, 1d98 <cbvprintf+0x704>
			OUTC(sign);
    1d8a:	9b02      	ldr	r3, [sp, #8]
    1d8c:	4659      	mov	r1, fp
    1d8e:	4630      	mov	r0, r6
    1d90:	4798      	blx	r3
    1d92:	2800      	cmp	r0, #0
    1d94:	dbeb      	blt.n	1d6e <cbvprintf+0x6da>
    1d96:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1d98:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1d9c:	06d9      	lsls	r1, r3, #27
    1d9e:	d401      	bmi.n	1da4 <cbvprintf+0x710>
    1da0:	071a      	lsls	r2, r3, #28
    1da2:	d506      	bpl.n	1db2 <cbvprintf+0x71e>
				OUTC('0');
    1da4:	9b02      	ldr	r3, [sp, #8]
    1da6:	4659      	mov	r1, fp
    1da8:	2030      	movs	r0, #48	; 0x30
    1daa:	4798      	blx	r3
    1dac:	2800      	cmp	r0, #0
    1dae:	dbde      	blt.n	1d6e <cbvprintf+0x6da>
    1db0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1db2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1db6:	06db      	lsls	r3, r3, #27
    1db8:	d507      	bpl.n	1dca <cbvprintf+0x736>
				OUTC(conv->specifier);
    1dba:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1dbe:	9b02      	ldr	r3, [sp, #8]
    1dc0:	4659      	mov	r1, fp
    1dc2:	4798      	blx	r3
    1dc4:	2800      	cmp	r0, #0
    1dc6:	dbd2      	blt.n	1d6e <cbvprintf+0x6da>
    1dc8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1dca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1dcc:	442e      	add	r6, r5
    1dce:	1b73      	subs	r3, r6, r5
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	dc16      	bgt.n	1e02 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    1dd4:	9802      	ldr	r0, [sp, #8]
    1dd6:	4643      	mov	r3, r8
    1dd8:	4652      	mov	r2, sl
    1dda:	4659      	mov	r1, fp
    1ddc:	f015 fbf3 	bl	175c6 <outs>
    1de0:	2800      	cmp	r0, #0
    1de2:	dbc4      	blt.n	1d6e <cbvprintf+0x6da>
    1de4:	4405      	add	r5, r0
		while (width > 0) {
    1de6:	44a9      	add	r9, r5
    1de8:	eba9 0305 	sub.w	r3, r9, r5
    1dec:	2b00      	cmp	r3, #0
    1dee:	f77f ae7d 	ble.w	1aec <cbvprintf+0x458>
			OUTC(' ');
    1df2:	9b02      	ldr	r3, [sp, #8]
    1df4:	4659      	mov	r1, fp
    1df6:	2020      	movs	r0, #32
    1df8:	4798      	blx	r3
    1dfa:	2800      	cmp	r0, #0
    1dfc:	dbb7      	blt.n	1d6e <cbvprintf+0x6da>
    1dfe:	3501      	adds	r5, #1
			--width;
    1e00:	e7f2      	b.n	1de8 <cbvprintf+0x754>
				OUTC('0');
    1e02:	9b02      	ldr	r3, [sp, #8]
    1e04:	4659      	mov	r1, fp
    1e06:	2030      	movs	r0, #48	; 0x30
    1e08:	4798      	blx	r3
    1e0a:	2800      	cmp	r0, #0
    1e0c:	dbaf      	blt.n	1d6e <cbvprintf+0x6da>
    1e0e:	3501      	adds	r5, #1
    1e10:	e7dd      	b.n	1dce <cbvprintf+0x73a>
    1e12:	bf00      	nop
    1e14:	0001c7a4 	.word	0x0001c7a4

00001e18 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e1c:	4605      	mov	r5, r0
    1e1e:	f04f 0320 	mov.w	r3, #32
    1e22:	f3ef 8611 	mrs	r6, BASEPRI
    1e26:	f383 8812 	msr	BASEPRI_MAX, r3
    1e2a:	f3bf 8f6f 	isb	sy
	return list->head;
    1e2e:	4b0e      	ldr	r3, [pc, #56]	; (1e68 <pm_state_notify+0x50>)
    1e30:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1e32:	b19c      	cbz	r4, 1e5c <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1e34:	4f0d      	ldr	r7, [pc, #52]	; (1e6c <pm_state_notify+0x54>)
    1e36:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1e70 <pm_state_notify+0x58>
    1e3a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1e3e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1e42:	2d00      	cmp	r5, #0
    1e44:	bf08      	it	eq
    1e46:	4613      	moveq	r3, r2
		if (callback) {
    1e48:	b12b      	cbz	r3, 1e56 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1e4a:	f898 2014 	ldrb.w	r2, [r8, #20]
    1e4e:	fb09 f202 	mul.w	r2, r9, r2
    1e52:	5cb8      	ldrb	r0, [r7, r2]
    1e54:	4798      	blx	r3
	return node->next;
    1e56:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1e58:	2c00      	cmp	r4, #0
    1e5a:	d1f0      	bne.n	1e3e <pm_state_notify+0x26>
	__asm__ volatile(
    1e5c:	f386 8811 	msr	BASEPRI, r6
    1e60:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e68:	200013b8 	.word	0x200013b8
    1e6c:	200013c0 	.word	0x200013c0
    1e70:	20002734 	.word	0x20002734

00001e74 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1e74:	f000 031f 	and.w	r3, r0, #31
    1e78:	2201      	movs	r2, #1
    1e7a:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1e7c:	4b0a      	ldr	r3, [pc, #40]	; (1ea8 <atomic_test_and_set_bit.constprop.0+0x34>)
    1e7e:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1e82:	0940      	lsrs	r0, r0, #5
    1e84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1e88:	e850 3f00 	ldrex	r3, [r0]
    1e8c:	ea43 0102 	orr.w	r1, r3, r2
    1e90:	e840 1c00 	strex	ip, r1, [r0]
    1e94:	f1bc 0f00 	cmp.w	ip, #0
    1e98:	d1f6      	bne.n	1e88 <atomic_test_and_set_bit.constprop.0+0x14>
    1e9a:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    1e9e:	421a      	tst	r2, r3
}
    1ea0:	bf14      	ite	ne
    1ea2:	2001      	movne	r0, #1
    1ea4:	2000      	moveq	r0, #0
    1ea6:	4770      	bx	lr
    1ea8:	200013cc 	.word	0x200013cc

00001eac <pm_system_resume>:

void pm_system_resume(void)
{
    1eac:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1eae:	4b1d      	ldr	r3, [pc, #116]	; (1f24 <pm_system_resume+0x78>)
    1eb0:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1eb2:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1eb6:	f004 031f 	and.w	r3, r4, #31
    1eba:	2201      	movs	r2, #1
    1ebc:	409a      	lsls	r2, r3
    1ebe:	4b1a      	ldr	r3, [pc, #104]	; (1f28 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ec0:	0961      	lsrs	r1, r4, #5
{
    1ec2:	b085      	sub	sp, #20
    1ec4:	43d0      	mvns	r0, r2
    1ec6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1eca:	e853 1f00 	ldrex	r1, [r3]
    1ece:	ea01 0500 	and.w	r5, r1, r0
    1ed2:	e843 5c00 	strex	ip, r5, [r3]
    1ed6:	f1bc 0f00 	cmp.w	ip, #0
    1eda:	d1f6      	bne.n	1eca <pm_system_resume+0x1e>
    1edc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1ee0:	4211      	tst	r1, r2
    1ee2:	d017      	beq.n	1f14 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    1ee4:	4d11      	ldr	r5, [pc, #68]	; (1f2c <pm_system_resume+0x80>)
    1ee6:	220c      	movs	r2, #12
    1ee8:	fb02 5204 	mla	r2, r2, r4, r5
    1eec:	ca07      	ldmia	r2, {r0, r1, r2}
    1eee:	ab01      	add	r3, sp, #4
    1ef0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1ef4:	4a0e      	ldr	r2, [pc, #56]	; (1f30 <pm_system_resume+0x84>)
    1ef6:	b17a      	cbz	r2, 1f18 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    1ef8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1efc:	f015 fe28 	bl	17b50 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    1f00:	2000      	movs	r0, #0
    1f02:	f7ff ff89 	bl	1e18 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1f06:	230c      	movs	r3, #12
    1f08:	435c      	muls	r4, r3
    1f0a:	192a      	adds	r2, r5, r4
    1f0c:	2300      	movs	r3, #0
    1f0e:	512b      	str	r3, [r5, r4]
    1f10:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1f14:	b005      	add	sp, #20
    1f16:	bd30      	pop	{r4, r5, pc}
    1f18:	f382 8811 	msr	BASEPRI, r2
    1f1c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1f20:	e7ee      	b.n	1f00 <pm_system_resume+0x54>
    1f22:	bf00      	nop
    1f24:	20002734 	.word	0x20002734
    1f28:	200013d0 	.word	0x200013d0
    1f2c:	200013c0 	.word	0x200013c0
    1f30:	00017b51 	.word	0x00017b51

00001f34 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1f34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1f38:	4b35      	ldr	r3, [pc, #212]	; (2010 <pm_system_suspend+0xdc>)
    1f3a:	4c36      	ldr	r4, [pc, #216]	; (2014 <pm_system_suspend+0xe0>)
    1f3c:	7d1d      	ldrb	r5, [r3, #20]
{
    1f3e:	4680      	mov	r8, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_cpus_pm_state_forced, id)) {
    1f40:	4628      	mov	r0, r5
    1f42:	f7ff ff97 	bl	1e74 <atomic_test_and_set_bit.constprop.0>
    1f46:	b950      	cbnz	r0, 1f5e <pm_system_suspend+0x2a>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1f48:	4641      	mov	r1, r8
    1f4a:	4628      	mov	r0, r5
    1f4c:	f000 f884 	bl	2058 <pm_policy_next_state>
		if (info != NULL) {
    1f50:	b128      	cbz	r0, 1f5e <pm_system_suspend+0x2a>
			z_cpus_pm_state[id] = *info;
    1f52:	c807      	ldmia	r0, {r0, r1, r2}
    1f54:	230c      	movs	r3, #12
    1f56:	fb03 4305 	mla	r3, r3, r5, r4
    1f5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1f5e:	230c      	movs	r3, #12
    1f60:	436b      	muls	r3, r5
    1f62:	18e2      	adds	r2, r4, r3
    1f64:	5ce0      	ldrb	r0, [r4, r3]
    1f66:	096e      	lsrs	r6, r5, #5
    1f68:	f005 071f 	and.w	r7, r5, #31
    1f6c:	2800      	cmp	r0, #0
    1f6e:	d03b      	beq.n	1fe8 <pm_system_suspend+0xb4>
				   z_cpus_pm_state[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    1f70:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    1f74:	d010      	beq.n	1f98 <pm_system_suspend+0x64>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1f76:	f8d2 e008 	ldr.w	lr, [r2, #8]
    1f7a:	4827      	ldr	r0, [pc, #156]	; (2018 <pm_system_suspend+0xe4>)
    1f7c:	4a27      	ldr	r2, [pc, #156]	; (201c <pm_system_suspend+0xe8>)
    1f7e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    1f82:	2100      	movs	r1, #0
    1f84:	2300      	movs	r3, #0
    1f86:	fbee 010c 	umlal	r0, r1, lr, ip
    1f8a:	f7fe f8a9 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1f8e:	2101      	movs	r1, #1
    1f90:	eba8 0000 	sub.w	r0, r8, r0
    1f94:	f018 fe88 	bl	1aca8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1f98:	f014 fad8 	bl	1654c <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1f9c:	2001      	movs	r0, #1
    1f9e:	f7ff ff3b 	bl	1e18 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1fa2:	f3bf 8f5b 	dmb	ish
    1fa6:	4b1e      	ldr	r3, [pc, #120]	; (2020 <pm_system_suspend+0xec>)
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1fa8:	2201      	movs	r2, #1
    1faa:	40ba      	lsls	r2, r7
    1fac:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    1fb0:	e853 1f00 	ldrex	r1, [r3]
    1fb4:	4311      	orrs	r1, r2
    1fb6:	e843 1000 	strex	r0, r1, [r3]
    1fba:	2800      	cmp	r0, #0
    1fbc:	d1f8      	bne.n	1fb0 <pm_system_suspend+0x7c>
    1fbe:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_cpus_pm_state[id]);
    1fc2:	230c      	movs	r3, #12
    1fc4:	fb03 4405 	mla	r4, r3, r5, r4
    1fc8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1fcc:	ab01      	add	r3, sp, #4
    1fce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1fd2:	4a14      	ldr	r2, [pc, #80]	; (2024 <pm_system_suspend+0xf0>)
    1fd4:	b11a      	cbz	r2, 1fde <pm_system_suspend+0xaa>
		pm_power_state_set(info);
    1fd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1fda:	f015 fda6 	bl	17b2a <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1fde:	f7ff ff65 	bl	1eac <pm_system_resume>
	k_sched_unlock();
    1fe2:	f014 fc39 	bl	16858 <k_sched_unlock>
	bool ret = true;
    1fe6:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1fe8:	4a0f      	ldr	r2, [pc, #60]	; (2028 <pm_system_suspend+0xf4>)
    1fea:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1fee:	2301      	movs	r3, #1
    1ff0:	40bb      	lsls	r3, r7
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ff2:	43db      	mvns	r3, r3
    1ff4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    1ff8:	e856 2f00 	ldrex	r2, [r6]
    1ffc:	401a      	ands	r2, r3
    1ffe:	e846 2100 	strex	r1, r2, [r6]
    2002:	2900      	cmp	r1, #0
    2004:	d1f8      	bne.n	1ff8 <pm_system_suspend+0xc4>
    2006:	f3bf 8f5b 	dmb	ish
				   z_cpus_pm_state[id].state);

end:
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	return ret;
}
    200a:	b004      	add	sp, #16
    200c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2010:	20002734 	.word	0x20002734
    2014:	200013c0 	.word	0x200013c0
    2018:	000f423f 	.word	0x000f423f
    201c:	000f4240 	.word	0x000f4240
    2020:	200013d0 	.word	0x200013d0
    2024:	00017b2b 	.word	0x00017b2b
    2028:	200013cc 	.word	0x200013cc

0000202c <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    202c:	4b05      	ldr	r3, [pc, #20]	; (2044 <pm_constraint_get+0x18>)
    202e:	f3bf 8f5b 	dmb	ish
    2032:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2036:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    203a:	fab0 f080 	clz	r0, r0
    203e:	0940      	lsrs	r0, r0, #5
    2040:	4770      	bx	lr
    2042:	bf00      	nop
    2044:	200013d4 	.word	0x200013d4

00002048 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2048:	b908      	cbnz	r0, 204e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    204a:	4b02      	ldr	r3, [pc, #8]	; (2054 <pm_state_cpu_get_all+0xc>)
    204c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    204e:	2000      	movs	r0, #0
    2050:	4770      	bx	lr
    2052:	bf00      	nop
    2054:	200013f0 	.word	0x200013f0

00002058 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    205c:	b085      	sub	sp, #20
    205e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2060:	a903      	add	r1, sp, #12
    2062:	f7ff fff1 	bl	2048 <pm_state_cpu_get_all>
    2066:	f8df a074 	ldr.w	sl, [pc, #116]	; 20dc <pm_policy_next_state+0x84>
    206a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 20e0 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    206e:	1e44      	subs	r4, r0, #1
    2070:	b224      	sxth	r4, r4
    2072:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2076:	f04f 0900 	mov.w	r9, #0
    207a:	1c63      	adds	r3, r4, #1
    207c:	d104      	bne.n	2088 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    207e:	2500      	movs	r5, #0
}
    2080:	4628      	mov	r0, r5
    2082:	b005      	add	sp, #20
    2084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2088:	9a03      	ldr	r2, [sp, #12]
    208a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    208e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    2092:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    2096:	f7ff ffc9 	bl	202c <pm_constraint_get>
    209a:	b1e0      	cbz	r0, 20d6 <pm_policy_next_state+0x7e>
    209c:	6868      	ldr	r0, [r5, #4]
    209e:	f04f 0b00 	mov.w	fp, #0
    20a2:	46d4      	mov	ip, sl
    20a4:	4659      	mov	r1, fp
    20a6:	fbe0 c107 	umlal	ip, r1, r0, r7
    20aa:	4642      	mov	r2, r8
    20ac:	464b      	mov	r3, r9
    20ae:	4660      	mov	r0, ip
    20b0:	f7fe f816 	bl	e0 <__aeabi_uldivmod>
    20b4:	9001      	str	r0, [sp, #4]
    20b6:	68a8      	ldr	r0, [r5, #8]
    20b8:	46d4      	mov	ip, sl
    20ba:	4659      	mov	r1, fp
    20bc:	fbe0 c107 	umlal	ip, r1, r0, r7
    20c0:	4642      	mov	r2, r8
    20c2:	464b      	mov	r3, r9
    20c4:	4660      	mov	r0, ip
    20c6:	f7fe f80b 	bl	e0 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    20ca:	1c72      	adds	r2, r6, #1
    20cc:	d0d8      	beq.n	2080 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    20ce:	9b01      	ldr	r3, [sp, #4]
    20d0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    20d2:	42b0      	cmp	r0, r6
    20d4:	d9d4      	bls.n	2080 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    20d6:	3c01      	subs	r4, #1
    20d8:	b224      	sxth	r4, r4
    20da:	e7ce      	b.n	207a <pm_policy_next_state+0x22>
    20dc:	000f423f 	.word	0x000f423f
    20e0:	000f4240 	.word	0x000f4240

000020e4 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    20e4:	4904      	ldr	r1, [pc, #16]	; (20f8 <sub_bytes+0x14>)
    20e6:	1e43      	subs	r3, r0, #1
    20e8:	300f      	adds	r0, #15
    20ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    20ee:	5c8a      	ldrb	r2, [r1, r2]
    20f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    20f2:	4283      	cmp	r3, r0
    20f4:	d1f9      	bne.n	20ea <sub_bytes+0x6>
	}
}
    20f6:	4770      	bx	lr
    20f8:	0001c7aa 	.word	0x0001c7aa

000020fc <tc_aes128_set_encrypt_key>:
{
    20fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    20fe:	4e26      	ldr	r6, [pc, #152]	; (2198 <tc_aes128_set_encrypt_key+0x9c>)
{
    2100:	4607      	mov	r7, r0
    2102:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    2104:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    2106:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    2108:	ad01      	add	r5, sp, #4
    210a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    210c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    210e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2110:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2114:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    2118:	4638      	mov	r0, r7
    211a:	2f00      	cmp	r7, #0
    211c:	d038      	beq.n	2190 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    211e:	2c00      	cmp	r4, #0
    2120:	d038      	beq.n	2194 <tc_aes128_set_encrypt_key+0x98>
    2122:	1f38      	subs	r0, r7, #4
    2124:	4621      	mov	r1, r4
    2126:	4602      	mov	r2, r0
    2128:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    212a:	784b      	ldrb	r3, [r1, #1]
    212c:	780d      	ldrb	r5, [r1, #0]
    212e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2130:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    2134:	78cd      	ldrb	r5, [r1, #3]
    2136:	432b      	orrs	r3, r5
    2138:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    213a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    213c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    2140:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2142:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    2146:	d1f0      	bne.n	212a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2148:	4c14      	ldr	r4, [pc, #80]	; (219c <tc_aes128_set_encrypt_key+0xa0>)
    214a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    214c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    214e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    2150:	d116      	bne.n	2180 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2152:	f3c3 4207 	ubfx	r2, r3, #16, #8
    2156:	5ca5      	ldrb	r5, [r4, r2]
    2158:	0e1a      	lsrs	r2, r3, #24
    215a:	5ca2      	ldrb	r2, [r4, r2]
    215c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    2160:	f3c3 2507 	ubfx	r5, r3, #8, #8
    2164:	b2db      	uxtb	r3, r3
    2166:	5d65      	ldrb	r5, [r4, r5]
    2168:	5ce3      	ldrb	r3, [r4, r3]
    216a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    216e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    2172:	ad0c      	add	r5, sp, #48	; 0x30
    2174:	f021 0303 	bic.w	r3, r1, #3
    2178:	442b      	add	r3, r5
    217a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    217e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    2180:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    2184:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    2186:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    2188:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    218a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    218c:	d1de      	bne.n	214c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    218e:	2001      	movs	r0, #1
}
    2190:	b00d      	add	sp, #52	; 0x34
    2192:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2194:	4620      	mov	r0, r4
    2196:	e7fb      	b.n	2190 <tc_aes128_set_encrypt_key+0x94>
    2198:	0001b3d4 	.word	0x0001b3d4
    219c:	0001c7aa 	.word	0x0001c7aa

000021a0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    21a0:	4901      	ldr	r1, [pc, #4]	; (21a8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    21a2:	2210      	movs	r2, #16
	str	r2, [r1]
    21a4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    21a6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    21a8:	e000ed10 	.word	0xe000ed10

000021ac <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    21ac:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    21ae:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    21b0:	f380 8811 	msr	BASEPRI, r0
	isb
    21b4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    21b8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    21bc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    21be:	b662      	cpsie	i
	isb
    21c0:	f3bf 8f6f 	isb	sy

	bx	lr
    21c4:	4770      	bx	lr
    21c6:	bf00      	nop

000021c8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    21c8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    21ca:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    21cc:	f381 8811 	msr	BASEPRI, r1

	wfe
    21d0:	bf20      	wfe

	msr	BASEPRI, r0
    21d2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    21d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    21d8:	4770      	bx	lr
    21da:	bf00      	nop

000021dc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    21dc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    21de:	2b00      	cmp	r3, #0
    21e0:	db08      	blt.n	21f4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21e2:	2201      	movs	r2, #1
    21e4:	f000 001f 	and.w	r0, r0, #31
    21e8:	fa02 f000 	lsl.w	r0, r2, r0
    21ec:	095b      	lsrs	r3, r3, #5
    21ee:	4a02      	ldr	r2, [pc, #8]	; (21f8 <arch_irq_enable+0x1c>)
    21f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    21f4:	4770      	bx	lr
    21f6:	bf00      	nop
    21f8:	e000e100 	.word	0xe000e100

000021fc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    21fc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    21fe:	2b00      	cmp	r3, #0
    2200:	db0d      	blt.n	221e <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2202:	2201      	movs	r2, #1
    2204:	095b      	lsrs	r3, r3, #5
    2206:	f000 001f 	and.w	r0, r0, #31
    220a:	fa02 f000 	lsl.w	r0, r2, r0
    220e:	3320      	adds	r3, #32
    2210:	4a03      	ldr	r2, [pc, #12]	; (2220 <arch_irq_disable+0x24>)
    2212:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2216:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    221a:	f3bf 8f6f 	isb	sy
}
    221e:	4770      	bx	lr
    2220:	e000e100 	.word	0xe000e100

00002224 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2224:	4b05      	ldr	r3, [pc, #20]	; (223c <arch_irq_is_enabled+0x18>)
    2226:	0942      	lsrs	r2, r0, #5
    2228:	f000 001f 	and.w	r0, r0, #31
    222c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2230:	2301      	movs	r3, #1
    2232:	fa03 f000 	lsl.w	r0, r3, r0
}
    2236:	4010      	ands	r0, r2
    2238:	4770      	bx	lr
    223a:	bf00      	nop
    223c:	e000e100 	.word	0xe000e100

00002240 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2240:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2242:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2244:	bfa8      	it	ge
    2246:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    224a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    224e:	bfb8      	it	lt
    2250:	4b06      	ldrlt	r3, [pc, #24]	; (226c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2252:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2256:	bfac      	ite	ge
    2258:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    225c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2260:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2262:	bfb4      	ite	lt
    2264:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2266:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    226a:	4770      	bx	lr
    226c:	e000ed14 	.word	0xe000ed14

00002270 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    2270:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    2272:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    2274:	4b04      	ldr	r3, [pc, #16]	; (2288 <_arch_isr_direct_pm+0x18>)
    2276:	699a      	ldr	r2, [r3, #24]
    2278:	b11a      	cbz	r2, 2282 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    227a:	2200      	movs	r2, #0
    227c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    227e:	f018 fa3b 	bl	1a6f8 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    2282:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    2284:	bd08      	pop	{r3, pc}
    2286:	bf00      	nop
    2288:	20002734 	.word	0x20002734

0000228c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    228c:	bf30      	wfi
    b z_SysNmiOnReset
    228e:	f7ff bffd 	b.w	228c <z_SysNmiOnReset>
    2292:	bf00      	nop

00002294 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2294:	4a0f      	ldr	r2, [pc, #60]	; (22d4 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2296:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2298:	4b0f      	ldr	r3, [pc, #60]	; (22d8 <z_arm_prep_c+0x44>)
    229a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    229e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    22a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    22a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    22ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    22b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    22b4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    22b8:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    22bc:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    22c0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    22c4:	f013 fcf2 	bl	15cac <z_bss_zero>
	z_data_copy();
    22c8:	f014 fc0a 	bl	16ae0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    22cc:	f000 f9ca 	bl	2664 <z_arm_interrupt_init>
	z_cstart();
    22d0:	f013 fcf6 	bl	15cc0 <z_cstart>
    22d4:	00000000 	.word	0x00000000
    22d8:	e000ed00 	.word	0xe000ed00

000022dc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    22dc:	4a09      	ldr	r2, [pc, #36]	; (2304 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    22de:	490a      	ldr	r1, [pc, #40]	; (2308 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    22e0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    22e2:	6809      	ldr	r1, [r1, #0]
    22e4:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    22e6:	4909      	ldr	r1, [pc, #36]	; (230c <arch_swap+0x30>)
	_current->arch.basepri = key;
    22e8:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    22ea:	684b      	ldr	r3, [r1, #4]
    22ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    22f0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    22f2:	2300      	movs	r3, #0
    22f4:	f383 8811 	msr	BASEPRI, r3
    22f8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    22fc:	6893      	ldr	r3, [r2, #8]
}
    22fe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2300:	4770      	bx	lr
    2302:	bf00      	nop
    2304:	20002734 	.word	0x20002734
    2308:	0001c694 	.word	0x0001c694
    230c:	e000ed00 	.word	0xe000ed00

00002310 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2310:	4912      	ldr	r1, [pc, #72]	; (235c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2312:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2314:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2318:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    231a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    231e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2322:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2324:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2328:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    232c:	4f0c      	ldr	r7, [pc, #48]	; (2360 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    232e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2332:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2334:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2336:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2338:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    233a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    233c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    233e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2342:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2344:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2346:	f000 f9cf 	bl	26e8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    234a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    234e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2352:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2356:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    235a:	4770      	bx	lr
    ldr r1, =_kernel
    235c:	20002734 	.word	0x20002734
    ldr v4, =_SCS_ICSR
    2360:	e000ed04 	.word	0xe000ed04

00002364 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2364:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2368:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    236a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    236e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2372:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2374:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2378:	2902      	cmp	r1, #2
    beq _oops
    237a:	d0ff      	beq.n	237c <_oops>

0000237c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    237c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    237e:	f015 fb65 	bl	17a4c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2382:	bd01      	pop	{r0, pc}

00002384 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2384:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2388:	9b00      	ldr	r3, [sp, #0]
    238a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    238e:	490a      	ldr	r1, [pc, #40]	; (23b8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2390:	9b01      	ldr	r3, [sp, #4]
    2392:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2396:	9b02      	ldr	r3, [sp, #8]
    2398:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    239c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    23a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    23a4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    23a8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    23ac:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    23ae:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    23b0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    23b2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    23b4:	4770      	bx	lr
    23b6:	bf00      	nop
    23b8:	0001719b 	.word	0x0001719b

000023bc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    23bc:	4a09      	ldr	r2, [pc, #36]	; (23e4 <z_check_thread_stack_fail+0x28>)
{
    23be:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    23c0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    23c2:	b170      	cbz	r0, 23e2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    23c4:	f113 0f16 	cmn.w	r3, #22
    23c8:	6e80      	ldr	r0, [r0, #104]	; 0x68
    23ca:	d005      	beq.n	23d8 <z_check_thread_stack_fail+0x1c>
    23cc:	f1a0 0220 	sub.w	r2, r0, #32
    23d0:	429a      	cmp	r2, r3
    23d2:	d805      	bhi.n	23e0 <z_check_thread_stack_fail+0x24>
    23d4:	4283      	cmp	r3, r0
    23d6:	d203      	bcs.n	23e0 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    23d8:	4281      	cmp	r1, r0
    23da:	bf28      	it	cs
    23dc:	2000      	movcs	r0, #0
    23de:	4770      	bx	lr
    23e0:	2000      	movs	r0, #0
}
    23e2:	4770      	bx	lr
    23e4:	20002734 	.word	0x20002734

000023e8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    23e8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    23ea:	4b09      	ldr	r3, [pc, #36]	; (2410 <arch_switch_to_main_thread+0x28>)
    23ec:	6098      	str	r0, [r3, #8]
{
    23ee:	460d      	mov	r5, r1
    23f0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    23f2:	f000 f979 	bl	26e8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    23f6:	4620      	mov	r0, r4
    23f8:	f385 8809 	msr	PSP, r5
    23fc:	2100      	movs	r1, #0
    23fe:	b663      	cpsie	if
    2400:	f381 8811 	msr	BASEPRI, r1
    2404:	f3bf 8f6f 	isb	sy
    2408:	2200      	movs	r2, #0
    240a:	2300      	movs	r3, #0
    240c:	f014 fec5 	bl	1719a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2410:	20002734 	.word	0x20002734

00002414 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2414:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2416:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2418:	4a0b      	ldr	r2, [pc, #44]	; (2448 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    241a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    241c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    241e:	bf1e      	ittt	ne
	movne	r1, #0
    2420:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2422:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2424:	f018 f968 	blne	1a6f8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2428:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    242a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    242e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2432:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2436:	4905      	ldr	r1, [pc, #20]	; (244c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2438:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    243a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    243c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    243e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2442:	4903      	ldr	r1, [pc, #12]	; (2450 <_isr_wrapper+0x3c>)
	bx r1
    2444:	4708      	bx	r1
    2446:	0000      	.short	0x0000
	ldr r2, =_kernel
    2448:	20002734 	.word	0x20002734
	ldr r1, =_sw_isr_table
    244c:	0001b1d8 	.word	0x0001b1d8
	ldr r1, =z_arm_int_exit
    2450:	00002455 	.word	0x00002455

00002454 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2454:	4b04      	ldr	r3, [pc, #16]	; (2468 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2456:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2458:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    245a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    245c:	d003      	beq.n	2466 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    245e:	4903      	ldr	r1, [pc, #12]	; (246c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2464:	600a      	str	r2, [r1, #0]

00002466 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2466:	4770      	bx	lr
	ldr r3, =_kernel
    2468:	20002734 	.word	0x20002734
	ldr r1, =_SCS_ICSR
    246c:	e000ed04 	.word	0xe000ed04

00002470 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2470:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2472:	4b19      	ldr	r3, [pc, #100]	; (24d8 <mem_manage_fault+0x68>)
{
    2474:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    247a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    247c:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    247e:	0790      	lsls	r0, r2, #30
    2480:	d519      	bpl.n	24b6 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2482:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2486:	0612      	lsls	r2, r2, #24
    2488:	d515      	bpl.n	24b6 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    248a:	b119      	cbz	r1, 2494 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    248c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    248e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2492:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    249a:	06d1      	lsls	r1, r2, #27
    249c:	d40e      	bmi.n	24bc <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    24a0:	079a      	lsls	r2, r3, #30
    24a2:	d40b      	bmi.n	24bc <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    24a4:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    24a6:	4a0c      	ldr	r2, [pc, #48]	; (24d8 <mem_manage_fault+0x68>)
    24a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24aa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    24ae:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    24b0:	2300      	movs	r3, #0
    24b2:	7023      	strb	r3, [r4, #0]

	return reason;
}
    24b4:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    24b6:	f06f 0015 	mvn.w	r0, #21
    24ba:	e7eb      	b.n	2494 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    24bc:	4b06      	ldr	r3, [pc, #24]	; (24d8 <mem_manage_fault+0x68>)
    24be:	685b      	ldr	r3, [r3, #4]
    24c0:	051b      	lsls	r3, r3, #20
    24c2:	d5ef      	bpl.n	24a4 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    24c4:	4629      	mov	r1, r5
    24c6:	f7ff ff79 	bl	23bc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    24ca:	2800      	cmp	r0, #0
    24cc:	d0ea      	beq.n	24a4 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    24ce:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    24d2:	2002      	movs	r0, #2
    24d4:	e7e7      	b.n	24a6 <mem_manage_fault+0x36>
    24d6:	bf00      	nop
    24d8:	e000ed00 	.word	0xe000ed00

000024dc <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    24dc:	4b0d      	ldr	r3, [pc, #52]	; (2514 <bus_fault.constprop.0+0x38>)
    24de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    24e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    24e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24e4:	0592      	lsls	r2, r2, #22
    24e6:	d508      	bpl.n	24fa <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    24e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    24ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24ec:	0412      	lsls	r2, r2, #16
    24ee:	d504      	bpl.n	24fa <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    24f0:	b118      	cbz	r0, 24fa <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    24f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    24f8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    24fa:	4b06      	ldr	r3, [pc, #24]	; (2514 <bus_fault.constprop.0+0x38>)
    24fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    24fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2500:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2502:	bf58      	it	pl
    2504:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2506:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2508:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    250a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    250e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2510:	7008      	strb	r0, [r1, #0]

	return reason;
}
    2512:	4770      	bx	lr
    2514:	e000ed00 	.word	0xe000ed00

00002518 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2518:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    251a:	4b48      	ldr	r3, [pc, #288]	; (263c <z_arm_fault+0x124>)
    251c:	685b      	ldr	r3, [r3, #4]
{
    251e:	b08a      	sub	sp, #40	; 0x28
    2520:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2522:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2526:	2600      	movs	r6, #0
    2528:	f386 8811 	msr	BASEPRI, r6
    252c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2530:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    2534:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    2538:	d111      	bne.n	255e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    253a:	f002 010c 	and.w	r1, r2, #12
    253e:	2908      	cmp	r1, #8
    2540:	d00d      	beq.n	255e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2542:	0711      	lsls	r1, r2, #28
    2544:	d401      	bmi.n	254a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    2546:	4605      	mov	r5, r0
			*nested_exc = true;
    2548:	2601      	movs	r6, #1
	*recoverable = false;
    254a:	2200      	movs	r2, #0
	switch (fault) {
    254c:	3b03      	subs	r3, #3
	*recoverable = false;
    254e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    2552:	2b03      	cmp	r3, #3
    2554:	d86b      	bhi.n	262e <z_arm_fault+0x116>
    2556:	e8df f003 	tbb	[pc, r3]
    255a:	5504      	.short	0x5504
    255c:	5d59      	.short	0x5d59
		return NULL;
    255e:	4635      	mov	r5, r6
    2560:	e7f3      	b.n	254a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2562:	4b36      	ldr	r3, [pc, #216]	; (263c <z_arm_fault+0x124>)
    2564:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2566:	f014 0402 	ands.w	r4, r4, #2
    256a:	d160      	bne.n	262e <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    256c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    256e:	2a00      	cmp	r2, #0
    2570:	db15      	blt.n	259e <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2574:	0052      	lsls	r2, r2, #1
    2576:	d512      	bpl.n	259e <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    2578:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    257a:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    257e:	f64d 7202 	movw	r2, #57090	; 0xdf02
    2582:	4291      	cmp	r1, r2
    2584:	d00a      	beq.n	259c <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    2586:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    258a:	b30a      	cbz	r2, 25d0 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    258c:	f10d 0207 	add.w	r2, sp, #7
    2590:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2592:	4628      	mov	r0, r5
    2594:	f7ff ff6c 	bl	2470 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    2598:	4604      	mov	r4, r0
		break;
    259a:	e000      	b.n	259e <z_arm_fault+0x86>
			reason = esf->basic.r0;
    259c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    259e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    25a2:	b99b      	cbnz	r3, 25cc <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    25a4:	2220      	movs	r2, #32
    25a6:	4629      	mov	r1, r5
    25a8:	a802      	add	r0, sp, #8
    25aa:	f015 faa7 	bl	17afc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    25ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25b0:	2e00      	cmp	r6, #0
    25b2:	d03e      	beq.n	2632 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    25b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    25b8:	b922      	cbnz	r2, 25c4 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    25ba:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    25be:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    25c2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    25c4:	a902      	add	r1, sp, #8
    25c6:	4620      	mov	r0, r4
    25c8:	f015 fa3e 	bl	17a48 <z_arm_fatal_error>
}
    25cc:	b00a      	add	sp, #40	; 0x28
    25ce:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    25d0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    25d4:	b12a      	cbz	r2, 25e2 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    25d6:	f10d 0107 	add.w	r1, sp, #7
    25da:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    25dc:	f7ff ff7e 	bl	24dc <bus_fault.constprop.0>
    25e0:	e7da      	b.n	2598 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    25e2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    25e4:	b292      	uxth	r2, r2
    25e6:	2a00      	cmp	r2, #0
    25e8:	d0d9      	beq.n	259e <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    25ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    25ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    25f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    25f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    25f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    25f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25f8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    25fc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2600:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    2602:	e7cc      	b.n	259e <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    2604:	f10d 0207 	add.w	r2, sp, #7
    2608:	2100      	movs	r1, #0
    260a:	e7c2      	b.n	2592 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    260c:	f10d 0107 	add.w	r1, sp, #7
    2610:	2000      	movs	r0, #0
    2612:	e7e3      	b.n	25dc <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2614:	4b09      	ldr	r3, [pc, #36]	; (263c <z_arm_fault+0x124>)
    2616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    261a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    261c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    261e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2624:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2628:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    262c:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    262e:	2400      	movs	r4, #0
    2630:	e7b5      	b.n	259e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2632:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2636:	f023 0301 	bic.w	r3, r3, #1
    263a:	e7c2      	b.n	25c2 <z_arm_fault+0xaa>
    263c:	e000ed00 	.word	0xe000ed00

00002640 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2640:	4a02      	ldr	r2, [pc, #8]	; (264c <z_arm_fault_init+0xc>)
    2642:	6953      	ldr	r3, [r2, #20]
    2644:	f043 0310 	orr.w	r3, r3, #16
    2648:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    264a:	4770      	bx	lr
    264c:	e000ed00 	.word	0xe000ed00

00002650 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2650:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2654:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2658:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    265a:	4672      	mov	r2, lr
	bl z_arm_fault
    265c:	f7ff ff5c 	bl	2518 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2660:	bd01      	pop	{r0, pc}
    2662:	bf00      	nop

00002664 <z_arm_interrupt_init>:
    2664:	4804      	ldr	r0, [pc, #16]	; (2678 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2666:	2300      	movs	r3, #0
    2668:	2120      	movs	r1, #32
    266a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    266c:	3301      	adds	r3, #1
    266e:	2b27      	cmp	r3, #39	; 0x27
    2670:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2674:	d1f9      	bne.n	266a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2676:	4770      	bx	lr
    2678:	e000e100 	.word	0xe000e100

0000267c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    267c:	f018 fcb6 	bl	1afec <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2680:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2682:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2686:	4808      	ldr	r0, [pc, #32]	; (26a8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2688:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    268c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    268e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2692:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2696:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2698:	4308      	orrs	r0, r1
    msr CONTROL, r0
    269a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    269e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    26a2:	f7ff fdf7 	bl	2294 <z_arm_prep_c>
    26a6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    26a8:	20003a00 	.word	0x20003a00

000026ac <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    26ac:	4b06      	ldr	r3, [pc, #24]	; (26c8 <z_impl_k_thread_abort+0x1c>)
    26ae:	689b      	ldr	r3, [r3, #8]
    26b0:	4283      	cmp	r3, r0
    26b2:	d107      	bne.n	26c4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    26b4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    26b8:	b123      	cbz	r3, 26c4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26ba:	4a04      	ldr	r2, [pc, #16]	; (26cc <z_impl_k_thread_abort+0x20>)
    26bc:	6853      	ldr	r3, [r2, #4]
    26be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    26c2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    26c4:	f014 b9a8 	b.w	16a18 <z_thread_abort>
    26c8:	20002734 	.word	0x20002734
    26cc:	e000ed00 	.word	0xe000ed00

000026d0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    26d0:	4b02      	ldr	r3, [pc, #8]	; (26dc <z_arm_configure_static_mpu_regions+0xc>)
    26d2:	4a03      	ldr	r2, [pc, #12]	; (26e0 <z_arm_configure_static_mpu_regions+0x10>)
    26d4:	4803      	ldr	r0, [pc, #12]	; (26e4 <z_arm_configure_static_mpu_regions+0x14>)
    26d6:	2101      	movs	r1, #1
    26d8:	f000 b86e 	b.w	27b8 <arm_core_mpu_configure_static_mpu_regions>
    26dc:	20010000 	.word	0x20010000
    26e0:	20000000 	.word	0x20000000
    26e4:	0001b484 	.word	0x0001b484

000026e8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    26e8:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    26ea:	4b05      	ldr	r3, [pc, #20]	; (2700 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    26ec:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    26ee:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    26f0:	4a04      	ldr	r2, [pc, #16]	; (2704 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    26f2:	2120      	movs	r1, #32
    26f4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    26f8:	4618      	mov	r0, r3
    26fa:	2101      	movs	r1, #1
    26fc:	f000 b866 	b.w	27cc <arm_core_mpu_configure_dynamic_mpu_regions>
    2700:	200013f0 	.word	0x200013f0
    2704:	150b0000 	.word	0x150b0000

00002708 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2708:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    270a:	4f1f      	ldr	r7, [pc, #124]	; (2788 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    270c:	2600      	movs	r6, #0
    270e:	428e      	cmp	r6, r1
    2710:	db01      	blt.n	2716 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2712:	4610      	mov	r0, r2
    2714:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    2716:	6844      	ldr	r4, [r0, #4]
    2718:	b39c      	cbz	r4, 2782 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    271a:	b153      	cbz	r3, 2732 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    271c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2720:	ea14 0f0c 	tst.w	r4, ip
    2724:	d118      	bne.n	2758 <mpu_configure_regions+0x50>
		&&
    2726:	2c1f      	cmp	r4, #31
    2728:	d916      	bls.n	2758 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    272a:	6805      	ldr	r5, [r0, #0]
		&&
    272c:	ea1c 0f05 	tst.w	ip, r5
    2730:	d112      	bne.n	2758 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2732:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2734:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2736:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    273a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    273c:	d90f      	bls.n	275e <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    273e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2742:	d80e      	bhi.n	2762 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2744:	3c01      	subs	r4, #1
    2746:	fab4 f484 	clz	r4, r4
    274a:	f1c4 041f 	rsb	r4, r4, #31
    274e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2750:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2752:	ea4c 0404 	orr.w	r4, ip, r4
    2756:	d906      	bls.n	2766 <mpu_configure_regions+0x5e>
			return -EINVAL;
    2758:	f06f 0215 	mvn.w	r2, #21
    275c:	e7d9      	b.n	2712 <mpu_configure_regions+0xa>
		return REGION_32B;
    275e:	2408      	movs	r4, #8
    2760:	e7f6      	b.n	2750 <mpu_configure_regions+0x48>
		return REGION_4G;
    2762:	243e      	movs	r4, #62	; 0x3e
    2764:	e7f4      	b.n	2750 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2766:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    276a:	4315      	orrs	r5, r2
    276c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2770:	f044 0401 	orr.w	r4, r4, #1
    2774:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2778:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    277c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    277e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2782:	3601      	adds	r6, #1
    2784:	300c      	adds	r0, #12
    2786:	e7c2      	b.n	270e <mpu_configure_regions+0x6>
    2788:	e000ed00 	.word	0xe000ed00

0000278c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    278c:	4b04      	ldr	r3, [pc, #16]	; (27a0 <arm_core_mpu_enable+0x14>)
    278e:	2205      	movs	r2, #5
    2790:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2794:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2798:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    279c:	4770      	bx	lr
    279e:	bf00      	nop
    27a0:	e000ed00 	.word	0xe000ed00

000027a4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    27a4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    27a8:	4b02      	ldr	r3, [pc, #8]	; (27b4 <arm_core_mpu_disable+0x10>)
    27aa:	2200      	movs	r2, #0
    27ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    27b0:	4770      	bx	lr
    27b2:	bf00      	nop
    27b4:	e000ed00 	.word	0xe000ed00

000027b8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    27b8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    27ba:	4c03      	ldr	r4, [pc, #12]	; (27c8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    27bc:	2301      	movs	r3, #1
    27be:	7822      	ldrb	r2, [r4, #0]
    27c0:	f7ff ffa2 	bl	2708 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    27c4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    27c6:	bd10      	pop	{r4, pc}
    27c8:	2000278c 	.word	0x2000278c

000027cc <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    27cc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    27ce:	4a09      	ldr	r2, [pc, #36]	; (27f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    27d0:	2300      	movs	r3, #0
    27d2:	7812      	ldrb	r2, [r2, #0]
    27d4:	f7ff ff98 	bl	2708 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    27d8:	f110 0f16 	cmn.w	r0, #22
    27dc:	d002      	beq.n	27e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    27de:	4a06      	ldr	r2, [pc, #24]	; (27f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    27e0:	2807      	cmp	r0, #7
    27e2:	dd00      	ble.n	27e6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    27e4:	bd08      	pop	{r3, pc}
    27e6:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    27ea:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    27ee:	3001      	adds	r0, #1
    27f0:	e7f6      	b.n	27e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    27f2:	bf00      	nop
    27f4:	2000278c 	.word	0x2000278c
    27f8:	e000ed00 	.word	0xe000ed00

000027fc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    27fc:	4914      	ldr	r1, [pc, #80]	; (2850 <z_arm_mpu_init+0x54>)
    27fe:	6808      	ldr	r0, [r1, #0]
    2800:	2808      	cmp	r0, #8
{
    2802:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2804:	d821      	bhi.n	284a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2806:	f7ff ffcd 	bl	27a4 <arm_core_mpu_disable>
    280a:	4c12      	ldr	r4, [pc, #72]	; (2854 <z_arm_mpu_init+0x58>)
    280c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    280e:	2200      	movs	r2, #0
    2810:	4290      	cmp	r0, r2
    2812:	f101 010c 	add.w	r1, r1, #12
    2816:	d105      	bne.n	2824 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2818:	4b0f      	ldr	r3, [pc, #60]	; (2858 <z_arm_mpu_init+0x5c>)
    281a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    281c:	f7ff ffb6 	bl	278c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2820:	2000      	movs	r0, #0
}
    2822:	bd10      	pop	{r4, pc}
    2824:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2828:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    282c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2830:	4313      	orrs	r3, r2
    2832:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2836:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    283a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    283e:	f043 0301 	orr.w	r3, r3, #1
    2842:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2846:	3201      	adds	r2, #1
    2848:	e7e2      	b.n	2810 <z_arm_mpu_init+0x14>
		return -1;
    284a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    284e:	e7e8      	b.n	2822 <z_arm_mpu_init+0x26>
    2850:	0001b490 	.word	0x0001b490
    2854:	e000ed00 	.word	0xe000ed00
    2858:	2000278c 	.word	0x2000278c

0000285c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    285c:	4b01      	ldr	r3, [pc, #4]	; (2864 <__stdout_hook_install+0x8>)
    285e:	6018      	str	r0, [r3, #0]
}
    2860:	4770      	bx	lr
    2862:	bf00      	nop
    2864:	200001a0 	.word	0x200001a0

00002868 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2868:	f04f 0220 	mov.w	r2, #32
    286c:	f3ef 8311 	mrs	r3, BASEPRI
    2870:	f382 8812 	msr	BASEPRI_MAX, r2
    2874:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2878:	4a04      	ldr	r2, [pc, #16]	; (288c <nordicsemi_nrf52_init+0x24>)
    287a:	2101      	movs	r1, #1
    287c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    2880:	f383 8811 	msr	BASEPRI, r3
    2884:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2888:	2000      	movs	r0, #0
    288a:	4770      	bx	lr
    288c:	4001e000 	.word	0x4001e000

00002890 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2890:	b120      	cbz	r0, 289c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2892:	4b03      	ldr	r3, [pc, #12]	; (28a0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2894:	0180      	lsls	r0, r0, #6
    2896:	f043 0301 	orr.w	r3, r3, #1
    289a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    289c:	4770      	bx	lr
    289e:	bf00      	nop
    28a0:	0001b430 	.word	0x0001b430

000028a4 <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
    28a4:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
    28a6:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
    28a8:	6820      	ldr	r0, [r4, #0]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    28aa:	f013 f98f 	bl	15bcc <z_impl_device_get_binding>
	if (!gpio) {
    28ae:	b930      	cbnz	r0, 28be <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
    28b0:	480d      	ldr	r0, [pc, #52]	; (28e8 <pwr_ctrl_init+0x44>)
    28b2:	6821      	ldr	r1, [r4, #0]
    28b4:	f014 fb5b 	bl	16f6e <printk>
		return -ENODEV;
    28b8:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
    28bc:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
    28be:	6861      	ldr	r1, [r4, #4]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    28c0:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    28c2:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    28c4:	b2c9      	uxtb	r1, r1
    28c6:	2301      	movs	r3, #1
    28c8:	fa03 f201 	lsl.w	r2, r3, r1
    28cc:	6823      	ldr	r3, [r4, #0]
    28ce:	ea23 0302 	bic.w	r3, r3, r2
    28d2:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
    28d4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    28d8:	682b      	ldr	r3, [r5, #0]
    28da:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    28dc:	2021      	movs	r0, #33	; 0x21
    28de:	2100      	movs	r1, #0
    28e0:	f014 f86a 	bl	169b8 <z_impl_k_sleep>
	return 0;
    28e4:	2000      	movs	r0, #0
    28e6:	e7e9      	b.n	28bc <pwr_ctrl_init+0x18>
    28e8:	0001c8b9 	.word	0x0001c8b9

000028ec <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    28ec:	b430      	push	{r4, r5}
    28ee:	4603      	mov	r3, r0
    28f0:	4608      	mov	r0, r1
	switch (src->type) {
    28f2:	781a      	ldrb	r2, [r3, #0]
    28f4:	2a01      	cmp	r2, #1
    28f6:	d013      	beq.n	2920 <uuid_to_uuid128+0x34>
    28f8:	2a02      	cmp	r2, #2
    28fa:	d026      	beq.n	294a <uuid_to_uuid128+0x5e>
    28fc:	b972      	cbnz	r2, 291c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    28fe:	4a15      	ldr	r2, [pc, #84]	; (2954 <uuid_to_uuid128+0x68>)
    2900:	f102 0410 	add.w	r4, r2, #16
    2904:	f852 5b04 	ldr.w	r5, [r2], #4
    2908:	f841 5b04 	str.w	r5, [r1], #4
    290c:	42a2      	cmp	r2, r4
    290e:	d1f9      	bne.n	2904 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    2910:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    2912:	7812      	ldrb	r2, [r2, #0]
    2914:	700a      	strb	r2, [r1, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2916:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    2918:	0a1b      	lsrs	r3, r3, #8
    291a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    291c:	bc30      	pop	{r4, r5}
    291e:	4770      	bx	lr
		*dst = uuid128_base;
    2920:	4a0c      	ldr	r2, [pc, #48]	; (2954 <uuid_to_uuid128+0x68>)
    2922:	f102 0410 	add.w	r4, r2, #16
    2926:	f852 5b04 	ldr.w	r5, [r2], #4
    292a:	f841 5b04 	str.w	r5, [r1], #4
    292e:	42a2      	cmp	r2, r4
    2930:	d1f9      	bne.n	2926 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    2932:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    2934:	7812      	ldrb	r2, [r2, #0]
    2936:	700a      	strb	r2, [r1, #0]
    2938:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    293c:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    293e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    2940:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    2942:	0a1b      	lsrs	r3, r3, #8
    2944:	7382      	strb	r2, [r0, #14]
    2946:	7403      	strb	r3, [r0, #16]
}
    2948:	e7e8      	b.n	291c <uuid_to_uuid128+0x30>
}
    294a:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    294c:	2211      	movs	r2, #17
    294e:	4619      	mov	r1, r3
    2950:	f015 b8d4 	b.w	17afc <memcpy>
    2954:	0001c8dc 	.word	0x0001c8dc

00002958 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    2958:	b538      	push	{r3, r4, r5, lr}
    295a:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    295c:	4805      	ldr	r0, [pc, #20]	; (2974 <bt_buf_get_rx+0x1c>)
    295e:	f017 f846 	bl	199ee <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    2962:	4604      	mov	r4, r0
    2964:	b120      	cbz	r0, 2970 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    2966:	2100      	movs	r1, #0
    2968:	3008      	adds	r0, #8
    296a:	f017 f85f 	bl	19a2c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    296e:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    2970:	4620      	mov	r0, r4
    2972:	bd38      	pop	{r3, r4, r5, pc}
    2974:	200009a0 	.word	0x200009a0

00002978 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    2978:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    297a:	490b      	ldr	r1, [pc, #44]	; (29a8 <bt_buf_get_cmd_complete+0x30>)
{
    297c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    297e:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
    2982:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    2984:	b920      	cbnz	r0, 2990 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    2986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    298a:	2001      	movs	r0, #1
    298c:	f7ff bfe4 	b.w	2958 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    2990:	f017 f85d 	bl	19a4e <net_buf_ref>
    2994:	2301      	movs	r3, #1
		buf->len = 0U;
    2996:	2100      	movs	r1, #0
    2998:	7503      	strb	r3, [r0, #20]
    299a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    299c:	4604      	mov	r4, r0
    299e:	3008      	adds	r0, #8
    29a0:	f017 f844 	bl	19a2c <net_buf_simple_reserve>
}
    29a4:	4620      	mov	r0, r4
    29a6:	bd10      	pop	{r4, pc}
    29a8:	20000000 	.word	0x20000000

000029ac <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    29ac:	b570      	push	{r4, r5, r6, lr}
    29ae:	4604      	mov	r4, r0
	switch (evt) {
    29b0:	2c0f      	cmp	r4, #15
{
    29b2:	460d      	mov	r5, r1
    29b4:	4610      	mov	r0, r2
    29b6:	4619      	mov	r1, r3
	switch (evt) {
    29b8:	d805      	bhi.n	29c6 <bt_buf_get_evt+0x1a>
    29ba:	2c0d      	cmp	r4, #13
    29bc:	d912      	bls.n	29e4 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    29be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    29c2:	f7ff bfd9 	b.w	2978 <bt_buf_get_cmd_complete>
	switch (evt) {
    29c6:	2c13      	cmp	r4, #19
    29c8:	d10c      	bne.n	29e4 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    29ca:	480b      	ldr	r0, [pc, #44]	; (29f8 <bt_buf_get_evt+0x4c>)
    29cc:	f017 f80f 	bl	199ee <net_buf_alloc_fixed>
			if (buf) {
    29d0:	4604      	mov	r4, r0
    29d2:	b128      	cbz	r0, 29e0 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    29d4:	2100      	movs	r1, #0
    29d6:	3008      	adds	r0, #8
    29d8:	f017 f828 	bl	19a2c <net_buf_simple_reserve>
    29dc:	2301      	movs	r3, #1
    29de:	7523      	strb	r3, [r4, #20]
}
    29e0:	4620      	mov	r0, r4
    29e2:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    29e4:	4602      	mov	r2, r0
    29e6:	460b      	mov	r3, r1
		if (discardable) {
    29e8:	b10d      	cbz	r5, 29ee <bt_buf_get_evt+0x42>
    29ea:	4804      	ldr	r0, [pc, #16]	; (29fc <bt_buf_get_evt+0x50>)
    29ec:	e7ee      	b.n	29cc <bt_buf_get_evt+0x20>
}
    29ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    29f2:	2001      	movs	r0, #1
    29f4:	f7ff bfb0 	b.w	2958 <bt_buf_get_rx>
    29f8:	200009cc 	.word	0x200009cc
    29fc:	2000091c 	.word	0x2000091c

00002a00 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    2a00:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    2a02:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    2a04:	781a      	ldrb	r2, [r3, #0]
    2a06:	b972      	cbnz	r2, 2a26 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    2a08:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    2a0c:	4620      	mov	r0, r4
    2a0e:	f001 fc95 	bl	433c <bt_conn_lookup_handle>
	if (!conn) {
    2a12:	4605      	mov	r5, r0
    2a14:	b940      	cbnz	r0, 2a28 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    2a16:	4b08      	ldr	r3, [pc, #32]	; (2a38 <hci_disconn_complete_prio+0x38>)
    2a18:	881a      	ldrh	r2, [r3, #0]
    2a1a:	b922      	cbnz	r2, 2a26 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    2a1c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    2a20:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    2a24:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    2a26:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    2a28:	2101      	movs	r1, #1
    2a2a:	f001 fc8f 	bl	434c <bt_conn_set_state>
	bt_conn_unref(conn);
    2a2e:	4628      	mov	r0, r5
}
    2a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    2a34:	f015 bdf7 	b.w	18626 <bt_conn_unref>
    2a38:	20002774 	.word	0x20002774

00002a3c <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    2a3c:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    2a3e:	2101      	movs	r1, #1
    2a40:	4604      	mov	r4, r0
    2a42:	3008      	adds	r0, #8
    2a44:	f017 f85c 	bl	19b00 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    2a48:	4621      	mov	r1, r4
    2a4a:	4a03      	ldr	r2, [pc, #12]	; (2a58 <hci_le_meta_event+0x1c>)
    2a4c:	7800      	ldrb	r0, [r0, #0]
}
    2a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    2a52:	2307      	movs	r3, #7
    2a54:	f015 b924 	b.w	17ca0 <handle_event>
    2a58:	0001b4e8 	.word	0x0001b4e8

00002a5c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    2a5c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    2a5e:	4c0c      	ldr	r4, [pc, #48]	; (2a90 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    2a60:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    2a62:	2205      	movs	r2, #5
    2a64:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    2a68:	f001 fdfc 	bl	4664 <bt_conn_lookup_state_le>
		if (!conn) {
    2a6c:	b970      	cbnz	r0, 2a8c <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    2a6e:	4b09      	ldr	r3, [pc, #36]	; (2a94 <find_pending_connect.part.0+0x38>)
    2a70:	6818      	ldr	r0, [r3, #0]
    2a72:	889a      	ldrh	r2, [r3, #4]
    2a74:	9000      	str	r0, [sp, #0]
    2a76:	799b      	ldrb	r3, [r3, #6]
    2a78:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    2a7c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
    2a80:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    2a84:	2204      	movs	r2, #4
    2a86:	4669      	mov	r1, sp
    2a88:	f001 fdec 	bl	4664 <bt_conn_lookup_state_le>
}
    2a8c:	b002      	add	sp, #8
    2a8e:	bd10      	pop	{r4, pc}
    2a90:	20000000 	.word	0x20000000
    2a94:	0001b40e 	.word	0x0001b40e

00002a98 <hci_cmd_done>:
{
    2a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a9a:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2a9c:	7990      	ldrb	r0, [r2, #6]
{
    2a9e:	460e      	mov	r6, r1
    2aa0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2aa2:	f010 fc47 	bl	13334 <net_buf_pool_get>
    2aa6:	4b2d      	ldr	r3, [pc, #180]	; (2b5c <hci_cmd_done+0xc4>)
    2aa8:	4283      	cmp	r3, r0
    2aaa:	d155      	bne.n	2b58 <hci_cmd_done+0xc0>
	if (cmd(buf)->opcode != opcode) {
    2aac:	4620      	mov	r0, r4
    2aae:	f010 fc49 	bl	13344 <net_buf_id>
    2ab2:	4d2b      	ldr	r5, [pc, #172]	; (2b60 <hci_cmd_done+0xc8>)
    2ab4:	230c      	movs	r3, #12
    2ab6:	fb03 5000 	mla	r0, r3, r0, r5
    2aba:	8843      	ldrh	r3, [r0, #2]
    2abc:	42bb      	cmp	r3, r7
    2abe:	d14b      	bne.n	2b58 <hci_cmd_done+0xc0>
	if (bt_dev.sent_cmd) {
    2ac0:	4f28      	ldr	r7, [pc, #160]	; (2b64 <hci_cmd_done+0xcc>)
    2ac2:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    2ac6:	b120      	cbz	r0, 2ad2 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    2ac8:	f010 fcf8 	bl	134bc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2acc:	2300      	movs	r3, #0
    2ace:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    2ad2:	4620      	mov	r0, r4
    2ad4:	f010 fc36 	bl	13344 <net_buf_id>
    2ad8:	270c      	movs	r7, #12
    2ada:	fb07 5000 	mla	r0, r7, r0, r5
    2ade:	6843      	ldr	r3, [r0, #4]
    2ae0:	b1a3      	cbz	r3, 2b0c <hci_cmd_done+0x74>
    2ae2:	b99e      	cbnz	r6, 2b0c <hci_cmd_done+0x74>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    2ae4:	4620      	mov	r0, r4
    2ae6:	f010 fc2d 	bl	13344 <net_buf_id>
    2aea:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2aee:	2301      	movs	r3, #1
    2af0:	6847      	ldr	r7, [r0, #4]
    2af2:	e9d7 2000 	ldrd	r2, r0, [r7]
    2af6:	f000 011f 	and.w	r1, r0, #31
    2afa:	fa03 f101 	lsl.w	r1, r3, r1

	if (val) {
    2afe:	7a3b      	ldrb	r3, [r7, #8]
    2b00:	0940      	lsrs	r0, r0, #5
    2b02:	b1d3      	cbz	r3, 2b3a <hci_cmd_done+0xa2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2b04:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    2b08:	f015 f8df 	bl	17cca <atomic_or>
	if (cmd(buf)->sync) {
    2b0c:	4620      	mov	r0, r4
    2b0e:	f010 fc19 	bl	13344 <net_buf_id>
    2b12:	270c      	movs	r7, #12
    2b14:	fb07 5000 	mla	r0, r7, r0, r5
    2b18:	6883      	ldr	r3, [r0, #8]
    2b1a:	b1eb      	cbz	r3, 2b58 <hci_cmd_done+0xc0>
		cmd(buf)->status = status;
    2b1c:	4620      	mov	r0, r4
    2b1e:	f010 fc11 	bl	13344 <net_buf_id>
    2b22:	4378      	muls	r0, r7
    2b24:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    2b26:	4620      	mov	r0, r4
    2b28:	f010 fc0c 	bl	13344 <net_buf_id>
    2b2c:	fb07 5500 	mla	r5, r7, r0, r5
    2b30:	68a8      	ldr	r0, [r5, #8]
}
    2b32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2b36:	f013 baa3 	b.w	16080 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2b3a:	43cb      	mvns	r3, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b3c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2b40:	f3bf 8f5b 	dmb	ish
    2b44:	e852 1f00 	ldrex	r1, [r2]
    2b48:	4019      	ands	r1, r3
    2b4a:	e842 1000 	strex	r0, r1, [r2]
    2b4e:	2800      	cmp	r0, #0
    2b50:	d1f8      	bne.n	2b44 <hci_cmd_done+0xac>
    2b52:	f3bf 8f5b 	dmb	ish
    2b56:	e7d9      	b.n	2b0c <hci_cmd_done+0x74>
    2b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b5a:	bf00      	nop
    2b5c:	20000974 	.word	0x20000974
    2b60:	200013fc 	.word	0x200013fc
    2b64:	20000000 	.word	0x20000000

00002b68 <hci_cmd_status>:
{
    2b68:	b538      	push	{r3, r4, r5, lr}
    2b6a:	2104      	movs	r1, #4
    2b6c:	4604      	mov	r4, r0
    2b6e:	3008      	adds	r0, #8
    2b70:	f016 ffc6 	bl	19b00 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    2b74:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    2b76:	7801      	ldrb	r1, [r0, #0]
    2b78:	8840      	ldrh	r0, [r0, #2]
    2b7a:	4622      	mov	r2, r4
    2b7c:	f7ff ff8c 	bl	2a98 <hci_cmd_done>
	if (ncmd) {
    2b80:	b125      	cbz	r5, 2b8c <hci_cmd_status+0x24>
    2b82:	4803      	ldr	r0, [pc, #12]	; (2b90 <hci_cmd_status+0x28>)
}
    2b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2b88:	f013 ba7a 	b.w	16080 <z_impl_k_sem_give>
    2b8c:	bd38      	pop	{r3, r4, r5, pc}
    2b8e:	bf00      	nop
    2b90:	20000118 	.word	0x20000118

00002b94 <hci_cmd_complete>:
{
    2b94:	b538      	push	{r3, r4, r5, lr}
    2b96:	2103      	movs	r1, #3
    2b98:	4604      	mov	r4, r0
    2b9a:	3008      	adds	r0, #8
    2b9c:	f016 ffb0 	bl	19b00 <net_buf_simple_pull_mem>
	status = buf->data[0];
    2ba0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    2ba2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    2ba4:	7819      	ldrb	r1, [r3, #0]
    2ba6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    2baa:	4622      	mov	r2, r4
    2bac:	f7ff ff74 	bl	2a98 <hci_cmd_done>
	if (ncmd) {
    2bb0:	b125      	cbz	r5, 2bbc <hci_cmd_complete+0x28>
    2bb2:	4803      	ldr	r0, [pc, #12]	; (2bc0 <hci_cmd_complete+0x2c>)
}
    2bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2bb8:	f013 ba62 	b.w	16080 <z_impl_k_sem_give>
    2bbc:	bd38      	pop	{r3, r4, r5, pc}
    2bbe:	bf00      	nop
    2bc0:	20000118 	.word	0x20000118

00002bc4 <bt_hci_cmd_state_set_init>:
{
    2bc4:	b510      	push	{r4, lr}
	state->bit = bit;
    2bc6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    2bca:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2bce:	720b      	strb	r3, [r1, #8]
{
    2bd0:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    2bd2:	f010 fbb7 	bl	13344 <net_buf_id>
    2bd6:	4b03      	ldr	r3, [pc, #12]	; (2be4 <bt_hci_cmd_state_set_init+0x20>)
    2bd8:	220c      	movs	r2, #12
    2bda:	fb02 3300 	mla	r3, r2, r0, r3
    2bde:	605c      	str	r4, [r3, #4]
}
    2be0:	bd10      	pop	{r4, pc}
    2be2:	bf00      	nop
    2be4:	200013fc 	.word	0x200013fc

00002be8 <bt_hci_cmd_create>:
{
    2be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    2bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2bf4:	4606      	mov	r6, r0
    2bf6:	4817      	ldr	r0, [pc, #92]	; (2c54 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    2bf8:	4d17      	ldr	r5, [pc, #92]	; (2c58 <bt_hci_cmd_create+0x70>)
{
    2bfa:	460f      	mov	r7, r1
    2bfc:	f016 fef7 	bl	199ee <net_buf_alloc_fixed>
    2c00:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    2c02:	f100 0a08 	add.w	sl, r0, #8
    2c06:	2100      	movs	r1, #0
    2c08:	f04f 0800 	mov.w	r8, #0
    2c0c:	4650      	mov	r0, sl
    2c0e:	f016 ff0d 	bl	19a2c <net_buf_simple_reserve>
    2c12:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    2c16:	4620      	mov	r0, r4
    2c18:	f010 fb94 	bl	13344 <net_buf_id>
    2c1c:	f04f 090c 	mov.w	r9, #12
    2c20:	fb09 5000 	mla	r0, r9, r0, r5
    2c24:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    2c26:	4620      	mov	r0, r4
    2c28:	f010 fb8c 	bl	13344 <net_buf_id>
    2c2c:	fb09 5000 	mla	r0, r9, r0, r5
    2c30:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    2c34:	4620      	mov	r0, r4
    2c36:	f010 fb85 	bl	13344 <net_buf_id>
    2c3a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    2c3e:	2103      	movs	r1, #3
    2c40:	f8c5 8004 	str.w	r8, [r5, #4]
    2c44:	4650      	mov	r0, sl
    2c46:	f016 ff34 	bl	19ab2 <net_buf_simple_add>
	hdr->param_len = param_len;
    2c4a:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    2c4c:	8006      	strh	r6, [r0, #0]
}
    2c4e:	4620      	mov	r0, r4
    2c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c54:	20000974 	.word	0x20000974
    2c58:	200013fc 	.word	0x200013fc

00002c5c <bt_hci_cmd_send_sync>:
{
    2c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c5e:	4615      	mov	r5, r2
    2c60:	b087      	sub	sp, #28
	if (!buf) {
    2c62:	460c      	mov	r4, r1
    2c64:	b921      	cbnz	r1, 2c70 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    2c66:	f7ff ffbf 	bl	2be8 <bt_hci_cmd_create>
		if (!buf) {
    2c6a:	4604      	mov	r4, r0
    2c6c:	2800      	cmp	r0, #0
    2c6e:	d048      	beq.n	2d02 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    2c70:	2201      	movs	r2, #1
    2c72:	2100      	movs	r1, #0
    2c74:	4668      	mov	r0, sp
    2c76:	f017 fe13 	bl	1a8a0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2c7a:	4620      	mov	r0, r4
    2c7c:	f010 fb62 	bl	13344 <net_buf_id>
    2c80:	4f21      	ldr	r7, [pc, #132]	; (2d08 <bt_hci_cmd_send_sync+0xac>)
    2c82:	230c      	movs	r3, #12
    2c84:	fb03 7000 	mla	r0, r3, r0, r7
    2c88:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    2c8c:	4620      	mov	r0, r4
    2c8e:	f016 fede 	bl	19a4e <net_buf_ref>
    2c92:	4601      	mov	r1, r0
    2c94:	481d      	ldr	r0, [pc, #116]	; (2d0c <bt_hci_cmd_send_sync+0xb0>)
    2c96:	f016 fecd 	bl	19a34 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    2c9a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    2c9e:	2300      	movs	r3, #0
    2ca0:	4668      	mov	r0, sp
    2ca2:	f013 fa13 	bl	160cc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    2ca6:	4606      	mov	r6, r0
    2ca8:	b180      	cbz	r0, 2ccc <bt_hci_cmd_send_sync+0x70>
    2caa:	4a19      	ldr	r2, [pc, #100]	; (2d10 <bt_hci_cmd_send_sync+0xb4>)
    2cac:	4919      	ldr	r1, [pc, #100]	; (2d14 <bt_hci_cmd_send_sync+0xb8>)
    2cae:	481a      	ldr	r0, [pc, #104]	; (2d18 <bt_hci_cmd_send_sync+0xbc>)
    2cb0:	f240 1331 	movw	r3, #305	; 0x131
    2cb4:	f014 f95b 	bl	16f6e <printk>
    2cb8:	4818      	ldr	r0, [pc, #96]	; (2d1c <bt_hci_cmd_send_sync+0xc0>)
    2cba:	4631      	mov	r1, r6
    2cbc:	f014 f957 	bl	16f6e <printk>
    2cc0:	4040      	eors	r0, r0
    2cc2:	f380 8811 	msr	BASEPRI, r0
    2cc6:	f04f 0003 	mov.w	r0, #3
    2cca:	df02      	svc	2
	status = cmd(buf)->status;
    2ccc:	4620      	mov	r0, r4
    2cce:	f010 fb39 	bl	13344 <net_buf_id>
    2cd2:	230c      	movs	r3, #12
    2cd4:	4358      	muls	r0, r3
    2cd6:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    2cd8:	b156      	cbz	r6, 2cf0 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    2cda:	4620      	mov	r0, r4
    2cdc:	f010 fbee 	bl	134bc <net_buf_unref>
			return -EIO;
    2ce0:	2e09      	cmp	r6, #9
    2ce2:	bf0c      	ite	eq
    2ce4:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    2ce8:	f06f 0004 	mvnne.w	r0, #4
}
    2cec:	b007      	add	sp, #28
    2cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    2cf0:	b115      	cbz	r5, 2cf8 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    2cf2:	602c      	str	r4, [r5, #0]
	return 0;
    2cf4:	4630      	mov	r0, r6
    2cf6:	e7f9      	b.n	2cec <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    2cf8:	4620      	mov	r0, r4
    2cfa:	f010 fbdf 	bl	134bc <net_buf_unref>
	return 0;
    2cfe:	4628      	mov	r0, r5
    2d00:	e7f4      	b.n	2cec <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    2d02:	f06f 0068 	mvn.w	r0, #104	; 0x68
    2d06:	e7f1      	b.n	2cec <bt_hci_cmd_send_sync+0x90>
    2d08:	200013fc 	.word	0x200013fc
    2d0c:	20000134 	.word	0x20000134
    2d10:	0001c8ed 	.word	0x0001c8ed
    2d14:	0001c921 	.word	0x0001c921
    2d18:	0001c92a 	.word	0x0001c92a
    2d1c:	0001c947 	.word	0x0001c947

00002d20 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    2d20:	4b02      	ldr	r3, [pc, #8]	; (2d2c <bt_send+0xc>)
    2d22:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    2d26:	691b      	ldr	r3, [r3, #16]
    2d28:	4718      	bx	r3
    2d2a:	bf00      	nop
    2d2c:	20000000 	.word	0x20000000

00002d30 <bt_hci_cmd_send>:
{
    2d30:	b538      	push	{r3, r4, r5, lr}
    2d32:	4605      	mov	r5, r0
	if (!buf) {
    2d34:	460c      	mov	r4, r1
    2d36:	b919      	cbnz	r1, 2d40 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    2d38:	f7ff ff56 	bl	2be8 <bt_hci_cmd_create>
		if (!buf) {
    2d3c:	4604      	mov	r4, r0
    2d3e:	b198      	cbz	r0, 2d68 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2d40:	f640 4335 	movw	r3, #3125	; 0xc35
    2d44:	429d      	cmp	r5, r3
    2d46:	d109      	bne.n	2d5c <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    2d48:	4620      	mov	r0, r4
    2d4a:	f7ff ffe9 	bl	2d20 <bt_send>
		if (err) {
    2d4e:	4605      	mov	r5, r0
    2d50:	b110      	cbz	r0, 2d58 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    2d52:	4620      	mov	r0, r4
    2d54:	f010 fbb2 	bl	134bc <net_buf_unref>
}
    2d58:	4628      	mov	r0, r5
    2d5a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2d5c:	4804      	ldr	r0, [pc, #16]	; (2d70 <bt_hci_cmd_send+0x40>)
    2d5e:	4621      	mov	r1, r4
    2d60:	f016 fe68 	bl	19a34 <net_buf_put>
	return 0;
    2d64:	2500      	movs	r5, #0
    2d66:	e7f7      	b.n	2d58 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    2d68:	f06f 0568 	mvn.w	r5, #104	; 0x68
    2d6c:	e7f4      	b.n	2d58 <bt_hci_cmd_send+0x28>
    2d6e:	bf00      	nop
    2d70:	20000134 	.word	0x20000134

00002d74 <conn_auto_initiate>:
{
    2d74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    2d76:	7a83      	ldrb	r3, [r0, #10]
    2d78:	2b07      	cmp	r3, #7
{
    2d7a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    2d7c:	d157      	bne.n	2e2e <conn_auto_initiate+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2d7e:	f3bf 8f5b 	dmb	ish
    2d82:	6843      	ldr	r3, [r0, #4]
    2d84:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    2d88:	049b      	lsls	r3, r3, #18
    2d8a:	f100 0604 	add.w	r6, r0, #4
    2d8e:	d41b      	bmi.n	2dc8 <conn_auto_initiate+0x54>
    2d90:	78c3      	ldrb	r3, [r0, #3]
    2d92:	b123      	cbz	r3, 2d9e <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    2d94:	4b27      	ldr	r3, [pc, #156]	; (2e34 <conn_auto_initiate+0xc0>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    2d96:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    2d9a:	071d      	lsls	r5, r3, #28
    2d9c:	d514      	bpl.n	2dc8 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2d9e:	2102      	movs	r1, #2
    2da0:	f242 0016 	movw	r0, #8214	; 0x2016
    2da4:	f7ff ff20 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
    2da8:	4605      	mov	r5, r0
    2daa:	b168      	cbz	r0, 2dc8 <conn_auto_initiate+0x54>
    2dac:	2102      	movs	r1, #2
    2dae:	3008      	adds	r0, #8
    2db0:	f016 fe7f 	bl	19ab2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2db4:	8823      	ldrh	r3, [r4, #0]
    2db6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2db8:	4629      	mov	r1, r5
    2dba:	f242 0016 	movw	r0, #8214	; 0x2016
}
    2dbe:	b004      	add	sp, #16
    2dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2dc4:	f7ff bfb4 	b.w	2d30 <bt_hci_cmd_send>
    2dc8:	f3bf 8f5b 	dmb	ish
    2dcc:	6863      	ldr	r3, [r4, #4]
    2dce:	4d19      	ldr	r5, [pc, #100]	; (2e34 <conn_auto_initiate+0xc0>)
    2dd0:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    2dd4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    2dd8:	f3c3 3100 	ubfx	r1, r3, #12, #1
    2ddc:	d111      	bne.n	2e02 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    2dde:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    2de2:	07d8      	lsls	r0, r3, #31
    2de4:	d50d      	bpl.n	2e02 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    2de6:	2302      	movs	r3, #2
    2de8:	9100      	str	r1, [sp, #0]
    2dea:	461a      	mov	r2, r3
    2dec:	4620      	mov	r0, r4
    2dee:	f015 f8b7 	bl	17f60 <bt_le_set_phy>
		if (!err) {
    2df2:	b930      	cbnz	r0, 2e02 <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2df4:	2180      	movs	r1, #128	; 0x80
    2df6:	4630      	mov	r0, r6
}
    2df8:	b004      	add	sp, #16
    2dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2dfe:	f014 bf64 	b.w	17cca <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    2e02:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    2e06:	069a      	lsls	r2, r3, #26
    2e08:	d511      	bpl.n	2e2e <conn_auto_initiate+0xba>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    2e0a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    2e0e:	689b      	ldr	r3, [r3, #8]
    2e10:	079b      	lsls	r3, r3, #30
    2e12:	d50c      	bpl.n	2e2e <conn_auto_initiate+0xba>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    2e14:	f10d 010e 	add.w	r1, sp, #14
    2e18:	a803      	add	r0, sp, #12
    2e1a:	f015 f830 	bl	17e7e <hci_le_read_max_data_len>
			if (!err) {
    2e1e:	b930      	cbnz	r0, 2e2e <conn_auto_initiate+0xba>
				err = bt_le_set_data_len(conn,
    2e20:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    2e24:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    2e28:	4620      	mov	r0, r4
    2e2a:	f015 f87c 	bl	17f26 <bt_le_set_data_len>
}
    2e2e:	b004      	add	sp, #16
    2e30:	bd70      	pop	{r4, r5, r6, pc}
    2e32:	bf00      	nop
    2e34:	20000000 	.word	0x20000000

00002e38 <bt_hci_le_enh_conn_complete>:
{
    2e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    2e3c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    2e40:	4a68      	ldr	r2, [pc, #416]	; (2fe4 <bt_hci_le_enh_conn_complete+0x1ac>)
	if (evt->status) {
    2e42:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    2e44:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    2e46:	ea6f 5307 	mvn.w	r3, r7, lsl #20
    2e4a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    2e4e:	b29b      	uxth	r3, r3
    2e50:	4299      	cmp	r1, r3
    2e52:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    2e56:	bf08      	it	eq
    2e58:	8016      	strheq	r6, [r2, #0]
{
    2e5a:	b085      	sub	sp, #20
    2e5c:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    2e5e:	fa1f f887 	uxth.w	r8, r7
			return true;
    2e62:	bf08      	it	eq
    2e64:	2601      	moveq	r6, #1
	if (evt->status) {
    2e66:	b304      	cbz	r4, 2eaa <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    2e68:	2c3c      	cmp	r4, #60	; 0x3c
    2e6a:	d159      	bne.n	2f20 <bt_hci_le_enh_conn_complete+0xe8>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    2e6c:	f000 ff18 	bl	3ca0 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2e70:	f3bf 8f5b 	dmb	ish
    2e74:	3010      	adds	r0, #16
    2e76:	e850 3f00 	ldrex	r3, [r0]
    2e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2e7e:	e840 3200 	strex	r2, r3, [r0]
    2e82:	2a00      	cmp	r2, #0
    2e84:	d1f7      	bne.n	2e76 <bt_hci_le_enh_conn_complete+0x3e>
    2e86:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    2e8a:	2000      	movs	r0, #0
    2e8c:	f7ff fde6 	bl	2a5c <find_pending_connect.part.0>
		if (!conn) {
    2e90:	4605      	mov	r5, r0
    2e92:	2800      	cmp	r0, #0
    2e94:	d044      	beq.n	2f20 <bt_hci_le_enh_conn_complete+0xe8>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    2e96:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2e98:	2100      	movs	r1, #0
    2e9a:	f001 fa57 	bl	434c <bt_conn_set_state>
		bt_conn_unref(conn);
    2e9e:	4628      	mov	r0, r5
}
    2ea0:	b005      	add	sp, #20
    2ea2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    2ea6:	f015 bbbe 	b.w	18626 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2eaa:	7903      	ldrb	r3, [r0, #4]
    2eac:	3b02      	subs	r3, #2
    2eae:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2eb0:	f100 0904 	add.w	r9, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2eb4:	d837      	bhi.n	2f26 <bt_hci_le_enh_conn_complete+0xee>
	memcpy(dst, src, sizeof(*dst));
    2eb6:	2207      	movs	r2, #7
    2eb8:	4649      	mov	r1, r9
    2eba:	a802      	add	r0, sp, #8
    2ebc:	f014 fe1e 	bl	17afc <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2ec0:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    2ec4:	2206      	movs	r2, #6
    2ec6:	3b02      	subs	r3, #2
    2ec8:	f105 0111 	add.w	r1, r5, #17
    2ecc:	f10d 0001 	add.w	r0, sp, #1
    2ed0:	f88d 3008 	strb.w	r3, [sp, #8]
    2ed4:	f014 fe12 	bl	17afc <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2ed8:	2301      	movs	r3, #1
    2eda:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    2ede:	78eb      	ldrb	r3, [r5, #3]
    2ee0:	2b01      	cmp	r3, #1
    2ee2:	d119      	bne.n	2f18 <bt_hci_le_enh_conn_complete+0xe0>
    2ee4:	a802      	add	r0, sp, #8
    2ee6:	f7ff fdb9 	bl	2a5c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    2eea:	78eb      	ldrb	r3, [r5, #3]
    2eec:	2b01      	cmp	r3, #1
    2eee:	4604      	mov	r4, r0
    2ef0:	d111      	bne.n	2f16 <bt_hci_le_enh_conn_complete+0xde>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    2ef2:	f000 fed5 	bl	3ca0 <bt_le_adv_lookup_legacy>
    2ef6:	f3bf 8f5b 	dmb	ish
    2efa:	f100 0310 	add.w	r3, r0, #16
    2efe:	e853 2f00 	ldrex	r2, [r3]
    2f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    2f06:	e843 2100 	strex	r1, r2, [r3]
    2f0a:	2900      	cmp	r1, #0
    2f0c:	d1f7      	bne.n	2efe <bt_hci_le_enh_conn_complete+0xc6>
    2f0e:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
    2f12:	f015 face 	bl	184b2 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    2f16:	b9dc      	cbnz	r4, 2f50 <bt_hci_le_enh_conn_complete+0x118>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    2f18:	211f      	movs	r1, #31
    2f1a:	4640      	mov	r0, r8
    2f1c:	f014 ffc7 	bl	17eae <bt_hci_disconnect>
}
    2f20:	b005      	add	sp, #20
    2f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    2f26:	78c3      	ldrb	r3, [r0, #3]
    2f28:	2b01      	cmp	r3, #1
    2f2a:	bf04      	itt	eq
    2f2c:	4b2e      	ldreq	r3, [pc, #184]	; (2fe8 <bt_hci_le_enh_conn_complete+0x1b0>)
    2f2e:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    2f32:	4649      	mov	r1, r9
    2f34:	4620      	mov	r0, r4
    2f36:	f015 f95e 	bl	181f6 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    2f3a:	2207      	movs	r2, #7
    2f3c:	4601      	mov	r1, r0
    2f3e:	a802      	add	r0, sp, #8
    2f40:	f014 fddc 	bl	17afc <memcpy>
    2f44:	2207      	movs	r2, #7
    2f46:	4649      	mov	r1, r9
    2f48:	4668      	mov	r0, sp
    2f4a:	f014 fdd7 	bl	17afc <memcpy>
}
    2f4e:	e7c6      	b.n	2ede <bt_hci_le_enh_conn_complete+0xa6>
	conn->handle = handle;
    2f50:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    2f52:	2207      	movs	r2, #7
    2f54:	f820 7b88 	strh.w	r7, [r0], #136
    2f58:	a902      	add	r1, sp, #8
    2f5a:	f014 fdcf 	bl	17afc <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2f5e:	7e2a      	ldrb	r2, [r5, #24]
    2f60:	7deb      	ldrb	r3, [r5, #23]
    2f62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2f66:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2f6a:	7eaa      	ldrb	r2, [r5, #26]
    2f6c:	7e6b      	ldrb	r3, [r5, #25]
    2f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2f72:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2f76:	7f2a      	ldrb	r2, [r5, #28]
    2f78:	7eeb      	ldrb	r3, [r5, #27]
    2f7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2f7e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    2f82:	78eb      	ldrb	r3, [r5, #3]
    2f84:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    2f86:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    2f88:	2b01      	cmp	r3, #1
	conn->err = 0U;
    2f8a:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    2f8c:	d117      	bne.n	2fbe <bt_hci_le_enh_conn_complete+0x186>
    2f8e:	2207      	movs	r2, #7
    2f90:	4669      	mov	r1, sp
    2f92:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    2f96:	f014 fdb1 	bl	17afc <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    2f9a:	f000 fe81 	bl	3ca0 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    2f9e:	7a21      	ldrb	r1, [r4, #8]
    2fa0:	4d11      	ldr	r5, [pc, #68]	; (2fe8 <bt_hci_le_enh_conn_complete+0x1b0>)
    2fa2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2fa6:	2207      	movs	r2, #7
    2fa8:	4429      	add	r1, r5
    2faa:	f104 0096 	add.w	r0, r4, #150	; 0x96
    2fae:	f014 fda5 	bl	17afc <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    2fb2:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    2fb6:	065b      	lsls	r3, r3, #25
    2fb8:	d501      	bpl.n	2fbe <bt_hci_le_enh_conn_complete+0x186>
			bt_le_adv_resume();
    2fba:	f001 f81d 	bl	3ff8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2fbe:	2107      	movs	r1, #7
    2fc0:	4620      	mov	r0, r4
    2fc2:	f001 f9c3 	bl	434c <bt_conn_set_state>
	if (is_disconnected) {
    2fc6:	b11e      	cbz	r6, 2fd0 <bt_hci_le_enh_conn_complete+0x198>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    2fc8:	2101      	movs	r1, #1
    2fca:	4620      	mov	r0, r4
    2fcc:	f001 f9be 	bl	434c <bt_conn_set_state>
	bt_conn_connected(conn);
    2fd0:	4620      	mov	r0, r4
    2fd2:	f015 fb64 	bl	1869e <bt_conn_connected>
	conn_auto_initiate(conn);
    2fd6:	4620      	mov	r0, r4
    2fd8:	f7ff fecc 	bl	2d74 <conn_auto_initiate>
	bt_conn_unref(conn);
    2fdc:	4620      	mov	r0, r4
    2fde:	f015 fb22 	bl	18626 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    2fe2:	e79d      	b.n	2f20 <bt_hci_le_enh_conn_complete+0xe8>
    2fe4:	20002774 	.word	0x20002774
    2fe8:	20000000 	.word	0x20000000

00002fec <hci_tx_thread>:
{
    2fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    2ff0:	f8df 8108 	ldr.w	r8, [pc, #264]	; 30fc <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
    2ff4:	f8df a108 	ldr.w	sl, [pc, #264]	; 3100 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
    2ff8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    2ffc:	4841      	ldr	r0, [pc, #260]	; (3104 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2ffe:	f36f 3352 	bfc	r3, #13, #6
    3002:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    3006:	f001 f95b 	bl	42c0 <bt_conn_prepare_events>
    300a:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    300c:	483b      	ldr	r0, [pc, #236]	; (30fc <hci_tx_thread+0x110>)
    300e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3016:	4629      	mov	r1, r5
    3018:	f013 feb6 	bl	16d88 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    301c:	b160      	cbz	r0, 3038 <hci_tx_thread+0x4c>
    301e:	493a      	ldr	r1, [pc, #232]	; (3108 <hci_tx_thread+0x11c>)
    3020:	483a      	ldr	r0, [pc, #232]	; (310c <hci_tx_thread+0x120>)
    3022:	f640 1393 	movw	r3, #2451	; 0x993
    3026:	4652      	mov	r2, sl
    3028:	f013 ffa1 	bl	16f6e <printk>
    302c:	4040      	eors	r0, r0
    302e:	f380 8811 	msr	BASEPRI, r0
    3032:	f04f 0003 	mov.w	r0, #3
    3036:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3038:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 3110 <hci_tx_thread+0x124>
{
    303c:	4e2f      	ldr	r6, [pc, #188]	; (30fc <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
    303e:	f5a9 779a 	sub.w	r7, r9, #308	; 0x134
    3042:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    3046:	b915      	cbnz	r5, 304e <hci_tx_thread+0x62>
	z_impl_k_yield();
    3048:	f013 fc2e 	bl	168a8 <z_impl_k_yield>
	while (1) {
    304c:	e7d4      	b.n	2ff8 <hci_tx_thread+0xc>
		switch (ev->state) {
    304e:	68f3      	ldr	r3, [r6, #12]
    3050:	f3c3 3345 	ubfx	r3, r3, #13, #6
    3054:	2b04      	cmp	r3, #4
    3056:	d147      	bne.n	30e8 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    3058:	7b33      	ldrb	r3, [r6, #12]
    305a:	2b00      	cmp	r3, #0
    305c:	d147      	bne.n	30ee <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    305e:	2200      	movs	r2, #0
    3060:	2300      	movs	r3, #0
    3062:	4648      	mov	r0, r9
    3064:	f016 fcc8 	bl	199f8 <net_buf_get>
	BT_ASSERT(buf);
    3068:	4604      	mov	r4, r0
    306a:	b960      	cbnz	r0, 3086 <hci_tx_thread+0x9a>
    306c:	4929      	ldr	r1, [pc, #164]	; (3114 <hci_tx_thread+0x128>)
    306e:	4827      	ldr	r0, [pc, #156]	; (310c <hci_tx_thread+0x120>)
    3070:	f640 132a 	movw	r3, #2346	; 0x92a
    3074:	4652      	mov	r2, sl
    3076:	f013 ff7a 	bl	16f6e <printk>
    307a:	4040      	eors	r0, r0
    307c:	f380 8811 	msr	BASEPRI, r0
    3080:	f04f 0003 	mov.w	r0, #3
    3084:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    3086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    308a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    308e:	4658      	mov	r0, fp
    3090:	f013 f81c 	bl	160cc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3094:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    3098:	b120      	cbz	r0, 30a4 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    309a:	f010 fa0f 	bl	134bc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    309e:	2300      	movs	r3, #0
    30a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    30a4:	4620      	mov	r0, r4
    30a6:	f016 fcd2 	bl	19a4e <net_buf_ref>
    30aa:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
    30ae:	4620      	mov	r0, r4
    30b0:	f7ff fe36 	bl	2d20 <bt_send>
	if (err) {
    30b4:	b1c0      	cbz	r0, 30e8 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
    30b6:	4818      	ldr	r0, [pc, #96]	; (3118 <hci_tx_thread+0x12c>)
    30b8:	f012 ffe2 	bl	16080 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    30bc:	4620      	mov	r0, r4
    30be:	f010 f941 	bl	13344 <net_buf_id>
    30c2:	4b16      	ldr	r3, [pc, #88]	; (311c <hci_tx_thread+0x130>)
    30c4:	220c      	movs	r2, #12
    30c6:	fb02 3000 	mla	r0, r2, r0, r3
    30ca:	211f      	movs	r1, #31
    30cc:	8840      	ldrh	r0, [r0, #2]
    30ce:	4622      	mov	r2, r4
    30d0:	f7ff fce2 	bl	2a98 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    30d4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    30d8:	f010 f9f0 	bl	134bc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    30dc:	2300      	movs	r3, #0
		net_buf_unref(buf);
    30de:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    30e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
    30e4:	f010 f9ea 	bl	134bc <net_buf_unref>
	for (; count; ev++, count--) {
    30e8:	3614      	adds	r6, #20
    30ea:	3d01      	subs	r5, #1
    30ec:	e7ab      	b.n	3046 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    30ee:	2b01      	cmp	r3, #1
    30f0:	d1fa      	bne.n	30e8 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
    30f2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    30f4:	3838      	subs	r0, #56	; 0x38
    30f6:	f001 fbb5 	bl	4864 <bt_conn_process_tx>
    30fa:	e7f5      	b.n	30e8 <hci_tx_thread+0xfc>
    30fc:	200001a4 	.word	0x200001a4
    3100:	0001c8ed 	.word	0x0001c8ed
    3104:	200001b8 	.word	0x200001b8
    3108:	0001c921 	.word	0x0001c921
    310c:	0001c92a 	.word	0x0001c92a
    3110:	20000134 	.word	0x20000134
    3114:	0001c967 	.word	0x0001c967
    3118:	20000118 	.word	0x20000118
    311c:	200013fc 	.word	0x200013fc

00003120 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    3120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3124:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    3126:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    312a:	4630      	mov	r0, r6
    312c:	f016 fcf8 	bl	19b20 <net_buf_simple_headroom>
	state->len = buf->len;
    3130:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    3134:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    3138:	4605      	mov	r5, r0
    313a:	d80c      	bhi.n	3156 <hci_event_prio+0x36>
    313c:	4a1c      	ldr	r2, [pc, #112]	; (31b0 <hci_event_prio+0x90>)
    313e:	491d      	ldr	r1, [pc, #116]	; (31b4 <hci_event_prio+0x94>)
    3140:	481d      	ldr	r0, [pc, #116]	; (31b8 <hci_event_prio+0x98>)
    3142:	f640 532f 	movw	r3, #3375	; 0xd2f
    3146:	f013 ff12 	bl	16f6e <printk>
    314a:	4040      	eors	r0, r0
    314c:	f380 8811 	msr	BASEPRI, r0
    3150:	f04f 0003 	mov.w	r0, #3
    3154:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    3156:	4630      	mov	r0, r6
    3158:	2102      	movs	r1, #2
    315a:	f016 fcd1 	bl	19b00 <net_buf_simple_pull_mem>
    315e:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    3160:	7800      	ldrb	r0, [r0, #0]
    3162:	f014 fd8b 	bl	17c7c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    3166:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    3168:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    316a:	d40c      	bmi.n	3186 <hci_event_prio+0x66>
    316c:	4a10      	ldr	r2, [pc, #64]	; (31b0 <hci_event_prio+0x90>)
    316e:	4913      	ldr	r1, [pc, #76]	; (31bc <hci_event_prio+0x9c>)
    3170:	4811      	ldr	r0, [pc, #68]	; (31b8 <hci_event_prio+0x98>)
    3172:	f640 5333 	movw	r3, #3379	; 0xd33
    3176:	f013 fefa 	bl	16f6e <printk>
    317a:	4040      	eors	r0, r0
    317c:	f380 8811 	msr	BASEPRI, r0
    3180:	f04f 0003 	mov.w	r0, #3
    3184:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    3186:	2305      	movs	r3, #5
    3188:	4a0d      	ldr	r2, [pc, #52]	; (31c0 <hci_event_prio+0xa0>)
    318a:	7838      	ldrb	r0, [r7, #0]
    318c:	4621      	mov	r1, r4
    318e:	f014 fd87 	bl	17ca0 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    3192:	07b3      	lsls	r3, r6, #30
    3194:	d507      	bpl.n	31a6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    3196:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    3198:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    319c:	fa10 f585 	uxtah	r5, r0, r5
    31a0:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    31a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    31a6:	4620      	mov	r0, r4
}
    31a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    31ac:	f010 b986 	b.w	134bc <net_buf_unref>
    31b0:	0001c8ed 	.word	0x0001c8ed
    31b4:	0001c96b 	.word	0x0001c96b
    31b8:	0001c92a 	.word	0x0001c92a
    31bc:	0001c984 	.word	0x0001c984
    31c0:	0001b550 	.word	0x0001b550

000031c4 <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    31c4:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    31c6:	7d03      	ldrb	r3, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    31c8:	2b01      	cmp	r3, #1
{
    31ca:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    31cc:	d036      	beq.n	323c <bt_recv+0x78>
    31ce:	2b03      	cmp	r3, #3
    31d0:	d163      	bne.n	329a <bt_recv+0xd6>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    31d2:	8983      	ldrh	r3, [r0, #12]
    31d4:	2b03      	cmp	r3, #3
    31d6:	d80c      	bhi.n	31f2 <bt_recv+0x2e>
    31d8:	4a32      	ldr	r2, [pc, #200]	; (32a4 <bt_recv+0xe0>)
    31da:	4933      	ldr	r1, [pc, #204]	; (32a8 <bt_recv+0xe4>)
    31dc:	4833      	ldr	r0, [pc, #204]	; (32ac <bt_recv+0xe8>)
    31de:	f240 13b5 	movw	r3, #437	; 0x1b5
    31e2:	f013 fec4 	bl	16f6e <printk>
    31e6:	4040      	eors	r0, r0
    31e8:	f380 8811 	msr	BASEPRI, r0
    31ec:	f04f 0003 	mov.w	r0, #3
    31f0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    31f2:	2104      	movs	r1, #4
    31f4:	f104 0008 	add.w	r0, r4, #8
    31f8:	f016 fc82 	bl	19b00 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    31fc:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    31fe:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    3200:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    3202:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    3204:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    3206:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    320a:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    320c:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    320e:	d003      	beq.n	3218 <bt_recv+0x54>
	net_buf_unref(buf);
    3210:	4620      	mov	r0, r4
    3212:	f010 f953 	bl	134bc <net_buf_unref>
    3216:	e00f      	b.n	3238 <bt_recv+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3218:	f001 f890 	bl	433c <bt_conn_lookup_handle>
	if (!conn) {
    321c:	4605      	mov	r5, r0
    321e:	2800      	cmp	r0, #0
    3220:	d0f6      	beq.n	3210 <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
    3222:	f001 f93b 	bl	449c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    3226:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    3228:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    322a:	4621      	mov	r1, r4
    322c:	4628      	mov	r0, r5
    322e:	f015 f992 	bl	18556 <bt_conn_recv>
	bt_conn_unref(conn);
    3232:	4628      	mov	r0, r5
    3234:	f015 f9f7 	bl	18626 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    3238:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    323a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    323c:	8983      	ldrh	r3, [r0, #12]
    323e:	2b01      	cmp	r3, #1
    3240:	d80c      	bhi.n	325c <bt_recv+0x98>
    3242:	4a18      	ldr	r2, [pc, #96]	; (32a4 <bt_recv+0xe0>)
    3244:	4918      	ldr	r1, [pc, #96]	; (32a8 <bt_recv+0xe4>)
    3246:	4819      	ldr	r0, [pc, #100]	; (32ac <bt_recv+0xe8>)
    3248:	f640 1317 	movw	r3, #2327	; 0x917
    324c:	f013 fe8f 	bl	16f6e <printk>
    3250:	4040      	eors	r0, r0
    3252:	f380 8811 	msr	BASEPRI, r0
    3256:	f04f 0003 	mov.w	r0, #3
    325a:	df02      	svc	2
    325c:	2102      	movs	r1, #2
    325e:	f104 0008 	add.w	r0, r4, #8
    3262:	f016 fc4d 	bl	19b00 <net_buf_simple_pull_mem>
    3266:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    3268:	7800      	ldrb	r0, [r0, #0]
    326a:	f014 fd07 	bl	17c7c <bt_hci_evt_get_flags>
    326e:	0783      	lsls	r3, r0, #30
    3270:	d40c      	bmi.n	328c <bt_recv+0xc8>
    3272:	4a0c      	ldr	r2, [pc, #48]	; (32a4 <bt_recv+0xe0>)
    3274:	490e      	ldr	r1, [pc, #56]	; (32b0 <bt_recv+0xec>)
    3276:	480d      	ldr	r0, [pc, #52]	; (32ac <bt_recv+0xe8>)
    3278:	f640 131b 	movw	r3, #2331	; 0x91b
    327c:	f013 fe77 	bl	16f6e <printk>
    3280:	4040      	eors	r0, r0
    3282:	f380 8811 	msr	BASEPRI, r0
    3286:	f04f 0003 	mov.w	r0, #3
    328a:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    328c:	4a09      	ldr	r2, [pc, #36]	; (32b4 <bt_recv+0xf0>)
    328e:	7828      	ldrb	r0, [r5, #0]
    3290:	2304      	movs	r3, #4
    3292:	4621      	mov	r1, r4
    3294:	f014 fd04 	bl	17ca0 <handle_event>
    3298:	e7ba      	b.n	3210 <bt_recv+0x4c>
		net_buf_unref(buf);
    329a:	f010 f90f 	bl	134bc <net_buf_unref>
		return -EINVAL;
    329e:	f06f 0015 	mvn.w	r0, #21
    32a2:	e7ca      	b.n	323a <bt_recv+0x76>
    32a4:	0001c8ed 	.word	0x0001c8ed
    32a8:	0001c96b 	.word	0x0001c96b
    32ac:	0001c92a 	.word	0x0001c92a
    32b0:	0001c99d 	.word	0x0001c99d
    32b4:	0001b530 	.word	0x0001b530

000032b8 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    32b8:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    32ba:	7d03      	ldrb	r3, [r0, #20]
    32bc:	2b01      	cmp	r3, #1
{
    32be:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    32c0:	d00c      	beq.n	32dc <bt_recv_prio+0x24>
    32c2:	4a09      	ldr	r2, [pc, #36]	; (32e8 <bt_recv_prio+0x30>)
    32c4:	4909      	ldr	r1, [pc, #36]	; (32ec <bt_recv_prio+0x34>)
    32c6:	480a      	ldr	r0, [pc, #40]	; (32f0 <bt_recv_prio+0x38>)
    32c8:	f640 5376 	movw	r3, #3446	; 0xd76
    32cc:	f013 fe4f 	bl	16f6e <printk>
    32d0:	4040      	eors	r0, r0
    32d2:	f380 8811 	msr	BASEPRI, r0
    32d6:	f04f 0003 	mov.w	r0, #3
    32da:	df02      	svc	2

	hci_event_prio(buf);
    32dc:	4620      	mov	r0, r4
    32de:	f7ff ff1f 	bl	3120 <hci_event_prio>

	return 0;
}
    32e2:	2000      	movs	r0, #0
    32e4:	bd10      	pop	{r4, pc}
    32e6:	bf00      	nop
    32e8:	0001c8ed 	.word	0x0001c8ed
    32ec:	0001c9cb 	.word	0x0001c9cb
    32f0:	0001c92a 	.word	0x0001c92a

000032f4 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    32f4:	4a08      	ldr	r2, [pc, #32]	; (3318 <bt_hci_driver_register+0x24>)
{
    32f6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    32f8:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    32fc:	b930      	cbnz	r0, 330c <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    32fe:	68d9      	ldr	r1, [r3, #12]
    3300:	b139      	cbz	r1, 3312 <bt_hci_driver_register+0x1e>
    3302:	6919      	ldr	r1, [r3, #16]
    3304:	b129      	cbz	r1, 3312 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    3306:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    330a:	4770      	bx	lr
		return -EALREADY;
    330c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    3310:	4770      	bx	lr
		return -EINVAL;
    3312:	f06f 0015 	mvn.w	r0, #21
}
    3316:	4770      	bx	lr
    3318:	20000000 	.word	0x20000000

0000331c <bt_finalize_init>:
    331c:	4801      	ldr	r0, [pc, #4]	; (3324 <bt_finalize_init+0x8>)
    331e:	2102      	movs	r1, #2
    3320:	f014 bcd3 	b.w	17cca <atomic_or>
    3324:	200000cc 	.word	0x200000cc

00003328 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    3328:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    332a:	4d3e      	ldr	r5, [pc, #248]	; (3424 <bt_init+0xfc>)
    332c:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    3330:	6899      	ldr	r1, [r3, #8]
    3332:	f011 0101 	ands.w	r1, r1, #1
    3336:	d121      	bne.n	337c <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    3338:	aa01      	add	r2, sp, #4
    333a:	f640 4003 	movw	r0, #3075	; 0xc03
    333e:	f7ff fc8d 	bl	2c5c <bt_hci_cmd_send_sync>
		if (err) {
    3342:	4604      	mov	r4, r0
    3344:	2800      	cmp	r0, #0
    3346:	d169      	bne.n	341c <bt_init+0xf4>
	uint8_t status = buf->data[0];
    3348:	9b01      	ldr	r3, [sp, #4]
    334a:	689b      	ldr	r3, [r3, #8]
	if (status) {
    334c:	781b      	ldrb	r3, [r3, #0]
    334e:	b993      	cbnz	r3, 3376 <bt_init+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3350:	f3bf 8f5b 	dmb	ish
    3354:	462b      	mov	r3, r5
    3356:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    335a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    335e:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3362:	f3bf 8f5b 	dmb	ish
    3366:	e853 1f00 	ldrex	r1, [r3]
    336a:	e843 2000 	strex	r0, r2, [r3]
    336e:	2800      	cmp	r0, #0
    3370:	d1f9      	bne.n	3366 <bt_init+0x3e>
    3372:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    3376:	9801      	ldr	r0, [sp, #4]
    3378:	f010 f8a0 	bl	134bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    337c:	aa01      	add	r2, sp, #4
    337e:	2100      	movs	r1, #0
    3380:	f241 0003 	movw	r0, #4099	; 0x1003
    3384:	f7ff fc6a 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    3388:	4604      	mov	r4, r0
    338a:	2800      	cmp	r0, #0
    338c:	d146      	bne.n	341c <bt_init+0xf4>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    338e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    3390:	4825      	ldr	r0, [pc, #148]	; (3428 <bt_init+0x100>)
    3392:	6899      	ldr	r1, [r3, #8]
    3394:	2208      	movs	r2, #8
    3396:	3101      	adds	r1, #1
    3398:	f014 fbb0 	bl	17afc <memcpy>
	net_buf_unref(rsp);
    339c:	9801      	ldr	r0, [sp, #4]
    339e:	f010 f88d 	bl	134bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    33a2:	4621      	mov	r1, r4
    33a4:	aa01      	add	r2, sp, #4
    33a6:	f241 0001 	movw	r0, #4097	; 0x1001
    33aa:	f7ff fc57 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    33ae:	4604      	mov	r4, r0
    33b0:	2800      	cmp	r0, #0
    33b2:	d133      	bne.n	341c <bt_init+0xf4>
	read_local_ver_complete(rsp);
    33b4:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    33b6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    33b8:	785a      	ldrb	r2, [r3, #1]
    33ba:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    33be:	78d9      	ldrb	r1, [r3, #3]
    33c0:	789a      	ldrb	r2, [r3, #2]
    33c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    33c6:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    33ca:	791a      	ldrb	r2, [r3, #4]
    33cc:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    33d0:	7a19      	ldrb	r1, [r3, #8]
    33d2:	79da      	ldrb	r2, [r3, #7]
    33d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    33d8:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    33dc:	795a      	ldrb	r2, [r3, #5]
    33de:	799b      	ldrb	r3, [r3, #6]
    33e0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    33e4:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    33e8:	f010 f868 	bl	134bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    33ec:	4621      	mov	r1, r4
    33ee:	aa01      	add	r2, sp, #4
    33f0:	f241 0002 	movw	r0, #4098	; 0x1002
    33f4:	f7ff fc32 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    33f8:	4604      	mov	r4, r0
    33fa:	b978      	cbnz	r0, 341c <bt_init+0xf4>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    33fc:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    33fe:	480b      	ldr	r0, [pc, #44]	; (342c <bt_init+0x104>)
    3400:	6899      	ldr	r1, [r3, #8]
    3402:	2240      	movs	r2, #64	; 0x40
    3404:	3101      	adds	r1, #1
    3406:	f014 fb79 	bl	17afc <memcpy>
	net_buf_unref(rsp);
    340a:	9801      	ldr	r0, [sp, #4]
    340c:	f010 f856 	bl	134bc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    3410:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    3414:	065e      	lsls	r6, r3, #25
    3416:	d40b      	bmi.n	3430 <bt_init+0x108>
		return -ENODEV;
    3418:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    341c:	4620      	mov	r0, r4
    341e:	b002      	add	sp, #8
    3420:	bd70      	pop	{r4, r5, r6, pc}
    3422:	bf00      	nop
    3424:	20000000 	.word	0x20000000
    3428:	20000070 	.word	0x20000070
    342c:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    3430:	4621      	mov	r1, r4
    3432:	aa01      	add	r2, sp, #4
    3434:	f242 0003 	movw	r0, #8195	; 0x2003
    3438:	f7ff fc10 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    343c:	4604      	mov	r4, r0
    343e:	2800      	cmp	r0, #0
    3440:	d1ec      	bne.n	341c <bt_init+0xf4>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    3442:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    3444:	48a1      	ldr	r0, [pc, #644]	; (36cc <bt_init+0x3a4>)
    3446:	6899      	ldr	r1, [r3, #8]
    3448:	2208      	movs	r2, #8
    344a:	3101      	adds	r1, #1
    344c:	f014 fb56 	bl	17afc <memcpy>
	net_buf_unref(rsp);
    3450:	9801      	ldr	r0, [sp, #4]
    3452:	f010 f833 	bl	134bc <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    3456:	4621      	mov	r1, r4
    3458:	aa01      	add	r2, sp, #4
    345a:	f242 0002 	movw	r0, #8194	; 0x2002
    345e:	f7ff fbfd 	bl	2c5c <bt_hci_cmd_send_sync>
		if (err) {
    3462:	4604      	mov	r4, r0
    3464:	2800      	cmp	r0, #0
    3466:	d1d9      	bne.n	341c <bt_init+0xf4>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    3468:	9b01      	ldr	r3, [sp, #4]
    346a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    346c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    3470:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    3474:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    3476:	b121      	cbz	r1, 3482 <bt_init+0x15a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    3478:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    347a:	4895      	ldr	r0, [pc, #596]	; (36d0 <bt_init+0x3a8>)
    347c:	4611      	mov	r1, r2
    347e:	f017 fa0f 	bl	1a8a0 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    3482:	9801      	ldr	r0, [sp, #4]
    3484:	f010 f81a 	bl	134bc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    3488:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    348c:	f016 0620 	ands.w	r6, r6, #32
    3490:	f000 80f9 	beq.w	3686 <bt_init+0x35e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    3494:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    3498:	071c      	lsls	r4, r3, #28
    349a:	d512      	bpl.n	34c2 <bt_init+0x19a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    349c:	aa01      	add	r2, sp, #4
    349e:	2100      	movs	r1, #0
    34a0:	f242 001c 	movw	r0, #8220	; 0x201c
    34a4:	f7ff fbda 	bl	2c5c <bt_hci_cmd_send_sync>
		if (err) {
    34a8:	4604      	mov	r4, r0
    34aa:	2800      	cmp	r0, #0
    34ac:	d1b6      	bne.n	341c <bt_init+0xf4>
		le_read_supp_states_complete(rsp);
    34ae:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    34b0:	6883      	ldr	r3, [r0, #8]
    34b2:	f8d3 2001 	ldr.w	r2, [r3, #1]
    34b6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    34ba:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    34be:	f00f fffd 	bl	134bc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    34c2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    34c6:	0698      	lsls	r0, r3, #26
    34c8:	d523      	bpl.n	3512 <bt_init+0x1ea>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    34ca:	f10d 0102 	add.w	r1, sp, #2
    34ce:	4668      	mov	r0, sp
    34d0:	f014 fcd5 	bl	17e7e <hci_le_read_max_data_len>
		if (err) {
    34d4:	4604      	mov	r4, r0
    34d6:	2800      	cmp	r0, #0
    34d8:	d1a0      	bne.n	341c <bt_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    34da:	2104      	movs	r1, #4
    34dc:	f242 0024 	movw	r0, #8228	; 0x2024
    34e0:	f7ff fb82 	bl	2be8 <bt_hci_cmd_create>
		if (!buf) {
    34e4:	4606      	mov	r6, r0
    34e6:	2800      	cmp	r0, #0
    34e8:	f000 80d4 	beq.w	3694 <bt_init+0x36c>
	return net_buf_simple_add(&buf->b, len);
    34ec:	2104      	movs	r1, #4
    34ee:	3008      	adds	r0, #8
    34f0:	f016 fadf 	bl	19ab2 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    34f4:	f8bd 3000 	ldrh.w	r3, [sp]
    34f8:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    34fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    34fe:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    3500:	4622      	mov	r2, r4
    3502:	4631      	mov	r1, r6
    3504:	f242 0024 	movw	r0, #8228	; 0x2024
    3508:	f7ff fba8 	bl	2c5c <bt_hci_cmd_send_sync>
		if (err) {
    350c:	4604      	mov	r4, r0
    350e:	2800      	cmp	r0, #0
    3510:	d184      	bne.n	341c <bt_init+0xf4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    3512:	2108      	movs	r1, #8
    3514:	f242 0001 	movw	r0, #8193	; 0x2001
    3518:	f7ff fb66 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
    351c:	4604      	mov	r4, r0
    351e:	2800      	cmp	r0, #0
    3520:	f000 80b8 	beq.w	3694 <bt_init+0x36c>
    3524:	2108      	movs	r1, #8
    3526:	4408      	add	r0, r1
    3528:	f016 fac3 	bl	19ab2 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    352c:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    3530:	f012 0f02 	tst.w	r2, #2
    3534:	bf14      	ite	ne
    3536:	232f      	movne	r3, #47	; 0x2f
    3538:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    353a:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    353c:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    3540:	bf48      	it	mi
    3542:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    3546:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    354a:	bf18      	it	ne
    354c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    3550:	2200      	movs	r2, #0
    3552:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    3554:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3558:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    355a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    355c:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    355e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    3560:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    3562:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    3564:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    3566:	4621      	mov	r1, r4
    3568:	f242 0001 	movw	r0, #8193	; 0x2001
    356c:	f7ff fb76 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    3570:	4604      	mov	r4, r0
    3572:	2800      	cmp	r0, #0
    3574:	f47f af52 	bne.w	341c <bt_init+0xf4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    3578:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    357c:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    3580:	069a      	lsls	r2, r3, #26
    3582:	f100 809c 	bmi.w	36be <bt_init+0x396>
	if (bt_dev.le.acl_mtu) {
    3586:	b9d9      	cbnz	r1, 35c0 <bt_init+0x298>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    3588:	aa01      	add	r2, sp, #4
    358a:	f241 0005 	movw	r0, #4101	; 0x1005
    358e:	f7ff fb65 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    3592:	4604      	mov	r4, r0
    3594:	2800      	cmp	r0, #0
    3596:	f47f af41 	bne.w	341c <bt_init+0xf4>
	if (bt_dev.le.acl_mtu) {
    359a:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    359e:	b963      	cbnz	r3, 35ba <bt_init+0x292>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    35a0:	9b01      	ldr	r3, [sp, #4]
    35a2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    35a4:	785a      	ldrb	r2, [r3, #1]
    35a6:	7899      	ldrb	r1, [r3, #2]
    35a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    35ac:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    35b0:	889a      	ldrh	r2, [r3, #4]
    35b2:	4847      	ldr	r0, [pc, #284]	; (36d0 <bt_init+0x3a8>)
    35b4:	4611      	mov	r1, r2
    35b6:	f017 f973 	bl	1a8a0 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    35ba:	9801      	ldr	r0, [sp, #4]
    35bc:	f00f ff7e 	bl	134bc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    35c0:	2108      	movs	r1, #8
    35c2:	f640 4001 	movw	r0, #3073	; 0xc01
    35c6:	f7ff fb0f 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
    35ca:	4604      	mov	r4, r0
    35cc:	2800      	cmp	r0, #0
    35ce:	d061      	beq.n	3694 <bt_init+0x36c>
    35d0:	2108      	movs	r1, #8
    35d2:	4408      	add	r0, r1
    35d4:	f016 fa6d 	bl	19ab2 <net_buf_simple_add>
	dst[0] = val;
    35d8:	2310      	movs	r3, #16
    35da:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    35dc:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    35de:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    35e0:	7043      	strb	r3, [r0, #1]
    35e2:	2602      	movs	r6, #2
    35e4:	2320      	movs	r3, #32
	dst[0] = val;
    35e6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    35e8:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    35ea:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    35ec:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    35ee:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    35f0:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    35f2:	4621      	mov	r1, r4
    35f4:	f640 4001 	movw	r0, #3073	; 0xc01
    35f8:	f7ff fb30 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    35fc:	4604      	mov	r4, r0
    35fe:	2800      	cmp	r0, #0
    3600:	f47f af0c 	bne.w	341c <bt_init+0xf4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    3604:	4601      	mov	r1, r0
    3606:	aa01      	add	r2, sp, #4
    3608:	f64f 4001 	movw	r0, #64513	; 0xfc01
    360c:	f7ff fb26 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    3610:	4604      	mov	r4, r0
    3612:	bb48      	cbnz	r0, 3668 <bt_init+0x340>
	net_buf_unref(rsp);
    3614:	9801      	ldr	r0, [sp, #4]
    3616:	f00f ff51 	bl	134bc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    361a:	4621      	mov	r1, r4
    361c:	aa01      	add	r2, sp, #4
    361e:	f64f 4002 	movw	r0, #64514	; 0xfc02
    3622:	f7ff fb1b 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    3626:	4604      	mov	r4, r0
    3628:	b9f0      	cbnz	r0, 3668 <bt_init+0x340>
	rp.cmds = (void *)rsp->data;
    362a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    362c:	4829      	ldr	r0, [pc, #164]	; (36d4 <bt_init+0x3ac>)
    362e:	6899      	ldr	r1, [r3, #8]
    3630:	4632      	mov	r2, r6
    3632:	3101      	adds	r1, #1
    3634:	f014 fa62 	bl	17afc <memcpy>
	net_buf_unref(rsp);
    3638:	9801      	ldr	r0, [sp, #4]
    363a:	f00f ff3f 	bl	134bc <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    363e:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    3642:	075b      	lsls	r3, r3, #29
    3644:	d510      	bpl.n	3668 <bt_init+0x340>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    3646:	aa01      	add	r2, sp, #4
    3648:	4621      	mov	r1, r4
    364a:	f64f 4003 	movw	r0, #64515	; 0xfc03
    364e:	f7ff fb05 	bl	2c5c <bt_hci_cmd_send_sync>
		if (err) {
    3652:	b948      	cbnz	r0, 3668 <bt_init+0x340>
		rp.feat = (void *)rsp->data;
    3654:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    3656:	4820      	ldr	r0, [pc, #128]	; (36d8 <bt_init+0x3b0>)
    3658:	6899      	ldr	r1, [r3, #8]
    365a:	2201      	movs	r2, #1
    365c:	4411      	add	r1, r2
    365e:	f014 fa4d 	bl	17afc <memcpy>
		net_buf_unref(rsp);
    3662:	9801      	ldr	r0, [sp, #4]
    3664:	f00f ff2a 	bl	134bc <net_buf_unref>
	err = bt_id_init();
    3668:	f000 fa7a 	bl	3b60 <bt_id_init>
	if (err) {
    366c:	4604      	mov	r4, r0
    366e:	2800      	cmp	r0, #0
    3670:	f47f aed4 	bne.w	341c <bt_init+0xf4>
		err = bt_conn_init();
    3674:	f001 f95c 	bl	4930 <bt_conn_init>
		if (err) {
    3678:	4604      	mov	r4, r0
    367a:	2800      	cmp	r0, #0
    367c:	f47f aece 	bne.w	341c <bt_init+0xf4>
	bt_finalize_init();
    3680:	f7ff fe4c 	bl	331c <bt_finalize_init>
	return 0;
    3684:	e6ca      	b.n	341c <bt_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    3686:	2102      	movs	r1, #2
    3688:	f640 406d 	movw	r0, #3181	; 0xc6d
    368c:	f7ff faac 	bl	2be8 <bt_hci_cmd_create>
		if (!buf) {
    3690:	4604      	mov	r4, r0
    3692:	b910      	cbnz	r0, 369a <bt_init+0x372>
		return -ENOBUFS;
    3694:	f06f 0468 	mvn.w	r4, #104	; 0x68
    3698:	e6c0      	b.n	341c <bt_init+0xf4>
    369a:	2102      	movs	r1, #2
    369c:	3008      	adds	r0, #8
    369e:	f016 fa08 	bl	19ab2 <net_buf_simple_add>
		cp_le->le = 0x01;
    36a2:	2301      	movs	r3, #1
    36a4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    36a6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    36a8:	4621      	mov	r1, r4
    36aa:	4632      	mov	r2, r6
    36ac:	f640 406d 	movw	r0, #3181	; 0xc6d
    36b0:	f7ff fad4 	bl	2c5c <bt_hci_cmd_send_sync>
		if (err) {
    36b4:	4604      	mov	r4, r0
    36b6:	2800      	cmp	r0, #0
    36b8:	f43f aeec 	beq.w	3494 <bt_init+0x16c>
    36bc:	e6ae      	b.n	341c <bt_init+0xf4>
	else if (!bt_dev.le.acl_mtu) {
    36be:	2900      	cmp	r1, #0
    36c0:	f47f af7e 	bne.w	35c0 <bt_init+0x298>
		return -EIO;
    36c4:	f06f 0404 	mvn.w	r4, #4
    36c8:	e6a8      	b.n	341c <bt_init+0xf4>
    36ca:	bf00      	nop
    36cc:	200000d0 	.word	0x200000d0
    36d0:	20000100 	.word	0x20000100
    36d4:	200000b9 	.word	0x200000b9
    36d8:	200000b8 	.word	0x200000b8

000036dc <init_work>:

static void init_work(struct k_work *work)
{
    36dc:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    36de:	f7ff fe23 	bl	3328 <bt_init>
	if (ready_cb) {
    36e2:	4b03      	ldr	r3, [pc, #12]	; (36f0 <init_work+0x14>)
    36e4:	681b      	ldr	r3, [r3, #0]
    36e6:	b113      	cbz	r3, 36ee <init_work+0x12>
		ready_cb(err);
	}
}
    36e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    36ec:	4718      	bx	r3
}
    36ee:	bd10      	pop	{r4, pc}
    36f0:	20001414 	.word	0x20001414

000036f4 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
    36f4:	b570      	push	{r4, r5, r6, lr}
    36f6:	4606      	mov	r6, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
    36f8:	f014 f9d3 	bl	17aa2 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    36fc:	281c      	cmp	r0, #28
	size_t len = strlen(name);
    36fe:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    3700:	d811      	bhi.n	3726 <bt_set_name+0x32>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
    3702:	4c0a      	ldr	r4, [pc, #40]	; (372c <bt_set_name+0x38>)
    3704:	4631      	mov	r1, r6
    3706:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    370a:	f014 f9da 	bl	17ac2 <strcmp>
    370e:	b148      	cbz	r0, 3724 <bt_set_name+0x30>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
    3710:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    3714:	462a      	mov	r2, r5
    3716:	4631      	mov	r1, r6
	bt_dev.name[len] = '\0';
    3718:	442c      	add	r4, r5
	strncpy(bt_dev.name, name, len);
    371a:	f014 f9b0 	bl	17a7e <strncpy>
	bt_dev.name[len] = '\0';
    371e:	2000      	movs	r0, #0
    3720:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150

	return 0;
#else
	return -ENOMEM;
#endif
}
    3724:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    3726:	f06f 000b 	mvn.w	r0, #11
    372a:	e7fb      	b.n	3724 <bt_set_name+0x30>
    372c:	20000000 	.word	0x20000000

00003730 <bt_enable>:
{
    3730:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    3732:	4d21      	ldr	r5, [pc, #132]	; (37b8 <bt_enable+0x88>)
    3734:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    3738:	b088      	sub	sp, #32
    373a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    373c:	2b00      	cmp	r3, #0
    373e:	d035      	beq.n	37ac <bt_enable+0x7c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    3740:	2101      	movs	r1, #1
    3742:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    3746:	f014 fac0 	bl	17cca <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    374a:	ea10 0401 	ands.w	r4, r0, r1
    374e:	d130      	bne.n	37b2 <bt_enable+0x82>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
    3750:	481a      	ldr	r0, [pc, #104]	; (37bc <bt_enable+0x8c>)
    3752:	f7ff ffcf 	bl	36f4 <bt_set_name>
	ready_cb = cb;
    3756:	4b1a      	ldr	r3, [pc, #104]	; (37c0 <bt_enable+0x90>)
    3758:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    375a:	2200      	movs	r2, #0
    375c:	2300      	movs	r3, #0
    375e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    3762:	f06f 0308 	mvn.w	r3, #8
    3766:	e9cd 4302 	strd	r4, r3, [sp, #8]
    376a:	e9cd 4400 	strd	r4, r4, [sp]
    376e:	4b15      	ldr	r3, [pc, #84]	; (37c4 <bt_enable+0x94>)
    3770:	4915      	ldr	r1, [pc, #84]	; (37c8 <bt_enable+0x98>)
    3772:	9404      	str	r4, [sp, #16]
    3774:	f44f 7220 	mov.w	r2, #640	; 0x280
    3778:	4814      	ldr	r0, [pc, #80]	; (37cc <bt_enable+0x9c>)
    377a:	f012 fba9 	bl	15ed0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    377e:	4914      	ldr	r1, [pc, #80]	; (37d0 <bt_enable+0xa0>)
    3780:	4812      	ldr	r0, [pc, #72]	; (37cc <bt_enable+0x9c>)
    3782:	f016 ffb4 	bl	1a6ee <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    3786:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    378a:	68db      	ldr	r3, [r3, #12]
    378c:	4798      	blx	r3
	if (err) {
    378e:	4604      	mov	r4, r0
    3790:	b948      	cbnz	r0, 37a6 <bt_enable+0x76>
	if (!cb) {
    3792:	b926      	cbnz	r6, 379e <bt_enable+0x6e>
}
    3794:	b008      	add	sp, #32
    3796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    379a:	f7ff bdc5 	b.w	3328 <bt_init>
	k_work_submit(&bt_dev.init);
    379e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    37a2:	f012 fdd9 	bl	16358 <k_work_submit>
}
    37a6:	4620      	mov	r0, r4
    37a8:	b008      	add	sp, #32
    37aa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    37ac:	f06f 0412 	mvn.w	r4, #18
    37b0:	e7f9      	b.n	37a6 <bt_enable+0x76>
		return -EALREADY;
    37b2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    37b6:	e7f6      	b.n	37a6 <bt_enable+0x76>
    37b8:	20000000 	.word	0x20000000
    37bc:	0001c9ee 	.word	0x0001c9ee
    37c0:	20001414 	.word	0x20001414
    37c4:	00002fed 	.word	0x00002fed
    37c8:	20002be0 	.word	0x20002be0
    37cc:	200009f8 	.word	0x200009f8
    37d0:	0001ca02 	.word	0x0001ca02

000037d4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    37d4:	4800      	ldr	r0, [pc, #0]	; (37d8 <bt_get_name+0x4>)
    37d6:	4770      	bx	lr
    37d8:	20000150 	.word	0x20000150

000037dc <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    37dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    37de:	4f0b      	ldr	r7, [pc, #44]	; (380c <id_find+0x30>)
{
    37e0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    37e2:	2500      	movs	r5, #0
    37e4:	79fb      	ldrb	r3, [r7, #7]
    37e6:	b2ec      	uxtb	r4, r5
    37e8:	42a3      	cmp	r3, r4
    37ea:	d802      	bhi.n	37f2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    37ec:	f06f 0401 	mvn.w	r4, #1
    37f0:	e009      	b.n	3806 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    37f2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    37f6:	2207      	movs	r2, #7
    37f8:	4439      	add	r1, r7
    37fa:	4630      	mov	r0, r6
    37fc:	f014 f96d 	bl	17ada <memcmp>
    3800:	3501      	adds	r5, #1
    3802:	2800      	cmp	r0, #0
    3804:	d1ee      	bne.n	37e4 <id_find+0x8>
}
    3806:	4620      	mov	r0, r4
    3808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    380a:	bf00      	nop
    380c:	20000000 	.word	0x20000000

00003810 <set_random_address>:
{
    3810:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    3812:	4914      	ldr	r1, [pc, #80]	; (3864 <set_random_address+0x54>)
    3814:	2206      	movs	r2, #6
    3816:	4605      	mov	r5, r0
    3818:	f014 f95f 	bl	17ada <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    381c:	4604      	mov	r4, r0
    381e:	b1e0      	cbz	r0, 385a <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    3820:	2106      	movs	r1, #6
    3822:	f242 0005 	movw	r0, #8197	; 0x2005
    3826:	f7ff f9df 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
    382a:	4604      	mov	r4, r0
    382c:	b1b8      	cbz	r0, 385e <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    382e:	2206      	movs	r2, #6
    3830:	4629      	mov	r1, r5
    3832:	3008      	adds	r0, #8
    3834:	f016 f943 	bl	19abe <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    3838:	4621      	mov	r1, r4
    383a:	2200      	movs	r2, #0
    383c:	f242 0005 	movw	r0, #8197	; 0x2005
    3840:	f7ff fa0c 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    3844:	4604      	mov	r4, r0
    3846:	b940      	cbnz	r0, 385a <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    3848:	2206      	movs	r2, #6
    384a:	4806      	ldr	r0, [pc, #24]	; (3864 <set_random_address+0x54>)
    384c:	4629      	mov	r1, r5
    384e:	f014 f955 	bl	17afc <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    3852:	4b05      	ldr	r3, [pc, #20]	; (3868 <set_random_address+0x58>)
    3854:	2201      	movs	r2, #1
    3856:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    385a:	4620      	mov	r0, r4
    385c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    385e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    3862:	e7fa      	b.n	385a <set_random_address+0x4a>
    3864:	20000061 	.word	0x20000061
    3868:	20000000 	.word	0x20000000

0000386c <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    386c:	b530      	push	{r4, r5, lr}
    386e:	4604      	mov	r4, r0
    3870:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    3872:	460d      	mov	r5, r1
    3874:	b1a1      	cbz	r1, 38a0 <id_create.constprop.0+0x34>
    3876:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    3878:	2207      	movs	r2, #7
    387a:	a902      	add	r1, sp, #8
    387c:	4628      	mov	r0, r5
    387e:	9302      	str	r3, [sp, #8]
    3880:	f8cd 300b 	str.w	r3, [sp, #11]
    3884:	f014 f929 	bl	17ada <memcmp>
    3888:	b150      	cbz	r0, 38a0 <id_create.constprop.0+0x34>
	memcpy(dst, src, sizeof(*dst));
    388a:	4812      	ldr	r0, [pc, #72]	; (38d4 <id_create.constprop.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    388c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    3890:	2207      	movs	r2, #7
    3892:	4629      	mov	r1, r5
    3894:	4420      	add	r0, r4
    3896:	f014 f931 	bl	17afc <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    389a:	2000      	movs	r0, #0
}
    389c:	b005      	add	sp, #20
    389e:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    38a0:	4668      	mov	r0, sp
    38a2:	f014 f9dd 	bl	17c60 <bt_addr_le_create_static>
			if (err) {
    38a6:	2800      	cmp	r0, #0
    38a8:	d1f8      	bne.n	389c <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
    38aa:	4668      	mov	r0, sp
    38ac:	f7ff ff96 	bl	37dc <id_find>
    38b0:	2800      	cmp	r0, #0
    38b2:	daf5      	bge.n	38a0 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    38b4:	4807      	ldr	r0, [pc, #28]	; (38d4 <id_create.constprop.0+0x68>)
    38b6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    38ba:	4404      	add	r4, r0
    38bc:	2207      	movs	r2, #7
    38be:	4669      	mov	r1, sp
    38c0:	4620      	mov	r0, r4
    38c2:	f014 f91b 	bl	17afc <memcpy>
		if (addr) {
    38c6:	2d00      	cmp	r5, #0
    38c8:	d0e7      	beq.n	389a <id_create.constprop.0+0x2e>
    38ca:	2207      	movs	r2, #7
    38cc:	4621      	mov	r1, r4
    38ce:	4628      	mov	r0, r5
    38d0:	e7e1      	b.n	3896 <id_create.constprop.0+0x2a>
    38d2:	bf00      	nop
    38d4:	20000000 	.word	0x20000000

000038d8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    38d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    38da:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    38dc:	4605      	mov	r5, r0
    38de:	b918      	cbnz	r0, 38e8 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    38e0:	b1ec      	cbz	r4, 391e <bt_id_create+0x46>
		return -EINVAL;
    38e2:	f06f 0015 	mvn.w	r0, #21
    38e6:	e018      	b.n	391a <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    38e8:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    38ea:	2207      	movs	r2, #7
    38ec:	4669      	mov	r1, sp
    38ee:	9300      	str	r3, [sp, #0]
    38f0:	f8cd 3003 	str.w	r3, [sp, #3]
    38f4:	f014 f8f1 	bl	17ada <memcmp>
    38f8:	2800      	cmp	r0, #0
    38fa:	d0f1      	beq.n	38e0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    38fc:	782b      	ldrb	r3, [r5, #0]
    38fe:	2b01      	cmp	r3, #1
    3900:	d1ef      	bne.n	38e2 <bt_id_create+0xa>
    3902:	79ab      	ldrb	r3, [r5, #6]
    3904:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3908:	2bc0      	cmp	r3, #192	; 0xc0
    390a:	d1ea      	bne.n	38e2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    390c:	4628      	mov	r0, r5
    390e:	f7ff ff65 	bl	37dc <id_find>
    3912:	2800      	cmp	r0, #0
    3914:	dbe4      	blt.n	38e0 <bt_id_create+0x8>
			return -EALREADY;
    3916:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    391a:	b002      	add	sp, #8
    391c:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    391e:	4e13      	ldr	r6, [pc, #76]	; (396c <bt_id_create+0x94>)
    3920:	79f3      	ldrb	r3, [r6, #7]
    3922:	2b01      	cmp	r3, #1
    3924:	d01e      	beq.n	3964 <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3926:	f3bf 8f5b 	dmb	ish
    392a:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
    392e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3932:	07db      	lsls	r3, r3, #31
    3934:	d40b      	bmi.n	394e <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    3936:	2d00      	cmp	r5, #0
    3938:	d0d3      	beq.n	38e2 <bt_id_create+0xa>
    393a:	2207      	movs	r2, #7
    393c:	4669      	mov	r1, sp
    393e:	4628      	mov	r0, r5
    3940:	9400      	str	r4, [sp, #0]
    3942:	f8cd 4003 	str.w	r4, [sp, #3]
    3946:	f014 f8c8 	bl	17ada <memcmp>
    394a:	2800      	cmp	r0, #0
    394c:	d0c9      	beq.n	38e2 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    394e:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    3950:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    3952:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    3954:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    3956:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    3958:	f7ff ff88 	bl	386c <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    395c:	2800      	cmp	r0, #0
    395e:	bf08      	it	eq
    3960:	4620      	moveq	r0, r4
    3962:	e7da      	b.n	391a <bt_id_create+0x42>
		return -ENOMEM;
    3964:	f06f 000b 	mvn.w	r0, #11
    3968:	e7d7      	b.n	391a <bt_id_create+0x42>
    396a:	bf00      	nop
    396c:	20000000 	.word	0x20000000

00003970 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    3970:	b570      	push	{r4, r5, r6, lr}
    3972:	b086      	sub	sp, #24
    3974:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    3976:	aa01      	add	r2, sp, #4
    3978:	2100      	movs	r1, #0
    397a:	f241 0009 	movw	r0, #4105	; 0x1009
    397e:	f7ff f96d 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    3982:	4604      	mov	r4, r0
    3984:	b970      	cbnz	r0, 39a4 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    3986:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    3988:	9002      	str	r0, [sp, #8]
    398a:	689d      	ldr	r5, [r3, #8]
    398c:	f8ad 000c 	strh.w	r0, [sp, #12]
    3990:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    3992:	2206      	movs	r2, #6
    3994:	a902      	add	r1, sp, #8
    3996:	4628      	mov	r0, r5
    3998:	f014 f89f 	bl	17ada <memcmp>
    399c:	b920      	cbnz	r0, 39a8 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    399e:	9801      	ldr	r0, [sp, #4]
    39a0:	f00f fd8c 	bl	134bc <net_buf_unref>
		return 0U;
    39a4:	2000      	movs	r0, #0
    39a6:	e016      	b.n	39d6 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    39a8:	4b0c      	ldr	r3, [pc, #48]	; (39dc <bt_id_read_public_addr+0x6c>)
    39aa:	6818      	ldr	r0, [r3, #0]
    39ac:	9004      	str	r0, [sp, #16]
    39ae:	889b      	ldrh	r3, [r3, #4]
    39b0:	f8ad 3014 	strh.w	r3, [sp, #20]
    39b4:	2206      	movs	r2, #6
    39b6:	a904      	add	r1, sp, #16
    39b8:	4628      	mov	r0, r5
    39ba:	f014 f88e 	bl	17ada <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    39be:	2800      	cmp	r0, #0
    39c0:	d0ed      	beq.n	399e <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
    39c2:	2206      	movs	r2, #6
    39c4:	4629      	mov	r1, r5
    39c6:	1c70      	adds	r0, r6, #1
    39c8:	f014 f898 	bl	17afc <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
    39cc:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    39ce:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    39d0:	f00f fd74 	bl	134bc <net_buf_unref>
	return 1U;
    39d4:	2001      	movs	r0, #1
}
    39d6:	b006      	add	sp, #24
    39d8:	bd70      	pop	{r4, r5, r6, pc}
    39da:	bf00      	nop
    39dc:	0001b415 	.word	0x0001b415

000039e0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    39e0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    39e2:	4668      	mov	r0, sp
    39e4:	f7ff ffc4 	bl	3970 <bt_id_read_public_addr>
    39e8:	4b04      	ldr	r3, [pc, #16]	; (39fc <bt_setup_public_id_addr+0x1c>)
    39ea:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    39ec:	b118      	cbz	r0, 39f6 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    39ee:	4669      	mov	r1, sp
    39f0:	2000      	movs	r0, #0
    39f2:	f7ff ff3b 	bl	386c <id_create.constprop.0>
}
    39f6:	b003      	add	sp, #12
    39f8:	f85d fb04 	ldr.w	pc, [sp], #4
    39fc:	20000000 	.word	0x20000000

00003a00 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    3a00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    3a04:	4b15      	ldr	r3, [pc, #84]	; (3a5c <bt_read_static_addr+0x5c>)
    3a06:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    3a0a:	f014 0401 	ands.w	r4, r4, #1
{
    3a0e:	4607      	mov	r7, r0
    3a10:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    3a12:	d015      	beq.n	3a40 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    3a14:	aa01      	add	r2, sp, #4
    3a16:	2100      	movs	r1, #0
    3a18:	f64f 4009 	movw	r0, #64521	; 0xfc09
    3a1c:	f7ff f91e 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    3a20:	4605      	mov	r5, r0
    3a22:	b9c8      	cbnz	r0, 3a58 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
    3a24:	9b01      	ldr	r3, [sp, #4]
    3a26:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    3a28:	785c      	ldrb	r4, [r3, #1]
    3a2a:	42b4      	cmp	r4, r6
    3a2c:	bf28      	it	cs
    3a2e:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    3a30:	f04f 0816 	mov.w	r8, #22
    3a34:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    3a36:	42a5      	cmp	r5, r4
    3a38:	db06      	blt.n	3a48 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
    3a3a:	9801      	ldr	r0, [sp, #4]
    3a3c:	f00f fd3e 	bl	134bc <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    3a40:	4620      	mov	r0, r4
    3a42:	b002      	add	sp, #8
    3a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    3a48:	fb08 7005 	mla	r0, r8, r5, r7
    3a4c:	2216      	movs	r2, #22
    3a4e:	4631      	mov	r1, r6
    3a50:	f014 f854 	bl	17afc <memcpy>
	for (i = 0; i < cnt; i++) {
    3a54:	3501      	adds	r5, #1
    3a56:	e7ee      	b.n	3a36 <bt_read_static_addr+0x36>
		return 0;
    3a58:	2400      	movs	r4, #0
    3a5a:	e7f1      	b.n	3a40 <bt_read_static_addr+0x40>
    3a5c:	20000000 	.word	0x20000000

00003a60 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    3a60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    3a62:	4e15      	ldr	r6, [pc, #84]	; (3ab8 <bt_setup_random_id_addr+0x58>)
    3a64:	79f4      	ldrb	r4, [r6, #7]
{
    3a66:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    3a68:	b9f4      	cbnz	r4, 3aa8 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    3a6a:	2101      	movs	r1, #1
    3a6c:	a802      	add	r0, sp, #8
    3a6e:	f7ff ffc7 	bl	3a00 <bt_read_static_addr>
    3a72:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    3a74:	b1c0      	cbz	r0, 3aa8 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    3a76:	2716      	movs	r7, #22
    3a78:	ab02      	add	r3, sp, #8
    3a7a:	b2e5      	uxtb	r5, r4
    3a7c:	fb07 3105 	mla	r1, r7, r5, r3
    3a80:	2206      	movs	r2, #6
    3a82:	f10d 0001 	add.w	r0, sp, #1
    3a86:	f014 f839 	bl	17afc <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    3a8a:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    3a8c:	4669      	mov	r1, sp
    3a8e:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    3a90:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    3a94:	f7ff feea 	bl	386c <id_create.constprop.0>
				if (err) {
    3a98:	b920      	cbnz	r0, 3aa4 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    3a9a:	79f2      	ldrb	r2, [r6, #7]
    3a9c:	3401      	adds	r4, #1
    3a9e:	b2e3      	uxtb	r3, r4
    3aa0:	429a      	cmp	r2, r3
    3aa2:	d8e9      	bhi.n	3a78 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    3aa4:	b009      	add	sp, #36	; 0x24
    3aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    3aa8:	2100      	movs	r1, #0
    3aaa:	4608      	mov	r0, r1
}
    3aac:	b009      	add	sp, #36	; 0x24
    3aae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    3ab2:	f7ff bf11 	b.w	38d8 <bt_id_create>
    3ab6:	bf00      	nop
    3ab8:	20000000 	.word	0x20000000

00003abc <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    3abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    3ac0:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    3ac4:	7805      	ldrb	r5, [r0, #0]
{
    3ac6:	460e      	mov	r6, r1
    3ac8:	4690      	mov	r8, r2
    3aca:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    3acc:	d026      	beq.n	3b1c <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    3ace:	4c23      	ldr	r4, [pc, #140]	; (3b5c <bt_id_set_adv_own_addr+0xa0>)
    3ad0:	b12a      	cbz	r2, 3ade <bt_id_set_adv_own_addr+0x22>
    3ad2:	0688      	lsls	r0, r1, #26
    3ad4:	d503      	bpl.n	3ade <bt_id_set_adv_own_addr+0x22>
    3ad6:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
    3ada:	0659      	lsls	r1, r3, #25
    3adc:	d53a      	bpl.n	3b54 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    3ade:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    3ae2:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    3ae6:	5ce3      	ldrb	r3, [r4, r3]
    3ae8:	2b01      	cmp	r3, #1
    3aea:	d008      	beq.n	3afe <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    3aec:	eba9 0505 	sub.w	r5, r9, r5
    3af0:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    3af2:	f1b8 0f00 	cmp.w	r8, #0
    3af6:	d10c      	bne.n	3b12 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    3af8:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    3afa:	2000      	movs	r0, #0
    3afc:	e007      	b.n	3b0e <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    3afe:	2007      	movs	r0, #7
    3b00:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    3b04:	4420      	add	r0, r4
    3b06:	f7ff fe83 	bl	3810 <set_random_address>
				if (err) {
    3b0a:	2800      	cmp	r0, #0
    3b0c:	d0ee      	beq.n	3aec <bt_id_set_adv_own_addr+0x30>
}
    3b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    3b12:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    3b14:	bf48      	it	mi
    3b16:	f043 0302 	orrmi.w	r3, r3, #2
    3b1a:	e7ed      	b.n	3af8 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    3b1c:	074b      	lsls	r3, r1, #29
    3b1e:	d515      	bpl.n	3b4c <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    3b20:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3b5c <bt_id_set_adv_own_addr+0xa0>
    3b24:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    3b28:	00ee      	lsls	r6, r5, #3
    3b2a:	f818 3003 	ldrb.w	r3, [r8, r3]
    3b2e:	2b01      	cmp	r3, #1
    3b30:	d10a      	bne.n	3b48 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    3b32:	2007      	movs	r0, #7
    3b34:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    3b38:	4440      	add	r0, r8
    3b3a:	f7ff fe69 	bl	3810 <set_random_address>
			*own_addr_type = id_addr->type;
    3b3e:	1b75      	subs	r5, r6, r5
    3b40:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    3b44:	703b      	strb	r3, [r7, #0]
		if (err) {
    3b46:	e7e2      	b.n	3b0e <bt_id_set_adv_own_addr+0x52>
	int err = 0;
    3b48:	4620      	mov	r0, r4
    3b4a:	e7f8      	b.n	3b3e <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
    3b4c:	f014 fb55 	bl	181fa <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    3b50:	2301      	movs	r3, #1
    3b52:	e7f7      	b.n	3b44 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
    3b54:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3b58:	e7d9      	b.n	3b0e <bt_id_set_adv_own_addr+0x52>
    3b5a:	bf00      	nop
    3b5c:	20000000 	.word	0x20000000

00003b60 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    3b60:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    3b62:	4c0a      	ldr	r4, [pc, #40]	; (3b8c <bt_id_init+0x2c>)
    3b64:	79e3      	ldrb	r3, [r4, #7]
    3b66:	b10b      	cbz	r3, 3b6c <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    3b68:	2000      	movs	r0, #0
}
    3b6a:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    3b6c:	f7ff ff38 	bl	39e0 <bt_setup_public_id_addr>
		if (err) {
    3b70:	2800      	cmp	r0, #0
    3b72:	d1fa      	bne.n	3b6a <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    3b74:	79e3      	ldrb	r3, [r4, #7]
    3b76:	2b00      	cmp	r3, #0
    3b78:	d1f6      	bne.n	3b68 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    3b7a:	f7ff ff71 	bl	3a60 <bt_setup_random_id_addr>
		if (err) {
    3b7e:	2800      	cmp	r0, #0
    3b80:	d1f3      	bne.n	3b6a <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    3b82:	1c60      	adds	r0, r4, #1
}
    3b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    3b88:	f7ff be42 	b.w	3810 <set_random_address>
    3b8c:	20000000 	.word	0x20000000

00003b90 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    3b90:	6843      	ldr	r3, [r0, #4]
{
    3b92:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3b94:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    3b96:	0558      	lsls	r0, r3, #21
    3b98:	d502      	bpl.n	3ba0 <valid_adv_param+0x10>
		return false;
    3b9a:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    3b9c:	b003      	add	sp, #12
    3b9e:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3ba0:	6922      	ldr	r2, [r4, #16]
    3ba2:	b10a      	cbz	r2, 3ba8 <valid_adv_param+0x18>
    3ba4:	07d9      	lsls	r1, r3, #31
    3ba6:	d5f8      	bpl.n	3b9a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    3ba8:	4d1a      	ldr	r5, [pc, #104]	; (3c14 <valid_adv_param+0x84>)
    3baa:	7820      	ldrb	r0, [r4, #0]
    3bac:	79eb      	ldrb	r3, [r5, #7]
    3bae:	4283      	cmp	r3, r0
    3bb0:	d9f3      	bls.n	3b9a <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    3bb2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3bb6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    3bb8:	2207      	movs	r2, #7
    3bba:	4669      	mov	r1, sp
    3bbc:	4428      	add	r0, r5
    3bbe:	9300      	str	r3, [sp, #0]
    3bc0:	f8cd 3003 	str.w	r3, [sp, #3]
    3bc4:	f013 ff89 	bl	17ada <memcmp>
	if (param->id >= bt_dev.id_count ||
    3bc8:	2800      	cmp	r0, #0
    3bca:	d0e6      	beq.n	3b9a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3bcc:	6860      	ldr	r0, [r4, #4]
    3bce:	07c2      	lsls	r2, r0, #31
    3bd0:	d406      	bmi.n	3be0 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3bd2:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    3bd6:	2b08      	cmp	r3, #8
    3bd8:	d802      	bhi.n	3be0 <valid_adv_param+0x50>
    3bda:	68a3      	ldr	r3, [r4, #8]
    3bdc:	2b9f      	cmp	r3, #159	; 0x9f
    3bde:	d9dc      	bls.n	3b9a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    3be0:	f010 0f30 	tst.w	r0, #48	; 0x30
    3be4:	d002      	beq.n	3bec <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    3be6:	6923      	ldr	r3, [r4, #16]
    3be8:	2b00      	cmp	r3, #0
    3bea:	d0d6      	beq.n	3b9a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    3bec:	06c3      	lsls	r3, r0, #27
    3bee:	d401      	bmi.n	3bf4 <valid_adv_param+0x64>
    3bf0:	6923      	ldr	r3, [r4, #16]
    3bf2:	b943      	cbnz	r3, 3c06 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    3bf4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    3bf8:	429a      	cmp	r2, r3
    3bfa:	d8ce      	bhi.n	3b9a <valid_adv_param+0xa>
    3bfc:	2a1f      	cmp	r2, #31
    3bfe:	d9cc      	bls.n	3b9a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    3c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    3c04:	d8c9      	bhi.n	3b9a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    3c06:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    3c0a:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    3c0e:	bf18      	it	ne
    3c10:	2001      	movne	r0, #1
    3c12:	e7c3      	b.n	3b9c <valid_adv_param+0xc>
    3c14:	20000000 	.word	0x20000000

00003c18 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    3c18:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    3c1a:	4606      	mov	r6, r0
    3c1c:	4b1e      	ldr	r3, [pc, #120]	; (3c98 <le_adv_start_add_conn+0x80>)
    3c1e:	f816 2b09 	ldrb.w	r2, [r6], #9
    3c22:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    3c26:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    3c28:	2300      	movs	r3, #0
{
    3c2a:	4605      	mov	r5, r0
    3c2c:	2207      	movs	r2, #7
    3c2e:	460f      	mov	r7, r1
    3c30:	4630      	mov	r0, r6
    3c32:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    3c34:	9300      	str	r3, [sp, #0]
    3c36:	f8cd 3003 	str.w	r3, [sp, #3]
    3c3a:	f013 ff4e 	bl	17ada <memcmp>
    3c3e:	782a      	ldrb	r2, [r5, #0]
    3c40:	4604      	mov	r4, r0
    3c42:	b9a8      	cbnz	r0, 3c70 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    3c44:	4b15      	ldr	r3, [pc, #84]	; (3c9c <le_adv_start_add_conn+0x84>)
    3c46:	6818      	ldr	r0, [r3, #0]
    3c48:	8899      	ldrh	r1, [r3, #4]
    3c4a:	9002      	str	r0, [sp, #8]
    3c4c:	799b      	ldrb	r3, [r3, #6]
    3c4e:	f8ad 100c 	strh.w	r1, [sp, #12]
    3c52:	4610      	mov	r0, r2
    3c54:	a902      	add	r1, sp, #8
    3c56:	f88d 300e 	strb.w	r3, [sp, #14]
    3c5a:	f000 fccb 	bl	45f4 <bt_conn_add_le>
		if (!conn) {
    3c5e:	4605      	mov	r5, r0
    3c60:	b1b8      	cbz	r0, 3c92 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    3c62:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    3c64:	f000 fb72 	bl	434c <bt_conn_set_state>
	*out_conn = conn;
    3c68:	603d      	str	r5, [r7, #0]
	return 0;
}
    3c6a:	4620      	mov	r0, r4
    3c6c:	b005      	add	sp, #20
    3c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    3c70:	4631      	mov	r1, r6
    3c72:	4610      	mov	r0, r2
    3c74:	f014 fd3e 	bl	186f4 <bt_conn_exists_le>
    3c78:	4604      	mov	r4, r0
    3c7a:	b938      	cbnz	r0, 3c8c <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    3c7c:	7828      	ldrb	r0, [r5, #0]
    3c7e:	4631      	mov	r1, r6
    3c80:	f000 fcb8 	bl	45f4 <bt_conn_add_le>
	if (!conn) {
    3c84:	4605      	mov	r5, r0
    3c86:	b120      	cbz	r0, 3c92 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    3c88:	2105      	movs	r1, #5
    3c8a:	e7eb      	b.n	3c64 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    3c8c:	f06f 0415 	mvn.w	r4, #21
    3c90:	e7eb      	b.n	3c6a <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    3c92:	f06f 040b 	mvn.w	r4, #11
    3c96:	e7e8      	b.n	3c6a <le_adv_start_add_conn+0x52>
    3c98:	20000000 	.word	0x20000000
    3c9c:	0001b41b 	.word	0x0001b41b

00003ca0 <bt_le_adv_lookup_legacy>:
}
    3ca0:	4800      	ldr	r0, [pc, #0]	; (3ca4 <bt_le_adv_lookup_legacy+0x4>)
    3ca2:	4770      	bx	lr
    3ca4:	20000018 	.word	0x20000018

00003ca8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    3ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    3cac:	690e      	ldr	r6, [r1, #16]
{
    3cae:	b08f      	sub	sp, #60	; 0x3c
    3cb0:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    3cb2:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    3cb4:	ebb6 0903 	subs.w	r9, r6, r3
{
    3cb8:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3cba:	488c      	ldr	r0, [pc, #560]	; (3eec <bt_le_adv_start_legacy+0x244>)
    3cbc:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    3cbe:	bf18      	it	ne
    3cc0:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
    3cc4:	9307      	str	r3, [sp, #28]
    3cc6:	f014 fabb 	bl	18240 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    3cca:	0787      	lsls	r7, r0, #30
{
    3ccc:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    3cce:	f140 8102 	bpl.w	3ed6 <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    3cd2:	4608      	mov	r0, r1
    3cd4:	f7ff ff5c 	bl	3b90 <valid_adv_param>
    3cd8:	b928      	cbnz	r0, 3ce6 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    3cda:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    3cde:	4658      	mov	r0, fp
    3ce0:	b00f      	add	sp, #60	; 0x3c
    3ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    3ce6:	4620      	mov	r0, r4
    3ce8:	f014 fa99 	bl	1821e <bt_id_adv_random_addr_check>
    3cec:	4680      	mov	r8, r0
    3cee:	2800      	cmp	r0, #0
    3cf0:	d0f3      	beq.n	3cda <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    3cf2:	f105 0710 	add.w	r7, r5, #16
    3cf6:	4638      	mov	r0, r7
    3cf8:	f014 faa2 	bl	18240 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    3cfc:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    3d00:	0640      	lsls	r0, r0, #25
    3d02:	f100 80eb 	bmi.w	3edc <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
    3d06:	220f      	movs	r2, #15
    3d08:	4659      	mov	r1, fp
    3d0a:	a80a      	add	r0, sp, #40	; 0x28
    3d0c:	f013 ff01 	bl	17b12 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    3d10:	68a3      	ldr	r3, [r4, #8]
    3d12:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
    3d16:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    3d18:	68e3      	ldr	r3, [r4, #12]
    3d1a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    3d1e:	f014 fa80 	bl	18222 <get_adv_channel_map>
	if (adv->id != param->id) {
    3d22:	782a      	ldrb	r2, [r5, #0]
    3d24:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    3d26:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    3d2a:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    3d2c:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    3d30:	d004      	beq.n	3d3c <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3d32:	486e      	ldr	r0, [pc, #440]	; (3eec <bt_le_adv_start_legacy+0x244>)
    3d34:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    3d38:	f014 fa88 	bl	1824c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    3d3c:	4a6c      	ldr	r2, [pc, #432]	; (3ef0 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
    3d3e:	7823      	ldrb	r3, [r4, #0]
    3d40:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    3d42:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    3d46:	6861      	ldr	r1, [r4, #4]
    3d48:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    3d4c:	464a      	mov	r2, r9
    3d4e:	4628      	mov	r0, r5
    3d50:	f7ff feb4 	bl	3abc <bt_id_set_adv_own_addr>
	if (err) {
    3d54:	4683      	mov	fp, r0
    3d56:	2800      	cmp	r0, #0
    3d58:	d1c1      	bne.n	3cde <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    3d5a:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    3d5e:	2e00      	cmp	r6, #0
    3d60:	d049      	beq.n	3df6 <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
    3d62:	6921      	ldr	r1, [r4, #16]
    3d64:	2207      	movs	r2, #7
    3d66:	f013 fec9 	bl	17afc <memcpy>
	name_type = get_adv_name_type_param(param);
    3d6a:	4620      	mov	r0, r4
    3d6c:	f014 fb6c 	bl	18448 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3d70:	6863      	ldr	r3, [r4, #4]
    3d72:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
    3d74:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    3d76:	d547      	bpl.n	3e08 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
    3d78:	2e00      	cmp	r6, #0
    3d7a:	d042      	beq.n	3e02 <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    3d7c:	f013 0f10 	tst.w	r3, #16
    3d80:	bf14      	ite	ne
    3d82:	2304      	movne	r3, #4
    3d84:	2301      	moveq	r3, #1
    3d86:	6921      	ldr	r1, [r4, #16]
    3d88:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    3d8c:	2207      	movs	r2, #7
    3d8e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    3d92:	f013 feb3 	bl	17afc <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    3d96:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    3d9a:	210f      	movs	r1, #15
    3d9c:	f242 0006 	movw	r0, #8198	; 0x2006
    3da0:	f7fe ff22 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
    3da4:	4683      	mov	fp, r0
    3da6:	2800      	cmp	r0, #0
    3da8:	f000 809b 	beq.w	3ee2 <bt_le_adv_start_legacy+0x23a>
    3dac:	220f      	movs	r2, #15
    3dae:	a90a      	add	r1, sp, #40	; 0x28
    3db0:	3008      	adds	r0, #8
    3db2:	f015 fe84 	bl	19abe <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    3db6:	2200      	movs	r2, #0
    3db8:	4659      	mov	r1, fp
    3dba:	f242 0006 	movw	r0, #8198	; 0x2006
    3dbe:	f7fe ff4d 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
    3dc2:	2800      	cmp	r0, #0
    3dc4:	f040 8090 	bne.w	3ee8 <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
    3dc8:	b376      	cbz	r6, 3e28 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3dca:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3dcc:	07db      	lsls	r3, r3, #31
    3dce:	d439      	bmi.n	3e44 <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
    3dd0:	2101      	movs	r1, #1
    3dd2:	4628      	mov	r0, r5
    3dd4:	f014 fb48 	bl	18468 <bt_le_adv_set_enable_legacy>
	if (err) {
    3dd8:	4683      	mov	fp, r0
    3dda:	9807      	ldr	r0, [sp, #28]
    3ddc:	f1bb 0f00 	cmp.w	fp, #0
    3de0:	d073      	beq.n	3eca <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    3de2:	2800      	cmp	r0, #0
    3de4:	f43f af7b 	beq.w	3cde <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3de8:	2100      	movs	r1, #0
    3dea:	f000 faaf 	bl	434c <bt_conn_set_state>
			bt_conn_unref(conn);
    3dee:	9807      	ldr	r0, [sp, #28]
    3df0:	f014 fc19 	bl	18626 <bt_conn_unref>
    3df4:	e773      	b.n	3cde <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    3df6:	9608      	str	r6, [sp, #32]
    3df8:	2207      	movs	r2, #7
    3dfa:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    3dfe:	a908      	add	r1, sp, #32
    3e00:	e7b1      	b.n	3d66 <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
    3e02:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    3e06:	e7c8      	b.n	3d9a <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    3e08:	059a      	lsls	r2, r3, #22
    3e0a:	d403      	bmi.n	3e14 <bt_le_adv_start_legacy+0x16c>
    3e0c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3e0e:	b90b      	cbnz	r3, 3e14 <bt_le_adv_start_legacy+0x16c>
    3e10:	2802      	cmp	r0, #2
    3e12:	d103      	bne.n	3e1c <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    3e14:	2302      	movs	r3, #2
    3e16:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    3e1a:	e7be      	b.n	3d9a <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    3e1c:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    3e1e:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    3e22:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    3e26:	e7b8      	b.n	3d9a <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    3e28:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3e2a:	9300      	str	r3, [sp, #0]
    3e2c:	e9cd 8901 	strd	r8, r9, [sp, #4]
    3e30:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3e32:	9905      	ldr	r1, [sp, #20]
    3e34:	4652      	mov	r2, sl
    3e36:	4628      	mov	r0, r5
    3e38:	f014 fa8f 	bl	1835a <le_adv_update.constprop.0>
		if (err) {
    3e3c:	4683      	mov	fp, r0
    3e3e:	2800      	cmp	r0, #0
    3e40:	d0c3      	beq.n	3dca <bt_le_adv_start_legacy+0x122>
    3e42:	e74c      	b.n	3cde <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    3e44:	a907      	add	r1, sp, #28
    3e46:	4628      	mov	r0, r5
    3e48:	f7ff fee6 	bl	3c18 <le_adv_start_add_conn>
		if (err) {
    3e4c:	4683      	mov	fp, r0
    3e4e:	2800      	cmp	r0, #0
    3e50:	d0be      	beq.n	3dd0 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
    3e52:	f110 0f0c 	cmn.w	r0, #12
    3e56:	f47f af42 	bne.w	3cde <bt_le_adv_start_legacy+0x36>
    3e5a:	2e00      	cmp	r6, #0
    3e5c:	f47f af3f 	bne.w	3cde <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    3e60:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    3e62:	0798      	lsls	r0, r3, #30
    3e64:	f53f af3b 	bmi.w	3cde <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    3e68:	6862      	ldr	r2, [r4, #4]
    3e6a:	f082 0202 	eor.w	r2, r2, #2
    3e6e:	f3c2 0b40 	ubfx	fp, r2, #1, #1
    3e72:	f00b 0201 	and.w	r2, fp, #1
    3e76:	210d      	movs	r1, #13
    3e78:	4638      	mov	r0, r7
    3e7a:	f014 fa57 	bl	1832c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    3e7e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    3e82:	425a      	negs	r2, r3
    3e84:	415a      	adcs	r2, r3
    3e86:	2107      	movs	r1, #7
    3e88:	4638      	mov	r0, r7
    3e8a:	f014 fa4f 	bl	1832c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    3e8e:	f1a9 0102 	sub.w	r1, r9, #2
    3e92:	424a      	negs	r2, r1
    3e94:	414a      	adcs	r2, r1
    3e96:	4638      	mov	r0, r7
    3e98:	2108      	movs	r1, #8
    3e9a:	f014 fa47 	bl	1832c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    3e9e:	6862      	ldr	r2, [r4, #4]
    3ea0:	2109      	movs	r1, #9
    3ea2:	f002 0201 	and.w	r2, r2, #1
    3ea6:	4638      	mov	r0, r7
    3ea8:	f014 fa40 	bl	1832c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    3eac:	4642      	mov	r2, r8
    3eae:	210a      	movs	r1, #10
    3eb0:	4638      	mov	r0, r7
    3eb2:	f014 fa3b 	bl	1832c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    3eb6:	6862      	ldr	r2, [r4, #4]
    3eb8:	210c      	movs	r1, #12
    3eba:	f3c2 0280 	ubfx	r2, r2, #2, #1
    3ebe:	4638      	mov	r0, r7
    3ec0:	f014 fa34 	bl	1832c <atomic_set_bit_to>
	return 0;
    3ec4:	f04f 0b00 	mov.w	fp, #0
    3ec8:	e709      	b.n	3cde <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    3eca:	b108      	cbz	r0, 3ed0 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
    3ecc:	f014 fbab 	bl	18626 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    3ed0:	2e00      	cmp	r6, #0
    3ed2:	d1ce      	bne.n	3e72 <bt_le_adv_start_legacy+0x1ca>
    3ed4:	e7c8      	b.n	3e68 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
    3ed6:	f06f 0b0a 	mvn.w	fp, #10
    3eda:	e700      	b.n	3cde <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    3edc:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    3ee0:	e6fd      	b.n	3cde <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    3ee2:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    3ee6:	e6fa      	b.n	3cde <bt_le_adv_start_legacy+0x36>
    3ee8:	4683      	mov	fp, r0
    3eea:	e6f8      	b.n	3cde <bt_le_adv_start_legacy+0x36>
    3eec:	200000cc 	.word	0x200000cc
    3ef0:	20000000 	.word	0x20000000

00003ef4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    3ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3ef6:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    3ef8:	9a06      	ldr	r2, [sp, #24]
{
    3efa:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    3efc:	e9cd 3200 	strd	r3, r2, [sp]
    3f00:	462b      	mov	r3, r5
    3f02:	460a      	mov	r2, r1
    3f04:	4601      	mov	r1, r0
    3f06:	4811      	ldr	r0, [pc, #68]	; (3f4c <bt_le_adv_start+0x58>)
    3f08:	f7ff fece 	bl	3ca8 <bt_le_adv_start_legacy>
    3f0c:	4621      	mov	r1, r4
    3f0e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    3f10:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    3f12:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    3f16:	429d      	cmp	r5, r3
    3f18:	d102      	bne.n	3f20 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    3f1a:	4630      	mov	r0, r6
    3f1c:	b002      	add	sp, #8
    3f1e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    3f20:	880a      	ldrh	r2, [r1, #0]
    3f22:	4282      	cmp	r2, r0
    3f24:	d104      	bne.n	3f30 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    3f26:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    3f28:	b112      	cbz	r2, 3f30 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    3f2a:	7812      	ldrb	r2, [r2, #0]
    3f2c:	07d2      	lsls	r2, r2, #31
    3f2e:	d402      	bmi.n	3f36 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    3f30:	3301      	adds	r3, #1
    3f32:	3108      	adds	r1, #8
    3f34:	e7ef      	b.n	3f16 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    3f36:	4906      	ldr	r1, [pc, #24]	; (3f50 <bt_le_adv_start+0x5c>)
    3f38:	4806      	ldr	r0, [pc, #24]	; (3f54 <bt_le_adv_start+0x60>)
    3f3a:	f016 fd57 	bl	1a9ec <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    3f3e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    3f42:	2300      	movs	r3, #0
    3f44:	4803      	ldr	r0, [pc, #12]	; (3f54 <bt_le_adv_start+0x60>)
    3f46:	f012 faa3 	bl	16490 <k_work_reschedule>
    3f4a:	e7e6      	b.n	3f1a <bt_le_adv_start+0x26>
    3f4c:	20000018 	.word	0x20000018
    3f50:	000184b9 	.word	0x000184b9
    3f54:	20000030 	.word	0x20000030

00003f58 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    3f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
    3f5a:	4822      	ldr	r0, [pc, #136]	; (3fe4 <bt_le_adv_stop+0x8c>)
    3f5c:	f014 faa9 	bl	184b2 <bt_le_lim_adv_cancel_timeout>
    3f60:	4821      	ldr	r0, [pc, #132]	; (3fe8 <bt_le_adv_stop+0x90>)
    3f62:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    3f66:	f014 f971 	bl	1824c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    3f6a:	481f      	ldr	r0, [pc, #124]	; (3fe8 <bt_le_adv_stop+0x90>)
    3f6c:	f014 f968 	bl	18240 <atomic_get>
    3f70:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    3f72:	065a      	lsls	r2, r3, #25
    3f74:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3f78:	d531      	bpl.n	3fde <bt_le_adv_stop+0x86>
    3f7a:	481b      	ldr	r0, [pc, #108]	; (3fe8 <bt_le_adv_stop+0x90>)
    3f7c:	f014 f960 	bl	18240 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3f80:	0583      	lsls	r3, r0, #22
    3f82:	d521      	bpl.n	3fc8 <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    3f84:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    3f86:	4819      	ldr	r0, [pc, #100]	; (3fec <bt_le_adv_stop+0x94>)
    3f88:	9300      	str	r3, [sp, #0]
    3f8a:	2207      	movs	r2, #7
    3f8c:	4669      	mov	r1, sp
    3f8e:	f8cd 3003 	str.w	r3, [sp, #3]
    3f92:	f013 fda2 	bl	17ada <memcmp>
    3f96:	4b16      	ldr	r3, [pc, #88]	; (3ff0 <bt_le_adv_stop+0x98>)
    3f98:	b9e8      	cbnz	r0, 3fd6 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    3f9a:	4a16      	ldr	r2, [pc, #88]	; (3ff4 <bt_le_adv_stop+0x9c>)
    3f9c:	8891      	ldrh	r1, [r2, #4]
    3f9e:	6810      	ldr	r0, [r2, #0]
    3fa0:	7992      	ldrb	r2, [r2, #6]
    3fa2:	f8ad 100c 	strh.w	r1, [sp, #12]
    3fa6:	f88d 200e 	strb.w	r2, [sp, #14]
    3faa:	9002      	str	r0, [sp, #8]
    3fac:	2204      	movs	r2, #4
    3fae:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    3fb0:	7e18      	ldrb	r0, [r3, #24]
    3fb2:	f000 fb57 	bl	4664 <bt_conn_lookup_state_le>
    3fb6:	4604      	mov	r4, r0
	if (conn) {
    3fb8:	b130      	cbz	r0, 3fc8 <bt_le_adv_stop+0x70>
		conn->err = status;
    3fba:	2100      	movs	r1, #0
    3fbc:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3fbe:	f000 f9c5 	bl	434c <bt_conn_set_state>
		bt_conn_unref(conn);
    3fc2:	4620      	mov	r0, r4
    3fc4:	f014 fb2f 	bl	18626 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
    3fc8:	4806      	ldr	r0, [pc, #24]	; (3fe4 <bt_le_adv_stop+0x8c>)
    3fca:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    3fcc:	b004      	add	sp, #16
    3fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    3fd2:	f014 ba49 	b.w	18468 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    3fd6:	2205      	movs	r2, #5
    3fd8:	f103 0121 	add.w	r1, r3, #33	; 0x21
    3fdc:	e7e8      	b.n	3fb0 <bt_le_adv_stop+0x58>
}
    3fde:	b004      	add	sp, #16
    3fe0:	bd10      	pop	{r4, pc}
    3fe2:	bf00      	nop
    3fe4:	20000018 	.word	0x20000018
    3fe8:	20000028 	.word	0x20000028
    3fec:	20000021 	.word	0x20000021
    3ff0:	20000000 	.word	0x20000000
    3ff4:	0001b41b 	.word	0x0001b41b

00003ff8 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    3ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3ffa:	481e      	ldr	r0, [pc, #120]	; (4074 <bt_le_adv_resume+0x7c>)
    3ffc:	4c1d      	ldr	r4, [pc, #116]	; (4074 <bt_le_adv_resume+0x7c>)
    3ffe:	f014 f91f 	bl	18240 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    4002:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    4006:	d032      	beq.n	406e <bt_le_adv_resume+0x76>
    4008:	4620      	mov	r0, r4
    400a:	f014 f919 	bl	18240 <atomic_get>
    400e:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    4010:	f3c0 1580 	ubfx	r5, r0, #6, #1
    4014:	d42b      	bmi.n	406e <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4016:	4620      	mov	r0, r4
    4018:	f014 f912 	bl	18240 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    401c:	0583      	lsls	r3, r0, #22
    401e:	d526      	bpl.n	406e <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    4020:	a901      	add	r1, sp, #4
    4022:	f1a4 0010 	sub.w	r0, r4, #16
    4026:	f7ff fdf7 	bl	3c18 <le_adv_start_add_conn>
	if (err) {
    402a:	bb00      	cbnz	r0, 406e <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    402c:	2101      	movs	r1, #1
    402e:	f1a4 0010 	sub.w	r0, r4, #16
    4032:	f014 fa19 	bl	18468 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    4036:	b150      	cbz	r0, 404e <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4038:	4629      	mov	r1, r5
    403a:	9801      	ldr	r0, [sp, #4]
    403c:	f000 f986 	bl	434c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4040:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    4044:	4620      	mov	r0, r4
    4046:	f014 f901 	bl	1824c <atomic_and>
	return (old & mask) != 0;
    404a:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    404e:	9801      	ldr	r0, [sp, #4]
    4050:	f014 fae9 	bl	18626 <bt_conn_unref>
	if (persist_paused) {
    4054:	b15d      	cbz	r5, 406e <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4056:	f3bf 8f5b 	dmb	ish
    405a:	e854 3f00 	ldrex	r3, [r4]
    405e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4062:	e844 3200 	strex	r2, r3, [r4]
    4066:	2a00      	cmp	r2, #0
    4068:	d1f7      	bne.n	405a <bt_le_adv_resume+0x62>
    406a:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    406e:	b003      	add	sp, #12
    4070:	bd30      	pop	{r4, r5, pc}
    4072:	bf00      	nop
    4074:	20000028 	.word	0x20000028

00004078 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    4078:	2300      	movs	r3, #0
	tx->user_data = NULL;
    407a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    407e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    4080:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    4082:	4801      	ldr	r0, [pc, #4]	; (4088 <tx_free+0x10>)
    4084:	f016 bbbb 	b.w	1a7fe <k_queue_append>
    4088:	200008c0 	.word	0x200008c0

0000408c <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    408c:	4b0e      	ldr	r3, [pc, #56]	; (40c8 <notify_connected+0x3c>)
{
    408e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    4090:	681d      	ldr	r5, [r3, #0]
{
    4092:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4094:	b955      	cbnz	r5, 40ac <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4096:	4d0d      	ldr	r5, [pc, #52]	; (40cc <notify_connected+0x40>)
    4098:	4e0d      	ldr	r6, [pc, #52]	; (40d0 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    409a:	7a61      	ldrb	r1, [r4, #9]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    409c:	42b5      	cmp	r5, r6
    409e:	d30c      	bcc.n	40ba <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    40a0:	b989      	cbnz	r1, 40c6 <notify_connected+0x3a>
		bt_gatt_connected(conn);
    40a2:	4620      	mov	r0, r4
	}
}
    40a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    40a8:	f015 bc42 	b.w	19930 <bt_gatt_connected>
		if (cb->connected) {
    40ac:	682b      	ldr	r3, [r5, #0]
    40ae:	b113      	cbz	r3, 40b6 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    40b0:	7a61      	ldrb	r1, [r4, #9]
    40b2:	4620      	mov	r0, r4
    40b4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    40b6:	692d      	ldr	r5, [r5, #16]
    40b8:	e7ec      	b.n	4094 <notify_connected+0x8>
		if (cb->connected) {
    40ba:	682b      	ldr	r3, [r5, #0]
    40bc:	b10b      	cbz	r3, 40c2 <notify_connected+0x36>
			cb->connected(conn, conn->err);
    40be:	4620      	mov	r0, r4
    40c0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    40c2:	3514      	adds	r5, #20
    40c4:	e7e9      	b.n	409a <notify_connected+0xe>
}
    40c6:	bd70      	pop	{r4, r5, r6, pc}
    40c8:	20001418 	.word	0x20001418
    40cc:	0001b334 	.word	0x0001b334
    40d0:	0001b334 	.word	0x0001b334

000040d4 <send_frag>:
{
    40d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    40d8:	694d      	ldr	r5, [r1, #20]
{
    40da:	4604      	mov	r4, r0
    40dc:	460e      	mov	r6, r1
    40de:	4690      	mov	r8, r2
    40e0:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    40e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    40e6:	483e      	ldr	r0, [pc, #248]	; (41e0 <send_frag+0x10c>)
    40e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    40ec:	f011 ffee 	bl	160cc <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    40f0:	7aa3      	ldrb	r3, [r4, #10]
    40f2:	2b07      	cmp	r3, #7
    40f4:	d146      	bne.n	4184 <send_frag+0xb0>
	__asm__ volatile(
    40f6:	f04f 0320 	mov.w	r3, #32
    40fa:	f3ef 8211 	mrs	r2, BASEPRI
    40fe:	f383 8812 	msr	BASEPRI_MAX, r3
    4102:	f3bf 8f6f 	isb	sy
	if (tx) {
    4106:	69a3      	ldr	r3, [r4, #24]
    4108:	2d00      	cmp	r5, #0
    410a:	d04d      	beq.n	41a8 <send_frag+0xd4>
	parent->next = child;
    410c:	2100      	movs	r1, #0
    410e:	6029      	str	r1, [r5, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4110:	2b00      	cmp	r3, #0
    4112:	d146      	bne.n	41a2 <send_frag+0xce>
	list->head = node;
    4114:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    4118:	f382 8811 	msr	BASEPRI, r2
    411c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    4120:	2104      	movs	r1, #4
    4122:	f106 0008 	add.w	r0, r6, #8
    4126:	f015 fcdb 	bl	19ae0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    412a:	8823      	ldrh	r3, [r4, #0]
    412c:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    4130:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4134:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4136:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    413a:	3b04      	subs	r3, #4
    413c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    413e:	2302      	movs	r3, #2
    4140:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    4142:	4630      	mov	r0, r6
    4144:	f7fe fdec 	bl	2d20 <bt_send>
	if (err) {
    4148:	2800      	cmp	r0, #0
    414a:	d047      	beq.n	41dc <send_frag+0x108>
	__asm__ volatile(
    414c:	f04f 0320 	mov.w	r3, #32
    4150:	f3ef 8011 	mrs	r0, BASEPRI
    4154:	f383 8812 	msr	BASEPRI_MAX, r3
    4158:	f3bf 8f6f 	isb	sy
		if (tx) {
    415c:	2d00      	cmp	r5, #0
    415e:	d037      	beq.n	41d0 <send_frag+0xfc>
	return list->head;
    4160:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4162:	2200      	movs	r2, #0
    4164:	b153      	cbz	r3, 417c <send_frag+0xa8>
    4166:	429d      	cmp	r5, r3
    4168:	d12f      	bne.n	41ca <send_frag+0xf6>
	return node->next;
    416a:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    416c:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    416e:	bb3a      	cbnz	r2, 41c0 <send_frag+0xec>
    4170:	42a9      	cmp	r1, r5
	list->head = node;
    4172:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    4174:	d100      	bne.n	4178 <send_frag+0xa4>
	list->tail = node;
    4176:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    4178:	2300      	movs	r3, #0
    417a:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    417c:	f380 8811 	msr	BASEPRI, r0
    4180:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    4184:	4816      	ldr	r0, [pc, #88]	; (41e0 <send_frag+0x10c>)
    4186:	f011 ff7b 	bl	16080 <z_impl_k_sem_give>
	if (tx) {
    418a:	b115      	cbz	r5, 4192 <send_frag+0xbe>
		tx_free(tx);
    418c:	4628      	mov	r0, r5
    418e:	f7ff ff73 	bl	4078 <tx_free>
	if (always_consume) {
    4192:	b11f      	cbz	r7, 419c <send_frag+0xc8>
		net_buf_unref(buf);
    4194:	4630      	mov	r0, r6
    4196:	f00f f991 	bl	134bc <net_buf_unref>
	return false;
    419a:	2700      	movs	r7, #0
}
    419c:	4638      	mov	r0, r7
    419e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    41a2:	601d      	str	r5, [r3, #0]
	list->tail = node;
    41a4:	61a5      	str	r5, [r4, #24]
}
    41a6:	e7b7      	b.n	4118 <send_frag+0x44>
		if (tail_tx) {
    41a8:	b133      	cbz	r3, 41b8 <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
    41aa:	f103 090c 	add.w	r9, r3, #12
    41ae:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    41b0:	3301      	adds	r3, #1
    41b2:	f8c9 3000 	str.w	r3, [r9]
    41b6:	e7af      	b.n	4118 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    41b8:	69e3      	ldr	r3, [r4, #28]
    41ba:	f104 091c 	add.w	r9, r4, #28
    41be:	e7f7      	b.n	41b0 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
    41c0:	42a9      	cmp	r1, r5
	parent->next = child;
    41c2:	6013      	str	r3, [r2, #0]
	list->tail = node;
    41c4:	bf08      	it	eq
    41c6:	61a2      	streq	r2, [r4, #24]
}
    41c8:	e7d6      	b.n	4178 <send_frag+0xa4>
	return node->next;
    41ca:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    41cc:	681b      	ldr	r3, [r3, #0]
    41ce:	e7c9      	b.n	4164 <send_frag+0x90>
			(*pending_no_cb)--;
    41d0:	f8d9 3000 	ldr.w	r3, [r9]
    41d4:	3b01      	subs	r3, #1
    41d6:	f8c9 3000 	str.w	r3, [r9]
    41da:	e7cf      	b.n	417c <send_frag+0xa8>
	return true;
    41dc:	2701      	movs	r7, #1
    41de:	e7dd      	b.n	419c <send_frag+0xc8>
    41e0:	20000100 	.word	0x20000100

000041e4 <bt_conn_get_pkts>:
}
    41e4:	4800      	ldr	r0, [pc, #0]	; (41e8 <bt_conn_get_pkts+0x4>)
    41e6:	4770      	bx	lr
    41e8:	20000100 	.word	0x20000100

000041ec <bt_conn_new>:
{
    41ec:	b538      	push	{r3, r4, r5, lr}
    41ee:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    41f0:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    41f2:	2501      	movs	r5, #1
    41f4:	428b      	cmp	r3, r1
    41f6:	d102      	bne.n	41fe <bt_conn_new+0x12>
		return NULL;
    41f8:	2400      	movs	r4, #0
}
    41fa:	4620      	mov	r0, r4
    41fc:	bd38      	pop	{r3, r4, r5, pc}
    41fe:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    4202:	f3bf 8f5b 	dmb	ish
    4206:	e852 0f00 	ldrex	r0, [r2]
    420a:	2800      	cmp	r0, #0
    420c:	d104      	bne.n	4218 <bt_conn_new+0x2c>
    420e:	e842 5c00 	strex	ip, r5, [r2]
    4212:	f1bc 0f00 	cmp.w	ip, #0
    4216:	d1f6      	bne.n	4206 <bt_conn_new+0x1a>
    4218:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    421c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    4220:	d002      	beq.n	4228 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    4222:	3301      	adds	r3, #1
    4224:	4604      	mov	r4, r0
    4226:	e7e5      	b.n	41f4 <bt_conn_new+0x8>
	if (!conn) {
    4228:	2c00      	cmp	r4, #0
    422a:	d0e6      	beq.n	41fa <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    422c:	22b8      	movs	r2, #184	; 0xb8
    422e:	2100      	movs	r1, #0
    4230:	4620      	mov	r0, r4
    4232:	f013 fc6e 	bl	17b12 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    4236:	f104 0058 	add.w	r0, r4, #88	; 0x58
    423a:	4904      	ldr	r1, [pc, #16]	; (424c <bt_conn_new+0x60>)
    423c:	f016 fbd6 	bl	1a9ec <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    4240:	4903      	ldr	r1, [pc, #12]	; (4250 <bt_conn_new+0x64>)
    4242:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4246:	f016 fbab 	bl	1a9a0 <k_work_init>
	return conn;
    424a:	e7d6      	b.n	41fa <bt_conn_new+0xe>
    424c:	00004715 	.word	0x00004715
    4250:	00018503 	.word	0x00018503

00004254 <bt_conn_send_cb>:
{
    4254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4256:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
    4258:	7a83      	ldrb	r3, [r0, #10]
    425a:	2b07      	cmp	r3, #7
{
    425c:	4604      	mov	r4, r0
    425e:	460d      	mov	r5, r1
    4260:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
    4262:	d114      	bne.n	428e <bt_conn_send_cb+0x3a>
	if (cb) {
    4264:	b312      	cbz	r2, 42ac <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
    4266:	f012 fbc1 	bl	169ec <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    426a:	4b13      	ldr	r3, [pc, #76]	; (42b8 <bt_conn_send_cb+0x64>)
    426c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    426e:	4813      	ldr	r0, [pc, #76]	; (42bc <bt_conn_send_cb+0x68>)
    4270:	bf07      	ittee	eq
    4272:	2200      	moveq	r2, #0
    4274:	2300      	moveq	r3, #0
    4276:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    427a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    427e:	f011 fecb 	bl	16018 <z_impl_k_queue_get>
		if (!tx) {
    4282:	b1a8      	cbz	r0, 42b0 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
    4284:	7aa3      	ldrb	r3, [r4, #10]
    4286:	2b07      	cmp	r3, #7
    4288:	d004      	beq.n	4294 <bt_conn_send_cb+0x40>
			tx_free(tx);
    428a:	f7ff fef5 	bl	4078 <tx_free>
		return -ENOTCONN;
    428e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    4292:	e00a      	b.n	42aa <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
    4294:	2300      	movs	r3, #0
		tx->user_data = user_data;
    4296:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
    429a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    429c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    429e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    42a2:	4629      	mov	r1, r5
    42a4:	f015 fbc6 	bl	19a34 <net_buf_put>
	return 0;
    42a8:	2000      	movs	r0, #0
}
    42aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
    42ac:	614a      	str	r2, [r1, #20]
    42ae:	e7f6      	b.n	429e <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
    42b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    42b4:	e7f9      	b.n	42aa <bt_conn_send_cb+0x56>
    42b6:	bf00      	nop
    42b8:	20001310 	.word	0x20001310
    42bc:	200008c0 	.word	0x200008c0

000042c0 <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
    42c0:	4b1b      	ldr	r3, [pc, #108]	; (4330 <bt_conn_prepare_events+0x70>)
{
    42c2:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
    42c4:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    42c6:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    42c8:	609a      	str	r2, [r3, #8]
{
    42ca:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    42cc:	f016 fe6a 	bl	1afa4 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    42d0:	f3bf 8f5b 	dmb	ish
    42d4:	4b17      	ldr	r3, [pc, #92]	; (4334 <bt_conn_prepare_events+0x74>)
    42d6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    42da:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    42de:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
    42e2:	b90a      	cbnz	r2, 42e8 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    42e4:	2001      	movs	r0, #1
}
    42e6:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    42e8:	7a9a      	ldrb	r2, [r3, #10]
    42ea:	b99a      	cbnz	r2, 4314 <bt_conn_prepare_events+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    42ec:	f3bf 8f5b 	dmb	ish
    42f0:	1d1a      	adds	r2, r3, #4
    42f2:	e852 1f00 	ldrex	r1, [r2]
    42f6:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
    42fa:	e842 ce00 	strex	lr, ip, [r2]
    42fe:	f1be 0f00 	cmp.w	lr, #0
    4302:	d1f6      	bne.n	42f2 <bt_conn_prepare_events+0x32>
    4304:	f3bf 8f5b 	dmb	ish
    4308:	064a      	lsls	r2, r1, #25
    430a:	d503      	bpl.n	4314 <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
    430c:	4618      	mov	r0, r3
    430e:	f014 f904 	bl	1851a <conn_cleanup>
    4312:	e7e7      	b.n	42e4 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    4314:	7a9b      	ldrb	r3, [r3, #10]
    4316:	2b07      	cmp	r3, #7
    4318:	d1e4      	bne.n	42e4 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    431a:	4b07      	ldr	r3, [pc, #28]	; (4338 <bt_conn_prepare_events+0x78>)
    431c:	2200      	movs	r2, #0
    431e:	2104      	movs	r1, #4
    4320:	f016 fe40 	bl	1afa4 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    4324:	2301      	movs	r3, #1
    4326:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    432a:	2002      	movs	r0, #2
	return ev_count;
    432c:	e7db      	b.n	42e6 <bt_conn_prepare_events+0x26>
    432e:	bf00      	nop
    4330:	200001e0 	.word	0x200001e0
    4334:	20000a78 	.word	0x20000a78
    4338:	20000ab0 	.word	0x20000ab0

0000433c <bt_conn_lookup_handle>:
{
    433c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    433e:	2101      	movs	r1, #1
    4340:	4801      	ldr	r0, [pc, #4]	; (4348 <bt_conn_lookup_handle+0xc>)
    4342:	f014 b98a 	b.w	1865a <conn_lookup_handle>
    4346:	bf00      	nop
    4348:	20000a78 	.word	0x20000a78

0000434c <bt_conn_set_state>:
{
    434c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    434e:	7a85      	ldrb	r5, [r0, #10]
    4350:	428d      	cmp	r5, r1
{
    4352:	4604      	mov	r4, r0
	if (conn->state == state) {
    4354:	f000 809d 	beq.w	4492 <bt_conn_set_state+0x146>
	conn->state = state;
    4358:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    435a:	b925      	cbnz	r5, 4366 <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
    435c:	7883      	ldrb	r3, [r0, #2]
    435e:	2b08      	cmp	r3, #8
    4360:	d001      	beq.n	4366 <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
    4362:	f014 f945 	bl	185f0 <bt_conn_ref>
	switch (conn->state) {
    4366:	7aa3      	ldrb	r3, [r4, #10]
    4368:	2b01      	cmp	r3, #1
    436a:	d116      	bne.n	439a <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
    436c:	4d49      	ldr	r5, [pc, #292]	; (4494 <bt_conn_set_state+0x148>)
		tx->pending_no_cb = 0U;
    436e:	2600      	movs	r6, #0
	__asm__ volatile(
    4370:	f04f 0320 	mov.w	r3, #32
    4374:	f3ef 8211 	mrs	r2, BASEPRI
    4378:	f383 8812 	msr	BASEPRI_MAX, r3
    437c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    4380:	69e3      	ldr	r3, [r4, #28]
    4382:	2b00      	cmp	r3, #0
    4384:	d066      	beq.n	4454 <bt_conn_set_state+0x108>
			conn->pending_no_cb--;
    4386:	3b01      	subs	r3, #1
    4388:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    438a:	f382 8811 	msr	BASEPRI, r2
    438e:	f3bf 8f6f 	isb	sy
    4392:	4628      	mov	r0, r5
    4394:	f011 fe74 	bl	16080 <z_impl_k_sem_give>
}
    4398:	e7ea      	b.n	4370 <bt_conn_set_state+0x24>
	switch (conn->state) {
    439a:	2b07      	cmp	r3, #7
    439c:	d009      	beq.n	43b2 <bt_conn_set_state+0x66>
    439e:	2b00      	cmp	r3, #0
    43a0:	d177      	bne.n	4492 <bt_conn_set_state+0x146>
		if (conn->type == BT_CONN_TYPE_SCO) {
    43a2:	78a3      	ldrb	r3, [r4, #2]
    43a4:	2b04      	cmp	r3, #4
    43a6:	d11e      	bne.n	43e6 <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
    43a8:	4620      	mov	r0, r4
}
    43aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    43ae:	f014 b93a 	b.w	18626 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
    43b2:	78a3      	ldrb	r3, [r4, #2]
    43b4:	2b04      	cmp	r3, #4
    43b6:	d06c      	beq.n	4492 <bt_conn_set_state+0x146>
	z_impl_k_queue_init(queue);
    43b8:	f104 0038 	add.w	r0, r4, #56	; 0x38
    43bc:	f016 fa13 	bl	1a7e6 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    43c0:	4835      	ldr	r0, [pc, #212]	; (4498 <bt_conn_set_state+0x14c>)
    43c2:	2100      	movs	r1, #0
    43c4:	f012 fd3c 	bl	16e40 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    43c8:	2300      	movs	r3, #0
	list->tail = NULL;
    43ca:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    43ce:	78e3      	ldrb	r3, [r4, #3]
    43d0:	2b01      	cmp	r3, #1
    43d2:	d15e      	bne.n	4492 <bt_conn_set_state+0x146>
			k_work_schedule(&conn->deferred_work,
    43d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
    43d8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    43dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    43e0:	2300      	movs	r3, #0
    43e2:	f012 b821 	b.w	16428 <k_work_schedule>
		switch (old_state) {
    43e6:	3d01      	subs	r5, #1
    43e8:	2d05      	cmp	r5, #5
    43ea:	d852      	bhi.n	4492 <bt_conn_set_state+0x146>
    43ec:	a301      	add	r3, pc, #4	; (adr r3, 43f4 <bt_conn_set_state+0xa8>)
    43ee:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    43f2:	bf00      	nop
    43f4:	0000440d 	.word	0x0000440d
    43f8:	00004447 	.word	0x00004447
    43fc:	000043a9 	.word	0x000043a9
    4400:	000043a9 	.word	0x000043a9
    4404:	00004447 	.word	0x00004447
    4408:	00004447 	.word	0x00004447
			tx_notify(conn);
    440c:	4620      	mov	r0, r4
    440e:	f014 f855 	bl	184bc <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    4412:	78a3      	ldrb	r3, [r4, #2]
    4414:	2b01      	cmp	r3, #1
    4416:	d103      	bne.n	4420 <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
    4418:	f104 0058 	add.w	r0, r4, #88	; 0x58
    441c:	f016 faf2 	bl	1aa04 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4420:	f3bf 8f5b 	dmb	ish
    4424:	3404      	adds	r4, #4
    4426:	e854 3f00 	ldrex	r3, [r4]
    442a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    442e:	e844 3200 	strex	r2, r3, [r4]
    4432:	2a00      	cmp	r2, #0
    4434:	d1f7      	bne.n	4426 <bt_conn_set_state+0xda>
    4436:	f3bf 8f5b 	dmb	ish
    443a:	4817      	ldr	r0, [pc, #92]	; (4498 <bt_conn_set_state+0x14c>)
}
    443c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4440:	2100      	movs	r1, #0
    4442:	f012 bcfd 	b.w	16e40 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    4446:	7a63      	ldrb	r3, [r4, #9]
    4448:	2b00      	cmp	r3, #0
    444a:	d0ad      	beq.n	43a8 <bt_conn_set_state+0x5c>
				notify_connected(conn);
    444c:	4620      	mov	r0, r4
    444e:	f7ff fe1d 	bl	408c <notify_connected>
    4452:	e7a9      	b.n	43a8 <bt_conn_set_state+0x5c>
	return list->head;
    4454:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    4456:	b128      	cbz	r0, 4464 <bt_conn_set_state+0x118>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4458:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    445a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    445c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    445e:	4288      	cmp	r0, r1
	list->tail = node;
    4460:	bf08      	it	eq
    4462:	61a3      	streq	r3, [r4, #24]
    4464:	f382 8811 	msr	BASEPRI, r2
    4468:	f3bf 8f6f 	isb	sy
		if (!node) {
    446c:	b188      	cbz	r0, 4492 <bt_conn_set_state+0x146>
	__asm__ volatile(
    446e:	f04f 0220 	mov.w	r2, #32
    4472:	f3ef 8311 	mrs	r3, BASEPRI
    4476:	f382 8812 	msr	BASEPRI_MAX, r2
    447a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    447e:	68c2      	ldr	r2, [r0, #12]
    4480:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    4482:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    4484:	f383 8811 	msr	BASEPRI, r3
    4488:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    448c:	f7ff fdf4 	bl	4078 <tx_free>
    4490:	e77f      	b.n	4392 <bt_conn_set_state+0x46>
}
    4492:	bd70      	pop	{r4, r5, r6, pc}
    4494:	20000100 	.word	0x20000100
    4498:	200001e0 	.word	0x200001e0

0000449c <bt_conn_index>:
		index = conn - acl_conns;
    449c:	4b03      	ldr	r3, [pc, #12]	; (44ac <bt_conn_index+0x10>)
    449e:	1ac0      	subs	r0, r0, r3
    44a0:	4b03      	ldr	r3, [pc, #12]	; (44b0 <bt_conn_index+0x14>)
    44a2:	1180      	asrs	r0, r0, #6
    44a4:	4358      	muls	r0, r3
}
    44a6:	b2c0      	uxtb	r0, r0
    44a8:	4770      	bx	lr
    44aa:	bf00      	nop
    44ac:	20000a78 	.word	0x20000a78
    44b0:	aaaaaaab 	.word	0xaaaaaaab

000044b4 <bt_conn_create_pdu_timeout>:
{
    44b4:	b538      	push	{r3, r4, r5, lr}
    44b6:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    44b8:	4906      	ldr	r1, [pc, #24]	; (44d4 <bt_conn_create_pdu_timeout+0x20>)
    44ba:	2800      	cmp	r0, #0
    44bc:	bf08      	it	eq
    44be:	4608      	moveq	r0, r1
    44c0:	f015 fa95 	bl	199ee <net_buf_alloc_fixed>
	if (!buf) {
    44c4:	4604      	mov	r4, r0
    44c6:	b118      	cbz	r0, 44d0 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    44c8:	1d29      	adds	r1, r5, #4
    44ca:	3008      	adds	r0, #8
    44cc:	f015 faae 	bl	19a2c <net_buf_simple_reserve>
}
    44d0:	4620      	mov	r0, r4
    44d2:	bd38      	pop	{r3, r4, r5, pc}
    44d4:	200008f0 	.word	0x200008f0

000044d8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    44d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    44da:	f3bf 8f5b 	dmb	ish
    44de:	6842      	ldr	r2, [r0, #4]
    44e0:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    44e4:	0592      	lsls	r2, r2, #22
{
    44e6:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    44e8:	f100 0304 	add.w	r3, r0, #4
    44ec:	d519      	bpl.n	4522 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    44ee:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    44f2:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    44f6:	4291      	cmp	r1, r2
    44f8:	d813      	bhi.n	4522 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    44fa:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    44fe:	4291      	cmp	r1, r2
    4500:	d30f      	bcc.n	4522 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    4502:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    4506:	4291      	cmp	r1, r2
    4508:	d10b      	bne.n	4522 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    450a:	f3bf 8f5b 	dmb	ish
    450e:	e853 2f00 	ldrex	r2, [r3]
    4512:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    4516:	e843 2100 	strex	r1, r2, [r3]
    451a:	2900      	cmp	r1, #0
    451c:	d1f7      	bne.n	450e <notify_le_param_updated+0x36>
    451e:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    4522:	4b10      	ldr	r3, [pc, #64]	; (4564 <notify_le_param_updated+0x8c>)
    4524:	681d      	ldr	r5, [r3, #0]
    4526:	b925      	cbnz	r5, 4532 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4528:	4d0f      	ldr	r5, [pc, #60]	; (4568 <notify_le_param_updated+0x90>)
    452a:	4f10      	ldr	r7, [pc, #64]	; (456c <notify_le_param_updated+0x94>)
    452c:	42bd      	cmp	r5, r7
    452e:	d30c      	bcc.n	454a <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    4530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    4532:	68ee      	ldr	r6, [r5, #12]
    4534:	b13e      	cbz	r6, 4546 <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
    4536:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    453a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    453e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    4542:	4620      	mov	r0, r4
    4544:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    4546:	692d      	ldr	r5, [r5, #16]
    4548:	e7ed      	b.n	4526 <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
    454a:	68ee      	ldr	r6, [r5, #12]
    454c:	b13e      	cbz	r6, 455e <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
    454e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    4552:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    4556:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    455a:	4620      	mov	r0, r4
    455c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    455e:	3514      	adds	r5, #20
    4560:	e7e4      	b.n	452c <notify_le_param_updated+0x54>
    4562:	bf00      	nop
    4564:	20001418 	.word	0x20001418
    4568:	0001b334 	.word	0x0001b334
    456c:	0001b334 	.word	0x0001b334

00004570 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    4570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4574:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    4576:	4608      	mov	r0, r1
{
    4578:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    457a:	f013 fcb3 	bl	17ee4 <bt_le_conn_params_valid>
    457e:	4605      	mov	r5, r0
    4580:	b918      	cbnz	r0, 458a <le_param_req+0x1a>
		return false;
    4582:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    4584:	4628      	mov	r0, r5
    4586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    458a:	4b13      	ldr	r3, [pc, #76]	; (45d8 <le_param_req+0x68>)
    458c:	681e      	ldr	r6, [r3, #0]
    458e:	b946      	cbnz	r6, 45a2 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4590:	4e12      	ldr	r6, [pc, #72]	; (45dc <le_param_req+0x6c>)
    4592:	f8df 804c 	ldr.w	r8, [pc, #76]	; 45e0 <le_param_req+0x70>
    4596:	4546      	cmp	r6, r8
    4598:	d2f4      	bcs.n	4584 <le_param_req+0x14>
		if (!cb->le_param_req) {
    459a:	68b3      	ldr	r3, [r6, #8]
    459c:	b983      	cbnz	r3, 45c0 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    459e:	3614      	adds	r6, #20
    45a0:	e7f9      	b.n	4596 <le_param_req+0x26>
		if (!cb->le_param_req) {
    45a2:	68b3      	ldr	r3, [r6, #8]
    45a4:	b90b      	cbnz	r3, 45aa <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    45a6:	6936      	ldr	r6, [r6, #16]
    45a8:	e7f1      	b.n	458e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    45aa:	4621      	mov	r1, r4
    45ac:	4638      	mov	r0, r7
    45ae:	4798      	blx	r3
    45b0:	2800      	cmp	r0, #0
    45b2:	d0e6      	beq.n	4582 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    45b4:	4620      	mov	r0, r4
    45b6:	f013 fc95 	bl	17ee4 <bt_le_conn_params_valid>
    45ba:	2800      	cmp	r0, #0
    45bc:	d1f3      	bne.n	45a6 <le_param_req+0x36>
    45be:	e7e0      	b.n	4582 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    45c0:	4621      	mov	r1, r4
    45c2:	4638      	mov	r0, r7
    45c4:	4798      	blx	r3
    45c6:	2800      	cmp	r0, #0
    45c8:	d0db      	beq.n	4582 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    45ca:	4620      	mov	r0, r4
    45cc:	f013 fc8a 	bl	17ee4 <bt_le_conn_params_valid>
    45d0:	2800      	cmp	r0, #0
    45d2:	d1e4      	bne.n	459e <le_param_req+0x2e>
    45d4:	e7d5      	b.n	4582 <le_param_req+0x12>
    45d6:	bf00      	nop
    45d8:	20001418 	.word	0x20001418
    45dc:	0001b334 	.word	0x0001b334
    45e0:	0001b334 	.word	0x0001b334

000045e4 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    45e4:	4b02      	ldr	r3, [pc, #8]	; (45f0 <bt_conn_cb_register+0xc>)
    45e6:	681a      	ldr	r2, [r3, #0]
    45e8:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    45ea:	6018      	str	r0, [r3, #0]
}
    45ec:	4770      	bx	lr
    45ee:	bf00      	nop
    45f0:	20001418 	.word	0x20001418

000045f4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    45f4:	b570      	push	{r4, r5, r6, lr}
    45f6:	4606      	mov	r6, r0
    45f8:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    45fa:	4809      	ldr	r0, [pc, #36]	; (4620 <bt_conn_add_le+0x2c>)
    45fc:	2101      	movs	r1, #1
    45fe:	f7ff fdf5 	bl	41ec <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    4602:	4604      	mov	r4, r0
    4604:	b150      	cbz	r0, 461c <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    4606:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
    4608:	2207      	movs	r2, #7
    460a:	4629      	mov	r1, r5
    460c:	3088      	adds	r0, #136	; 0x88
    460e:	f013 fa75 	bl	17afc <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    4612:	2301      	movs	r3, #1
    4614:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    4616:	4b03      	ldr	r3, [pc, #12]	; (4624 <bt_conn_add_le+0x30>)
    4618:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    461c:	4620      	mov	r0, r4
    461e:	bd70      	pop	{r4, r5, r6, pc}
    4620:	20000a78 	.word	0x20000a78
    4624:	00280018 	.word	0x00280018

00004628 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    4628:	b570      	push	{r4, r5, r6, lr}
    462a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    462c:	480c      	ldr	r0, [pc, #48]	; (4660 <bt_conn_lookup_addr_le+0x38>)
{
    462e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    4630:	f013 ffde 	bl	185f0 <bt_conn_ref>

		if (!conn) {
    4634:	4604      	mov	r4, r0
    4636:	b128      	cbz	r0, 4644 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    4638:	7883      	ldrb	r3, [r0, #2]
    463a:	2b01      	cmp	r3, #1
    463c:	d004      	beq.n	4648 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    463e:	f013 fff2 	bl	18626 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    4642:	2400      	movs	r4, #0
}
    4644:	4620      	mov	r0, r4
    4646:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    4648:	4629      	mov	r1, r5
    464a:	4632      	mov	r2, r6
    464c:	f014 f832 	bl	186b4 <bt_conn_is_peer_addr_le>
    4650:	4605      	mov	r5, r0
    4652:	2800      	cmp	r0, #0
    4654:	d1f6      	bne.n	4644 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    4656:	4620      	mov	r0, r4
    4658:	f013 ffe5 	bl	18626 <bt_conn_unref>
	return NULL;
    465c:	462c      	mov	r4, r5
			continue;
    465e:	e7f1      	b.n	4644 <bt_conn_lookup_addr_le+0x1c>
    4660:	20000a78 	.word	0x20000a78

00004664 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    4664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4666:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    4668:	480e      	ldr	r0, [pc, #56]	; (46a4 <bt_conn_lookup_state_le+0x40>)
{
    466a:	460e      	mov	r6, r1
    466c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    466e:	f013 ffbf 	bl	185f0 <bt_conn_ref>

		if (!conn) {
    4672:	4604      	mov	r4, r0
    4674:	b1a0      	cbz	r0, 46a0 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    4676:	7883      	ldrb	r3, [r0, #2]
    4678:	2b01      	cmp	r3, #1
    467a:	d003      	beq.n	4684 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    467c:	f013 ffd3 	bl	18626 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    4680:	2400      	movs	r4, #0
			continue;
    4682:	e00d      	b.n	46a0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    4684:	b136      	cbz	r6, 4694 <bt_conn_lookup_state_le+0x30>
    4686:	4632      	mov	r2, r6
    4688:	4629      	mov	r1, r5
    468a:	f014 f813 	bl	186b4 <bt_conn_is_peer_addr_le>
    468e:	b908      	cbnz	r0, 4694 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    4690:	4620      	mov	r0, r4
    4692:	e7f3      	b.n	467c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    4694:	7aa3      	ldrb	r3, [r4, #10]
    4696:	42bb      	cmp	r3, r7
    4698:	d1fa      	bne.n	4690 <bt_conn_lookup_state_le+0x2c>
    469a:	7a23      	ldrb	r3, [r4, #8]
    469c:	42ab      	cmp	r3, r5
    469e:	d1f7      	bne.n	4690 <bt_conn_lookup_state_le+0x2c>
}
    46a0:	4620      	mov	r0, r4
    46a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46a4:	20000a78 	.word	0x20000a78

000046a8 <send_conn_le_param_update>:
{
    46a8:	b538      	push	{r3, r4, r5, lr}
    46aa:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    46ac:	4608      	mov	r0, r1
{
    46ae:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    46b0:	f013 fc18 	bl	17ee4 <bt_le_conn_params_valid>
    46b4:	b348      	cbz	r0, 470a <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    46b6:	4b16      	ldr	r3, [pc, #88]	; (4710 <send_conn_le_param_update+0x68>)
    46b8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    46bc:	0799      	lsls	r1, r3, #30
    46be:	d407      	bmi.n	46d0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    46c0:	78e3      	ldrb	r3, [r4, #3]
    46c2:	b183      	cbz	r3, 46e6 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    46c4:	4629      	mov	r1, r5
    46c6:	4620      	mov	r0, r4
}
    46c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    46cc:	f000 b9ba 	b.w	4a44 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    46d0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    46d4:	079a      	lsls	r2, r3, #30
    46d6:	d5f3      	bpl.n	46c0 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    46d8:	f3bf 8f5b 	dmb	ish
    46dc:	6863      	ldr	r3, [r4, #4]
    46de:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    46e2:	055b      	lsls	r3, r3, #21
    46e4:	d4ec      	bmi.n	46c0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    46e6:	4629      	mov	r1, r5
    46e8:	4620      	mov	r0, r4
    46ea:	f014 f80d 	bl	18708 <bt_conn_le_conn_update>
		if (rc == 0) {
    46ee:	b958      	cbnz	r0, 4708 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
    46f0:	882b      	ldrh	r3, [r5, #0]
    46f2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    46f6:	886b      	ldrh	r3, [r5, #2]
    46f8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    46fc:	88ab      	ldrh	r3, [r5, #4]
    46fe:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    4702:	88eb      	ldrh	r3, [r5, #6]
    4704:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    4708:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    470a:	f06f 0015 	mvn.w	r0, #21
    470e:	e7fb      	b.n	4708 <send_conn_le_param_update+0x60>
    4710:	20000000 	.word	0x20000000

00004714 <deferred_work>:
{
    4714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    4716:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    471a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    471c:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    4720:	b9fb      	cbnz	r3, 4762 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    4722:	4628      	mov	r0, r5
    4724:	f014 f872 	bl	1880c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    4728:	4b2c      	ldr	r3, [pc, #176]	; (47dc <deferred_work+0xc8>)
    472a:	681e      	ldr	r6, [r3, #0]
    472c:	b94e      	cbnz	r6, 4742 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    472e:	4e2c      	ldr	r6, [pc, #176]	; (47e0 <deferred_work+0xcc>)
    4730:	4f2c      	ldr	r7, [pc, #176]	; (47e4 <deferred_work+0xd0>)
    4732:	42be      	cmp	r6, r7
    4734:	d30d      	bcc.n	4752 <deferred_work+0x3e>
		bt_conn_unref(conn);
    4736:	4628      	mov	r0, r5
}
    4738:	b003      	add	sp, #12
    473a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    473e:	f013 bf72 	b.w	18626 <bt_conn_unref>
		if (cb->disconnected) {
    4742:	6873      	ldr	r3, [r6, #4]
    4744:	b11b      	cbz	r3, 474e <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    4746:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    474a:	4628      	mov	r0, r5
    474c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    474e:	6936      	ldr	r6, [r6, #16]
    4750:	e7ec      	b.n	472c <deferred_work+0x18>
		if (cb->disconnected) {
    4752:	6873      	ldr	r3, [r6, #4]
    4754:	b11b      	cbz	r3, 475e <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    4756:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    475a:	4628      	mov	r0, r5
    475c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    475e:	3614      	adds	r6, #20
    4760:	e7e7      	b.n	4732 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    4762:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    4766:	2b01      	cmp	r3, #1
    4768:	d12f      	bne.n	47ca <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    476a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    476e:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
    4772:	e856 3f00 	ldrex	r3, [r6]
    4776:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    477a:	e846 2100 	strex	r1, r2, [r6]
    477e:	2900      	cmp	r1, #0
    4780:	d1f7      	bne.n	4772 <deferred_work+0x5e>
    4782:	f3bf 8f5b 	dmb	ish
    4786:	059b      	lsls	r3, r3, #22
    4788:	d521      	bpl.n	47ce <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    478a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    478e:	f8ad 3000 	strh.w	r3, [sp]
    4792:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    4796:	f8ad 3002 	strh.w	r3, [sp, #2]
    479a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    479e:	f8ad 3004 	strh.w	r3, [sp, #4]
    47a2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    47a6:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    47aa:	4669      	mov	r1, sp
    47ac:	4628      	mov	r0, r5
    47ae:	f7ff ff7b 	bl	46a8 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    47b2:	f3bf 8f5b 	dmb	ish
    47b6:	e856 3f00 	ldrex	r3, [r6]
    47ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    47be:	e846 3200 	strex	r2, r3, [r6]
    47c2:	2a00      	cmp	r2, #0
    47c4:	d1f7      	bne.n	47b6 <deferred_work+0xa2>
    47c6:	f3bf 8f5b 	dmb	ish
}
    47ca:	b003      	add	sp, #12
    47cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
    47ce:	4a06      	ldr	r2, [pc, #24]	; (47e8 <deferred_work+0xd4>)
    47d0:	6810      	ldr	r0, [r2, #0]
    47d2:	6851      	ldr	r1, [r2, #4]
    47d4:	466b      	mov	r3, sp
    47d6:	c303      	stmia	r3!, {r0, r1}
    47d8:	e7e7      	b.n	47aa <deferred_work+0x96>
    47da:	bf00      	nop
    47dc:	20001418 	.word	0x20001418
    47e0:	0001b334 	.word	0x0001b334
    47e4:	0001b334 	.word	0x0001b334
    47e8:	0001b406 	.word	0x0001b406

000047ec <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    47ec:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    47ee:	4801      	ldr	r0, [pc, #4]	; (47f4 <bt_conn_create_frag_timeout+0x8>)
    47f0:	f7ff be60 	b.w	44b4 <bt_conn_create_pdu_timeout>
    47f4:	20000948 	.word	0x20000948

000047f8 <create_frag>:
{
    47f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47fc:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    47fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4806:	2000      	movs	r0, #0
{
    4808:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    480a:	f7ff ffef 	bl	47ec <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    480e:	7ab3      	ldrb	r3, [r6, #10]
    4810:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    4812:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    4814:	f04f 0600 	mov.w	r6, #0
    4818:	d005      	beq.n	4826 <create_frag+0x2e>
		net_buf_unref(frag);
    481a:	f00e fe4f 	bl	134bc <net_buf_unref>
		return NULL;
    481e:	4635      	mov	r5, r6
}
    4820:	4628      	mov	r0, r5
    4822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    4826:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    4828:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    482c:	4e0c      	ldr	r6, [pc, #48]	; (4860 <create_frag+0x68>)
    482e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    4830:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    4834:	f015 f978 	bl	19b28 <net_buf_simple_tailroom>
    4838:	4580      	cmp	r8, r0
    483a:	d20c      	bcs.n	4856 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    483c:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    4840:	f854 1f08 	ldr.w	r1, [r4, #8]!
    4844:	4632      	mov	r2, r6
    4846:	4638      	mov	r0, r7
    4848:	f015 f939 	bl	19abe <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    484c:	4631      	mov	r1, r6
    484e:	4620      	mov	r0, r4
    4850:	f015 f94e 	bl	19af0 <net_buf_simple_pull>
    4854:	e7e4      	b.n	4820 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    4856:	4638      	mov	r0, r7
    4858:	f015 f966 	bl	19b28 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    485c:	b286      	uxth	r6, r0
    485e:	e7ef      	b.n	4840 <create_frag+0x48>
    4860:	20000000 	.word	0x20000000

00004864 <bt_conn_process_tx>:
{
    4864:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    4866:	7a83      	ldrb	r3, [r0, #10]
{
    4868:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    486a:	b993      	cbnz	r3, 4892 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    486c:	f3bf 8f5b 	dmb	ish
    4870:	1d03      	adds	r3, r0, #4
    4872:	e853 2f00 	ldrex	r2, [r3]
    4876:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    487a:	e843 1500 	strex	r5, r1, [r3]
    487e:	2d00      	cmp	r5, #0
    4880:	d1f7      	bne.n	4872 <bt_conn_process_tx+0xe>
    4882:	f3bf 8f5b 	dmb	ish
    4886:	0653      	lsls	r3, r2, #25
    4888:	d503      	bpl.n	4892 <bt_conn_process_tx+0x2e>
}
    488a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    488e:	f013 be44 	b.w	1851a <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    4892:	2200      	movs	r2, #0
    4894:	2300      	movs	r3, #0
    4896:	f104 0038 	add.w	r0, r4, #56	; 0x38
    489a:	f015 f8ad 	bl	199f8 <net_buf_get>
	BT_ASSERT(buf);
    489e:	4605      	mov	r5, r0
    48a0:	b960      	cbnz	r0, 48bc <bt_conn_process_tx+0x58>
    48a2:	4a1f      	ldr	r2, [pc, #124]	; (4920 <bt_conn_process_tx+0xbc>)
    48a4:	491f      	ldr	r1, [pc, #124]	; (4924 <bt_conn_process_tx+0xc0>)
    48a6:	4820      	ldr	r0, [pc, #128]	; (4928 <bt_conn_process_tx+0xc4>)
    48a8:	f240 23e7 	movw	r3, #743	; 0x2e7
    48ac:	f012 fb5f 	bl	16f6e <printk>
    48b0:	4040      	eors	r0, r0
    48b2:	f380 8811 	msr	BASEPRI, r0
    48b6:	f04f 0003 	mov.w	r0, #3
    48ba:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    48bc:	4e1b      	ldr	r6, [pc, #108]	; (492c <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    48be:	89aa      	ldrh	r2, [r5, #12]
    48c0:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    48c4:	429a      	cmp	r2, r3
    48c6:	d807      	bhi.n	48d8 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    48c8:	2300      	movs	r3, #0
    48ca:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    48cc:	4629      	mov	r1, r5
    48ce:	4620      	mov	r0, r4
    48d0:	f7ff fc00 	bl	40d4 <send_frag>
	if (!send_buf(conn, buf)) {
    48d4:	b130      	cbz	r0, 48e4 <bt_conn_process_tx+0x80>
}
    48d6:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    48d8:	4629      	mov	r1, r5
    48da:	4620      	mov	r0, r4
    48dc:	f7ff ff8c 	bl	47f8 <create_frag>
	if (!frag) {
    48e0:	4601      	mov	r1, r0
    48e2:	b920      	cbnz	r0, 48ee <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
    48e4:	4628      	mov	r0, r5
}
    48e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    48ea:	f00e bde7 	b.w	134bc <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    48ee:	2301      	movs	r3, #1
    48f0:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    48f2:	4620      	mov	r0, r4
    48f4:	f7ff fbee 	bl	40d4 <send_frag>
    48f8:	2800      	cmp	r0, #0
    48fa:	d0f3      	beq.n	48e4 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
    48fc:	89aa      	ldrh	r2, [r5, #12]
    48fe:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    4902:	429a      	cmp	r2, r3
    4904:	d802      	bhi.n	490c <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
    4906:	2300      	movs	r3, #0
    4908:	2203      	movs	r2, #3
    490a:	e7df      	b.n	48cc <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    490c:	4629      	mov	r1, r5
    490e:	4620      	mov	r0, r4
    4910:	f7ff ff72 	bl	47f8 <create_frag>
		if (!frag) {
    4914:	4601      	mov	r1, r0
    4916:	2800      	cmp	r0, #0
    4918:	d0e4      	beq.n	48e4 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    491a:	2301      	movs	r3, #1
    491c:	461a      	mov	r2, r3
    491e:	e7e8      	b.n	48f2 <bt_conn_process_tx+0x8e>
    4920:	0001ca08 	.word	0x0001ca08
    4924:	0001c967 	.word	0x0001c967
    4928:	0001c92a 	.word	0x0001c92a
    492c:	20000000 	.word	0x20000000

00004930 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    4930:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    4932:	490b      	ldr	r1, [pc, #44]	; (4960 <bt_conn_init+0x30>)
    4934:	480b      	ldr	r0, [pc, #44]	; (4964 <bt_conn_init+0x34>)
    4936:	f015 ff62 	bl	1a7fe <k_queue_append>
    493a:	490b      	ldr	r1, [pc, #44]	; (4968 <bt_conn_init+0x38>)
    493c:	4809      	ldr	r0, [pc, #36]	; (4964 <bt_conn_init+0x34>)
    493e:	f015 ff5e 	bl	1a7fe <k_queue_append>
    4942:	490a      	ldr	r1, [pc, #40]	; (496c <bt_conn_init+0x3c>)
    4944:	4807      	ldr	r0, [pc, #28]	; (4964 <bt_conn_init+0x34>)
    4946:	f015 ff5a 	bl	1a7fe <k_queue_append>
	}

	bt_att_init();
    494a:	f014 fc4a 	bl	191e2 <bt_att_init>

	err = bt_smp_init();
    494e:	f015 f84b 	bl	199e8 <bt_smp_init>
	if (err) {
    4952:	4604      	mov	r4, r0
    4954:	b908      	cbnz	r0, 495a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    4956:	f013 ffe8 	bl	1892a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    495a:	4620      	mov	r0, r4
    495c:	bd10      	pop	{r4, pc}
    495e:	bf00      	nop
    4960:	2000141c 	.word	0x2000141c
    4964:	200008c0 	.word	0x200008c0
    4968:	2000142c 	.word	0x2000142c
    496c:	2000143c 	.word	0x2000143c

00004970 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4970:	4b04      	ldr	r3, [pc, #16]	; (4984 <l2cap_accept+0x14>)
    4972:	6818      	ldr	r0, [r3, #0]
    4974:	b918      	cbnz	r0, 497e <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    4976:	4a04      	ldr	r2, [pc, #16]	; (4988 <l2cap_accept+0x18>)
    4978:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    497a:	600b      	str	r3, [r1, #0]

		return 0;
    497c:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    497e:	f06f 000b 	mvn.w	r0, #11
}
    4982:	4770      	bx	lr
    4984:	20000b38 	.word	0x20000b38
    4988:	0001b598 	.word	0x0001b598

0000498c <bt_l2cap_connected>:
{
    498c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    4990:	4e29      	ldr	r6, [pc, #164]	; (4a38 <bt_l2cap_connected+0xac>)
    4992:	4f2a      	ldr	r7, [pc, #168]	; (4a3c <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    4994:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4a40 <bt_l2cap_connected+0xb4>
{
    4998:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    499a:	42be      	cmp	r6, r7
    499c:	d302      	bcc.n	49a4 <bt_l2cap_connected+0x18>
}
    499e:	b003      	add	sp, #12
    49a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    49a4:	6873      	ldr	r3, [r6, #4]
    49a6:	a901      	add	r1, sp, #4
    49a8:	4620      	mov	r0, r4
    49aa:	4798      	blx	r3
    49ac:	2800      	cmp	r0, #0
    49ae:	db3d      	blt.n	4a2c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    49b0:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    49b2:	8833      	ldrh	r3, [r6, #0]
    49b4:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    49b8:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    49bc:	4641      	mov	r1, r8
    49be:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    49c2:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    49c6:	f016 f811 	bl	1a9ec <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    49ca:	f3bf 8f5b 	dmb	ish
    49ce:	f105 0368 	add.w	r3, r5, #104	; 0x68
    49d2:	2200      	movs	r2, #0
    49d4:	e853 1f00 	ldrex	r1, [r3]
    49d8:	e843 2000 	strex	r0, r2, [r3]
    49dc:	2800      	cmp	r0, #0
    49de:	d1f9      	bne.n	49d4 <bt_l2cap_connected+0x48>
    49e0:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    49e4:	60aa      	str	r2, [r5, #8]
	return list->tail;
    49e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    49e8:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    49ec:	bb02      	cbnz	r2, 4a30 <bt_l2cap_connected+0xa4>
	list->head = node;
    49ee:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    49f2:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    49f4:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    49f6:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    49f8:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    49fc:	681b      	ldr	r3, [r3, #0]
    49fe:	b103      	cbz	r3, 4a02 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    4a00:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4a02:	9b01      	ldr	r3, [sp, #4]
    4a04:	f3bf 8f5b 	dmb	ish
    4a08:	3368      	adds	r3, #104	; 0x68
    4a0a:	e853 2f00 	ldrex	r2, [r3]
    4a0e:	f042 0201 	orr.w	r2, r2, #1
    4a12:	e843 2100 	strex	r1, r2, [r3]
    4a16:	2900      	cmp	r1, #0
    4a18:	d1f7      	bne.n	4a0a <bt_l2cap_connected+0x7e>
    4a1a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    4a1e:	9801      	ldr	r0, [sp, #4]
    4a20:	6843      	ldr	r3, [r0, #4]
    4a22:	699b      	ldr	r3, [r3, #24]
    4a24:	b113      	cbz	r3, 4a2c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    4a26:	f100 0168 	add.w	r1, r0, #104	; 0x68
    4a2a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    4a2c:	360c      	adds	r6, #12
    4a2e:	e7b4      	b.n	499a <bt_l2cap_connected+0xe>
	parent->next = child;
    4a30:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4a32:	6563      	str	r3, [r4, #84]	; 0x54
}
    4a34:	e7dd      	b.n	49f2 <bt_l2cap_connected+0x66>
    4a36:	bf00      	nop
    4a38:	0001b310 	.word	0x0001b310
    4a3c:	0001b334 	.word	0x0001b334
    4a40:	000187f3 	.word	0x000187f3

00004a44 <bt_l2cap_update_conn_param>:
{
    4a44:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4a46:	460d      	mov	r5, r1
	ident++;
    4a48:	4916      	ldr	r1, [pc, #88]	; (4aa4 <bt_l2cap_update_conn_param+0x60>)
    4a4a:	780b      	ldrb	r3, [r1, #0]
    4a4c:	3301      	adds	r3, #1
	if (!ident) {
    4a4e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    4a52:	bf08      	it	eq
    4a54:	2301      	moveq	r3, #1
    4a56:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4a58:	7809      	ldrb	r1, [r1, #0]
{
    4a5a:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    4a5c:	2208      	movs	r2, #8
    4a5e:	2012      	movs	r0, #18
    4a60:	f013 fe7e 	bl	18760 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    4a64:	4604      	mov	r4, r0
    4a66:	b1d0      	cbz	r0, 4a9e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    4a68:	2108      	movs	r1, #8
    4a6a:	4408      	add	r0, r1
    4a6c:	f015 f821 	bl	19ab2 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    4a70:	882b      	ldrh	r3, [r5, #0]
    4a72:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    4a74:	886b      	ldrh	r3, [r5, #2]
    4a76:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    4a78:	88ab      	ldrh	r3, [r5, #4]
    4a7a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    4a7c:	88eb      	ldrh	r3, [r5, #6]
    4a7e:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    4a80:	2300      	movs	r3, #0
    4a82:	9300      	str	r3, [sp, #0]
    4a84:	4622      	mov	r2, r4
    4a86:	2105      	movs	r1, #5
    4a88:	4630      	mov	r0, r6
    4a8a:	f013 fed3 	bl	18834 <bt_l2cap_send_cb>
	if (err) {
    4a8e:	4605      	mov	r5, r0
    4a90:	b110      	cbz	r0, 4a98 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    4a92:	4620      	mov	r0, r4
    4a94:	f00e fd12 	bl	134bc <net_buf_unref>
}
    4a98:	4628      	mov	r0, r5
    4a9a:	b002      	add	sp, #8
    4a9c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    4a9e:	f06f 050b 	mvn.w	r5, #11
    4aa2:	e7f9      	b.n	4a98 <bt_l2cap_update_conn_param+0x54>
    4aa4:	2000278d 	.word	0x2000278d

00004aa8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    4aa8:	4b02      	ldr	r3, [pc, #8]	; (4ab4 <att_cfm_sent+0xc>)
    4aaa:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    4aae:	f013 bf4f 	b.w	18950 <att_sent>
    4ab2:	bf00      	nop
    4ab4:	00018eb5 	.word	0x00018eb5

00004ab8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    4ab8:	4b02      	ldr	r3, [pc, #8]	; (4ac4 <att_rsp_sent+0xc>)
    4aba:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    4abe:	f013 bf47 	b.w	18950 <att_sent>
    4ac2:	bf00      	nop
    4ac4:	00018e99 	.word	0x00018e99

00004ac8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    4ac8:	4b02      	ldr	r3, [pc, #8]	; (4ad4 <att_req_sent+0xc>)
    4aca:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    4ace:	f013 bf3f 	b.w	18950 <att_sent>
    4ad2:	bf00      	nop
    4ad4:	00018c69 	.word	0x00018c69

00004ad8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    4ad8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    4ada:	3808      	subs	r0, #8
    4adc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    4ade:	a901      	add	r1, sp, #4
    4ae0:	4802      	ldr	r0, [pc, #8]	; (4aec <bt_att_released+0x14>)
    4ae2:	f015 fdd5 	bl	1a690 <k_mem_slab_free>
}
    4ae6:	b003      	add	sp, #12
    4ae8:	f85d fb04 	ldr.w	pc, [sp], #4
    4aec:	20000870 	.word	0x20000870

00004af0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    4af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    4af2:	2300      	movs	r3, #0
{
    4af4:	4607      	mov	r7, r0
    4af6:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    4af8:	481e      	ldr	r0, [pc, #120]	; (4b74 <bt_att_accept+0x84>)
    4afa:	2200      	movs	r2, #0
    4afc:	4669      	mov	r1, sp
    4afe:	f011 f987 	bl	15e10 <k_mem_slab_alloc>
    4b02:	4604      	mov	r4, r0
    4b04:	b120      	cbz	r0, 4b10 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    4b06:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    4b0a:	4620      	mov	r0, r4
    4b0c:	b003      	add	sp, #12
    4b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    4b10:	4601      	mov	r1, r0
    4b12:	222c      	movs	r2, #44	; 0x2c
    4b14:	9800      	ldr	r0, [sp, #0]
    4b16:	f012 fffc 	bl	17b12 <memset>
	att->conn = conn;
    4b1a:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    4b1c:	4816      	ldr	r0, [pc, #88]	; (4b78 <bt_att_accept+0x88>)
	list->tail = NULL;
    4b1e:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    4b20:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    4b24:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    4b28:	2200      	movs	r2, #0
    4b2a:	2300      	movs	r3, #0
    4b2c:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    4b2e:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    4b30:	f011 f96e 	bl	15e10 <k_mem_slab_alloc>
    4b34:	4604      	mov	r4, r0
    4b36:	2800      	cmp	r0, #0
    4b38:	d1e5      	bne.n	4b06 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    4b3a:	4601      	mov	r1, r0
    4b3c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    4b40:	9801      	ldr	r0, [sp, #4]
    4b42:	f012 ffe6 	bl	17b12 <memset>
	chan->chan.chan.ops = &ops;
    4b46:	9801      	ldr	r0, [sp, #4]
    4b48:	4b0c      	ldr	r3, [pc, #48]	; (4b7c <bt_att_accept+0x8c>)
    4b4a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    4b4c:	30f8      	adds	r0, #248	; 0xf8
    4b4e:	f015 fe4a 	bl	1a7e6 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4b52:	9b01      	ldr	r3, [sp, #4]
    4b54:	f3bf 8f5b 	dmb	ish
    4b58:	33f0      	adds	r3, #240	; 0xf0
    4b5a:	e853 2f00 	ldrex	r2, [r3]
    4b5e:	e843 4100 	strex	r1, r4, [r3]
    4b62:	2900      	cmp	r1, #0
    4b64:	d1f9      	bne.n	4b5a <bt_att_accept+0x6a>
    4b66:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    4b6a:	9b01      	ldr	r3, [sp, #4]
    4b6c:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    4b70:	6033      	str	r3, [r6, #0]
	return 0;
    4b72:	e7ca      	b.n	4b0a <bt_att_accept+0x1a>
    4b74:	20000854 	.word	0x20000854
    4b78:	20000870 	.word	0x20000870
    4b7c:	200001f0 	.word	0x200001f0

00004b80 <read_group_cb>:
{
    4b80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4b84:	4605      	mov	r5, r0
    4b86:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4b88:	f04f 0800 	mov.w	r8, #0
    4b8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4b90:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    4b92:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4b94:	f88d 8008 	strb.w	r8, [sp, #8]
    4b98:	a902      	add	r1, sp, #8
{
    4b9a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4b9c:	f8ad 300a 	strh.w	r3, [sp, #10]
    4ba0:	f013 f815 	bl	17bce <bt_uuid_cmp>
    4ba4:	b1a0      	cbz	r0, 4bd0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4ba6:	f642 0301 	movw	r3, #10241	; 0x2801
    4baa:	6828      	ldr	r0, [r5, #0]
    4bac:	f88d 800c 	strb.w	r8, [sp, #12]
    4bb0:	a903      	add	r1, sp, #12
    4bb2:	f8ad 300e 	strh.w	r3, [sp, #14]
    4bb6:	f013 f80a 	bl	17bce <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    4bba:	b148      	cbz	r0, 4bd0 <read_group_cb+0x50>
		if (data->group &&
    4bbc:	6923      	ldr	r3, [r4, #16]
    4bbe:	b11b      	cbz	r3, 4bc8 <read_group_cb+0x48>
    4bc0:	885a      	ldrh	r2, [r3, #2]
    4bc2:	42b2      	cmp	r2, r6
    4bc4:	d200      	bcs.n	4bc8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    4bc6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    4bc8:	2001      	movs	r0, #1
}
    4bca:	b004      	add	sp, #16
    4bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4bd0:	6861      	ldr	r1, [r4, #4]
    4bd2:	6828      	ldr	r0, [r5, #0]
    4bd4:	f012 fffb 	bl	17bce <bt_uuid_cmp>
    4bd8:	b110      	cbz	r0, 4be0 <read_group_cb+0x60>
		data->group = NULL;
    4bda:	2300      	movs	r3, #0
    4bdc:	6123      	str	r3, [r4, #16]
    4bde:	e7f3      	b.n	4bc8 <read_group_cb+0x48>
	if (data->rsp->len &&
    4be0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    4be2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    4be4:	781a      	ldrb	r2, [r3, #0]
    4be6:	b13a      	cbz	r2, 4bf8 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    4be8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    4bec:	8981      	ldrh	r1, [r0, #12]
    4bee:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    4bf0:	4293      	cmp	r3, r2
    4bf2:	da01      	bge.n	4bf8 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    4bf4:	2000      	movs	r0, #0
    4bf6:	e7e8      	b.n	4bca <read_group_cb+0x4a>
    4bf8:	2104      	movs	r1, #4
    4bfa:	3008      	adds	r0, #8
    4bfc:	f014 ff59 	bl	19ab2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    4c00:	4b09      	ldr	r3, [pc, #36]	; (4c28 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    4c02:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    4c04:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    4c06:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    4c08:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    4c0a:	4629      	mov	r1, r5
    4c0c:	9300      	str	r3, [sp, #0]
    4c0e:	9401      	str	r4, [sp, #4]
    4c10:	2300      	movs	r3, #0
    4c12:	4638      	mov	r0, r7
    4c14:	f014 f865 	bl	18ce2 <att_chan_read>
	if (read < 0) {
    4c18:	2800      	cmp	r0, #0
    4c1a:	dbeb      	blt.n	4bf4 <read_group_cb+0x74>
	if (!data->group) {
    4c1c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    4c1e:	3800      	subs	r0, #0
    4c20:	bf18      	it	ne
    4c22:	2001      	movne	r0, #1
    4c24:	e7d1      	b.n	4bca <read_group_cb+0x4a>
    4c26:	bf00      	nop
    4c28:	00018c1d 	.word	0x00018c1d

00004c2c <chan_send>:
{
    4c2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    4c30:	688b      	ldr	r3, [r1, #8]
    4c32:	781b      	ldrb	r3, [r3, #0]
    4c34:	2bd2      	cmp	r3, #210	; 0xd2
{
    4c36:	4606      	mov	r6, r0
    4c38:	460c      	mov	r4, r1
    4c3a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    4c3c:	d10c      	bne.n	4c58 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
    4c3e:	6803      	ldr	r3, [r0, #0]
    4c40:	6818      	ldr	r0, [r3, #0]
    4c42:	f014 fece 	bl	199e2 <bt_smp_sign>
		if (err) {
    4c46:	4605      	mov	r5, r0
    4c48:	b130      	cbz	r0, 4c58 <chan_send+0x2c>
			net_buf_unref(buf);
    4c4a:	4620      	mov	r0, r4
    4c4c:	f00e fc36 	bl	134bc <net_buf_unref>
}
    4c50:	4628      	mov	r0, r5
    4c52:	b003      	add	sp, #12
    4c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    4c58:	f104 0008 	add.w	r0, r4, #8
    4c5c:	f014 ff60 	bl	19b20 <net_buf_simple_headroom>
	state->len = buf->len;
    4c60:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    4c64:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    4c66:	b957      	cbnz	r7, 4c7e <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
    4c68:	68a3      	ldr	r3, [r4, #8]
    4c6a:	7818      	ldrb	r0, [r3, #0]
    4c6c:	f013 fe88 	bl	18980 <att_op_get_type>
    4c70:	3801      	subs	r0, #1
    4c72:	b2c0      	uxtb	r0, r0
    4c74:	2804      	cmp	r0, #4
    4c76:	bf9c      	itt	ls
    4c78:	4b13      	ldrls	r3, [pc, #76]	; (4cc8 <chan_send+0x9c>)
    4c7a:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    4c7e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    4c80:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    4c84:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    4c86:	4b11      	ldr	r3, [pc, #68]	; (4ccc <chan_send+0xa0>)
    4c88:	429f      	cmp	r7, r3
    4c8a:	d018      	beq.n	4cbe <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
    4c8c:	4b10      	ldr	r3, [pc, #64]	; (4cd0 <chan_send+0xa4>)
    4c8e:	429f      	cmp	r7, r3
    4c90:	d017      	beq.n	4cc2 <chan_send+0x96>
		return att_sent;
    4c92:	4910      	ldr	r1, [pc, #64]	; (4cd4 <chan_send+0xa8>)
    4c94:	4b10      	ldr	r3, [pc, #64]	; (4cd8 <chan_send+0xac>)
    4c96:	4a11      	ldr	r2, [pc, #68]	; (4cdc <chan_send+0xb0>)
    4c98:	428f      	cmp	r7, r1
    4c9a:	bf18      	it	ne
    4c9c:	4613      	movne	r3, r2
			       &chan->chan.chan);
    4c9e:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    4ca0:	9600      	str	r6, [sp, #0]
    4ca2:	4622      	mov	r2, r4
    4ca4:	2104      	movs	r1, #4
    4ca6:	f013 fdc5 	bl	18834 <bt_l2cap_send_cb>
	if (err) {
    4caa:	4605      	mov	r5, r0
    4cac:	2800      	cmp	r0, #0
    4cae:	d0cf      	beq.n	4c50 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
    4cb0:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    4cb2:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    4cb6:	fa10 f088 	uxtah	r0, r0, r8
    4cba:	60a0      	str	r0, [r4, #8]
}
    4cbc:	e7c8      	b.n	4c50 <chan_send+0x24>
		return att_rsp_sent;
    4cbe:	4b08      	ldr	r3, [pc, #32]	; (4ce0 <chan_send+0xb4>)
    4cc0:	e7ed      	b.n	4c9e <chan_send+0x72>
		return att_cfm_sent;
    4cc2:	4b08      	ldr	r3, [pc, #32]	; (4ce4 <chan_send+0xb8>)
    4cc4:	e7eb      	b.n	4c9e <chan_send+0x72>
    4cc6:	bf00      	nop
    4cc8:	0001b5bc 	.word	0x0001b5bc
    4ccc:	00018e99 	.word	0x00018e99
    4cd0:	00018eb5 	.word	0x00018eb5
    4cd4:	00018c69 	.word	0x00018c69
    4cd8:	00004ac9 	.word	0x00004ac9
    4cdc:	00018951 	.word	0x00018951
    4ce0:	00004ab9 	.word	0x00004ab9
    4ce4:	00004aa9 	.word	0x00004aa9

00004ce8 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    4ce8:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    4cea:	4a07      	ldr	r2, [pc, #28]	; (4d08 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    4cec:	4604      	mov	r4, r0
    4cee:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    4cf0:	f7ff ff9c 	bl	4c2c <chan_send>
	if (err) {
    4cf4:	b130      	cbz	r0, 4d04 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    4cf6:	4629      	mov	r1, r5
    4cf8:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
    4cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    4d00:	f014 be98 	b.w	19a34 <net_buf_put>
}
    4d04:	bd38      	pop	{r3, r4, r5, pc}
    4d06:	bf00      	nop
    4d08:	00018e99 	.word	0x00018e99

00004d0c <read_type_cb>:
{
    4d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    4d10:	f8d2 8000 	ldr.w	r8, [r2]
{
    4d14:	4606      	mov	r6, r0
    4d16:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4d18:	6800      	ldr	r0, [r0, #0]
    4d1a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    4d1c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    4d20:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4d22:	f012 ff54 	bl	17bce <bt_uuid_cmp>
    4d26:	4607      	mov	r7, r0
    4d28:	2800      	cmp	r0, #0
    4d2a:	d13e      	bne.n	4daa <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    4d2c:	4628      	mov	r0, r5
    4d2e:	2215      	movs	r2, #21
    4d30:	4631      	mov	r1, r6
    4d32:	f014 fda7 	bl	19884 <bt_gatt_check_perm>
    4d36:	4605      	mov	r5, r0
    4d38:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    4d3a:	b148      	cbz	r0, 4d50 <read_type_cb+0x44>
		if (data->rsp->len) {
    4d3c:	68e3      	ldr	r3, [r4, #12]
    4d3e:	781b      	ldrb	r3, [r3, #0]
    4d40:	b923      	cbnz	r3, 4d4c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    4d42:	2500      	movs	r5, #0
}
    4d44:	4628      	mov	r0, r5
    4d46:	b003      	add	sp, #12
    4d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    4d4c:	7527      	strb	r7, [r4, #20]
    4d4e:	e7f8      	b.n	4d42 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    4d50:	68a0      	ldr	r0, [r4, #8]
    4d52:	f014 fe80 	bl	19a56 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    4d56:	2102      	movs	r1, #2
    4d58:	3008      	adds	r0, #8
    4d5a:	f014 feaa 	bl	19ab2 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    4d5e:	4b14      	ldr	r3, [pc, #80]	; (4db0 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    4d60:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    4d62:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    4d64:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    4d68:	4631      	mov	r1, r6
    4d6a:	9300      	str	r3, [sp, #0]
    4d6c:	9401      	str	r4, [sp, #4]
    4d6e:	462b      	mov	r3, r5
    4d70:	4640      	mov	r0, r8
    4d72:	f013 ffb6 	bl	18ce2 <att_chan_read>
	if (read < 0) {
    4d76:	2800      	cmp	r0, #0
    4d78:	da07      	bge.n	4d8a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    4d7a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    4d7e:	bf26      	itte	cs
    4d80:	4240      	negcs	r0, r0
    4d82:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    4d84:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    4d86:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    4d88:	e7dc      	b.n	4d44 <read_type_cb+0x38>
	if (!data->item) {
    4d8a:	6923      	ldr	r3, [r4, #16]
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d0d8      	beq.n	4d42 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    4d90:	68a0      	ldr	r0, [r4, #8]
    4d92:	f013 fdd5 	bl	18940 <net_buf_frags_len>
    4d96:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    4d9a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    4d9c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    4d9e:	7818      	ldrb	r0, [r3, #0]
    4da0:	4285      	cmp	r5, r0
    4da2:	bf94      	ite	ls
    4da4:	2500      	movls	r5, #0
    4da6:	2501      	movhi	r5, #1
    4da8:	e7cc      	b.n	4d44 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    4daa:	2501      	movs	r5, #1
    4dac:	e7ca      	b.n	4d44 <read_type_cb+0x38>
    4dae:	bf00      	nop
    4db0:	0001895d 	.word	0x0001895d

00004db4 <bt_att_connected>:
{
    4db4:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4db6:	4606      	mov	r6, r0
{
    4db8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4dba:	2104      	movs	r1, #4
    4dbc:	f856 0908 	ldr.w	r0, [r6], #-8
    4dc0:	f013 fd82 	bl	188c8 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    4dc4:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    4dc8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4dca:	b91b      	cbnz	r3, 4dd4 <bt_att_connected+0x20>
    4dcc:	f105 000c 	add.w	r0, r5, #12
    4dd0:	f015 fd09 	bl	1a7e6 <z_impl_k_queue_init>
	parent->next = child;
    4dd4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4dd6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    4dda:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    4ddc:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    4de0:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    4de2:	b902      	cbnz	r2, 4de6 <bt_att_connected+0x32>
	list->tail = node;
    4de4:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4de6:	f3bf 8f5b 	dmb	ish
    4dea:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    4dee:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    4df2:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4df4:	bf58      	it	pl
    4df6:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    4df8:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4dfa:	bf5c      	itt	pl
    4dfc:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    4e00:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    4e04:	f013 fed4 	bl	18bb0 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    4e08:	f504 7084 	add.w	r0, r4, #264	; 0x108
    4e0c:	4902      	ldr	r1, [pc, #8]	; (4e18 <bt_att_connected+0x64>)
}
    4e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    4e12:	f015 bdeb 	b.w	1a9ec <k_work_init_delayable>
    4e16:	bf00      	nop
    4e18:	000191f1 	.word	0x000191f1

00004e1c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    4e1c:	898b      	ldrh	r3, [r1, #12]
{
    4e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e22:	4604      	mov	r4, r0
    4e24:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    4e26:	2b00      	cmp	r3, #0
    4e28:	d060      	beq.n	4eec <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
    4e2a:	2101      	movs	r1, #1
    4e2c:	f105 0008 	add.w	r0, r5, #8
    4e30:	f014 fe66 	bl	19b00 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    4e34:	f854 3c08 	ldr.w	r3, [r4, #-8]
    4e38:	4607      	mov	r7, r0
    4e3a:	2b00      	cmp	r3, #0
    4e3c:	d056      	beq.n	4eec <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
    4e3e:	7801      	ldrb	r1, [r0, #0]
    4e40:	4a2e      	ldr	r2, [pc, #184]	; (4efc <bt_att_recv+0xe0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    4e42:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4e46:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    4e48:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    4e4c:	4288      	cmp	r0, r1
    4e4e:	d11b      	bne.n	4e88 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
    4e50:	00d9      	lsls	r1, r3, #3
    4e52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4e56:	f893 8002 	ldrb.w	r8, [r3, #2]
    4e5a:	f1b8 0f01 	cmp.w	r8, #1
    4e5e:	d023      	beq.n	4ea8 <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
    4e60:	f1b8 0f05 	cmp.w	r8, #5
    4e64:	d131      	bne.n	4eca <bt_att_recv+0xae>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4e66:	f3bf 8f5b 	dmb	ish
    4e6a:	34e8      	adds	r4, #232	; 0xe8
    4e6c:	e854 3f00 	ldrex	r3, [r4]
    4e70:	f043 0002 	orr.w	r0, r3, #2
    4e74:	e844 0c00 	strex	ip, r0, [r4]
    4e78:	f1bc 0f00 	cmp.w	ip, #0
    4e7c:	d1f6      	bne.n	4e6c <bt_att_recv+0x50>
    4e7e:	f3bf 8f5b 	dmb	ish
    4e82:	f013 0f02 	tst.w	r3, #2
    4e86:	e01f      	b.n	4ec8 <bt_att_recv+0xac>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4e88:	3301      	adds	r3, #1
    4e8a:	2b0d      	cmp	r3, #13
    4e8c:	d1dc      	bne.n	4e48 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    4e8e:	4608      	mov	r0, r1
    4e90:	f013 fd76 	bl	18980 <att_op_get_type>
    4e94:	b350      	cbz	r0, 4eec <bt_att_recv+0xd0>
    4e96:	2805      	cmp	r0, #5
    4e98:	d028      	beq.n	4eec <bt_att_recv+0xd0>
	if (!req) {
    4e9a:	b339      	cbz	r1, 4eec <bt_att_recv+0xd0>
    4e9c:	2306      	movs	r3, #6
    4e9e:	2200      	movs	r2, #0
    4ea0:	4630      	mov	r0, r6
    4ea2:	f014 f8ed 	bl	19080 <send_err_rsp.part.0>
    4ea6:	e021      	b.n	4eec <bt_att_recv+0xd0>
    4ea8:	34e8      	adds	r4, #232	; 0xe8
    4eaa:	f3bf 8f5b 	dmb	ish
    4eae:	e854 3f00 	ldrex	r3, [r4]
    4eb2:	f043 0001 	orr.w	r0, r3, #1
    4eb6:	e844 0c00 	strex	ip, r0, [r4]
    4eba:	f1bc 0f00 	cmp.w	ip, #0
    4ebe:	d1f6      	bne.n	4eae <bt_att_recv+0x92>
    4ec0:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    4ec4:	f013 0f01 	tst.w	r3, #1
    4ec8:	d110      	bne.n	4eec <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
    4eca:	440a      	add	r2, r1
    4ecc:	89a9      	ldrh	r1, [r5, #12]
    4ece:	7853      	ldrb	r3, [r2, #1]
    4ed0:	4299      	cmp	r1, r3
    4ed2:	d30e      	bcc.n	4ef2 <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
    4ed4:	6853      	ldr	r3, [r2, #4]
    4ed6:	4629      	mov	r1, r5
    4ed8:	4630      	mov	r0, r6
    4eda:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    4edc:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    4ee0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    4ee2:	d103      	bne.n	4eec <bt_att_recv+0xd0>
    4ee4:	b110      	cbz	r0, 4eec <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
    4ee6:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    4ee8:	2900      	cmp	r1, #0
    4eea:	d1d8      	bne.n	4e9e <bt_att_recv+0x82>
}
    4eec:	2000      	movs	r0, #0
    4eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
    4ef2:	f1b8 0f01 	cmp.w	r8, #1
    4ef6:	d1f9      	bne.n	4eec <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
    4ef8:	2304      	movs	r3, #4
    4efa:	e7f4      	b.n	4ee6 <bt_att_recv+0xca>
    4efc:	0001b5d0 	.word	0x0001b5d0

00004f00 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    4f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4f04:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    4f06:	6803      	ldr	r3, [r0, #0]
    4f08:	460e      	mov	r6, r1
    4f0a:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    4f0c:	b087      	sub	sp, #28
    4f0e:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    4f10:	bf18      	it	ne
    4f12:	2101      	movne	r1, #1
    4f14:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    4f16:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    4f18:	f014 fd0b 	bl	19932 <bt_gatt_change_aware>
    4f1c:	2800      	cmp	r0, #0
    4f1e:	d04a      	beq.n	4fb6 <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
    4f20:	2f00      	cmp	r7, #0
    4f22:	d04a      	beq.n	4fba <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
    4f24:	2218      	movs	r2, #24
    4f26:	2100      	movs	r1, #0
    4f28:	4668      	mov	r0, sp
    4f2a:	f012 fdf2 	bl	17b12 <memset>
	if (rsp) {
    4f2e:	f1b8 0f00 	cmp.w	r8, #0
    4f32:	d122      	bne.n	4f7a <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    4f34:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    4f36:	4a22      	ldr	r2, [pc, #136]	; (4fc0 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    4f38:	681b      	ldr	r3, [r3, #0]
    4f3a:	9300      	str	r3, [sp, #0]
	data.value = value;
    4f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4f3e:	9303      	str	r3, [sp, #12]
	data.len = len;
    4f40:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    4f44:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    4f48:	2301      	movs	r3, #1
    4f4a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    4f4e:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    4f52:	466b      	mov	r3, sp
    4f54:	4639      	mov	r1, r7
    4f56:	4638      	mov	r0, r7
	data.req = req;
    4f58:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    4f5c:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    4f60:	f013 fd3b 	bl	189da <bt_gatt_foreach_attr>
	if (data.err) {
    4f64:	f89d 4014 	ldrb.w	r4, [sp, #20]
    4f68:	b1f4      	cbz	r4, 4fa8 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    4f6a:	f1b8 0f00 	cmp.w	r8, #0
    4f6e:	d10e      	bne.n	4f8e <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    4f70:	2400      	movs	r4, #0
}
    4f72:	4620      	mov	r0, r4
    4f74:	b007      	add	sp, #28
    4f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    4f7a:	2200      	movs	r2, #0
    4f7c:	4641      	mov	r1, r8
    4f7e:	4628      	mov	r0, r5
    4f80:	f014 f859 	bl	19036 <bt_att_chan_create_pdu>
    4f84:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    4f86:	2800      	cmp	r0, #0
    4f88:	d1d4      	bne.n	4f34 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    4f8a:	240e      	movs	r4, #14
    4f8c:	e7f1      	b.n	4f72 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    4f8e:	9801      	ldr	r0, [sp, #4]
    4f90:	f00e fa94 	bl	134bc <net_buf_unref>
	if (!req) {
    4f94:	2e00      	cmp	r6, #0
    4f96:	d0eb      	beq.n	4f70 <att_write_rsp.constprop.0+0x70>
    4f98:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4f9c:	463a      	mov	r2, r7
    4f9e:	4631      	mov	r1, r6
    4fa0:	4628      	mov	r0, r5
    4fa2:	f014 f86d 	bl	19080 <send_err_rsp.part.0>
    4fa6:	e7e3      	b.n	4f70 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    4fa8:	9901      	ldr	r1, [sp, #4]
    4faa:	2900      	cmp	r1, #0
    4fac:	d0e0      	beq.n	4f70 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    4fae:	4628      	mov	r0, r5
    4fb0:	f7ff fe9a 	bl	4ce8 <bt_att_chan_send_rsp.constprop.0>
    4fb4:	e7dd      	b.n	4f72 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    4fb6:	2412      	movs	r4, #18
    4fb8:	e7db      	b.n	4f72 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    4fba:	2401      	movs	r4, #1
    4fbc:	e7d9      	b.n	4f72 <att_write_rsp.constprop.0+0x72>
    4fbe:	bf00      	nop
    4fc0:	00018c7f 	.word	0x00018c7f

00004fc4 <att_read_group_req>:
{
    4fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    4fc8:	898c      	ldrh	r4, [r1, #12]
    4fca:	3c04      	subs	r4, #4
    4fcc:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    4fce:	2c02      	cmp	r4, #2
{
    4fd0:	4605      	mov	r5, r0
    4fd2:	b08c      	sub	sp, #48	; 0x30
    4fd4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    4fd6:	d001      	beq.n	4fdc <att_read_group_req+0x18>
    4fd8:	2c10      	cmp	r4, #16
    4fda:	d16e      	bne.n	50ba <att_read_group_req+0xf6>
    4fdc:	2104      	movs	r1, #4
    4fde:	3008      	adds	r0, #8
    4fe0:	f014 fd8e 	bl	19b00 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    4fe4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    4fe8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    4fea:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    4fec:	1d01      	adds	r1, r0, #4
    4fee:	4622      	mov	r2, r4
    4ff0:	4640      	mov	r0, r8
    4ff2:	f012 fe1a 	bl	17c2a <bt_uuid_create>
    4ff6:	2800      	cmp	r0, #0
    4ff8:	d061      	beq.n	50be <att_read_group_req+0xfa>
	if (!start || !end) {
    4ffa:	2e00      	cmp	r6, #0
    4ffc:	d03a      	beq.n	5074 <att_read_group_req+0xb0>
    4ffe:	2400      	movs	r4, #0
    5000:	2f00      	cmp	r7, #0
    5002:	d036      	beq.n	5072 <att_read_group_req+0xae>
	if (start > end) {
    5004:	42be      	cmp	r6, r7
    5006:	d835      	bhi.n	5074 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5008:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    500c:	a901      	add	r1, sp, #4
    500e:	4640      	mov	r0, r8
    5010:	f88d 4004 	strb.w	r4, [sp, #4]
    5014:	f8ad 3006 	strh.w	r3, [sp, #6]
    5018:	f012 fdd9 	bl	17bce <bt_uuid_cmp>
    501c:	2800      	cmp	r0, #0
    501e:	d134      	bne.n	508a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    5020:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    5022:	2214      	movs	r2, #20
    5024:	2100      	movs	r1, #0
    5026:	a807      	add	r0, sp, #28
    5028:	f012 fd73 	bl	17b12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    502c:	2201      	movs	r2, #1
    502e:	2111      	movs	r1, #17
    5030:	4620      	mov	r0, r4
    5032:	f014 f868 	bl	19106 <bt_att_create_pdu>
    5036:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    5038:	2800      	cmp	r0, #0
    503a:	d040      	beq.n	50be <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    503c:	2101      	movs	r1, #1
    503e:	3008      	adds	r0, #8
	data.uuid = uuid;
    5040:	e9cd 5807 	strd	r5, r8, [sp, #28]
    5044:	f014 fd35 	bl	19ab2 <net_buf_simple_add>
	data.rsp->len = 0U;
    5048:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    504c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    504e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    5050:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5054:	4a1b      	ldr	r2, [pc, #108]	; (50c4 <att_read_group_req+0x100>)
	data.group = NULL;
    5056:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    505a:	4639      	mov	r1, r7
    505c:	4630      	mov	r0, r6
    505e:	f013 fcbc 	bl	189da <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    5062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5064:	781c      	ldrb	r4, [r3, #0]
    5066:	bb1c      	cbnz	r4, 50b0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    5068:	9809      	ldr	r0, [sp, #36]	; 0x24
    506a:	f00e fa27 	bl	134bc <net_buf_unref>
	if (!req) {
    506e:	230a      	movs	r3, #10
    5070:	e018      	b.n	50a4 <att_read_group_req+0xe0>
			*err = 0U;
    5072:	463e      	mov	r6, r7
	if (!req) {
    5074:	2301      	movs	r3, #1
    5076:	4632      	mov	r2, r6
    5078:	2110      	movs	r1, #16
    507a:	4628      	mov	r0, r5
    507c:	f014 f800 	bl	19080 <send_err_rsp.part.0>
		return 0;
    5080:	2400      	movs	r4, #0
}
    5082:	4620      	mov	r0, r4
    5084:	b00c      	add	sp, #48	; 0x30
    5086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    508a:	f642 0301 	movw	r3, #10241	; 0x2801
    508e:	a907      	add	r1, sp, #28
    5090:	4640      	mov	r0, r8
    5092:	f88d 401c 	strb.w	r4, [sp, #28]
    5096:	f8ad 301e 	strh.w	r3, [sp, #30]
    509a:	f012 fd98 	bl	17bce <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    509e:	2800      	cmp	r0, #0
    50a0:	d0be      	beq.n	5020 <att_read_group_req+0x5c>
	if (!req) {
    50a2:	2310      	movs	r3, #16
    50a4:	4632      	mov	r2, r6
    50a6:	2110      	movs	r1, #16
    50a8:	4628      	mov	r0, r5
    50aa:	f013 ffe9 	bl	19080 <send_err_rsp.part.0>
		return 0;
    50ae:	e7e8      	b.n	5082 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    50b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    50b2:	4628      	mov	r0, r5
    50b4:	f7ff fe18 	bl	4ce8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    50b8:	e7e2      	b.n	5080 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    50ba:	2404      	movs	r4, #4
    50bc:	e7e1      	b.n	5082 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    50be:	240e      	movs	r4, #14
    50c0:	e7df      	b.n	5082 <att_read_group_req+0xbe>
    50c2:	bf00      	nop
    50c4:	00004b81 	.word	0x00004b81

000050c8 <att_read_mult_req>:
{
    50c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    50cc:	6886      	ldr	r6, [r0, #8]
{
    50ce:	b085      	sub	sp, #20
    50d0:	4604      	mov	r4, r0
    50d2:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    50d4:	4630      	mov	r0, r6
    50d6:	2101      	movs	r1, #1
    50d8:	f014 fc2b 	bl	19932 <bt_gatt_change_aware>
    50dc:	b3b8      	cbz	r0, 514e <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
    50de:	2210      	movs	r2, #16
    50e0:	2100      	movs	r1, #0
    50e2:	4668      	mov	r0, sp
    50e4:	f012 fd15 	bl	17b12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    50e8:	2200      	movs	r2, #0
    50ea:	210f      	movs	r1, #15
    50ec:	4630      	mov	r0, r6
    50ee:	f014 f80a 	bl	19106 <bt_att_create_pdu>
    50f2:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    50f4:	b368      	cbz	r0, 5152 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    50f6:	f8df 9060 	ldr.w	r9, [pc, #96]	; 5158 <att_read_mult_req+0x90>
	data.chan = chan;
    50fa:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    50fc:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5100:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    5104:	89ab      	ldrh	r3, [r5, #12]
    5106:	2b01      	cmp	r3, #1
    5108:	d804      	bhi.n	5114 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    510a:	9902      	ldr	r1, [sp, #8]
    510c:	4620      	mov	r0, r4
    510e:	f7ff fdeb 	bl	4ce8 <bt_att_chan_send_rsp.constprop.0>
    5112:	e018      	b.n	5146 <att_read_mult_req+0x7e>
    5114:	4638      	mov	r0, r7
    5116:	f014 fcfb 	bl	19b10 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    511a:	466b      	mov	r3, sp
    511c:	464a      	mov	r2, r9
    511e:	4601      	mov	r1, r0
    5120:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5122:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5126:	f013 fc58 	bl	189da <bt_gatt_foreach_attr>
		if (data.err) {
    512a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    512e:	2b00      	cmp	r3, #0
    5130:	d0e8      	beq.n	5104 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
    5132:	9802      	ldr	r0, [sp, #8]
    5134:	f00e f9c2 	bl	134bc <net_buf_unref>
	if (!req) {
    5138:	f89d 300c 	ldrb.w	r3, [sp, #12]
    513c:	4632      	mov	r2, r6
    513e:	210e      	movs	r1, #14
    5140:	4620      	mov	r0, r4
    5142:	f013 ff9d 	bl	19080 <send_err_rsp.part.0>
	return 0;
    5146:	2000      	movs	r0, #0
}
    5148:	b005      	add	sp, #20
    514a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    514e:	2012      	movs	r0, #18
    5150:	e7fa      	b.n	5148 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
    5152:	200e      	movs	r0, #14
    5154:	e7f8      	b.n	5148 <att_read_mult_req+0x80>
    5156:	bf00      	nop
    5158:	00018ed1 	.word	0x00018ed1

0000515c <att_read_rsp>:
{
    515c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    5160:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    5164:	4605      	mov	r5, r0
    5166:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    5168:	4640      	mov	r0, r8
    516a:	2101      	movs	r1, #1
{
    516c:	4614      	mov	r4, r2
    516e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    5170:	f014 fbdf 	bl	19932 <bt_gatt_change_aware>
    5174:	b388      	cbz	r0, 51da <att_read_rsp+0x7e>
	if (!handle) {
    5176:	b396      	cbz	r6, 51de <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    5178:	2210      	movs	r2, #16
    517a:	2100      	movs	r1, #0
    517c:	4668      	mov	r0, sp
    517e:	f012 fcc8 	bl	17b12 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    5182:	2200      	movs	r2, #0
    5184:	4621      	mov	r1, r4
    5186:	4640      	mov	r0, r8
    5188:	f013 ffbd 	bl	19106 <bt_att_create_pdu>
    518c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    518e:	b340      	cbz	r0, 51e2 <att_read_rsp+0x86>
	data.offset = offset;
    5190:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    5194:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5198:	2301      	movs	r3, #1
    519a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    519e:	4a12      	ldr	r2, [pc, #72]	; (51e8 <att_read_rsp+0x8c>)
	data.chan = chan;
    51a0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    51a2:	466b      	mov	r3, sp
    51a4:	4631      	mov	r1, r6
    51a6:	4630      	mov	r0, r6
    51a8:	f013 fc17 	bl	189da <bt_gatt_foreach_attr>
	if (data.err) {
    51ac:	f89d 400c 	ldrb.w	r4, [sp, #12]
    51b0:	b174      	cbz	r4, 51d0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    51b2:	9802      	ldr	r0, [sp, #8]
    51b4:	f00e f982 	bl	134bc <net_buf_unref>
	if (!req) {
    51b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    51bc:	4632      	mov	r2, r6
    51be:	4639      	mov	r1, r7
    51c0:	4628      	mov	r0, r5
    51c2:	f013 ff5d 	bl	19080 <send_err_rsp.part.0>
		return 0;
    51c6:	2400      	movs	r4, #0
}
    51c8:	4620      	mov	r0, r4
    51ca:	b004      	add	sp, #16
    51cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    51d0:	9902      	ldr	r1, [sp, #8]
    51d2:	4628      	mov	r0, r5
    51d4:	f7ff fd88 	bl	4ce8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    51d8:	e7f6      	b.n	51c8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    51da:	2412      	movs	r4, #18
    51dc:	e7f4      	b.n	51c8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    51de:	2401      	movs	r4, #1
    51e0:	e7f2      	b.n	51c8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    51e2:	240e      	movs	r4, #14
    51e4:	e7f0      	b.n	51c8 <att_read_rsp+0x6c>
    51e6:	bf00      	nop
    51e8:	00018ed1 	.word	0x00018ed1

000051ec <att_read_type_req>:
{
    51ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    51f0:	898c      	ldrh	r4, [r1, #12]
    51f2:	3c04      	subs	r4, #4
    51f4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    51f6:	2c02      	cmp	r4, #2
{
    51f8:	4605      	mov	r5, r0
    51fa:	b08c      	sub	sp, #48	; 0x30
    51fc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    51fe:	d001      	beq.n	5204 <att_read_type_req+0x18>
    5200:	2c10      	cmp	r4, #16
    5202:	d14f      	bne.n	52a4 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    5204:	2104      	movs	r1, #4
    5206:	3008      	adds	r0, #8
    5208:	f014 fc7a 	bl	19b00 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    520c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    5210:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5212:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    5214:	1d01      	adds	r1, r0, #4
    5216:	4622      	mov	r2, r4
    5218:	4640      	mov	r0, r8
    521a:	f012 fd06 	bl	17c2a <bt_uuid_create>
    521e:	b188      	cbz	r0, 5244 <att_read_type_req+0x58>
	if (!start || !end) {
    5220:	b19e      	cbz	r6, 524a <att_read_type_req+0x5e>
    5222:	b18f      	cbz	r7, 5248 <att_read_type_req+0x5c>
	if (start > end) {
    5224:	42b7      	cmp	r7, r6
    5226:	d310      	bcc.n	524a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    5228:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    522a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    522c:	2100      	movs	r1, #0
    522e:	eb0d 0002 	add.w	r0, sp, r2
    5232:	f012 fc6e 	bl	17b12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    5236:	2201      	movs	r2, #1
    5238:	2109      	movs	r1, #9
    523a:	4620      	mov	r0, r4
    523c:	f013 ff63 	bl	19106 <bt_att_create_pdu>
    5240:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    5242:	b968      	cbnz	r0, 5260 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    5244:	240e      	movs	r4, #14
    5246:	e007      	b.n	5258 <att_read_type_req+0x6c>
			*err = 0U;
    5248:	463e      	mov	r6, r7
	if (!req) {
    524a:	2301      	movs	r3, #1
    524c:	4632      	mov	r2, r6
    524e:	2108      	movs	r1, #8
    5250:	4628      	mov	r0, r5
    5252:	f013 ff15 	bl	19080 <send_err_rsp.part.0>
		return 0;
    5256:	2400      	movs	r4, #0
}
    5258:	4620      	mov	r0, r4
    525a:	b00c      	add	sp, #48	; 0x30
    525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    5260:	2101      	movs	r1, #1
    5262:	3008      	adds	r0, #8
	data.uuid = uuid;
    5264:	e9cd 5806 	strd	r5, r8, [sp, #24]
    5268:	f014 fc23 	bl	19ab2 <net_buf_simple_add>
	data.rsp->len = 0U;
    526c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5270:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5272:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5274:	4a0c      	ldr	r2, [pc, #48]	; (52a8 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    5276:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    527a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    527c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    5280:	4630      	mov	r0, r6
    5282:	ab06      	add	r3, sp, #24
    5284:	f013 fba9 	bl	189da <bt_gatt_foreach_attr>
	if (data.err) {
    5288:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    528c:	b12c      	cbz	r4, 529a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    528e:	9808      	ldr	r0, [sp, #32]
    5290:	f00e f914 	bl	134bc <net_buf_unref>
	if (!req) {
    5294:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    5298:	e7d8      	b.n	524c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    529a:	9908      	ldr	r1, [sp, #32]
    529c:	4628      	mov	r0, r5
    529e:	f7ff fd23 	bl	4ce8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    52a2:	e7d9      	b.n	5258 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    52a4:	2404      	movs	r4, #4
    52a6:	e7d7      	b.n	5258 <att_read_type_req+0x6c>
    52a8:	00004d0d 	.word	0x00004d0d

000052ac <att_find_type_req>:
{
    52ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52b0:	4688      	mov	r8, r1
    52b2:	b086      	sub	sp, #24
    52b4:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    52b6:	2106      	movs	r1, #6
    52b8:	f108 0008 	add.w	r0, r8, #8
    52bc:	f014 fc20 	bl	19b00 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    52c0:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    52c2:	b317      	cbz	r7, 530a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    52c4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    52c8:	f1b9 0f00 	cmp.w	r9, #0
    52cc:	d01c      	beq.n	5308 <att_find_type_req+0x5c>
	if (start > end) {
    52ce:	454f      	cmp	r7, r9
    52d0:	d81b      	bhi.n	530a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    52d2:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    52d4:	f8ad 3002 	strh.w	r3, [sp, #2]
    52d8:	2400      	movs	r4, #0
    52da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    52de:	a901      	add	r1, sp, #4
    52e0:	4668      	mov	r0, sp
	value = buf->data;
    52e2:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    52e6:	f88d 4000 	strb.w	r4, [sp]
    52ea:	f88d 4004 	strb.w	r4, [sp, #4]
    52ee:	f8ad 3006 	strh.w	r3, [sp, #6]
    52f2:	f012 fc6c 	bl	17bce <bt_uuid_cmp>
    52f6:	4606      	mov	r6, r0
    52f8:	b190      	cbz	r0, 5320 <att_find_type_req+0x74>
	if (!req) {
    52fa:	230a      	movs	r3, #10
    52fc:	463a      	mov	r2, r7
    52fe:	2106      	movs	r1, #6
    5300:	4628      	mov	r0, r5
    5302:	f013 febd 	bl	19080 <send_err_rsp.part.0>
		return 0;
    5306:	e007      	b.n	5318 <att_find_type_req+0x6c>
			*err = 0U;
    5308:	464f      	mov	r7, r9
	if (!req) {
    530a:	2301      	movs	r3, #1
    530c:	463a      	mov	r2, r7
    530e:	2106      	movs	r1, #6
    5310:	4628      	mov	r0, r5
    5312:	f013 feb5 	bl	19080 <send_err_rsp.part.0>
		return 0;
    5316:	2400      	movs	r4, #0
}
    5318:	4620      	mov	r0, r4
    531a:	b006      	add	sp, #24
    531c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    5320:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    5324:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    5328:	4601      	mov	r1, r0
    532a:	2214      	movs	r2, #20
    532c:	a801      	add	r0, sp, #4
    532e:	f012 fbf0 	bl	17b12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    5332:	4632      	mov	r2, r6
    5334:	2107      	movs	r1, #7
    5336:	4640      	mov	r0, r8
    5338:	f013 fee5 	bl	19106 <bt_att_create_pdu>
    533c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    533e:	b1d8      	cbz	r0, 5378 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    5340:	230a      	movs	r3, #10
    5342:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5346:	4a0d      	ldr	r2, [pc, #52]	; (537c <att_find_type_req+0xd0>)
	data.value_len = value_len;
    5348:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    534c:	ab01      	add	r3, sp, #4
    534e:	4649      	mov	r1, r9
    5350:	4638      	mov	r0, r7
	data.value = value;
    5352:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    5356:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    5358:	f013 fb3f 	bl	189da <bt_gatt_foreach_attr>
	if (data.err) {
    535c:	f89d 4015 	ldrb.w	r4, [sp, #21]
    5360:	b12c      	cbz	r4, 536e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    5362:	9802      	ldr	r0, [sp, #8]
    5364:	f00e f8aa 	bl	134bc <net_buf_unref>
	if (!req) {
    5368:	f89d 3015 	ldrb.w	r3, [sp, #21]
    536c:	e7ce      	b.n	530c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    536e:	9902      	ldr	r1, [sp, #8]
    5370:	4628      	mov	r0, r5
    5372:	f7ff fcb9 	bl	4ce8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    5376:	e7cf      	b.n	5318 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    5378:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    537a:	e7cd      	b.n	5318 <att_find_type_req+0x6c>
    537c:	000189f1 	.word	0x000189f1

00005380 <att_find_info_req>:
{
    5380:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    5382:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5384:	881e      	ldrh	r6, [r3, #0]
{
    5386:	b085      	sub	sp, #20
    5388:	4605      	mov	r5, r0
	if (!start || !end) {
    538a:	b19e      	cbz	r6, 53b4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    538c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    538e:	b184      	cbz	r4, 53b2 <att_find_info_req+0x32>
	if (start > end) {
    5390:	42b4      	cmp	r4, r6
    5392:	d30f      	bcc.n	53b4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    5394:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    5396:	2210      	movs	r2, #16
    5398:	2100      	movs	r1, #0
    539a:	4668      	mov	r0, sp
    539c:	f012 fbb9 	bl	17b12 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    53a0:	2200      	movs	r2, #0
    53a2:	2105      	movs	r1, #5
    53a4:	4638      	mov	r0, r7
    53a6:	f013 feae 	bl	19106 <bt_att_create_pdu>
    53aa:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    53ac:	b958      	cbnz	r0, 53c6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    53ae:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    53b0:	e007      	b.n	53c2 <att_find_info_req+0x42>
			*err = 0U;
    53b2:	4626      	mov	r6, r4
	if (!req) {
    53b4:	2301      	movs	r3, #1
    53b6:	4632      	mov	r2, r6
    53b8:	2104      	movs	r1, #4
    53ba:	4628      	mov	r0, r5
    53bc:	f013 fe60 	bl	19080 <send_err_rsp.part.0>
	return 0;
    53c0:	2000      	movs	r0, #0
}
    53c2:	b005      	add	sp, #20
    53c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    53c6:	4621      	mov	r1, r4
    53c8:	4a08      	ldr	r2, [pc, #32]	; (53ec <att_find_info_req+0x6c>)
	data.chan = chan;
    53ca:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    53cc:	466b      	mov	r3, sp
    53ce:	4630      	mov	r0, r6
    53d0:	f013 fb03 	bl	189da <bt_gatt_foreach_attr>
	if (!data.rsp) {
    53d4:	9c02      	ldr	r4, [sp, #8]
    53d6:	b924      	cbnz	r4, 53e2 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    53d8:	9801      	ldr	r0, [sp, #4]
    53da:	f00e f86f 	bl	134bc <net_buf_unref>
	if (!req) {
    53de:	230a      	movs	r3, #10
    53e0:	e7e9      	b.n	53b6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    53e2:	9901      	ldr	r1, [sp, #4]
    53e4:	4628      	mov	r0, r5
    53e6:	f7ff fc7f 	bl	4ce8 <bt_att_chan_send_rsp.constprop.0>
    53ea:	e7e9      	b.n	53c0 <att_find_info_req+0x40>
    53ec:	00018b19 	.word	0x00018b19

000053f0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    53f0:	b513      	push	{r0, r1, r4, lr}
    53f2:	4602      	mov	r2, r0
    53f4:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    53f6:	4808      	ldr	r0, [pc, #32]	; (5418 <bt_att_req_alloc+0x28>)
    53f8:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    53fa:	2400      	movs	r4, #0
    53fc:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    53fe:	f010 fd07 	bl	15e10 <k_mem_slab_alloc>
    5402:	4601      	mov	r1, r0
    5404:	b930      	cbnz	r0, 5414 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    5406:	9801      	ldr	r0, [sp, #4]
    5408:	2210      	movs	r2, #16
    540a:	f012 fb82 	bl	17b12 <memset>

	return req;
    540e:	9801      	ldr	r0, [sp, #4]
}
    5410:	b002      	add	sp, #8
    5412:	bd10      	pop	{r4, pc}
		return NULL;
    5414:	4620      	mov	r0, r4
    5416:	e7fb      	b.n	5410 <bt_att_req_alloc+0x20>
    5418:	2000088c 	.word	0x2000088c

0000541c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    541c:	b507      	push	{r0, r1, r2, lr}
    541e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    5420:	6880      	ldr	r0, [r0, #8]
    5422:	b120      	cbz	r0, 542e <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    5424:	f00e f84a 	bl	134bc <net_buf_unref>
		req->buf = NULL;
    5428:	9b01      	ldr	r3, [sp, #4]
    542a:	2200      	movs	r2, #0
    542c:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    542e:	4803      	ldr	r0, [pc, #12]	; (543c <bt_att_req_free+0x20>)
    5430:	a901      	add	r1, sp, #4
    5432:	f015 f92d 	bl	1a690 <k_mem_slab_free>
}
    5436:	b003      	add	sp, #12
    5438:	f85d fb04 	ldr.w	pc, [sp], #4
    543c:	2000088c 	.word	0x2000088c

00005440 <att_handle_rsp>:
{
    5440:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    5444:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    5446:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    544a:	4688      	mov	r8, r1
    544c:	4691      	mov	r9, r2
    544e:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
    5450:	f015 fad8 	bl	1aa04 <k_work_cancel_delayable>
	if (!chan->req) {
    5454:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
    5458:	2600      	movs	r6, #0
    545a:	b1f0      	cbz	r0, 549a <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
    545c:	4b10      	ldr	r3, [pc, #64]	; (54a0 <att_handle_rsp+0x60>)
    545e:	4298      	cmp	r0, r3
    5460:	d112      	bne.n	5488 <att_handle_rsp+0x48>
		chan->req = NULL;
    5462:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    5466:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
    5468:	6820      	ldr	r0, [r4, #0]
    546a:	f013 fd98 	bl	18f9e <att_req_send_process>
	if (func) {
    546e:	b13d      	cbz	r5, 5480 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
    5470:	6820      	ldr	r0, [r4, #0]
    5472:	f8cd a000 	str.w	sl, [sp]
    5476:	6800      	ldr	r0, [r0, #0]
    5478:	464b      	mov	r3, r9
    547a:	4642      	mov	r2, r8
    547c:	4639      	mov	r1, r7
    547e:	47a8      	blx	r5
}
    5480:	2000      	movs	r0, #0
    5482:	b002      	add	sp, #8
    5484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
    5488:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
    548a:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    548c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    5490:	f7ff ffc4 	bl	541c <bt_att_req_free>
	chan->req = NULL;
    5494:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
    5498:	e7e6      	b.n	5468 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
    549a:	4605      	mov	r5, r0
    549c:	e7e4      	b.n	5468 <att_handle_rsp+0x28>
    549e:	bf00      	nop
    54a0:	2000144c 	.word	0x2000144c

000054a4 <bt_att_disconnected>:
{
    54a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    54a6:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    54aa:	b085      	sub	sp, #20
    54ac:	4604      	mov	r4, r0
	if (!att_chan->att) {
    54ae:	2d00      	cmp	r5, #0
    54b0:	d04e      	beq.n	5550 <bt_att_disconnected+0xac>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    54b2:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    54b6:	f105 0024 	add.w	r0, r5, #36	; 0x24
    54ba:	f013 fcd3 	bl	18e64 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    54be:	f1a4 0608 	sub.w	r6, r4, #8
    54c2:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    54c6:	2200      	movs	r2, #0
    54c8:	2300      	movs	r3, #0
    54ca:	4638      	mov	r0, r7
    54cc:	f014 fa94 	bl	199f8 <net_buf_get>
    54d0:	4602      	mov	r2, r0
    54d2:	bb20      	cbnz	r0, 551e <bt_att_disconnected+0x7a>
	if (chan->req) {
    54d4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    54d8:	b123      	cbz	r3, 54e4 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    54da:	4601      	mov	r1, r0
    54dc:	230e      	movs	r3, #14
    54de:	4630      	mov	r0, r6
    54e0:	f7ff ffae 	bl	5440 <att_handle_rsp>
	chan->att = NULL;
    54e4:	2300      	movs	r3, #0
    54e6:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    54ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    54ec:	2b00      	cmp	r3, #0
    54ee:	d12f      	bne.n	5550 <bt_att_disconnected+0xac>
	att_reset(att);
    54f0:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    54f2:	9803      	ldr	r0, [sp, #12]
    54f4:	2200      	movs	r2, #0
    54f6:	2300      	movs	r3, #0
    54f8:	300c      	adds	r0, #12
    54fa:	f014 fa7d 	bl	199f8 <net_buf_get>
    54fe:	b988      	cbnz	r0, 5524 <bt_att_disconnected+0x80>
	att->conn = NULL;
    5500:	9a03      	ldr	r2, [sp, #12]
    5502:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
    5504:	9b03      	ldr	r3, [sp, #12]
	return list->head;
    5506:	685d      	ldr	r5, [r3, #4]
    5508:	b97d      	cbnz	r5, 552a <bt_att_disconnected+0x86>
	k_mem_slab_free(&att_slab, (void **)&att);
    550a:	4812      	ldr	r0, [pc, #72]	; (5554 <bt_att_disconnected+0xb0>)
    550c:	a903      	add	r1, sp, #12
    550e:	f015 f8bf 	bl	1a690 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    5512:	6820      	ldr	r0, [r4, #0]
}
    5514:	b005      	add	sp, #20
    5516:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    551a:	f000 bb8f 	b.w	5c3c <bt_gatt_disconnected>
		net_buf_unref(buf);
    551e:	f00d ffcd 	bl	134bc <net_buf_unref>
    5522:	e7d0      	b.n	54c6 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    5524:	f00d ffca 	bl	134bc <net_buf_unref>
    5528:	e7e3      	b.n	54f2 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    552a:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
    552c:	686e      	ldr	r6, [r5, #4]
	return node->next;
    552e:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    5530:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5532:	428d      	cmp	r5, r1
	list->tail = node;
    5534:	bf08      	it	eq
    5536:	609a      	streq	r2, [r3, #8]
    5538:	b136      	cbz	r6, 5548 <bt_att_disconnected+0xa4>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    553a:	68eb      	ldr	r3, [r5, #12]
    553c:	9300      	str	r3, [sp, #0]
    553e:	2300      	movs	r3, #0
    5540:	461a      	mov	r2, r3
    5542:	210e      	movs	r1, #14
    5544:	4618      	mov	r0, r3
    5546:	47b0      	blx	r6
		bt_att_req_free(req);
    5548:	4628      	mov	r0, r5
    554a:	f7ff ff67 	bl	541c <bt_att_req_free>
    554e:	e7d9      	b.n	5504 <bt_att_disconnected+0x60>
}
    5550:	b005      	add	sp, #20
    5552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5554:	20000854 	.word	0x20000854

00005558 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    5558:	b537      	push	{r0, r1, r2, r4, r5, lr}
    555a:	4d0d      	ldr	r5, [pc, #52]	; (5590 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    555c:	4604      	mov	r4, r0
    555e:	b968      	cbnz	r0, 557c <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    5560:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    5562:	2207      	movs	r2, #7
    5564:	f8cd 0003 	str.w	r0, [sp, #3]
    5568:	4669      	mov	r1, sp
    556a:	1c68      	adds	r0, r5, #1
    556c:	f012 fab5 	bl	17ada <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    5570:	2800      	cmp	r0, #0
    5572:	bf08      	it	eq
    5574:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
    5576:	4620      	mov	r0, r4
    5578:	b003      	add	sp, #12
    557a:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    557c:	462a      	mov	r2, r5
    557e:	f812 1b01 	ldrb.w	r1, [r2], #1
    5582:	f013 f897 	bl	186b4 <bt_conn_is_peer_addr_le>
	return NULL;
    5586:	2800      	cmp	r0, #0
    5588:	bf14      	ite	ne
    558a:	462c      	movne	r4, r5
    558c:	2400      	moveq	r4, #0
    558e:	e7f2      	b.n	5576 <find_cf_cfg+0x1e>
    5590:	20001464 	.word	0x20001464

00005594 <find_sc_cfg>:
{
    5594:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    5596:	4c06      	ldr	r4, [pc, #24]	; (55b0 <find_sc_cfg+0x1c>)
    5598:	7823      	ldrb	r3, [r4, #0]
    559a:	4283      	cmp	r3, r0
    559c:	d104      	bne.n	55a8 <find_sc_cfg+0x14>
    559e:	2207      	movs	r2, #7
    55a0:	1c60      	adds	r0, r4, #1
    55a2:	f012 fa9a 	bl	17ada <memcmp>
    55a6:	b108      	cbz	r0, 55ac <find_sc_cfg+0x18>
	return NULL;
    55a8:	2000      	movs	r0, #0
}
    55aa:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    55ac:	4620      	mov	r0, r4
    55ae:	e7fc      	b.n	55aa <find_sc_cfg+0x16>
    55b0:	20002778 	.word	0x20002778

000055b4 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    55b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    55b8:	4b23      	ldr	r3, [pc, #140]	; (5648 <disconnected_cb+0x94>)
{
    55ba:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    55bc:	6882      	ldr	r2, [r0, #8]
    55be:	429a      	cmp	r2, r3
{
    55c0:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    55c2:	d102      	bne.n	55ca <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    55c4:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    55c6:	8963      	ldrh	r3, [r4, #10]
    55c8:	bb03      	cbnz	r3, 560c <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    55ca:	2001      	movs	r0, #1
    55cc:	b002      	add	sp, #8
    55ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    55d2:	f105 0888 	add.w	r8, r5, #136	; 0x88
    55d6:	7a28      	ldrb	r0, [r5, #8]
    55d8:	4641      	mov	r1, r8
    55da:	f012 fdd3 	bl	18184 <bt_addr_le_is_bonded>
    55de:	b980      	cbnz	r0, 5602 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
    55e0:	4b1a      	ldr	r3, [pc, #104]	; (564c <disconnected_cb+0x98>)
    55e2:	429c      	cmp	r4, r3
    55e4:	d102      	bne.n	55ec <disconnected_cb+0x38>
					sc_clear(conn);
    55e6:	4628      	mov	r0, r5
    55e8:	f014 f8ce 	bl	19788 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    55ec:	2500      	movs	r5, #0
    55ee:	4669      	mov	r1, sp
    55f0:	4630      	mov	r0, r6
    55f2:	9500      	str	r5, [sp, #0]
    55f4:	f8cd 5003 	str.w	r5, [sp, #3]
    55f8:	f013 fe7b 	bl	192f2 <bt_addr_le_copy>
	cfg->id = 0U;
    55fc:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    55fe:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
    5600:	e019      	b.n	5636 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    5602:	4641      	mov	r1, r8
    5604:	4630      	mov	r0, r6
    5606:	f013 fe74 	bl	192f2 <bt_addr_le_copy>
	if (!value_used) {
    560a:	e014      	b.n	5636 <disconnected_cb+0x82>
		if (!cfg->value) {
    560c:	8923      	ldrh	r3, [r4, #8]
    560e:	b193      	cbz	r3, 5636 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    5610:	4626      	mov	r6, r4
    5612:	4628      	mov	r0, r5
    5614:	f816 1b01 	ldrb.w	r1, [r6], #1
    5618:	4632      	mov	r2, r6
    561a:	f013 f84b 	bl	186b4 <bt_conn_is_peer_addr_le>
    561e:	2800      	cmp	r0, #0
    5620:	d1d7      	bne.n	55d2 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    5622:	7820      	ldrb	r0, [r4, #0]
    5624:	4631      	mov	r1, r6
    5626:	f7fe ffff 	bl	4628 <bt_conn_lookup_addr_le>
			if (tmp) {
    562a:	b120      	cbz	r0, 5636 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
    562c:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    562e:	f012 fffa 	bl	18626 <bt_conn_unref>
	if (!value_used) {
    5632:	2d07      	cmp	r5, #7
    5634:	d0c9      	beq.n	55ca <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    5636:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    5638:	2100      	movs	r1, #0
    563a:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    563c:	2b00      	cmp	r3, #0
    563e:	d0c4      	beq.n	55ca <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    5640:	4638      	mov	r0, r7
    5642:	4798      	blx	r3
    5644:	e7c1      	b.n	55ca <disconnected_cb+0x16>
    5646:	bf00      	nop
    5648:	0001964f 	.word	0x0001964f
    564c:	20000244 	.word	0x20000244

00005650 <sc_indicate_rsp>:
{
    5650:	b510      	push	{r4, lr}
    5652:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5654:	4814      	ldr	r0, [pc, #80]	; (56a8 <sc_indicate_rsp+0x58>)
    5656:	f3bf 8f5b 	dmb	ish
    565a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    565e:	e853 2f00 	ldrex	r2, [r3]
    5662:	f022 0202 	bic.w	r2, r2, #2
    5666:	e843 2100 	strex	r1, r2, [r3]
    566a:	2900      	cmp	r1, #0
    566c:	d1f7      	bne.n	565e <sc_indicate_rsp+0xe>
    566e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5672:	f3bf 8f5b 	dmb	ish
    5676:	6d03      	ldr	r3, [r0, #80]	; 0x50
    5678:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    567c:	07da      	lsls	r2, r3, #31
    567e:	d504      	bpl.n	568a <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
    5680:	2200      	movs	r2, #0
    5682:	2300      	movs	r3, #0
    5684:	3020      	adds	r0, #32
    5686:	f010 ff03 	bl	16490 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    568a:	4620      	mov	r0, r4
    568c:	f7ff ff64 	bl	5558 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    5690:	b140      	cbz	r0, 56a4 <sc_indicate_rsp+0x54>
    5692:	7a03      	ldrb	r3, [r0, #8]
    5694:	07db      	lsls	r3, r3, #31
    5696:	d505      	bpl.n	56a4 <sc_indicate_rsp+0x54>
}
    5698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    569c:	2100      	movs	r1, #0
    569e:	300c      	adds	r0, #12
    56a0:	f013 bebe 	b.w	19420 <atomic_set_bit>
}
    56a4:	bd10      	pop	{r4, pc}
    56a6:	bf00      	nop
    56a8:	20000c88 	.word	0x20000c88

000056ac <bt_gatt_init>:
{
    56ac:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    56ae:	4b20      	ldr	r3, [pc, #128]	; (5730 <bt_gatt_init+0x84>)
    56b0:	f3bf 8f5b 	dmb	ish
    56b4:	2201      	movs	r2, #1
    56b6:	e853 1f00 	ldrex	r1, [r3]
    56ba:	2900      	cmp	r1, #0
    56bc:	d103      	bne.n	56c6 <bt_gatt_init+0x1a>
    56be:	e843 2000 	strex	r0, r2, [r3]
    56c2:	2800      	cmp	r0, #0
    56c4:	d1f7      	bne.n	56b6 <bt_gatt_init+0xa>
    56c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    56ca:	d130      	bne.n	572e <bt_gatt_init+0x82>
    56cc:	f3bf 8f5b 	dmb	ish
    56d0:	4b18      	ldr	r3, [pc, #96]	; (5734 <bt_gatt_init+0x88>)
    56d2:	e853 1f00 	ldrex	r1, [r3]
    56d6:	2900      	cmp	r1, #0
    56d8:	d103      	bne.n	56e2 <bt_gatt_init+0x36>
    56da:	e843 2000 	strex	r0, r2, [r3]
    56de:	2800      	cmp	r0, #0
    56e0:	d1f7      	bne.n	56d2 <bt_gatt_init+0x26>
    56e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    56e6:	d108      	bne.n	56fa <bt_gatt_init+0x4e>
    56e8:	4913      	ldr	r1, [pc, #76]	; (5738 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    56ea:	4a14      	ldr	r2, [pc, #80]	; (573c <bt_gatt_init+0x90>)
    56ec:	880b      	ldrh	r3, [r1, #0]
    56ee:	4c14      	ldr	r4, [pc, #80]	; (5740 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    56f0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    56f2:	42a2      	cmp	r2, r4
    56f4:	d315      	bcc.n	5722 <bt_gatt_init+0x76>
    56f6:	b100      	cbz	r0, 56fa <bt_gatt_init+0x4e>
    56f8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    56fa:	4b12      	ldr	r3, [pc, #72]	; (5744 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    56fc:	4912      	ldr	r1, [pc, #72]	; (5748 <bt_gatt_init+0x9c>)
    56fe:	4813      	ldr	r0, [pc, #76]	; (574c <bt_gatt_init+0xa0>)
    5700:	2200      	movs	r2, #0
	list->tail = NULL;
    5702:	e9c3 2200 	strd	r2, r2, [r3]
    5706:	f015 f971 	bl	1a9ec <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    570a:	4810      	ldr	r0, [pc, #64]	; (574c <bt_gatt_init+0xa0>)
    570c:	f44f 72a4 	mov.w	r2, #328	; 0x148
    5710:	2300      	movs	r3, #0
    5712:	f010 fe89 	bl	16428 <k_work_schedule>
}
    5716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    571a:	490d      	ldr	r1, [pc, #52]	; (5750 <bt_gatt_init+0xa4>)
    571c:	480d      	ldr	r0, [pc, #52]	; (5754 <bt_gatt_init+0xa8>)
    571e:	f015 b965 	b.w	1a9ec <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    5722:	6850      	ldr	r0, [r2, #4]
    5724:	4403      	add	r3, r0
    5726:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    5728:	3208      	adds	r2, #8
    572a:	2001      	movs	r0, #1
    572c:	e7e1      	b.n	56f2 <bt_gatt_init+0x46>
}
    572e:	bd10      	pop	{r4, pc}
    5730:	20001474 	.word	0x20001474
    5734:	20001478 	.word	0x20001478
    5738:	20002776 	.word	0x20002776
    573c:	0001b334 	.word	0x0001b334
    5740:	0001b34c 	.word	0x0001b34c
    5744:	2000145c 	.word	0x2000145c
    5748:	00019881 	.word	0x00019881
    574c:	20000c30 	.word	0x20000c30
    5750:	00005a69 	.word	0x00005a69
    5754:	20000ca8 	.word	0x20000ca8

00005758 <bt_gatt_attr_get_handle>:
{
    5758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    575c:	4603      	mov	r3, r0
    575e:	b148      	cbz	r0, 5774 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    5760:	8a00      	ldrh	r0, [r0, #16]
    5762:	b938      	cbnz	r0, 5774 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    5764:	4912      	ldr	r1, [pc, #72]	; (57b0 <bt_gatt_attr_get_handle+0x58>)
    5766:	f8df e04c 	ldr.w	lr, [pc, #76]	; 57b4 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    576a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    576c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    5770:	4571      	cmp	r1, lr
    5772:	d301      	bcc.n	5778 <bt_gatt_attr_get_handle+0x20>
}
    5774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    5778:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    577c:	42bb      	cmp	r3, r7
    577e:	d304      	bcc.n	578a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    5780:	fb0c 7206 	mla	r2, ip, r6, r7
    5784:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    5786:	4293      	cmp	r3, r2
    5788:	d90e      	bls.n	57a8 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    578a:	19a2      	adds	r2, r4, r6
    578c:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    578e:	3108      	adds	r1, #8
    5790:	4614      	mov	r4, r2
    5792:	e7ed      	b.n	5770 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    5794:	fb0c 7805 	mla	r8, ip, r5, r7
    5798:	4543      	cmp	r3, r8
    579a:	d007      	beq.n	57ac <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    579c:	3501      	adds	r5, #1
    579e:	1962      	adds	r2, r4, r5
    57a0:	42b5      	cmp	r5, r6
    57a2:	b292      	uxth	r2, r2
    57a4:	d1f6      	bne.n	5794 <bt_gatt_attr_get_handle+0x3c>
    57a6:	e7f2      	b.n	578e <bt_gatt_attr_get_handle+0x36>
    57a8:	2500      	movs	r5, #0
    57aa:	e7f8      	b.n	579e <bt_gatt_attr_get_handle+0x46>
    57ac:	4610      	mov	r0, r2
    57ae:	e7e1      	b.n	5774 <bt_gatt_attr_get_handle+0x1c>
    57b0:	0001b334 	.word	0x0001b334
    57b4:	0001b34c 	.word	0x0001b34c

000057b8 <bt_gatt_foreach_attr_type>:
{
    57b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57bc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    57c0:	9100      	str	r1, [sp, #0]
    57c2:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    57c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    57c8:	2d00      	cmp	r5, #0
    57ca:	bf08      	it	eq
    57cc:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    57ce:	4b24      	ldr	r3, [pc, #144]	; (5860 <bt_gatt_foreach_attr_type+0xa8>)
    57d0:	881b      	ldrh	r3, [r3, #0]
    57d2:	4283      	cmp	r3, r0
{
    57d4:	4607      	mov	r7, r0
    57d6:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    57d8:	d23c      	bcs.n	5854 <bt_gatt_foreach_attr_type+0x9c>
}
    57da:	b003      	add	sp, #12
    57dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    57e0:	6873      	ldr	r3, [r6, #4]
    57e2:	4423      	add	r3, r4
    57e4:	42bb      	cmp	r3, r7
    57e6:	d232      	bcs.n	584e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    57e8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    57ea:	3608      	adds	r6, #8
    57ec:	4b1d      	ldr	r3, [pc, #116]	; (5864 <bt_gatt_foreach_attr_type+0xac>)
    57ee:	429e      	cmp	r6, r3
    57f0:	d3f6      	bcc.n	57e0 <bt_gatt_foreach_attr_type+0x28>
    57f2:	e7f2      	b.n	57da <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    57f4:	5889      	ldr	r1, [r1, r2]
    57f6:	9301      	str	r3, [sp, #4]
    57f8:	4640      	mov	r0, r8
    57fa:	f012 f9e8 	bl	17bce <bt_uuid_cmp>
    57fe:	9b01      	ldr	r3, [sp, #4]
    5800:	b190      	cbz	r0, 5828 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    5802:	3401      	adds	r4, #1
    5804:	f10a 0a01 	add.w	sl, sl, #1
    5808:	b2a4      	uxth	r4, r4
    580a:	6873      	ldr	r3, [r6, #4]
    580c:	4553      	cmp	r3, sl
    580e:	d9ec      	bls.n	57ea <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    5810:	9b00      	ldr	r3, [sp, #0]
    5812:	429c      	cmp	r4, r3
    5814:	d8e1      	bhi.n	57da <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    5816:	42bc      	cmp	r4, r7
    5818:	d3f3      	bcc.n	5802 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    581a:	6831      	ldr	r1, [r6, #0]
    581c:	fb0b f20a 	mul.w	r2, fp, sl
    5820:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    5822:	f1b8 0f00 	cmp.w	r8, #0
    5826:	d1e5      	bne.n	57f4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    5828:	f1b9 0f00 	cmp.w	r9, #0
    582c:	d10b      	bne.n	5846 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    582e:	3d01      	subs	r5, #1
    5830:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    5832:	4618      	mov	r0, r3
    5834:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5838:	4621      	mov	r1, r4
    583a:	4798      	blx	r3
	if (!*num_matches) {
    583c:	2d00      	cmp	r5, #0
    583e:	d0cc      	beq.n	57da <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    5840:	2800      	cmp	r0, #0
    5842:	d1de      	bne.n	5802 <bt_gatt_foreach_attr_type+0x4a>
    5844:	e7c9      	b.n	57da <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    5846:	68da      	ldr	r2, [r3, #12]
    5848:	4591      	cmp	r9, r2
    584a:	d1da      	bne.n	5802 <bt_gatt_foreach_attr_type+0x4a>
    584c:	e7ef      	b.n	582e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    584e:	f04f 0a00 	mov.w	sl, #0
    5852:	e7da      	b.n	580a <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    5854:	4e04      	ldr	r6, [pc, #16]	; (5868 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    5856:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    5858:	f04f 0b14 	mov.w	fp, #20
    585c:	e7c6      	b.n	57ec <bt_gatt_foreach_attr_type+0x34>
    585e:	bf00      	nop
    5860:	20002776 	.word	0x20002776
    5864:	0001b34c 	.word	0x0001b34c
    5868:	0001b334 	.word	0x0001b334

0000586c <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    586c:	b510      	push	{r4, lr}
    586e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    5870:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    5872:	aa1c      	add	r2, sp, #112	; 0x70
    5874:	4669      	mov	r1, sp
    5876:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    5878:	e9cd 3300 	strd	r3, r3, [sp]
    587c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    5880:	f012 f817 	bl	178b2 <tc_cmac_setup>
    5884:	b320      	cbz	r0, 58d0 <db_hash_gen.constprop.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    5886:	f64f 71ff 	movw	r1, #65535	; 0xffff
    588a:	2001      	movs	r0, #1
    588c:	4a11      	ldr	r2, [pc, #68]	; (58d4 <db_hash_gen.constprop.0+0x68>)
    588e:	ab04      	add	r3, sp, #16
    5890:	f013 ffeb 	bl	1986a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    5894:	4810      	ldr	r0, [pc, #64]	; (58d8 <db_hash_gen.constprop.0+0x6c>)
    5896:	a904      	add	r1, sp, #16
    5898:	f012 f8a1 	bl	179de <tc_cmac_final>
    589c:	b1c0      	cbz	r0, 58d0 <db_hash_gen.constprop.0+0x64>
    589e:	4b0e      	ldr	r3, [pc, #56]	; (58d8 <db_hash_gen.constprop.0+0x6c>)
    58a0:	2208      	movs	r2, #8
    58a2:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    58a6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    58a8:	780c      	ldrb	r4, [r1, #0]
    58aa:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    58ae:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    58b0:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    58b4:	d1f7      	bne.n	58a6 <db_hash_gen.constprop.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    58b6:	f3bf 8f5b 	dmb	ish
    58ba:	4b08      	ldr	r3, [pc, #32]	; (58dc <db_hash_gen.constprop.0+0x70>)
    58bc:	e853 2f00 	ldrex	r2, [r3]
    58c0:	f042 0204 	orr.w	r2, r2, #4
    58c4:	e843 2100 	strex	r1, r2, [r3]
    58c8:	2900      	cmp	r1, #0
    58ca:	d1f7      	bne.n	58bc <db_hash_gen.constprop.0+0x50>
    58cc:	f3bf 8f5b 	dmb	ish
}
    58d0:	b048      	add	sp, #288	; 0x120
    58d2:	bd10      	pop	{r4, pc}
    58d4:	0001933d 	.word	0x0001933d
    58d8:	20000c20 	.word	0x20000c20
    58dc:	20000cd8 	.word	0x20000cd8

000058e0 <gatt_indicate>:
{
    58e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58e4:	4615      	mov	r5, r2
    58e6:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    58e8:	2214      	movs	r2, #20
    58ea:	6869      	ldr	r1, [r5, #4]
{
    58ec:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    58ee:	f013 ffc9 	bl	19884 <bt_gatt_check_perm>
    58f2:	2800      	cmp	r0, #0
    58f4:	d139      	bne.n	596a <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    58f6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    58fa:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    58fc:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    58fe:	f7ff fd77 	bl	53f0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    5902:	3602      	adds	r6, #2
	if (!req) {
    5904:	4604      	mov	r4, r0
    5906:	b920      	cbnz	r0, 5912 <gatt_indicate+0x32>
		return -ENOMEM;
    5908:	f06f 050b 	mvn.w	r5, #11
}
    590c:	4628      	mov	r0, r5
    590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
    5912:	4b17      	ldr	r3, [pc, #92]	; (5970 <gatt_indicate+0x90>)
    5914:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    5916:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    5918:	4632      	mov	r2, r6
    591a:	211d      	movs	r1, #29
    591c:	4640      	mov	r0, r8
    591e:	f013 fbf2 	bl	19106 <bt_att_create_pdu>
	if (!buf) {
    5922:	4606      	mov	r6, r0
    5924:	b918      	cbnz	r0, 592e <gatt_indicate+0x4e>
		bt_att_req_free(req);
    5926:	4620      	mov	r0, r4
    5928:	f7ff fd78 	bl	541c <bt_att_req_free>
    592c:	e7ec      	b.n	5908 <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
    592e:	f100 0a08 	add.w	sl, r0, #8
    5932:	2102      	movs	r1, #2
    5934:	4650      	mov	r0, sl
    5936:	f014 f8bc 	bl	19ab2 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    593a:	4607      	mov	r7, r0
    593c:	8aa9      	ldrh	r1, [r5, #20]
    593e:	f827 9b02 	strh.w	r9, [r7], #2
    5942:	4650      	mov	r0, sl
    5944:	f014 f8b5 	bl	19ab2 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    5948:	8aaa      	ldrh	r2, [r5, #20]
    594a:	6929      	ldr	r1, [r5, #16]
    594c:	4638      	mov	r0, r7
    594e:	f012 f8d5 	bl	17afc <memcpy>
	req->buf = buf;
    5952:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    5954:	4621      	mov	r1, r4
    5956:	4640      	mov	r0, r8
    5958:	f013 fc95 	bl	19286 <bt_att_req_send>
	if (err) {
    595c:	4605      	mov	r5, r0
    595e:	2800      	cmp	r0, #0
    5960:	d0d4      	beq.n	590c <gatt_indicate+0x2c>
		bt_att_req_free(req);
    5962:	4620      	mov	r0, r4
    5964:	f7ff fd5a 	bl	541c <bt_att_req_free>
    5968:	e7d0      	b.n	590c <gatt_indicate+0x2c>
		return -EPERM;
    596a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    596e:	e7cd      	b.n	590c <gatt_indicate+0x2c>
    5970:	000192c5 	.word	0x000192c5

00005974 <bt_gatt_indicate>:
{
    5974:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5976:	4b39      	ldr	r3, [pc, #228]	; (5a5c <bt_gatt_indicate+0xe8>)
    5978:	f3bf 8f5b 	dmb	ish
    597c:	681b      	ldr	r3, [r3, #0]
    597e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5982:	079a      	lsls	r2, r3, #30
{
    5984:	b08b      	sub	sp, #44	; 0x2c
    5986:	4604      	mov	r4, r0
    5988:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    598a:	d561      	bpl.n	5a50 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    598c:	b110      	cbz	r0, 5994 <bt_gatt_indicate+0x20>
    598e:	7a83      	ldrb	r3, [r0, #10]
    5990:	2b07      	cmp	r3, #7
    5992:	d160      	bne.n	5a56 <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
    5994:	6868      	ldr	r0, [r5, #4]
    5996:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    5998:	f7ff fede 	bl	5758 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    599c:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    599e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    59a2:	b33a      	cbz	r2, 59f4 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    59a4:	a905      	add	r1, sp, #20
    59a6:	9102      	str	r1, [sp, #8]
    59a8:	492d      	ldr	r1, [pc, #180]	; (5a60 <bt_gatt_indicate+0xec>)
    59aa:	9101      	str	r1, [sp, #4]
    59ac:	2101      	movs	r1, #1
	found->attr = NULL;
    59ae:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    59b0:	9100      	str	r1, [sp, #0]
    59b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    59b6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    59b8:	f7ff fefe 	bl	57b8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    59bc:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    59be:	b91b      	cbnz	r3, 59c8 <bt_gatt_indicate+0x54>
			return -ENOENT;
    59c0:	f06f 0001 	mvn.w	r0, #1
}
    59c4:	b00b      	add	sp, #44	; 0x2c
    59c6:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    59c8:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    59ca:	9b05      	ldr	r3, [sp, #20]
    59cc:	6818      	ldr	r0, [r3, #0]
    59ce:	2300      	movs	r3, #0
    59d0:	f88d 3010 	strb.w	r3, [sp, #16]
    59d4:	a904      	add	r1, sp, #16
    59d6:	f642 0303 	movw	r3, #10243	; 0x2803
    59da:	f8ad 3012 	strh.w	r3, [sp, #18]
    59de:	f012 f8f6 	bl	17bce <bt_uuid_cmp>
    59e2:	b970      	cbnz	r0, 5a02 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    59e4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    59e6:	68c3      	ldr	r3, [r0, #12]
    59e8:	799b      	ldrb	r3, [r3, #6]
    59ea:	069b      	lsls	r3, r3, #26
    59ec:	d405      	bmi.n	59fa <bt_gatt_indicate+0x86>
			return -EINVAL;
    59ee:	f06f 0015 	mvn.w	r0, #21
    59f2:	e7e7      	b.n	59c4 <bt_gatt_indicate+0x50>
		if (!data.handle) {
    59f4:	2800      	cmp	r0, #0
    59f6:	d1e8      	bne.n	59ca <bt_gatt_indicate+0x56>
    59f8:	e7e2      	b.n	59c0 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    59fa:	f013 fee8 	bl	197ce <bt_gatt_attr_value_handle>
    59fe:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    5a02:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    5a06:	b13c      	cbz	r4, 5a18 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    5a08:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    5a0a:	4601      	mov	r1, r0
		params->_ref = 1;
    5a0c:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    5a0e:	462a      	mov	r2, r5
    5a10:	4620      	mov	r0, r4
    5a12:	f7ff ff65 	bl	58e0 <gatt_indicate>
    5a16:	e7d5      	b.n	59c4 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
    5a18:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    5a1c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    5a1e:	2302      	movs	r3, #2
    5a20:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    5a24:	f642 1302 	movw	r3, #10498	; 0x2902
    5a28:	f8ad 3012 	strh.w	r3, [sp, #18]
    5a2c:	ab05      	add	r3, sp, #20
    5a2e:	9302      	str	r3, [sp, #8]
    5a30:	4b0c      	ldr	r3, [pc, #48]	; (5a64 <bt_gatt_indicate+0xf0>)
    5a32:	9301      	str	r3, [sp, #4]
    5a34:	2301      	movs	r3, #1
    5a36:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    5a38:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    5a3a:	4623      	mov	r3, r4
    5a3c:	aa04      	add	r2, sp, #16
    5a3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    5a42:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    5a44:	f88d 4010 	strb.w	r4, [sp, #16]
    5a48:	f7ff feb6 	bl	57b8 <bt_gatt_foreach_attr_type>
	return data.err;
    5a4c:	9807      	ldr	r0, [sp, #28]
    5a4e:	e7b9      	b.n	59c4 <bt_gatt_indicate+0x50>
		return -EAGAIN;
    5a50:	f06f 000a 	mvn.w	r0, #10
    5a54:	e7b6      	b.n	59c4 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
    5a56:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    5a5a:	e7b3      	b.n	59c4 <bt_gatt_indicate+0x50>
    5a5c:	200000cc 	.word	0x200000cc
    5a60:	000192eb 	.word	0x000192eb
    5a64:	00005ad9 	.word	0x00005ad9

00005a68 <sc_process>:
{
    5a68:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    5a6a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    5a6e:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    5a72:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    5a76:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    5a7a:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    5a7c:	f1a0 0120 	sub.w	r1, r0, #32
    5a80:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5a84:	f3bf 8f5b 	dmb	ish
    5a88:	e854 2f00 	ldrex	r2, [r4]
    5a8c:	f022 0201 	bic.w	r2, r2, #1
    5a90:	e844 2000 	strex	r0, r2, [r4]
    5a94:	2800      	cmp	r0, #0
    5a96:	d1f7      	bne.n	5a88 <sc_process+0x20>
    5a98:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    5a9c:	4a0c      	ldr	r2, [pc, #48]	; (5ad0 <sc_process+0x68>)
    5a9e:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    5aa2:	4a0c      	ldr	r2, [pc, #48]	; (5ad4 <sc_process+0x6c>)
    5aa4:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    5aa8:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    5aaa:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    5aac:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    5ab0:	2204      	movs	r2, #4
	sc->start = 0U;
    5ab2:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    5ab6:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    5aba:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    5abe:	f7ff ff59 	bl	5974 <bt_gatt_indicate>
    5ac2:	b918      	cbnz	r0, 5acc <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    5ac4:	2101      	movs	r1, #1
    5ac6:	4620      	mov	r0, r4
    5ac8:	f013 fcaa 	bl	19420 <atomic_set_bit>
}
    5acc:	b002      	add	sp, #8
    5ace:	bd10      	pop	{r4, pc}
    5ad0:	0001b660 	.word	0x0001b660
    5ad4:	00005651 	.word	0x00005651

00005ad8 <notify_cb>:
{
    5ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    5ada:	4b32      	ldr	r3, [pc, #200]	; (5ba4 <notify_cb+0xcc>)
{
    5adc:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    5ade:	6882      	ldr	r2, [r0, #8]
    5ae0:	429a      	cmp	r2, r3
{
    5ae2:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    5ae4:	d12e      	bne.n	5b44 <notify_cb+0x6c>
	ccc = attr->user_data;
    5ae6:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    5ae8:	4b2f      	ldr	r3, [pc, #188]	; (5ba8 <notify_cb+0xd0>)
    5aea:	429f      	cmp	r7, r3
    5aec:	d11a      	bne.n	5b24 <notify_cb+0x4c>
    5aee:	4d2f      	ldr	r5, [pc, #188]	; (5bac <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    5af0:	2300      	movs	r3, #0
    5af2:	2207      	movs	r2, #7
    5af4:	4669      	mov	r1, sp
    5af6:	1c68      	adds	r0, r5, #1
    5af8:	9300      	str	r3, [sp, #0]
    5afa:	f8cd 3003 	str.w	r3, [sp, #3]
    5afe:	f011 ffec 	bl	17ada <memcmp>
    5b02:	b178      	cbz	r0, 5b24 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    5b04:	4629      	mov	r1, r5
    5b06:	2207      	movs	r2, #7
    5b08:	f811 0b01 	ldrb.w	r0, [r1], #1
    5b0c:	f7fe fdaa 	bl	4664 <bt_conn_lookup_state_le>
			if (!conn) {
    5b10:	b9e0      	cbnz	r0, 5b4c <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
    5b12:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    5b14:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    5b16:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    5b18:	f811 0b01 	ldrb.w	r0, [r1], #1
    5b1c:	8853      	ldrh	r3, [r2, #2]
    5b1e:	8812      	ldrh	r2, [r2, #0]
    5b20:	f013 fe0b 	bl	1973a <sc_save>
		if (cfg->value != data->type) {
    5b24:	893a      	ldrh	r2, [r7, #8]
    5b26:	89a3      	ldrh	r3, [r4, #12]
    5b28:	429a      	cmp	r2, r3
    5b2a:	d10b      	bne.n	5b44 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    5b2c:	4639      	mov	r1, r7
    5b2e:	f811 0b01 	ldrb.w	r0, [r1], #1
    5b32:	f7fe fd79 	bl	4628 <bt_conn_lookup_addr_le>
		if (!conn) {
    5b36:	4605      	mov	r5, r0
    5b38:	b120      	cbz	r0, 5b44 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    5b3a:	7a83      	ldrb	r3, [r0, #10]
    5b3c:	2b07      	cmp	r3, #7
    5b3e:	d008      	beq.n	5b52 <notify_cb+0x7a>
			bt_conn_unref(conn);
    5b40:	f012 fd71 	bl	18626 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    5b44:	2701      	movs	r7, #1
}
    5b46:	4638      	mov	r0, r7
    5b48:	b003      	add	sp, #12
    5b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    5b4c:	f012 fd6b 	bl	18626 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    5b50:	e7e8      	b.n	5b24 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    5b52:	697b      	ldr	r3, [r7, #20]
    5b54:	b123      	cbz	r3, 5b60 <notify_cb+0x88>
    5b56:	4631      	mov	r1, r6
    5b58:	4798      	blx	r3
    5b5a:	b908      	cbnz	r0, 5b60 <notify_cb+0x88>
			bt_conn_unref(conn);
    5b5c:	4628      	mov	r0, r5
    5b5e:	e7ef      	b.n	5b40 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
    5b60:	2214      	movs	r2, #20
    5b62:	4631      	mov	r1, r6
    5b64:	4628      	mov	r0, r5
    5b66:	f013 fe8d 	bl	19884 <bt_gatt_check_perm>
    5b6a:	4607      	mov	r7, r0
    5b6c:	2800      	cmp	r0, #0
    5b6e:	d1e9      	bne.n	5b44 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    5b70:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    5b72:	88a1      	ldrh	r1, [r4, #4]
    5b74:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    5b76:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    5b78:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    5b7a:	d10f      	bne.n	5b9c <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
    5b7c:	f7ff feb0 	bl	58e0 <gatt_indicate>
			if (err == 0) {
    5b80:	4606      	mov	r6, r0
    5b82:	b918      	cbnz	r0, 5b8c <notify_cb+0xb4>
				data->ind_params->_ref++;
    5b84:	6922      	ldr	r2, [r4, #16]
    5b86:	7d93      	ldrb	r3, [r2, #22]
    5b88:	3301      	adds	r3, #1
    5b8a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    5b8c:	4628      	mov	r0, r5
    5b8e:	f012 fd4a 	bl	18626 <bt_conn_unref>
		if (err < 0) {
    5b92:	2e00      	cmp	r6, #0
    5b94:	dbd7      	blt.n	5b46 <notify_cb+0x6e>
		data->err = 0;
    5b96:	2300      	movs	r3, #0
    5b98:	60a3      	str	r3, [r4, #8]
    5b9a:	e7d3      	b.n	5b44 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    5b9c:	f013 fe95 	bl	198ca <gatt_notify>
    5ba0:	4606      	mov	r6, r0
    5ba2:	e7f3      	b.n	5b8c <notify_cb+0xb4>
    5ba4:	0001964f 	.word	0x0001964f
    5ba8:	20000244 	.word	0x20000244
    5bac:	20002778 	.word	0x20002778

00005bb0 <bt_gatt_att_max_mtu_changed>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    5bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    5bb2:	4b08      	ldr	r3, [pc, #32]	; (5bd4 <bt_gatt_att_max_mtu_changed+0x24>)
    5bb4:	681c      	ldr	r4, [r3, #0]
    5bb6:	4605      	mov	r5, r0
    5bb8:	460e      	mov	r6, r1
    5bba:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    5bbc:	b14c      	cbz	r4, 5bd2 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    5bbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    5bc2:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    5bc4:	b11b      	cbz	r3, 5bce <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    5bc6:	463a      	mov	r2, r7
    5bc8:	4631      	mov	r1, r6
    5bca:	4628      	mov	r0, r5
    5bcc:	4798      	blx	r3
	return node->next;
    5bce:	6864      	ldr	r4, [r4, #4]
    5bd0:	e7f4      	b.n	5bbc <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    5bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bd4:	2000145c 	.word	0x2000145c

00005bd8 <db_hash_read>:
{
    5bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    5bda:	4915      	ldr	r1, [pc, #84]	; (5c30 <db_hash_read+0x58>)
{
    5bdc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    5be0:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    5be2:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    5be6:	461f      	mov	r7, r3
    5be8:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    5bea:	f014 ff1f 	bl	1aa2c <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5bee:	f3bf 8f5b 	dmb	ish
    5bf2:	4b10      	ldr	r3, [pc, #64]	; (5c34 <db_hash_read+0x5c>)
    5bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    5bf6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    5bfa:	075b      	lsls	r3, r3, #29
    5bfc:	d401      	bmi.n	5c02 <db_hash_read+0x2a>
		db_hash_gen(true);
    5bfe:	f7ff fe35 	bl	586c <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
    5c02:	2101      	movs	r1, #1
    5c04:	4620      	mov	r0, r4
    5c06:	f013 fe94 	bl	19932 <bt_gatt_change_aware>
	if (offset > value_len) {
    5c0a:	2e10      	cmp	r6, #16
    5c0c:	d80c      	bhi.n	5c28 <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
    5c0e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    5c12:	4909      	ldr	r1, [pc, #36]	; (5c38 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
    5c14:	42bc      	cmp	r4, r7
    5c16:	bfa8      	it	ge
    5c18:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    5c1a:	4622      	mov	r2, r4
    5c1c:	4431      	add	r1, r6
    5c1e:	4628      	mov	r0, r5
    5c20:	f011 ff6c 	bl	17afc <memcpy>
}
    5c24:	4620      	mov	r0, r4
    5c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5c28:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    5c2c:	e7fa      	b.n	5c24 <db_hash_read+0x4c>
    5c2e:	bf00      	nop
    5c30:	20000c60 	.word	0x20000c60
    5c34:	20000c88 	.word	0x20000c88
    5c38:	20000c20 	.word	0x20000c20

00005c3c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    5c3c:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    5c3e:	4603      	mov	r3, r0
    5c40:	4a14      	ldr	r2, [pc, #80]	; (5c94 <bt_gatt_disconnected+0x58>)
{
    5c42:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    5c44:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5c48:	2001      	movs	r0, #1
    5c4a:	f013 fe0e 	bl	1986a <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    5c4e:	4628      	mov	r0, r5
    5c50:	f7ff fc82 	bl	5558 <find_cf_cfg>
	if (!cfg) {
    5c54:	4604      	mov	r4, r0
    5c56:	b1e0      	cbz	r0, 5c92 <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    5c58:	f105 0688 	add.w	r6, r5, #136	; 0x88
    5c5c:	7a28      	ldrb	r0, [r5, #8]
    5c5e:	4631      	mov	r1, r6
    5c60:	f012 fa90 	bl	18184 <bt_addr_le_is_bonded>
    5c64:	b920      	cbnz	r0, 5c70 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    5c66:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    5c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    5c6c:	f013 bbbb 	b.w	193e6 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    5c70:	1c60      	adds	r0, r4, #1
    5c72:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5c74:	340c      	adds	r4, #12
    5c76:	f013 fb3c 	bl	192f2 <bt_addr_le_copy>
    5c7a:	f3bf 8f5b 	dmb	ish
    5c7e:	e854 3f00 	ldrex	r3, [r4]
    5c82:	f023 0302 	bic.w	r3, r3, #2
    5c86:	e844 3200 	strex	r2, r3, [r4]
    5c8a:	2a00      	cmp	r2, #0
    5c8c:	d1f7      	bne.n	5c7e <bt_gatt_disconnected+0x42>
    5c8e:	f3bf 8f5b 	dmb	ish
}
    5c92:	bd70      	pop	{r4, r5, r6, pc}
    5c94:	000055b5 	.word	0x000055b5

00005c98 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    5c98:	4b04      	ldr	r3, [pc, #16]	; (5cac <bt_smp_accept+0x14>)
    5c9a:	6818      	ldr	r0, [r3, #0]
    5c9c:	b918      	cbnz	r0, 5ca6 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    5c9e:	4a04      	ldr	r2, [pc, #16]	; (5cb0 <bt_smp_accept+0x18>)
    5ca0:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    5ca2:	600b      	str	r3, [r1, #0]

		return 0;
    5ca4:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    5ca6:	f06f 000b 	mvn.w	r0, #11
}
    5caa:	4770      	bx	lr
    5cac:	20000ce0 	.word	0x20000ce0
    5cb0:	0001b764 	.word	0x0001b764

00005cb4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    5cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cb8:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5cba:	1dc2      	adds	r2, r0, #7
    5cbc:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5cc0:	1e75      	subs	r5, r6, #1
{
    5cc2:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5cc4:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    5cc6:	6018      	str	r0, [r3, #0]
{
    5cc8:	b082      	sub	sp, #8
    5cca:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    5ccc:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    5cce:	2100      	movs	r1, #0
    5cd0:	2204      	movs	r2, #4
    5cd2:	fb07 0005 	mla	r0, r7, r5, r0
    5cd6:	f011 ff1c 	bl	17b12 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    5cda:	b1bd      	cbz	r5, 5d0c <mem_init+0x58>
    5cdc:	3e02      	subs	r6, #2
    5cde:	b2b6      	uxth	r6, r6
    5ce0:	fb06 7307 	mla	r3, r6, r7, r7
    5ce4:	fb06 f807 	mul.w	r8, r6, r7
    5ce8:	441c      	add	r4, r3
    5cea:	eba8 0803 	sub.w	r8, r8, r3
    5cee:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    5cf0:	2204      	movs	r2, #4
    5cf2:	eb04 0008 	add.w	r0, r4, r8
    5cf6:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    5cfa:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    5cfc:	f011 fefe 	bl	17afc <memcpy>
	while (mem_count--) {
    5d00:	42b5      	cmp	r5, r6
    5d02:	eba4 0407 	sub.w	r4, r4, r7
    5d06:	f105 0501 	add.w	r5, r5, #1
    5d0a:	d1f1      	bne.n	5cf0 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    5d0c:	b002      	add	sp, #8
    5d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d12:	bf00      	nop

00005d14 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    5d14:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    5d16:	6805      	ldr	r5, [r0, #0]
{
    5d18:	b082      	sub	sp, #8
	if (*mem_head) {
    5d1a:	b195      	cbz	r5, 5d42 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    5d1c:	1deb      	adds	r3, r5, #7
    5d1e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    5d22:	2204      	movs	r2, #4
    5d24:	4604      	mov	r4, r0
    5d26:	4629      	mov	r1, r5
    5d28:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    5d2c:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    5d2e:	f011 fee5 	bl	17afc <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    5d32:	9b01      	ldr	r3, [sp, #4]
    5d34:	b123      	cbz	r3, 5d40 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    5d36:	1dda      	adds	r2, r3, #7
    5d38:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    5d3c:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    5d3e:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    5d40:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    5d42:	4628      	mov	r0, r5
    5d44:	b002      	add	sp, #8
    5d46:	bd70      	pop	{r4, r5, r6, pc}

00005d48 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    5d48:	680b      	ldr	r3, [r1, #0]
{
    5d4a:	b570      	push	{r4, r5, r6, lr}
    5d4c:	460c      	mov	r4, r1
    5d4e:	4605      	mov	r5, r0
	if (*mem_head) {
    5d50:	b183      	cbz	r3, 5d74 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    5d52:	3307      	adds	r3, #7
    5d54:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    5d58:	881e      	ldrh	r6, [r3, #0]
    5d5a:	3601      	adds	r6, #1
    5d5c:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    5d5e:	2204      	movs	r2, #4
    5d60:	4621      	mov	r1, r4
    5d62:	4628      	mov	r0, r5
    5d64:	f011 feca 	bl	17afc <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    5d68:	1deb      	adds	r3, r5, #7
    5d6a:	f023 0303 	bic.w	r3, r3, #3
    5d6e:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    5d70:	6025      	str	r5, [r4, #0]
}
    5d72:	bd70      	pop	{r4, r5, r6, pc}
    5d74:	2601      	movs	r6, #1
    5d76:	e7f2      	b.n	5d5e <mem_release+0x16>

00005d78 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    5d78:	fb02 0001 	mla	r0, r2, r1, r0
    5d7c:	4770      	bx	lr
    5d7e:	bf00      	nop

00005d80 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    5d80:	1a40      	subs	r0, r0, r1
    5d82:	b280      	uxth	r0, r0
}
    5d84:	fbb0 f0f2 	udiv	r0, r0, r2
    5d88:	4770      	bx	lr
    5d8a:	bf00      	nop

00005d8c <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    5d8c:	1e53      	subs	r3, r2, #1
	src += len;
    5d8e:	4411      	add	r1, r2
	while (len--) {
    5d90:	b29b      	uxth	r3, r3
    5d92:	b142      	cbz	r2, 5da6 <mem_rcopy+0x1a>
    5d94:	43db      	mvns	r3, r3
    5d96:	3801      	subs	r0, #1
    5d98:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    5d9a:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    5d9e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    5da2:	4291      	cmp	r1, r2
    5da4:	d1f9      	bne.n	5d9a <mem_rcopy+0xe>
	}
}
    5da6:	4770      	bx	lr

00005da8 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    5da8:	4401      	add	r1, r0
    5daa:	e002      	b.n	5db2 <mem_nz+0xa>
		if (*src++) {
    5dac:	f810 3b01 	ldrb.w	r3, [r0], #1
    5db0:	b91b      	cbnz	r3, 5dba <mem_nz+0x12>
	while (len--) {
    5db2:	4288      	cmp	r0, r1
    5db4:	d1fa      	bne.n	5dac <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    5db6:	2000      	movs	r0, #0
    5db8:	4770      	bx	lr
			return 1;
    5dba:	2001      	movs	r0, #1
}
    5dbc:	4770      	bx	lr
    5dbe:	bf00      	nop

00005dc0 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    5dc0:	6010      	str	r0, [r2, #0]
    5dc2:	6008      	str	r0, [r1, #0]

	return link;
}
    5dc4:	4770      	bx	lr
    5dc6:	bf00      	nop

00005dc8 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    5dc8:	680a      	ldr	r2, [r1, #0]
{
    5dca:	4603      	mov	r3, r0
	if (*head != *tail) {
    5dcc:	6800      	ldr	r0, [r0, #0]
    5dce:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    5dd0:	bf05      	ittet	eq
    5dd2:	2200      	moveq	r2, #0
    5dd4:	600a      	streq	r2, [r1, #0]
		return NULL;
    5dd6:	2000      	movne	r0, #0
	*head = *tail = NULL;
    5dd8:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    5dda:	4770      	bx	lr

00005ddc <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    5ddc:	f8d2 c000 	ldr.w	ip, [r2]
    5de0:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    5de4:	f8d2 c000 	ldr.w	ip, [r2]
    5de8:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    5dec:	6010      	str	r0, [r2, #0]

	return link;
}
    5dee:	4770      	bx	lr

00005df0 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    5df0:	4288      	cmp	r0, r1
    5df2:	d003      	beq.n	5dfc <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    5df4:	b11a      	cbz	r2, 5dfe <memq_peek+0xe>
		*mem = head->mem;
    5df6:	6843      	ldr	r3, [r0, #4]
    5df8:	6013      	str	r3, [r2, #0]
    5dfa:	4770      	bx	lr
		return NULL;
    5dfc:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    5dfe:	4770      	bx	lr

00005e00 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    5e00:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    5e02:	4283      	cmp	r3, r0
    5e04:	d009      	beq.n	5e1a <memq_dequeue+0x1a>
	if (mem) {
    5e06:	b12a      	cbz	r2, 5e14 <memq_dequeue+0x14>
		*mem = head->mem;
    5e08:	6858      	ldr	r0, [r3, #4]
    5e0a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    5e0c:	681a      	ldr	r2, [r3, #0]
    5e0e:	600a      	str	r2, [r1, #0]

	return old_head;
}
    5e10:	4618      	mov	r0, r3
    5e12:	4770      	bx	lr
	if (old_head == NULL) {
    5e14:	2b00      	cmp	r3, #0
    5e16:	d1f9      	bne.n	5e0c <memq_dequeue+0xc>
    5e18:	e7fa      	b.n	5e10 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    5e1a:	2300      	movs	r3, #0
    5e1c:	e7f8      	b.n	5e10 <memq_dequeue+0x10>
    5e1e:	bf00      	nop

00005e20 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    5e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e24:	f8df 8030 	ldr.w	r8, [pc, #48]	; 5e58 <mayfly_init+0x38>
    5e28:	4e0c      	ldr	r6, [pc, #48]	; (5e5c <mayfly_init+0x3c>)
    5e2a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    5e2c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    5e30:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    5e32:	1d22      	adds	r2, r4, #4
    5e34:	4621      	mov	r1, r4
    5e36:	4628      	mov	r0, r5
		while (caller_id--) {
    5e38:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    5e3a:	f7ff ffc1 	bl	5dc0 <memq_init>
		while (caller_id--) {
    5e3e:	42b4      	cmp	r4, r6
    5e40:	f1a5 0508 	sub.w	r5, r5, #8
    5e44:	d1f5      	bne.n	5e32 <mayfly_init+0x12>
	while (callee_id--) {
    5e46:	3f04      	subs	r7, #4
    5e48:	1d3b      	adds	r3, r7, #4
    5e4a:	f1a8 0820 	sub.w	r8, r8, #32
    5e4e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    5e52:	d1eb      	bne.n	5e2c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    5e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e58:	200014f4 	.word	0x200014f4
    5e5c:	20001584 	.word	0x20001584

00005e60 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    5e60:	b410      	push	{r4}
    5e62:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    5e64:	4c15      	ldr	r4, [pc, #84]	; (5ebc <mayfly_enable+0x5c>)
{
    5e66:	468c      	mov	ip, r1
	if (enable) {
    5e68:	b192      	cbz	r2, 5e90 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    5e6a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    5e6e:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    5e72:	0100      	lsls	r0, r0, #4
    5e74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    5e78:	4421      	add	r1, r4
    5e7a:	7a48      	ldrb	r0, [r1, #9]
    5e7c:	7a0c      	ldrb	r4, [r1, #8]
    5e7e:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    5e80:	bf04      	itt	eq
    5e82:	3001      	addeq	r0, #1
    5e84:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    5e86:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    5e88:	4661      	mov	r1, ip
    5e8a:	4618      	mov	r0, r3
    5e8c:	f00d b83a 	b.w	12f04 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    5e90:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    5e94:	0112      	lsls	r2, r2, #4
    5e96:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    5e9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5e9e:	4423      	add	r3, r4
    5ea0:	7a9c      	ldrb	r4, [r3, #10]
    5ea2:	7ada      	ldrb	r2, [r3, #11]
    5ea4:	42a2      	cmp	r2, r4
    5ea6:	d001      	beq.n	5eac <mayfly_enable+0x4c>
}
    5ea8:	bc10      	pop	{r4}
    5eaa:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    5eac:	3201      	adds	r2, #1
    5eae:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    5eb0:	4b03      	ldr	r3, [pc, #12]	; (5ec0 <mayfly_enable+0x60>)
    5eb2:	2201      	movs	r2, #1
    5eb4:	545a      	strb	r2, [r3, r1]
}
    5eb6:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    5eb8:	f00d b87a 	b.w	12fb0 <mayfly_pend>
    5ebc:	20001500 	.word	0x20001500
    5ec0:	200014fc 	.word	0x200014fc

00005ec4 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    5ec4:	b570      	push	{r4, r5, r6, lr}
    5ec6:	b082      	sub	sp, #8
    5ec8:	4606      	mov	r6, r0
    5eca:	9101      	str	r1, [sp, #4]
    5ecc:	461c      	mov	r4, r3
    5ece:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    5ed0:	b32a      	cbz	r2, 5f1e <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    5ed2:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    5ed4:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    5ed6:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    5ed8:	f012 0203 	ands.w	r2, r2, #3
    5edc:	d005      	beq.n	5eea <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
    5ede:	2a01      	cmp	r2, #1
    5ee0:	d042      	beq.n	5f68 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    5ee2:	3301      	adds	r3, #1
    5ee4:	b2db      	uxtb	r3, r3
    5ee6:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    5ee8:	e00f      	b.n	5f0a <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    5eea:	3301      	adds	r3, #1
    5eec:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    5eee:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
    5ef0:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    5ef2:	2304      	movs	r3, #4
    5ef4:	fb11 3105 	smlabb	r1, r1, r5, r3
    5ef8:	4a1c      	ldr	r2, [pc, #112]	; (5f6c <mayfly_enqueue+0xa8>)
    5efa:	6860      	ldr	r0, [r4, #4]
    5efc:	230c      	movs	r3, #12
    5efe:	fb13 1306 	smlabb	r3, r3, r6, r1
    5f02:	441a      	add	r2, r3
    5f04:	4621      	mov	r1, r4
    5f06:	f7ff ff69 	bl	5ddc <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    5f0a:	4b19      	ldr	r3, [pc, #100]	; (5f70 <mayfly_enqueue+0xac>)
    5f0c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    5f0e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    5f10:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    5f12:	4629      	mov	r1, r5
    5f14:	f00d f84c 	bl	12fb0 <mayfly_pend>

	return 0;
    5f18:	2000      	movs	r0, #0
}
    5f1a:	b002      	add	sp, #8
    5f1c:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    5f1e:	f00d f831 	bl	12f84 <mayfly_prio_is_equal>
    5f22:	2800      	cmp	r0, #0
    5f24:	d0d5      	beq.n	5ed2 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
    5f26:	4629      	mov	r1, r5
    5f28:	4630      	mov	r0, r6
    5f2a:	f00d f80b 	bl	12f44 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    5f2e:	2800      	cmp	r0, #0
    5f30:	d0cf      	beq.n	5ed2 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
    5f32:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5f36:	0112      	lsls	r2, r2, #4
    5f38:	490c      	ldr	r1, [pc, #48]	; (5f6c <mayfly_enqueue+0xa8>)
    5f3a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    5f3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5f42:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    5f44:	7a9a      	ldrb	r2, [r3, #10]
    5f46:	7adb      	ldrb	r3, [r3, #11]
    5f48:	429a      	cmp	r2, r3
    5f4a:	d1c2      	bne.n	5ed2 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
    5f4c:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    5f4e:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    5f50:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    5f52:	0792      	lsls	r2, r2, #30
    5f54:	d002      	beq.n	5f5c <mayfly_enqueue+0x98>
		m->_req = ack + 2;
    5f56:	3302      	adds	r3, #2
    5f58:	b2db      	uxtb	r3, r3
    5f5a:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    5f5c:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    5f60:	4798      	blx	r3
		return 0;
    5f62:	2000      	movs	r0, #0
}
    5f64:	b002      	add	sp, #8
    5f66:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    5f68:	4610      	mov	r0, r2
    5f6a:	e7d6      	b.n	5f1a <mayfly_enqueue+0x56>
    5f6c:	20001500 	.word	0x20001500
    5f70:	200014fc 	.word	0x200014fc

00005f74 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    5f74:	4a50      	ldr	r2, [pc, #320]	; (60b8 <mayfly_run+0x144>)
    5f76:	5c13      	ldrb	r3, [r2, r0]
    5f78:	2b00      	cmp	r3, #0
    5f7a:	f000 809b 	beq.w	60b4 <mayfly_run+0x140>
{
    5f7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
    5f82:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    5f84:	4f4d      	ldr	r7, [pc, #308]	; (60bc <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
    5f86:	5413      	strb	r3, [r2, r0]
{
    5f88:	b087      	sub	sp, #28
	uint8_t enable = 0U;
    5f8a:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    5f8c:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
    5f90:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    5f94:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
    5f98:	9303      	str	r3, [sp, #12]
    5f9a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    5f9e:	f10b 0804 	add.w	r8, fp, #4
    5fa2:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
    5fa6:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
    5faa:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    5fac:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    5fb0:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    5fb2:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    5fb4:	f7ff ff1c 	bl	5df0 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    5fb8:	f107 0624 	add.w	r6, r7, #36	; 0x24
    5fbc:	4683      	mov	fp, r0
    5fbe:	2800      	cmp	r0, #0
    5fc0:	d034      	beq.n	602c <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    5fc2:	9c05      	ldr	r4, [sp, #20]
    5fc4:	7863      	ldrb	r3, [r4, #1]
    5fc6:	7825      	ldrb	r5, [r4, #0]
    5fc8:	1aed      	subs	r5, r5, r3
    5fca:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    5fce:	2d01      	cmp	r5, #1
    5fd0:	d106      	bne.n	5fe0 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    5fd2:	3b01      	subs	r3, #1
    5fd4:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    5fd6:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
    5fda:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    5fdc:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    5fde:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    5fe0:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    5fe2:	1ac3      	subs	r3, r0, r3
    5fe4:	f003 0303 	and.w	r3, r3, #3
    5fe8:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    5fea:	f04f 0200 	mov.w	r2, #0
    5fee:	4631      	mov	r1, r6
	req = m->_req;
    5ff0:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    5ff4:	d00f      	beq.n	6016 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
    5ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5ff8:	f7ff ff02 	bl	5e00 <memq_dequeue>
		ack = m->_ack;
    5ffc:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    6000:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    6002:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    6006:	eba3 030c 	sub.w	r3, r3, ip
    600a:	f003 0303 	and.w	r3, r3, #3
    600e:	2b01      	cmp	r3, #1
		m->_ack = req;
    6010:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    6014:	d046      	beq.n	60a4 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    6016:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    601a:	aa05      	add	r2, sp, #20
    601c:	f7ff fee8 	bl	5df0 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    6020:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    6022:	9000      	str	r0, [sp, #0]
    6024:	4683      	mov	fp, r0
			if (state == 1U) {
    6026:	d02b      	beq.n	6080 <mayfly_run+0x10c>
		while (link) {
    6028:	2800      	cmp	r0, #0
    602a:	d1ca      	bne.n	5fc2 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    602c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    6030:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    6034:	429a      	cmp	r2, r3
    6036:	d003      	beq.n	6040 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    6038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    603c:	2301      	movs	r3, #1
    603e:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    6040:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    6044:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    6048:	429a      	cmp	r2, r3
    604a:	d003      	beq.n	6054 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    604c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    6050:	2301      	movs	r3, #1
    6052:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    6054:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    6058:	fa5f f989 	uxtb.w	r9, r9
    605c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    6060:	f1a7 070c 	sub.w	r7, r7, #12
    6064:	d1a1      	bne.n	5faa <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    6066:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    606a:	b1c3      	cbz	r3, 609e <mayfly_run+0x12a>
    606c:	9b03      	ldr	r3, [sp, #12]
    606e:	b9b3      	cbnz	r3, 609e <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
    6070:	461a      	mov	r2, r3
    6072:	4651      	mov	r1, sl
    6074:	4650      	mov	r0, sl
	}
}
    6076:	b007      	add	sp, #28
    6078:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    607c:	f00c bf42 	b.w	12f04 <mayfly_enable_cb>
				if (caller_id || link) {
    6080:	f1b9 0f00 	cmp.w	r9, #0
    6084:	d101      	bne.n	608a <mayfly_run+0x116>
    6086:	2800      	cmp	r0, #0
    6088:	d0d0      	beq.n	602c <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
    608a:	f8dd a008 	ldr.w	sl, [sp, #8]
    608e:	4a0a      	ldr	r2, [pc, #40]	; (60b8 <mayfly_run+0x144>)
    6090:	2301      	movs	r3, #1
    6092:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    6096:	4651      	mov	r1, sl
    6098:	4650      	mov	r0, sl
    609a:	f00c ff89 	bl	12fb0 <mayfly_pend>
}
    609e:	b007      	add	sp, #28
    60a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    60a4:	4642      	mov	r2, r8
    60a6:	4621      	mov	r1, r4
    60a8:	4658      	mov	r0, fp
			m->_ack = ack;
    60aa:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    60ae:	f7ff fe95 	bl	5ddc <memq_enqueue>
    60b2:	e7b0      	b.n	6016 <mayfly_run+0xa2>
    60b4:	4770      	bx	lr
    60b6:	bf00      	nop
    60b8:	200014fc 	.word	0x200014fc
    60bc:	20001500 	.word	0x20001500

000060c0 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    60c0:	1e4b      	subs	r3, r1, #1
    60c2:	b2db      	uxtb	r3, r3
    60c4:	b171      	cbz	r1, 60e4 <util_ones_count_get+0x24>
    60c6:	1e41      	subs	r1, r0, #1
    60c8:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    60cc:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    60ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    60d2:	b123      	cbz	r3, 60de <util_ones_count_get+0x1e>
			bite &= (bite - 1);
    60d4:	1e5a      	subs	r2, r3, #1
			one_count++;
    60d6:	3001      	adds	r0, #1
		while (bite) {
    60d8:	4013      	ands	r3, r2
			one_count++;
    60da:	b2c0      	uxtb	r0, r0
		while (bite) {
    60dc:	d1fa      	bne.n	60d4 <util_ones_count_get+0x14>
	while (octets_len--) {
    60de:	4561      	cmp	r1, ip
    60e0:	d1f5      	bne.n	60ce <util_ones_count_get+0xe>
    60e2:	4770      	bx	lr
	uint8_t one_count = 0U;
    60e4:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    60e6:	4770      	bx	lr

000060e8 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
    60e8:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    60ea:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
    60ec:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    60ee:	2bff      	cmp	r3, #255	; 0xff
    60f0:	d014      	beq.n	611c <ticker_dequeue+0x34>
		ticker_current = &node[current];
    60f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
    60f6:	428b      	cmp	r3, r1
		ticker_current = &node[current];
    60f8:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
    60fc:	d028      	beq.n	6150 <ticker_dequeue+0x68>
	total = 0U;
    60fe:	f04f 0c00 	mov.w	ip, #0
    6102:	e001      	b.n	6108 <ticker_dequeue+0x20>
		if (current == id) {
    6104:	4299      	cmp	r1, r3
    6106:	d00b      	beq.n	6120 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
    6108:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
    610a:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
    610c:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
    610e:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    6110:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    6114:	44a4      	add	ip, r4
		ticker_current = &node[current];
    6116:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
    611a:	d1f3      	bne.n	6104 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    611c:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    611e:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
    6120:	4571      	cmp	r1, lr
    6122:	d018      	beq.n	6156 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
    6124:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
    6126:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
    6128:	fa0f fe8e 	sxth.w	lr, lr
    612c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    6130:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    6134:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
    6138:	7813      	ldrb	r3, [r2, #0]
    613a:	2bff      	cmp	r3, #255	; 0xff
    613c:	d006      	beq.n	614c <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
    613e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6142:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    6146:	68ab      	ldr	r3, [r5, #8]
    6148:	4403      	add	r3, r0
    614a:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
    614c:	4460      	add	r0, ip
}
    614e:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
    6150:	469e      	mov	lr, r3
	total = 0U;
    6152:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
    6156:	7813      	ldrb	r3, [r2, #0]
    6158:	7743      	strb	r3, [r0, #29]
    615a:	e7e4      	b.n	6126 <ticker_dequeue+0x3e>

0000615c <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    615c:	eba2 0c01 	sub.w	ip, r2, r1
    6160:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    6164:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    6166:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    6168:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    616a:	d10a      	bne.n	6182 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    616c:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    6170:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    6172:	42a3      	cmp	r3, r4
    6174:	d914      	bls.n	61a0 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
    6176:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    6178:	2100      	movs	r1, #0
}
    617a:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    617c:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    617e:	6141      	str	r1, [r0, #20]
}
    6180:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6182:	1a89      	subs	r1, r1, r2
    6184:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    6188:	428b      	cmp	r3, r1
    618a:	d806      	bhi.n	619a <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
    618c:	4421      	add	r1, r4
    618e:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    6190:	2300      	movs	r3, #0
}
    6192:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    6194:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    6196:	6141      	str	r1, [r0, #20]
}
    6198:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
    619a:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    619c:	42a3      	cmp	r3, r4
    619e:	d8ea      	bhi.n	6176 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
    61a0:	1ae1      	subs	r1, r4, r3
    61a2:	e7f5      	b.n	6190 <ticks_to_expire_prep+0x34>

000061a4 <ticker_job_list_insert>:
{
    61a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61a8:	b087      	sub	sp, #28
    61aa:	4603      	mov	r3, r0
	count_user = instance->count_user;
    61ac:	7a42      	ldrb	r2, [r0, #9]
{
    61ae:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
    61b0:	6800      	ldr	r0, [r0, #0]
    61b2:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
    61b4:	6858      	ldr	r0, [r3, #4]
    61b6:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    61b8:	2a00      	cmp	r2, #0
    61ba:	f000 80f4 	beq.w	63a6 <ticker_job_list_insert+0x202>
    61be:	1e53      	subs	r3, r2, #1
    61c0:	b2db      	uxtb	r3, r3
    61c2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    61c6:	460f      	mov	r7, r1
    61c8:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    61ca:	9b03      	ldr	r3, [sp, #12]
    61cc:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    61ce:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    61d0:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    61d2:	2fff      	cmp	r7, #255	; 0xff
    61d4:	d05e      	beq.n	6294 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
    61d6:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    61da:	9b02      	ldr	r3, [sp, #8]
    61dc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    61e0:	46b8      	mov	r8, r7
				insert_head = ticker->next;
    61e2:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
    61e6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    61ea:	2500      	movs	r5, #0
	node = &instance->nodes[0];
    61ec:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
    61ee:	f04f 09ff 	mov.w	r9, #255	; 0xff
    61f2:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
    61f6:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
    61fa:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
    61fc:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    6200:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
    6202:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    6206:	d10f      	bne.n	6228 <ticker_job_list_insert+0x84>
    6208:	e0c8      	b.n	639c <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    620a:	1a09      	subs	r1, r1, r0
    620c:	d106      	bne.n	621c <ticker_job_list_insert+0x78>
    620e:	f8bb a01e 	ldrh.w	sl, [fp, #30]
    6212:	f8bc c01e 	ldrh.w	ip, [ip, #30]
    6216:	45e2      	cmp	sl, ip
    6218:	f200 8086 	bhi.w	6328 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
    621c:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    6220:	2bff      	cmp	r3, #255	; 0xff
    6222:	4691      	mov	r9, r2
    6224:	d072      	beq.n	630c <ticker_job_list_insert+0x168>
    6226:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
    6228:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    622c:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
    6230:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    6232:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    6236:	4288      	cmp	r0, r1
    6238:	d9e7      	bls.n	620a <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
    623a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    623e:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    6242:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
    6246:	d166      	bne.n	6316 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
    6248:	9b01      	ldr	r3, [sp, #4]
    624a:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    624e:	2aff      	cmp	r2, #255	; 0xff
    6250:	d008      	beq.n	6264 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
    6252:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6256:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
    625a:	f8de 3008 	ldr.w	r3, [lr, #8]
    625e:	1a5b      	subs	r3, r3, r1
    6260:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
    6264:	78a3      	ldrb	r3, [r4, #2]
    6266:	3301      	adds	r3, #1
    6268:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    626a:	2d00      	cmp	r5, #0
    626c:	d0b1      	beq.n	61d2 <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    626e:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    6272:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    6274:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    6276:	2200      	movs	r2, #0
    6278:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    627a:	b113      	cbz	r3, 6282 <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    627c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    627e:	4610      	mov	r0, r2
    6280:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    6282:	6863      	ldr	r3, [r4, #4]
    6284:	2b00      	cmp	r3, #0
    6286:	d1a4      	bne.n	61d2 <ticker_job_list_insert+0x2e>
					ticker->op_context =
    6288:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
    628c:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
    628e:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    6292:	d1a0      	bne.n	61d6 <ticker_job_list_insert+0x32>
    6294:	9b03      	ldr	r3, [sp, #12]
    6296:	7898      	ldrb	r0, [r3, #2]
    6298:	42b0      	cmp	r0, r6
    629a:	d02f      	beq.n	62fc <ticker_job_list_insert+0x158>
    629c:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
    62a0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    62a4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
    62a8:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    62ac:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
    62b0:	3601      	adds	r6, #1
    62b2:	b2f6      	uxtb	r6, r6
					first = 0U;
    62b4:	42b1      	cmp	r1, r6
    62b6:	bf08      	it	eq
    62b8:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    62ba:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
    62bc:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    62c0:	d11a      	bne.n	62f8 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
    62c2:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    62c6:	9902      	ldr	r1, [sp, #8]
    62c8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
    62cc:	eb01 1403 	add.w	r4, r1, r3, lsl #4
    62d0:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
    62d4:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
    62d6:	7863      	ldrb	r3, [r4, #1]
    62d8:	1a5b      	subs	r3, r3, r1
    62da:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    62de:	d025      	beq.n	632c <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    62e0:	f04f 0300 	mov.w	r3, #0
    62e4:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
    62e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
    62ea:	2001      	movs	r0, #1
	user_op->status = status;
    62ec:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    62ee:	b10b      	cbz	r3, 62f4 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    62f0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    62f2:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    62f4:	f89b 0002 	ldrb.w	r0, [fp, #2]
    62f8:	42b0      	cmp	r0, r6
    62fa:	d1d1      	bne.n	62a0 <ticker_job_list_insert+0xfc>
	while (count_user--) {
    62fc:	9a03      	ldr	r2, [sp, #12]
    62fe:	9905      	ldr	r1, [sp, #20]
    6300:	4291      	cmp	r1, r2
    6302:	f1a2 0308 	sub.w	r3, r2, #8
    6306:	d04e      	beq.n	63a6 <ticker_job_list_insert+0x202>
    6308:	9303      	str	r3, [sp, #12]
    630a:	e75e      	b.n	61ca <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
    630c:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    6310:	f88b 3000 	strb.w	r3, [fp]
    6314:	461a      	mov	r2, r3
		node[previous].next = id;
    6316:	fa0f f989 	sxth.w	r9, r9
    631a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    631e:	ea4f 1909 	mov.w	r9, r9, lsl #4
    6322:	f80e 8009 	strb.w	r8, [lr, r9]
    6326:	e792      	b.n	624e <ticker_job_list_insert+0xaa>
    6328:	4601      	mov	r1, r0
    632a:	e786      	b.n	623a <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    632c:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    632e:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
    6330:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
    6334:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
    6336:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    633a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    633e:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
    6340:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    6344:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    6348:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    634c:	d024      	beq.n	6398 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
    634e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6352:	1ad3      	subs	r3, r2, r3
    6354:	fab3 f383 	clz	r3, r3
    6358:	095b      	lsrs	r3, r3, #5
    635a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    635e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    6362:	429a      	cmp	r2, r3
    6364:	bf88      	it	hi
    6366:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
    6368:	69ab      	ldr	r3, [r5, #24]
    636a:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    636c:	69eb      	ldr	r3, [r5, #28]
    636e:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    6370:	6a2b      	ldr	r3, [r5, #32]
    6372:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    6374:	68ab      	ldr	r3, [r5, #8]
    6376:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    6378:	2300      	movs	r3, #0
	ticker->lazy_periodic =
    637a:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
    637c:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    637e:	686a      	ldr	r2, [r5, #4]
    6380:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    6382:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    6384:	f7ff feea 	bl	615c <ticks_to_expire_prep>
	ticker->force = 1U;
    6388:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    638c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    6390:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
    6394:	70e3      	strb	r3, [r4, #3]
}
    6396:	e729      	b.n	61ec <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
    6398:	461a      	mov	r2, r3
    639a:	e7e5      	b.n	6368 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
    639c:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
    63a0:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    63a4:	e75e      	b.n	6264 <ticker_job_list_insert+0xc0>
}
    63a6:	b007      	add	sp, #28
    63a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000063ac <ticker_worker>:
{
    63ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    63b0:	7f82      	ldrb	r2, [r0, #30]
{
    63b2:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    63b4:	2301      	movs	r3, #1
	if (instance->job_guard) {
    63b6:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    63b8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    63ba:	2a00      	cmp	r2, #0
    63bc:	d15b      	bne.n	6476 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
    63be:	7f43      	ldrb	r3, [r0, #29]
    63c0:	2bff      	cmp	r3, #255	; 0xff
    63c2:	4681      	mov	r9, r0
    63c4:	d056      	beq.n	6474 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    63c6:	f00c f8ef 	bl	125a8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    63ca:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    63ce:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    63d2:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    63d6:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    63d8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    63da:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    63de:	f000 813c 	beq.w	665a <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    63e2:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    63e6:	42bb      	cmp	r3, r7
    63e8:	bf94      	ite	ls
    63ea:	2300      	movls	r3, #0
    63ec:	2301      	movhi	r3, #1
    63ee:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    63f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
    63f4:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
    63f8:	f000 8145 	beq.w	6686 <ticker_worker+0x2da>
	ticks_expired = 0U;
    63fc:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
    6400:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    6404:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    6408:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
    640c:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    6410:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    6412:	42bb      	cmp	r3, r7
    6414:	d837      	bhi.n	6486 <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    6416:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
    6418:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
    641c:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    641e:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    6420:	7863      	ldrb	r3, [r4, #1]
    6422:	1a5b      	subs	r3, r3, r1
    6424:	b2db      	uxtb	r3, r3
    6426:	2b01      	cmp	r3, #1
    6428:	d12a      	bne.n	6480 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
    642a:	69a6      	ldr	r6, [r4, #24]
    642c:	2e00      	cmp	r6, #0
    642e:	d054      	beq.n	64da <ticker_worker+0x12e>
    6430:	9b03      	ldr	r3, [sp, #12]
    6432:	2b00      	cmp	r3, #0
    6434:	d04c      	beq.n	64d0 <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
    6436:	8be3      	ldrh	r3, [r4, #30]
    6438:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    643a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    643c:	b13b      	cbz	r3, 644e <ticker_worker+0xa2>
    643e:	681a      	ldr	r2, [r3, #0]
    6440:	b11a      	cbz	r2, 644a <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    6442:	7a1a      	ldrb	r2, [r3, #8]
    6444:	2a00      	cmp	r2, #0
    6446:	f000 80ef 	beq.w	6628 <ticker_worker+0x27c>
				ext_data->reschedule_state =
    644a:	2200      	movs	r2, #0
    644c:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    644e:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    6450:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    6454:	3201      	adds	r2, #1
    6456:	b292      	uxth	r2, r2
    6458:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    645a:	b178      	cbz	r0, 647c <ticker_worker+0xd0>
    645c:	8ba0      	ldrh	r0, [r4, #28]
    645e:	4290      	cmp	r0, r2
    6460:	d20c      	bcs.n	647c <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    6462:	2b00      	cmp	r3, #0
    6464:	f000 80fc 	beq.w	6660 <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    6468:	7a1a      	ldrb	r2, [r3, #8]
    646a:	2a01      	cmp	r2, #1
    646c:	d006      	beq.n	647c <ticker_worker+0xd0>
			must_expire_skip = 1U;
    646e:	f04f 0c01 	mov.w	ip, #1
    6472:	e036      	b.n	64e2 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    6474:	77c2      	strb	r2, [r0, #31]
}
    6476:	b00f      	add	sp, #60	; 0x3c
    6478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    647c:	3901      	subs	r1, #1
    647e:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    6480:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    6484:	d1be      	bne.n	6404 <ticker_worker+0x58>
    6486:	f8dd 9010 	ldr.w	r9, [sp, #16]
    648a:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    648c:	f899 300b 	ldrb.w	r3, [r9, #11]
    6490:	f899 200a 	ldrb.w	r2, [r9, #10]
    6494:	429a      	cmp	r2, r3
    6496:	d10a      	bne.n	64ae <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
    6498:	3201      	adds	r2, #1
    649a:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    649c:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    649e:	bf1c      	itt	ne
    64a0:	4613      	movne	r3, r2
    64a2:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    64a4:	9a06      	ldr	r2, [sp, #24]
    64a6:	f889 200b 	strb.w	r2, [r9, #11]
    64aa:	bf08      	it	eq
    64ac:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    64ae:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    64b2:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    64b6:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
    64b8:	2200      	movs	r2, #0
    64ba:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    64be:	464b      	mov	r3, r9
    64c0:	2201      	movs	r2, #1
    64c2:	2104      	movs	r1, #4
    64c4:	2003      	movs	r0, #3
    64c6:	46a4      	mov	ip, r4
}
    64c8:	b00f      	add	sp, #60	; 0x3c
    64ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    64ce:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    64d0:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    64d4:	9307      	str	r3, [sp, #28]
    64d6:	3380      	adds	r3, #128	; 0x80
    64d8:	d141      	bne.n	655e <ticker_worker+0x1b2>
		if (ticker->ext_data) {
    64da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    64dc:	b1f3      	cbz	r3, 651c <ticker_worker+0x170>
    64de:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
    64e2:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
    64e4:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
    64e6:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    64e8:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
    64ea:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
    64ec:	605a      	str	r2, [r3, #4]
		ticker->ack--;
    64ee:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
    64f0:	2d00      	cmp	r5, #0
    64f2:	d0c5      	beq.n	6480 <ticker_worker+0xd4>
					   ticks_expired -
    64f4:	9b04      	ldr	r3, [sp, #16]
    64f6:	6960      	ldr	r0, [r4, #20]
    64f8:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    64fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    64fc:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    64fe:	ebaa 0000 	sub.w	r0, sl, r0
    6502:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    6504:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
    6508:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
    650a:	f1bc 0f00 	cmp.w	ip, #0
    650e:	d016      	beq.n	653e <ticker_worker+0x192>
    6510:	e9cd 3600 	strd	r3, r6, [sp]
    6514:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6518:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    651a:	e7b1      	b.n	6480 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
    651c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    651e:	3901      	subs	r1, #1
    6520:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
    6522:	2d00      	cmp	r5, #0
    6524:	d0ac      	beq.n	6480 <ticker_worker+0xd4>
			ticks_drift = 0U;
    6526:	4619      	mov	r1, r3
					   ticks_expired -
    6528:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    652a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    652c:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    652e:	ebaa 0003 	sub.w	r0, sl, r3
    6532:	9b04      	ldr	r3, [sp, #16]
    6534:	695b      	ldr	r3, [r3, #20]
    6536:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
    6538:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
    653a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    653e:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    6542:	e9cd 3600 	strd	r3, r6, [sp]
    6546:	4663      	mov	r3, ip
    6548:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    654a:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
    654c:	2b00      	cmp	r3, #0
    654e:	9b03      	ldr	r3, [sp, #12]
    6550:	bf18      	it	ne
    6552:	2301      	movne	r3, #1
    6554:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
    6556:	2300      	movs	r3, #0
    6558:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
    655a:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    655c:	e790      	b.n	6480 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    655e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    6562:	d0ba      	beq.n	64da <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
    6564:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    6566:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    6568:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
    656a:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    656c:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
    656e:	bf28      	it	cs
    6570:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
    6572:	fb02 5005 	mla	r0, r2, r5, r5
    6576:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
    6578:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
    657a:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
    657e:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
    6580:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
    6584:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
    6586:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
    6588:	46a0      	mov	r8, r4
    658a:	f04f 0c00 	mov.w	ip, #0
    658e:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
    6590:	b21b      	sxth	r3, r3
    6592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6596:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
    659a:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    659c:	f8d2 e008 	ldr.w	lr, [r2, #8]
    65a0:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    65a2:	4566      	cmp	r6, ip
    65a4:	d339      	bcc.n	661a <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
    65a6:	6991      	ldr	r1, [r2, #24]
    65a8:	b399      	cbz	r1, 6612 <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
    65aa:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    65ac:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    65ae:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
    65b2:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    65b6:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
    65b8:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
    65ba:	bf28      	it	cs
    65bc:	1a0d      	subcs	r5, r1, r0
					  0U :
    65be:	f1b9 0f00 	cmp.w	r9, #0
    65c2:	d03e      	beq.n	6642 <ticker_worker+0x296>
    65c4:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
    65c8:	b3bc      	cbz	r4, 663a <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    65ca:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
    65ce:	f8dd 9020 	ldr.w	r9, [sp, #32]
    65d2:	45f1      	cmp	r9, lr
    65d4:	bf8c      	ite	hi
    65d6:	f04f 0e01 	movhi.w	lr, #1
    65da:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
    65de:	bf34      	ite	cc
    65e0:	f04f 0901 	movcc.w	r9, #1
    65e4:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
    65e8:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
    65ea:	f892 a003 	ldrb.w	sl, [r2, #3]
    65ee:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
    65f2:	d30e      	bcc.n	6612 <ticker_worker+0x266>
    65f4:	4592      	cmp	sl, r2
    65f6:	d829      	bhi.n	664c <ticker_worker+0x2a0>
			    (next_force ||
    65f8:	f117 0f80 	cmn.w	r7, #128	; 0x80
    65fc:	d026      	beq.n	664c <ticker_worker+0x2a0>
			     next_is_critical ||
    65fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    6600:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
    6602:	4295      	cmp	r5, r2
    6604:	dd02      	ble.n	660c <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
    6606:	f1be 0f00 	cmp.w	lr, #0
    660a:	d01f      	beq.n	664c <ticker_worker+0x2a0>
    660c:	9a07      	ldr	r2, [sp, #28]
    660e:	42ba      	cmp	r2, r7
    6610:	d019      	beq.n	6646 <ticker_worker+0x29a>
			id_head = ticker_next->next;
    6612:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
    6616:	2bff      	cmp	r3, #255	; 0xff
    6618:	d1ba      	bne.n	6590 <ticker_worker+0x1e4>
    661a:	4644      	mov	r4, r8
    661c:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    6620:	990a      	ldr	r1, [sp, #40]	; 0x28
    6622:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    6626:	e758      	b.n	64da <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
    6628:	8ba2      	ldrh	r2, [r4, #28]
    662a:	9805      	ldr	r0, [sp, #20]
    662c:	4282      	cmp	r2, r0
    662e:	f63f af0c 	bhi.w	644a <ticker_worker+0x9e>
				ext_data->reschedule_state =
    6632:	f04f 0201 	mov.w	r2, #1
    6636:	721a      	strb	r2, [r3, #8]
    6638:	e709      	b.n	644e <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
    663a:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
    663e:	46a1      	mov	r9, r4
    6640:	e7d2      	b.n	65e8 <ticker_worker+0x23c>
					  0U :
    6642:	46ce      	mov	lr, r9
    6644:	e7c0      	b.n	65c8 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
    6646:	f1b9 0f00 	cmp.w	r9, #0
    664a:	d0e2      	beq.n	6612 <ticker_worker+0x266>
    664c:	4644      	mov	r4, r8
    664e:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    6652:	990a      	ldr	r1, [sp, #40]	; 0x28
    6654:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    6658:	e6ef      	b.n	643a <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    665a:	9b06      	ldr	r3, [sp, #24]
    665c:	9303      	str	r3, [sp, #12]
    665e:	e6c7      	b.n	63f0 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    6660:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    6662:	3901      	subs	r1, #1
    6664:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
    6666:	2d00      	cmp	r5, #0
    6668:	f43f af0a 	beq.w	6480 <ticker_worker+0xd4>
			ticks_drift = 0U;
    666c:	4619      	mov	r1, r3
					   ticks_expired -
    666e:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    6670:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6672:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    6674:	ebaa 0003 	sub.w	r0, sl, r3
    6678:	9b04      	ldr	r3, [sp, #16]
    667a:	695b      	ldr	r3, [r3, #20]
    667c:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    667e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
    6682:	78e3      	ldrb	r3, [r4, #3]
    6684:	e744      	b.n	6510 <ticker_worker+0x164>
	ticks_expired = 0U;
    6686:	2300      	movs	r3, #0
    6688:	4619      	mov	r1, r3
    668a:	e6ff      	b.n	648c <ticker_worker+0xe0>

0000668c <ticker_job>:
	if (instance->worker_trigger) {
    668c:	7fc3      	ldrb	r3, [r0, #31]
    668e:	2b00      	cmp	r3, #0
    6690:	f040 8431 	bne.w	6ef6 <ticker_job+0x86a>
{
    6694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    6698:	7f82      	ldrb	r2, [r0, #30]
{
    669a:	b08d      	sub	sp, #52	; 0x34
    669c:	4683      	mov	fp, r0
	if (instance->job_guard) {
    669e:	2a00      	cmp	r2, #0
    66a0:	f040 808c 	bne.w	67bc <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    66a4:	7a83      	ldrb	r3, [r0, #10]
    66a6:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
    66a8:	2001      	movs	r0, #1
    66aa:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    66ae:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    66b0:	f8db 0014 	ldr.w	r0, [fp, #20]
    66b4:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    66b6:	f000 8440 	beq.w	6f3a <ticker_job+0x8ae>
	uint8_t idx = *ticks_elapsed_index + 1;
    66ba:	3301      	adds	r3, #1
    66bc:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    66be:	2b02      	cmp	r3, #2
		idx = 0U;
    66c0:	bf08      	it	eq
    66c2:	4613      	moveq	r3, r2
		ticks_elapsed =
    66c4:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    66c8:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
    66cc:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
    66d0:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
    66d2:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
    66d4:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
    66d6:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
    66d8:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    66da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
    66de:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    66e2:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
    66e6:	f8db 3000 	ldr.w	r3, [fp]
    66ea:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    66ec:	f8db 3004 	ldr.w	r3, [fp, #4]
    66f0:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    66f2:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
    66f4:	9206      	str	r2, [sp, #24]
	while (count_user--) {
    66f6:	b2db      	uxtb	r3, r3
    66f8:	2a00      	cmp	r2, #0
    66fa:	f000 81d5 	beq.w	6aa8 <ticker_job+0x41c>
		flag_elapsed = 1U;
    66fe:	2201      	movs	r2, #1
    6700:	920b      	str	r2, [sp, #44]	; 0x2c
    6702:	9a05      	ldr	r2, [sp, #20]
    6704:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
    6708:	2300      	movs	r3, #0
    670a:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    670c:	23ff      	movs	r3, #255	; 0xff
    670e:	9301      	str	r3, [sp, #4]
    6710:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
    6712:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
    6716:	f89a c003 	ldrb.w	ip, [sl, #3]
    671a:	f89a 7002 	ldrb.w	r7, [sl, #2]
    671e:	4567      	cmp	r7, ip
    6720:	d044      	beq.n	67ac <ticker_job+0x120>
			if (middle == user->count_user_op) {
    6722:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
    6726:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
    6728:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
    672a:	b2db      	uxtb	r3, r3
				middle = 0U;
    672c:	429a      	cmp	r2, r3
    672e:	bf08      	it	eq
    6730:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
    6732:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    6736:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
    673a:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    673e:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
    6742:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
    6744:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    6748:	d942      	bls.n	67d0 <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    674a:	2808      	cmp	r0, #8
    674c:	d842      	bhi.n	67d4 <ticker_job+0x148>
			ticker = &node[user_op->id];
    674e:	7861      	ldrb	r1, [r4, #1]
    6750:	9a00      	ldr	r2, [sp, #0]
    6752:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    6756:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
    675a:	786a      	ldrb	r2, [r5, #1]
    675c:	f895 e002 	ldrb.w	lr, [r5, #2]
    6760:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    6764:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    6768:	d034      	beq.n	67d4 <ticker_job+0x148>
			    (state == 0U) ||
    676a:	2805      	cmp	r0, #5
    676c:	d041      	beq.n	67f2 <ticker_job+0x166>
			if (state == 1U) {
    676e:	2a01      	cmp	r2, #1
    6770:	f040 8118 	bne.w	69a4 <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    6774:	2806      	cmp	r0, #6
    6776:	d006      	beq.n	6786 <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    6778:	4658      	mov	r0, fp
    677a:	f7ff fcb5 	bl	60e8 <ticker_dequeue>
			ticker->req = ticker->ack;
    677e:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    6780:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
    6782:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    6784:	7861      	ldrb	r1, [r4, #1]
    6786:	f89b 301c 	ldrb.w	r3, [fp, #28]
    678a:	428b      	cmp	r3, r1
    678c:	f000 80d9 	beq.w	6942 <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    6790:	2000      	movs	r0, #0
    6792:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    6796:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
    6798:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    679a:	b10b      	cbz	r3, 67a0 <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    679c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    679e:	4798      	blx	r3
		while (user->middle != user->last) {
    67a0:	f89a c003 	ldrb.w	ip, [sl, #3]
    67a4:	f89a 7002 	ldrb.w	r7, [sl, #2]
    67a8:	4567      	cmp	r7, ip
    67aa:	d1ba      	bne.n	6722 <ticker_job+0x96>
	while (count_user--) {
    67ac:	9a05      	ldr	r2, [sp, #20]
    67ae:	4552      	cmp	r2, sl
    67b0:	f1aa 0308 	sub.w	r3, sl, #8
    67b4:	f000 8107 	beq.w	69c6 <ticker_job+0x33a>
    67b8:	469a      	mov	sl, r3
    67ba:	e7aa      	b.n	6712 <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    67bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
    67be:	2104      	movs	r1, #4
    67c0:	4603      	mov	r3, r0
    67c2:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    67c4:	2004      	movs	r0, #4
    67c6:	46a4      	mov	ip, r4
}
    67c8:	b00d      	add	sp, #52	; 0x34
    67ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    67ce:	4760      	bx	ip
    67d0:	461f      	mov	r7, r3
    67d2:	e7a4      	b.n	671e <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    67d4:	2200      	movs	r2, #0
    67d6:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    67da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
    67dc:	2001      	movs	r0, #1
    67de:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    67e0:	2a00      	cmp	r2, #0
    67e2:	d0f5      	beq.n	67d0 <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    67e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    67e6:	4790      	blx	r2
		while (user->middle != user->last) {
    67e8:	f89a c003 	ldrb.w	ip, [sl, #3]
    67ec:	f89a 7002 	ldrb.w	r7, [sl, #2]
    67f0:	e795      	b.n	671e <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    67f2:	6860      	ldr	r0, [r4, #4]
    67f4:	b948      	cbnz	r0, 680a <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    67f6:	68a0      	ldr	r0, [r4, #8]
    67f8:	b938      	cbnz	r0, 680a <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    67fa:	68e0      	ldr	r0, [r4, #12]
    67fc:	b928      	cbnz	r0, 680a <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    67fe:	6920      	ldr	r0, [r4, #16]
    6800:	b918      	cbnz	r0, 680a <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
    6802:	6960      	ldr	r0, [r4, #20]
    6804:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    6808:	d0e4      	beq.n	67d4 <ticker_job+0x148>
			if (state == 1U) {
    680a:	2a01      	cmp	r2, #1
    680c:	f040 80ca 	bne.w	69a4 <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    6810:	4658      	mov	r0, fp
    6812:	f7ff fc69 	bl	60e8 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    6816:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    681a:	60a8      	str	r0, [r5, #8]
    681c:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    681e:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
    6820:	f00b fec2 	bl	125a8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6824:	9b02      	ldr	r3, [sp, #8]
    6826:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    6828:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    682a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    682e:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
    6830:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
    6832:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
    6834:	f240 80af 	bls.w	6996 <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
    6838:	696b      	ldr	r3, [r5, #20]
    683a:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
    683c:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
    683e:	f8d5 c004 	ldr.w	ip, [r5, #4]
    6842:	f1bc 0f00 	cmp.w	ip, #0
    6846:	d051      	beq.n	68ec <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
    6848:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
    684a:	2b00      	cmp	r3, #0
    684c:	d04e      	beq.n	68ec <ticker_job+0x260>
		user_op->params.update.lazy--;
    684e:	3b01      	subs	r3, #1
    6850:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    6852:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
    6854:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
    6856:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    6858:	d223      	bcs.n	68a2 <ticker_job+0x216>
    685a:	f10c 0e01 	add.w	lr, ip, #1
    685e:	f8cd 8018 	str.w	r8, [sp, #24]
    6862:	940a      	str	r4, [sp, #40]	; 0x28
    6864:	e018      	b.n	6898 <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
    6866:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6868:	f8df 8228 	ldr.w	r8, [pc, #552]	; 6a94 <ticker_job+0x408>
    686c:	4c8a      	ldr	r4, [pc, #552]	; (6a98 <ticker_job+0x40c>)
    686e:	4488      	add	r8, r1
    6870:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    6872:	bf84      	itt	hi
    6874:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    6878:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    687c:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
    687e:	6a2c      	ldr	r4, [r5, #32]
    6880:	bf94      	ite	ls
    6882:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    6884:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
    6888:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    688a:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
    688c:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
    688e:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    6890:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
    6892:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
    6894:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    6896:	d201      	bcs.n	689c <ticker_job+0x210>
    6898:	429f      	cmp	r7, r3
    689a:	d3e4      	bcc.n	6866 <ticker_job+0x1da>
    689c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    68a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
    68a2:	42bb      	cmp	r3, r7
    68a4:	d221      	bcs.n	68ea <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
    68a6:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    68aa:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
    68ae:	9006      	str	r0, [sp, #24]
    68b0:	940a      	str	r4, [sp, #40]	; 0x28
    68b2:	e005      	b.n	68c0 <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    68b4:	3301      	adds	r3, #1
    68b6:	b29b      	uxth	r3, r3
    68b8:	4660      	mov	r0, ip
    68ba:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
    68bc:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    68be:	d011      	beq.n	68e4 <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
    68c0:	4874      	ldr	r0, [pc, #464]	; (6a94 <ticker_job+0x408>)
    68c2:	4c75      	ldr	r4, [pc, #468]	; (6a98 <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
    68c4:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
    68c6:	1808      	adds	r0, r1, r0
    68c8:	42a0      	cmp	r0, r4
    68ca:	d8f3      	bhi.n	68b4 <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    68cc:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
    68ce:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    68d0:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
    68d4:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    68d6:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
    68da:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    68dc:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
    68e0:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    68e2:	d1ed      	bne.n	68c0 <ticker_job+0x234>
    68e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    68e6:	6269      	str	r1, [r5, #36]	; 0x24
    68e8:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    68ea:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    68ec:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
    68ee:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
    68f0:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
    68f2:	440a      	add	r2, r1
    68f4:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    68f6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
    68f8:	4403      	add	r3, r0
    68fa:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    68fc:	b11a      	cbz	r2, 6906 <ticker_job+0x27a>
    68fe:	6813      	ldr	r3, [r2, #0]
    6900:	b10b      	cbz	r3, 6906 <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
    6902:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    6904:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    6906:	464a      	mov	r2, r9
    6908:	9902      	ldr	r1, [sp, #8]
    690a:	4628      	mov	r0, r5
    690c:	f7ff fc26 	bl	615c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    6910:	68e2      	ldr	r2, [r4, #12]
    6912:	69ab      	ldr	r3, [r5, #24]
    6914:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    6916:	6922      	ldr	r2, [r4, #16]
    6918:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    691a:	bf8c      	ite	hi
    691c:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    691e:	2300      	movls	r3, #0
    6920:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    6922:	7da3      	ldrb	r3, [r4, #22]
    6924:	b103      	cbz	r3, 6928 <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
    6926:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    6928:	7de3      	ldrb	r3, [r4, #23]
    692a:	b113      	cbz	r3, 6932 <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    692c:	3b01      	subs	r3, #1
    692e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    6932:	9b01      	ldr	r3, [sp, #4]
    6934:	702b      	strb	r3, [r5, #0]
		ticker->req++;
    6936:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    6938:	7862      	ldrb	r2, [r4, #1]
    693a:	9201      	str	r2, [sp, #4]
		ticker->req++;
    693c:	3301      	adds	r3, #1
    693e:	706b      	strb	r3, [r5, #1]
    6940:	e726      	b.n	6790 <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
    6942:	23ff      	movs	r3, #255	; 0xff
    6944:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    6948:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
    694c:	2b06      	cmp	r3, #6
    694e:	d013      	beq.n	6978 <ticker_job+0x2ec>
    6950:	2b08      	cmp	r3, #8
    6952:	d011      	beq.n	6978 <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
    6954:	f00b fe28 	bl	125a8 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
    6958:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    695c:	1a83      	subs	r3, r0, r2
    695e:	021d      	lsls	r5, r3, #8
    6960:	d410      	bmi.n	6984 <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
    6962:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6964:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    6968:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    696a:	f8db 2018 	ldr.w	r2, [fp, #24]
    696e:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    6970:	bf88      	it	hi
    6972:	f8cb 3018 	strhi.w	r3, [fp, #24]
    6976:	e70b      	b.n	6790 <ticker_job+0x104>
				ticks_at_yield =
    6978:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
    697a:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    697e:	1a83      	subs	r3, r0, r2
    6980:	021d      	lsls	r5, r3, #8
    6982:	d5ee      	bpl.n	6962 <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6984:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    6986:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6988:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    698c:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    698e:	bf34      	ite	cc
    6990:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
    6992:	2300      	movcs	r3, #0
    6994:	e7e9      	b.n	696a <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    6996:	696b      	ldr	r3, [r5, #20]
    6998:	1bda      	subs	r2, r3, r7
    699a:	1853      	adds	r3, r2, r1
    699c:	9304      	str	r3, [sp, #16]
    699e:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
    69a0:	2200      	movs	r2, #0
    69a2:	e74c      	b.n	683e <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    69a4:	2104      	movs	r1, #4
    69a6:	465b      	mov	r3, fp
    69a8:	2201      	movs	r2, #1
    69aa:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    69ae:	4608      	mov	r0, r1
    69b0:	47a0      	blx	r4
	while (count_user--) {
    69b2:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
    69b4:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
    69b8:	2301      	movs	r3, #1
	while (count_user--) {
    69ba:	4552      	cmp	r2, sl
				pending = 1U;
    69bc:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    69be:	f1aa 0308 	sub.w	r3, sl, #8
    69c2:	f47f aef9 	bne.w	67b8 <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    69c6:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
    69ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    69cc:	1a9b      	subs	r3, r3, r2
    69ce:	bf18      	it	ne
    69d0:	2301      	movne	r3, #1
    69d2:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    69d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    69d6:	2b00      	cmp	r3, #0
    69d8:	d16a      	bne.n	6ab0 <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
    69da:	9901      	ldr	r1, [sp, #4]
    69dc:	4658      	mov	r0, fp
    69de:	f7ff fbe1 	bl	61a4 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    69e2:	f89b 301d 	ldrb.w	r3, [fp, #29]
    69e6:	9300      	str	r3, [sp, #0]
    69e8:	9b00      	ldr	r3, [sp, #0]
    69ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    69ec:	4293      	cmp	r3, r2
    69ee:	f000 826c 	beq.w	6eca <ticker_job+0x83e>
	if (!pending) {
    69f2:	9b08      	ldr	r3, [sp, #32]
    69f4:	2b00      	cmp	r3, #0
    69f6:	f000 81e6 	beq.w	6dc6 <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
    69fa:	f89b 301d 	ldrb.w	r3, [fp, #29]
    69fe:	9300      	str	r3, [sp, #0]
    6a00:	9b00      	ldr	r3, [sp, #0]
    6a02:	2bff      	cmp	r3, #255	; 0xff
    6a04:	f000 82c4 	beq.w	6f90 <ticker_job+0x904>
	if (ticker_id_old_head == TICKER_NULL) {
    6a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a0a:	2bff      	cmp	r3, #255	; 0xff
    6a0c:	f000 82cb 	beq.w	6fa6 <ticker_job+0x91a>
	ticker = &instance->nodes[instance->ticker_id_head];
    6a10:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
    6a12:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    6a16:	f8df 9084 	ldr.w	r9, [pc, #132]	; 6a9c <ticker_job+0x410>
    6a1a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 6aa0 <ticker_job+0x414>
    6a1e:	4f21      	ldr	r7, [pc, #132]	; (6aa4 <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
    6a20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    6a24:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
    6a28:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    6a2a:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
    6a2c:	f00b fdbc 	bl	125a8 <cntr_cnt_get>
		cc = instance->ticks_current;
    6a30:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6a34:	1b03      	subs	r3, r0, r4
    6a36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    6a3a:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    6a3c:	42b3      	cmp	r3, r6
    6a3e:	bf2c      	ite	cs
    6a40:	18e4      	addcs	r4, r4, r3
    6a42:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
    6a44:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    6a48:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
    6a4c:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    6a4e:	4620      	mov	r0, r4
    6a50:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    6a52:	f00b fda9 	bl	125a8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6a56:	eba0 030a 	sub.w	r3, r0, sl
    6a5a:	eba4 040a 	sub.w	r4, r4, sl
    6a5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    6a62:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6a64:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    6a68:	42a3      	cmp	r3, r4
		i--;
    6a6a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    6a6e:	f240 8233 	bls.w	6ed8 <ticker_job+0x84c>
		LL_ASSERT(i);
    6a72:	2d00      	cmp	r5, #0
    6a74:	d1da      	bne.n	6a2c <ticker_job+0x3a0>
    6a76:	f640 133e 	movw	r3, #2366	; 0x93e
    6a7a:	464a      	mov	r2, r9
    6a7c:	4641      	mov	r1, r8
    6a7e:	4638      	mov	r0, r7
    6a80:	f010 fa75 	bl	16f6e <printk>
    6a84:	4040      	eors	r0, r0
    6a86:	f380 8811 	msr	BASEPRI, r0
    6a8a:	f04f 0003 	mov.w	r0, #3
    6a8e:	df02      	svc	2
    6a90:	e7cc      	b.n	6a2c <ticker_job+0x3a0>
    6a92:	bf00      	nop
    6a94:	ff172b5a 	.word	0xff172b5a
    6a98:	7f172b59 	.word	0x7f172b59
    6a9c:	0001b788 	.word	0x0001b788
    6aa0:	0001b834 	.word	0x0001b834
    6aa4:	0001b7c8 	.word	0x0001b7c8
	pending = 0U;
    6aa8:	9b06      	ldr	r3, [sp, #24]
    6aaa:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    6aac:	23ff      	movs	r3, #255	; 0xff
    6aae:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    6ab0:	f00b fd7a 	bl	125a8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6ab4:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    6ab6:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    6aba:	1ac3      	subs	r3, r0, r3
    6abc:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    6ac0:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    6ac2:	f8db 3000 	ldr.w	r3, [fp]
    6ac6:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
    6ac8:	d050      	beq.n	6b6c <ticker_job+0x4e0>
	ticks_expired = 0U;
    6aca:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
    6acc:	f8df 8290 	ldr.w	r8, [pc, #656]	; 6d60 <ticker_job+0x6d4>
    6ad0:	f8df 9290 	ldr.w	r9, [pc, #656]	; 6d64 <ticker_job+0x6d8>
	while (instance->ticker_id_head != TICKER_NULL) {
    6ad4:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
    6ad6:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
    6ad8:	9a00      	ldr	r2, [sp, #0]
    6ada:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    6ade:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    6ae2:	011b      	lsls	r3, r3, #4
    6ae4:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
    6ae6:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    6ae8:	429f      	cmp	r7, r3
    6aea:	f0c0 8243 	bcc.w	6f74 <ticker_job+0x8e8>
		ticks_expired += ticks_to_expire;
    6aee:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
    6af0:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
    6af4:	f8dd c010 	ldr.w	ip, [sp, #16]
		ticks_expired += ticks_to_expire;
    6af8:	441a      	add	r2, r3
    6afa:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    6afc:	f8db 2018 	ldr.w	r2, [fp, #24]
    6b00:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    6b02:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
    6b06:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    6b0a:	bf25      	ittet	cs
    6b0c:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    6b10:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    6b14:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    6b16:	2300      	movcs	r3, #0
    6b18:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    6b1c:	78a2      	ldrb	r2, [r4, #2]
    6b1e:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    6b20:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    6b22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
    6b24:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
    6b26:	1a9b      	subs	r3, r3, r2
    6b28:	b2db      	uxtb	r3, r3
    6b2a:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
    6b2c:	9b00      	ldr	r3, [sp, #0]
    6b2e:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    6b32:	b118      	cbz	r0, 6b3c <ticker_job+0x4b0>
    6b34:	9b05      	ldr	r3, [sp, #20]
    6b36:	2b02      	cmp	r3, #2
    6b38:	f000 8135 	beq.w	6da6 <ticker_job+0x71a>
		ticker->ticks_to_expire = 0U;
    6b3c:	2300      	movs	r3, #0
    6b3e:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    6b40:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    6b44:	2d00      	cmp	r5, #0
    6b46:	f040 80da 	bne.w	6cfe <ticker_job+0x672>
    6b4a:	b119      	cbz	r1, 6b54 <ticker_job+0x4c8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    6b4c:	7a09      	ldrb	r1, [r1, #8]
    6b4e:	2901      	cmp	r1, #1
    6b50:	f000 8111 	beq.w	6d76 <ticker_job+0x6ea>
			if (state && ((state == 1U) || skip_collision) &&
    6b54:	9b05      	ldr	r3, [sp, #20]
    6b56:	b123      	cbz	r3, 6b62 <ticker_job+0x4d6>
    6b58:	2b01      	cmp	r3, #1
    6b5a:	d045      	beq.n	6be8 <ticker_job+0x55c>
    6b5c:	f1be 0f00 	cmp.w	lr, #0
    6b60:	d142      	bne.n	6be8 <ticker_job+0x55c>
			ticker->req = ticker->ack;
    6b62:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    6b64:	f89b 601d 	ldrb.w	r6, [fp, #29]
    6b68:	2eff      	cmp	r6, #255	; 0xff
    6b6a:	d1b5      	bne.n	6ad8 <ticker_job+0x44c>
			flag_compare_update = 1U;
    6b6c:	9b06      	ldr	r3, [sp, #24]
    6b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    6b70:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
    6b72:	4296      	cmp	r6, r2
    6b74:	bf18      	it	ne
    6b76:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
    6b78:	4658      	mov	r0, fp
			flag_compare_update = 1U;
    6b7a:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
    6b7c:	f7ff fb12 	bl	61a4 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
    6b80:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
    6b84:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
    6b88:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
    6b8c:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
    6b8e:	9b00      	ldr	r3, [sp, #0]
    6b90:	2bff      	cmp	r3, #255	; 0xff
    6b92:	d00f      	beq.n	6bb4 <ticker_job+0x528>
    6b94:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
    6b96:	b233      	sxth	r3, r6
    6b98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6b9c:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
    6ba0:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
    6ba2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    6ba4:	b117      	cbz	r7, 6bac <ticker_job+0x520>
    6ba6:	7a39      	ldrb	r1, [r7, #8]
    6ba8:	2901      	cmp	r1, #1
    6baa:	d025      	beq.n	6bf8 <ticker_job+0x56c>
			ticker_id_head = ticker->next;
    6bac:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
    6bb0:	2eff      	cmp	r6, #255	; 0xff
    6bb2:	d1f0      	bne.n	6b96 <ticker_job+0x50a>
	return rescheduled;
    6bb4:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    6bb8:	2a00      	cmp	r2, #0
    6bba:	f43f af15 	beq.w	69e8 <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    6bbe:	9b00      	ldr	r3, [sp, #0]
    6bc0:	9909      	ldr	r1, [sp, #36]	; 0x24
    6bc2:	428b      	cmp	r3, r1
    6bc4:	f47f af15 	bne.w	69f2 <ticker_job+0x366>
	if (!pending) {
    6bc8:	9b08      	ldr	r3, [sp, #32]
    6bca:	2b00      	cmp	r3, #0
    6bcc:	f47f af18 	bne.w	6a00 <ticker_job+0x374>
	users = &instance->users[0];
    6bd0:	f8db 3004 	ldr.w	r3, [fp, #4]
    6bd4:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
    6bd6:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
    6bda:	1e5f      	subs	r7, r3, #1
    6bdc:	b2ff      	uxtb	r7, r7
    6bde:	2b00      	cmp	r3, #0
    6be0:	f43f af0e 	beq.w	6a00 <ticker_job+0x374>
			flag_compare_update = 1U;
    6be4:	9206      	str	r2, [sp, #24]
    6be6:	e0fa      	b.n	6dde <ticker_job+0x752>
			    ticker->fp_op_func) {
    6be8:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    6bea:	2b00      	cmp	r3, #0
    6bec:	d0b9      	beq.n	6b62 <ticker_job+0x4d6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    6bee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6bf0:	2001      	movs	r0, #1
    6bf2:	4798      	blx	r3
			ticker->req = ticker->ack;
    6bf4:	78a2      	ldrb	r2, [r4, #2]
    6bf6:	e7b4      	b.n	6b62 <ticker_job+0x4d6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    6bf8:	9b01      	ldr	r3, [sp, #4]
    6bfa:	7f1b      	ldrb	r3, [r3, #28]
    6bfc:	2bff      	cmp	r3, #255	; 0xff
    6bfe:	d04b      	beq.n	6c98 <ticker_job+0x60c>
			instance->ticks_slot_previous > ticks_elapsed) {
    6c00:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    6c02:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
    6c04:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    6c06:	4293      	cmp	r3, r2
    6c08:	d946      	bls.n	6c98 <ticker_job+0x60c>
			window_start_ticks = instance->ticks_slot_previous -
    6c0a:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    6c0e:	687a      	ldr	r2, [r7, #4]
    6c10:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    6c12:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    6c16:	1ad3      	subs	r3, r2, r3
    6c18:	9302      	str	r3, [sp, #8]
    6c1a:	683b      	ldr	r3, [r7, #0]
    6c1c:	429a      	cmp	r2, r3
    6c1e:	f080 80bd 	bcs.w	6d9c <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
    6c22:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    6c26:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
    6c2a:	f000 80b7 	beq.w	6d9c <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
    6c2e:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
    6c32:	45f0      	cmp	r8, lr
    6c34:	f04f 0300 	mov.w	r3, #0
    6c38:	d331      	bcc.n	6c9e <ticker_job+0x612>
    6c3a:	46f1      	mov	r9, lr
    6c3c:	465a      	mov	r2, fp
    6c3e:	461c      	mov	r4, r3
    6c40:	e01c      	b.n	6c7c <ticker_job+0x5f0>
			if (node->ticks_to_expire >
    6c42:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
    6c44:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
    6c46:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
    6c48:	4423      	add	r3, r4
			if (node->ticks_to_expire >
    6c4a:	d909      	bls.n	6c60 <ticker_job+0x5d4>
				window_end_ticks =
    6c4c:	4543      	cmp	r3, r8
    6c4e:	bf28      	it	cs
    6c50:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
    6c52:	4599      	cmp	r9, r3
    6c54:	d204      	bcs.n	6c60 <ticker_job+0x5d4>
			if (ticks_to_expire != 0U &&
    6c56:	ebb3 030e 	subs.w	r3, r3, lr
    6c5a:	d001      	beq.n	6c60 <ticker_job+0x5d4>
    6c5c:	459c      	cmp	ip, r3
    6c5e:	d91e      	bls.n	6c9e <ticker_job+0x612>
			window_start_ticks  = node->ticks_to_expire +
    6c60:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
    6c62:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
    6c66:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
    6c6a:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
    6c6c:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
    6c70:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    6c72:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
    6c76:	d012      	beq.n	6c9e <ticker_job+0x612>
    6c78:	45c8      	cmp	r8, r9
    6c7a:	d310      	bcc.n	6c9e <ticker_job+0x612>
			node = &nodes[ticker_id_iter];
    6c7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6c80:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
    6c84:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    6c86:	6a81      	ldr	r1, [r0, #40]	; 0x28
    6c88:	2900      	cmp	r1, #0
    6c8a:	d0da      	beq.n	6c42 <ticker_job+0x5b6>
    6c8c:	7a09      	ldrb	r1, [r1, #8]
    6c8e:	2901      	cmp	r1, #1
    6c90:	d1d7      	bne.n	6c42 <ticker_job+0x5b6>
				ticker_id_iter = node->next;
    6c92:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
    6c96:	e7eb      	b.n	6c70 <ticker_job+0x5e4>
		window_start_ticks = 0U;
    6c98:	f04f 0c00 	mov.w	ip, #0
    6c9c:	e7b7      	b.n	6c0e <ticker_job+0x582>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    6c9e:	9a02      	ldr	r2, [sp, #8]
    6ca0:	441a      	add	r2, r3
    6ca2:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    6ca4:	465c      	mov	r4, fp
    6ca6:	60ab      	str	r3, [r5, #8]
    6ca8:	f04f 0eff 	mov.w	lr, #255	; 0xff
    6cac:	e000      	b.n	6cb0 <ticker_job+0x624>
    6cae:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
    6cb0:	b221      	sxth	r1, r4
    6cb2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    6cb6:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
    6cba:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    6cbc:	f8dc 0008 	ldr.w	r0, [ip, #8]
    6cc0:	4298      	cmp	r0, r3
    6cc2:	f080 814d 	bcs.w	6f60 <ticker_job+0x8d4>
				ticker->ticks_to_expire -=
    6cc6:	1a1b      	subs	r3, r3, r0
    6cc8:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
    6cca:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
    6cce:	2aff      	cmp	r2, #255	; 0xff
    6cd0:	46a6      	mov	lr, r4
    6cd2:	d1ec      	bne.n	6cae <ticker_job+0x622>
			instance->ticker_id_head = nodes[ticker_id_head].next;
    6cd4:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
    6cd6:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    6cda:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6cde:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    6ce0:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    6ce4:	f81a 3001 	ldrb.w	r3, [sl, r1]
    6ce8:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    6cea:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
    6cee:	8beb      	ldrh	r3, [r5, #30]
    6cf0:	3b01      	subs	r3, #1
    6cf2:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
    6cf4:	f04f 0302 	mov.w	r3, #2
    6cf8:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
    6cfa:	2201      	movs	r2, #1
    6cfc:	e747      	b.n	6b8e <ticker_job+0x502>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    6cfe:	b111      	cbz	r1, 6d06 <ticker_job+0x67a>
    6d00:	7a0b      	ldrb	r3, [r1, #8]
    6d02:	2b01      	cmp	r3, #1
    6d04:	d037      	beq.n	6d76 <ticker_job+0x6ea>
				if (!ticker->lazy_current) {
    6d06:	f1be 0f00 	cmp.w	lr, #0
    6d0a:	d159      	bne.n	6dc0 <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
    6d0c:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
    6d10:	4672      	mov	r2, lr
				while (count--) {
    6d12:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
    6d14:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
    6d18:	2100      	movs	r1, #0
    6d1a:	9005      	str	r0, [sp, #20]
    6d1c:	e004      	b.n	6d28 <ticker_job+0x69c>
    6d1e:	4628      	mov	r0, r5
				while (count--) {
    6d20:	3a01      	subs	r2, #1
					ticks_to_expire +=
    6d22:	4401      	add	r1, r0
				while (count--) {
    6d24:	1c50      	adds	r0, r2, #1
    6d26:	d00f      	beq.n	6d48 <ticker_job+0x6bc>
	ticker->remainder_current += ticker->remainder_periodic;
    6d28:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    6d2a:	eb03 0008 	add.w	r0, r3, r8
    6d2e:	4548      	cmp	r0, r9
    6d30:	d8f5      	bhi.n	6d1e <ticker_job+0x692>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    6d32:	9805      	ldr	r0, [sp, #20]
    6d34:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    6d38:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    6d3a:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
    6d3e:	4401      	add	r1, r0
				while (count--) {
    6d40:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    6d42:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
    6d46:	d1ef      	bne.n	6d28 <ticker_job+0x69c>
				} else if (!ticker->must_expire) {
    6d48:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    6d4c:	6263      	str	r3, [r4, #36]	; 0x24
    6d4e:	2a00      	cmp	r2, #0
    6d50:	f000 80d2 	beq.w	6ef8 <ticker_job+0x86c>
				lazy = 0U;
    6d54:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
    6d56:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
    6d58:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    6d5a:	83e2      	strh	r2, [r4, #30]
    6d5c:	e00d      	b.n	6d7a <ticker_job+0x6ee>
    6d5e:	bf00      	nop
    6d60:	ff172b5a 	.word	0xff172b5a
    6d64:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
    6d68:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    6d6c:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    6d70:	2d00      	cmp	r5, #0
    6d72:	f43f aeeb 	beq.w	6b4c <ticker_job+0x4c0>
				ticker->req = ticker->ack;
    6d76:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
    6d78:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    6d7a:	9b07      	ldr	r3, [sp, #28]
    6d7c:	9a02      	ldr	r2, [sp, #8]
    6d7e:	f8db 1014 	ldr.w	r1, [fp, #20]
    6d82:	189a      	adds	r2, r3, r2
    6d84:	4620      	mov	r0, r4
    6d86:	f7ff f9e9 	bl	615c <ticks_to_expire_prep>
			ticker->next = *insert_head;
    6d8a:	9a00      	ldr	r2, [sp, #0]
    6d8c:	9904      	ldr	r1, [sp, #16]
    6d8e:	9b01      	ldr	r3, [sp, #4]
    6d90:	5453      	strb	r3, [r2, r1]
			ticker->req++;
    6d92:	7863      	ldrb	r3, [r4, #1]
    6d94:	9601      	str	r6, [sp, #4]
    6d96:	3301      	adds	r3, #1
    6d98:	7063      	strb	r3, [r4, #1]
    6d9a:	e6e3      	b.n	6b64 <ticker_job+0x4d8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    6d9c:	9b02      	ldr	r3, [sp, #8]
    6d9e:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    6da0:	2300      	movs	r3, #0
    6da2:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
    6da4:	e7a3      	b.n	6cee <ticker_job+0x662>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    6da6:	f1be 0f00 	cmp.w	lr, #0
    6daa:	f47f aec7 	bne.w	6b3c <ticker_job+0x4b0>
    6dae:	b111      	cbz	r1, 6db6 <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    6db0:	7a0b      	ldrb	r3, [r1, #8]
    6db2:	2b01      	cmp	r3, #1
    6db4:	d0d8      	beq.n	6d68 <ticker_job+0x6dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
    6db6:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
    6dba:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    6dbe:	e6bd      	b.n	6b3c <ticker_job+0x4b0>
					ticker->req = ticker->ack;
    6dc0:	7062      	strb	r2, [r4, #1]
    6dc2:	2200      	movs	r2, #0
    6dc4:	e7a5      	b.n	6d12 <ticker_job+0x686>
	count_user = instance->count_user;
    6dc6:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    6dca:	f8db 2004 	ldr.w	r2, [fp, #4]
    6dce:	9201      	str	r2, [sp, #4]
	while (count_user--) {
    6dd0:	1e5f      	subs	r7, r3, #1
    6dd2:	b2ff      	uxtb	r7, r7
    6dd4:	2b00      	cmp	r3, #0
    6dd6:	f43f ae10 	beq.w	69fa <ticker_job+0x36e>
		flag_compare_update = 1U;
    6dda:	2301      	movs	r3, #1
    6ddc:	9306      	str	r3, [sp, #24]
    6dde:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
    6de0:	2600      	movs	r6, #0
    6de2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
    6de6:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
    6dea:	787b      	ldrb	r3, [r7, #1]
    6dec:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
    6dee:	687d      	ldr	r5, [r7, #4]
		while (user->first != user->last) {
    6df0:	429a      	cmp	r2, r3
    6df2:	d10c      	bne.n	6e0e <ticker_job+0x782>
    6df4:	e05b      	b.n	6eae <ticker_job+0x822>
	switch (uop->op) {
    6df6:	2b01      	cmp	r3, #1
    6df8:	d053      	beq.n	6ea2 <ticker_job+0x816>
			first = user->first + 1;
    6dfa:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
    6dfc:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
    6dfe:	3301      	adds	r3, #1
    6e00:	b2db      	uxtb	r3, r3
				first = 0U;
    6e02:	4299      	cmp	r1, r3
    6e04:	bf08      	it	eq
    6e06:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    6e08:	429a      	cmp	r2, r3
			user->first = first;
    6e0a:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
    6e0c:	d04f      	beq.n	6eae <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    6e0e:	b21b      	sxth	r3, r3
    6e10:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    6e14:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6e18:	eb05 0083 	add.w	r0, r5, r3, lsl #2
	switch (uop->op) {
    6e1c:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    6e20:	2b02      	cmp	r3, #2
    6e22:	d017      	beq.n	6e54 <ticker_job+0x7c8>
    6e24:	2b03      	cmp	r3, #3
    6e26:	d1e6      	bne.n	6df6 <ticker_job+0x76a>
		if (uop->id < instance->count_node) {
    6e28:	7843      	ldrb	r3, [r0, #1]
    6e2a:	f89b 2008 	ldrb.w	r2, [fp, #8]
    6e2e:	429a      	cmp	r2, r3
    6e30:	d93a      	bls.n	6ea8 <ticker_job+0x81c>
			node[uop->id].priority =
    6e32:	f8db 2000 	ldr.w	r2, [fp]
    6e36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6e3a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6e3e:	7902      	ldrb	r2, [r0, #4]
    6e40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    6e44:	6286      	str	r6, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    6e46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
    6e48:	b113      	cbz	r3, 6e50 <ticker_job+0x7c4>
		fp_op_func(uop->status, uop->op_context);
    6e4a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    6e4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6e4e:	4798      	blx	r3
    6e50:	78fa      	ldrb	r2, [r7, #3]
    6e52:	e7d2      	b.n	6dfa <ticker_job+0x76e>
		ticker_by_next_slot_get(instance,
    6e54:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
    6e58:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
    6e5c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
    6e60:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
    6e64:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    6e68:	2aff      	cmp	r2, #255	; 0xff
    6e6a:	d003      	beq.n	6e74 <ticker_job+0x7e8>
    6e6c:	f8d1 8000 	ldr.w	r8, [r1]
    6e70:	4598      	cmp	r8, r3
    6e72:	d023      	beq.n	6ebc <ticker_job+0x830>
		_ticker_id_head = instance->ticker_id_head;
    6e74:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    6e78:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
    6e7a:	f04f 0800 	mov.w	r8, #0
    6e7e:	e00a      	b.n	6e96 <ticker_job+0x80a>
		ticker = &node[_ticker_id_head];
    6e80:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    6e84:	eb04 1103 	add.w	r1, r4, r3, lsl #4
    6e88:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
    6e8a:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
    6e8e:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
    6e90:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
    6e92:	b911      	cbnz	r1, 6e9a <ticker_job+0x80e>
		_ticker_id_head = ticker->next;
    6e94:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
    6e96:	2aff      	cmp	r2, #255	; 0xff
    6e98:	d1f2      	bne.n	6e80 <ticker_job+0x7f4>
	*ticker_id_head = _ticker_id_head;
    6e9a:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
    6e9e:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
    6ea2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    6ea4:	6286      	str	r6, [r0, #40]	; 0x28
		break;
    6ea6:	e7cf      	b.n	6e48 <ticker_job+0x7bc>
			uop->status = TICKER_STATUS_FAILURE;
    6ea8:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
    6eac:	e7cb      	b.n	6e46 <ticker_job+0x7ba>
	while (count_user--) {
    6eae:	9a01      	ldr	r2, [sp, #4]
    6eb0:	42ba      	cmp	r2, r7
    6eb2:	f1a7 0308 	sub.w	r3, r7, #8
    6eb6:	d00b      	beq.n	6ed0 <ticker_job+0x844>
    6eb8:	461f      	mov	r7, r3
    6eba:	e796      	b.n	6dea <ticker_job+0x75e>
		ticker = &node[_ticker_id_head];
    6ebc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6ec0:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    6ec2:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
    6ec6:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
    6ec8:	e7e5      	b.n	6e96 <ticker_job+0x80a>
	if (!pending) {
    6eca:	9b08      	ldr	r3, [sp, #32]
    6ecc:	2b00      	cmp	r3, #0
    6ece:	d054      	beq.n	6f7a <ticker_job+0x8ee>
	if (flag_compare_update) {
    6ed0:	9b06      	ldr	r3, [sp, #24]
    6ed2:	2b00      	cmp	r3, #0
    6ed4:	f47f ad91 	bne.w	69fa <ticker_job+0x36e>
	if (instance->worker_trigger) {
    6ed8:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    6edc:	2200      	movs	r2, #0
    6ede:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    6ee2:	b12b      	cbz	r3, 6ef0 <ticker_job+0x864>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    6ee4:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    6ee8:	465b      	mov	r3, fp
    6eea:	2201      	movs	r2, #1
    6eec:	2103      	movs	r1, #3
    6eee:	e469      	b.n	67c4 <ticker_job+0x138>
}
    6ef0:	b00d      	add	sp, #52	; 0x34
    6ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ef6:	4770      	bx	lr
					while (ticks_to_expire <
    6ef8:	458a      	cmp	sl, r1
    6efa:	f67f af2c 	bls.w	6d56 <ticker_job+0x6ca>
    6efe:	1c68      	adds	r0, r5, #1
    6f00:	9405      	str	r4, [sp, #20]
    6f02:	4604      	mov	r4, r0
    6f04:	e005      	b.n	6f12 <ticker_job+0x886>
    6f06:	4628      	mov	r0, r5
						ticks_to_expire +=
    6f08:	4401      	add	r1, r0
						lazy++;
    6f0a:	3201      	adds	r2, #1
					while (ticks_to_expire <
    6f0c:	458a      	cmp	sl, r1
						lazy++;
    6f0e:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    6f10:	d910      	bls.n	6f34 <ticker_job+0x8a8>
	ticker->remainder_current += ticker->remainder_periodic;
    6f12:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    6f14:	eb03 0008 	add.w	r0, r3, r8
    6f18:	4548      	cmp	r0, r9
    6f1a:	d8f4      	bhi.n	6f06 <ticker_job+0x87a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    6f1c:	4620      	mov	r0, r4
    6f1e:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    6f22:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    6f24:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    6f28:	3201      	adds	r2, #1
					while (ticks_to_expire <
    6f2a:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    6f2c:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    6f30:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    6f32:	d8ee      	bhi.n	6f12 <ticker_job+0x886>
    6f34:	9c05      	ldr	r4, [sp, #20]
    6f36:	6263      	str	r3, [r4, #36]	; 0x24
    6f38:	e70d      	b.n	6d56 <ticker_job+0x6ca>
	ticker_id_old_head = instance->ticker_id_head;
    6f3a:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
    6f3e:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    6f42:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
    6f44:	f8db 3000 	ldr.w	r3, [fp]
    6f48:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    6f4a:	f8db 3004 	ldr.w	r3, [fp, #4]
    6f4e:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    6f50:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
    6f52:	9108      	str	r1, [sp, #32]
	while (count_user--) {
    6f54:	b2db      	uxtb	r3, r3
    6f56:	b3a1      	cbz	r1, 6fc2 <ticker_job+0x936>
		flag_elapsed = 0U;
    6f58:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
    6f5a:	9203      	str	r2, [sp, #12]
    6f5c:	f7ff bbd1 	b.w	6702 <ticker_job+0x76>
				node->ticks_to_expire -=
    6f60:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
    6f62:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    6f66:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
    6f6a:	f43f aec0 	beq.w	6cee <ticker_job+0x662>
    6f6e:	fa0f f18e 	sxth.w	r1, lr
    6f72:	e6af      	b.n	6cd4 <ticker_job+0x648>
			ticker->ticks_to_expire -= ticks_elapsed;
    6f74:	1bdb      	subs	r3, r3, r7
    6f76:	60a3      	str	r3, [r4, #8]
			break;
    6f78:	e5f8      	b.n	6b6c <ticker_job+0x4e0>
	count_user = instance->count_user;
    6f7a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    6f7e:	f8db 2004 	ldr.w	r2, [fp, #4]
    6f82:	9201      	str	r2, [sp, #4]
	while (count_user--) {
    6f84:	1e5f      	subs	r7, r3, #1
    6f86:	b2ff      	uxtb	r7, r7
    6f88:	2b00      	cmp	r3, #0
    6f8a:	f47f af28 	bne.w	6dde <ticker_job+0x752>
    6f8e:	e79f      	b.n	6ed0 <ticker_job+0x844>
		if (cntr_stop() == 0) {
    6f90:	f00b fae4 	bl	1255c <cntr_stop>
    6f94:	2800      	cmp	r0, #0
    6f96:	d19f      	bne.n	6ed8 <ticker_job+0x84c>
			instance->ticks_slot_previous = 0U;
    6f98:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    6f9c:	f00b fb04 	bl	125a8 <cntr_cnt_get>
    6fa0:	f8cb 0014 	str.w	r0, [fp, #20]
    6fa4:	e798      	b.n	6ed8 <ticker_job+0x84c>
		ticks_current = cntr_cnt_get();
    6fa6:	f00b faff 	bl	125a8 <cntr_cnt_get>
    6faa:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    6fac:	f00b fac6 	bl	1253c <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
    6fb0:	f89b 301d 	ldrb.w	r3, [fp, #29]
    6fb4:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
    6fb6:	2800      	cmp	r0, #0
    6fb8:	f47f ad2a 	bne.w	6a10 <ticker_job+0x384>
			instance->ticks_current = ticks_current;
    6fbc:	f8cb 4014 	str.w	r4, [fp, #20]
    6fc0:	e526      	b.n	6a10 <ticker_job+0x384>
	insert_head = TICKER_NULL;
    6fc2:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
    6fc4:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
    6fc6:	9301      	str	r3, [sp, #4]
    6fc8:	e507      	b.n	69da <ticker_job+0x34e>
    6fca:	bf00      	nop

00006fcc <ticker_init>:
{
    6fcc:	b4f0      	push	{r4, r5, r6, r7}
    6fce:	9d04      	ldr	r5, [sp, #16]
    6fd0:	f89d 7014 	ldrb.w	r7, [sp, #20]
    6fd4:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    6fd6:	2800      	cmp	r0, #0
    6fd8:	d137      	bne.n	704a <ticker_init+0x7e>
	instance->count_node = count_node;
    6fda:	4e1d      	ldr	r6, [pc, #116]	; (7050 <ticker_init+0x84>)
	while (count_node--) {
    6fdc:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
    6fe0:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
    6fe2:	6032      	str	r2, [r6, #0]
	while (count_node--) {
    6fe4:	fa5f fc8c 	uxtb.w	ip, ip
    6fe8:	b149      	cbz	r1, 6ffe <ticker_init+0x32>
    6fea:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    6fee:	eb02 110c 	add.w	r1, r2, ip, lsl #4
    6ff2:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    6ff4:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    6ff8:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    6ffc:	d1f9      	bne.n	6ff2 <ticker_init+0x26>
	while (count_user--) {
    6ffe:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    7000:	7273      	strb	r3, [r6, #9]
	instance->users = user;
    7002:	6075      	str	r5, [r6, #4]
	while (count_user--) {
    7004:	b2d2      	uxtb	r2, r2
    7006:	b183      	cbz	r3, 702a <ticker_init+0x5e>
    7008:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
    700c:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    700e:	4610      	mov	r0, r2
    7010:	f812 3908 	ldrb.w	r3, [r2], #-8
    7014:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    7018:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
    701c:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
    701e:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
    7022:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
    7026:	b2df      	uxtb	r7, r3
	while (count_user--) {
    7028:	d1f0      	bne.n	700c <ticker_init+0x40>
	if (count_op) {
    702a:	b977      	cbnz	r7, 704a <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
    702c:	9a07      	ldr	r2, [sp, #28]
    702e:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
    7030:	9a08      	ldr	r2, [sp, #32]
    7032:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    7034:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    7038:	9a09      	ldr	r2, [sp, #36]	; 0x24
    703a:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
    703c:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
    703e:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7042:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
    7044:	8177      	strh	r7, [r6, #10]
}
    7046:	bcf0      	pop	{r4, r5, r6, r7}
    7048:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    704a:	2001      	movs	r0, #1
}
    704c:	bcf0      	pop	{r4, r5, r6, r7}
    704e:	4770      	bx	lr
    7050:	200015c0 	.word	0x200015c0

00007054 <ticker_trigger>:
	if (instance->sched_cb) {
    7054:	4b0a      	ldr	r3, [pc, #40]	; (7080 <ticker_trigger+0x2c>)
    7056:	222c      	movs	r2, #44	; 0x2c
    7058:	fb02 3200 	mla	r2, r2, r0, r3
{
    705c:	b410      	push	{r4}
	if (instance->sched_cb) {
    705e:	6a54      	ldr	r4, [r2, #36]	; 0x24
    7060:	b15c      	cbz	r4, 707a <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    7062:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    7066:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    706a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    706e:	46a4      	mov	ip, r4
    7070:	2201      	movs	r2, #1
}
    7072:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7074:	2103      	movs	r1, #3
    7076:	2002      	movs	r0, #2
    7078:	4760      	bx	ip
}
    707a:	bc10      	pop	{r4}
    707c:	4770      	bx	lr
    707e:	bf00      	nop
    7080:	200015c0 	.word	0x200015c0

00007084 <ticker_start_ext>:
{
    7084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    7088:	4e28      	ldr	r6, [pc, #160]	; (712c <ticker_start_ext+0xa8>)
{
    708a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    708e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    7090:	252c      	movs	r5, #44	; 0x2c
    7092:	fb05 6504 	mla	r5, r5, r4, r6
{
    7096:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    7098:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    709c:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
    70a0:	6869      	ldr	r1, [r5, #4]
    70a2:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    70a6:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
    70aa:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
    70ae:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
    70b2:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
    70b4:	f10e 0c01 	add.w	ip, lr, #1
    70b8:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    70bc:	4564      	cmp	r4, ip
    70be:	bf98      	it	ls
    70c0:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    70c4:	4561      	cmp	r1, ip
    70c6:	d02e      	beq.n	7126 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    70c8:	6879      	ldr	r1, [r7, #4]
    70ca:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    70ce:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    70d2:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    70d6:	f04f 0904 	mov.w	r9, #4
    70da:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    70de:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    70e0:	9b08      	ldr	r3, [sp, #32]
    70e2:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    70e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    70e6:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    70e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    70ea:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    70ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    70ee:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    70f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    70f2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    70f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    70f6:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    70f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    70fa:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    70fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    70fe:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    7100:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7102:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    7104:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    7106:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7108:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
    710a:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
    710e:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7112:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
    7116:	4798      	blx	r3
    7118:	4633      	mov	r3, r6
    711a:	4649      	mov	r1, r9
    711c:	2200      	movs	r2, #0
    711e:	47a8      	blx	r5
	return user_op->status;
    7120:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    7122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    7126:	2001      	movs	r0, #1
}
    7128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    712c:	200015c0 	.word	0x200015c0

00007130 <ticker_start>:
{
    7130:	b510      	push	{r4, lr}
    7132:	b08a      	sub	sp, #40	; 0x28
    7134:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7136:	9400      	str	r4, [sp, #0]
{
    7138:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    713a:	9401      	str	r4, [sp, #4]
{
    713c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    713e:	9402      	str	r4, [sp, #8]
{
    7140:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7144:	9403      	str	r4, [sp, #12]
{
    7146:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7148:	9404      	str	r4, [sp, #16]
{
    714a:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    714c:	9405      	str	r4, [sp, #20]
{
    714e:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7150:	9406      	str	r4, [sp, #24]
{
    7152:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7154:	9407      	str	r4, [sp, #28]
{
    7156:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7158:	9408      	str	r4, [sp, #32]
    715a:	2400      	movs	r4, #0
    715c:	9409      	str	r4, [sp, #36]	; 0x24
    715e:	f7ff ff91 	bl	7084 <ticker_start_ext>
}
    7162:	b00a      	add	sp, #40	; 0x28
    7164:	bd10      	pop	{r4, pc}
    7166:	bf00      	nop

00007168 <ticker_update_ext>:
{
    7168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    716c:	4d28      	ldr	r5, [pc, #160]	; (7210 <ticker_update_ext+0xa8>)
{
    716e:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    7172:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    7176:	4604      	mov	r4, r0
    7178:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    717a:	212c      	movs	r1, #44	; 0x2c
    717c:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
    7180:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    7184:	eb04 0446 	add.w	r4, r4, r6, lsl #1
    7188:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
    718c:	684c      	ldr	r4, [r1, #4]
    718e:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    7192:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
    7196:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    719a:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
    719c:	f10e 0c01 	add.w	ip, lr, #1
    71a0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    71a4:	45e1      	cmp	r9, ip
    71a6:	bf98      	it	ls
    71a8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    71ac:	4564      	cmp	r4, ip
{
    71ae:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
    71b2:	d02a      	beq.n	720a <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
    71b4:	f8d6 a004 	ldr.w	sl, [r6, #4]
    71b8:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    71bc:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    71c0:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    71c4:	f04f 0b05 	mov.w	fp, #5
    71c8:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    71cc:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    71ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    71d0:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    71d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    71d4:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    71d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    71d8:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    71da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    71dc:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    71de:	9b10      	ldr	r3, [sp, #64]	; 0x40
    71e0:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    71e2:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    71e4:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    71e6:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
    71e8:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
    71ea:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    71ee:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
    71f2:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    71f6:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    71fa:	4798      	blx	r3
    71fc:	462b      	mov	r3, r5
    71fe:	2200      	movs	r2, #0
    7200:	2104      	movs	r1, #4
    7202:	47b0      	blx	r6
	return user_op->status;
    7204:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    7206:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    720a:	2001      	movs	r0, #1
}
    720c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7210:	200015c0 	.word	0x200015c0

00007214 <ticker_update>:
{
    7214:	b510      	push	{r4, lr}
    7216:	b088      	sub	sp, #32
    7218:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    721a:	9400      	str	r4, [sp, #0]
{
    721c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    721e:	9401      	str	r4, [sp, #4]
{
    7220:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    7222:	9402      	str	r4, [sp, #8]
{
    7224:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    7228:	9403      	str	r4, [sp, #12]
{
    722a:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    722e:	9404      	str	r4, [sp, #16]
{
    7230:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    7232:	9405      	str	r4, [sp, #20]
{
    7234:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    7236:	9406      	str	r4, [sp, #24]
    7238:	2400      	movs	r4, #0
    723a:	9407      	str	r4, [sp, #28]
    723c:	f7ff ff94 	bl	7168 <ticker_update_ext>
}
    7240:	b008      	add	sp, #32
    7242:	bd10      	pop	{r4, pc}

00007244 <ticker_stop>:
{
    7244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    7248:	4c1e      	ldr	r4, [pc, #120]	; (72c4 <ticker_stop+0x80>)
{
    724a:	4684      	mov	ip, r0
    724c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    724e:	212c      	movs	r1, #44	; 0x2c
    7250:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
    7254:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    7258:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
    725c:	684d      	ldr	r5, [r1, #4]
    725e:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    7262:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    7266:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    726a:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    726c:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
    7270:	f10e 0c01 	add.w	ip, lr, #1
    7274:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    7278:	4567      	cmp	r7, ip
    727a:	bf98      	it	ls
    727c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    7280:	4565      	cmp	r5, ip
    7282:	d01c      	beq.n	72be <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
    7284:	6877      	ldr	r7, [r6, #4]
    7286:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    728a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
    728e:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    7292:	f04f 0807 	mov.w	r8, #7
    7296:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
    729a:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
    729c:	9b06      	ldr	r3, [sp, #24]
    729e:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    72a0:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    72a2:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    72a4:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
    72a6:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    72aa:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    72ae:	4798      	blx	r3
    72b0:	4623      	mov	r3, r4
    72b2:	2200      	movs	r2, #0
    72b4:	2104      	movs	r1, #4
    72b6:	47b0      	blx	r6
	return user_op->status;
    72b8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
    72ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    72be:	2001      	movs	r0, #1
}
    72c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72c4:	200015c0 	.word	0x200015c0

000072c8 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    72c8:	f00b b96e 	b.w	125a8 <cntr_cnt_get>

000072cc <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    72cc:	b570      	push	{r4, r5, r6, lr}
    72ce:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    72d0:	2000      	movs	r0, #0
{
    72d2:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
    72d4:	f003 f986 	bl	a5e4 <ull_adv_is_enabled>
    72d8:	b978      	cbnz	r0, 72fa <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    72da:	b13c      	cbz	r4, 72ec <ll_addr_set+0x20>
    72dc:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    72de:	2206      	movs	r2, #6
    72e0:	4631      	mov	r1, r6
    72e2:	4807      	ldr	r0, [pc, #28]	; (7300 <ll_addr_set+0x34>)
    72e4:	f010 fc0a 	bl	17afc <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    72e8:	4628      	mov	r0, r5
}
    72ea:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    72ec:	2206      	movs	r2, #6
    72ee:	4631      	mov	r1, r6
    72f0:	4804      	ldr	r0, [pc, #16]	; (7304 <ll_addr_set+0x38>)
    72f2:	f010 fc03 	bl	17afc <memcpy>
	return 0;
    72f6:	4620      	mov	r0, r4
}
    72f8:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    72fa:	200c      	movs	r0, #12
}
    72fc:	bd70      	pop	{r4, r5, r6, pc}
    72fe:	bf00      	nop
    7300:	200015f4 	.word	0x200015f4
    7304:	200015ec 	.word	0x200015ec

00007308 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    7308:	2801      	cmp	r0, #1
{
    730a:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    730c:	d805      	bhi.n	731a <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
    730e:	4a04      	ldr	r2, [pc, #16]	; (7320 <ll_addr_get+0x18>)
    7310:	4804      	ldr	r0, [pc, #16]	; (7324 <ll_addr_get+0x1c>)
    7312:	2b00      	cmp	r3, #0
    7314:	bf18      	it	ne
    7316:	4610      	movne	r0, r2
    7318:	4770      	bx	lr
		return NULL;
    731a:	2000      	movs	r0, #0
	}

	return pub_addr;
}
    731c:	4770      	bx	lr
    731e:	bf00      	nop
    7320:	200015f4 	.word	0x200015f4
    7324:	200015ec 	.word	0x200015ec

00007328 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
    7328:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
    732a:	b510      	push	{r4, lr}
    732c:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    732e:	d80b      	bhi.n	7348 <ll_addr_read+0x20>
	if (addr_type) {
    7330:	4608      	mov	r0, r1
		return rnd_addr;
    7332:	4c07      	ldr	r4, [pc, #28]	; (7350 <ll_addr_read+0x28>)
    7334:	4907      	ldr	r1, [pc, #28]	; (7354 <ll_addr_read+0x2c>)
    7336:	2b00      	cmp	r3, #0
    7338:	bf18      	it	ne
    733a:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
    733c:	2206      	movs	r2, #6
    733e:	4621      	mov	r1, r4
    7340:	f010 fbdc 	bl	17afc <memcpy>
	}

	return addr;
}
    7344:	4620      	mov	r0, r4
    7346:	bd10      	pop	{r4, pc}
		return NULL;
    7348:	2400      	movs	r4, #0
}
    734a:	4620      	mov	r0, r4
    734c:	bd10      	pop	{r4, pc}
    734e:	bf00      	nop
    7350:	200015ec 	.word	0x200015ec
    7354:	200015f4 	.word	0x200015f4

00007358 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    7358:	2802      	cmp	r0, #2
    735a:	d001      	beq.n	7360 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    735c:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    735e:	4770      	bx	lr
{
    7360:	b538      	push	{r3, r4, r5, lr}
    7362:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    7364:	4608      	mov	r0, r1
    7366:	461d      	mov	r5, r3
    7368:	f004 f862 	bl	b430 <ll_connected_get>
			if (!conn) {
    736c:	b110      	cbz	r0, 7374 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    736e:	2000      	movs	r0, #0
    7370:	7028      	strb	r0, [r5, #0]
}
    7372:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    7374:	4620      	mov	r0, r4
}
    7376:	bd38      	pop	{r3, r4, r5, pc}

00007378 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    7378:	2300      	movs	r3, #0
    737a:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    737c:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    737e:	4770      	bx	lr

00007380 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    7380:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    7382:	4802      	ldr	r0, [pc, #8]	; (738c <hci_driver_init+0xc>)
    7384:	f7fb ffb6 	bl	32f4 <bt_hci_driver_register>

	return 0;
}
    7388:	2000      	movs	r0, #0
    738a:	bd08      	pop	{r3, pc}
    738c:	0001b84c 	.word	0x0001b84c

00007390 <hci_driver_send>:
{
    7390:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    7392:	8983      	ldrh	r3, [r0, #12]
{
    7394:	b083      	sub	sp, #12
	if (!buf->len) {
    7396:	b123      	cbz	r3, 73a2 <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    7398:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    739a:	4604      	mov	r4, r0
    739c:	b1c3      	cbz	r3, 73d0 <hci_driver_send+0x40>
    739e:	2b02      	cmp	r3, #2
    73a0:	d004      	beq.n	73ac <hci_driver_send+0x1c>
    73a2:	f06f 0515 	mvn.w	r5, #21
}
    73a6:	4628      	mov	r0, r5
    73a8:	b003      	add	sp, #12
    73aa:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    73ac:	a901      	add	r1, sp, #4
    73ae:	f000 ff13 	bl	81d8 <hci_acl_handle>
	if (evt) {
    73b2:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    73b4:	4605      	mov	r5, r0
	if (evt) {
    73b6:	b113      	cbz	r3, 73be <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    73b8:	4618      	mov	r0, r3
    73ba:	f7fb ff7d 	bl	32b8 <bt_recv_prio>
	if (!err) {
    73be:	2d00      	cmp	r5, #0
    73c0:	d1f1      	bne.n	73a6 <hci_driver_send+0x16>
		net_buf_unref(buf);
    73c2:	4620      	mov	r0, r4
    73c4:	f00c f87a 	bl	134bc <net_buf_unref>
    73c8:	2500      	movs	r5, #0
}
    73ca:	4628      	mov	r0, r5
    73cc:	b003      	add	sp, #12
    73ce:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    73d0:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    73d2:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    73d4:	f000 fa42 	bl	785c <hci_cmd_handle>
	if (evt) {
    73d8:	2800      	cmp	r0, #0
    73da:	d0f2      	beq.n	73c2 <hci_driver_send+0x32>
		bt_recv_prio(evt);
    73dc:	f7fb ff6c 	bl	32b8 <bt_recv_prio>
		if (node_rx) {
    73e0:	9d01      	ldr	r5, [sp, #4]
    73e2:	2d00      	cmp	r5, #0
    73e4:	d0ed      	beq.n	73c2 <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    73e6:	4628      	mov	r0, r5
    73e8:	f001 fab0 	bl	894c <hci_get_class>
    73ec:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    73ee:	9901      	ldr	r1, [sp, #4]
    73f0:	4801      	ldr	r0, [pc, #4]	; (73f8 <hci_driver_send+0x68>)
    73f2:	f013 fa04 	bl	1a7fe <k_queue_append>
	if (!err) {
    73f6:	e7e4      	b.n	73c2 <hci_driver_send+0x32>
    73f8:	200008d8 	.word	0x200008d8

000073fc <recv_thread>:
{
    73fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    73fe:	4e41      	ldr	r6, [pc, #260]	; (7504 <recv_thread+0x108>)
		LL_ASSERT(0);
    7400:	4f41      	ldr	r7, [pc, #260]	; (7508 <recv_thread+0x10c>)
{
    7402:	b083      	sub	sp, #12
    7404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    740c:	4630      	mov	r0, r6
    740e:	f00e fe03 	bl	16018 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    7412:	2800      	cmp	r0, #0
    7414:	d0f6      	beq.n	7404 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    7416:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    7418:	9001      	str	r0, [sp, #4]
	switch (class) {
    741a:	2b04      	cmp	r3, #4
    741c:	d821      	bhi.n	7462 <recv_thread+0x66>
    741e:	2b00      	cmp	r3, #0
    7420:	d14b      	bne.n	74ba <recv_thread+0xbe>
		LL_ASSERT(0);
    7422:	493a      	ldr	r1, [pc, #232]	; (750c <recv_thread+0x110>)
    7424:	483a      	ldr	r0, [pc, #232]	; (7510 <recv_thread+0x114>)
    7426:	f44f 73cd 	mov.w	r3, #410	; 0x19a
    742a:	463a      	mov	r2, r7
    742c:	f00f fd9f 	bl	16f6e <printk>
    7430:	4040      	eors	r0, r0
    7432:	f380 8811 	msr	BASEPRI, r0
    7436:	f04f 0003 	mov.w	r0, #3
    743a:	df02      	svc	2
	node_rx->hdr.next = NULL;
    743c:	9b01      	ldr	r3, [sp, #4]
    743e:	2200      	movs	r2, #0
    7440:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    7442:	a801      	add	r0, sp, #4
    7444:	f001 ff12 	bl	926c <ll_rx_mem_release>
    7448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    744c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7450:	4630      	mov	r0, r6
    7452:	f00e fde1 	bl	16018 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    7456:	2800      	cmp	r0, #0
    7458:	d0d4      	beq.n	7404 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    745a:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    745c:	9001      	str	r0, [sp, #4]
	switch (class) {
    745e:	2b04      	cmp	r3, #4
    7460:	d9dd      	bls.n	741e <recv_thread+0x22>
    7462:	2b05      	cmp	r3, #5
    7464:	d1dd      	bne.n	7422 <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    7466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    746a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    746e:	2003      	movs	r0, #3
    7470:	f7fb fa72 	bl	2958 <bt_buf_get_rx>
    7474:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    7476:	4621      	mov	r1, r4
    7478:	9801      	ldr	r0, [sp, #4]
    747a:	f000 ff39 	bl	82f0 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    747e:	9b01      	ldr	r3, [sp, #4]
    7480:	2200      	movs	r2, #0
    7482:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    7484:	a801      	add	r0, sp, #4
    7486:	f001 fef1 	bl	926c <ll_rx_mem_release>
		while (buf) {
    748a:	2c00      	cmp	r4, #0
    748c:	d0ba      	beq.n	7404 <recv_thread+0x8>
			frag = net_buf_ref(buf);
    748e:	4620      	mov	r0, r4
    7490:	f012 fadd 	bl	19a4e <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    7494:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    7496:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    7498:	2000      	movs	r0, #0
    749a:	f012 fafe 	bl	19a9a <net_buf_frag_del>
			if (frag->len) {
    749e:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
    74a0:	4604      	mov	r4, r0
				bt_recv(frag);
    74a2:	4628      	mov	r0, r5
			if (frag->len) {
    74a4:	b133      	cbz	r3, 74b4 <recv_thread+0xb8>
				bt_recv(frag);
    74a6:	f7fb fe8d 	bl	31c4 <bt_recv>
	z_impl_k_yield();
    74aa:	f00f f9fd 	bl	168a8 <z_impl_k_yield>
		while (buf) {
    74ae:	2c00      	cmp	r4, #0
    74b0:	d1ed      	bne.n	748e <recv_thread+0x92>
    74b2:	e7a7      	b.n	7404 <recv_thread+0x8>
				net_buf_unref(frag);
    74b4:	f00c f802 	bl	134bc <net_buf_unref>
    74b8:	e7f7      	b.n	74aa <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    74ba:	2b02      	cmp	r3, #2
    74bc:	d013      	beq.n	74e6 <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    74be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    74c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    74c6:	2001      	movs	r0, #1
    74c8:	f7fb fa46 	bl	2958 <bt_buf_get_rx>
    74cc:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    74ce:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    74d0:	b19c      	cbz	r4, 74fa <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
    74d2:	4621      	mov	r1, r4
    74d4:	f000 ff46 	bl	8364 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    74d8:	9b01      	ldr	r3, [sp, #4]
    74da:	2200      	movs	r2, #0
    74dc:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    74de:	a801      	add	r0, sp, #4
    74e0:	f001 fec4 	bl	926c <ll_rx_mem_release>
		while (buf) {
    74e4:	e7d3      	b.n	748e <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    74e6:	2200      	movs	r2, #0
    74e8:	2300      	movs	r3, #0
    74ea:	2101      	movs	r1, #1
    74ec:	2000      	movs	r0, #0
    74ee:	f7fb fa5d 	bl	29ac <bt_buf_get_evt>
    74f2:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    74f4:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    74f6:	2c00      	cmp	r4, #0
    74f8:	d1eb      	bne.n	74d2 <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
    74fa:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    74fc:	a801      	add	r0, sp, #4
    74fe:	f001 feb5 	bl	926c <ll_rx_mem_release>
		while (buf) {
    7502:	e77f      	b.n	7404 <recv_thread+0x8>
    7504:	200008d8 	.word	0x200008d8
    7508:	0001b7e8 	.word	0x0001b7e8
    750c:	0001b828 	.word	0x0001b828
    7510:	0001b7c8 	.word	0x0001b7c8

00007514 <prio_recv_thread>:
{
    7514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    7518:	4f2e      	ldr	r7, [pc, #184]	; (75d4 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
    751a:	4e2f      	ldr	r6, [pc, #188]	; (75d8 <prio_recv_thread+0xc4>)
{
    751c:	b082      	sub	sp, #8
    751e:	e00c      	b.n	753a <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    7520:	f7fb fa44 	bl	29ac <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    7524:	4622      	mov	r2, r4
    7526:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    752a:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    752c:	f001 f9f6 	bl	891c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    7530:	4620      	mov	r0, r4
    7532:	f7fb fec1 	bl	32b8 <bt_recv_prio>
	z_impl_k_yield();
    7536:	f00f f9b7 	bl	168a8 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    753a:	f10d 0102 	add.w	r1, sp, #2
    753e:	a801      	add	r0, sp, #4
    7540:	f001 fce2 	bl	8f08 <ll_rx_get>
    7544:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    7546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    754a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    754e:	2100      	movs	r1, #0
    7550:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    7552:	2c00      	cmp	r4, #0
    7554:	d1e4      	bne.n	7520 <prio_recv_thread+0xc>
		if (node_rx) {
    7556:	9b01      	ldr	r3, [sp, #4]
    7558:	b1b3      	cbz	r3, 7588 <prio_recv_thread+0x74>
			ll_rx_dequeue();
    755a:	f001 fdb7 	bl	90cc <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    755e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    7562:	4640      	mov	r0, r8
    7564:	f001 f9f2 	bl	894c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    7568:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    756a:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    756e:	796b      	ldrb	r3, [r5, #5]
    7570:	2b03      	cmp	r3, #3
    7572:	d102      	bne.n	757a <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    7574:	792b      	ldrb	r3, [r5, #4]
    7576:	2b17      	cmp	r3, #23
    7578:	d00e      	beq.n	7598 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
    757a:	4629      	mov	r1, r5
    757c:	4630      	mov	r0, r6
    757e:	f013 f93e 	bl	1a7fe <k_queue_append>
		if (iso_received || node_rx) {
    7582:	9b01      	ldr	r3, [sp, #4]
    7584:	2b00      	cmp	r3, #0
    7586:	d1d8      	bne.n	753a <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
    7588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    758c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7590:	4638      	mov	r0, r7
    7592:	f00e fd9b 	bl	160cc <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    7596:	e7d0      	b.n	753a <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    7598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    759c:	4621      	mov	r1, r4
    759e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    75a2:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    75a4:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    75a8:	f7fb fa00 	bl	29ac <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    75ac:	4641      	mov	r1, r8
    75ae:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    75b0:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    75b2:	f105 001c 	add.w	r0, r5, #28
    75b6:	f000 fe73 	bl	82a0 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    75ba:	4640      	mov	r0, r8
    75bc:	f000 fe90 	bl	82e0 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    75c0:	4620      	mov	r0, r4
			if (buf) {
    75c2:	b124      	cbz	r4, 75ce <prio_recv_thread+0xba>
				bt_recv_prio(buf);
    75c4:	f7fb fe78 	bl	32b8 <bt_recv_prio>
					net_buf_unref(buf);
    75c8:	4620      	mov	r0, r4
    75ca:	f00b ff77 	bl	134bc <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    75ce:	9d01      	ldr	r5, [sp, #4]
    75d0:	e7d3      	b.n	757a <prio_recv_thread+0x66>
    75d2:	bf00      	nop
    75d4:	200008a8 	.word	0x200008a8
    75d8:	200008d8 	.word	0x200008d8

000075dc <hci_driver_open>:
{
    75dc:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    75de:	481a      	ldr	r0, [pc, #104]	; (7648 <hci_driver_open+0x6c>)
{
    75e0:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    75e2:	f002 fa8b 	bl	9afc <ll_init>
	if (err) {
    75e6:	4604      	mov	r4, r0
    75e8:	bb58      	cbnz	r0, 7642 <hci_driver_open+0x66>
	hci_init(NULL);
    75ea:	f001 f9c5 	bl	8978 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    75ee:	2600      	movs	r6, #0
    75f0:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    75f2:	f06f 0209 	mvn.w	r2, #9
    75f6:	e9cd 2403 	strd	r2, r4, [sp, #12]
    75fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
    75fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
    7602:	4b12      	ldr	r3, [pc, #72]	; (764c <hci_driver_open+0x70>)
    7604:	4912      	ldr	r1, [pc, #72]	; (7650 <hci_driver_open+0x74>)
    7606:	9400      	str	r4, [sp, #0]
    7608:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    760c:	4811      	ldr	r0, [pc, #68]	; (7654 <hci_driver_open+0x78>)
    760e:	f00e fc5f 	bl	15ed0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    7612:	4911      	ldr	r1, [pc, #68]	; (7658 <hci_driver_open+0x7c>)
    7614:	480f      	ldr	r0, [pc, #60]	; (7654 <hci_driver_open+0x78>)
    7616:	f013 f86a 	bl	1a6ee <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    761a:	f06f 0207 	mvn.w	r2, #7
    761e:	e9cd 2403 	strd	r2, r4, [sp, #12]
    7622:	e9cd 6706 	strd	r6, r7, [sp, #24]
    7626:	e9cd 4401 	strd	r4, r4, [sp, #4]
    762a:	4b0c      	ldr	r3, [pc, #48]	; (765c <hci_driver_open+0x80>)
    762c:	490c      	ldr	r1, [pc, #48]	; (7660 <hci_driver_open+0x84>)
    762e:	9400      	str	r4, [sp, #0]
    7630:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7634:	480b      	ldr	r0, [pc, #44]	; (7664 <hci_driver_open+0x88>)
    7636:	f00e fc4b 	bl	15ed0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    763a:	490b      	ldr	r1, [pc, #44]	; (7668 <hci_driver_open+0x8c>)
    763c:	4809      	ldr	r0, [pc, #36]	; (7664 <hci_driver_open+0x88>)
    763e:	f013 f856 	bl	1a6ee <z_impl_k_thread_name_set>
}
    7642:	4620      	mov	r0, r4
    7644:	b008      	add	sp, #32
    7646:	bdd0      	pop	{r4, r6, r7, pc}
    7648:	200008a8 	.word	0x200008a8
    764c:	00007515 	.word	0x00007515
    7650:	20002e80 	.word	0x20002e80
    7654:	20000dc8 	.word	0x20000dc8
    7658:	0001b82c 	.word	0x0001b82c
    765c:	000073fd 	.word	0x000073fd
    7660:	20003060 	.word	0x20003060
    7664:	20000e48 	.word	0x20000e48
    7668:	0001b838 	.word	0x0001b838

0000766c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    766e:	4c19      	ldr	r4, [pc, #100]	; (76d4 <le_remote_feat_complete+0x68>)
    7670:	6864      	ldr	r4, [r4, #4]
    7672:	00a4      	lsls	r4, r4, #2
    7674:	d504      	bpl.n	7680 <le_remote_feat_complete+0x14>
    7676:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    7678:	4a17      	ldr	r2, [pc, #92]	; (76d8 <le_remote_feat_complete+0x6c>)
    767a:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    767c:	0712      	lsls	r2, r2, #28
    767e:	d400      	bmi.n	7682 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    7680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7682:	f103 0408 	add.w	r4, r3, #8
    7686:	4607      	mov	r7, r0
    7688:	460e      	mov	r6, r1
    768a:	4620      	mov	r0, r4
    768c:	2102      	movs	r1, #2
    768e:	f012 fa10 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    7692:	233e      	movs	r3, #62	; 0x3e
    7694:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    7696:	230c      	movs	r3, #12
    7698:	7043      	strb	r3, [r0, #1]
    769a:	2101      	movs	r1, #1
    769c:	4620      	mov	r0, r4
    769e:	f012 fa08 	bl	19ab2 <net_buf_simple_add>
    76a2:	4603      	mov	r3, r0
	me->subevent = subevt;
    76a4:	2204      	movs	r2, #4
    76a6:	701a      	strb	r2, [r3, #0]
    76a8:	4620      	mov	r0, r4
    76aa:	210b      	movs	r1, #11
    76ac:	f012 fa01 	bl	19ab2 <net_buf_simple_add>
		memcpy(&sep->features[0],
    76b0:	2208      	movs	r2, #8
	sep->status = status;
    76b2:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    76b4:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    76b8:	b92f      	cbnz	r7, 76c6 <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
    76ba:	1d31      	adds	r1, r6, #4
    76bc:	3003      	adds	r0, #3
}
    76be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    76c2:	f010 ba1b 	b.w	17afc <memcpy>
}
    76c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    76ca:	2100      	movs	r1, #0
    76cc:	3003      	adds	r0, #3
    76ce:	f010 ba20 	b.w	17b12 <memset>
    76d2:	bf00      	nop
    76d4:	20000170 	.word	0x20000170
    76d8:	20000178 	.word	0x20000178

000076dc <hci_vendor_cmd_handle_common>:
{
    76dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    76de:	3801      	subs	r0, #1
{
    76e0:	b087      	sub	sp, #28
    76e2:	4615      	mov	r5, r2
	switch (ocf) {
    76e4:	2809      	cmp	r0, #9
    76e6:	d806      	bhi.n	76f6 <hci_vendor_cmd_handle_common+0x1a>
    76e8:	e8df f000 	tbb	[pc, r0]
    76ec:	05432609 	.word	0x05432609
    76f0:	6b055705 	.word	0x6b055705
    76f4:	9f8a      	.short	0x9f8a
    76f6:	f06f 0015 	mvn.w	r0, #21
}
    76fa:	b007      	add	sp, #28
    76fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    76fe:	4b55      	ldr	r3, [pc, #340]	; (7854 <hci_vendor_cmd_handle_common+0x178>)
    7700:	210d      	movs	r1, #13
    7702:	8818      	ldrh	r0, [r3, #0]
    7704:	f010 fd53 	bl	181ae <bt_hci_cmd_complete_create>
    7708:	210d      	movs	r1, #13
    770a:	6028      	str	r0, [r5, #0]
    770c:	3008      	adds	r0, #8
    770e:	f012 f9d0 	bl	19ab2 <net_buf_simple_add>
    7712:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    7714:	2202      	movs	r2, #2
	rp->status = 0x00;
    7716:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    7718:	2103      	movs	r1, #3
	rp->status = 0x00;
    771a:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    771c:	705a      	strb	r2, [r3, #1]
    771e:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    7720:	70da      	strb	r2, [r3, #3]
    7722:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    7724:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    7726:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    7728:	71d8      	strb	r0, [r3, #7]
    772a:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    772c:	7258      	strb	r0, [r3, #9]
    772e:	7298      	strb	r0, [r3, #10]
    7730:	72d8      	strb	r0, [r3, #11]
    7732:	7318      	strb	r0, [r3, #12]
}
    7734:	b007      	add	sp, #28
    7736:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7738:	4b46      	ldr	r3, [pc, #280]	; (7854 <hci_vendor_cmd_handle_common+0x178>)
    773a:	2141      	movs	r1, #65	; 0x41
    773c:	8818      	ldrh	r0, [r3, #0]
    773e:	f010 fd36 	bl	181ae <bt_hci_cmd_complete_create>
    7742:	2141      	movs	r1, #65	; 0x41
    7744:	6028      	str	r0, [r5, #0]
    7746:	3008      	adds	r0, #8
    7748:	f012 f9b3 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    774c:	2400      	movs	r4, #0
    774e:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    7750:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    7752:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    7756:	4621      	mov	r1, r4
    7758:	f010 f9db 	bl	17b12 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    775c:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    775e:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    7760:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    7764:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    7768:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    776a:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    776c:	70ab      	strb	r3, [r5, #2]
}
    776e:	b007      	add	sp, #28
    7770:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7772:	4b38      	ldr	r3, [pc, #224]	; (7854 <hci_vendor_cmd_handle_common+0x178>)
    7774:	2109      	movs	r1, #9
    7776:	8818      	ldrh	r0, [r3, #0]
    7778:	f010 fd19 	bl	181ae <bt_hci_cmd_complete_create>
    777c:	2109      	movs	r1, #9
    777e:	6028      	str	r0, [r5, #0]
    7780:	3008      	adds	r0, #8
    7782:	f012 f996 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7786:	2400      	movs	r4, #0
    7788:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    778c:	2208      	movs	r2, #8
    778e:	4621      	mov	r1, r4
    7790:	f010 f9bf 	bl	17b12 <memset>
	return 0;
    7794:	4620      	mov	r0, r4
}
    7796:	b007      	add	sp, #28
    7798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    779a:	6889      	ldr	r1, [r1, #8]
    779c:	2000      	movs	r0, #0
    779e:	f7ff fd95 	bl	72cc <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    77a2:	4b2c      	ldr	r3, [pc, #176]	; (7854 <hci_vendor_cmd_handle_common+0x178>)
    77a4:	2101      	movs	r1, #1
    77a6:	8818      	ldrh	r0, [r3, #0]
    77a8:	f010 fd01 	bl	181ae <bt_hci_cmd_complete_create>
    77ac:	2101      	movs	r1, #1
    77ae:	4604      	mov	r4, r0
    77b0:	3008      	adds	r0, #8
    77b2:	f012 f97e 	bl	19ab2 <net_buf_simple_add>
    77b6:	4603      	mov	r3, r0
	ccst->status = status;
    77b8:	2000      	movs	r0, #0
    77ba:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
    77bc:	602c      	str	r4, [r5, #0]
}
    77be:	b007      	add	sp, #28
    77c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    77c2:	4e25      	ldr	r6, [pc, #148]	; (7858 <hci_vendor_cmd_handle_common+0x17c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    77c4:	4f23      	ldr	r7, [pc, #140]	; (7854 <hci_vendor_cmd_handle_common+0x178>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    77c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    77c8:	46ec      	mov	ip, sp
    77ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    77ce:	e896 0003 	ldmia.w	r6, {r0, r1}
    77d2:	f84c 0b04 	str.w	r0, [ip], #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    77d6:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    77d8:	f88c 1000 	strb.w	r1, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    77dc:	2116      	movs	r1, #22
    77de:	f010 fce6 	bl	181ae <bt_hci_cmd_complete_create>
    77e2:	2116      	movs	r1, #22
    77e4:	6028      	str	r0, [r5, #0]
    77e6:	3008      	adds	r0, #8
    77e8:	f012 f963 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    77ec:	2400      	movs	r4, #0
    77ee:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    77f2:	2215      	movs	r2, #21
    77f4:	4669      	mov	r1, sp
    77f6:	f010 f981 	bl	17afc <memcpy>
	return 0;
    77fa:	4620      	mov	r0, r4
}
    77fc:	b007      	add	sp, #28
    77fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7800:	4b14      	ldr	r3, [pc, #80]	; (7854 <hci_vendor_cmd_handle_common+0x178>)
    7802:	2118      	movs	r1, #24
    7804:	8818      	ldrh	r0, [r3, #0]
    7806:	f010 fcd2 	bl	181ae <bt_hci_cmd_complete_create>
    780a:	2118      	movs	r1, #24
    780c:	6028      	str	r0, [r5, #0]
    780e:	3008      	adds	r0, #8
    7810:	f012 f94f 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7814:	2400      	movs	r4, #0
    7816:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    7818:	2101      	movs	r1, #1
	rp->status = 0x00;
    781a:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    781e:	f00b fccd 	bl	131bc <hci_vendor_read_static_addr>
    7822:	7068      	strb	r0, [r5, #1]
	return 0;
    7824:	4620      	mov	r0, r4
}
    7826:	b007      	add	sp, #28
    7828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    782a:	4b0a      	ldr	r3, [pc, #40]	; (7854 <hci_vendor_cmd_handle_common+0x178>)
    782c:	2121      	movs	r1, #33	; 0x21
    782e:	8818      	ldrh	r0, [r3, #0]
    7830:	f010 fcbd 	bl	181ae <bt_hci_cmd_complete_create>
    7834:	2121      	movs	r1, #33	; 0x21
    7836:	6028      	str	r0, [r5, #0]
    7838:	3008      	adds	r0, #8
    783a:	f012 f93a 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    783e:	4601      	mov	r1, r0
    7840:	2400      	movs	r4, #0
    7842:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    7846:	3001      	adds	r0, #1
    7848:	f00b fd2c 	bl	132a4 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    784c:	4620      	mov	r0, r4
}
    784e:	b007      	add	sp, #28
    7850:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7852:	bf00      	nop
    7854:	20002784 	.word	0x20002784
    7858:	0001b860 	.word	0x0001b860

0000785c <hci_cmd_handle>:
{
    785c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    785e:	8983      	ldrh	r3, [r0, #12]
{
    7860:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    7862:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    7864:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    7866:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    7868:	d92f      	bls.n	78ca <hci_cmd_handle+0x6e>
	return net_buf_simple_pull_mem(&buf->b, len);
    786a:	4604      	mov	r4, r0
    786c:	2103      	movs	r1, #3
    786e:	3008      	adds	r0, #8
    7870:	f012 f946 	bl	19b00 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    7874:	89a2      	ldrh	r2, [r4, #12]
    7876:	7883      	ldrb	r3, [r0, #2]
    7878:	429a      	cmp	r2, r3
    787a:	d326      	bcc.n	78ca <hci_cmd_handle+0x6e>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    787c:	8802      	ldrh	r2, [r0, #0]
    787e:	4eb6      	ldr	r6, [pc, #728]	; (7b58 <hci_cmd_handle+0x2fc>)
	switch (BT_OGF(_opcode)) {
    7880:	f3c2 2385 	ubfx	r3, r2, #10, #6
    7884:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    7886:	8032      	strh	r2, [r6, #0]
    7888:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
    788a:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    788e:	d809      	bhi.n	78a4 <hci_cmd_handle+0x48>
    7890:	b1a3      	cbz	r3, 78bc <hci_cmd_handle+0x60>
    7892:	3b01      	subs	r3, #1
    7894:	2b07      	cmp	r3, #7
    7896:	d811      	bhi.n	78bc <hci_cmd_handle+0x60>
    7898:	e8df f003 	tbb	[pc, r3]
    789c:	4d2a101b 	.word	0x4d2a101b
    78a0:	66101010 	.word	0x66101010
    78a4:	2b3f      	cmp	r3, #63	; 0x3f
    78a6:	d109      	bne.n	78bc <hci_cmd_handle+0x60>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    78a8:	4621      	mov	r1, r4
    78aa:	aa07      	add	r2, sp, #28
    78ac:	4628      	mov	r0, r5
    78ae:	f7ff ff15 	bl	76dc <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    78b2:	3016      	adds	r0, #22
	return evt;
    78b4:	bf18      	it	ne
    78b6:	9c07      	ldrne	r4, [sp, #28]
	if (err == -EINVAL) {
    78b8:	d104      	bne.n	78c4 <hci_cmd_handle+0x68>
	return bt_hci_cmd_status_create(_opcode, status);
    78ba:	8830      	ldrh	r0, [r6, #0]
    78bc:	2101      	movs	r1, #1
    78be:	f010 fc88 	bl	181d2 <bt_hci_cmd_status_create>
    78c2:	4604      	mov	r4, r0
}
    78c4:	4620      	mov	r0, r4
    78c6:	b00d      	add	sp, #52	; 0x34
    78c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    78ca:	2400      	movs	r4, #0
}
    78cc:	4620      	mov	r0, r4
    78ce:	b00d      	add	sp, #52	; 0x34
    78d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    78d2:	2d06      	cmp	r5, #6
    78d4:	f000 8420 	beq.w	8118 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x118>
    78d8:	2d1d      	cmp	r5, #29
    78da:	d1ef      	bne.n	78bc <hci_cmd_handle+0x60>
	handle = sys_le16_to_cpu(cmd->handle);
    78dc:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    78de:	8818      	ldrh	r0, [r3, #0]
    78e0:	f003 ff34 	bl	b74c <ll_version_ind_send>
    78e4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    78e6:	8830      	ldrh	r0, [r6, #0]
    78e8:	f010 fc73 	bl	181d2 <bt_hci_cmd_status_create>
    78ec:	4604      	mov	r4, r0
}
    78ee:	e7e9      	b.n	78c4 <hci_cmd_handle+0x68>
	switch (ocf) {
    78f0:	2d63      	cmp	r5, #99	; 0x63
    78f2:	f000 845a 	beq.w	81aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa>
    78f6:	f200 80ed 	bhi.w	7ad4 <hci_cmd_handle+0x278>
    78fa:	2d03      	cmp	r5, #3
    78fc:	f000 8433 	beq.w	8166 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166>
    7900:	2d2d      	cmp	r5, #45	; 0x2d
    7902:	f040 80d3 	bne.w	7aac <hci_cmd_handle+0x250>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    7906:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7908:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    790a:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    790c:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    790e:	f010 fc4e 	bl	181ae <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    7912:	2104      	movs	r1, #4
    7914:	9007      	str	r0, [sp, #28]
    7916:	3008      	adds	r0, #8
    7918:	f012 f8cb 	bl	19ab2 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    791c:	b2b4      	uxth	r4, r6
    791e:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    7920:	1cc3      	adds	r3, r0, #3
    7922:	4621      	mov	r1, r4
    7924:	463a      	mov	r2, r7
    7926:	2002      	movs	r0, #2
    7928:	f7ff fd16 	bl	7358 <ll_tx_pwr_lvl_get>
	rp->status = status;
    792c:	7028      	strb	r0, [r5, #0]
	return evt;
    792e:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    7930:	f8a5 6001 	strh.w	r6, [r5, #1]
}
    7934:	e7c6      	b.n	78c4 <hci_cmd_handle+0x68>
	switch (ocf) {
    7936:	1e6a      	subs	r2, r5, #1
    7938:	2a08      	cmp	r2, #8
    793a:	d8bf      	bhi.n	78bc <hci_cmd_handle+0x60>
    793c:	a301      	add	r3, pc, #4	; (adr r3, 7944 <hci_cmd_handle+0xe8>)
    793e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    7942:	bf00      	nop
    7944:	00007c1d 	.word	0x00007c1d
    7948:	00007b61 	.word	0x00007b61
    794c:	00007b2f 	.word	0x00007b2f
    7950:	000078bd 	.word	0x000078bd
    7954:	000078bd 	.word	0x000078bd
    7958:	000078bd 	.word	0x000078bd
    795c:	000078bd 	.word	0x000078bd
    7960:	000078bd 	.word	0x000078bd
    7964:	00007b0d 	.word	0x00007b0d
	switch (ocf) {
    7968:	1e6a      	subs	r2, r5, #1
    796a:	2a4d      	cmp	r2, #77	; 0x4d
    796c:	d8a6      	bhi.n	78bc <hci_cmd_handle+0x60>
    796e:	a301      	add	r3, pc, #4	; (adr r3, 7974 <hci_cmd_handle+0x118>)
    7970:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    7974:	00007c77 	.word	0x00007c77
    7978:	00007c53 	.word	0x00007c53
    797c:	00007d1f 	.word	0x00007d1f
    7980:	000078bd 	.word	0x000078bd
    7984:	00007d15 	.word	0x00007d15
    7988:	00007cf9 	.word	0x00007cf9
    798c:	00007cdd 	.word	0x00007cdd
    7990:	00007cd1 	.word	0x00007cd1
    7994:	00007cc5 	.word	0x00007cc5
    7998:	00007ca5 	.word	0x00007ca5
    799c:	000078bd 	.word	0x000078bd
    79a0:	000078bd 	.word	0x000078bd
    79a4:	000078bd 	.word	0x000078bd
    79a8:	000078bd 	.word	0x000078bd
    79ac:	00007c83 	.word	0x00007c83
    79b0:	00008113 	.word	0x00008113
    79b4:	0000810b 	.word	0x0000810b
    79b8:	00008103 	.word	0x00008103
    79bc:	000080db 	.word	0x000080db
    79c0:	000078bd 	.word	0x000078bd
    79c4:	000080af 	.word	0x000080af
    79c8:	0000809b 	.word	0x0000809b
    79cc:	00008067 	.word	0x00008067
    79d0:	00008045 	.word	0x00008045
    79d4:	000078bd 	.word	0x000078bd
    79d8:	0000803b 	.word	0x0000803b
    79dc:	0000802b 	.word	0x0000802b
    79e0:	00007ff5 	.word	0x00007ff5
    79e4:	000078bd 	.word	0x000078bd
    79e8:	000078bd 	.word	0x000078bd
    79ec:	000078bd 	.word	0x000078bd
    79f0:	00007fd7 	.word	0x00007fd7
    79f4:	00007fbf 	.word	0x00007fbf
    79f8:	00007faf 	.word	0x00007faf
    79fc:	00007f79 	.word	0x00007f79
    7a00:	00007f67 	.word	0x00007f67
    7a04:	000078bd 	.word	0x000078bd
    7a08:	000078bd 	.word	0x000078bd
    7a0c:	00007f59 	.word	0x00007f59
    7a10:	00007f51 	.word	0x00007f51
    7a14:	00007f4b 	.word	0x00007f4b
    7a18:	00007f29 	.word	0x00007f29
    7a1c:	00007efb 	.word	0x00007efb
    7a20:	00007ecd 	.word	0x00007ecd
    7a24:	00007ec3 	.word	0x00007ec3
    7a28:	00007eb5 	.word	0x00007eb5
    7a2c:	00007e69 	.word	0x00007e69
    7a30:	00007e0f 	.word	0x00007e0f
    7a34:	00007df1 	.word	0x00007df1
    7a38:	00007d95 	.word	0x00007d95
    7a3c:	000078bd 	.word	0x000078bd
    7a40:	000078bd 	.word	0x000078bd
    7a44:	000078bd 	.word	0x000078bd
    7a48:	000078bd 	.word	0x000078bd
    7a4c:	000078bd 	.word	0x000078bd
    7a50:	000078bd 	.word	0x000078bd
    7a54:	000078bd 	.word	0x000078bd
    7a58:	000078bd 	.word	0x000078bd
    7a5c:	000078bd 	.word	0x000078bd
    7a60:	000078bd 	.word	0x000078bd
    7a64:	000078bd 	.word	0x000078bd
    7a68:	000078bd 	.word	0x000078bd
    7a6c:	000078bd 	.word	0x000078bd
    7a70:	000078bd 	.word	0x000078bd
    7a74:	000078bd 	.word	0x000078bd
    7a78:	000078bd 	.word	0x000078bd
    7a7c:	000078bd 	.word	0x000078bd
    7a80:	000078bd 	.word	0x000078bd
    7a84:	000078bd 	.word	0x000078bd
    7a88:	000078bd 	.word	0x000078bd
    7a8c:	000078bd 	.word	0x000078bd
    7a90:	000078bd 	.word	0x000078bd
    7a94:	000078bd 	.word	0x000078bd
    7a98:	000078bd 	.word	0x000078bd
    7a9c:	00007d71 	.word	0x00007d71
    7aa0:	000078bd 	.word	0x000078bd
    7aa4:	000078bd 	.word	0x000078bd
    7aa8:	00007d67 	.word	0x00007d67
	switch (ocf) {
    7aac:	2d01      	cmp	r5, #1
    7aae:	f47f af05 	bne.w	78bc <hci_cmd_handle+0x60>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    7ab2:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    7ab4:	4b29      	ldr	r3, [pc, #164]	; (7b5c <hci_cmd_handle+0x300>)
    7ab6:	6811      	ldr	r1, [r2, #0]
    7ab8:	6852      	ldr	r2, [r2, #4]
    7aba:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    7abc:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    7abe:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    7ac0:	f010 fb75 	bl	181ae <bt_hci_cmd_complete_create>
    7ac4:	2101      	movs	r1, #1
    7ac6:	4604      	mov	r4, r0
    7ac8:	3008      	adds	r0, #8
    7aca:	f011 fff2 	bl	19ab2 <net_buf_simple_add>
	ccst->status = status;
    7ace:	2300      	movs	r3, #0
    7ad0:	7003      	strb	r3, [r0, #0]
}
    7ad2:	e6f7      	b.n	78c4 <hci_cmd_handle+0x68>
	switch (ocf) {
    7ad4:	2d7b      	cmp	r5, #123	; 0x7b
    7ad6:	f000 832b 	beq.w	8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>
    7ada:	2d7c      	cmp	r5, #124	; 0x7c
    7adc:	f47f aeee 	bne.w	78bc <hci_cmd_handle+0x60>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    7ae0:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7ae2:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    7ae4:	8859      	ldrh	r1, [r3, #2]
    7ae6:	b2a8      	uxth	r0, r5
    7ae8:	f003 ff6a 	bl	b9c0 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    7aec:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7aee:	2103      	movs	r1, #3
    7af0:	8830      	ldrh	r0, [r6, #0]
    7af2:	f010 fb5c 	bl	181ae <bt_hci_cmd_complete_create>
    7af6:	2103      	movs	r1, #3
    7af8:	4603      	mov	r3, r0
    7afa:	3008      	adds	r0, #8
    7afc:	9307      	str	r3, [sp, #28]
    7afe:	f011 ffd8 	bl	19ab2 <net_buf_simple_add>
	rp->status = status;
    7b02:	7004      	strb	r4, [r0, #0]
	return evt;
    7b04:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    7b06:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    7b0a:	e6db      	b.n	78c4 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7b0c:	2107      	movs	r1, #7
    7b0e:	f010 fb4e 	bl	181ae <bt_hci_cmd_complete_create>
    7b12:	2107      	movs	r1, #7
    7b14:	4603      	mov	r3, r0
    7b16:	3008      	adds	r0, #8
    7b18:	9307      	str	r3, [sp, #28]
    7b1a:	f011 ffca 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7b1e:	4601      	mov	r1, r0
    7b20:	2000      	movs	r0, #0
    7b22:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    7b26:	f7ff fbff 	bl	7328 <ll_addr_read>
	return evt;
    7b2a:	9c07      	ldr	r4, [sp, #28]
    7b2c:	e6ca      	b.n	78c4 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7b2e:	2109      	movs	r1, #9
    7b30:	f010 fb3d 	bl	181ae <bt_hci_cmd_complete_create>
    7b34:	2109      	movs	r1, #9
    7b36:	4603      	mov	r3, r0
    7b38:	3008      	adds	r0, #8
    7b3a:	9307      	str	r3, [sp, #28]
    7b3c:	f011 ffb9 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7b40:	2100      	movs	r1, #0
    7b42:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    7b44:	2208      	movs	r2, #8
	rp->status = 0x00;
    7b46:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    7b4a:	f00f ffe2 	bl	17b12 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    7b4e:	2360      	movs	r3, #96	; 0x60
	return evt;
    7b50:	9c07      	ldr	r4, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
    7b52:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
    7b54:	e6b6      	b.n	78c4 <hci_cmd_handle+0x68>
    7b56:	bf00      	nop
    7b58:	20002784 	.word	0x20002784
    7b5c:	20000170 	.word	0x20000170
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7b60:	2141      	movs	r1, #65	; 0x41
    7b62:	f010 fb24 	bl	181ae <bt_hci_cmd_complete_create>
    7b66:	2141      	movs	r1, #65	; 0x41
    7b68:	4603      	mov	r3, r0
    7b6a:	3008      	adds	r0, #8
    7b6c:	9307      	str	r3, [sp, #28]
    7b6e:	f011 ffa0 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7b72:	2100      	movs	r1, #0
    7b74:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    7b76:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    7b78:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    7b7c:	f00f ffc9 	bl	17b12 <memset>
	rp->commands[15] |= BIT(1);
    7b80:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
    7b82:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
    7b84:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    7b86:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
    7b88:	f043 0302 	orr.w	r3, r3, #2
    7b8c:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    7b8e:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
    7b90:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
    7b94:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    7b98:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
    7b9c:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
    7b9e:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
    7ba0:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
    7ba2:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    7ba4:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
    7ba6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
    7baa:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
    7bae:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
    7bb2:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
    7bb6:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
    7bba:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
    7bbc:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
    7bbe:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
    7bc0:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
    7bc2:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
    7bc4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
    7bc8:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    7bca:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
    7bce:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    7bd2:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
    7bd6:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    7bda:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
    7bde:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
    7be0:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
    7be2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    7be6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    7bea:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    7bec:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
    7bf0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    7bf4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    7bf8:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    7bfc:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
    7c00:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
    7c04:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    7c08:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    7c0c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    7c10:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    7c14:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
    7c18:	9c07      	ldr	r4, [sp, #28]
    7c1a:	e653      	b.n	78c4 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7c1c:	2109      	movs	r1, #9
    7c1e:	f010 fac6 	bl	181ae <bt_hci_cmd_complete_create>
    7c22:	2109      	movs	r1, #9
    7c24:	4603      	mov	r3, r0
    7c26:	3008      	adds	r0, #8
    7c28:	9307      	str	r3, [sp, #28]
    7c2a:	f011 ff42 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7c2e:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
    7c30:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    7c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
    7c36:	7003      	strb	r3, [r0, #0]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    7c38:	f06f 040e 	mvn.w	r4, #14
	rp->hci_version = LL_VERSION_NUMBER;
    7c3c:	7041      	strb	r1, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    7c3e:	7083      	strb	r3, [r0, #2]
    7c40:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    7c42:	2305      	movs	r3, #5
    7c44:	7144      	strb	r4, [r0, #5]
	rp->lmp_version = LL_VERSION_NUMBER;
    7c46:	7101      	strb	r1, [r0, #4]
	return evt;
    7c48:	9c07      	ldr	r4, [sp, #28]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    7c4a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    7c4c:	71c2      	strb	r2, [r0, #7]
    7c4e:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
    7c50:	e638      	b.n	78c4 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7c52:	2104      	movs	r1, #4
    7c54:	f010 faab 	bl	181ae <bt_hci_cmd_complete_create>
    7c58:	2104      	movs	r1, #4
    7c5a:	4603      	mov	r3, r0
    7c5c:	3008      	adds	r0, #8
    7c5e:	9307      	str	r3, [sp, #28]
    7c60:	f011 ff27 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7c64:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    7c66:	2103      	movs	r1, #3
	rp->status = 0x00;
    7c68:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    7c6a:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    7c6c:	70c1      	strb	r1, [r0, #3]
	return evt;
    7c6e:	9c07      	ldr	r4, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    7c70:	7042      	strb	r2, [r0, #1]
    7c72:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    7c74:	e626      	b.n	78c4 <hci_cmd_handle+0x68>
    7c76:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    7c78:	4bbe      	ldr	r3, [pc, #760]	; (7f74 <hci_cmd_handle+0x718>)
    7c7a:	6811      	ldr	r1, [r2, #0]
    7c7c:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    7c7e:	6019      	str	r1, [r3, #0]
    7c80:	e71c      	b.n	7abc <hci_cmd_handle+0x260>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7c82:	2102      	movs	r1, #2
    7c84:	f010 fa93 	bl	181ae <bt_hci_cmd_complete_create>
    7c88:	2102      	movs	r1, #2
    7c8a:	4603      	mov	r3, r0
    7c8c:	3008      	adds	r0, #8
    7c8e:	9307      	str	r3, [sp, #28]
    7c90:	f011 ff0f 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7c94:	2300      	movs	r3, #0
    7c96:	7003      	strb	r3, [r0, #0]
    7c98:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
    7c9a:	f007 fcf1 	bl	f680 <ll_fal_size_get>
    7c9e:	7060      	strb	r0, [r4, #1]
	return evt;
    7ca0:	9c07      	ldr	r4, [sp, #28]
    7ca2:	e60f      	b.n	78c4 <hci_cmd_handle+0x68>
	status = ll_adv_enable(cmd->enable);
    7ca4:	68a3      	ldr	r3, [r4, #8]
    7ca6:	7818      	ldrb	r0, [r3, #0]
    7ca8:	f7f8 fbd2 	bl	450 <ll_adv_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    7cac:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    7cae:	2101      	movs	r1, #1
    7cb0:	8830      	ldrh	r0, [r6, #0]
    7cb2:	f010 fa7c 	bl	181ae <bt_hci_cmd_complete_create>
    7cb6:	2101      	movs	r1, #1
    7cb8:	4604      	mov	r4, r0
    7cba:	3008      	adds	r0, #8
    7cbc:	f011 fef9 	bl	19ab2 <net_buf_simple_add>
	ccst->status = status;
    7cc0:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
    7cc2:	e5ff      	b.n	78c4 <hci_cmd_handle+0x68>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    7cc4:	68a1      	ldr	r1, [r4, #8]
    7cc6:	f811 0b01 	ldrb.w	r0, [r1], #1
    7cca:	f002 fd7b 	bl	a7c4 <ll_adv_scan_rsp_set>
    7cce:	e7ed      	b.n	7cac <hci_cmd_handle+0x450>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    7cd0:	68a1      	ldr	r1, [r4, #8]
    7cd2:	f811 0b01 	ldrb.w	r0, [r1], #1
    7cd6:	f002 fd2b 	bl	a730 <ll_adv_data_set>
    7cda:	e7e7      	b.n	7cac <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7cdc:	2102      	movs	r1, #2
    7cde:	f010 fa66 	bl	181ae <bt_hci_cmd_complete_create>
    7ce2:	2102      	movs	r1, #2
    7ce4:	4603      	mov	r3, r0
    7ce6:	3008      	adds	r0, #8
    7ce8:	9307      	str	r3, [sp, #28]
    7cea:	f011 fee2 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7cee:	2300      	movs	r3, #0
    7cf0:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    7cf2:	7043      	strb	r3, [r0, #1]
	return evt;
    7cf4:	9c07      	ldr	r4, [sp, #28]
    7cf6:	e5e5      	b.n	78c4 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    7cf8:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    7cfa:	7ba5      	ldrb	r5, [r4, #14]
    7cfc:	79a3      	ldrb	r3, [r4, #6]
    7cfe:	7962      	ldrb	r2, [r4, #5]
    7d00:	7921      	ldrb	r1, [r4, #4]
    7d02:	8820      	ldrh	r0, [r4, #0]
    7d04:	9502      	str	r5, [sp, #8]
    7d06:	7b65      	ldrb	r5, [r4, #13]
    7d08:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    7d0a:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    7d0c:	9400      	str	r4, [sp, #0]
    7d0e:	f002 fb13 	bl	a338 <ll_adv_params_set>
    7d12:	e7cb      	b.n	7cac <hci_cmd_handle+0x450>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    7d14:	68a1      	ldr	r1, [r4, #8]
    7d16:	2001      	movs	r0, #1
    7d18:	f7ff fad8 	bl	72cc <ll_addr_set>
    7d1c:	e7c6      	b.n	7cac <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7d1e:	2109      	movs	r1, #9
    7d20:	f010 fa45 	bl	181ae <bt_hci_cmd_complete_create>
    7d24:	2109      	movs	r1, #9
    7d26:	4603      	mov	r3, r0
    7d28:	3008      	adds	r0, #8
    7d2a:	9307      	str	r3, [sp, #28]
    7d2c:	f011 fec1 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7d30:	2100      	movs	r1, #0
    7d32:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    7d34:	2208      	movs	r2, #8
	rp->status = 0x00;
    7d36:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    7d3a:	f00f feea 	bl	17b12 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    7d3e:	f000 fe43 	bl	89c8 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
    7d42:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
    7d44:	f3c0 2407 	ubfx	r4, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    7d48:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
    7d4a:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    7d4c:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
    7d4e:	7068      	strb	r0, [r5, #1]
	dst[1] = val >> 8;
    7d50:	70ac      	strb	r4, [r5, #2]
    7d52:	f3c1 2007 	ubfx	r0, r1, #8, #8
    7d56:	712b      	strb	r3, [r5, #4]
    7d58:	0a13      	lsrs	r3, r2, #8
	return evt;
    7d5a:	9c07      	ldr	r4, [sp, #28]
	dst[0] = val;
    7d5c:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
    7d5e:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
    7d60:	71ea      	strb	r2, [r5, #7]
	dst[1] = val >> 8;
    7d62:	722b      	strb	r3, [r5, #8]
	if (err == -EINVAL) {
    7d64:	e5ae      	b.n	78c4 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    7d66:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    7d68:	79c1      	ldrb	r1, [r0, #7]
    7d6a:	f007 ff9b 	bl	fca4 <ll_priv_mode_set>
    7d6e:	e79d      	b.n	7cac <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7d70:	2103      	movs	r1, #3
    7d72:	f010 fa1c 	bl	181ae <bt_hci_cmd_complete_create>
    7d76:	2103      	movs	r1, #3
    7d78:	4603      	mov	r3, r0
    7d7a:	3008      	adds	r0, #8
    7d7c:	9307      	str	r3, [sp, #28]
    7d7e:	f011 fe98 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    7d82:	4601      	mov	r1, r0
    7d84:	2300      	movs	r3, #0
    7d86:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    7d8a:	3001      	adds	r0, #1
    7d8c:	f7ff faf4 	bl	7378 <ll_tx_pwr_get>
	return evt;
    7d90:	9c07      	ldr	r4, [sp, #28]
    7d92:	e597      	b.n	78c4 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    7d94:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    7d96:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
    7d98:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    7d9a:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    7d9c:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    7da0:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
    7da2:	bf48      	it	mi
    7da4:	f041 0103 	orrmi.w	r1, r1, #3
    7da8:	7913      	ldrb	r3, [r2, #4]
    7daa:	bf48      	it	mi
    7dac:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    7dae:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
    7db0:	bf44      	itt	mi
    7db2:	f043 0303 	orrmi.w	r3, r3, #3
    7db6:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    7db8:	ea43 0201 	orr.w	r2, r3, r1
    7dbc:	f032 0203 	bics.w	r2, r2, #3
    7dc0:	f040 81fc 	bne.w	81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>
	if (!(cmd->tx_phys & 0x07) ||
    7dc4:	074d      	lsls	r5, r1, #29
    7dc6:	f000 81f3 	beq.w	81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
    7dca:	075a      	lsls	r2, r3, #29
    7dcc:	f000 81f0 	beq.w	81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>
	if (phy_opts & 0x03) {
    7dd0:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    7dd4:	bf1c      	itt	ne
    7dd6:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    7dda:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    7dde:	4638      	mov	r0, r7
    7de0:	f003 fd78 	bl	b8d4 <ll_phy_req_send>
    7de4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    7de6:	8830      	ldrh	r0, [r6, #0]
    7de8:	f010 f9f3 	bl	181d2 <bt_hci_cmd_status_create>
    7dec:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    7dee:	e569      	b.n	78c4 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    7df0:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    7df2:	781a      	ldrb	r2, [r3, #0]
    7df4:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    7df6:	bf4a      	itet	mi
    7df8:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    7dfa:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
    7dfc:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    7dfe:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    7e00:	bf4a      	itet	mi
    7e02:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    7e04:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
    7e06:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    7e08:	f003 fd5a 	bl	b8c0 <ll_phy_default_set>
    7e0c:	e74e      	b.n	7cac <hci_cmd_handle+0x450>
	handle = sys_le16_to_cpu(cmd->handle);
    7e0e:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7e10:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    7e12:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7e14:	f010 f9cb 	bl	181ae <bt_hci_cmd_complete_create>
    7e18:	2105      	movs	r1, #5
    7e1a:	4603      	mov	r3, r0
    7e1c:	3008      	adds	r0, #8
    7e1e:	9307      	str	r3, [sp, #28]
    7e20:	f011 fe47 	bl	19ab2 <net_buf_simple_add>
    7e24:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    7e26:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
    7e28:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    7e2a:	1ce9      	adds	r1, r5, #3
    7e2c:	f003 fd2a 	bl	b884 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    7e30:	78eb      	ldrb	r3, [r5, #3]
	rp->status = status;
    7e32:	7028      	strb	r0, [r5, #0]
    7e34:	2b00      	cmp	r3, #0
    7e36:	fa93 f2a3 	rbit	r2, r3
    7e3a:	792b      	ldrb	r3, [r5, #4]
    7e3c:	fab2 f282 	clz	r2, r2
    7e40:	bf08      	it	eq
    7e42:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    7e46:	2b00      	cmp	r3, #0
    7e48:	fa93 f3a3 	rbit	r3, r3
    7e4c:	fab3 f383 	clz	r3, r3
    7e50:	f102 0201 	add.w	r2, r2, #1
    7e54:	bf08      	it	eq
    7e56:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    7e5a:	70ea      	strb	r2, [r5, #3]
    7e5c:	3301      	adds	r3, #1
	return evt;
    7e5e:	9c07      	ldr	r4, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    7e60:	712b      	strb	r3, [r5, #4]
	rp->handle = sys_cpu_to_le16(handle);
    7e62:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    7e66:	e52d      	b.n	78c4 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7e68:	2109      	movs	r1, #9
    7e6a:	f010 f9a0 	bl	181ae <bt_hci_cmd_complete_create>
    7e6e:	2109      	movs	r1, #9
    7e70:	4603      	mov	r3, r0
    7e72:	3008      	adds	r0, #8
    7e74:	9307      	str	r3, [sp, #28]
    7e76:	f011 fe1c 	bl	19ab2 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    7e7a:	ab08      	add	r3, sp, #32
    7e7c:	4605      	mov	r5, r0
    7e7e:	f10d 021a 	add.w	r2, sp, #26
    7e82:	a906      	add	r1, sp, #24
    7e84:	f10d 0016 	add.w	r0, sp, #22
    7e88:	f003 fcf0 	bl	b86c <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    7e8c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    7e90:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7e94:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    7e98:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    7e9c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    7ea0:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->status = 0x00;
    7ea4:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    7ea6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    7eaa:	702a      	strb	r2, [r5, #0]
	return evt;
    7eac:	9c07      	ldr	r4, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    7eae:	f8a5 3007 	strh.w	r3, [r5, #7]
	if (err == -EINVAL) {
    7eb2:	e507      	b.n	78c4 <hci_cmd_handle+0x68>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    7eb4:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    7eb6:	8818      	ldrh	r0, [r3, #0]
    7eb8:	f007 feea 	bl	fc90 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    7ebc:	8830      	ldrh	r0, [r6, #0]
    7ebe:	2101      	movs	r1, #1
    7ec0:	e5fe      	b.n	7ac0 <hci_cmd_handle+0x264>
	status = ll_rl_enable(cmd->enable);
    7ec2:	68a3      	ldr	r3, [r4, #8]
    7ec4:	7818      	ldrb	r0, [r3, #0]
    7ec6:	f007 fecd 	bl	fc64 <ll_rl_enable>
    7eca:	e6ef      	b.n	7cac <hci_cmd_handle+0x450>
	memcpy(dst, src, sizeof(*dst));
    7ecc:	2207      	movs	r2, #7
    7ece:	68a1      	ldr	r1, [r4, #8]
    7ed0:	a808      	add	r0, sp, #32
    7ed2:	f00f fe13 	bl	17afc <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7ed6:	2107      	movs	r1, #7
    7ed8:	8830      	ldrh	r0, [r6, #0]
    7eda:	f010 f968 	bl	181ae <bt_hci_cmd_complete_create>
    7ede:	2107      	movs	r1, #7
    7ee0:	4603      	mov	r3, r0
    7ee2:	3008      	adds	r0, #8
    7ee4:	9307      	str	r3, [sp, #28]
    7ee6:	f011 fde4 	bl	19ab2 <net_buf_simple_add>
    7eea:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    7eec:	1c41      	adds	r1, r0, #1
    7eee:	a808      	add	r0, sp, #32
    7ef0:	f007 fe86 	bl	fc00 <ll_rl_lrpa_get>
    7ef4:	7020      	strb	r0, [r4, #0]
	return evt;
    7ef6:	9c07      	ldr	r4, [sp, #28]
    7ef8:	e4e4      	b.n	78c4 <hci_cmd_handle+0x68>
    7efa:	2207      	movs	r2, #7
    7efc:	68a1      	ldr	r1, [r4, #8]
    7efe:	a808      	add	r0, sp, #32
    7f00:	f00f fdfc 	bl	17afc <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7f04:	2107      	movs	r1, #7
    7f06:	8830      	ldrh	r0, [r6, #0]
    7f08:	f010 f951 	bl	181ae <bt_hci_cmd_complete_create>
    7f0c:	2107      	movs	r1, #7
    7f0e:	4603      	mov	r3, r0
    7f10:	3008      	adds	r0, #8
    7f12:	9307      	str	r3, [sp, #28]
    7f14:	f011 fdcd 	bl	19ab2 <net_buf_simple_add>
    7f18:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    7f1a:	1c41      	adds	r1, r0, #1
    7f1c:	a808      	add	r0, sp, #32
    7f1e:	f007 fe35 	bl	fb8c <ll_rl_crpa_get>
    7f22:	7020      	strb	r0, [r4, #0]
	return evt;
    7f24:	9c07      	ldr	r4, [sp, #28]
    7f26:	e4cd      	b.n	78c4 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7f28:	2102      	movs	r1, #2
    7f2a:	f010 f940 	bl	181ae <bt_hci_cmd_complete_create>
    7f2e:	2102      	movs	r1, #2
    7f30:	4603      	mov	r3, r0
    7f32:	3008      	adds	r0, #8
    7f34:	9307      	str	r3, [sp, #28]
    7f36:	f011 fdbc 	bl	19ab2 <net_buf_simple_add>
    7f3a:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    7f3c:	f007 fcec 	bl	f918 <ll_rl_size_get>
	rp->status = 0x00;
    7f40:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    7f42:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    7f44:	7023      	strb	r3, [r4, #0]
	return evt;
    7f46:	9c07      	ldr	r4, [sp, #28]
    7f48:	e4bc      	b.n	78c4 <hci_cmd_handle+0x68>
	status = ll_rl_clear();
    7f4a:	f007 fce7 	bl	f91c <ll_rl_clear>
    7f4e:	e6ad      	b.n	7cac <hci_cmd_handle+0x450>
	status = ll_rl_remove(&cmd->peer_id_addr);
    7f50:	68a0      	ldr	r0, [r4, #8]
    7f52:	f007 fd21 	bl	f998 <ll_rl_remove>
    7f56:	e6a9      	b.n	7cac <hci_cmd_handle+0x450>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    7f58:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    7f5a:	f100 0217 	add.w	r2, r0, #23
    7f5e:	1dc1      	adds	r1, r0, #7
    7f60:	f008 f92a 	bl	101b8 <ll_rl_add>
    7f64:	e6a2      	b.n	7cac <hci_cmd_handle+0x450>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    7f66:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    7f68:	8859      	ldrh	r1, [r3, #2]
    7f6a:	8818      	ldrh	r0, [r3, #0]
    7f6c:	f003 fc74 	bl	b858 <ll_length_default_set>
    7f70:	e69c      	b.n	7cac <hci_cmd_handle+0x450>
    7f72:	bf00      	nop
    7f74:	20000178 	.word	0x20000178
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7f78:	2105      	movs	r1, #5
    7f7a:	f010 f918 	bl	181ae <bt_hci_cmd_complete_create>
    7f7e:	2105      	movs	r1, #5
    7f80:	4603      	mov	r3, r0
    7f82:	3008      	adds	r0, #8
    7f84:	9307      	str	r3, [sp, #28]
    7f86:	f011 fd94 	bl	19ab2 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    7f8a:	a908      	add	r1, sp, #32
    7f8c:	4605      	mov	r5, r0
    7f8e:	f10d 001a 	add.w	r0, sp, #26
    7f92:	f003 fc55 	bl	b840 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    7f96:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    7f9a:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->status = 0x00;
    7f9e:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    7fa0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    7fa4:	702a      	strb	r2, [r5, #0]
	return evt;
    7fa6:	9c07      	ldr	r4, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    7fa8:	f8a5 3003 	strh.w	r3, [r5, #3]
	if (err == -EINVAL) {
    7fac:	e48a      	b.n	78c4 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    7fae:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7fb0:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    7fb2:	889a      	ldrh	r2, [r3, #4]
    7fb4:	8859      	ldrh	r1, [r3, #2]
    7fb6:	b2a8      	uxth	r0, r5
    7fb8:	f003 fbee 	bl	b798 <ll_length_req_send>
    7fbc:	e596      	b.n	7aec <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    7fbe:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7fc0:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    7fc2:	7892      	ldrb	r2, [r2, #2]
    7fc4:	2300      	movs	r3, #0
    7fc6:	e9cd 3301 	strd	r3, r3, [sp, #4]
    7fca:	9300      	str	r3, [sp, #0]
    7fcc:	2102      	movs	r1, #2
    7fce:	b2a8      	uxth	r0, r5
    7fd0:	f003 fa98 	bl	b504 <ll_conn_update>
    7fd4:	e58a      	b.n	7aec <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    7fd6:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    7fd8:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    7fda:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    7fdc:	8853      	ldrh	r3, [r2, #2]
    7fde:	9102      	str	r1, [sp, #8]
    7fe0:	88d1      	ldrh	r1, [r2, #6]
    7fe2:	9101      	str	r1, [sp, #4]
    7fe4:	8891      	ldrh	r1, [r2, #4]
    7fe6:	9100      	str	r1, [sp, #0]
    7fe8:	2200      	movs	r2, #0
    7fea:	2102      	movs	r1, #2
    7fec:	b2a8      	uxth	r0, r5
    7fee:	f003 fa89 	bl	b504 <ll_conn_update>
    7ff2:	e57b      	b.n	7aec <hci_cmd_handle+0x290>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    7ff4:	2109      	movs	r1, #9
    7ff6:	f010 f8da 	bl	181ae <bt_hci_cmd_complete_create>
    7ffa:	2109      	movs	r1, #9
    7ffc:	4603      	mov	r3, r0
    7ffe:	3008      	adds	r0, #8
    8000:	9307      	str	r3, [sp, #28]
    8002:	f011 fd56 	bl	19ab2 <net_buf_simple_add>
	dst[0] = val;
    8006:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
    8008:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    800a:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
    800c:	2230      	movs	r2, #48	; 0x30
    800e:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    8010:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    8012:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    8014:	24ec      	movs	r4, #236	; 0xec
    8016:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
    8018:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
    801a:	2201      	movs	r2, #1
    801c:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    801e:	7141      	strb	r1, [r0, #5]
	return evt;
    8020:	9c07      	ldr	r4, [sp, #28]
	dst[1] = val >> 8;
    8022:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    8024:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    8026:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    8028:	e44c      	b.n	78c4 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
    802a:	68a3      	ldr	r3, [r4, #8]
    802c:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    802e:	2200      	movs	r2, #0
    8030:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    8032:	b2a8      	uxth	r0, r5
    8034:	f007 f9ac 	bl	f390 <ll_start_enc_req_send>
    8038:	e558      	b.n	7aec <hci_cmd_handle+0x290>
	handle = sys_le16_to_cpu(cmd->handle);
    803a:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    803c:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
    803e:	f832 5b02 	ldrh.w	r5, [r2], #2
    8042:	e7f6      	b.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8044:	2109      	movs	r1, #9
    8046:	f010 f8b2 	bl	181ae <bt_hci_cmd_complete_create>
    804a:	2109      	movs	r1, #9
    804c:	4603      	mov	r3, r0
    804e:	3008      	adds	r0, #8
    8050:	9307      	str	r3, [sp, #28]
    8052:	f011 fd2e 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    8056:	2300      	movs	r3, #0
    8058:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    805c:	2108      	movs	r1, #8
    805e:	f008 fccd 	bl	109fc <lll_csrand_get>
	return evt;
    8062:	9c07      	ldr	r4, [sp, #28]
    8064:	e42e      	b.n	78c4 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    8066:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    8068:	aa08      	add	r2, sp, #32
    806a:	2300      	movs	r3, #0
    806c:	f100 0110 	add.w	r1, r0, #16
    8070:	f00a fad0 	bl	12614 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8074:	2111      	movs	r1, #17
    8076:	8830      	ldrh	r0, [r6, #0]
    8078:	f010 f899 	bl	181ae <bt_hci_cmd_complete_create>
    807c:	2111      	movs	r1, #17
    807e:	4603      	mov	r3, r0
    8080:	3008      	adds	r0, #8
    8082:	9307      	str	r3, [sp, #28]
    8084:	f011 fd15 	bl	19ab2 <net_buf_simple_add>
	rp->status = 0x00;
    8088:	2300      	movs	r3, #0
    808a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    808e:	2210      	movs	r2, #16
    8090:	a908      	add	r1, sp, #32
    8092:	f00f fd33 	bl	17afc <memcpy>
	return evt;
    8096:	9c07      	ldr	r4, [sp, #28]
    8098:	e414      	b.n	78c4 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
    809a:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    809c:	8818      	ldrh	r0, [r3, #0]
    809e:	f003 fb2f 	bl	b700 <ll_feature_req_send>
    80a2:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    80a4:	8830      	ldrh	r0, [r6, #0]
    80a6:	f010 f894 	bl	181d2 <bt_hci_cmd_status_create>
    80aa:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    80ac:	e40a      	b.n	78c4 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
    80ae:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    80b0:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
    80b2:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    80b4:	f010 f87b 	bl	181ae <bt_hci_cmd_complete_create>
    80b8:	2108      	movs	r1, #8
    80ba:	4603      	mov	r3, r0
    80bc:	4408      	add	r0, r1
    80be:	9307      	str	r3, [sp, #28]
    80c0:	f011 fcf7 	bl	19ab2 <net_buf_simple_add>
    80c4:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
    80c6:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
    80c8:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
    80ca:	f003 faaf 	bl	b62c <ll_chm_get>
	rp->status = status;
    80ce:	7028      	strb	r0, [r5, #0]
	return evt;
    80d0:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
    80d2:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    80d6:	f7ff bbf5 	b.w	78c4 <hci_cmd_handle+0x68>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    80da:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    80dc:	890a      	ldrh	r2, [r1, #8]
    80de:	884b      	ldrh	r3, [r1, #2]
    80e0:	8808      	ldrh	r0, [r1, #0]
    80e2:	9202      	str	r2, [sp, #8]
    80e4:	88ca      	ldrh	r2, [r1, #6]
    80e6:	9201      	str	r2, [sp, #4]
    80e8:	8889      	ldrh	r1, [r1, #4]
    80ea:	9100      	str	r1, [sp, #0]
    80ec:	2200      	movs	r2, #0
    80ee:	4611      	mov	r1, r2
    80f0:	f003 fa08 	bl	b504 <ll_conn_update>
    80f4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    80f6:	8830      	ldrh	r0, [r6, #0]
    80f8:	f010 f86b 	bl	181d2 <bt_hci_cmd_status_create>
    80fc:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    80fe:	f7ff bbe1 	b.w	78c4 <hci_cmd_handle+0x68>
	status = ll_fal_remove(&cmd->addr);
    8102:	68a0      	ldr	r0, [r4, #8]
    8104:	f007 fb7c 	bl	f800 <ll_fal_remove>
    8108:	e5d0      	b.n	7cac <hci_cmd_handle+0x450>
	status = ll_fal_add(&cmd->addr);
    810a:	68a0      	ldr	r0, [r4, #8]
    810c:	f007 fae0 	bl	f6d0 <ll_fal_add>
    8110:	e5cc      	b.n	7cac <hci_cmd_handle+0x450>
	status = ll_fal_clear();
    8112:	f007 fab7 	bl	f684 <ll_fal_clear>
    8116:	e5c9      	b.n	7cac <hci_cmd_handle+0x450>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    8118:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    811a:	7899      	ldrb	r1, [r3, #2]
    811c:	8818      	ldrh	r0, [r3, #0]
    811e:	f003 faa5 	bl	b66c <ll_terminate_ind_send>
    8122:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    8124:	8830      	ldrh	r0, [r6, #0]
    8126:	f010 f854 	bl	181d2 <bt_hci_cmd_status_create>
    812a:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    812c:	f7ff bbca 	b.w	78c4 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
    8130:	68a3      	ldr	r3, [r4, #8]
    8132:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    8134:	a908      	add	r1, sp, #32
    8136:	b2a8      	uxth	r0, r5
    8138:	f003 fc1e 	bl	b978 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    813c:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    813e:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8140:	8830      	ldrh	r0, [r6, #0]
    8142:	f010 f834 	bl	181ae <bt_hci_cmd_complete_create>
    8146:	2105      	movs	r1, #5
    8148:	4603      	mov	r3, r0
    814a:	3008      	adds	r0, #8
    814c:	9307      	str	r3, [sp, #28]
    814e:	f011 fcb0 	bl	19ab2 <net_buf_simple_add>
	rp->status = status;
    8152:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8154:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    8158:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
    815c:	9c07      	ldr	r4, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    815e:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    8162:	f7ff bbaf 	b.w	78c4 <hci_cmd_handle+0x68>
	event_mask = DEFAULT_EVENT_MASK;
    8166:	4b18      	ldr	r3, [pc, #96]	; (81c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    8168:	4a18      	ldr	r2, [pc, #96]	; (81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>)
	event_mask = DEFAULT_EVENT_MASK;
    816a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    816e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    8172:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8176:	4b16      	ldr	r3, [pc, #88]	; (81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    8178:	2000      	movs	r0, #0
    817a:	2100      	movs	r1, #0
    817c:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8180:	201f      	movs	r0, #31
    8182:	2100      	movs	r1, #0
    8184:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    8188:	f001 fd26 	bl	9bd8 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    818c:	2101      	movs	r1, #1
    818e:	8830      	ldrh	r0, [r6, #0]
    8190:	f010 f80d 	bl	181ae <bt_hci_cmd_complete_create>
    8194:	2101      	movs	r1, #1
    8196:	4604      	mov	r4, r0
    8198:	3008      	adds	r0, #8
    819a:	f011 fc8a 	bl	19ab2 <net_buf_simple_add>
	conn_count = 0U;
    819e:	4a0d      	ldr	r2, [pc, #52]	; (81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>)
	ccst->status = status;
    81a0:	2300      	movs	r3, #0
    81a2:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
    81a4:	6013      	str	r3, [r2, #0]
}
    81a6:	f7ff bb8d 	b.w	78c4 <hci_cmd_handle+0x68>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    81aa:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    81ac:	4b07      	ldr	r3, [pc, #28]	; (81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>)
    81ae:	e564      	b.n	7c7a <hci_cmd_handle+0x41e>
	return bt_hci_cmd_status_create(_opcode, status);
    81b0:	2112      	movs	r1, #18
    81b2:	f010 f80e 	bl	181d2 <bt_hci_cmd_status_create>
    81b6:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    81b8:	f7ff bb84 	b.w	78c4 <hci_cmd_handle+0x68>
	return bt_hci_cmd_status_create(_opcode, status);
    81bc:	2111      	movs	r1, #17
    81be:	f010 f808 	bl	181d2 <bt_hci_cmd_status_create>
    81c2:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    81c4:	f7ff bb7e 	b.w	78c4 <hci_cmd_handle+0x68>
    81c8:	20000170 	.word	0x20000170
    81cc:	20000ec8 	.word	0x20000ec8
    81d0:	20000178 	.word	0x20000178
    81d4:	200015fc 	.word	0x200015fc

000081d8 <hci_acl_handle>:
{
    81d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
    81dc:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    81de:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    81e0:	2b03      	cmp	r3, #3
	*evt = NULL;
    81e2:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    81e4:	d918      	bls.n	8218 <hci_acl_handle+0x40>
	return net_buf_simple_pull_mem(&buf->b, len);
    81e6:	4605      	mov	r5, r0
    81e8:	4688      	mov	r8, r1
    81ea:	3008      	adds	r0, #8
    81ec:	2104      	movs	r1, #4
    81ee:	f011 fc87 	bl	19b00 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    81f2:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    81f4:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    81f6:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    81fa:	42b3      	cmp	r3, r6
    81fc:	d30c      	bcc.n	8218 <hci_acl_handle+0x40>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
    81fe:	2e1b      	cmp	r6, #27
    8200:	d80a      	bhi.n	8218 <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
    8202:	f003 f927 	bl	b454 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    8206:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
    820a:	4604      	mov	r4, r0
    820c:	b318      	cbz	r0, 8256 <hci_acl_handle+0x7e>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    820e:	08bb      	lsrs	r3, r7, #2
    8210:	d102      	bne.n	8218 <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
    8212:	b1d7      	cbz	r7, 824a <hci_acl_handle+0x72>
    8214:	2f01      	cmp	r7, #1
    8216:	d003      	beq.n	8220 <hci_acl_handle+0x48>
		return -EINVAL;
    8218:	f06f 0015 	mvn.w	r0, #21
}
    821c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8220:	7903      	ldrb	r3, [r0, #4]
    8222:	f367 0301 	bfi	r3, r7, #0, #2
    8226:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
    8228:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    822a:	68a9      	ldr	r1, [r5, #8]
    822c:	4632      	mov	r2, r6
    822e:	1de0      	adds	r0, r4, #7
    8230:	f00f fc64 	bl	17afc <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    8234:	4621      	mov	r1, r4
    8236:	f3c9 000b 	ubfx	r0, r9, #0, #12
    823a:	f003 f917 	bl	b46c <ll_tx_mem_enqueue>
    823e:	2800      	cmp	r0, #0
    8240:	d0ec      	beq.n	821c <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
    8242:	4620      	mov	r0, r4
    8244:	f003 f90c 	bl	b460 <ll_tx_mem_release>
    8248:	e7e6      	b.n	8218 <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    824a:	7903      	ldrb	r3, [r0, #4]
    824c:	2202      	movs	r2, #2
    824e:	f362 0301 	bfi	r3, r2, #0, #2
    8252:	7103      	strb	r3, [r0, #4]
		break;
    8254:	e7e8      	b.n	8228 <hci_acl_handle+0x50>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    8256:	4b11      	ldr	r3, [pc, #68]	; (829c <hci_acl_handle+0xc4>)
    8258:	681b      	ldr	r3, [r3, #0]
    825a:	019b      	lsls	r3, r3, #6
    825c:	d402      	bmi.n	8264 <hci_acl_handle+0x8c>
		return -ENOBUFS;
    825e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8262:	e7db      	b.n	821c <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    826c:	2001      	movs	r0, #1
    826e:	f7fa fb73 	bl	2958 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    8272:	2102      	movs	r1, #2
    8274:	f8c8 0000 	str.w	r0, [r8]
    8278:	3008      	adds	r0, #8
    827a:	f011 fc1a 	bl	19ab2 <net_buf_simple_add>
	hdr->len = len;
    827e:	2401      	movs	r4, #1
	hdr->evt = evt;
    8280:	221a      	movs	r2, #26
    8282:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    8284:	7044      	strb	r4, [r0, #1]
    8286:	f8d8 0000 	ldr.w	r0, [r8]
    828a:	4621      	mov	r1, r4
    828c:	3008      	adds	r0, #8
    828e:	f011 fc10 	bl	19ab2 <net_buf_simple_add>
    8292:	4603      	mov	r3, r0
		return -ENOBUFS;
    8294:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    8298:	701c      	strb	r4, [r3, #0]
    829a:	e7bf      	b.n	821c <hci_acl_handle+0x44>
    829c:	20000170 	.word	0x20000170

000082a0 <hci_disconn_complete_encode>:
{
    82a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    82a2:	4b0e      	ldr	r3, [pc, #56]	; (82dc <hci_disconn_complete_encode+0x3c>)
    82a4:	681b      	ldr	r3, [r3, #0]
    82a6:	06db      	lsls	r3, r3, #27
    82a8:	d400      	bmi.n	82ac <hci_disconn_complete_encode+0xc>
}
    82aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    82ac:	f102 0408 	add.w	r4, r2, #8
    82b0:	4605      	mov	r5, r0
    82b2:	460e      	mov	r6, r1
    82b4:	4620      	mov	r0, r4
    82b6:	2102      	movs	r1, #2
    82b8:	f011 fbfb 	bl	19ab2 <net_buf_simple_add>
    82bc:	4603      	mov	r3, r0
	hdr->len = len;
    82be:	2104      	movs	r1, #4
	hdr->evt = evt;
    82c0:	2205      	movs	r2, #5
	hdr->len = len;
    82c2:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
    82c4:	701a      	strb	r2, [r3, #0]
    82c6:	4620      	mov	r0, r4
    82c8:	f011 fbf3 	bl	19ab2 <net_buf_simple_add>
    82cc:	2700      	movs	r7, #0
	ep->status = 0x00;
    82ce:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    82d0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    82d4:	782b      	ldrb	r3, [r5, #0]
    82d6:	70c3      	strb	r3, [r0, #3]
}
    82d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    82da:	bf00      	nop
    82dc:	20000170 	.word	0x20000170

000082e0 <hci_disconn_complete_process>:
	conn_count--;
    82e0:	4a02      	ldr	r2, [pc, #8]	; (82ec <hci_disconn_complete_process+0xc>)
    82e2:	6813      	ldr	r3, [r2, #0]
    82e4:	3b01      	subs	r3, #1
    82e6:	6013      	str	r3, [r2, #0]
}
    82e8:	4770      	bx	lr
    82ea:	bf00      	nop
    82ec:	200015fc 	.word	0x200015fc

000082f0 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    82f0:	7f03      	ldrb	r3, [r0, #28]
    82f2:	f003 0303 	and.w	r3, r3, #3
    82f6:	3b01      	subs	r3, #1
    82f8:	2b01      	cmp	r3, #1
{
    82fa:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    82fc:	d90d      	bls.n	831a <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    82fe:	4a16      	ldr	r2, [pc, #88]	; (8358 <hci_acl_encode+0x68>)
    8300:	4916      	ldr	r1, [pc, #88]	; (835c <hci_acl_encode+0x6c>)
    8302:	4817      	ldr	r0, [pc, #92]	; (8360 <hci_acl_encode+0x70>)
    8304:	f641 53b7 	movw	r3, #7607	; 0x1db7
    8308:	f00e fe31 	bl	16f6e <printk>
    830c:	4040      	eors	r0, r0
    830e:	f380 8811 	msr	BASEPRI, r0
    8312:	f04f 0003 	mov.w	r0, #3
    8316:	df02      	svc	2
		break;
	}
}
    8318:	bd70      	pop	{r4, r5, r6, pc}
    831a:	4604      	mov	r4, r0
    831c:	f101 0508 	add.w	r5, r1, #8
    8320:	4628      	mov	r0, r5
    8322:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    8324:	88e6      	ldrh	r6, [r4, #6]
    8326:	f011 fbc4 	bl	19ab2 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    832a:	7f23      	ldrb	r3, [r4, #28]
    832c:	f003 0303 	and.w	r3, r3, #3
    8330:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    8332:	bf0c      	ite	eq
    8334:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    8338:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    833c:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    833e:	7f61      	ldrb	r1, [r4, #29]
    8340:	8041      	strh	r1, [r0, #2]
    8342:	4628      	mov	r0, r5
    8344:	f011 fbb5 	bl	19ab2 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    8348:	7f62      	ldrb	r2, [r4, #29]
    834a:	f104 011f 	add.w	r1, r4, #31
}
    834e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    8352:	f00f bbd3 	b.w	17afc <memcpy>
    8356:	bf00      	nop
    8358:	0001b878 	.word	0x0001b878
    835c:	0001b828 	.word	0x0001b828
    8360:	0001b7c8 	.word	0x0001b7c8

00008364 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    8364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    8368:	f890 c004 	ldrb.w	ip, [r0, #4]
    836c:	88c6      	ldrh	r6, [r0, #6]
    836e:	f1bc 0f03 	cmp.w	ip, #3
{
    8372:	b085      	sub	sp, #20
    8374:	4604      	mov	r4, r0
    8376:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    8378:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    837c:	d00e      	beq.n	839c <hci_evt_encode+0x38>
	switch (node_rx->hdr.type) {
    837e:	f1ac 0c16 	sub.w	ip, ip, #22
    8382:	f1bc 0f06 	cmp.w	ip, #6
    8386:	f200 82ac 	bhi.w	88e2 <hci_evt_encode+0x57e>
    838a:	e8df f01c 	tbh	[pc, ip, lsl #1]
    838e:	002b      	.short	0x002b
    8390:	008f0087 	.word	0x008f0087
    8394:	00bd0021 	.word	0x00bd0021
    8398:	00f100d0 	.word	0x00f100d0
	switch (pdu_data->llctrl.opcode) {
    839c:	7fc3      	ldrb	r3, [r0, #31]
    839e:	3b03      	subs	r3, #3
    83a0:	2b12      	cmp	r3, #18
    83a2:	f200 811d 	bhi.w	85e0 <hci_evt_encode+0x27c>
    83a6:	e8df f013 	tbh	[pc, r3, lsl #1]
    83aa:	0160      	.short	0x0160
    83ac:	011b011b 	.word	0x011b011b
    83b0:	01b6019d 	.word	0x01b6019d
    83b4:	01e9011b 	.word	0x01e9011b
    83b8:	011b011b 	.word	0x011b011b
    83bc:	01ee011b 	.word	0x01ee011b
    83c0:	01c4011b 	.word	0x01c4011b
    83c4:	001a011b 	.word	0x001a011b
    83c8:	011b011b 	.word	0x011b011b
    83cc:	01290129 	.word	0x01290129
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    83d0:	4bbd      	ldr	r3, [pc, #756]	; (86c8 <hci_evt_encode+0x364>)
    83d2:	685b      	ldr	r3, [r3, #4]
    83d4:	0418      	lsls	r0, r3, #16
    83d6:	f04f 0400 	mov.w	r4, #0
    83da:	f100 8136 	bmi.w	864a <hci_evt_encode+0x2e6>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    83de:	b005      	add	sp, #20
    83e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    83e4:	07f8      	lsls	r0, r7, #31
    83e6:	f100 81f2 	bmi.w	87ce <hci_evt_encode+0x46a>
	status = cc->status;
    83ea:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
    83ec:	2f00      	cmp	r7, #0
    83ee:	f000 81e5 	beq.w	87bc <hci_evt_encode+0x458>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    83f2:	4bb5      	ldr	r3, [pc, #724]	; (86c8 <hci_evt_encode+0x364>)
    83f4:	685b      	ldr	r3, [r3, #4]
    83f6:	0099      	lsls	r1, r3, #2
    83f8:	d5f1      	bpl.n	83de <hci_evt_encode+0x7a>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    83fa:	4bb4      	ldr	r3, [pc, #720]	; (86cc <hci_evt_encode+0x368>)
    83fc:	681b      	ldr	r3, [r3, #0]
    83fe:	f240 2201 	movw	r2, #513	; 0x201
    8402:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    8404:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    8408:	d0e9      	beq.n	83de <hci_evt_encode+0x7a>
    840a:	3508      	adds	r5, #8
	if (!status) {
    840c:	2f00      	cmp	r7, #0
    840e:	f040 81f6 	bne.w	87fe <hci_evt_encode+0x49a>
		conn_count++;
    8412:	4aaf      	ldr	r2, [pc, #700]	; (86d0 <hci_evt_encode+0x36c>)
    8414:	6813      	ldr	r3, [r2, #0]
    8416:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
    8418:	f104 091f 	add.w	r9, r4, #31
		conn_count++;
    841c:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    841e:	f1b8 0f00 	cmp.w	r8, #0
    8422:	f000 8208 	beq.w	8836 <hci_evt_encode+0x4d2>
    8426:	2102      	movs	r1, #2
    8428:	4628      	mov	r0, r5
    842a:	f011 fb42 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    842e:	233e      	movs	r3, #62	; 0x3e
    8430:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    8432:	231f      	movs	r3, #31
    8434:	7043      	strb	r3, [r0, #1]
    8436:	2101      	movs	r1, #1
    8438:	4628      	mov	r0, r5
    843a:	f011 fb3a 	bl	19ab2 <net_buf_simple_add>
    843e:	4603      	mov	r3, r0
	me->subevent = subevt;
    8440:	220a      	movs	r2, #10
    8442:	701a      	strb	r2, [r3, #0]
    8444:	4628      	mov	r0, r5
    8446:	211e      	movs	r1, #30
    8448:	f011 fb33 	bl	19ab2 <net_buf_simple_add>
		leecc->status = 0x00;
    844c:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    844e:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
    8452:	7f63      	ldrb	r3, [r4, #29]
    8454:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    8456:	7fa3      	ldrb	r3, [r4, #30]
    8458:	7103      	strb	r3, [r0, #4]
    845a:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
    845c:	4649      	mov	r1, r9
    845e:	2206      	movs	r2, #6
    8460:	3005      	adds	r0, #5
    8462:	f00f fb4b 	bl	17afc <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
    8466:	2206      	movs	r2, #6
    8468:	f104 012b 	add.w	r1, r4, #43	; 0x2b
    846c:	f105 000b 	add.w	r0, r5, #11
    8470:	f00f fb44 	bl	17afc <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
    8474:	2206      	movs	r2, #6
    8476:	f104 0125 	add.w	r1, r4, #37	; 0x25
    847a:	f105 0011 	add.w	r0, r5, #17
    847e:	f00f fb3d 	bl	17afc <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    8482:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    8484:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    8486:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    8488:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    848c:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    8490:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
    8494:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    8498:	776b      	strb	r3, [r5, #29]
		return;
    849a:	e7a0      	b.n	83de <hci_evt_encode+0x7a>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    849c:	460a      	mov	r2, r1
    849e:	4638      	mov	r0, r7
    84a0:	4631      	mov	r1, r6
}
    84a2:	b005      	add	sp, #20
    84a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    84a8:	f7ff befa 	b.w	82a0 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    84ac:	4b86      	ldr	r3, [pc, #536]	; (86c8 <hci_evt_encode+0x364>)
    84ae:	685b      	ldr	r3, [r3, #4]
    84b0:	009a      	lsls	r2, r3, #2
    84b2:	d594      	bpl.n	83de <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    84b4:	4b85      	ldr	r3, [pc, #532]	; (86cc <hci_evt_encode+0x368>)
    84b6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    84b8:	075b      	lsls	r3, r3, #29
    84ba:	d590      	bpl.n	83de <hci_evt_encode+0x7a>
    84bc:	3508      	adds	r5, #8
    84be:	2102      	movs	r1, #2
    84c0:	4628      	mov	r0, r5
    84c2:	f011 faf6 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    84c6:	233e      	movs	r3, #62	; 0x3e
    84c8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    84ca:	230a      	movs	r3, #10
    84cc:	7043      	strb	r3, [r0, #1]
    84ce:	2101      	movs	r1, #1
    84d0:	4628      	mov	r0, r5
    84d2:	f011 faee 	bl	19ab2 <net_buf_simple_add>
    84d6:	4603      	mov	r3, r0
	me->subevent = subevt;
    84d8:	2203      	movs	r2, #3
    84da:	4628      	mov	r0, r5
    84dc:	701a      	strb	r2, [r3, #0]
    84de:	2109      	movs	r1, #9
    84e0:	f011 fae7 	bl	19ab2 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    84e4:	07ff      	lsls	r7, r7, #31
    84e6:	4605      	mov	r5, r0
    84e8:	f100 81ed 	bmi.w	88c6 <hci_evt_encode+0x562>
	sep->status = cu->status;
    84ec:	7f23      	ldrb	r3, [r4, #28]
    84ee:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    84f0:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    84f2:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    84f4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    84f6:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
    84fa:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    84fe:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    8502:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    8506:	e76a      	b.n	83de <hci_evt_encode+0x7a>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    8508:	4b72      	ldr	r3, [pc, #456]	; (86d4 <hci_evt_encode+0x370>)
    850a:	681b      	ldr	r3, [r3, #0]
    850c:	0219      	lsls	r1, r3, #8
    850e:	f57f af66 	bpl.w	83de <hci_evt_encode+0x7a>
    8512:	3508      	adds	r5, #8
    8514:	2102      	movs	r1, #2
    8516:	4628      	mov	r0, r5
    8518:	f011 facb 	bl	19ab2 <net_buf_simple_add>
	hdr->len = len;
    851c:	2102      	movs	r1, #2
	hdr->evt = evt;
    851e:	2357      	movs	r3, #87	; 0x57
    8520:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    8522:	7041      	strb	r1, [r0, #1]
    8524:	4628      	mov	r0, r5
    8526:	f011 fac4 	bl	19ab2 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    852a:	8006      	strh	r6, [r0, #0]
    852c:	e757      	b.n	83de <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    852e:	4b66      	ldr	r3, [pc, #408]	; (86c8 <hci_evt_encode+0x364>)
    8530:	685b      	ldr	r3, [r3, #4]
    8532:	009a      	lsls	r2, r3, #2
    8534:	f57f af53 	bpl.w	83de <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    8538:	4b64      	ldr	r3, [pc, #400]	; (86cc <hci_evt_encode+0x368>)
    853a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    853c:	031b      	lsls	r3, r3, #12
    853e:	f57f af4e 	bpl.w	83de <hci_evt_encode+0x7a>
    8542:	3508      	adds	r5, #8
    8544:	2102      	movs	r1, #2
    8546:	4628      	mov	r0, r5
    8548:	f011 fab3 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    854c:	233e      	movs	r3, #62	; 0x3e
    854e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    8550:	2304      	movs	r3, #4
    8552:	7043      	strb	r3, [r0, #1]
    8554:	2101      	movs	r1, #1
    8556:	4628      	mov	r0, r5
    8558:	f011 faab 	bl	19ab2 <net_buf_simple_add>
	me->subevent = subevt;
    855c:	2314      	movs	r3, #20
    855e:	7003      	strb	r3, [r0, #0]
    8560:	2103      	movs	r1, #3
    8562:	4628      	mov	r0, r5
    8564:	f011 faa5 	bl	19ab2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    8568:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    856a:	7f23      	ldrb	r3, [r4, #28]
    856c:	7083      	strb	r3, [r0, #2]
    856e:	e736      	b.n	83de <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8570:	4b55      	ldr	r3, [pc, #340]	; (86c8 <hci_evt_encode+0x364>)
    8572:	685b      	ldr	r3, [r3, #4]
    8574:	009f      	lsls	r7, r3, #2
    8576:	f57f af32 	bpl.w	83de <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    857a:	4b54      	ldr	r3, [pc, #336]	; (86cc <hci_evt_encode+0x368>)
    857c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    857e:	0518      	lsls	r0, r3, #20
    8580:	f57f af2d 	bpl.w	83de <hci_evt_encode+0x7a>
    8584:	3508      	adds	r5, #8
    8586:	2102      	movs	r1, #2
    8588:	4628      	mov	r0, r5
    858a:	f011 fa92 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    858e:	233e      	movs	r3, #62	; 0x3e
    8590:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    8592:	2306      	movs	r3, #6
    8594:	7043      	strb	r3, [r0, #1]
    8596:	2101      	movs	r1, #1
    8598:	4628      	mov	r0, r5
    859a:	f011 fa8a 	bl	19ab2 <net_buf_simple_add>
	me->subevent = subevt;
    859e:	230c      	movs	r3, #12
    85a0:	7003      	strb	r3, [r0, #0]
    85a2:	2105      	movs	r1, #5
    85a4:	4628      	mov	r0, r5
    85a6:	f011 fa84 	bl	19ab2 <net_buf_simple_add>
	sep->status = pu->status;
    85aa:	7f23      	ldrb	r3, [r4, #28]
    85ac:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    85ae:	f8a0 6001 	strh.w	r6, [r0, #1]
    85b2:	7f62      	ldrb	r2, [r4, #29]
    85b4:	2a00      	cmp	r2, #0
    85b6:	fa92 f3a2 	rbit	r3, r2
    85ba:	fab3 f383 	clz	r3, r3
    85be:	bf08      	it	eq
    85c0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    85c4:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    85c6:	70c3      	strb	r3, [r0, #3]
    85c8:	7fa2      	ldrb	r2, [r4, #30]
    85ca:	fa92 f3a2 	rbit	r3, r2
    85ce:	2a00      	cmp	r2, #0
    85d0:	fab3 f383 	clz	r3, r3
    85d4:	bf08      	it	eq
    85d6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    85da:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    85dc:	7103      	strb	r3, [r0, #4]
    85de:	e6fe      	b.n	83de <hci_evt_encode+0x7a>
		LL_ASSERT(0);
    85e0:	4a3d      	ldr	r2, [pc, #244]	; (86d8 <hci_evt_encode+0x374>)
    85e2:	493e      	ldr	r1, [pc, #248]	; (86dc <hci_evt_encode+0x378>)
    85e4:	483e      	ldr	r0, [pc, #248]	; (86e0 <hci_evt_encode+0x37c>)
    85e6:	f641 538b 	movw	r3, #7563	; 0x1d8b
    85ea:	f00e fcc0 	bl	16f6e <printk>
    85ee:	4040      	eors	r0, r0
    85f0:	f380 8811 	msr	BASEPRI, r0
    85f4:	f04f 0003 	mov.w	r0, #3
    85f8:	df02      	svc	2
}
    85fa:	e6f0      	b.n	83de <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    85fc:	4b32      	ldr	r3, [pc, #200]	; (86c8 <hci_evt_encode+0x364>)
    85fe:	685b      	ldr	r3, [r3, #4]
    8600:	009a      	lsls	r2, r3, #2
    8602:	f57f aeec 	bpl.w	83de <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    8606:	4b31      	ldr	r3, [pc, #196]	; (86cc <hci_evt_encode+0x368>)
    8608:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    860a:	065b      	lsls	r3, r3, #25
    860c:	f57f aee7 	bpl.w	83de <hci_evt_encode+0x7a>
    8610:	3508      	adds	r5, #8
    8612:	2102      	movs	r1, #2
    8614:	4628      	mov	r0, r5
    8616:	f011 fa4c 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    861a:	233e      	movs	r3, #62	; 0x3e
    861c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    861e:	230b      	movs	r3, #11
    8620:	7043      	strb	r3, [r0, #1]
    8622:	2101      	movs	r1, #1
    8624:	4628      	mov	r0, r5
    8626:	f011 fa44 	bl	19ab2 <net_buf_simple_add>
	me->subevent = subevt;
    862a:	2307      	movs	r3, #7
    862c:	7003      	strb	r3, [r0, #0]
    862e:	210a      	movs	r1, #10
    8630:	4628      	mov	r0, r5
    8632:	f011 fa3e 	bl	19ab2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    8636:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    8638:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    863a:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    863c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    863e:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    8640:	8c23      	ldrh	r3, [r4, #32]
    8642:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    8644:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    8646:	8103      	strh	r3, [r0, #8]
    8648:	e6c9      	b.n	83de <hci_evt_encode+0x7a>
    864a:	3508      	adds	r5, #8
    864c:	2102      	movs	r1, #2
    864e:	4628      	mov	r0, r5
    8650:	f011 fa2f 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    8654:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
    8656:	2103      	movs	r1, #3
	hdr->evt = evt;
    8658:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    865a:	7041      	strb	r1, [r0, #1]
    865c:	4628      	mov	r0, r5
    865e:	f011 fa28 	bl	19ab2 <net_buf_simple_add>
	ep->status = 0x00;
    8662:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8664:	f8a0 6001 	strh.w	r6, [r0, #1]
    8668:	e6b9      	b.n	83de <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    866a:	4b17      	ldr	r3, [pc, #92]	; (86c8 <hci_evt_encode+0x364>)
    866c:	685b      	ldr	r3, [r3, #4]
    866e:	0099      	lsls	r1, r3, #2
    8670:	f57f aeb5 	bpl.w	83de <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    8674:	4b15      	ldr	r3, [pc, #84]	; (86cc <hci_evt_encode+0x368>)
    8676:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8678:	06da      	lsls	r2, r3, #27
    867a:	f57f aeb0 	bpl.w	83de <hci_evt_encode+0x7a>
    867e:	3508      	adds	r5, #8
    8680:	2102      	movs	r1, #2
    8682:	4628      	mov	r0, r5
    8684:	f011 fa15 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    8688:	233e      	movs	r3, #62	; 0x3e
    868a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    868c:	230d      	movs	r3, #13
    868e:	7043      	strb	r3, [r0, #1]
    8690:	2101      	movs	r1, #1
    8692:	4628      	mov	r0, r5
    8694:	f011 fa0d 	bl	19ab2 <net_buf_simple_add>
	me->subevent = subevt;
    8698:	2305      	movs	r3, #5
    869a:	7003      	strb	r3, [r0, #0]
    869c:	210c      	movs	r1, #12
    869e:	4628      	mov	r0, r5
    86a0:	f011 fa07 	bl	19ab2 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    86a4:	f104 0120 	add.w	r1, r4, #32
    86a8:	4605      	mov	r5, r0
    86aa:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    86ac:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    86b0:	f00f fa24 	bl	17afc <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    86b4:	2202      	movs	r2, #2
    86b6:	f104 0128 	add.w	r1, r4, #40	; 0x28
    86ba:	f105 000a 	add.w	r0, r5, #10
}
    86be:	b005      	add	sp, #20
    86c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    86c4:	f00f ba1a 	b.w	17afc <memcpy>
    86c8:	20000170 	.word	0x20000170
    86cc:	20000178 	.word	0x20000178
    86d0:	200015fc 	.word	0x200015fc
    86d4:	20000ec8 	.word	0x20000ec8
    86d8:	0001b878 	.word	0x0001b878
    86dc:	0001b828 	.word	0x0001b828
    86e0:	0001b7c8 	.word	0x0001b7c8
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    86e4:	4b86      	ldr	r3, [pc, #536]	; (8900 <hci_evt_encode+0x59c>)
    86e6:	681b      	ldr	r3, [r3, #0]
    86e8:	061b      	lsls	r3, r3, #24
    86ea:	f04f 0400 	mov.w	r4, #0
    86ee:	f57f ae76 	bpl.w	83de <hci_evt_encode+0x7a>
    86f2:	3508      	adds	r5, #8
    86f4:	2102      	movs	r1, #2
    86f6:	4628      	mov	r0, r5
    86f8:	f011 f9db 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    86fc:	2308      	movs	r3, #8
	hdr->len = len;
    86fe:	2104      	movs	r1, #4
	hdr->evt = evt;
    8700:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    8702:	7041      	strb	r1, [r0, #1]
    8704:	4628      	mov	r0, r5
    8706:	f011 f9d4 	bl	19ab2 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    870a:	2301      	movs	r3, #1
	ep->status = err;
    870c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    870e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    8712:	70c3      	strb	r3, [r0, #3]
    8714:	e663      	b.n	83de <hci_evt_encode+0x7a>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    8716:	f890 3020 	ldrb.w	r3, [r0, #32]
    871a:	2b0e      	cmp	r3, #14
    871c:	f47f ae5f 	bne.w	83de <hci_evt_encode+0x7a>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    8720:	460b      	mov	r3, r1
    8722:	4632      	mov	r2, r6
    8724:	2100      	movs	r1, #0
    8726:	201a      	movs	r0, #26
}
    8728:	b005      	add	sp, #20
    872a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    872e:	f7fe bf9d 	b.w	766c <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8732:	4b73      	ldr	r3, [pc, #460]	; (8900 <hci_evt_encode+0x59c>)
    8734:	685b      	ldr	r3, [r3, #4]
    8736:	0098      	lsls	r0, r3, #2
    8738:	d557      	bpl.n	87ea <hci_evt_encode+0x486>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    873a:	4b72      	ldr	r3, [pc, #456]	; (8904 <hci_evt_encode+0x5a0>)
    873c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    873e:	0699      	lsls	r1, r3, #26
    8740:	d553      	bpl.n	87ea <hci_evt_encode+0x486>
    8742:	3508      	adds	r5, #8
    8744:	2102      	movs	r1, #2
    8746:	4628      	mov	r0, r5
    8748:	f011 f9b3 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    874c:	233e      	movs	r3, #62	; 0x3e
    874e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    8750:	230b      	movs	r3, #11
    8752:	7043      	strb	r3, [r0, #1]
    8754:	2101      	movs	r1, #1
    8756:	4628      	mov	r0, r5
    8758:	f011 f9ab 	bl	19ab2 <net_buf_simple_add>
	me->subevent = subevt;
    875c:	2306      	movs	r3, #6
    875e:	7003      	strb	r3, [r0, #0]
    8760:	210a      	movs	r1, #10
    8762:	4628      	mov	r0, r5
    8764:	f011 f9a5 	bl	19ab2 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    8768:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    876a:	8c23      	ldrh	r3, [r4, #32]
    876c:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    876e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    8770:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    8772:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    8774:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    8776:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    8778:	8103      	strh	r3, [r0, #8]
    877a:	e630      	b.n	83de <hci_evt_encode+0x7a>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    877c:	460b      	mov	r3, r1
    877e:	4632      	mov	r2, r6
    8780:	4639      	mov	r1, r7
    8782:	2000      	movs	r0, #0
    8784:	e7d0      	b.n	8728 <hci_evt_encode+0x3c4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8786:	4b5e      	ldr	r3, [pc, #376]	; (8900 <hci_evt_encode+0x59c>)
    8788:	681b      	ldr	r3, [r3, #0]
    878a:	061f      	lsls	r7, r3, #24
    878c:	f57f ae27 	bpl.w	83de <hci_evt_encode+0x7a>
    8790:	3508      	adds	r5, #8
    8792:	2102      	movs	r1, #2
    8794:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    8796:	f894 4020 	ldrb.w	r4, [r4, #32]
    879a:	f011 f98a 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    879e:	2308      	movs	r3, #8
	hdr->len = len;
    87a0:	2104      	movs	r1, #4
	hdr->evt = evt;
    87a2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    87a4:	7041      	strb	r1, [r0, #1]
    87a6:	4628      	mov	r0, r5
    87a8:	f011 f983 	bl	19ab2 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    87ac:	fab4 f384 	clz	r3, r4
    87b0:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    87b2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    87b4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    87b8:	70c3      	strb	r3, [r0, #3]
    87ba:	e610      	b.n	83de <hci_evt_encode+0x7a>
		ll_rl_crpa_set(cc->peer_addr_type,
    87bc:	7fa0      	ldrb	r0, [r4, #30]
    87be:	f104 0325 	add.w	r3, r4, #37	; 0x25
    87c2:	22ff      	movs	r2, #255	; 0xff
    87c4:	f104 011f 	add.w	r1, r4, #31
    87c8:	f007 f99a 	bl	fb00 <ll_rl_crpa_set>
    87cc:	e611      	b.n	83f2 <hci_evt_encode+0x8e>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    87ce:	4a4e      	ldr	r2, [pc, #312]	; (8908 <hci_evt_encode+0x5a4>)
    87d0:	494e      	ldr	r1, [pc, #312]	; (890c <hci_evt_encode+0x5a8>)
    87d2:	484f      	ldr	r0, [pc, #316]	; (8910 <hci_evt_encode+0x5ac>)
    87d4:	f641 23f1 	movw	r3, #6897	; 0x1af1
    87d8:	f00e fbc9 	bl	16f6e <printk>
    87dc:	4040      	eors	r0, r0
    87de:	f380 8811 	msr	BASEPRI, r0
    87e2:	f04f 0003 	mov.w	r0, #3
    87e6:	df02      	svc	2
    87e8:	e5ff      	b.n	83ea <hci_evt_encode+0x86>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    87ea:	2300      	movs	r3, #0
    87ec:	e9cd 3301 	strd	r3, r3, [sp, #4]
    87f0:	9300      	str	r3, [sp, #0]
    87f2:	221a      	movs	r2, #26
    87f4:	2102      	movs	r1, #2
    87f6:	4630      	mov	r0, r6
    87f8:	f002 fe84 	bl	b504 <ll_conn_update>
		return;
    87fc:	e5ef      	b.n	83de <hci_evt_encode+0x7a>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    87fe:	f1b8 0f00 	cmp.w	r8, #0
    8802:	d147      	bne.n	8894 <hci_evt_encode+0x530>
    8804:	2102      	movs	r1, #2
    8806:	4628      	mov	r0, r5
    8808:	f011 f953 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    880c:	233e      	movs	r3, #62	; 0x3e
    880e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    8810:	2313      	movs	r3, #19
    8812:	7043      	strb	r3, [r0, #1]
    8814:	2101      	movs	r1, #1
    8816:	4628      	mov	r0, r5
    8818:	f011 f94b 	bl	19ab2 <net_buf_simple_add>
	me->subevent = subevt;
    881c:	2301      	movs	r3, #1
    881e:	7003      	strb	r3, [r0, #0]
    8820:	2112      	movs	r1, #18
    8822:	4628      	mov	r0, r5
    8824:	f011 f945 	bl	19ab2 <net_buf_simple_add>
    8828:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    882a:	2212      	movs	r2, #18
    882c:	4641      	mov	r1, r8
    882e:	f00f f970 	bl	17b12 <memset>
		lecc->status = status;
    8832:	7027      	strb	r7, [r4, #0]
		return;
    8834:	e5d3      	b.n	83de <hci_evt_encode+0x7a>
    8836:	2102      	movs	r1, #2
    8838:	4628      	mov	r0, r5
    883a:	f011 f93a 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    883e:	233e      	movs	r3, #62	; 0x3e
    8840:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    8842:	2313      	movs	r3, #19
    8844:	7043      	strb	r3, [r0, #1]
    8846:	2101      	movs	r1, #1
    8848:	4628      	mov	r0, r5
    884a:	f011 f932 	bl	19ab2 <net_buf_simple_add>
    884e:	4603      	mov	r3, r0
	me->subevent = subevt;
    8850:	2201      	movs	r2, #1
    8852:	701a      	strb	r2, [r3, #0]
    8854:	4628      	mov	r0, r5
    8856:	2112      	movs	r1, #18
    8858:	f011 f92b 	bl	19ab2 <net_buf_simple_add>
	lecc->status = 0x00;
    885c:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    885e:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
    8862:	7f63      	ldrb	r3, [r4, #29]
    8864:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    8866:	7fa3      	ldrb	r3, [r4, #30]
    8868:	f003 0301 	and.w	r3, r3, #1
    886c:	4605      	mov	r5, r0
    886e:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    8870:	4649      	mov	r1, r9
    8872:	2206      	movs	r2, #6
    8874:	3005      	adds	r0, #5
    8876:	f00f f941 	bl	17afc <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    887a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    887c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    887e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    8880:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    8884:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    8888:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    888c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    8890:	746b      	strb	r3, [r5, #17]
    8892:	e5a4      	b.n	83de <hci_evt_encode+0x7a>
    8894:	2102      	movs	r1, #2
    8896:	4628      	mov	r0, r5
    8898:	f011 f90b 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    889c:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
    889e:	231f      	movs	r3, #31
	hdr->evt = evt;
    88a0:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    88a2:	7043      	strb	r3, [r0, #1]
    88a4:	2101      	movs	r1, #1
    88a6:	4628      	mov	r0, r5
    88a8:	f011 f903 	bl	19ab2 <net_buf_simple_add>
	me->subevent = subevt;
    88ac:	230a      	movs	r3, #10
    88ae:	7003      	strb	r3, [r0, #0]
    88b0:	211e      	movs	r1, #30
    88b2:	4628      	mov	r0, r5
    88b4:	f011 f8fd 	bl	19ab2 <net_buf_simple_add>
    88b8:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
    88ba:	221e      	movs	r2, #30
    88bc:	2100      	movs	r1, #0
    88be:	f00f f928 	bl	17b12 <memset>
			leecc->status = status;
    88c2:	7027      	strb	r7, [r4, #0]
			return;
    88c4:	e58b      	b.n	83de <hci_evt_encode+0x7a>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    88c6:	4a10      	ldr	r2, [pc, #64]	; (8908 <hci_evt_encode+0x5a4>)
    88c8:	4912      	ldr	r1, [pc, #72]	; (8914 <hci_evt_encode+0x5b0>)
    88ca:	4811      	ldr	r0, [pc, #68]	; (8910 <hci_evt_encode+0x5ac>)
    88cc:	f641 3376 	movw	r3, #7030	; 0x1b76
    88d0:	f00e fb4d 	bl	16f6e <printk>
    88d4:	4040      	eors	r0, r0
    88d6:	f380 8811 	msr	BASEPRI, r0
    88da:	f04f 0003 	mov.w	r0, #3
    88de:	df02      	svc	2
    88e0:	e604      	b.n	84ec <hci_evt_encode+0x188>
		LL_ASSERT(0);
    88e2:	4a09      	ldr	r2, [pc, #36]	; (8908 <hci_evt_encode+0x5a4>)
    88e4:	490c      	ldr	r1, [pc, #48]	; (8918 <hci_evt_encode+0x5b4>)
    88e6:	480a      	ldr	r0, [pc, #40]	; (8910 <hci_evt_encode+0x5ac>)
    88e8:	f641 43ab 	movw	r3, #7339	; 0x1cab
    88ec:	f00e fb3f 	bl	16f6e <printk>
    88f0:	4040      	eors	r0, r0
    88f2:	f380 8811 	msr	BASEPRI, r0
    88f6:	f04f 0003 	mov.w	r0, #3
    88fa:	df02      	svc	2
		return;
    88fc:	e56f      	b.n	83de <hci_evt_encode+0x7a>
    88fe:	bf00      	nop
    8900:	20000170 	.word	0x20000170
    8904:	20000178 	.word	0x20000178
    8908:	0001b878 	.word	0x0001b878
    890c:	0001b8b4 	.word	0x0001b8b4
    8910:	0001b7c8 	.word	0x0001b7c8
    8914:	0001b8f0 	.word	0x0001b8f0
    8918:	0001b828 	.word	0x0001b828

0000891c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    891c:	b570      	push	{r4, r5, r6, lr}
    891e:	f100 0408 	add.w	r4, r0, #8
    8922:	460e      	mov	r6, r1
    8924:	4620      	mov	r0, r4
    8926:	2102      	movs	r1, #2
    8928:	4615      	mov	r5, r2
    892a:	f011 f8c2 	bl	19ab2 <net_buf_simple_add>
	hdr->evt = evt;
    892e:	2313      	movs	r3, #19
	hdr->len = len;
    8930:	2105      	movs	r1, #5
	hdr->evt = evt;
    8932:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    8934:	7041      	strb	r1, [r0, #1]
    8936:	4620      	mov	r0, r4
    8938:	f011 f8bb 	bl	19ab2 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    893c:	2301      	movs	r3, #1
    893e:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    8940:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    8944:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    8948:	bd70      	pop	{r4, r5, r6, pc}
    894a:	bf00      	nop

0000894c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    894c:	7903      	ldrb	r3, [r0, #4]
    894e:	2b03      	cmp	r3, #3
    8950:	d009      	beq.n	8966 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    8952:	2b16      	cmp	r3, #22
    8954:	d005      	beq.n	8962 <hci_get_class+0x16>
    8956:	3b17      	subs	r3, #23
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
    8958:	2b05      	cmp	r3, #5
    895a:	bf94      	ite	ls
    895c:	2003      	movls	r0, #3
    895e:	2000      	movhi	r0, #0
    8960:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    8962:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    8964:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    8966:	7f03      	ldrb	r3, [r0, #28]
    8968:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
    896c:	2b03      	cmp	r3, #3
    896e:	bf0c      	ite	eq
    8970:	2004      	moveq	r0, #4
    8972:	2005      	movne	r0, #5
    8974:	4770      	bx	lr
    8976:	bf00      	nop

00008978 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
    8978:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    897a:	4b0b      	ldr	r3, [pc, #44]	; (89a8 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    897c:	490b      	ldr	r1, [pc, #44]	; (89ac <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    897e:	4a0c      	ldr	r2, [pc, #48]	; (89b0 <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
    8980:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    8984:	f641 75ff 	movw	r5, #8191	; 0x1fff
    8988:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    898c:	2400      	movs	r4, #0
    898e:	2500      	movs	r5, #0
    8990:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
    8994:	4b07      	ldr	r3, [pc, #28]	; (89b4 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8996:	201f      	movs	r0, #31
    8998:	2100      	movs	r1, #0
    899a:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
    899e:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    89a0:	bc30      	pop	{r4, r5}
	conn_count = 0U;
    89a2:	601a      	str	r2, [r3, #0]
}
    89a4:	4770      	bx	lr
    89a6:	bf00      	nop
    89a8:	20000170 	.word	0x20000170
    89ac:	20000ec8 	.word	0x20000ec8
    89b0:	20000178 	.word	0x20000178
    89b4:	200015fc 	.word	0x200015fc

000089b8 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    89b8:	f008 b820 	b.w	109fc <lll_csrand_get>

000089bc <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    89bc:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    89be:	2300      	movs	r3, #0
    89c0:	f009 fe28 	bl	12614 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    89c4:	2000      	movs	r0, #0
    89c6:	bd08      	pop	{r3, pc}

000089c8 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    89c8:	4801      	ldr	r0, [pc, #4]	; (89d0 <ll_feat_get+0x8>)
    89ca:	2100      	movs	r1, #0
    89cc:	4770      	bx	lr
    89ce:	bf00      	nop
    89d0:	0001417f 	.word	0x0001417f

000089d4 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    89d4:	b510      	push	{r4, lr}
    89d6:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    89d8:	f008 f846 	bl	10a68 <lll_reset>
	LL_ASSERT(!err);
    89dc:	b950      	cbnz	r0, 89f4 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    89de:	f008 fc43 	bl	11268 <lll_adv_reset>
	LL_ASSERT(!err);
    89e2:	b9c0      	cbnz	r0, 8a16 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    89e4:	f009 f8f0 	bl	11bc8 <lll_conn_reset>
	LL_ASSERT(!err);
    89e8:	bb30      	cbnz	r0, 8a38 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    89ea:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    89ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    89f0:	f00d bb46 	b.w	16080 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    89f4:	4a19      	ldr	r2, [pc, #100]	; (8a5c <perform_lll_reset+0x88>)
    89f6:	491a      	ldr	r1, [pc, #104]	; (8a60 <perform_lll_reset+0x8c>)
    89f8:	481a      	ldr	r0, [pc, #104]	; (8a64 <perform_lll_reset+0x90>)
    89fa:	f640 031c 	movw	r3, #2076	; 0x81c
    89fe:	f00e fab6 	bl	16f6e <printk>
    8a02:	4040      	eors	r0, r0
    8a04:	f380 8811 	msr	BASEPRI, r0
    8a08:	f04f 0003 	mov.w	r0, #3
    8a0c:	df02      	svc	2
	err = lll_adv_reset();
    8a0e:	f008 fc2b 	bl	11268 <lll_adv_reset>
	LL_ASSERT(!err);
    8a12:	2800      	cmp	r0, #0
    8a14:	d0e6      	beq.n	89e4 <perform_lll_reset+0x10>
    8a16:	4a11      	ldr	r2, [pc, #68]	; (8a5c <perform_lll_reset+0x88>)
    8a18:	4911      	ldr	r1, [pc, #68]	; (8a60 <perform_lll_reset+0x8c>)
    8a1a:	4812      	ldr	r0, [pc, #72]	; (8a64 <perform_lll_reset+0x90>)
    8a1c:	f640 0321 	movw	r3, #2081	; 0x821
    8a20:	f00e faa5 	bl	16f6e <printk>
    8a24:	4040      	eors	r0, r0
    8a26:	f380 8811 	msr	BASEPRI, r0
    8a2a:	f04f 0003 	mov.w	r0, #3
    8a2e:	df02      	svc	2
	err = lll_conn_reset();
    8a30:	f009 f8ca 	bl	11bc8 <lll_conn_reset>
	LL_ASSERT(!err);
    8a34:	2800      	cmp	r0, #0
    8a36:	d0d8      	beq.n	89ea <perform_lll_reset+0x16>
    8a38:	4a08      	ldr	r2, [pc, #32]	; (8a5c <perform_lll_reset+0x88>)
    8a3a:	4909      	ldr	r1, [pc, #36]	; (8a60 <perform_lll_reset+0x8c>)
    8a3c:	4809      	ldr	r0, [pc, #36]	; (8a64 <perform_lll_reset+0x90>)
    8a3e:	f640 032d 	movw	r3, #2093	; 0x82d
    8a42:	f00e fa94 	bl	16f6e <printk>
    8a46:	4040      	eors	r0, r0
    8a48:	f380 8811 	msr	BASEPRI, r0
    8a4c:	f04f 0003 	mov.w	r0, #3
    8a50:	df02      	svc	2
    8a52:	4620      	mov	r0, r4
}
    8a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8a58:	f00d bb12 	b.w	16080 <z_impl_k_sem_give>
    8a5c:	0001b92c 	.word	0x0001b92c
    8a60:	0001b968 	.word	0x0001b968
    8a64:	0001b7c8 	.word	0x0001b7c8

00008a68 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    8a68:	6008      	str	r0, [r1, #0]
    8a6a:	4801      	ldr	r0, [pc, #4]	; (8a70 <ull_ticker_status_give+0x8>)
    8a6c:	f00d bb08 	b.w	16080 <z_impl_k_sem_give>
    8a70:	200018a8 	.word	0x200018a8

00008a74 <disabled_cb>:
    8a74:	f00d bb04 	b.w	16080 <z_impl_k_sem_give>

00008a78 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    8a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    8a7c:	4d2c      	ldr	r5, [pc, #176]	; (8b30 <tx_cmplt_get+0xb8>)
{
    8a7e:	460c      	mov	r4, r1
    8a80:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    8a82:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    8a84:	7822      	ldrb	r2, [r4, #0]
    8a86:	782b      	ldrb	r3, [r5, #0]
    8a88:	4291      	cmp	r1, r2
    8a8a:	bf9c      	itt	ls
    8a8c:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
    8a8e:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
    8a90:	4591      	cmp	r9, r2
{
    8a92:	4682      	mov	sl, r0
    8a94:	d042      	beq.n	8b1c <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    8a96:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
    8a9a:	3201      	adds	r2, #1
    8a9c:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    8a9e:	4f25      	ldr	r7, [pc, #148]	; (8b34 <tx_cmplt_get+0xbc>)
		i = 0U;
    8aa0:	4291      	cmp	r1, r2
    8aa2:	bf08      	it	eq
    8aa4:	2200      	moveq	r2, #0

	*idx = i;
    8aa6:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
    8aa8:	5afa      	ldrh	r2, [r7, r3]
    8aaa:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
    8aac:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
    8aae:	443b      	add	r3, r7
    8ab0:	f04f 0b01 	mov.w	fp, #1
    8ab4:	f04f 0802 	mov.w	r8, #2
    8ab8:	e021      	b.n	8afe <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
    8aba:	b362      	cbz	r2, 8b16 <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    8abc:	7902      	ldrb	r2, [r0, #4]
    8abe:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
    8ac2:	3a01      	subs	r2, #1
    8ac4:	2a01      	cmp	r2, #1
    8ac6:	d92d      	bls.n	8b24 <tx_cmplt_get+0xac>
    8ac8:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
    8acc:	f002 fcc8 	bl	b460 <ll_tx_mem_release>
	if (*idx >= count) {
    8ad0:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    8ad2:	7869      	ldrb	r1, [r5, #1]
    8ad4:	7828      	ldrb	r0, [r5, #0]
    8ad6:	4299      	cmp	r1, r3
    8ad8:	bf9c      	itt	ls
    8ada:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
    8adc:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
    8ade:	454b      	cmp	r3, r9
    8ae0:	d01d      	beq.n	8b1e <tx_cmplt_get+0xa6>
	i = *idx + 1;
    8ae2:	1c5a      	adds	r2, r3, #1
    8ae4:	b2d2      	uxtb	r2, r2
		i = 0U;
    8ae6:	4291      	cmp	r1, r2
    8ae8:	bf08      	it	eq
    8aea:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
    8aec:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
    8af0:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    8af2:	5af9      	ldrh	r1, [r7, r3]
    8af4:	f8ba 2000 	ldrh.w	r2, [sl]
    8af8:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
    8afa:	443b      	add	r3, r7
    8afc:	d10f      	bne.n	8b1e <tx_cmplt_get+0xa6>
		node_tx = tx->node;
    8afe:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    8b00:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
    8b02:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
    8b06:	d8d8      	bhi.n	8aba <tx_cmplt_get+0x42>
			cmplt++;
    8b08:	3601      	adds	r6, #1
    8b0a:	b2f6      	uxtb	r6, r6
    8b0c:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
    8b10:	2a00      	cmp	r2, #0
    8b12:	d0dd      	beq.n	8ad0 <tx_cmplt_get+0x58>
    8b14:	e7da      	b.n	8acc <tx_cmplt_get+0x54>
    8b16:	f8c3 8004 	str.w	r8, [r3, #4]
    8b1a:	e7d9      	b.n	8ad0 <tx_cmplt_get+0x58>
		return 0;
    8b1c:	2600      	movs	r6, #0

	return cmplt;
}
    8b1e:	4630      	mov	r0, r6
    8b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    8b24:	3601      	adds	r6, #1
    8b26:	f8c3 b004 	str.w	fp, [r3, #4]
    8b2a:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
    8b2c:	e7ce      	b.n	8acc <tx_cmplt_get+0x54>
    8b2e:	bf00      	nop
    8b30:	20000474 	.word	0x20000474
    8b34:	20000478 	.word	0x20000478

00008b38 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    8b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8b3c:	4e3c      	ldr	r6, [pc, #240]	; (8c30 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
    8b3e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8c34 <ull_done+0xfc>
    8b42:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8c38 <ull_done+0x100>
{
    8b46:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    8b48:	e9d6 0100 	ldrd	r0, r1, [r6]
    8b4c:	aa01      	add	r2, sp, #4
    8b4e:	f7fd f94f 	bl	5df0 <memq_peek>
		if (link) {
    8b52:	4604      	mov	r4, r0
    8b54:	2800      	cmp	r0, #0
    8b56:	d03e      	beq.n	8bd6 <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
    8b58:	6870      	ldr	r0, [r6, #4]
    8b5a:	2200      	movs	r2, #0
    8b5c:	4631      	mov	r1, r6
    8b5e:	f7fd f94f 	bl	5e00 <memq_dequeue>
			rx_demux_event_done(link, done);
    8b62:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
    8b64:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
    8b66:	b135      	cbz	r5, 8b76 <ull_done+0x3e>
	return hdr->ref;
    8b68:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	d052      	beq.n	8c14 <ull_done+0xdc>
	return hdr->ref--;
    8b6e:	782b      	ldrb	r3, [r5, #0]
    8b70:	3b01      	subs	r3, #1
    8b72:	b2db      	uxtb	r3, r3
    8b74:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    8b76:	f897 3020 	ldrb.w	r3, [r7, #32]
    8b7a:	b123      	cbz	r3, 8b86 <ull_done+0x4e>
    8b7c:	2b01      	cmp	r3, #1
    8b7e:	d13b      	bne.n	8bf8 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
    8b80:	4638      	mov	r0, r7
    8b82:	f005 fea7 	bl	e8d4 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
    8b86:	4a2d      	ldr	r2, [pc, #180]	; (8c3c <ull_done+0x104>)
	last = last + 1;
    8b88:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
    8b8a:	f892 c001 	ldrb.w	ip, [r2, #1]
    8b8e:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
    8b90:	3301      	adds	r3, #1
	done->extra.type = 0U;
    8b92:	2000      	movs	r0, #0
    8b94:	b2db      	uxtb	r3, r3
		last = 0U;
    8b96:	459c      	cmp	ip, r3
    8b98:	bf08      	it	eq
    8b9a:	4603      	moveq	r3, r0
	if (last == first) {
    8b9c:	4299      	cmp	r1, r3
    8b9e:	f887 0020 	strb.w	r0, [r7, #32]
    8ba2:	d01b      	beq.n	8bdc <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
    8ba4:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
    8ba6:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8ba8:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    8baa:	fb00 2101 	mla	r1, r0, r1, r2
    8bae:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
    8bb0:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    8bb2:	2d00      	cmp	r5, #0
    8bb4:	d0c8      	beq.n	8b48 <ull_done+0x10>
	return hdr->ref;
    8bb6:	782b      	ldrb	r3, [r5, #0]
    8bb8:	2b00      	cmp	r3, #0
    8bba:	d1c5      	bne.n	8b48 <ull_done+0x10>
    8bbc:	696b      	ldr	r3, [r5, #20]
    8bbe:	2b00      	cmp	r3, #0
    8bc0:	d0c2      	beq.n	8b48 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    8bc2:	69a8      	ldr	r0, [r5, #24]
    8bc4:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    8bc6:	e9d6 0100 	ldrd	r0, r1, [r6]
    8bca:	aa01      	add	r2, sp, #4
    8bcc:	f7fd f910 	bl	5df0 <memq_peek>
		if (link) {
    8bd0:	4604      	mov	r4, r0
    8bd2:	2800      	cmp	r0, #0
    8bd4:	d1c0      	bne.n	8b58 <ull_done+0x20>
}
    8bd6:	b003      	add	sp, #12
    8bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
    8bdc:	4918      	ldr	r1, [pc, #96]	; (8c40 <ull_done+0x108>)
    8bde:	4819      	ldr	r0, [pc, #100]	; (8c44 <ull_done+0x10c>)
    8be0:	f640 2368 	movw	r3, #2664	; 0xa68
    8be4:	4642      	mov	r2, r8
    8be6:	f00e f9c2 	bl	16f6e <printk>
    8bea:	4040      	eors	r0, r0
    8bec:	f380 8811 	msr	BASEPRI, r0
    8bf0:	f04f 0003 	mov.w	r0, #3
    8bf4:	df02      	svc	2
    8bf6:	e7dc      	b.n	8bb2 <ull_done+0x7a>
		LL_ASSERT(0);
    8bf8:	4913      	ldr	r1, [pc, #76]	; (8c48 <ull_done+0x110>)
    8bfa:	4812      	ldr	r0, [pc, #72]	; (8c44 <ull_done+0x10c>)
    8bfc:	f640 2361 	movw	r3, #2657	; 0xa61
    8c00:	4642      	mov	r2, r8
    8c02:	f00e f9b4 	bl	16f6e <printk>
    8c06:	4040      	eors	r0, r0
    8c08:	f380 8811 	msr	BASEPRI, r0
    8c0c:	f04f 0003 	mov.w	r0, #3
    8c10:	df02      	svc	2
		break;
    8c12:	e7b8      	b.n	8b86 <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
    8c14:	480b      	ldr	r0, [pc, #44]	; (8c44 <ull_done+0x10c>)
    8c16:	f640 230a 	movw	r3, #2570	; 0xa0a
    8c1a:	4642      	mov	r2, r8
    8c1c:	4649      	mov	r1, r9
    8c1e:	f00e f9a6 	bl	16f6e <printk>
    8c22:	4040      	eors	r0, r0
    8c24:	f380 8811 	msr	BASEPRI, r0
    8c28:	f04f 0003 	mov.w	r0, #3
    8c2c:	df02      	svc	2
    8c2e:	e79e      	b.n	8b6e <ull_done+0x36>
    8c30:	20001894 	.word	0x20001894
    8c34:	0001b92c 	.word	0x0001b92c
    8c38:	0001b970 	.word	0x0001b970
    8c3c:	20000334 	.word	0x20000334
    8c40:	0001b988 	.word	0x0001b988
    8c44:	0001b7c8 	.word	0x0001b7c8
    8c48:	0001b828 	.word	0x0001b828

00008c4c <rx_alloc>:
{
    8c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
    8c50:	4f33      	ldr	r7, [pc, #204]	; (8d20 <rx_alloc+0xd4>)
    8c52:	783e      	ldrb	r6, [r7, #0]
    8c54:	4286      	cmp	r6, r0
    8c56:	bf28      	it	cs
    8c58:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8c5a:	b34e      	cbz	r6, 8cb0 <rx_alloc+0x64>
    8c5c:	4d31      	ldr	r5, [pc, #196]	; (8d24 <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
    8c5e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8d28 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8c62:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
    8c64:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
    8c68:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8c6a:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    8c6c:	3401      	adds	r4, #1
    8c6e:	b2e4      	uxtb	r4, r4
		last = 0U;
    8c70:	42a2      	cmp	r2, r4
    8c72:	bf08      	it	eq
    8c74:	2400      	moveq	r4, #0
	if (last == first) {
    8c76:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    8c78:	4640      	mov	r0, r8
    8c7a:	d01b      	beq.n	8cb4 <rx_alloc+0x68>
    8c7c:	f7fd f84a 	bl	5d14 <mem_acquire>
    8c80:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    8c82:	4648      	mov	r0, r9
		if (!link) {
    8c84:	f1ba 0f00 	cmp.w	sl, #0
    8c88:	d012      	beq.n	8cb0 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    8c8a:	f7fd f843 	bl	5d14 <mem_acquire>
		if (!rx) {
    8c8e:	2800      	cmp	r0, #0
    8c90:	d03f      	beq.n	8d12 <rx_alloc+0xc6>
		rx->link = link;
    8c92:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8c96:	78ea      	ldrb	r2, [r5, #3]
    8c98:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    8c9a:	fb02 5303 	mla	r3, r2, r3, r5
    8c9e:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    8ca0:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    8ca2:	70ec      	strb	r4, [r5, #3]
		max--;
    8ca4:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    8ca6:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8ca8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    8cac:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8cae:	d1db      	bne.n	8c68 <rx_alloc+0x1c>
}
    8cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
    8cb4:	783b      	ldrb	r3, [r7, #0]
    8cb6:	2b00      	cmp	r3, #0
    8cb8:	d0fa      	beq.n	8cb0 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    8cba:	4d1c      	ldr	r5, [pc, #112]	; (8d2c <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
    8cbc:	4e1c      	ldr	r6, [pc, #112]	; (8d30 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    8cbe:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    8cc0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8d28 <rx_alloc+0xdc>
		link->mem = NULL;
    8cc4:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    8cc8:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    8cca:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    8ccc:	3401      	adds	r4, #1
    8cce:	b2e4      	uxtb	r4, r4
		last = 0U;
    8cd0:	42a2      	cmp	r2, r4
    8cd2:	bf08      	it	eq
    8cd4:	2400      	moveq	r4, #0
	if (last == first) {
    8cd6:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    8cd8:	4630      	mov	r0, r6
    8cda:	d0e9      	beq.n	8cb0 <rx_alloc+0x64>
    8cdc:	f7fd f81a 	bl	5d14 <mem_acquire>
    8ce0:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    8ce2:	4640      	mov	r0, r8
		if (!link) {
    8ce4:	f1ba 0f00 	cmp.w	sl, #0
    8ce8:	d0e2      	beq.n	8cb0 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    8cea:	f7fd f813 	bl	5d14 <mem_acquire>
		if (!rx) {
    8cee:	b180      	cbz	r0, 8d12 <rx_alloc+0xc6>
		link->mem = NULL;
    8cf0:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    8cf4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8cf8:	78ea      	ldrb	r2, [r5, #3]
    8cfa:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    8cfc:	fb02 5303 	mla	r3, r2, r3, r5
    8d00:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    8d02:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    8d04:	70ec      	strb	r4, [r5, #3]
    8d06:	3b01      	subs	r3, #1
    8d08:	b2db      	uxtb	r3, r3
    8d0a:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    8d0c:	2b00      	cmp	r3, #0
    8d0e:	d1db      	bne.n	8cc8 <rx_alloc+0x7c>
    8d10:	e7ce      	b.n	8cb0 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
    8d12:	4650      	mov	r0, sl
    8d14:	4906      	ldr	r1, [pc, #24]	; (8d30 <rx_alloc+0xe4>)
}
    8d16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
    8d1a:	f7fd b815 	b.w	5d48 <mem_release>
    8d1e:	bf00      	nop
    8d20:	2000165c 	.word	0x2000165c
    8d24:	20000358 	.word	0x20000358
    8d28:	200016ac 	.word	0x200016ac
    8d2c:	2000034c 	.word	0x2000034c
    8d30:	20001660 	.word	0x20001660

00008d34 <rx_demux>:
{
    8d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d38:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8ee8 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
    8d3c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8eec <rx_demux+0x1b8>
		LL_ASSERT(0);
    8d40:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8ef0 <rx_demux+0x1bc>
    8d44:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8ef4 <rx_demux+0x1c0>
{
    8d48:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    8d4a:	e9d8 0100 	ldrd	r0, r1, [r8]
    8d4e:	aa03      	add	r2, sp, #12
    8d50:	f7fd f84e 	bl	5df0 <memq_peek>
		if (link) {
    8d54:	4605      	mov	r5, r0
    8d56:	2800      	cmp	r0, #0
    8d58:	d035      	beq.n	8dc6 <rx_demux+0x92>
			LL_ASSERT(rx);
    8d5a:	9b03      	ldr	r3, [sp, #12]
    8d5c:	2b00      	cmp	r3, #0
    8d5e:	f000 80a6 	beq.w	8eae <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    8d62:	7818      	ldrb	r0, [r3, #0]
    8d64:	aa04      	add	r2, sp, #16
    8d66:	a902      	add	r1, sp, #8
    8d68:	f006 f86a 	bl	ee40 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    8d6c:	4604      	mov	r4, r0
    8d6e:	2800      	cmp	r0, #0
    8d70:	d055      	beq.n	8e1e <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    8d72:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    8d76:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    8d7a:	780f      	ldrb	r7, [r1, #0]
    8d7c:	f8ad 200a 	strh.w	r2, [sp, #10]
    8d80:	ae05      	add	r6, sp, #20
    8d82:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    8d84:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    8d88:	f006 f874 	bl	ee74 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    8d8c:	4621      	mov	r1, r4
    8d8e:	9a05      	ldr	r2, [sp, #20]
    8d90:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    8d94:	f006 f8b8 	bl	ef08 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    8d98:	4620      	mov	r0, r4
    8d9a:	f006 f829 	bl	edf0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    8d9e:	4632      	mov	r2, r6
    8da0:	4629      	mov	r1, r5
    8da2:	4638      	mov	r0, r7
    8da4:	f006 f84c 	bl	ee40 <ull_conn_ack_by_last_peek>
	} while (link);
    8da8:	4604      	mov	r4, r0
    8daa:	2800      	cmp	r0, #0
    8dac:	d1ec      	bne.n	8d88 <rx_demux+0x54>
	k_sem_give(sem_recv);
    8dae:	f8d9 0000 	ldr.w	r0, [r9]
    8db2:	f00d f965 	bl	16080 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    8db6:	e9d8 0100 	ldrd	r0, r1, [r8]
    8dba:	aa03      	add	r2, sp, #12
    8dbc:	f7fd f818 	bl	5df0 <memq_peek>
		if (link) {
    8dc0:	4605      	mov	r5, r0
    8dc2:	2800      	cmp	r0, #0
    8dc4:	d1c9      	bne.n	8d5a <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    8dc6:	aa04      	add	r2, sp, #16
    8dc8:	a902      	add	r1, sp, #8
    8dca:	f10d 0007 	add.w	r0, sp, #7
    8dce:	f006 f81b 	bl	ee08 <ull_conn_ack_peek>
			if (link) {
    8dd2:	4604      	mov	r4, r0
    8dd4:	2800      	cmp	r0, #0
    8dd6:	d067      	beq.n	8ea8 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
    8dd8:	9b04      	ldr	r3, [sp, #16]
    8dda:	9305      	str	r3, [sp, #20]
    8ddc:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    8de0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    8de4:	f8ad 300a 	strh.w	r3, [sp, #10]
    8de8:	ae05      	add	r6, sp, #20
    8dea:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    8dee:	f006 f841 	bl	ee74 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    8df2:	4621      	mov	r1, r4
    8df4:	9a05      	ldr	r2, [sp, #20]
    8df6:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    8dfa:	f006 f885 	bl	ef08 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    8dfe:	4620      	mov	r0, r4
    8e00:	f005 fff6 	bl	edf0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    8e04:	4632      	mov	r2, r6
    8e06:	4629      	mov	r1, r5
    8e08:	4638      	mov	r0, r7
    8e0a:	f006 f819 	bl	ee40 <ull_conn_ack_by_last_peek>
	} while (link);
    8e0e:	4604      	mov	r4, r0
    8e10:	2800      	cmp	r0, #0
    8e12:	d1ec      	bne.n	8dee <rx_demux+0xba>
	k_sem_give(sem_recv);
    8e14:	f8d9 0000 	ldr.w	r0, [r9]
    8e18:	f00d f932 	bl	16080 <z_impl_k_sem_give>
			if (nack) {
    8e1c:	e7cb      	b.n	8db6 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    8e1e:	9b03      	ldr	r3, [sp, #12]
    8e20:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    8e22:	791b      	ldrb	r3, [r3, #4]
    8e24:	3b01      	subs	r3, #1
    8e26:	2b16      	cmp	r3, #22
    8e28:	d80d      	bhi.n	8e46 <rx_demux+0x112>
    8e2a:	e8df f003 	tbb	[pc, r3]
    8e2e:	0c1a      	.short	0x0c1a
    8e30:	0c0c0c38 	.word	0x0c0c0c38
    8e34:	0c0c0c0c 	.word	0x0c0c0c0c
    8e38:	0c0c0c0c 	.word	0x0c0c0c0c
    8e3c:	0c0c0c0c 	.word	0x0c0c0c0c
    8e40:	2d0c0c0c 	.word	0x2d0c0c0c
    8e44:	1a          	.byte	0x1a
    8e45:	00          	.byte	0x00
		LL_ASSERT(0);
    8e46:	482c      	ldr	r0, [pc, #176]	; (8ef8 <rx_demux+0x1c4>)
    8e48:	f640 13f7 	movw	r3, #2551	; 0x9f7
    8e4c:	4652      	mov	r2, sl
    8e4e:	4659      	mov	r1, fp
    8e50:	f00e f88d 	bl	16f6e <printk>
    8e54:	4040      	eors	r0, r0
    8e56:	f380 8811 	msr	BASEPRI, r0
    8e5a:	f04f 0003 	mov.w	r0, #3
    8e5e:	df02      	svc	2
			if (nack) {
    8e60:	e773      	b.n	8d4a <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    8e62:	4921      	ldr	r1, [pc, #132]	; (8ee8 <rx_demux+0x1b4>)
    8e64:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8e68:	2200      	movs	r2, #0
    8e6a:	f7fc ffc9 	bl	5e00 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    8e6e:	4b23      	ldr	r3, [pc, #140]	; (8efc <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
    8e70:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    8e72:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    8e74:	4628      	mov	r0, r5
    8e76:	4a22      	ldr	r2, [pc, #136]	; (8f00 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    8e78:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    8e7a:	f7fc ffaf 	bl	5ddc <memq_enqueue>
	k_sem_give(sem_recv);
    8e7e:	f8d9 0000 	ldr.w	r0, [r9]
    8e82:	f00d f8fd 	bl	16080 <z_impl_k_sem_give>
			if (nack) {
    8e86:	e796      	b.n	8db6 <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    8e88:	4917      	ldr	r1, [pc, #92]	; (8ee8 <rx_demux+0x1b4>)
    8e8a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8e8e:	2200      	movs	r2, #0
    8e90:	f7fc ffb6 	bl	5e00 <memq_dequeue>
		ull_conn_setup(link, rx);
    8e94:	9905      	ldr	r1, [sp, #20]
    8e96:	4628      	mov	r0, r5
    8e98:	f002 fe0c 	bl	bab4 <ull_conn_setup>
			if (nack) {
    8e9c:	e755      	b.n	8d4a <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
    8e9e:	a905      	add	r1, sp, #20
    8ea0:	4628      	mov	r0, r5
    8ea2:	f002 fe2f 	bl	bb04 <ull_conn_rx>
		if (nack) {
    8ea6:	b188      	cbz	r0, 8ecc <rx_demux+0x198>
}
    8ea8:	b007      	add	sp, #28
    8eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    8eae:	4915      	ldr	r1, [pc, #84]	; (8f04 <rx_demux+0x1d0>)
    8eb0:	4811      	ldr	r0, [pc, #68]	; (8ef8 <rx_demux+0x1c4>)
    8eb2:	f640 03a8 	movw	r3, #2216	; 0x8a8
    8eb6:	4652      	mov	r2, sl
    8eb8:	f00e f859 	bl	16f6e <printk>
    8ebc:	4040      	eors	r0, r0
    8ebe:	f380 8811 	msr	BASEPRI, r0
    8ec2:	f04f 0003 	mov.w	r0, #3
    8ec6:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    8ec8:	9b03      	ldr	r3, [sp, #12]
    8eca:	e74a      	b.n	8d62 <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    8ecc:	4906      	ldr	r1, [pc, #24]	; (8ee8 <rx_demux+0x1b4>)
    8ece:	4602      	mov	r2, r0
    8ed0:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8ed4:	f7fc ff94 	bl	5e00 <memq_dequeue>
		if (rx) {
    8ed8:	9905      	ldr	r1, [sp, #20]
    8eda:	2900      	cmp	r1, #0
    8edc:	f43f af35 	beq.w	8d4a <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    8ee0:	4b06      	ldr	r3, [pc, #24]	; (8efc <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    8ee2:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    8ee4:	78db      	ldrb	r3, [r3, #3]
    8ee6:	e7c6      	b.n	8e76 <rx_demux+0x142>
    8ee8:	2000189c 	.word	0x2000189c
    8eec:	200018a4 	.word	0x200018a4
    8ef0:	0001b92c 	.word	0x0001b92c
    8ef4:	0001b828 	.word	0x0001b828
    8ef8:	0001b7c8 	.word	0x0001b7c8
    8efc:	20000474 	.word	0x20000474
    8f00:	20001890 	.word	0x20001890
    8f04:	0001b998 	.word	0x0001b998

00008f08 <ll_rx_get>:
{
    8f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f0c:	b085      	sub	sp, #20
    8f0e:	e9cd 0100 	strd	r0, r1, [sp]
    8f12:	4c63      	ldr	r4, [pc, #396]	; (90a0 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
    8f14:	4d63      	ldr	r5, [pc, #396]	; (90a4 <ll_rx_get+0x19c>)
    8f16:	4e64      	ldr	r6, [pc, #400]	; (90a8 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
    8f18:	9a00      	ldr	r2, [sp, #0]
    8f1a:	2300      	movs	r3, #0
    8f1c:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    8f1e:	e9d6 0100 	ldrd	r0, r1, [r6]
    8f22:	aa03      	add	r2, sp, #12
    8f24:	f7fc ff64 	bl	5df0 <memq_peek>
	if (link) {
    8f28:	4680      	mov	r8, r0
    8f2a:	2800      	cmp	r0, #0
    8f2c:	f000 809f 	beq.w	906e <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    8f30:	9b03      	ldr	r3, [sp, #12]
    8f32:	495e      	ldr	r1, [pc, #376]	; (90ac <ll_rx_get+0x1a4>)
    8f34:	781a      	ldrb	r2, [r3, #0]
    8f36:	9801      	ldr	r0, [sp, #4]
    8f38:	f7ff fd9e 	bl	8a78 <tx_cmplt_get>
		if (!cmplt) {
    8f3c:	2800      	cmp	r0, #0
    8f3e:	f040 809b 	bne.w	9078 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
    8f42:	78a3      	ldrb	r3, [r4, #2]
    8f44:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    8f48:	78e2      	ldrb	r2, [r4, #3]
    8f4a:	4607      	mov	r7, r0
    8f4c:	f10d 0109 	add.w	r1, sp, #9
    8f50:	f10d 000a 	add.w	r0, sp, #10
    8f54:	f7ff fd90 	bl	8a78 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
    8f58:	ea47 0200 	orr.w	r2, r7, r0
    8f5c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    8f60:	d1f2      	bne.n	8f48 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
    8f62:	9b03      	ldr	r3, [sp, #12]
    8f64:	7919      	ldrb	r1, [r3, #4]
    8f66:	2901      	cmp	r1, #1
    8f68:	f040 8093 	bne.w	9092 <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
    8f6c:	494e      	ldr	r1, [pc, #312]	; (90a8 <ll_rx_get+0x1a0>)
    8f6e:	6870      	ldr	r0, [r6, #4]
    8f70:	f7fc ff46 	bl	5e00 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    8f74:	494e      	ldr	r1, [pc, #312]	; (90b0 <ll_rx_get+0x1a8>)
    8f76:	4640      	mov	r0, r8
    8f78:	f7fc fee6 	bl	5d48 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    8f7c:	782b      	ldrb	r3, [r5, #0]
    8f7e:	2b04      	cmp	r3, #4
    8f80:	d866      	bhi.n	9050 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
    8f82:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    8f84:	494b      	ldr	r1, [pc, #300]	; (90b4 <ll_rx_get+0x1ac>)
    8f86:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    8f88:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    8f8a:	f7fc fedd 	bl	5d48 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8f8e:	782b      	ldrb	r3, [r5, #0]
    8f90:	2b00      	cmp	r3, #0
    8f92:	d0c1      	beq.n	8f18 <ll_rx_get+0x10>
    8f94:	f8df 8120 	ldr.w	r8, [pc, #288]	; 90b8 <ll_rx_get+0x1b0>
	last = last + 1;
    8f98:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
    8f9c:	f898 2001 	ldrb.w	r2, [r8, #1]
    8fa0:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    8fa4:	3701      	adds	r7, #1
    8fa6:	b2ff      	uxtb	r7, r7
		last = 0U;
    8fa8:	42ba      	cmp	r2, r7
    8faa:	bf08      	it	eq
    8fac:	2700      	moveq	r7, #0
	if (last == first) {
    8fae:	429f      	cmp	r7, r3
    8fb0:	d019      	beq.n	8fe6 <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
    8fb2:	483f      	ldr	r0, [pc, #252]	; (90b0 <ll_rx_get+0x1a8>)
    8fb4:	f7fc feae 	bl	5d14 <mem_acquire>
		if (!link) {
    8fb8:	4681      	mov	r9, r0
    8fba:	2800      	cmp	r0, #0
    8fbc:	d0ac      	beq.n	8f18 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    8fbe:	483d      	ldr	r0, [pc, #244]	; (90b4 <ll_rx_get+0x1ac>)
    8fc0:	f7fc fea8 	bl	5d14 <mem_acquire>
		if (!rx) {
    8fc4:	2800      	cmp	r0, #0
    8fc6:	d05a      	beq.n	907e <ll_rx_get+0x176>
		rx->link = link;
    8fc8:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    8fcc:	f898 2003 	ldrb.w	r2, [r8, #3]
    8fd0:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    8fd4:	fb02 8303 	mla	r3, r2, r3, r8
    8fd8:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    8fda:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    8fdc:	f888 7003 	strb.w	r7, [r8, #3]
    8fe0:	3b01      	subs	r3, #1
    8fe2:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    8fe4:	e798      	b.n	8f18 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    8fe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 90bc <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
    8fea:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 90b0 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    8fee:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    8ff2:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 90b4 <ll_rx_get+0x1ac>
	if (last == count) {
    8ff6:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    8ffa:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    8ffe:	3701      	adds	r7, #1
    9000:	b2ff      	uxtb	r7, r7
		last = 0U;
    9002:	42ba      	cmp	r2, r7
    9004:	bf08      	it	eq
    9006:	2700      	moveq	r7, #0
	if (last == first) {
    9008:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
    900a:	4648      	mov	r0, r9
    900c:	d084      	beq.n	8f18 <ll_rx_get+0x10>
    900e:	f7fc fe81 	bl	5d14 <mem_acquire>
    9012:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    9014:	4650      	mov	r0, sl
		if (!link) {
    9016:	f1bb 0f00 	cmp.w	fp, #0
    901a:	f43f af7d 	beq.w	8f18 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    901e:	f7fc fe79 	bl	5d14 <mem_acquire>
		if (!rx) {
    9022:	2800      	cmp	r0, #0
    9024:	d030      	beq.n	9088 <ll_rx_get+0x180>
		link->mem = NULL;
    9026:	2300      	movs	r3, #0
    9028:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
    902c:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    9030:	f898 2003 	ldrb.w	r2, [r8, #3]
    9034:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    9038:	fb02 8303 	mla	r3, r2, r3, r8
    903c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    903e:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    9040:	f888 7003 	strb.w	r7, [r8, #3]
    9044:	3b01      	subs	r3, #1
    9046:	b2db      	uxtb	r3, r3
    9048:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    904a:	2b00      	cmp	r3, #0
    904c:	d1d3      	bne.n	8ff6 <ll_rx_get+0xee>
    904e:	e763      	b.n	8f18 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9050:	4a1b      	ldr	r2, [pc, #108]	; (90c0 <ll_rx_get+0x1b8>)
    9052:	491c      	ldr	r1, [pc, #112]	; (90c4 <ll_rx_get+0x1bc>)
    9054:	481c      	ldr	r0, [pc, #112]	; (90c8 <ll_rx_get+0x1c0>)
    9056:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    905a:	f00d ff88 	bl	16f6e <printk>
    905e:	4040      	eors	r0, r0
    9060:	f380 8811 	msr	BASEPRI, r0
    9064:	f04f 0003 	mov.w	r0, #3
    9068:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    906a:	782b      	ldrb	r3, [r5, #0]
    906c:	e789      	b.n	8f82 <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    906e:	78e2      	ldrb	r2, [r4, #3]
    9070:	490e      	ldr	r1, [pc, #56]	; (90ac <ll_rx_get+0x1a4>)
    9072:	9801      	ldr	r0, [sp, #4]
    9074:	f7ff fd00 	bl	8a78 <tx_cmplt_get>
}
    9078:	b005      	add	sp, #20
    907a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    907e:	490c      	ldr	r1, [pc, #48]	; (90b0 <ll_rx_get+0x1a8>)
    9080:	4648      	mov	r0, r9
    9082:	f7fc fe61 	bl	5d48 <mem_release>
			return;
    9086:	e747      	b.n	8f18 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
    9088:	4909      	ldr	r1, [pc, #36]	; (90b0 <ll_rx_get+0x1a8>)
    908a:	4658      	mov	r0, fp
    908c:	f7fc fe5c 	bl	5d48 <mem_release>
			return;
    9090:	e742      	b.n	8f18 <ll_rx_get+0x10>
			*node_rx = rx;
    9092:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    9094:	4610      	mov	r0, r2
			*node_rx = rx;
    9096:	600b      	str	r3, [r1, #0]
}
    9098:	b005      	add	sp, #20
    909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    909e:	bf00      	nop
    90a0:	20000474 	.word	0x20000474
    90a4:	2000165c 	.word	0x2000165c
    90a8:	2000188c 	.word	0x2000188c
    90ac:	20000476 	.word	0x20000476
    90b0:	20001660 	.word	0x20001660
    90b4:	200016ac 	.word	0x200016ac
    90b8:	20000358 	.word	0x20000358
    90bc:	2000034c 	.word	0x2000034c
    90c0:	0001b92c 	.word	0x0001b92c
    90c4:	0001b99c 	.word	0x0001b99c
    90c8:	0001b7c8 	.word	0x0001b7c8

000090cc <ll_rx_dequeue>:
{
    90cc:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    90ce:	495d      	ldr	r1, [pc, #372]	; (9244 <ll_rx_dequeue+0x178>)
{
    90d0:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    90d2:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    90d4:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    90d6:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    90d8:	aa01      	add	r2, sp, #4
    90da:	f7fc fe91 	bl	5e00 <memq_dequeue>
	LL_ASSERT(link);
    90de:	4604      	mov	r4, r0
    90e0:	2800      	cmp	r0, #0
    90e2:	d063      	beq.n	91ac <ll_rx_dequeue+0xe0>
	mem_release(link, &mem_link_rx.free);
    90e4:	4958      	ldr	r1, [pc, #352]	; (9248 <ll_rx_dequeue+0x17c>)
    90e6:	4620      	mov	r0, r4
    90e8:	f7fc fe2e 	bl	5d48 <mem_release>
	switch (rx->type) {
    90ec:	9a01      	ldr	r2, [sp, #4]
    90ee:	7913      	ldrb	r3, [r2, #4]
    90f0:	2b1c      	cmp	r3, #28
    90f2:	d810      	bhi.n	9116 <ll_rx_dequeue+0x4a>
    90f4:	e8df f003 	tbb	[pc, r3]
    90f8:	1e0f0f1e 	.word	0x1e0f0f1e
    90fc:	0f0f0f0f 	.word	0x0f0f0f0f
    9100:	0f0f0f0f 	.word	0x0f0f0f0f
    9104:	0f0f0f0f 	.word	0x0f0f0f0f
    9108:	0f0f0f0f 	.word	0x0f0f0f0f
    910c:	1e2f0f0f 	.word	0x1e2f0f0f
    9110:	1e1e1e1e 	.word	0x1e1e1e1e
    9114:	1e          	.byte	0x1e
    9115:	00          	.byte	0x00
		LL_ASSERT(0);
    9116:	4a4d      	ldr	r2, [pc, #308]	; (924c <ll_rx_dequeue+0x180>)
    9118:	494d      	ldr	r1, [pc, #308]	; (9250 <ll_rx_dequeue+0x184>)
    911a:	484e      	ldr	r0, [pc, #312]	; (9254 <ll_rx_dequeue+0x188>)
    911c:	f240 43c7 	movw	r3, #1223	; 0x4c7
    9120:	f00d ff25 	bl	16f6e <printk>
    9124:	4040      	eors	r0, r0
    9126:	f380 8811 	msr	BASEPRI, r0
    912a:	f04f 0003 	mov.w	r0, #3
    912e:	df02      	svc	2
}
    9130:	b002      	add	sp, #8
    9132:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    9134:	2b00      	cmp	r3, #0
    9136:	d1fb      	bne.n	9130 <ll_rx_dequeue+0x64>
    9138:	4a44      	ldr	r2, [pc, #272]	; (924c <ll_rx_dequeue+0x180>)
    913a:	4947      	ldr	r1, [pc, #284]	; (9258 <ll_rx_dequeue+0x18c>)
    913c:	4845      	ldr	r0, [pc, #276]	; (9254 <ll_rx_dequeue+0x188>)
    913e:	f240 43c3 	movw	r3, #1219	; 0x4c3
    9142:	f00d ff14 	bl	16f6e <printk>
    9146:	4040      	eors	r0, r0
    9148:	f380 8811 	msr	BASEPRI, r0
    914c:	f04f 0003 	mov.w	r0, #3
    9150:	df02      	svc	2
}
    9152:	b002      	add	sp, #8
    9154:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    9156:	7f13      	ldrb	r3, [r2, #28]
    9158:	2b3c      	cmp	r3, #60	; 0x3c
    915a:	d035      	beq.n	91c8 <ll_rx_dequeue+0xfc>
    915c:	7f53      	ldrb	r3, [r2, #29]
    915e:	b1bb      	cbz	r3, 9190 <ll_rx_dequeue+0xc4>
			adv = HDR_LLL2ULL(lll);
    9160:	6893      	ldr	r3, [r2, #8]
    9162:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    9164:	6e60      	ldr	r0, [r4, #100]	; 0x64
    9166:	b120      	cbz	r0, 9172 <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
    9168:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    916a:	493c      	ldr	r1, [pc, #240]	; (925c <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
    916c:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
    916e:	f7fc fdeb 	bl	5d48 <mem_release>
			adv->is_enabled = 0U;
    9172:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    9176:	f36f 0300 	bfc	r3, #0, #1
    917a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      ull_adv_is_enabled(0));
    917e:	2000      	movs	r0, #0
    9180:	f001 fa30 	bl	a5e4 <ull_adv_is_enabled>
			if (!bm) {
    9184:	2800      	cmp	r0, #0
    9186:	d1d3      	bne.n	9130 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
    9188:	f006 fe52 	bl	fe30 <ull_filter_adv_scan_state_cb>
}
    918c:	b002      	add	sp, #8
    918e:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    9190:	4a2e      	ldr	r2, [pc, #184]	; (924c <ll_rx_dequeue+0x180>)
    9192:	492f      	ldr	r1, [pc, #188]	; (9250 <ll_rx_dequeue+0x184>)
    9194:	482f      	ldr	r0, [pc, #188]	; (9254 <ll_rx_dequeue+0x188>)
    9196:	f240 4354 	movw	r3, #1108	; 0x454
    919a:	f00d fee8 	bl	16f6e <printk>
    919e:	4040      	eors	r0, r0
    91a0:	f380 8811 	msr	BASEPRI, r0
    91a4:	f04f 0003 	mov.w	r0, #3
    91a8:	df02      	svc	2
    91aa:	e7e8      	b.n	917e <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
    91ac:	4a27      	ldr	r2, [pc, #156]	; (924c <ll_rx_dequeue+0x180>)
    91ae:	492c      	ldr	r1, [pc, #176]	; (9260 <ll_rx_dequeue+0x194>)
    91b0:	4828      	ldr	r0, [pc, #160]	; (9254 <ll_rx_dequeue+0x188>)
    91b2:	f240 33a1 	movw	r3, #929	; 0x3a1
    91b6:	f00d feda 	bl	16f6e <printk>
    91ba:	4040      	eors	r0, r0
    91bc:	f380 8811 	msr	BASEPRI, r0
    91c0:	f04f 0003 	mov.w	r0, #3
    91c4:	df02      	svc	2
    91c6:	e78d      	b.n	90e4 <ll_rx_dequeue+0x18>
			lll = ftr->param;
    91c8:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
    91ca:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
    91ce:	b1ed      	cbz	r5, 920c <ll_rx_dequeue+0x140>
				LL_ASSERT(!conn_lll->link_tx_free);
    91d0:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
    91d2:	2200      	movs	r2, #0
    91d4:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
    91d6:	b163      	cbz	r3, 91f2 <ll_rx_dequeue+0x126>
    91d8:	4a1c      	ldr	r2, [pc, #112]	; (924c <ll_rx_dequeue+0x180>)
    91da:	4922      	ldr	r1, [pc, #136]	; (9264 <ll_rx_dequeue+0x198>)
    91dc:	481d      	ldr	r0, [pc, #116]	; (9254 <ll_rx_dequeue+0x188>)
    91de:	f240 431a 	movw	r3, #1050	; 0x41a
    91e2:	f00d fec4 	bl	16f6e <printk>
    91e6:	4040      	eors	r0, r0
    91e8:	f380 8811 	msr	BASEPRI, r0
    91ec:	f04f 0003 	mov.w	r0, #3
    91f0:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    91f2:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    91f6:	f105 0048 	add.w	r0, r5, #72	; 0x48
    91fa:	f7fc fde5 	bl	5dc8 <memq_deinit>
				LL_ASSERT(link);
    91fe:	4606      	mov	r6, r0
    9200:	b190      	cbz	r0, 9228 <ll_rx_dequeue+0x15c>
				ll_conn_release(conn);
    9202:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    9204:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
    9206:	f002 f8fd 	bl	b404 <ll_conn_release>
    920a:	e7b2      	b.n	9172 <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
    920c:	4a0f      	ldr	r2, [pc, #60]	; (924c <ll_rx_dequeue+0x180>)
    920e:	4916      	ldr	r1, [pc, #88]	; (9268 <ll_rx_dequeue+0x19c>)
    9210:	4810      	ldr	r0, [pc, #64]	; (9254 <ll_rx_dequeue+0x188>)
    9212:	f240 4317 	movw	r3, #1047	; 0x417
    9216:	f00d feaa 	bl	16f6e <printk>
    921a:	4040      	eors	r0, r0
    921c:	f380 8811 	msr	BASEPRI, r0
    9220:	f04f 0003 	mov.w	r0, #3
    9224:	df02      	svc	2
    9226:	e7d3      	b.n	91d0 <ll_rx_dequeue+0x104>
				LL_ASSERT(link);
    9228:	4a08      	ldr	r2, [pc, #32]	; (924c <ll_rx_dequeue+0x180>)
    922a:	490d      	ldr	r1, [pc, #52]	; (9260 <ll_rx_dequeue+0x194>)
    922c:	4809      	ldr	r0, [pc, #36]	; (9254 <ll_rx_dequeue+0x188>)
    922e:	f240 431d 	movw	r3, #1053	; 0x41d
    9232:	f00d fe9c 	bl	16f6e <printk>
    9236:	4040      	eors	r0, r0
    9238:	f380 8811 	msr	BASEPRI, r0
    923c:	f04f 0003 	mov.w	r0, #3
    9240:	df02      	svc	2
    9242:	e7de      	b.n	9202 <ll_rx_dequeue+0x136>
    9244:	2000188c 	.word	0x2000188c
    9248:	20001660 	.word	0x20001660
    924c:	0001b92c 	.word	0x0001b92c
    9250:	0001b828 	.word	0x0001b828
    9254:	0001b7c8 	.word	0x0001b7c8
    9258:	0001b9fc 	.word	0x0001b9fc
    925c:	200016ac 	.word	0x200016ac
    9260:	0001bc80 	.word	0x0001bc80
    9264:	0001b9e4 	.word	0x0001b9e4
    9268:	0001b9d8 	.word	0x0001b9d8

0000926c <ll_rx_mem_release>:
{
    926c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    9270:	6804      	ldr	r4, [r0, #0]
{
    9272:	4680      	mov	r8, r0
	while (rx) {
    9274:	b344      	cbz	r4, 92c8 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
    9276:	4f56      	ldr	r7, [pc, #344]	; (93d0 <ll_rx_mem_release+0x164>)
    9278:	f8df 9158 	ldr.w	r9, [pc, #344]	; 93d4 <ll_rx_mem_release+0x168>
    927c:	4e56      	ldr	r6, [pc, #344]	; (93d8 <ll_rx_mem_release+0x16c>)
		rx = rx->next;
    927e:	4625      	mov	r5, r4
    9280:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    9282:	792b      	ldrb	r3, [r5, #4]
    9284:	2b1c      	cmp	r3, #28
    9286:	d810      	bhi.n	92aa <ll_rx_mem_release+0x3e>
    9288:	e8df f003 	tbb	[pc, r3]
    928c:	380f0f38 	.word	0x380f0f38
    9290:	0f0f0f0f 	.word	0x0f0f0f0f
    9294:	0f0f0f0f 	.word	0x0f0f0f0f
    9298:	0f0f0f0f 	.word	0x0f0f0f0f
    929c:	0f0f0f0f 	.word	0x0f0f0f0f
    92a0:	56260f0f 	.word	0x56260f0f
    92a4:	38383838 	.word	0x38383838
    92a8:	38          	.byte	0x38
    92a9:	00          	.byte	0x00
			LL_ASSERT(0);
    92aa:	f240 53f4 	movw	r3, #1524	; 0x5f4
    92ae:	463a      	mov	r2, r7
    92b0:	4649      	mov	r1, r9
    92b2:	4630      	mov	r0, r6
    92b4:	f00d fe5b 	bl	16f6e <printk>
    92b8:	4040      	eors	r0, r0
    92ba:	f380 8811 	msr	BASEPRI, r0
    92be:	f04f 0003 	mov.w	r0, #3
    92c2:	df02      	svc	2
	while (rx) {
    92c4:	2c00      	cmp	r4, #0
    92c6:	d1da      	bne.n	927e <ll_rx_mem_release+0x12>
	*node_rx = rx;
    92c8:	2300      	movs	r3, #0
    92ca:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
    92ce:	20ff      	movs	r0, #255	; 0xff
}
    92d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
    92d4:	f7ff bcba 	b.w	8c4c <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    92d8:	7f2b      	ldrb	r3, [r5, #28]
    92da:	2b3c      	cmp	r3, #60	; 0x3c
    92dc:	d062      	beq.n	93a4 <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
    92de:	b1db      	cbz	r3, 9318 <ll_rx_mem_release+0xac>
    92e0:	493e      	ldr	r1, [pc, #248]	; (93dc <ll_rx_mem_release+0x170>)
    92e2:	f240 532b 	movw	r3, #1323	; 0x52b
    92e6:	463a      	mov	r2, r7
    92e8:	4630      	mov	r0, r6
    92ea:	f00d fe40 	bl	16f6e <printk>
    92ee:	4040      	eors	r0, r0
    92f0:	f380 8811 	msr	BASEPRI, r0
    92f4:	f04f 0003 	mov.w	r0, #3
    92f8:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    92fa:	792b      	ldrb	r3, [r5, #4]
    92fc:	b963      	cbnz	r3, 9318 <ll_rx_mem_release+0xac>
    92fe:	4938      	ldr	r1, [pc, #224]	; (93e0 <ll_rx_mem_release+0x174>)
    9300:	f240 537d 	movw	r3, #1405	; 0x57d
    9304:	463a      	mov	r2, r7
    9306:	4630      	mov	r0, r6
    9308:	f00d fe31 	bl	16f6e <printk>
    930c:	4040      	eors	r0, r0
    930e:	f380 8811 	msr	BASEPRI, r0
    9312:	f04f 0003 	mov.w	r0, #3
    9316:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 93e4 <ll_rx_mem_release+0x178>
    931c:	f89a 3000 	ldrb.w	r3, [sl]
    9320:	2b04      	cmp	r3, #4
    9322:	d82f      	bhi.n	9384 <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
    9324:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    9326:	4930      	ldr	r1, [pc, #192]	; (93e8 <ll_rx_mem_release+0x17c>)
	mem_link_rx.quota_pdu += delta;
    9328:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
    932c:	4628      	mov	r0, r5
    932e:	f7fc fd0b 	bl	5d48 <mem_release>
	while (rx) {
    9332:	2c00      	cmp	r4, #0
    9334:	d1a3      	bne.n	927e <ll_rx_mem_release+0x12>
    9336:	e7c7      	b.n	92c8 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
    9338:	88e8      	ldrh	r0, [r5, #6]
    933a:	2800      	cmp	r0, #0
    933c:	d1c2      	bne.n	92c4 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
    933e:	f002 f86f 	bl	b420 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
    9342:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
    9344:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
    9346:	b163      	cbz	r3, 9362 <ll_rx_mem_release+0xf6>
    9348:	4928      	ldr	r1, [pc, #160]	; (93ec <ll_rx_mem_release+0x180>)
    934a:	f240 53e6 	movw	r3, #1510	; 0x5e6
    934e:	463a      	mov	r2, r7
    9350:	4630      	mov	r0, r6
    9352:	f00d fe0c 	bl	16f6e <printk>
    9356:	4040      	eors	r0, r0
    9358:	f380 8811 	msr	BASEPRI, r0
    935c:	f04f 0003 	mov.w	r0, #3
    9360:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
    9362:	f105 0168 	add.w	r1, r5, #104	; 0x68
    9366:	f105 0064 	add.w	r0, r5, #100	; 0x64
    936a:	f7fc fd2d 	bl	5dc8 <memq_deinit>
				LL_ASSERT(link);
    936e:	4682      	mov	sl, r0
    9370:	b300      	cbz	r0, 93b4 <ll_rx_mem_release+0x148>
				conn->lll.link_tx_free = link;
    9372:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
    9376:	4628      	mov	r0, r5
    9378:	f002 f844 	bl	b404 <ll_conn_release>
	while (rx) {
    937c:	2c00      	cmp	r4, #0
    937e:	f47f af7e 	bne.w	927e <ll_rx_mem_release+0x12>
    9382:	e7a1      	b.n	92c8 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9384:	491a      	ldr	r1, [pc, #104]	; (93f0 <ll_rx_mem_release+0x184>)
    9386:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    938a:	463a      	mov	r2, r7
    938c:	4630      	mov	r0, r6
    938e:	f00d fdee 	bl	16f6e <printk>
    9392:	4040      	eors	r0, r0
    9394:	f380 8811 	msr	BASEPRI, r0
    9398:	f04f 0003 	mov.w	r0, #3
    939c:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    939e:	f89a 3000 	ldrb.w	r3, [sl]
    93a2:	e7bf      	b.n	9324 <ll_rx_mem_release+0xb8>
				mem_release(rx_free, &mem_pdu_rx.free);
    93a4:	4910      	ldr	r1, [pc, #64]	; (93e8 <ll_rx_mem_release+0x17c>)
    93a6:	4628      	mov	r0, r5
    93a8:	f7fc fcce 	bl	5d48 <mem_release>
	while (rx) {
    93ac:	2c00      	cmp	r4, #0
    93ae:	f47f af66 	bne.w	927e <ll_rx_mem_release+0x12>
    93b2:	e789      	b.n	92c8 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
    93b4:	490f      	ldr	r1, [pc, #60]	; (93f4 <ll_rx_mem_release+0x188>)
    93b6:	f240 53e9 	movw	r3, #1513	; 0x5e9
    93ba:	463a      	mov	r2, r7
    93bc:	4630      	mov	r0, r6
    93be:	f00d fdd6 	bl	16f6e <printk>
    93c2:	4040      	eors	r0, r0
    93c4:	f380 8811 	msr	BASEPRI, r0
    93c8:	f04f 0003 	mov.w	r0, #3
    93cc:	df02      	svc	2
    93ce:	e7d0      	b.n	9372 <ll_rx_mem_release+0x106>
    93d0:	0001b92c 	.word	0x0001b92c
    93d4:	0001b828 	.word	0x0001b828
    93d8:	0001b7c8 	.word	0x0001b7c8
    93dc:	0001ba1c 	.word	0x0001ba1c
    93e0:	0001ba28 	.word	0x0001ba28
    93e4:	2000165c 	.word	0x2000165c
    93e8:	200016ac 	.word	0x200016ac
    93ec:	0001ba4c 	.word	0x0001ba4c
    93f0:	0001b99c 	.word	0x0001b99c
    93f4:	0001bc80 	.word	0x0001bc80

000093f8 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    93f8:	4801      	ldr	r0, [pc, #4]	; (9400 <ll_rx_link_alloc+0x8>)
    93fa:	f7fc bc8b 	b.w	5d14 <mem_acquire>
    93fe:	bf00      	nop
    9400:	20001660 	.word	0x20001660

00009404 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    9404:	4901      	ldr	r1, [pc, #4]	; (940c <ll_rx_link_release+0x8>)
    9406:	f7fc bc9f 	b.w	5d48 <mem_release>
    940a:	bf00      	nop
    940c:	20001660 	.word	0x20001660

00009410 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    9410:	4801      	ldr	r0, [pc, #4]	; (9418 <ll_rx_alloc+0x8>)
    9412:	f7fc bc7f 	b.w	5d14 <mem_acquire>
    9416:	bf00      	nop
    9418:	200016ac 	.word	0x200016ac

0000941c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    941c:	4901      	ldr	r1, [pc, #4]	; (9424 <ll_rx_release+0x8>)
    941e:	f7fc bc93 	b.w	5d48 <mem_release>
    9422:	bf00      	nop
    9424:	200016ac 	.word	0x200016ac

00009428 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9428:	4b02      	ldr	r3, [pc, #8]	; (9434 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    942a:	4a03      	ldr	r2, [pc, #12]	; (9438 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    942c:	78db      	ldrb	r3, [r3, #3]
    942e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    9430:	f7fc bcd4 	b.w	5ddc <memq_enqueue>
    9434:	20000474 	.word	0x20000474
    9438:	20001890 	.word	0x20001890

0000943c <ll_rx_sched>:
	k_sem_give(sem_recv);
    943c:	4b01      	ldr	r3, [pc, #4]	; (9444 <ll_rx_sched+0x8>)
    943e:	6818      	ldr	r0, [r3, #0]
    9440:	f00c be1e 	b.w	16080 <z_impl_k_sem_give>
    9444:	200018a4 	.word	0x200018a4

00009448 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    9448:	4b0d      	ldr	r3, [pc, #52]	; (9480 <ll_pdu_rx_alloc_peek+0x38>)
    944a:	7899      	ldrb	r1, [r3, #2]
    944c:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
    944e:	4291      	cmp	r1, r2
    9450:	d80a      	bhi.n	9468 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    9452:	eba2 0c01 	sub.w	ip, r2, r1
    9456:	fa5f fc8c 	uxtb.w	ip, ip
    945a:	4560      	cmp	r0, ip
    945c:	d802      	bhi.n	9464 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    945e:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    9460:	7818      	ldrb	r0, [r3, #0]
    9462:	d109      	bne.n	9478 <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
    9464:	2000      	movs	r0, #0
}
    9466:	4770      	bx	lr
		return count - first + last;
    9468:	f893 c001 	ldrb.w	ip, [r3, #1]
    946c:	4462      	add	r2, ip
    946e:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    9470:	b2d2      	uxtb	r2, r2
    9472:	4290      	cmp	r0, r2
    9474:	d8f6      	bhi.n	9464 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    9476:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    9478:	fb01 3300 	mla	r3, r1, r0, r3
    947c:	6858      	ldr	r0, [r3, #4]
    947e:	4770      	bx	lr
    9480:	2000034c 	.word	0x2000034c

00009484 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    9484:	4b09      	ldr	r3, [pc, #36]	; (94ac <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    9486:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    9488:	78da      	ldrb	r2, [r3, #3]
    948a:	7818      	ldrb	r0, [r3, #0]
    948c:	f893 c001 	ldrb.w	ip, [r3, #1]
    9490:	428a      	cmp	r2, r1
    9492:	d009      	beq.n	94a8 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    9494:	1c4a      	adds	r2, r1, #1
    9496:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    9498:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
    949c:	4594      	cmp	ip, r2
    949e:	bf08      	it	eq
    94a0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    94a2:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
    94a4:	709a      	strb	r2, [r3, #2]

	return mem;
    94a6:	4770      	bx	lr
		return NULL;
    94a8:	2000      	movs	r0, #0
}
    94aa:	4770      	bx	lr
    94ac:	2000034c 	.word	0x2000034c

000094b0 <ll_tx_ack_put>:
{
    94b0:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    94b2:	4a15      	ldr	r2, [pc, #84]	; (9508 <ll_tx_ack_put+0x58>)
    94b4:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
    94b8:	7854      	ldrb	r4, [r2, #1]
    94ba:	f892 e002 	ldrb.w	lr, [r2, #2]
    94be:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
    94c0:	f10c 0301 	add.w	r3, ip, #1
    94c4:	b2db      	uxtb	r3, r3
		last = 0U;
    94c6:	429c      	cmp	r4, r3
    94c8:	bf08      	it	eq
    94ca:	2300      	moveq	r3, #0
	if (last == first) {
    94cc:	459e      	cmp	lr, r3
    94ce:	d00a      	beq.n	94e6 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    94d0:	fb1c fc05 	smulbb	ip, ip, r5
    94d4:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
    94d8:	f82e 000c 	strh.w	r0, [lr, ip]
    94dc:	44f4      	add	ip, lr
	tx->node = node_tx;
    94de:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
    94e2:	70d3      	strb	r3, [r2, #3]
}
    94e4:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
    94e6:	4a09      	ldr	r2, [pc, #36]	; (950c <ll_tx_ack_put+0x5c>)
    94e8:	4909      	ldr	r1, [pc, #36]	; (9510 <ll_tx_ack_put+0x60>)
    94ea:	480a      	ldr	r0, [pc, #40]	; (9514 <ll_tx_ack_put+0x64>)
    94ec:	f44f 63c9 	mov.w	r3, #1608	; 0x648
    94f0:	f00d fd3d 	bl	16f6e <printk>
    94f4:	4040      	eors	r0, r0
    94f6:	f380 8811 	msr	BASEPRI, r0
    94fa:	f04f 0003 	mov.w	r0, #3
    94fe:	df02      	svc	2
	tx->handle = handle;
    9500:	2300      	movs	r3, #0
    9502:	801b      	strh	r3, [r3, #0]
    9504:	deff      	udf	#255	; 0xff
    9506:	bf00      	nop
    9508:	20000474 	.word	0x20000474
    950c:	0001b92c 	.word	0x0001b92c
    9510:	0001bc74 	.word	0x0001bc74
    9514:	0001b7c8 	.word	0x0001b7c8

00009518 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9518:	f030 0302 	bics.w	r3, r0, #2
{
    951c:	b510      	push	{r4, lr}
    951e:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9520:	d002      	beq.n	9528 <ull_ticker_status_take+0x10>
    9522:	680b      	ldr	r3, [r1, #0]
    9524:	2b02      	cmp	r3, #2
    9526:	d008      	beq.n	953a <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    9528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    952c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9530:	4809      	ldr	r0, [pc, #36]	; (9558 <ull_ticker_status_take+0x40>)
    9532:	f00c fdcb 	bl	160cc <z_impl_k_sem_take>
	return *ret_cb;
    9536:	6820      	ldr	r0, [r4, #0]
}
    9538:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    953a:	4a08      	ldr	r2, [pc, #32]	; (955c <ull_ticker_status_take+0x44>)
    953c:	4908      	ldr	r1, [pc, #32]	; (9560 <ull_ticker_status_take+0x48>)
    953e:	4809      	ldr	r0, [pc, #36]	; (9564 <ull_ticker_status_take+0x4c>)
    9540:	f240 637c 	movw	r3, #1660	; 0x67c
    9544:	f00d fd13 	bl	16f6e <printk>
    9548:	4040      	eors	r0, r0
    954a:	f380 8811 	msr	BASEPRI, r0
    954e:	f04f 0003 	mov.w	r0, #3
    9552:	df02      	svc	2
    9554:	e7e8      	b.n	9528 <ull_ticker_status_take+0x10>
    9556:	bf00      	nop
    9558:	200018a8 	.word	0x200018a8
    955c:	0001b92c 	.word	0x0001b92c
    9560:	0001ba6c 	.word	0x0001ba6c
    9564:	0001b7c8 	.word	0x0001b7c8

00009568 <ull_disable_mark>:
	if (!*m) {
    9568:	4a03      	ldr	r2, [pc, #12]	; (9578 <ull_disable_mark+0x10>)
{
    956a:	4603      	mov	r3, r0
	if (!*m) {
    956c:	6810      	ldr	r0, [r2, #0]
    956e:	b100      	cbz	r0, 9572 <ull_disable_mark+0xa>
}
    9570:	4770      	bx	lr
		*m = param;
    9572:	6013      	str	r3, [r2, #0]
    9574:	4618      	mov	r0, r3
}
    9576:	4770      	bx	lr
    9578:	20001628 	.word	0x20001628

0000957c <ull_disable_unmark>:
	if (*m && *m == param) {
    957c:	4a04      	ldr	r2, [pc, #16]	; (9590 <ull_disable_unmark+0x14>)
    957e:	6813      	ldr	r3, [r2, #0]
    9580:	b123      	cbz	r3, 958c <ull_disable_unmark+0x10>
    9582:	4298      	cmp	r0, r3
		*m = NULL;
    9584:	bf06      	itte	eq
    9586:	2100      	moveq	r1, #0
    9588:	6011      	streq	r1, [r2, #0]
	return NULL;
    958a:	2300      	movne	r3, #0
}
    958c:	4618      	mov	r0, r3
    958e:	4770      	bx	lr
    9590:	20001628 	.word	0x20001628

00009594 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    9594:	4b01      	ldr	r3, [pc, #4]	; (959c <ull_disable_mark_get+0x8>)
}
    9596:	6818      	ldr	r0, [r3, #0]
    9598:	4770      	bx	lr
    959a:	bf00      	nop
    959c:	20001628 	.word	0x20001628

000095a0 <ull_update_mark>:
	if (!*m) {
    95a0:	4a03      	ldr	r2, [pc, #12]	; (95b0 <ull_update_mark+0x10>)
{
    95a2:	4603      	mov	r3, r0
	if (!*m) {
    95a4:	6810      	ldr	r0, [r2, #0]
    95a6:	b100      	cbz	r0, 95aa <ull_update_mark+0xa>
}
    95a8:	4770      	bx	lr
		*m = param;
    95aa:	6013      	str	r3, [r2, #0]
    95ac:	4618      	mov	r0, r3
}
    95ae:	4770      	bx	lr
    95b0:	2000162c 	.word	0x2000162c

000095b4 <ull_update_unmark>:
	if (*m && *m == param) {
    95b4:	4a04      	ldr	r2, [pc, #16]	; (95c8 <ull_update_unmark+0x14>)
    95b6:	6813      	ldr	r3, [r2, #0]
    95b8:	b123      	cbz	r3, 95c4 <ull_update_unmark+0x10>
    95ba:	4298      	cmp	r0, r3
		*m = NULL;
    95bc:	bf06      	itte	eq
    95be:	2100      	moveq	r1, #0
    95c0:	6011      	streq	r1, [r2, #0]
	return NULL;
    95c2:	2300      	movne	r3, #0
}
    95c4:	4618      	mov	r0, r3
    95c6:	4770      	bx	lr
    95c8:	2000162c 	.word	0x2000162c

000095cc <ull_update_mark_get>:
	return mark_get(mark_update);
    95cc:	4b01      	ldr	r3, [pc, #4]	; (95d4 <ull_update_mark_get+0x8>)
}
    95ce:	6818      	ldr	r0, [r3, #0]
    95d0:	4770      	bx	lr
    95d2:	bf00      	nop
    95d4:	2000162c 	.word	0x2000162c

000095d8 <ull_disable>:
{
    95d8:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    95da:	6805      	ldr	r5, [r0, #0]
{
    95dc:	b087      	sub	sp, #28
	if (!hdr || !ull_ref_get(hdr)) {
    95de:	b10d      	cbz	r5, 95e4 <ull_disable+0xc>
    95e0:	782b      	ldrb	r3, [r5, #0]
    95e2:	b913      	cbnz	r3, 95ea <ull_disable+0x12>
		return 0;
    95e4:	2000      	movs	r0, #0
}
    95e6:	b007      	add	sp, #28
    95e8:	bd30      	pop	{r4, r5, pc}
	compiler_barrier();
    95ea:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    95ec:	2201      	movs	r2, #1
    95ee:	2100      	movs	r1, #0
    95f0:	4668      	mov	r0, sp
    95f2:	f011 f955 	bl	1a8a0 <z_impl_k_sem_init>
    95f6:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
    95f8:	4a12      	ldr	r2, [pc, #72]	; (9644 <ull_disable+0x6c>)
	hdr->disabled_param = &sem;
    95fa:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    95fe:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    9600:	2b00      	cmp	r3, #0
    9602:	d0ef      	beq.n	95e4 <ull_disable+0xc>
	mfy.param = lll;
    9604:	4b10      	ldr	r3, [pc, #64]	; (9648 <ull_disable+0x70>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    9606:	2200      	movs	r2, #0
    9608:	4611      	mov	r1, r2
    960a:	2003      	movs	r0, #3
	mfy.param = lll;
    960c:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    960e:	f7fc fc59 	bl	5ec4 <mayfly_enqueue>
	LL_ASSERT(!ret);
    9612:	b940      	cbnz	r0, 9626 <ull_disable+0x4e>
	return z_impl_k_sem_take(sem, timeout);
    9614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    961c:	4668      	mov	r0, sp
    961e:	f00c fd55 	bl	160cc <z_impl_k_sem_take>
}
    9622:	b007      	add	sp, #28
    9624:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    9626:	4a09      	ldr	r2, [pc, #36]	; (964c <ull_disable+0x74>)
    9628:	4909      	ldr	r1, [pc, #36]	; (9650 <ull_disable+0x78>)
    962a:	480a      	ldr	r0, [pc, #40]	; (9654 <ull_disable+0x7c>)
    962c:	f240 63f7 	movw	r3, #1783	; 0x6f7
    9630:	f00d fc9d 	bl	16f6e <printk>
    9634:	4040      	eors	r0, r0
    9636:	f380 8811 	msr	BASEPRI, r0
    963a:	f04f 0003 	mov.w	r0, #3
    963e:	df02      	svc	2
    9640:	e7e8      	b.n	9614 <ull_disable+0x3c>
    9642:	bf00      	nop
    9644:	00008a75 	.word	0x00008a75
    9648:	200004d8 	.word	0x200004d8
    964c:	0001b92c 	.word	0x0001b92c
    9650:	0001ba64 	.word	0x0001ba64
    9654:	0001b7c8 	.word	0x0001b7c8

00009658 <ull_ticker_stop_with_mark>:
{
    9658:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    965a:	4d1d      	ldr	r5, [pc, #116]	; (96d0 <ull_ticker_stop_with_mark+0x78>)
    965c:	682b      	ldr	r3, [r5, #0]
{
    965e:	b085      	sub	sp, #20
    9660:	460c      	mov	r4, r1
    9662:	4616      	mov	r6, r2
	if (!*m) {
    9664:	b323      	cbz	r3, 96b0 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
    9666:	4299      	cmp	r1, r3
    9668:	d112      	bne.n	9690 <ull_ticker_stop_with_mark+0x38>
	ret_cb = TICKER_STATUS_BUSY;
    966a:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    966c:	af03      	add	r7, sp, #12
    966e:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    9670:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    9672:	2103      	movs	r1, #3
    9674:	4b17      	ldr	r3, [pc, #92]	; (96d4 <ull_ticker_stop_with_mark+0x7c>)
    9676:	9700      	str	r7, [sp, #0]
    9678:	2000      	movs	r0, #0
    967a:	f7fd fde3 	bl	7244 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    967e:	4639      	mov	r1, r7
    9680:	f7ff ff4a 	bl	9518 <ull_ticker_status_take>
	if (ret) {
    9684:	b140      	cbz	r0, 9698 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
    9686:	682b      	ldr	r3, [r5, #0]
    9688:	b10b      	cbz	r3, 968e <ull_ticker_stop_with_mark+0x36>
    968a:	429c      	cmp	r4, r3
    968c:	d012      	beq.n	96b4 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
    968e:	b1cc      	cbz	r4, 96c4 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
    9690:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    9694:	b005      	add	sp, #20
    9696:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
    9698:	4630      	mov	r0, r6
    969a:	f7ff ff9d 	bl	95d8 <ull_disable>
	if (ret) {
    969e:	b9a0      	cbnz	r0, 96ca <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
    96a0:	682b      	ldr	r3, [r5, #0]
    96a2:	b10b      	cbz	r3, 96a8 <ull_ticker_stop_with_mark+0x50>
    96a4:	429c      	cmp	r4, r3
    96a6:	d00b      	beq.n	96c0 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
    96a8:	2c00      	cmp	r4, #0
    96aa:	d1f1      	bne.n	9690 <ull_ticker_stop_with_mark+0x38>
}
    96ac:	b005      	add	sp, #20
    96ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    96b0:	6029      	str	r1, [r5, #0]
	if (mark != param) {
    96b2:	e7da      	b.n	966a <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    96b4:	2300      	movs	r3, #0
		return -EALREADY;
    96b6:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    96ba:	602b      	str	r3, [r5, #0]
}
    96bc:	b005      	add	sp, #20
    96be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    96c0:	6028      	str	r0, [r5, #0]
	if (mark != param) {
    96c2:	e7e7      	b.n	9694 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
    96c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    96c8:	e7e4      	b.n	9694 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
    96ca:	f06f 000f 	mvn.w	r0, #15
    96ce:	e7e1      	b.n	9694 <ull_ticker_stop_with_mark+0x3c>
    96d0:	20001628 	.word	0x20001628
    96d4:	00008a69 	.word	0x00008a69

000096d8 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    96d8:	4b0d      	ldr	r3, [pc, #52]	; (9710 <ull_pdu_rx_alloc_peek+0x38>)
    96da:	7899      	ldrb	r1, [r3, #2]
    96dc:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
    96de:	4291      	cmp	r1, r2
    96e0:	d80a      	bhi.n	96f8 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    96e2:	eba2 0c01 	sub.w	ip, r2, r1
    96e6:	fa5f fc8c 	uxtb.w	ip, ip
    96ea:	4560      	cmp	r0, ip
    96ec:	d802      	bhi.n	96f4 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    96ee:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    96f0:	7818      	ldrb	r0, [r3, #0]
    96f2:	d109      	bne.n	9708 <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
    96f4:	2000      	movs	r0, #0
}
    96f6:	4770      	bx	lr
		return count - first + last;
    96f8:	f893 c001 	ldrb.w	ip, [r3, #1]
    96fc:	4462      	add	r2, ip
    96fe:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    9700:	b2d2      	uxtb	r2, r2
    9702:	4290      	cmp	r0, r2
    9704:	d8f6      	bhi.n	96f4 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    9706:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    9708:	fb01 3300 	mla	r3, r1, r0, r3
    970c:	6858      	ldr	r0, [r3, #4]
    970e:	4770      	bx	lr
    9710:	20000358 	.word	0x20000358

00009714 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    9714:	4b09      	ldr	r3, [pc, #36]	; (973c <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    9716:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    9718:	78da      	ldrb	r2, [r3, #3]
    971a:	7818      	ldrb	r0, [r3, #0]
    971c:	f893 c001 	ldrb.w	ip, [r3, #1]
    9720:	428a      	cmp	r2, r1
    9722:	d009      	beq.n	9738 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
    9724:	1c4a      	adds	r2, r1, #1
    9726:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    9728:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    972c:	4594      	cmp	ip, r2
    972e:	bf08      	it	eq
    9730:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    9732:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    9734:	709a      	strb	r2, [r3, #2]
	return mem;
    9736:	4770      	bx	lr
		return NULL;
    9738:	2000      	movs	r0, #0
}
    973a:	4770      	bx	lr
    973c:	20000358 	.word	0x20000358

00009740 <ull_rx_put>:
{
    9740:	b538      	push	{r3, r4, r5, lr}
    9742:	460c      	mov	r4, r1
    9744:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    9746:	f005 fb59 	bl	edfc <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    974a:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    974c:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    974e:	4a03      	ldr	r2, [pc, #12]	; (975c <ull_rx_put+0x1c>)
    9750:	4628      	mov	r0, r5
}
    9752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    9756:	f7fc bb41 	b.w	5ddc <memq_enqueue>
    975a:	bf00      	nop
    975c:	200018a0 	.word	0x200018a0

00009760 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    9760:	2201      	movs	r2, #1
    9762:	4b02      	ldr	r3, [pc, #8]	; (976c <ull_rx_sched+0xc>)
    9764:	4611      	mov	r1, r2
    9766:	2000      	movs	r0, #0
    9768:	f7fc bbac 	b.w	5ec4 <mayfly_enqueue>
    976c:	200004c8 	.word	0x200004c8

00009770 <ull_prepare_enqueue>:
{
    9770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    9774:	4e15      	ldr	r6, [pc, #84]	; (97cc <ull_prepare_enqueue+0x5c>)
{
    9776:	f89d a020 	ldrb.w	sl, [sp, #32]
    977a:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    977c:	78f3      	ldrb	r3, [r6, #3]
{
    977e:	460f      	mov	r7, r1
	last = last + 1;
    9780:	1c5d      	adds	r5, r3, #1
    9782:	4611      	mov	r1, r2
	if (last == count) {
    9784:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
    9786:	b2ed      	uxtb	r5, r5
		last = 0U;
    9788:	42aa      	cmp	r2, r5
    978a:	bf08      	it	eq
    978c:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    978e:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
    9790:	42aa      	cmp	r2, r5
{
    9792:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    9794:	7830      	ldrb	r0, [r6, #0]
    9796:	d015      	beq.n	97c4 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    9798:	1d34      	adds	r4, r6, #4
    979a:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    979e:	2210      	movs	r2, #16
    97a0:	4620      	mov	r0, r4
    97a2:	f00e f9ab 	bl	17afc <memcpy>
	e->is_resume = is_resume;
    97a6:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
    97a8:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    97aa:	f00a 0a01 	and.w	sl, sl, #1
    97ae:	f023 0303 	bic.w	r3, r3, #3
    97b2:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
    97b6:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    97ba:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    97bc:	70f5      	strb	r5, [r6, #3]
}
    97be:	4620      	mov	r0, r4
    97c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
    97c4:	2400      	movs	r4, #0
}
    97c6:	4620      	mov	r0, r4
    97c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97cc:	20000370 	.word	0x20000370

000097d0 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    97d0:	4b05      	ldr	r3, [pc, #20]	; (97e8 <ull_prepare_dequeue_get+0x18>)
    97d2:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
    97d4:	78da      	ldrb	r2, [r3, #3]
    97d6:	7819      	ldrb	r1, [r3, #0]
    97d8:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
    97da:	bf1a      	itte	ne
    97dc:	3304      	addne	r3, #4
    97de:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
    97e2:	2000      	moveq	r0, #0
}
    97e4:	4770      	bx	lr
    97e6:	bf00      	nop
    97e8:	20000370 	.word	0x20000370

000097ec <ull_prepare_dequeue_iter>:
{
    97ec:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    97ee:	4b0d      	ldr	r3, [pc, #52]	; (9824 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
    97f0:	7802      	ldrb	r2, [r0, #0]
    97f2:	7859      	ldrb	r1, [r3, #1]
    97f4:	f893 c003 	ldrb.w	ip, [r3, #3]
    97f8:	f893 e000 	ldrb.w	lr, [r3]
    97fc:	4291      	cmp	r1, r2
    97fe:	bf9c      	itt	ls
    9800:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    9802:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    9804:	4594      	cmp	ip, r2
    9806:	d00a      	beq.n	981e <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
    9808:	1c53      	adds	r3, r2, #1
    980a:	b2db      	uxtb	r3, r3
		i = 0U;
    980c:	4299      	cmp	r1, r3
    980e:	bf08      	it	eq
    9810:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    9812:	4905      	ldr	r1, [pc, #20]	; (9828 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
    9814:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    9816:	fb02 100e 	mla	r0, r2, lr, r1
}
    981a:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    981e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    9820:	e7fb      	b.n	981a <ull_prepare_dequeue_iter+0x2e>
    9822:	bf00      	nop
    9824:	20000370 	.word	0x20000370
    9828:	20000374 	.word	0x20000374

0000982c <ull_prepare_dequeue>:
{
    982c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    9830:	4c23      	ldr	r4, [pc, #140]	; (98c0 <ull_prepare_dequeue+0x94>)
    9832:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
    9834:	78e1      	ldrb	r1, [r4, #3]
    9836:	7823      	ldrb	r3, [r4, #0]
    9838:	4291      	cmp	r1, r2
    983a:	d027      	beq.n	988c <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    983c:	1d27      	adds	r7, r4, #4
			mfy.param = next;
    983e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 98c4 <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
    9842:	f8df b084 	ldr.w	fp, [pc, #132]	; 98c8 <ull_prepare_dequeue+0x9c>
    9846:	f8df a084 	ldr.w	sl, [pc, #132]	; 98cc <ull_prepare_dequeue+0xa0>
    984a:	4680      	mov	r8, r0
    984c:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
    9850:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
    9852:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
    9854:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    9858:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
    985c:	d518      	bpl.n	9890 <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
    985e:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
    9860:	78e1      	ldrb	r1, [r4, #3]
    9862:	7820      	ldrb	r0, [r4, #0]
    9864:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
    9868:	1c53      	adds	r3, r2, #1
	if (_first == last) {
    986a:	4291      	cmp	r1, r2
	_first += 1U;
    986c:	b2db      	uxtb	r3, r3
	if (_first == last) {
    986e:	d00d      	beq.n	988c <ull_prepare_dequeue+0x60>
		_first = 0U;
    9870:	459c      	cmp	ip, r3
    9872:	bf08      	it	eq
    9874:	2300      	moveq	r3, #0
	if (first == last) {
    9876:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    9878:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
    987a:	d007      	beq.n	988c <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    987c:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    9880:	2d00      	cmp	r5, #0
    9882:	d1e5      	bne.n	9850 <ull_prepare_dequeue+0x24>
    9884:	b116      	cbz	r6, 988c <ull_prepare_dequeue+0x60>
    9886:	7f03      	ldrb	r3, [r0, #28]
    9888:	07db      	lsls	r3, r3, #31
    988a:	d5e1      	bpl.n	9850 <ull_prepare_dequeue+0x24>
}
    988c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    9890:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    9894:	4b0b      	ldr	r3, [pc, #44]	; (98c4 <ull_prepare_dequeue+0x98>)
    9896:	462a      	mov	r2, r5
    9898:	4629      	mov	r1, r5
    989a:	4640      	mov	r0, r8
    989c:	f7fc fb12 	bl	5ec4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    98a0:	2800      	cmp	r0, #0
    98a2:	d0dc      	beq.n	985e <ull_prepare_dequeue+0x32>
    98a4:	480a      	ldr	r0, [pc, #40]	; (98d0 <ull_prepare_dequeue+0xa4>)
    98a6:	f240 736e 	movw	r3, #1902	; 0x76e
    98aa:	465a      	mov	r2, fp
    98ac:	4651      	mov	r1, sl
    98ae:	f00d fb5e 	bl	16f6e <printk>
    98b2:	4040      	eors	r0, r0
    98b4:	f380 8811 	msr	BASEPRI, r0
    98b8:	f04f 0003 	mov.w	r0, #3
    98bc:	df02      	svc	2
    98be:	e7ce      	b.n	985e <ull_prepare_dequeue+0x32>
    98c0:	20000370 	.word	0x20000370
    98c4:	20000498 	.word	0x20000498
    98c8:	0001b92c 	.word	0x0001b92c
    98cc:	0001ba64 	.word	0x0001ba64
    98d0:	0001b7c8 	.word	0x0001b7c8

000098d4 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    98d4:	4b06      	ldr	r3, [pc, #24]	; (98f0 <ull_event_done_extra_get+0x1c>)
    98d6:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    98d8:	78d9      	ldrb	r1, [r3, #3]
    98da:	7818      	ldrb	r0, [r3, #0]
    98dc:	4291      	cmp	r1, r2
    98de:	d005      	beq.n	98ec <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    98e0:	fb02 3300 	mla	r3, r2, r0, r3
    98e4:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    98e6:	b110      	cbz	r0, 98ee <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    98e8:	3020      	adds	r0, #32
    98ea:	4770      	bx	lr
		return NULL;
    98ec:	2000      	movs	r0, #0
}
    98ee:	4770      	bx	lr
    98f0:	20000334 	.word	0x20000334

000098f4 <ull_event_done>:
{
    98f4:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    98f6:	4a13      	ldr	r2, [pc, #76]	; (9944 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    98f8:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    98fa:	78d4      	ldrb	r4, [r2, #3]
    98fc:	7811      	ldrb	r1, [r2, #0]
    98fe:	429c      	cmp	r4, r3
{
    9900:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
    9902:	7850      	ldrb	r0, [r2, #1]
    9904:	d01b      	beq.n	993e <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    9906:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    990a:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    990c:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    990e:	b2db      	uxtb	r3, r3
		_first = 0U;
    9910:	4298      	cmp	r0, r3
    9912:	bf08      	it	eq
    9914:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    9916:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    9918:	b17c      	cbz	r4, 993a <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    991a:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    991c:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    991e:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    9920:	4a09      	ldr	r2, [pc, #36]	; (9948 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    9922:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
    9924:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
    9926:	6025      	str	r5, [r4, #0]
	evdone->param = param;
    9928:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
    992a:	f7fc fa57 	bl	5ddc <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    992e:	2201      	movs	r2, #1
    9930:	4b06      	ldr	r3, [pc, #24]	; (994c <ull_event_done+0x58>)
    9932:	4611      	mov	r1, r2
    9934:	4628      	mov	r0, r5
    9936:	f7fc fac5 	bl	5ec4 <mayfly_enqueue>
}
    993a:	4620      	mov	r0, r4
    993c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    993e:	2400      	movs	r4, #0
    9940:	e7fb      	b.n	993a <ull_event_done+0x46>
    9942:	bf00      	nop
    9944:	20000334 	.word	0x20000334
    9948:	20001898 	.word	0x20001898
    994c:	200004b8 	.word	0x200004b8

00009950 <ull_rxfifo_alloc>:
{
    9950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9954:	b083      	sub	sp, #12
    9956:	461d      	mov	r5, r3
    9958:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    995a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    995e:	e9cd 0400 	strd	r0, r4, [sp]
    9962:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    9966:	b33b      	cbz	r3, 99b8 <ull_rxfifo_alloc+0x68>
    9968:	1e5c      	subs	r4, r3, #1
    996a:	f895 b000 	ldrb.w	fp, [r5]
    996e:	4688      	mov	r8, r1
    9970:	4617      	mov	r7, r2
    9972:	b2e4      	uxtb	r4, r4
	last = last + 1;
    9974:	f10b 0301 	add.w	r3, fp, #1
    9978:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
    997c:	45d8      	cmp	r8, fp
    997e:	bf08      	it	eq
    9980:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
    9984:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
    9986:	4648      	mov	r0, r9
    9988:	d016      	beq.n	99b8 <ull_rxfifo_alloc+0x68>
    998a:	f7fc f9c3 	bl	5d14 <mem_acquire>
    998e:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
    9990:	4650      	mov	r0, sl
		if (!link) {
    9992:	b18e      	cbz	r6, 99b8 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
    9994:	f7fc f9be 	bl	5d14 <mem_acquire>
		if (!rx) {
    9998:	b188      	cbz	r0, 99be <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
    999a:	2300      	movs	r3, #0
    999c:	6073      	str	r3, [r6, #4]
		rx->link = link;
    999e:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    99a0:	782a      	ldrb	r2, [r5, #0]
    99a2:	9b00      	ldr	r3, [sp, #0]
    99a4:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    99a8:	9b01      	ldr	r3, [sp, #4]
    99aa:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    99ac:	3c01      	subs	r4, #1
    99ae:	b2e4      	uxtb	r4, r4
    99b0:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
    99b2:	f885 b000 	strb.w	fp, [r5]
    99b6:	d1dd      	bne.n	9974 <ull_rxfifo_alloc+0x24>
}
    99b8:	b003      	add	sp, #12
    99ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
    99be:	4649      	mov	r1, r9
    99c0:	4630      	mov	r0, r6
}
    99c2:	b003      	add	sp, #12
    99c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
    99c8:	f7fc b9be 	b.w	5d48 <mem_release>

000099cc <init_reset>:
{
    99cc:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
    99ce:	4c3f      	ldr	r4, [pc, #252]	; (9acc <init_reset+0x100>)
    99d0:	4d3f      	ldr	r5, [pc, #252]	; (9ad0 <init_reset+0x104>)
    99d2:	79a2      	ldrb	r2, [r4, #6]
    99d4:	88a1      	ldrh	r1, [r4, #4]
    99d6:	4e3f      	ldr	r6, [pc, #252]	; (9ad4 <init_reset+0x108>)
    99d8:	2000      	movs	r0, #0
{
    99da:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
    99dc:	4623      	mov	r3, r4
    99de:	8068      	strh	r0, [r5, #2]
    99e0:	f104 0008 	add.w	r0, r4, #8
    99e4:	f7fc f966 	bl	5cb4 <mem_init>
    99e8:	79e3      	ldrb	r3, [r4, #7]
    99ea:	79a2      	ldrb	r2, [r4, #6]
    99ec:	1d30      	adds	r0, r6, #4
    99ee:	441a      	add	r2, r3
    99f0:	2108      	movs	r1, #8
    99f2:	4633      	mov	r3, r6
    99f4:	f7fc f95e 	bl	5cb4 <mem_init>
    99f8:	9602      	str	r6, [sp, #8]
    99fa:	462e      	mov	r6, r5
    99fc:	79a3      	ldrb	r3, [r4, #6]
    99fe:	f816 0b04 	ldrb.w	r0, [r6], #4
    9a02:	78aa      	ldrb	r2, [r5, #2]
    9a04:	7869      	ldrb	r1, [r5, #1]
    9a06:	9303      	str	r3, [sp, #12]
    9a08:	e9cd 6400 	strd	r6, r4, [sp]
    9a0c:	1ceb      	adds	r3, r5, #3
    9a0e:	f7ff ff9f 	bl	9950 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    9a12:	4b31      	ldr	r3, [pc, #196]	; (9ad8 <init_reset+0x10c>)
    9a14:	2207      	movs	r2, #7
    9a16:	1d18      	adds	r0, r3, #4
    9a18:	2144      	movs	r1, #68	; 0x44
    9a1a:	f7fc f94b 	bl	5cb4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    9a1e:	4b2f      	ldr	r3, [pc, #188]	; (9adc <init_reset+0x110>)
    9a20:	2209      	movs	r2, #9
    9a22:	1d18      	adds	r0, r3, #4
    9a24:	2108      	movs	r1, #8
    9a26:	f7fc f945 	bl	5cb4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    9a2a:	482c      	ldr	r0, [pc, #176]	; (9adc <init_reset+0x110>)
    9a2c:	f7fc f972 	bl	5d14 <mem_acquire>
	LL_ASSERT(link);
    9a30:	4604      	mov	r4, r0
    9a32:	b308      	cbz	r0, 9a78 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
    9a34:	4a2a      	ldr	r2, [pc, #168]	; (9ae0 <init_reset+0x114>)
    9a36:	4620      	mov	r0, r4
    9a38:	1f11      	subs	r1, r2, #4
    9a3a:	f7fc f9c1 	bl	5dc0 <memq_init>
	link = mem_acquire(&mem_link_done.free);
    9a3e:	4825      	ldr	r0, [pc, #148]	; (9ad4 <init_reset+0x108>)
    9a40:	f7fc f968 	bl	5d14 <mem_acquire>
	LL_ASSERT(link);
    9a44:	4604      	mov	r4, r0
    9a46:	b328      	cbz	r0, 9a94 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
    9a48:	4a26      	ldr	r2, [pc, #152]	; (9ae4 <init_reset+0x118>)
    9a4a:	4620      	mov	r0, r4
    9a4c:	1f11      	subs	r1, r2, #4
    9a4e:	f7fc f9b7 	bl	5dc0 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    9a52:	4822      	ldr	r0, [pc, #136]	; (9adc <init_reset+0x110>)
    9a54:	f7fc f95e 	bl	5d14 <mem_acquire>
	LL_ASSERT(link);
    9a58:	4604      	mov	r4, r0
    9a5a:	b348      	cbz	r0, 9ab0 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
    9a5c:	4a22      	ldr	r2, [pc, #136]	; (9ae8 <init_reset+0x11c>)
    9a5e:	4620      	mov	r0, r4
    9a60:	1f11      	subs	r1, r2, #4
    9a62:	f7fc f9ad 	bl	5dc0 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    9a66:	4b21      	ldr	r3, [pc, #132]	; (9aec <init_reset+0x120>)
    9a68:	2205      	movs	r2, #5
	rx_alloc(UINT8_MAX);
    9a6a:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    9a6c:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
    9a6e:	f7ff f8ed 	bl	8c4c <rx_alloc>
}
    9a72:	2000      	movs	r0, #0
    9a74:	b004      	add	sp, #16
    9a76:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    9a78:	4a1d      	ldr	r2, [pc, #116]	; (9af0 <init_reset+0x124>)
    9a7a:	491e      	ldr	r1, [pc, #120]	; (9af4 <init_reset+0x128>)
    9a7c:	481e      	ldr	r0, [pc, #120]	; (9af8 <init_reset+0x12c>)
    9a7e:	f240 73fa 	movw	r3, #2042	; 0x7fa
    9a82:	f00d fa74 	bl	16f6e <printk>
    9a86:	4040      	eors	r0, r0
    9a88:	f380 8811 	msr	BASEPRI, r0
    9a8c:	f04f 0003 	mov.w	r0, #3
    9a90:	df02      	svc	2
    9a92:	e7cf      	b.n	9a34 <init_reset+0x68>
	LL_ASSERT(link);
    9a94:	4a16      	ldr	r2, [pc, #88]	; (9af0 <init_reset+0x124>)
    9a96:	4917      	ldr	r1, [pc, #92]	; (9af4 <init_reset+0x128>)
    9a98:	4817      	ldr	r0, [pc, #92]	; (9af8 <init_reset+0x12c>)
    9a9a:	f640 0302 	movw	r3, #2050	; 0x802
    9a9e:	f00d fa66 	bl	16f6e <printk>
    9aa2:	4040      	eors	r0, r0
    9aa4:	f380 8811 	msr	BASEPRI, r0
    9aa8:	f04f 0003 	mov.w	r0, #3
    9aac:	df02      	svc	2
    9aae:	e7cb      	b.n	9a48 <init_reset+0x7c>
	LL_ASSERT(link);
    9ab0:	4a0f      	ldr	r2, [pc, #60]	; (9af0 <init_reset+0x124>)
    9ab2:	4910      	ldr	r1, [pc, #64]	; (9af4 <init_reset+0x128>)
    9ab4:	4810      	ldr	r0, [pc, #64]	; (9af8 <init_reset+0x12c>)
    9ab6:	f640 030a 	movw	r3, #2058	; 0x80a
    9aba:	f00d fa58 	bl	16f6e <printk>
    9abe:	4040      	eors	r0, r0
    9ac0:	f380 8811 	msr	BASEPRI, r0
    9ac4:	f04f 0003 	mov.w	r0, #3
    9ac8:	df02      	svc	2
    9aca:	e7c7      	b.n	9a5c <init_reset+0x90>
    9acc:	2000025c 	.word	0x2000025c
    9ad0:	20000334 	.word	0x20000334
    9ad4:	20001630 	.word	0x20001630
    9ad8:	200016ac 	.word	0x200016ac
    9adc:	20001660 	.word	0x20001660
    9ae0:	200018a0 	.word	0x200018a0
    9ae4:	20001898 	.word	0x20001898
    9ae8:	20001890 	.word	0x20001890
    9aec:	2000165c 	.word	0x2000165c
    9af0:	0001b92c 	.word	0x0001b92c
    9af4:	0001bc80 	.word	0x0001bc80
    9af8:	0001b7c8 	.word	0x0001b7c8

00009afc <ll_init>:
{
    9afc:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
    9afe:	4b2b      	ldr	r3, [pc, #172]	; (9bac <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    9b00:	4d2b      	ldr	r5, [pc, #172]	; (9bb0 <ll_init+0xb4>)
	sem_recv = sem_rx;
    9b02:	6018      	str	r0, [r3, #0]
{
    9b04:	b087      	sub	sp, #28
	cntr_init();
    9b06:	f008 fd0b 	bl	12520 <cntr_init>
	mayfly_init();
    9b0a:	f7fc f989 	bl	5e20 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    9b0e:	4a29      	ldr	r2, [pc, #164]	; (9bb4 <ll_init+0xb8>)
    9b10:	4929      	ldr	r1, [pc, #164]	; (9bb8 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    9b12:	482a      	ldr	r0, [pc, #168]	; (9bbc <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    9b14:	e9cd 2504 	strd	r2, r5, [sp, #16]
    9b18:	4a29      	ldr	r2, [pc, #164]	; (9bc0 <ll_init+0xc4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    9b1a:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    9b1c:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    9b20:	2402      	movs	r4, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    9b22:	210c      	movs	r1, #12
    9b24:	e9cd 0100 	strd	r0, r1, [sp]
    9b28:	4a26      	ldr	r2, [pc, #152]	; (9bc4 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    9b2a:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    9b2c:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    9b2e:	7404      	strb	r4, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    9b30:	7604      	strb	r4, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    9b32:	4619      	mov	r1, r3
    9b34:	2000      	movs	r0, #0
    9b36:	f7fd fa49 	bl	6fcc <ticker_init>
	LL_ASSERT(!err);
    9b3a:	bb40      	cbnz	r0, 9b8e <ll_init+0x92>
	return z_impl_k_sem_init(sem, initial_count, limit);
    9b3c:	2201      	movs	r2, #1
    9b3e:	2100      	movs	r1, #0
    9b40:	4821      	ldr	r0, [pc, #132]	; (9bc8 <ll_init+0xcc>)
    9b42:	f010 fead 	bl	1a8a0 <z_impl_k_sem_init>
	err = lll_init();
    9b46:	f006 ff25 	bl	10994 <lll_init>
	if (err) {
    9b4a:	4604      	mov	r4, r0
    9b4c:	b110      	cbz	r0, 9b54 <ll_init+0x58>
}
    9b4e:	4620      	mov	r0, r4
    9b50:	b007      	add	sp, #28
    9b52:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
    9b54:	f7ff ff3a 	bl	99cc <init_reset>
	if (err) {
    9b58:	4604      	mov	r4, r0
    9b5a:	2800      	cmp	r0, #0
    9b5c:	d1f7      	bne.n	9b4e <ll_init+0x52>
	err = lll_adv_init();
    9b5e:	f007 fb6b 	bl	11238 <lll_adv_init>
	if (err) {
    9b62:	4604      	mov	r4, r0
    9b64:	2800      	cmp	r0, #0
    9b66:	d1f2      	bne.n	9b4e <ll_init+0x52>
	err = ull_adv_init();
    9b68:	f000 fcd2 	bl	a510 <ull_adv_init>
	if (err) {
    9b6c:	4604      	mov	r4, r0
    9b6e:	2800      	cmp	r0, #0
    9b70:	d1ed      	bne.n	9b4e <ll_init+0x52>
	err = lll_conn_init();
    9b72:	f008 f81d 	bl	11bb0 <lll_conn_init>
	if (err) {
    9b76:	4604      	mov	r4, r0
    9b78:	2800      	cmp	r0, #0
    9b7a:	d1e8      	bne.n	9b4e <ll_init+0x52>
	err = ull_conn_init();
    9b7c:	f001 ff42 	bl	ba04 <ull_conn_init>
	if (err) {
    9b80:	4604      	mov	r4, r0
    9b82:	2800      	cmp	r0, #0
    9b84:	d1e3      	bne.n	9b4e <ll_init+0x52>
		ull_filter_reset(true);
    9b86:	2001      	movs	r0, #1
    9b88:	f006 f8d2 	bl	fd30 <ull_filter_reset>
	return  0;
    9b8c:	e7df      	b.n	9b4e <ll_init+0x52>
	LL_ASSERT(!err);
    9b8e:	4a0f      	ldr	r2, [pc, #60]	; (9bcc <ll_init+0xd0>)
    9b90:	490f      	ldr	r1, [pc, #60]	; (9bd0 <ll_init+0xd4>)
    9b92:	4810      	ldr	r0, [pc, #64]	; (9bd4 <ll_init+0xd8>)
    9b94:	f240 230d 	movw	r3, #525	; 0x20d
    9b98:	f00d f9e9 	bl	16f6e <printk>
    9b9c:	4040      	eors	r0, r0
    9b9e:	f380 8811 	msr	BASEPRI, r0
    9ba2:	f04f 0003 	mov.w	r0, #3
    9ba6:	df02      	svc	2
    9ba8:	e7c8      	b.n	9b3c <ll_init+0x40>
    9baa:	bf00      	nop
    9bac:	200018a4 	.word	0x200018a4
    9bb0:	000131b5 	.word	0x000131b5
    9bb4:	00013065 	.word	0x00013065
    9bb8:	00013001 	.word	0x00013001
    9bbc:	20001bf0 	.word	0x20001bf0
    9bc0:	20001980 	.word	0x20001980
    9bc4:	200018c0 	.word	0x200018c0
    9bc8:	200018a8 	.word	0x200018a8
    9bcc:	0001b92c 	.word	0x0001b92c
    9bd0:	0001b968 	.word	0x0001b968
    9bd4:	0001b7c8 	.word	0x0001b7c8

00009bd8 <ll_reset>:
{
    9bd8:	b510      	push	{r4, lr}
    9bda:	b086      	sub	sp, #24
	err = ull_adv_reset();
    9bdc:	f000 fca8 	bl	a530 <ull_adv_reset>
	LL_ASSERT(!err);
    9be0:	bb70      	cbnz	r0, 9c40 <ll_reset+0x68>
	err = ull_conn_reset();
    9be2:	f001 ff11 	bl	ba08 <ull_conn_reset>
	LL_ASSERT(!err);
    9be6:	2800      	cmp	r0, #0
    9be8:	d13b      	bne.n	9c62 <ll_reset+0x8a>
	MFIFO_INIT(tx_ack);
    9bea:	4b3a      	ldr	r3, [pc, #232]	; (9cd4 <ll_reset+0xfc>)
    9bec:	2400      	movs	r4, #0
    9bee:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    9bf0:	4620      	mov	r0, r4
    9bf2:	f006 f89d 	bl	fd30 <ull_filter_reset>
	MFIFO_INIT(prep);
    9bf6:	4938      	ldr	r1, [pc, #224]	; (9cd8 <ll_reset+0x100>)
	MFIFO_INIT(pdu_rx_free);
    9bf8:	4a38      	ldr	r2, [pc, #224]	; (9cdc <ll_reset+0x104>)
	MFIFO_INIT(ll_pdu_rx_free);
    9bfa:	4b39      	ldr	r3, [pc, #228]	; (9ce0 <ll_reset+0x108>)
	MFIFO_INIT(prep);
    9bfc:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
    9bfe:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    9c00:	805c      	strh	r4, [r3, #2]
    9c02:	2201      	movs	r2, #1
    9c04:	4621      	mov	r1, r4
    9c06:	4668      	mov	r0, sp
    9c08:	f010 fe4a 	bl	1a8a0 <z_impl_k_sem_init>
		mfy.param = &sem;
    9c0c:	4b35      	ldr	r3, [pc, #212]	; (9ce4 <ll_reset+0x10c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    9c0e:	4622      	mov	r2, r4
    9c10:	4621      	mov	r1, r4
    9c12:	2003      	movs	r0, #3
		mfy.param = &sem;
    9c14:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    9c18:	f7fc f954 	bl	5ec4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    9c1c:	2800      	cmp	r0, #0
    9c1e:	d14b      	bne.n	9cb8 <ll_reset+0xe0>
	return z_impl_k_sem_take(sem, timeout);
    9c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9c28:	4668      	mov	r0, sp
    9c2a:	f00c fa4f 	bl	160cc <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    9c2e:	f000 fc99 	bl	a564 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    9c32:	2800      	cmp	r0, #0
    9c34:	d132      	bne.n	9c9c <ll_reset+0xc4>
	err = init_reset();
    9c36:	f7ff fec9 	bl	99cc <init_reset>
	LL_ASSERT(!err);
    9c3a:	bb00      	cbnz	r0, 9c7e <ll_reset+0xa6>
}
    9c3c:	b006      	add	sp, #24
    9c3e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    9c40:	4a29      	ldr	r2, [pc, #164]	; (9ce8 <ll_reset+0x110>)
    9c42:	492a      	ldr	r1, [pc, #168]	; (9cec <ll_reset+0x114>)
    9c44:	482a      	ldr	r0, [pc, #168]	; (9cf0 <ll_reset+0x118>)
    9c46:	f240 23ad 	movw	r3, #685	; 0x2ad
    9c4a:	f00d f990 	bl	16f6e <printk>
    9c4e:	4040      	eors	r0, r0
    9c50:	f380 8811 	msr	BASEPRI, r0
    9c54:	f04f 0003 	mov.w	r0, #3
    9c58:	df02      	svc	2
	err = ull_conn_reset();
    9c5a:	f001 fed5 	bl	ba08 <ull_conn_reset>
	LL_ASSERT(!err);
    9c5e:	2800      	cmp	r0, #0
    9c60:	d0c3      	beq.n	9bea <ll_reset+0x12>
    9c62:	4a21      	ldr	r2, [pc, #132]	; (9ce8 <ll_reset+0x110>)
    9c64:	4921      	ldr	r1, [pc, #132]	; (9cec <ll_reset+0x114>)
    9c66:	4822      	ldr	r0, [pc, #136]	; (9cf0 <ll_reset+0x118>)
    9c68:	f240 23de 	movw	r3, #734	; 0x2de
    9c6c:	f00d f97f 	bl	16f6e <printk>
    9c70:	4040      	eors	r0, r0
    9c72:	f380 8811 	msr	BASEPRI, r0
    9c76:	f04f 0003 	mov.w	r0, #3
    9c7a:	df02      	svc	2
    9c7c:	e7b5      	b.n	9bea <ll_reset+0x12>
	LL_ASSERT(!err);
    9c7e:	4a1a      	ldr	r2, [pc, #104]	; (9ce8 <ll_reset+0x110>)
    9c80:	491a      	ldr	r1, [pc, #104]	; (9cec <ll_reset+0x114>)
    9c82:	481b      	ldr	r0, [pc, #108]	; (9cf0 <ll_reset+0x118>)
    9c84:	f240 3327 	movw	r3, #807	; 0x327
    9c88:	f00d f971 	bl	16f6e <printk>
    9c8c:	4040      	eors	r0, r0
    9c8e:	f380 8811 	msr	BASEPRI, r0
    9c92:	f04f 0003 	mov.w	r0, #3
    9c96:	df02      	svc	2
}
    9c98:	b006      	add	sp, #24
    9c9a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    9c9c:	4a12      	ldr	r2, [pc, #72]	; (9ce8 <ll_reset+0x110>)
    9c9e:	4913      	ldr	r1, [pc, #76]	; (9cec <ll_reset+0x114>)
    9ca0:	4813      	ldr	r0, [pc, #76]	; (9cf0 <ll_reset+0x118>)
    9ca2:	f240 331a 	movw	r3, #794	; 0x31a
    9ca6:	f00d f962 	bl	16f6e <printk>
    9caa:	4040      	eors	r0, r0
    9cac:	f380 8811 	msr	BASEPRI, r0
    9cb0:	f04f 0003 	mov.w	r0, #3
    9cb4:	df02      	svc	2
    9cb6:	e7be      	b.n	9c36 <ll_reset+0x5e>
		LL_ASSERT(!retval);
    9cb8:	4a0b      	ldr	r2, [pc, #44]	; (9ce8 <ll_reset+0x110>)
    9cba:	490e      	ldr	r1, [pc, #56]	; (9cf4 <ll_reset+0x11c>)
    9cbc:	480c      	ldr	r0, [pc, #48]	; (9cf0 <ll_reset+0x118>)
    9cbe:	f240 330d 	movw	r3, #781	; 0x30d
    9cc2:	f00d f954 	bl	16f6e <printk>
    9cc6:	4040      	eors	r0, r0
    9cc8:	f380 8811 	msr	BASEPRI, r0
    9ccc:	f04f 0003 	mov.w	r0, #3
    9cd0:	df02      	svc	2
    9cd2:	e7a5      	b.n	9c20 <ll_reset+0x48>
    9cd4:	20000474 	.word	0x20000474
    9cd8:	20000370 	.word	0x20000370
    9cdc:	20000358 	.word	0x20000358
    9ce0:	2000034c 	.word	0x2000034c
    9ce4:	200004a8 	.word	0x200004a8
    9ce8:	0001b92c 	.word	0x0001b92c
    9cec:	0001b968 	.word	0x0001b968
    9cf0:	0001b7c8 	.word	0x0001b7c8
    9cf4:	0001ba8c 	.word	0x0001ba8c

00009cf8 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    9cf8:	b510      	push	{r4, lr}
    9cfa:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
    9cfc:	2400      	movs	r4, #0
    9cfe:	e9cd 4400 	strd	r4, r4, [sp]
    9d02:	9b04      	ldr	r3, [sp, #16]
    9d04:	f007 f85a 	bl	10dbc <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
    9d08:	b002      	add	sp, #8
    9d0a:	bd10      	pop	{r4, pc}

00009d0c <lll_resume>:

void lll_resume(void *param)
{
    9d0c:	b510      	push	{r4, lr}
    9d0e:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    9d10:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    9d12:	691a      	ldr	r2, [r3, #16]
    9d14:	6999      	ldr	r1, [r3, #24]
    9d16:	2401      	movs	r4, #1
{
    9d18:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    9d1a:	4020      	ands	r0, r4
    9d1c:	e9cd 0400 	strd	r0, r4, [sp]
    9d20:	6958      	ldr	r0, [r3, #20]
    9d22:	f007 f84b 	bl	10dbc <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    9d26:	b108      	cbz	r0, 9d2c <lll_resume+0x20>
    9d28:	3077      	adds	r0, #119	; 0x77
    9d2a:	d101      	bne.n	9d30 <lll_resume+0x24>
}
    9d2c:	b002      	add	sp, #8
    9d2e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    9d30:	4a06      	ldr	r2, [pc, #24]	; (9d4c <lll_resume+0x40>)
    9d32:	4907      	ldr	r1, [pc, #28]	; (9d50 <lll_resume+0x44>)
    9d34:	4807      	ldr	r0, [pc, #28]	; (9d54 <lll_resume+0x48>)
    9d36:	234f      	movs	r3, #79	; 0x4f
    9d38:	f00d f919 	bl	16f6e <printk>
    9d3c:	4040      	eors	r0, r0
    9d3e:	f380 8811 	msr	BASEPRI, r0
    9d42:	f04f 0003 	mov.w	r0, #3
    9d46:	df02      	svc	2
}
    9d48:	b002      	add	sp, #8
    9d4a:	bd10      	pop	{r4, pc}
    9d4c:	0001ba94 	.word	0x0001ba94
    9d50:	0001bad8 	.word	0x0001bad8
    9d54:	0001b7c8 	.word	0x0001b7c8

00009d58 <ticker_stop_cb>:
{
    9d58:	b530      	push	{r4, r5, lr}
    9d5a:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    9d5c:	4b19      	ldr	r3, [pc, #100]	; (9dc4 <ticker_stop_cb+0x6c>)
{
    9d5e:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    9d60:	4a19      	ldr	r2, [pc, #100]	; (9dc8 <ticker_stop_cb+0x70>)
    9d62:	1aeb      	subs	r3, r5, r3
    9d64:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    9d68:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
    9d6c:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    9d70:	d119      	bne.n	9da6 <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    9d72:	1ca2      	adds	r2, r4, #2
    9d74:	4b15      	ldr	r3, [pc, #84]	; (9dcc <ticker_stop_cb+0x74>)
    9d76:	9500      	str	r5, [sp, #0]
    9d78:	b2d2      	uxtb	r2, r2
    9d7a:	2101      	movs	r1, #1
    9d7c:	2000      	movs	r0, #0
    9d7e:	f7fd fa61 	bl	7244 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9d82:	f030 0302 	bics.w	r3, r0, #2
    9d86:	d00c      	beq.n	9da2 <ticker_stop_cb+0x4a>
    9d88:	4a11      	ldr	r2, [pc, #68]	; (9dd0 <ticker_stop_cb+0x78>)
    9d8a:	4912      	ldr	r1, [pc, #72]	; (9dd4 <ticker_stop_cb+0x7c>)
    9d8c:	4812      	ldr	r0, [pc, #72]	; (9dd8 <ticker_stop_cb+0x80>)
    9d8e:	f640 03d2 	movw	r3, #2258	; 0x8d2
    9d92:	f00d f8ec 	bl	16f6e <printk>
    9d96:	4040      	eors	r0, r0
    9d98:	f380 8811 	msr	BASEPRI, r0
    9d9c:	f04f 0003 	mov.w	r0, #3
    9da0:	df02      	svc	2
}
    9da2:	b003      	add	sp, #12
    9da4:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    9da6:	4a0a      	ldr	r2, [pc, #40]	; (9dd0 <ticker_stop_cb+0x78>)
    9da8:	490c      	ldr	r1, [pc, #48]	; (9ddc <ticker_stop_cb+0x84>)
    9daa:	480b      	ldr	r0, [pc, #44]	; (9dd8 <ticker_stop_cb+0x80>)
    9dac:	f640 03cd 	movw	r3, #2253	; 0x8cd
    9db0:	f00d f8dd 	bl	16f6e <printk>
    9db4:	4040      	eors	r0, r0
    9db6:	f380 8811 	msr	BASEPRI, r0
    9dba:	f04f 0003 	mov.w	r0, #3
    9dbe:	df02      	svc	2
    9dc0:	e7d7      	b.n	9d72 <ticker_stop_cb+0x1a>
    9dc2:	bf00      	nop
    9dc4:	20001c28 	.word	0x20001c28
    9dc8:	8d3dcb09 	.word	0x8d3dcb09
    9dcc:	00009e75 	.word	0x00009e75
    9dd0:	0001baec 	.word	0x0001baec
    9dd4:	0001bb38 	.word	0x0001bb38
    9dd8:	0001b7c8 	.word	0x0001b7c8
    9ddc:	0001bb2c 	.word	0x0001bb2c

00009de0 <disabled_cb>:
{
    9de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    9de2:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    9de4:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
    9de6:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    9de8:	b1d7      	cbz	r7, 9e20 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
    9dea:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
    9dec:	2300      	movs	r3, #0
    9dee:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    9df0:	b34c      	cbz	r4, 9e46 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
    9df2:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    9df4:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
    9df6:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    9df8:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    9dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9dfe:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    9e00:	221e      	movs	r2, #30
    9e02:	f104 001c 	add.w	r0, r4, #28
    9e06:	f00d fe84 	bl	17b12 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    9e0a:	233c      	movs	r3, #60	; 0x3c
    9e0c:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
    9e0e:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    9e10:	4621      	mov	r1, r4
    9e12:	4638      	mov	r0, r7
    9e14:	f7ff fb08 	bl	9428 <ll_rx_put>
}
    9e18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    9e1c:	f7ff bb0e 	b.w	943c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    9e20:	4a10      	ldr	r2, [pc, #64]	; (9e64 <disabled_cb+0x84>)
    9e22:	4911      	ldr	r1, [pc, #68]	; (9e68 <disabled_cb+0x88>)
    9e24:	4811      	ldr	r0, [pc, #68]	; (9e6c <disabled_cb+0x8c>)
    9e26:	f640 131a 	movw	r3, #2330	; 0x91a
    9e2a:	f00d f8a0 	bl	16f6e <printk>
    9e2e:	4040      	eors	r0, r0
    9e30:	f380 8811 	msr	BASEPRI, r0
    9e34:	f04f 0003 	mov.w	r0, #3
    9e38:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    9e3a:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
    9e3c:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
    9e3e:	2300      	movs	r3, #0
    9e40:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    9e42:	2c00      	cmp	r4, #0
    9e44:	d1d5      	bne.n	9df2 <disabled_cb+0x12>
    9e46:	4a07      	ldr	r2, [pc, #28]	; (9e64 <disabled_cb+0x84>)
    9e48:	4909      	ldr	r1, [pc, #36]	; (9e70 <disabled_cb+0x90>)
    9e4a:	4808      	ldr	r0, [pc, #32]	; (9e6c <disabled_cb+0x8c>)
    9e4c:	f640 131e 	movw	r3, #2334	; 0x91e
    9e50:	f00d f88d 	bl	16f6e <printk>
    9e54:	4040      	eors	r0, r0
    9e56:	f380 8811 	msr	BASEPRI, r0
    9e5a:	f04f 0003 	mov.w	r0, #3
    9e5e:	df02      	svc	2
	rx = adv->node_rx_cc_free;
    9e60:	6e6c      	ldr	r4, [r5, #100]	; 0x64
    9e62:	e7c6      	b.n	9df2 <disabled_cb+0x12>
    9e64:	0001baec 	.word	0x0001baec
    9e68:	0001bb54 	.word	0x0001bb54
    9e6c:	0001b7c8 	.word	0x0001b7c8
    9e70:	0001bb68 	.word	0x0001bb68

00009e74 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    9e74:	b100      	cbz	r0, 9e78 <ticker_stop_op_cb+0x4>
    9e76:	4770      	bx	lr
	mfy.param = param;
    9e78:	4b0c      	ldr	r3, [pc, #48]	; (9eac <ticker_stop_op_cb+0x38>)
{
    9e7a:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    9e7c:	4602      	mov	r2, r0
    9e7e:	460c      	mov	r4, r1
    9e80:	2002      	movs	r0, #2
    9e82:	2101      	movs	r1, #1
	mfy.param = param;
    9e84:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    9e86:	f7fc f81d 	bl	5ec4 <mayfly_enqueue>
	LL_ASSERT(!ret);
    9e8a:	b900      	cbnz	r0, 9e8e <ticker_stop_op_cb+0x1a>
}
    9e8c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    9e8e:	4a08      	ldr	r2, [pc, #32]	; (9eb0 <ticker_stop_op_cb+0x3c>)
    9e90:	4908      	ldr	r1, [pc, #32]	; (9eb4 <ticker_stop_op_cb+0x40>)
    9e92:	4809      	ldr	r0, [pc, #36]	; (9eb8 <ticker_stop_op_cb+0x44>)
    9e94:	f640 03ee 	movw	r3, #2286	; 0x8ee
    9e98:	f00d f869 	bl	16f6e <printk>
    9e9c:	4040      	eors	r0, r0
    9e9e:	f380 8811 	msr	BASEPRI, r0
    9ea2:	f04f 0003 	mov.w	r0, #3
    9ea6:	df02      	svc	2
}
    9ea8:	bd10      	pop	{r4, pc}
    9eaa:	bf00      	nop
    9eac:	20000508 	.word	0x20000508
    9eb0:	0001baec 	.word	0x0001baec
    9eb4:	0001ba64 	.word	0x0001ba64
    9eb8:	0001b7c8 	.word	0x0001b7c8

00009ebc <adv_disable>:
{
    9ebc:	b538      	push	{r3, r4, r5, lr}
    9ebe:	4604      	mov	r4, r0
    9ec0:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    9ec4:	b353      	cbz	r3, 9f1c <adv_disable+0x60>
		mfy.param = &adv->lll;
    9ec6:	4d17      	ldr	r5, [pc, #92]	; (9f24 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    9ec8:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
    9eca:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    9ecc:	b16b      	cbz	r3, 9eea <adv_disable+0x2e>
    9ece:	4a16      	ldr	r2, [pc, #88]	; (9f28 <adv_disable+0x6c>)
    9ed0:	4916      	ldr	r1, [pc, #88]	; (9f2c <adv_disable+0x70>)
    9ed2:	4817      	ldr	r0, [pc, #92]	; (9f30 <adv_disable+0x74>)
    9ed4:	f640 1303 	movw	r3, #2307	; 0x903
    9ed8:	f00d f849 	bl	16f6e <printk>
    9edc:	4040      	eors	r0, r0
    9ede:	f380 8811 	msr	BASEPRI, r0
    9ee2:	f04f 0003 	mov.w	r0, #3
    9ee6:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    9ee8:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    9eea:	4912      	ldr	r1, [pc, #72]	; (9f34 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    9eec:	4b0d      	ldr	r3, [pc, #52]	; (9f24 <adv_disable+0x68>)
    9eee:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    9ef0:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    9ef4:	4611      	mov	r1, r2
    9ef6:	2001      	movs	r0, #1
    9ef8:	f7fb ffe4 	bl	5ec4 <mayfly_enqueue>
		LL_ASSERT(!ret);
    9efc:	b900      	cbnz	r0, 9f00 <adv_disable+0x44>
}
    9efe:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    9f00:	4a09      	ldr	r2, [pc, #36]	; (9f28 <adv_disable+0x6c>)
    9f02:	490d      	ldr	r1, [pc, #52]	; (9f38 <adv_disable+0x7c>)
    9f04:	480a      	ldr	r0, [pc, #40]	; (9f30 <adv_disable+0x74>)
    9f06:	f640 130a 	movw	r3, #2314	; 0x90a
    9f0a:	f00d f830 	bl	16f6e <printk>
    9f0e:	4040      	eors	r0, r0
    9f10:	f380 8811 	msr	BASEPRI, r0
    9f14:	f04f 0003 	mov.w	r0, #3
    9f18:	df02      	svc	2
}
    9f1a:	bd38      	pop	{r3, r4, r5, pc}
    9f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
    9f20:	f7ff bf5e 	b.w	9de0 <disabled_cb>
    9f24:	200004f8 	.word	0x200004f8
    9f28:	0001baec 	.word	0x0001baec
    9f2c:	0001bb80 	.word	0x0001bb80
    9f30:	0001b7c8 	.word	0x0001b7c8
    9f34:	00009de1 	.word	0x00009de1
    9f38:	0001ba64 	.word	0x0001ba64

00009f3c <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    9f3c:	b900      	cbnz	r0, 9f40 <ticker_update_op_cb+0x4>
    9f3e:	4770      	bx	lr
{
    9f40:	b510      	push	{r4, lr}
    9f42:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    9f44:	f7ff fb26 	bl	9594 <ull_disable_mark_get>
    9f48:	4284      	cmp	r4, r0
    9f4a:	d00c      	beq.n	9f66 <ticker_update_op_cb+0x2a>
    9f4c:	4a06      	ldr	r2, [pc, #24]	; (9f68 <ticker_update_op_cb+0x2c>)
    9f4e:	4907      	ldr	r1, [pc, #28]	; (9f6c <ticker_update_op_cb+0x30>)
    9f50:	4807      	ldr	r0, [pc, #28]	; (9f70 <ticker_update_op_cb+0x34>)
    9f52:	f640 03bf 	movw	r3, #2239	; 0x8bf
    9f56:	f00d f80a 	bl	16f6e <printk>
    9f5a:	4040      	eors	r0, r0
    9f5c:	f380 8811 	msr	BASEPRI, r0
    9f60:	f04f 0003 	mov.w	r0, #3
    9f64:	df02      	svc	2
}
    9f66:	bd10      	pop	{r4, pc}
    9f68:	0001baec 	.word	0x0001baec
    9f6c:	0001bb94 	.word	0x0001bb94
    9f70:	0001b7c8 	.word	0x0001b7c8

00009f74 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
    9f74:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    9f76:	4b13      	ldr	r3, [pc, #76]	; (9fc4 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    9f78:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    9f7a:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    9f7e:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
    9f82:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    9f86:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
    9f8a:	f022 0202 	bic.w	r2, r2, #2
    9f8e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    9f90:	f042 020e 	orr.w	r2, r2, #14
    9f94:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
    9f96:	2006      	movs	r0, #6
	pdu->type = pdu_type;
    9f98:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    9f9a:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    9f9e:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    9fa2:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    9fa6:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
    9faa:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
    9fac:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    9fae:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
    9fb2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9fb6:	2204      	movs	r2, #4
    9fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
    9fba:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
    9fbc:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
    9fbe:	f85d fb04 	ldr.w	pc, [sp], #4
    9fc2:	bf00      	nop
    9fc4:	20001c28 	.word	0x20001c28

00009fc8 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    9fc8:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    9fca:	4c1b      	ldr	r4, [pc, #108]	; (a038 <conn_release.constprop.0+0x70>)
    9fcc:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
    9fce:	6dab      	ldr	r3, [r5, #88]	; 0x58
    9fd0:	b163      	cbz	r3, 9fec <conn_release.constprop.0+0x24>
    9fd2:	4a1a      	ldr	r2, [pc, #104]	; (a03c <conn_release.constprop.0+0x74>)
    9fd4:	491a      	ldr	r1, [pc, #104]	; (a040 <conn_release.constprop.0+0x78>)
    9fd6:	481b      	ldr	r0, [pc, #108]	; (a044 <conn_release.constprop.0+0x7c>)
    9fd8:	f640 1348 	movw	r3, #2376	; 0x948
    9fdc:	f00c ffc7 	bl	16f6e <printk>
    9fe0:	4040      	eors	r0, r0
    9fe2:	f380 8811 	msr	BASEPRI, r0
    9fe6:	f04f 0003 	mov.w	r0, #3
    9fea:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    9fec:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    9ff0:	f105 0048 	add.w	r0, r5, #72	; 0x48
    9ff4:	f7fb fee8 	bl	5dc8 <memq_deinit>
	LL_ASSERT(link);
    9ff8:	4606      	mov	r6, r0
    9ffa:	b170      	cbz	r0, a01a <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    9ffc:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    9ffe:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
    a000:	f001 fa00 	bl	b404 <ll_conn_release>
	adv->lll.conn = NULL;
    a004:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    a006:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
    a008:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
    a00a:	f7ff fa07 	bl	941c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    a00e:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
    a010:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
    a012:	f7ff f9f7 	bl	9404 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    a016:	6625      	str	r5, [r4, #96]	; 0x60
}
    a018:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    a01a:	4a08      	ldr	r2, [pc, #32]	; (a03c <conn_release.constprop.0+0x74>)
    a01c:	490a      	ldr	r1, [pc, #40]	; (a048 <conn_release.constprop.0+0x80>)
    a01e:	4809      	ldr	r0, [pc, #36]	; (a044 <conn_release.constprop.0+0x7c>)
    a020:	f640 134a 	movw	r3, #2378	; 0x94a
    a024:	f00c ffa3 	bl	16f6e <printk>
    a028:	4040      	eors	r0, r0
    a02a:	f380 8811 	msr	BASEPRI, r0
    a02e:	f04f 0003 	mov.w	r0, #3
    a032:	df02      	svc	2
    a034:	e7e2      	b.n	9ffc <conn_release.constprop.0+0x34>
    a036:	bf00      	nop
    a038:	20001c28 	.word	0x20001c28
    a03c:	0001baec 	.word	0x0001baec
    a040:	0001bbc4 	.word	0x0001bbc4
    a044:	0001b7c8 	.word	0x0001b7c8
    a048:	0001bc80 	.word	0x0001bc80

0000a04c <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
    a04c:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
    a04e:	4c4a      	ldr	r4, [pc, #296]	; (a178 <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
    a050:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
    a052:	4620      	mov	r0, r4
    a054:	f7ff fa88 	bl	9568 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    a058:	4284      	cmp	r4, r0
    a05a:	d00c      	beq.n	a076 <disable.part.0+0x2a>
    a05c:	4a47      	ldr	r2, [pc, #284]	; (a17c <disable.part.0+0x130>)
    a05e:	4948      	ldr	r1, [pc, #288]	; (a180 <disable.part.0+0x134>)
    a060:	4848      	ldr	r0, [pc, #288]	; (a184 <disable.part.0+0x138>)
    a062:	f640 13fe 	movw	r3, #2558	; 0x9fe
    a066:	f00c ff82 	bl	16f6e <printk>
    a06a:	4040      	eors	r0, r0
    a06c:	f380 8811 	msr	BASEPRI, r0
    a070:	f04f 0003 	mov.w	r0, #3
    a074:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    a076:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    a07a:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    a07c:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    a07e:	d50d      	bpl.n	a09c <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
    a080:	2102      	movs	r1, #2
    a082:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    a084:	4b40      	ldr	r3, [pc, #256]	; (a188 <disable.part.0+0x13c>)
    a086:	9500      	str	r5, [sp, #0]
    a088:	2103      	movs	r1, #3
    a08a:	2201      	movs	r2, #1
    a08c:	2000      	movs	r0, #0
    a08e:	f7fd f8d9 	bl	7244 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    a092:	4629      	mov	r1, r5
    a094:	f7ff fa40 	bl	9518 <ull_ticker_status_take>
		if (ret) {
    a098:	2800      	cmp	r0, #0
    a09a:	d157      	bne.n	a14c <disable.part.0+0x100>
	ret_cb = TICKER_STATUS_BUSY;
    a09c:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    a09e:	2103      	movs	r1, #3
    a0a0:	4b39      	ldr	r3, [pc, #228]	; (a188 <disable.part.0+0x13c>)
    a0a2:	9500      	str	r5, [sp, #0]
    a0a4:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    a0a6:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    a0a8:	f7fd f8cc 	bl	7244 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    a0ac:	4629      	mov	r1, r5
    a0ae:	f7ff fa33 	bl	9518 <ull_ticker_status_take>
	if (ret) {
    a0b2:	2800      	cmp	r0, #0
    a0b4:	d135      	bne.n	a122 <disable.part.0+0xd6>
	ret = ull_disable(&adv->lll);
    a0b6:	4835      	ldr	r0, [pc, #212]	; (a18c <disable.part.0+0x140>)
    a0b8:	f7ff fa8e 	bl	95d8 <ull_disable>
	LL_ASSERT(!ret);
    a0bc:	b9f0      	cbnz	r0, a0fc <disable.part.0+0xb0>
	mark = ull_disable_unmark(adv);
    a0be:	482e      	ldr	r0, [pc, #184]	; (a178 <disable.part.0+0x12c>)
    a0c0:	f7ff fa5c 	bl	957c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    a0c4:	4284      	cmp	r4, r0
    a0c6:	d00c      	beq.n	a0e2 <disable.part.0+0x96>
    a0c8:	4a2c      	ldr	r2, [pc, #176]	; (a17c <disable.part.0+0x130>)
    a0ca:	492d      	ldr	r1, [pc, #180]	; (a180 <disable.part.0+0x134>)
    a0cc:	482d      	ldr	r0, [pc, #180]	; (a184 <disable.part.0+0x138>)
    a0ce:	f44f 6322 	mov.w	r3, #2592	; 0xa20
    a0d2:	f00c ff4c 	bl	16f6e <printk>
    a0d6:	4040      	eors	r0, r0
    a0d8:	f380 8811 	msr	BASEPRI, r0
    a0dc:	f04f 0003 	mov.w	r0, #3
    a0e0:	df02      	svc	2
	if (adv->lll.conn) {
    a0e2:	6a23      	ldr	r3, [r4, #32]
    a0e4:	b10b      	cbz	r3, a0ea <disable.part.0+0x9e>
		conn_release(adv);
    a0e6:	f7ff ff6f 	bl	9fc8 <conn_release.constprop.0>
	adv->is_enabled = 0U;
    a0ea:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	return 0;
    a0ee:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
    a0f0:	f36f 0300 	bfc	r3, #0, #1
    a0f4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
    a0f8:	b005      	add	sp, #20
    a0fa:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    a0fc:	4a1f      	ldr	r2, [pc, #124]	; (a17c <disable.part.0+0x130>)
    a0fe:	4924      	ldr	r1, [pc, #144]	; (a190 <disable.part.0+0x144>)
    a100:	4820      	ldr	r0, [pc, #128]	; (a184 <disable.part.0+0x138>)
    a102:	f640 231d 	movw	r3, #2589	; 0xa1d
    a106:	f00c ff32 	bl	16f6e <printk>
    a10a:	4040      	eors	r0, r0
    a10c:	f380 8811 	msr	BASEPRI, r0
    a110:	f04f 0003 	mov.w	r0, #3
    a114:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    a116:	4818      	ldr	r0, [pc, #96]	; (a178 <disable.part.0+0x12c>)
    a118:	f7ff fa30 	bl	957c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    a11c:	4284      	cmp	r4, r0
    a11e:	d1d3      	bne.n	a0c8 <disable.part.0+0x7c>
    a120:	e7df      	b.n	a0e2 <disable.part.0+0x96>
		mark = ull_disable_unmark(adv);
    a122:	4815      	ldr	r0, [pc, #84]	; (a178 <disable.part.0+0x12c>)
    a124:	f7ff fa2a 	bl	957c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    a128:	4284      	cmp	r4, r0
    a12a:	d021      	beq.n	a170 <disable.part.0+0x124>
    a12c:	4a13      	ldr	r2, [pc, #76]	; (a17c <disable.part.0+0x130>)
    a12e:	4914      	ldr	r1, [pc, #80]	; (a180 <disable.part.0+0x134>)
    a130:	4814      	ldr	r0, [pc, #80]	; (a184 <disable.part.0+0x138>)
    a132:	f640 2317 	movw	r3, #2583	; 0xa17
    a136:	f00c ff1a 	bl	16f6e <printk>
    a13a:	4040      	eors	r0, r0
    a13c:	f380 8811 	msr	BASEPRI, r0
    a140:	f04f 0003 	mov.w	r0, #3
    a144:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    a146:	200c      	movs	r0, #12
}
    a148:	b005      	add	sp, #20
    a14a:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_unmark(adv);
    a14c:	480a      	ldr	r0, [pc, #40]	; (a178 <disable.part.0+0x12c>)
    a14e:	f7ff fa15 	bl	957c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    a152:	4284      	cmp	r4, r0
    a154:	d00c      	beq.n	a170 <disable.part.0+0x124>
    a156:	4a09      	ldr	r2, [pc, #36]	; (a17c <disable.part.0+0x130>)
    a158:	4909      	ldr	r1, [pc, #36]	; (a180 <disable.part.0+0x134>)
    a15a:	480a      	ldr	r0, [pc, #40]	; (a184 <disable.part.0+0x138>)
    a15c:	f640 2309 	movw	r3, #2569	; 0xa09
    a160:	f00c ff05 	bl	16f6e <printk>
    a164:	4040      	eors	r0, r0
    a166:	f380 8811 	msr	BASEPRI, r0
    a16a:	f04f 0003 	mov.w	r0, #3
    a16e:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
    a170:	200c      	movs	r0, #12
}
    a172:	b005      	add	sp, #20
    a174:	bd30      	pop	{r4, r5, pc}
    a176:	bf00      	nop
    a178:	20001c28 	.word	0x20001c28
    a17c:	0001baec 	.word	0x0001baec
    a180:	0001bbd8 	.word	0x0001bbd8
    a184:	0001b7c8 	.word	0x0001b7c8
    a188:	00008a69 	.word	0x00008a69
    a18c:	20001c44 	.word	0x20001c44
    a190:	0001ba64 	.word	0x0001ba64

0000a194 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
    a194:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    a196:	7804      	ldrb	r4, [r0, #0]
    a198:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
    a19c:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    a19e:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    a1a0:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    a1a4:	d01f      	beq.n	a1e6 <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a1a6:	2c01      	cmp	r4, #1
    a1a8:	d009      	beq.n	a1be <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    a1aa:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
    a1ac:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
    a1ae:	b18c      	cbz	r4, a1d4 <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
    a1b0:	2c06      	cmp	r4, #6
    a1b2:	d00f      	beq.n	a1d4 <adv_time_get.constprop.0.isra.0+0x40>
    a1b4:	f44f 732a 	mov.w	r3, #680	; 0x2a8
    a1b8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
    a1bc:	e003      	b.n	a1c6 <adv_time_get.constprop.0.isra.0+0x32>
    a1be:	f44f 6387 	mov.w	r3, #1080	; 0x438
    a1c2:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
    a1c6:	fb0c 3302 	mla	r3, ip, r2, r3
    a1ca:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    a1ce:	4018      	ands	r0, r3
}
    a1d0:	bc10      	pop	{r4}
    a1d2:	4770      	bx	lr
				adv_size += pdu->len;
    a1d4:	7843      	ldrb	r3, [r0, #1]
    a1d6:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
    a1d8:	00db      	lsls	r3, r3, #3
    a1da:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    a1de:	f503 72b3 	add.w	r2, r3, #358	; 0x166
    a1e2:	440b      	add	r3, r1
    a1e4:	e7ef      	b.n	a1c6 <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
    a1e6:	7840      	ldrb	r0, [r0, #1]
}
    a1e8:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    a1ea:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    a1ee:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    a1f2:	3010      	adds	r0, #16
    a1f4:	005b      	lsls	r3, r3, #1
    a1f6:	00c1      	lsls	r1, r0, #3
    a1f8:	f503 70c8 	add.w	r0, r3, #400	; 0x190
    a1fc:	fb01 0002 	mla	r0, r1, r2, r0
    a200:	b280      	uxth	r0, r0
}
    a202:	4770      	bx	lr

0000a204 <ticker_cb>:
{
    a204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a208:	461d      	mov	r5, r3
    a20a:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    a20c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a210:	429d      	cmp	r5, r3
{
    a212:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    a216:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    a218:	d018      	beq.n	a24c <ticker_cb+0x48>
	return ++hdr->ref;
    a21a:	7823      	ldrb	r3, [r4, #0]
    a21c:	3301      	adds	r3, #1
    a21e:	b2db      	uxtb	r3, r3
    a220:	4607      	mov	r7, r0
    a222:	4616      	mov	r6, r2
    a224:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
    a226:	2b00      	cmp	r3, #0
    a228:	d061      	beq.n	a2ee <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
    a22a:	4938      	ldr	r1, [pc, #224]	; (a30c <ticker_cb+0x108>)
		mfy.param = &p;
    a22c:	4b38      	ldr	r3, [pc, #224]	; (a310 <ticker_cb+0x10c>)
		p.lazy = lazy;
    a22e:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
    a230:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    a234:	2200      	movs	r2, #0
		p.param = lll;
    a236:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
    a238:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
    a23c:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
    a240:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    a242:	2001      	movs	r0, #1
    a244:	4611      	mov	r1, r2
    a246:	f7fb fe3d 	bl	5ec4 <mayfly_enqueue>
		LL_ASSERT(!ret);
    a24a:	b938      	cbnz	r0, a25c <ticker_cb+0x58>
	if (!lll->is_hdcd)
    a24c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    a250:	f010 0501 	ands.w	r5, r0, #1
    a254:	d014      	beq.n	a280 <ticker_cb+0x7c>
}
    a256:	b00a      	add	sp, #40	; 0x28
    a258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    a25c:	4a2d      	ldr	r2, [pc, #180]	; (a314 <ticker_cb+0x110>)
    a25e:	492e      	ldr	r1, [pc, #184]	; (a318 <ticker_cb+0x114>)
    a260:	482e      	ldr	r0, [pc, #184]	; (a31c <ticker_cb+0x118>)
    a262:	f640 0392 	movw	r3, #2194	; 0x892
    a266:	f00c fe82 	bl	16f6e <printk>
    a26a:	4040      	eors	r0, r0
    a26c:	f380 8811 	msr	BASEPRI, r0
    a270:	f04f 0003 	mov.w	r0, #3
    a274:	df02      	svc	2
	if (!lll->is_hdcd)
    a276:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    a27a:	f010 0501 	ands.w	r5, r0, #1
    a27e:	d1ea      	bne.n	a256 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
    a280:	2104      	movs	r1, #4
    a282:	a809      	add	r0, sp, #36	; 0x24
    a284:	f006 fbdc 	bl	10a40 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
    a288:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a28a:	4a25      	ldr	r2, [pc, #148]	; (a320 <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    a28c:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
    a28e:	fba2 1203 	umull	r1, r2, r2, r3
    a292:	1a99      	subs	r1, r3, r2
    a294:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    a298:	0a12      	lsrs	r2, r2, #8
    a29a:	f240 1147 	movw	r1, #327	; 0x147
    a29e:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    a2a2:	4a20      	ldr	r2, [pc, #128]	; (a324 <ticker_cb+0x120>)
    a2a4:	4920      	ldr	r1, [pc, #128]	; (a328 <ticker_cb+0x124>)
    a2a6:	1aa2      	subs	r2, r4, r2
    a2a8:	fba1 1202 	umull	r1, r2, r1, r2
    a2ac:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    a2ae:	491f      	ldr	r1, [pc, #124]	; (a32c <ticker_cb+0x128>)
    a2b0:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
    a2b2:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    a2b4:	e9cd 5104 	strd	r5, r1, [sp, #16]
    a2b8:	e9cd 5502 	strd	r5, r5, [sp, #8]
    a2bc:	e9cd 5500 	strd	r5, r5, [sp]
    a2c0:	b2d2      	uxtb	r2, r2
    a2c2:	2101      	movs	r1, #1
    a2c4:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
    a2c6:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    a2c8:	f7fc ffa4 	bl	7214 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    a2cc:	f030 0302 	bics.w	r3, r0, #2
    a2d0:	d0c1      	beq.n	a256 <ticker_cb+0x52>
    a2d2:	4a10      	ldr	r2, [pc, #64]	; (a314 <ticker_cb+0x110>)
    a2d4:	4916      	ldr	r1, [pc, #88]	; (a330 <ticker_cb+0x12c>)
    a2d6:	4811      	ldr	r0, [pc, #68]	; (a31c <ticker_cb+0x118>)
    a2d8:	f240 732c 	movw	r3, #1836	; 0x72c
    a2dc:	f00c fe47 	bl	16f6e <printk>
    a2e0:	4040      	eors	r0, r0
    a2e2:	f380 8811 	msr	BASEPRI, r0
    a2e6:	f04f 0003 	mov.w	r0, #3
    a2ea:	df02      	svc	2
}
    a2ec:	e7b3      	b.n	a256 <ticker_cb+0x52>
		LL_ASSERT(ref);
    a2ee:	4a09      	ldr	r2, [pc, #36]	; (a314 <ticker_cb+0x110>)
    a2f0:	4910      	ldr	r1, [pc, #64]	; (a334 <ticker_cb+0x130>)
    a2f2:	480a      	ldr	r0, [pc, #40]	; (a31c <ticker_cb+0x118>)
    a2f4:	f640 0385 	movw	r3, #2181	; 0x885
    a2f8:	f00c fe39 	bl	16f6e <printk>
    a2fc:	4040      	eors	r0, r0
    a2fe:	f380 8811 	msr	BASEPRI, r0
    a302:	f04f 0003 	mov.w	r0, #3
    a306:	df02      	svc	2
    a308:	e78f      	b.n	a22a <ticker_cb+0x26>
    a30a:	bf00      	nop
    a30c:	20001ca8 	.word	0x20001ca8
    a310:	200004e8 	.word	0x200004e8
    a314:	0001baec 	.word	0x0001baec
    a318:	0001ba64 	.word	0x0001ba64
    a31c:	0001b7c8 	.word	0x0001b7c8
    a320:	90d4f121 	.word	0x90d4f121
    a324:	20001c28 	.word	0x20001c28
    a328:	8d3dcb09 	.word	0x8d3dcb09
    a32c:	00009f3d 	.word	0x00009f3d
    a330:	0001bb38 	.word	0x0001bb38
    a334:	0001bbe4 	.word	0x0001bbe4

0000a338 <ll_adv_params_set>:
{
    a338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!adv || adv->is_enabled) {
    a33c:	4c6d      	ldr	r4, [pc, #436]	; (a4f4 <ll_adv_params_set+0x1bc>)
{
    a33e:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a340:	4b6d      	ldr	r3, [pc, #436]	; (a4f8 <ll_adv_params_set+0x1c0>)
	if (!adv || adv->is_enabled) {
    a342:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
    a346:	4680      	mov	r8, r0
    a348:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a34a:	e893 0003 	ldmia.w	r3, {r0, r1}
{
    a34e:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
    a350:	f016 0601 	ands.w	r6, r6, #1
{
    a354:	4615      	mov	r5, r2
    a356:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    a35a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a35e:	9000      	str	r0, [sp, #0]
    a360:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    a364:	f040 8089 	bne.w	a47a <ll_adv_params_set+0x142>
	adv->lll.chan_map = chan_map;
    a368:	f00c 0c07 	and.w	ip, ip, #7
    a36c:	f002 0203 	and.w	r2, r2, #3
    a370:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    a374:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    a378:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
    a37c:	f1be 0f01 	cmp.w	lr, #1
    a380:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    a384:	bf08      	it	eq
    a386:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
    a38a:	ab02      	add	r3, sp, #8
    a38c:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
    a390:	449e      	add	lr, r3
    a392:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
    a396:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
    a398:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
    a39c:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
    a3a0:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    a3a4:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
    a3a8:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
    a3ac:	f029 011f 	bic.w	r1, r9, #31
    a3b0:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
    a3b4:	ea4c 0c02 	orr.w	ip, ip, r2
    a3b8:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    a3bc:	bf0c      	ite	eq
    a3be:	2201      	moveq	r2, #1
    a3c0:	2200      	movne	r2, #0
    a3c2:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
    a3c6:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
    a3ca:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    a3ce:	f003 030f 	and.w	r3, r3, #15
    a3d2:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
    a3d4:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    a3d8:	d046      	beq.n	a468 <ll_adv_params_set+0x130>
	adv->own_addr_type = own_addr_type;
    a3da:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    a3de:	f365 0342 	bfi	r3, r5, #1, #2
    a3e2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    a3e6:	b2da      	uxtb	r2, r3
    a3e8:	075b      	lsls	r3, r3, #29
    a3ea:	d508      	bpl.n	a3fe <ll_adv_params_set+0xc6>
		adv->peer_addr_type = direct_addr_type;
    a3ec:	f367 02c3 	bfi	r2, r7, #3, #1
    a3f0:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
    a3f4:	4841      	ldr	r0, [pc, #260]	; (a4fc <ll_adv_params_set+0x1c4>)
    a3f6:	990a      	ldr	r1, [sp, #40]	; 0x28
    a3f8:	2206      	movs	r2, #6
    a3fa:	f00d fb7f 	bl	17afc <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a3fe:	f898 3000 	ldrb.w	r3, [r8]
    a402:	f003 020f 	and.w	r2, r3, #15
    a406:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
    a408:	f005 0a01 	and.w	sl, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a40c:	d03a      	beq.n	a484 <ll_adv_params_set+0x14c>
	} else if (pdu->len == 0) {
    a40e:	f898 2001 	ldrb.w	r2, [r8, #1]
    a412:	b1fa      	cbz	r2, a454 <ll_adv_params_set+0x11c>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
    a414:	f1b9 0f01 	cmp.w	r9, #1
    a418:	d04f      	beq.n	a4ba <ll_adv_params_set+0x182>
		pdu->tx_addr = own_addr_type & 0x1;
    a41a:	f898 3000 	ldrb.w	r3, [r8]
    a41e:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
    a422:	f36f 13c7 	bfc	r3, #7, #1
    a426:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    a42a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    a42e:	61e4      	str	r4, [r4, #28]
    a430:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a434:	01ad      	lsls	r5, r5, #6
    a436:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a438:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
    a43c:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a43e:	f045 0504 	orr.w	r5, r5, #4
    a442:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
    a444:	b912      	cbnz	r2, a44c <ll_adv_params_set+0x114>
			pdu->len = BDADDR_SIZE;
    a446:	2106      	movs	r1, #6
    a448:	7059      	strb	r1, [r3, #1]
	return 0;
    a44a:	4616      	mov	r6, r2
}
    a44c:	4630      	mov	r0, r6
    a44e:	b002      	add	sp, #8
    a450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
    a454:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
    a458:	f362 13c7 	bfi	r3, r2, #7, #1
    a45c:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
    a460:	2306      	movs	r3, #6
    a462:	f888 3001 	strb.w	r3, [r8, #1]
    a466:	e7e0      	b.n	a42a <ll_adv_params_set+0xf2>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
    a468:	f1b9 0f01 	cmp.w	r9, #1
    a46c:	d0b5      	beq.n	a3da <ll_adv_params_set+0xa2>
		if (pdu->len == 0U) {
    a46e:	f898 2001 	ldrb.w	r2, [r8, #1]
    a472:	b9b2      	cbnz	r2, a4a2 <ll_adv_params_set+0x16a>
			adv->ad_data_backup.len = 0U;
    a474:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    a478:	e7af      	b.n	a3da <ll_adv_params_set+0xa2>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a47a:	260c      	movs	r6, #12
}
    a47c:	4630      	mov	r0, r6
    a47e:	b002      	add	sp, #8
    a480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
    a484:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
    a486:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = direct_addr_type;
    a48a:	f367 13c7 	bfi	r3, r7, #7, #1
    a48e:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    a492:	990a      	ldr	r1, [sp, #40]	; 0x28
    a494:	2206      	movs	r2, #6
    a496:	f00d fb31 	bl	17afc <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    a49a:	230c      	movs	r3, #12
    a49c:	f888 3001 	strb.w	r3, [r8, #1]
    a4a0:	e7c3      	b.n	a42a <ll_adv_params_set+0xf2>
			LL_ASSERT(pdu->len >=
    a4a2:	2a05      	cmp	r2, #5
    a4a4:	d916      	bls.n	a4d4 <ll_adv_params_set+0x19c>
			adv->ad_data_backup.len = pdu->len -
    a4a6:	3a06      	subs	r2, #6
    a4a8:	b2d2      	uxtb	r2, r2
    a4aa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    a4ae:	f108 0108 	add.w	r1, r8, #8
    a4b2:	4813      	ldr	r0, [pc, #76]	; (a500 <ll_adv_params_set+0x1c8>)
    a4b4:	f00d fb22 	bl	17afc <memcpy>
    a4b8:	e78f      	b.n	a3da <ll_adv_params_set+0xa2>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
    a4ba:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    a4be:	4910      	ldr	r1, [pc, #64]	; (a500 <ll_adv_params_set+0x1c8>)
    a4c0:	f108 0008 	add.w	r0, r8, #8
    a4c4:	f00d fb1a 	bl	17afc <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
    a4c8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    a4cc:	3306      	adds	r3, #6
    a4ce:	f888 3001 	strb.w	r3, [r8, #1]
    a4d2:	e7a2      	b.n	a41a <ll_adv_params_set+0xe2>
			LL_ASSERT(pdu->len >=
    a4d4:	4a0b      	ldr	r2, [pc, #44]	; (a504 <ll_adv_params_set+0x1cc>)
    a4d6:	490c      	ldr	r1, [pc, #48]	; (a508 <ll_adv_params_set+0x1d0>)
    a4d8:	480c      	ldr	r0, [pc, #48]	; (a50c <ll_adv_params_set+0x1d4>)
    a4da:	f44f 73ce 	mov.w	r3, #412	; 0x19c
    a4de:	f00c fd46 	bl	16f6e <printk>
    a4e2:	4040      	eors	r0, r0
    a4e4:	f380 8811 	msr	BASEPRI, r0
    a4e8:	f04f 0003 	mov.w	r0, #3
    a4ec:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
    a4ee:	f898 2001 	ldrb.w	r2, [r8, #1]
    a4f2:	e7d8      	b.n	a4a6 <ll_adv_params_set+0x16e>
    a4f4:	20001c28 	.word	0x20001c28
    a4f8:	0001b400 	.word	0x0001b400
    a4fc:	20001c93 	.word	0x20001c93
    a500:	20001c69 	.word	0x20001c69
    a504:	0001baec 	.word	0x0001baec
    a508:	0001bbe8 	.word	0x0001bbe8
    a50c:	0001b7c8 	.word	0x0001b7c8

0000a510 <ull_adv_init>:
{
    a510:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    a512:	4c06      	ldr	r4, [pc, #24]	; (a52c <ull_adv_init+0x1c>)
    a514:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a518:	f006 febe 	bl	11298 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    a51c:	f104 0034 	add.w	r0, r4, #52	; 0x34
    a520:	f006 feba 	bl	11298 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    a524:	f7ff fd26 	bl	9f74 <init_set.constprop.0>
}
    a528:	2000      	movs	r0, #0
    a52a:	bd10      	pop	{r4, pc}
    a52c:	20001c28 	.word	0x20001c28

0000a530 <ull_adv_reset>:
{
    a530:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
    a532:	4b0b      	ldr	r3, [pc, #44]	; (a560 <ull_adv_reset+0x30>)
    a534:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
    a538:	07d2      	lsls	r2, r2, #31
    a53a:	d50e      	bpl.n	a55a <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
    a53c:	6a1a      	ldr	r2, [r3, #32]
    a53e:	b152      	cbz	r2, a556 <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
    a540:	f892 1020 	ldrb.w	r1, [r2, #32]
    a544:	f041 0102 	orr.w	r1, r1, #2
    a548:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    a54c:	6a1b      	ldr	r3, [r3, #32]
    a54e:	f893 3020 	ldrb.w	r3, [r3, #32]
    a552:	07db      	lsls	r3, r3, #31
    a554:	d401      	bmi.n	a55a <ull_adv_reset+0x2a>
    a556:	f7ff fd79 	bl	a04c <disable.part.0>
}
    a55a:	2000      	movs	r0, #0
    a55c:	bd08      	pop	{r3, pc}
    a55e:	bf00      	nop
    a560:	20001c28 	.word	0x20001c28

0000a564 <ull_adv_reset_finalize>:
{
    a564:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
    a566:	4c0a      	ldr	r4, [pc, #40]	; (a590 <ull_adv_reset_finalize+0x2c>)
    a568:	f104 0528 	add.w	r5, r4, #40	; 0x28
    a56c:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
    a56e:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
    a570:	f006 fea2 	bl	112b8 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
    a574:	4620      	mov	r0, r4
    a576:	f006 fe9f 	bl	112b8 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    a57a:	4628      	mov	r0, r5
    a57c:	f006 fe8c 	bl	11298 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    a580:	4620      	mov	r0, r4
    a582:	f006 fe89 	bl	11298 <lll_adv_data_init>
	init_set(&ll_adv[0]);
    a586:	f7ff fcf5 	bl	9f74 <init_set.constprop.0>
}
    a58a:	2000      	movs	r0, #0
    a58c:	bd38      	pop	{r3, r4, r5, pc}
    a58e:	bf00      	nop
    a590:	20001c28 	.word	0x20001c28

0000a594 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    a594:	4a03      	ldr	r2, [pc, #12]	; (a5a4 <ull_adv_handle_get+0x10>)
    a596:	4b04      	ldr	r3, [pc, #16]	; (a5a8 <ull_adv_handle_get+0x14>)
    a598:	1a80      	subs	r0, r0, r2
    a59a:	fba3 3000 	umull	r3, r0, r3, r0
}
    a59e:	f3c0 108f 	ubfx	r0, r0, #6, #16
    a5a2:	4770      	bx	lr
    a5a4:	20001c28 	.word	0x20001c28
    a5a8:	8d3dcb09 	.word	0x8d3dcb09

0000a5ac <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    a5ac:	4a04      	ldr	r2, [pc, #16]	; (a5c0 <ull_adv_lll_handle_get+0x14>)
    a5ae:	6800      	ldr	r0, [r0, #0]
    a5b0:	4b04      	ldr	r3, [pc, #16]	; (a5c4 <ull_adv_lll_handle_get+0x18>)
    a5b2:	1a80      	subs	r0, r0, r2
    a5b4:	fba3 3000 	umull	r3, r0, r3, r0
}
    a5b8:	f3c0 108f 	ubfx	r0, r0, #6, #16
    a5bc:	4770      	bx	lr
    a5be:	bf00      	nop
    a5c0:	20001c28 	.word	0x20001c28
    a5c4:	8d3dcb09 	.word	0x8d3dcb09

0000a5c8 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    a5c8:	b938      	cbnz	r0, a5da <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    a5ca:	4805      	ldr	r0, [pc, #20]	; (a5e0 <ull_adv_is_enabled_get+0x18>)
    a5cc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
    a5d0:	f013 0f01 	tst.w	r3, #1
    a5d4:	bf08      	it	eq
    a5d6:	2000      	moveq	r0, #0
    a5d8:	4770      	bx	lr
		return NULL;
    a5da:	2000      	movs	r0, #0
}
    a5dc:	4770      	bx	lr
    a5de:	bf00      	nop
    a5e0:	20001c28 	.word	0x20001c28

0000a5e4 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    a5e4:	b928      	cbnz	r0, a5f2 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    a5e6:	4b04      	ldr	r3, [pc, #16]	; (a5f8 <ull_adv_is_enabled+0x14>)
    a5e8:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
    a5ec:	f000 0001 	and.w	r0, r0, #1
    a5f0:	4770      	bx	lr
    a5f2:	2000      	movs	r0, #0
}
    a5f4:	4770      	bx	lr
    a5f6:	bf00      	nop
    a5f8:	20001c28 	.word	0x20001c28

0000a5fc <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    a5fc:	b950      	cbnz	r0, a614 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
    a5fe:	4b06      	ldr	r3, [pc, #24]	; (a618 <ull_adv_filter_pol_get+0x1c>)
    a600:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
    a604:	f010 0001 	ands.w	r0, r0, #1
    a608:	d005      	beq.n	a616 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
    a60a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
    a60e:	f000 0003 	and.w	r0, r0, #3
    a612:	4770      	bx	lr
		return 0;
    a614:	2000      	movs	r0, #0
}
    a616:	4770      	bx	lr
    a618:	20001c28 	.word	0x20001c28

0000a61c <ull_adv_pdu_update_addrs>:
{
    a61c:	b570      	push	{r4, r5, r6, lr}
    a61e:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
    a620:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
    a624:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
    a626:	f005 fd47 	bl	100b8 <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
    a62a:	b310      	cbz	r0, a672 <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
    a62c:	7823      	ldrb	r3, [r4, #0]
    a62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a632:	4601      	mov	r1, r0
    a634:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
    a636:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    a638:	2206      	movs	r2, #6
    a63a:	4630      	mov	r0, r6
    a63c:	f00d fa5e 	bl	17afc <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    a640:	7823      	ldrb	r3, [r4, #0]
    a642:	f003 030f 	and.w	r3, r3, #15
    a646:	2b01      	cmp	r3, #1
    a648:	d001      	beq.n	a64e <ull_adv_pdu_update_addrs+0x32>
}
    a64a:	4630      	mov	r0, r6
    a64c:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
    a64e:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
    a652:	f005 fd5f 	bl	10114 <ull_filter_tgta_get>
	if (rx_addr) {
    a656:	4601      	mov	r1, r0
    a658:	2800      	cmp	r0, #0
    a65a:	d0f6      	beq.n	a64a <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
    a65c:	7823      	ldrb	r3, [r4, #0]
    a65e:	4620      	mov	r0, r4
    a660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a664:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
    a668:	2206      	movs	r2, #6
    a66a:	f00d fa47 	bl	17afc <memcpy>
}
    a66e:	4630      	mov	r0, r6
    a670:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
    a672:	7820      	ldrb	r0, [r4, #0]
    a674:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a678:	f7fc fe46 	bl	7308 <ll_addr_get>
    a67c:	4601      	mov	r1, r0
	if (rpa) {
    a67e:	e7da      	b.n	a636 <ull_adv_pdu_update_addrs+0x1a>

0000a680 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
    a680:	291f      	cmp	r1, #31
    a682:	d849      	bhi.n	a718 <ull_adv_data_set+0x98>
{
    a684:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    a686:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    a68a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    a68e:	b083      	sub	sp, #12
    a690:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    a692:	7833      	ldrb	r3, [r6, #0]
    a694:	f003 030f 	and.w	r3, r3, #15
    a698:	2b01      	cmp	r3, #1
    a69a:	460d      	mov	r5, r1
    a69c:	4604      	mov	r4, r0
    a69e:	4617      	mov	r7, r2
    a6a0:	d03c      	beq.n	a71c <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    a6a2:	f10d 0107 	add.w	r1, sp, #7
    a6a6:	3028      	adds	r0, #40	; 0x28
    a6a8:	f006 fe86 	bl	113b8 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
    a6ac:	4631      	mov	r1, r6
    a6ae:	4606      	mov	r6, r0
    a6b0:	f811 2b02 	ldrb.w	r2, [r1], #2
    a6b4:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
    a6b8:	f3c2 0303 	ubfx	r3, r2, #0, #4
    a6bc:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
    a6c0:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
    a6c4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
    a6c8:	f002 0280 	and.w	r2, r2, #128	; 0x80
    a6cc:	4630      	mov	r0, r6
    a6ce:	4313      	orrs	r3, r2
    a6d0:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    a6d4:	2206      	movs	r2, #6
    a6d6:	f00d fa11 	bl	17afc <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    a6da:	462a      	mov	r2, r5
    a6dc:	4639      	mov	r1, r7
    a6de:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
    a6e2:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    a6e4:	f00d fa0a 	bl	17afc <memcpy>
	pdu->len = BDADDR_SIZE + len;
    a6e8:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
    a6ea:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    a6ee:	07db      	lsls	r3, r3, #31
    a6f0:	d406      	bmi.n	a700 <ull_adv_data_set+0x80>
	pdu->last = idx;
    a6f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6f6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
    a6fa:	2000      	movs	r0, #0
}
    a6fc:	b003      	add	sp, #12
    a6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    a700:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    a704:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
    a708:	4631      	mov	r1, r6
    a70a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a70c:	4620      	mov	r0, r4
    a70e:	f7f6 f8c3 	bl	898 <ull_adv_time_update>
		if (err) {
    a712:	2800      	cmp	r0, #0
    a714:	d0ed      	beq.n	a6f2 <ull_adv_data_set+0x72>
    a716:	e7f1      	b.n	a6fc <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
    a718:	2012      	movs	r0, #18
}
    a71a:	4770      	bx	lr
		adv->ad_data_backup.len = len;
    a71c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
    a720:	460a      	mov	r2, r1
    a722:	3041      	adds	r0, #65	; 0x41
    a724:	4639      	mov	r1, r7
    a726:	f00d f9e9 	bl	17afc <memcpy>
		return 0;
    a72a:	2000      	movs	r0, #0
}
    a72c:	b003      	add	sp, #12
    a72e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a730 <ll_adv_data_set>:
{
    a730:	4603      	mov	r3, r0
    a732:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    a734:	4801      	ldr	r0, [pc, #4]	; (a73c <ll_adv_data_set+0xc>)
    a736:	4619      	mov	r1, r3
    a738:	f7ff bfa2 	b.w	a680 <ull_adv_data_set>
    a73c:	20001c28 	.word	0x20001c28

0000a740 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
    a740:	b5f0      	push	{r4, r5, r6, r7, lr}
    a742:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    a746:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    a74a:	b083      	sub	sp, #12
    a74c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    a74e:	460e      	mov	r6, r1
    a750:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    a752:	f10d 0107 	add.w	r1, sp, #7
    a756:	3034      	adds	r0, #52	; 0x34
    a758:	4617      	mov	r7, r2
    a75a:	f006 fe2d 	bl	113b8 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
    a75e:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    a760:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
    a762:	f811 3b02 	ldrb.w	r3, [r1], #2
    a766:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a76a:	019b      	lsls	r3, r3, #6
    a76c:	f043 0304 	orr.w	r3, r3, #4
    a770:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
    a772:	1db3      	adds	r3, r6, #6
    a774:	7043      	strb	r3, [r0, #1]
    a776:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    a778:	3002      	adds	r0, #2
    a77a:	f00d f9bf 	bl	17afc <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    a77e:	4632      	mov	r2, r6
    a780:	4639      	mov	r1, r7
    a782:	f105 0008 	add.w	r0, r5, #8
    a786:	f00d f9b9 	bl	17afc <memcpy>
	if (adv->is_enabled) {
    a78a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    a78e:	07db      	lsls	r3, r3, #31
    a790:	d50a      	bpl.n	a7a8 <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    a792:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    a796:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    a79a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
    a79c:	780b      	ldrb	r3, [r1, #0]
    a79e:	f013 030f 	ands.w	r3, r3, #15
    a7a2:	d008      	beq.n	a7b6 <ull_scan_rsp_set.part.0+0x76>
    a7a4:	2b06      	cmp	r3, #6
    a7a6:	d006      	beq.n	a7b6 <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
    a7a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
    a7b0:	2000      	movs	r0, #0
}
    a7b2:	b003      	add	sp, #12
    a7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
    a7b6:	462a      	mov	r2, r5
    a7b8:	4620      	mov	r0, r4
    a7ba:	f7f6 f86d 	bl	898 <ull_adv_time_update>
			if (err) {
    a7be:	2800      	cmp	r0, #0
    a7c0:	d0f2      	beq.n	a7a8 <ull_scan_rsp_set.part.0+0x68>
    a7c2:	e7f6      	b.n	a7b2 <ull_scan_rsp_set.part.0+0x72>

0000a7c4 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
    a7c4:	281f      	cmp	r0, #31
{
    a7c6:	4603      	mov	r3, r0
    a7c8:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
    a7ca:	d803      	bhi.n	a7d4 <ll_adv_scan_rsp_set+0x10>
    a7cc:	4802      	ldr	r0, [pc, #8]	; (a7d8 <ll_adv_scan_rsp_set+0x14>)
    a7ce:	4619      	mov	r1, r3
    a7d0:	f7ff bfb6 	b.w	a740 <ull_scan_rsp_set.part.0>
}
    a7d4:	2012      	movs	r0, #18
    a7d6:	4770      	bx	lr
    a7d8:	20001c28 	.word	0x20001c28

0000a7dc <init_reset>:
{
    a7dc:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    a7de:	4b15      	ldr	r3, [pc, #84]	; (a834 <init_reset+0x58>)
    a7e0:	4815      	ldr	r0, [pc, #84]	; (a838 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    a7e2:	4c16      	ldr	r4, [pc, #88]	; (a83c <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
    a7e4:	2201      	movs	r2, #1
    a7e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    a7ea:	f7fb fa63 	bl	5cb4 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
    a7ee:	4b14      	ldr	r3, [pc, #80]	; (a840 <init_reset+0x64>)
    a7f0:	2203      	movs	r2, #3
    a7f2:	1d18      	adds	r0, r3, #4
    a7f4:	2124      	movs	r1, #36	; 0x24
    a7f6:	f7fb fa5d 	bl	5cb4 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    a7fa:	4b12      	ldr	r3, [pc, #72]	; (a844 <init_reset+0x68>)
    a7fc:	2204      	movs	r2, #4
    a7fe:	1898      	adds	r0, r3, r2
    a800:	212c      	movs	r1, #44	; 0x2c
    a802:	f7fb fa57 	bl	5cb4 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    a806:	4b10      	ldr	r3, [pc, #64]	; (a848 <init_reset+0x6c>)
    a808:	2207      	movs	r2, #7
    a80a:	1d18      	adds	r0, r3, #4
    a80c:	2108      	movs	r1, #8
    a80e:	f7fb fa51 	bl	5cb4 <mem_init>
	default_phy_tx |= PHY_2M;
    a812:	490e      	ldr	r1, [pc, #56]	; (a84c <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
    a814:	4a0e      	ldr	r2, [pc, #56]	; (a850 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    a816:	480f      	ldr	r0, [pc, #60]	; (a854 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
    a818:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    a81a:	f04f 0c1b 	mov.w	ip, #27
    a81e:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
    a822:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    a824:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
    a828:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    a82a:	f8a0 c000 	strh.w	ip, [r0]
}
    a82e:	2000      	movs	r0, #0
    a830:	bd10      	pop	{r4, pc}
    a832:	bf00      	nop
    a834:	20001cb8 	.word	0x20001cb8
    a838:	20000ed0 	.word	0x20000ed0
    a83c:	20002786 	.word	0x20002786
    a840:	20001ce0 	.word	0x20001ce0
    a844:	20001d50 	.word	0x20001d50
    a848:	20001e04 	.word	0x20001e04
    a84c:	2000278f 	.word	0x2000278f
    a850:	2000278e 	.word	0x2000278e
    a854:	20002788 	.word	0x20002788

0000a858 <ctrl_tx_pause_enqueue>:
{
    a858:	b538      	push	{r3, r4, r5, lr}
    a85a:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
    a85c:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
{
    a860:	460d      	mov	r5, r1
	if (
    a862:	b11b      	cbz	r3, a86c <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    a864:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    a868:	0789      	lsls	r1, r1, #30
    a86a:	d50c      	bpl.n	a886 <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
    a86c:	b340      	cbz	r0, a8c0 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
    a86e:	2a00      	cmp	r2, #0
    a870:	d130      	bne.n	a8d4 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
    a872:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    a876:	681a      	ldr	r2, [r3, #0]
    a878:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    a87a:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    a87c:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    a87e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    a882:	b1d3      	cbz	r3, a8ba <ctrl_tx_pause_enqueue+0x62>
}
    a884:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    a886:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    a88a:	07c9      	lsls	r1, r1, #31
    a88c:	d4ee      	bmi.n	a86c <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    a88e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    a892:	428b      	cmp	r3, r1
    a894:	d02c      	beq.n	a8f0 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
    a896:	2800      	cmp	r0, #0
    a898:	d036      	beq.n	a908 <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
    a89a:	2a00      	cmp	r2, #0
    a89c:	d0e9      	beq.n	a872 <ctrl_tx_pause_enqueue+0x1a>
    a89e:	4a22      	ldr	r2, [pc, #136]	; (a928 <ctrl_tx_pause_enqueue+0xd0>)
    a8a0:	4922      	ldr	r1, [pc, #136]	; (a92c <ctrl_tx_pause_enqueue+0xd4>)
    a8a2:	4823      	ldr	r0, [pc, #140]	; (a930 <ctrl_tx_pause_enqueue+0xd8>)
    a8a4:	f640 235f 	movw	r3, #2655	; 0xa5f
    a8a8:	f00c fb61 	bl	16f6e <printk>
    a8ac:	4040      	eors	r0, r0
    a8ae:	f380 8811 	msr	BASEPRI, r0
    a8b2:	f04f 0003 	mov.w	r0, #3
    a8b6:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
    a8b8:	e7db      	b.n	a872 <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
    a8ba:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
    a8be:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    a8c0:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    a8c2:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
    a8c6:	2a00      	cmp	r2, #0
    a8c8:	d1db      	bne.n	a882 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
    a8ca:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
    a8ce:	2b00      	cmp	r3, #0
    a8d0:	d1d8      	bne.n	a884 <ctrl_tx_pause_enqueue+0x2c>
    a8d2:	e7f2      	b.n	a8ba <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
    a8d4:	4a14      	ldr	r2, [pc, #80]	; (a928 <ctrl_tx_pause_enqueue+0xd0>)
    a8d6:	4915      	ldr	r1, [pc, #84]	; (a92c <ctrl_tx_pause_enqueue+0xd4>)
    a8d8:	4815      	ldr	r0, [pc, #84]	; (a930 <ctrl_tx_pause_enqueue+0xd8>)
    a8da:	f640 2371 	movw	r3, #2673	; 0xa71
    a8de:	f00c fb46 	bl	16f6e <printk>
    a8e2:	4040      	eors	r0, r0
    a8e4:	f380 8811 	msr	BASEPRI, r0
    a8e8:	f04f 0003 	mov.w	r0, #3
    a8ec:	df02      	svc	2
    a8ee:	e7c0      	b.n	a872 <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
    a8f0:	6819      	ldr	r1, [r3, #0]
    a8f2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    a8f6:	2800      	cmp	r0, #0
    a8f8:	d1cf      	bne.n	a89a <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
    a8fa:	6819      	ldr	r1, [r3, #0]
    a8fc:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    a8fe:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    a900:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
    a902:	2a00      	cmp	r2, #0
    a904:	d0e1      	beq.n	a8ca <ctrl_tx_pause_enqueue+0x72>
    a906:	e7bc      	b.n	a882 <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    a908:	7919      	ldrb	r1, [r3, #4]
    a90a:	f001 0103 	and.w	r1, r1, #3
    a90e:	2903      	cmp	r1, #3
    a910:	d004      	beq.n	a91c <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    a912:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
    a916:	2a00      	cmp	r2, #0
    a918:	d0ab      	beq.n	a872 <ctrl_tx_pause_enqueue+0x1a>
    a91a:	e7c0      	b.n	a89e <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
    a91c:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    a91e:	2903      	cmp	r1, #3
    a920:	d0eb      	beq.n	a8fa <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    a922:	290a      	cmp	r1, #10
    a924:	d1f5      	bne.n	a912 <ctrl_tx_pause_enqueue+0xba>
    a926:	e7e8      	b.n	a8fa <ctrl_tx_pause_enqueue+0xa2>
    a928:	0001bc28 	.word	0x0001bc28
    a92c:	0001bc68 	.word	0x0001bc68
    a930:	0001b7c8 	.word	0x0001b7c8

0000a934 <tx_lll_flush>:
{
    a934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
    a938:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    a93c:	4934      	ldr	r1, [pc, #208]	; (aa10 <tx_lll_flush+0xdc>)
{
    a93e:	b083      	sub	sp, #12
    a940:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    a942:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    a946:	4640      	mov	r0, r8
    a948:	f7fb fa1a 	bl	5d80 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    a94c:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
    a950:	4629      	mov	r1, r5
    a952:	f007 f93b 	bl	11bcc <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    a956:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    a958:	aa01      	add	r2, sp, #4
    a95a:	4631      	mov	r1, r6
    a95c:	f7fb fa50 	bl	5e00 <memq_dequeue>
	while (link) {
    a960:	b328      	cbz	r0, a9ae <tx_lll_flush+0x7a>
    a962:	4c2c      	ldr	r4, [pc, #176]	; (aa14 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
    a964:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    a968:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    a96c:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
    a96e:	f894 c001 	ldrb.w	ip, [r4, #1]
    a972:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
    a974:	1c53      	adds	r3, r2, #1
    a976:	b2db      	uxtb	r3, r3
		last = 0U;
    a978:	459c      	cmp	ip, r3
    a97a:	bf08      	it	eq
    a97c:	2300      	moveq	r3, #0
	if (last == first) {
    a97e:	4299      	cmp	r1, r3
    a980:	f894 c000 	ldrb.w	ip, [r4]
    a984:	d033      	beq.n	a9ee <tx_lll_flush+0xba>
		lll_tx->node = tx;
    a986:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    a988:	fb12 f20c 	smulbb	r2, r2, ip
    a98c:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
    a990:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    a994:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
    a996:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    a99a:	6002      	str	r2, [r0, #0]
		tx->next = link;
    a99c:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    a99e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
    a9a0:	70e3      	strb	r3, [r4, #3]
    a9a2:	aa01      	add	r2, sp, #4
    a9a4:	4631      	mov	r1, r6
    a9a6:	f7fb fa2b 	bl	5e00 <memq_dequeue>
	while (link) {
    a9aa:	2800      	cmp	r0, #0
    a9ac:	d1de      	bne.n	a96c <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    a9ae:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
    a9b2:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
    a9b6:	b150      	cbz	r0, a9ce <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
    a9b8:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    a9ba:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    a9bc:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
    a9c0:	f7fe febe 	bl	9740 <ull_rx_put>
	ull_rx_sched();
    a9c4:	f7fe fecc 	bl	9760 <ull_rx_sched>
}
    a9c8:	b003      	add	sp, #12
    a9ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    a9ce:	4a12      	ldr	r2, [pc, #72]	; (aa18 <tx_lll_flush+0xe4>)
    a9d0:	4912      	ldr	r1, [pc, #72]	; (aa1c <tx_lll_flush+0xe8>)
    a9d2:	4813      	ldr	r0, [pc, #76]	; (aa20 <tx_lll_flush+0xec>)
    a9d4:	f640 13cb 	movw	r3, #2507	; 0x9cb
    a9d8:	f00c fac9 	bl	16f6e <printk>
    a9dc:	4040      	eors	r0, r0
    a9de:	f380 8811 	msr	BASEPRI, r0
    a9e2:	f04f 0003 	mov.w	r0, #3
    a9e6:	df02      	svc	2
	link = rx->hdr.link;
    a9e8:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
    a9ec:	e7e4      	b.n	a9b8 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
    a9ee:	4a0a      	ldr	r2, [pc, #40]	; (aa18 <tx_lll_flush+0xe4>)
    a9f0:	490c      	ldr	r1, [pc, #48]	; (aa24 <tx_lll_flush+0xf0>)
    a9f2:	480b      	ldr	r0, [pc, #44]	; (aa20 <tx_lll_flush+0xec>)
    a9f4:	f640 13b7 	movw	r3, #2487	; 0x9b7
    a9f8:	f00c fab9 	bl	16f6e <printk>
    a9fc:	4040      	eors	r0, r0
    a9fe:	f380 8811 	msr	BASEPRI, r0
    aa02:	f04f 0003 	mov.w	r0, #3
    aa06:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
    aa08:	2300      	movs	r3, #0
    aa0a:	801b      	strh	r3, [r3, #0]
    aa0c:	deff      	udf	#255	; 0xff
    aa0e:	bf00      	nop
    aa10:	20000ed0 	.word	0x20000ed0
    aa14:	20000518 	.word	0x20000518
    aa18:	0001bc28 	.word	0x0001bc28
    aa1c:	0001bc78 	.word	0x0001bc78
    aa20:	0001b7c8 	.word	0x0001b7c8
    aa24:	0001bc70 	.word	0x0001bc70

0000aa28 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
    aa28:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
    aa2c:	f012 0202 	ands.w	r2, r2, #2
    aa30:	d00a      	beq.n	aa48 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
    aa32:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
    aa36:	b1d3      	cbz	r3, aa6e <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
    aa38:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
    aa3c:	681a      	ldr	r2, [r3, #0]
    aa3e:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
    aa40:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
    aa42:	680b      	ldr	r3, [r1, #0]
    aa44:	b1d3      	cbz	r3, aa7c <ctrl_tx_sec_enqueue+0x54>
    aa46:	4770      	bx	lr
		if (conn->tx_head) {
    aa48:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    aa4c:	b1cb      	cbz	r3, aa82 <ctrl_tx_sec_enqueue+0x5a>
{
    aa4e:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
    aa50:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
    aa54:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
    aa58:	45e6      	cmp	lr, ip
    aa5a:	d004      	beq.n	aa66 <ctrl_tx_sec_enqueue+0x3e>
    aa5c:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
    aa60:	f1bc 0f03 	cmp.w	ip, #3
    aa64:	d010      	beq.n	aa88 <ctrl_tx_sec_enqueue+0x60>
}
    aa66:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
    aa6a:	f7ff bef5 	b.w	a858 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
    aa6e:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    aa72:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
    aa74:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
    aa78:	2b00      	cmp	r3, #0
    aa7a:	d1e4      	bne.n	aa46 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
    aa7c:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
    aa80:	4770      	bx	lr
	bool pause = false;
    aa82:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
    aa84:	f7ff bee8 	b.w	a858 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    aa88:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
    aa8c:	f00c 0c03 	and.w	ip, ip, #3
    aa90:	f1bc 0f03 	cmp.w	ip, #3
    aa94:	d1e7      	bne.n	aa66 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
    aa96:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    aa98:	2a03      	cmp	r2, #3
    aa9a:	d005      	beq.n	aaa8 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    aa9c:	f1a2 020a 	sub.w	r2, r2, #10
    aaa0:	fab2 f282 	clz	r2, r2
    aaa4:	0952      	lsrs	r2, r2, #5
    aaa6:	e7de      	b.n	aa66 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
    aaa8:	2201      	movs	r2, #1
    aaaa:	e7dc      	b.n	aa66 <ctrl_tx_sec_enqueue+0x3e>

0000aaac <ticker_stop_op_cb>:
{
    aaac:	b510      	push	{r4, lr}
    aaae:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    aab0:	b9b0      	cbnz	r0, aae0 <ticker_stop_op_cb+0x34>
	mfy.param = param;
    aab2:	4b12      	ldr	r3, [pc, #72]	; (aafc <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    aab4:	2200      	movs	r2, #0
    aab6:	2101      	movs	r1, #1
    aab8:	2002      	movs	r0, #2
	mfy.param = param;
    aaba:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    aabc:	f7fb fa02 	bl	5ec4 <mayfly_enqueue>
	LL_ASSERT(!ret);
    aac0:	b900      	cbnz	r0, aac4 <ticker_stop_op_cb+0x18>
}
    aac2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    aac4:	4a0e      	ldr	r2, [pc, #56]	; (ab00 <ticker_stop_op_cb+0x54>)
    aac6:	490f      	ldr	r1, [pc, #60]	; (ab04 <ticker_stop_op_cb+0x58>)
    aac8:	480f      	ldr	r0, [pc, #60]	; (ab08 <ticker_stop_op_cb+0x5c>)
    aaca:	f640 1371 	movw	r3, #2417	; 0x971
    aace:	f00c fa4e 	bl	16f6e <printk>
    aad2:	4040      	eors	r0, r0
    aad4:	f380 8811 	msr	BASEPRI, r0
    aad8:	f04f 0003 	mov.w	r0, #3
    aadc:	df02      	svc	2
}
    aade:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    aae0:	4a07      	ldr	r2, [pc, #28]	; (ab00 <ticker_stop_op_cb+0x54>)
    aae2:	490a      	ldr	r1, [pc, #40]	; (ab0c <ticker_stop_op_cb+0x60>)
    aae4:	4808      	ldr	r0, [pc, #32]	; (ab08 <ticker_stop_op_cb+0x5c>)
    aae6:	f640 136b 	movw	r3, #2411	; 0x96b
    aaea:	f00c fa40 	bl	16f6e <printk>
    aaee:	4040      	eors	r0, r0
    aaf0:	f380 8811 	msr	BASEPRI, r0
    aaf4:	f04f 0003 	mov.w	r0, #3
    aaf8:	df02      	svc	2
    aafa:	e7da      	b.n	aab2 <ticker_stop_op_cb+0x6>
    aafc:	200005a0 	.word	0x200005a0
    ab00:	0001bc28 	.word	0x0001bc28
    ab04:	0001ba64 	.word	0x0001ba64
    ab08:	0001b7c8 	.word	0x0001b7c8
    ab0c:	0001bc88 	.word	0x0001bc88

0000ab10 <disabled_cb>:
{
    ab10:	b508      	push	{r3, lr}
	mfy.param = param;
    ab12:	4b0b      	ldr	r3, [pc, #44]	; (ab40 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ab14:	2200      	movs	r2, #0
	mfy.param = param;
    ab16:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ab18:	4611      	mov	r1, r2
    ab1a:	2001      	movs	r0, #1
    ab1c:	f7fb f9d2 	bl	5ec4 <mayfly_enqueue>
	LL_ASSERT(!ret);
    ab20:	b900      	cbnz	r0, ab24 <disabled_cb+0x14>
}
    ab22:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    ab24:	4a07      	ldr	r2, [pc, #28]	; (ab44 <disabled_cb+0x34>)
    ab26:	4908      	ldr	r1, [pc, #32]	; (ab48 <disabled_cb+0x38>)
    ab28:	4808      	ldr	r0, [pc, #32]	; (ab4c <disabled_cb+0x3c>)
    ab2a:	f640 139d 	movw	r3, #2461	; 0x99d
    ab2e:	f00c fa1e 	bl	16f6e <printk>
    ab32:	4040      	eors	r0, r0
    ab34:	f380 8811 	msr	BASEPRI, r0
    ab38:	f04f 0003 	mov.w	r0, #3
    ab3c:	df02      	svc	2
}
    ab3e:	bd08      	pop	{r3, pc}
    ab40:	20000580 	.word	0x20000580
    ab44:	0001bc28 	.word	0x0001bc28
    ab48:	0001ba64 	.word	0x0001ba64
    ab4c:	0001b7c8 	.word	0x0001b7c8

0000ab50 <conn_disable>:
{
    ab50:	b538      	push	{r3, r4, r5, lr}
    ab52:	4604      	mov	r4, r0
	return hdr->ref;
    ab54:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    ab58:	b353      	cbz	r3, abb0 <conn_disable+0x60>
		mfy.param = &conn->lll;
    ab5a:	4d17      	ldr	r5, [pc, #92]	; (abb8 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    ab5c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
    ab5e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    ab60:	b16b      	cbz	r3, ab7e <conn_disable+0x2e>
    ab62:	4a16      	ldr	r2, [pc, #88]	; (abbc <conn_disable+0x6c>)
    ab64:	4916      	ldr	r1, [pc, #88]	; (abc0 <conn_disable+0x70>)
    ab66:	4817      	ldr	r0, [pc, #92]	; (abc4 <conn_disable+0x74>)
    ab68:	f640 1386 	movw	r3, #2438	; 0x986
    ab6c:	f00c f9ff 	bl	16f6e <printk>
    ab70:	4040      	eors	r0, r0
    ab72:	f380 8811 	msr	BASEPRI, r0
    ab76:	f04f 0003 	mov.w	r0, #3
    ab7a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    ab7c:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    ab7e:	4912      	ldr	r1, [pc, #72]	; (abc8 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ab80:	4b0d      	ldr	r3, [pc, #52]	; (abb8 <conn_disable+0x68>)
    ab82:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    ab84:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ab88:	4611      	mov	r1, r2
    ab8a:	2001      	movs	r0, #1
    ab8c:	f7fb f99a 	bl	5ec4 <mayfly_enqueue>
		LL_ASSERT(!ret);
    ab90:	b900      	cbnz	r0, ab94 <conn_disable+0x44>
}
    ab92:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    ab94:	4a09      	ldr	r2, [pc, #36]	; (abbc <conn_disable+0x6c>)
    ab96:	490d      	ldr	r1, [pc, #52]	; (abcc <conn_disable+0x7c>)
    ab98:	480a      	ldr	r0, [pc, #40]	; (abc4 <conn_disable+0x74>)
    ab9a:	f640 138d 	movw	r3, #2445	; 0x98d
    ab9e:	f00c f9e6 	bl	16f6e <printk>
    aba2:	4040      	eors	r0, r0
    aba4:	f380 8811 	msr	BASEPRI, r0
    aba8:	f04f 0003 	mov.w	r0, #3
    abac:	df02      	svc	2
}
    abae:	bd38      	pop	{r3, r4, r5, pc}
    abb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
    abb4:	f7ff bfac 	b.w	ab10 <disabled_cb>
    abb8:	20000590 	.word	0x20000590
    abbc:	0001bc28 	.word	0x0001bc28
    abc0:	0001bb80 	.word	0x0001bb80
    abc4:	0001b7c8 	.word	0x0001b7c8
    abc8:	0000ab11 	.word	0x0000ab11
    abcc:	0001ba64 	.word	0x0001ba64

0000abd0 <conn_setup_adv_scan_disabled_cb>:
{
    abd0:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    abd2:	6883      	ldr	r3, [r0, #8]
    abd4:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
    abd6:	7f53      	ldrb	r3, [r2, #29]
    abd8:	09db      	lsrs	r3, r3, #7
    abda:	d10d      	bne.n	abf8 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
    abdc:	4a09      	ldr	r2, [pc, #36]	; (ac04 <conn_setup_adv_scan_disabled_cb+0x34>)
    abde:	490a      	ldr	r1, [pc, #40]	; (ac08 <conn_setup_adv_scan_disabled_cb+0x38>)
    abe0:	480a      	ldr	r0, [pc, #40]	; (ac0c <conn_setup_adv_scan_disabled_cb+0x3c>)
    abe2:	f640 03c6 	movw	r3, #2246	; 0x8c6
    abe6:	f00c f9c2 	bl	16f6e <printk>
    abea:	4040      	eors	r0, r0
    abec:	f380 8811 	msr	BASEPRI, r0
    abf0:	f04f 0003 	mov.w	r0, #3
    abf4:	df02      	svc	2
}
    abf6:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
    abf8:	4601      	mov	r1, r0
}
    abfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
    abfe:	3108      	adds	r1, #8
    ac00:	f7f6 b952 	b.w	ea8 <ull_periph_setup>
    ac04:	0001bc28 	.word	0x0001bc28
    ac08:	0001b828 	.word	0x0001b828
    ac0c:	0001b7c8 	.word	0x0001b7c8

0000ac10 <ticker_start_conn_op_cb>:
{
    ac10:	b510      	push	{r4, lr}
    ac12:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ac14:	b990      	cbnz	r0, ac3c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    ac16:	4620      	mov	r0, r4
    ac18:	f7fe fccc 	bl	95b4 <ull_update_unmark>
	LL_ASSERT(p == param);
    ac1c:	4284      	cmp	r4, r0
    ac1e:	d00c      	beq.n	ac3a <ticker_start_conn_op_cb+0x2a>
    ac20:	4a0d      	ldr	r2, [pc, #52]	; (ac58 <ticker_start_conn_op_cb+0x48>)
    ac22:	490e      	ldr	r1, [pc, #56]	; (ac5c <ticker_start_conn_op_cb+0x4c>)
    ac24:	480e      	ldr	r0, [pc, #56]	; (ac60 <ticker_start_conn_op_cb+0x50>)
    ac26:	f640 03a8 	movw	r3, #2216	; 0x8a8
    ac2a:	f00c f9a0 	bl	16f6e <printk>
    ac2e:	4040      	eors	r0, r0
    ac30:	f380 8811 	msr	BASEPRI, r0
    ac34:	f04f 0003 	mov.w	r0, #3
    ac38:	df02      	svc	2
}
    ac3a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ac3c:	4a06      	ldr	r2, [pc, #24]	; (ac58 <ticker_start_conn_op_cb+0x48>)
    ac3e:	4909      	ldr	r1, [pc, #36]	; (ac64 <ticker_start_conn_op_cb+0x54>)
    ac40:	4807      	ldr	r0, [pc, #28]	; (ac60 <ticker_start_conn_op_cb+0x50>)
    ac42:	f640 03a5 	movw	r3, #2213	; 0x8a5
    ac46:	f00c f992 	bl	16f6e <printk>
    ac4a:	4040      	eors	r0, r0
    ac4c:	f380 8811 	msr	BASEPRI, r0
    ac50:	f04f 0003 	mov.w	r0, #3
    ac54:	df02      	svc	2
    ac56:	e7de      	b.n	ac16 <ticker_start_conn_op_cb+0x6>
    ac58:	0001bc28 	.word	0x0001bc28
    ac5c:	0001bc94 	.word	0x0001bc94
    ac60:	0001b7c8 	.word	0x0001b7c8
    ac64:	0001bc88 	.word	0x0001bc88

0000ac68 <ticker_stop_conn_op_cb>:
{
    ac68:	b510      	push	{r4, lr}
    ac6a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ac6c:	b990      	cbnz	r0, ac94 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    ac6e:	4620      	mov	r0, r4
    ac70:	f7fe fc96 	bl	95a0 <ull_update_mark>
	LL_ASSERT(p == param);
    ac74:	4284      	cmp	r4, r0
    ac76:	d00c      	beq.n	ac92 <ticker_stop_conn_op_cb+0x2a>
    ac78:	4a0d      	ldr	r2, [pc, #52]	; (acb0 <ticker_stop_conn_op_cb+0x48>)
    ac7a:	490e      	ldr	r1, [pc, #56]	; (acb4 <ticker_stop_conn_op_cb+0x4c>)
    ac7c:	480e      	ldr	r0, [pc, #56]	; (acb8 <ticker_stop_conn_op_cb+0x50>)
    ac7e:	f640 039e 	movw	r3, #2206	; 0x89e
    ac82:	f00c f974 	bl	16f6e <printk>
    ac86:	4040      	eors	r0, r0
    ac88:	f380 8811 	msr	BASEPRI, r0
    ac8c:	f04f 0003 	mov.w	r0, #3
    ac90:	df02      	svc	2
}
    ac92:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ac94:	4a06      	ldr	r2, [pc, #24]	; (acb0 <ticker_stop_conn_op_cb+0x48>)
    ac96:	4909      	ldr	r1, [pc, #36]	; (acbc <ticker_stop_conn_op_cb+0x54>)
    ac98:	4807      	ldr	r0, [pc, #28]	; (acb8 <ticker_stop_conn_op_cb+0x50>)
    ac9a:	f640 039b 	movw	r3, #2203	; 0x89b
    ac9e:	f00c f966 	bl	16f6e <printk>
    aca2:	4040      	eors	r0, r0
    aca4:	f380 8811 	msr	BASEPRI, r0
    aca8:	f04f 0003 	mov.w	r0, #3
    acac:	df02      	svc	2
    acae:	e7de      	b.n	ac6e <ticker_stop_conn_op_cb+0x6>
    acb0:	0001bc28 	.word	0x0001bc28
    acb4:	0001bc94 	.word	0x0001bc94
    acb8:	0001b7c8 	.word	0x0001b7c8
    acbc:	0001bc88 	.word	0x0001bc88

0000acc0 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    acc0:	b900      	cbnz	r0, acc4 <ticker_update_conn_op_cb+0x4>
    acc2:	4770      	bx	lr
{
    acc4:	b510      	push	{r4, lr}
    acc6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    acc8:	f7fe fc80 	bl	95cc <ull_update_mark_get>
    accc:	4284      	cmp	r4, r0
    acce:	d010      	beq.n	acf2 <ticker_update_conn_op_cb+0x32>
    acd0:	f7fe fc60 	bl	9594 <ull_disable_mark_get>
    acd4:	4284      	cmp	r4, r0
    acd6:	d00c      	beq.n	acf2 <ticker_update_conn_op_cb+0x32>
    acd8:	4a06      	ldr	r2, [pc, #24]	; (acf4 <ticker_update_conn_op_cb+0x34>)
    acda:	4907      	ldr	r1, [pc, #28]	; (acf8 <ticker_update_conn_op_cb+0x38>)
    acdc:	4807      	ldr	r0, [pc, #28]	; (acfc <ticker_update_conn_op_cb+0x3c>)
    acde:	f640 0392 	movw	r3, #2194	; 0x892
    ace2:	f00c f944 	bl	16f6e <printk>
    ace6:	4040      	eors	r0, r0
    ace8:	f380 8811 	msr	BASEPRI, r0
    acec:	f04f 0003 	mov.w	r0, #3
    acf0:	df02      	svc	2
}
    acf2:	bd10      	pop	{r4, pc}
    acf4:	0001bc28 	.word	0x0001bc28
    acf8:	0001bca0 	.word	0x0001bca0
    acfc:	0001b7c8 	.word	0x0001b7c8

0000ad00 <tx_ull_dequeue>:
{
    ad00:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    ad02:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
{
    ad06:	4603      	mov	r3, r0
    ad08:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    ad0a:	b164      	cbz	r4, ad26 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
    ad0c:	4294      	cmp	r4, r2
    ad0e:	d021      	beq.n	ad54 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    ad10:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
    ad14:	428a      	cmp	r2, r1
    ad16:	d00b      	beq.n	ad30 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
    ad18:	6811      	ldr	r1, [r2, #0]
    ad1a:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
    ad1e:	2200      	movs	r2, #0
}
    ad20:	bc10      	pop	{r4}
		tx->next = NULL;
    ad22:	6002      	str	r2, [r0, #0]
}
    ad24:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    ad26:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
    ad2a:	4291      	cmp	r1, r2
    ad2c:	d104      	bne.n	ad38 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
    ad2e:	b18a      	cbz	r2, ad54 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
    ad30:	6809      	ldr	r1, [r1, #0]
    ad32:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
    ad36:	e7ef      	b.n	ad18 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ad38:	7911      	ldrb	r1, [r2, #4]
    ad3a:	f001 0103 	and.w	r1, r1, #3
    ad3e:	2903      	cmp	r1, #3
    ad40:	d013      	beq.n	ad6a <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
    ad42:	6812      	ldr	r2, [r2, #0]
    ad44:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
    ad48:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    ad4a:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
    ad4e:	bc10      	pop	{r4}
		tx->next = tx;
    ad50:	6000      	str	r0, [r0, #0]
}
    ad52:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    ad54:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
    ad58:	6812      	ldr	r2, [r2, #0]
    ad5a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    ad5e:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
    ad60:	bf18      	it	ne
    ad62:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    ad66:	d1f2      	bne.n	ad4e <tx_ull_dequeue+0x4e>
    ad68:	e7ee      	b.n	ad48 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
    ad6a:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ad6c:	2903      	cmp	r1, #3
    ad6e:	d0d3      	beq.n	ad18 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    ad70:	290a      	cmp	r1, #10
    ad72:	d1e6      	bne.n	ad42 <tx_ull_dequeue+0x42>
    ad74:	e7d0      	b.n	ad18 <tx_ull_dequeue+0x18>
    ad76:	bf00      	nop

0000ad78 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
    ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad7a:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
    ad7c:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    ad80:	0787      	lsls	r7, r0, #30
{
    ad82:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
    ad84:	d433      	bmi.n	adee <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ad86:	482e      	ldr	r0, [pc, #184]	; (ae40 <reject_ext_ind_send+0xc8>)
    ad88:	4617      	mov	r7, r2
    ad8a:	461e      	mov	r6, r3
    ad8c:	f7fa ffc2 	bl	5d14 <mem_acquire>
	if (!tx) {
    ad90:	2800      	cmp	r0, #0
    ad92:	d038      	beq.n	ae06 <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
    ad94:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    ad98:	f043 0302 	orr.w	r3, r3, #2
    ad9c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    ada0:	2303      	movs	r3, #3
    ada2:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    ada4:	2211      	movs	r2, #17
	    conn->tx_head &&
    ada6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    adaa:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    adac:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
    adae:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    adb2:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    adb4:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    adb8:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    adba:	7102      	strb	r2, [r0, #4]
	if (
    adbc:	b1db      	cbz	r3, adf6 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
    adbe:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    adc2:	0796      	lsls	r6, r2, #30
    adc4:	d417      	bmi.n	adf6 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
    adc6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    adca:	07d2      	lsls	r2, r2, #31
    adcc:	d413      	bmi.n	adf6 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
    adce:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    add2:	4293      	cmp	r3, r2
    add4:	d022      	beq.n	ae1c <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
    add6:	b1c9      	cbz	r1, ae0c <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
    add8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    addc:	681a      	ldr	r2, [r3, #0]
    adde:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    ade0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    ade2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    ade4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    ade8:	b90b      	cbnz	r3, adee <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
    adea:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    adee:	2301      	movs	r3, #1
    adf0:	712b      	strb	r3, [r5, #4]
		*err = 0U;
    adf2:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
    adf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
    adf6:	2900      	cmp	r1, #0
    adf8:	d1ee      	bne.n	add8 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
    adfa:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    adfc:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    ae00:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    ae04:	e7f0      	b.n	ade8 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
    ae06:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    ae0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ae0c:	791a      	ldrb	r2, [r3, #4]
    ae0e:	f002 0203 	and.w	r2, r2, #3
    ae12:	2a03      	cmp	r2, #3
    ae14:	d00e      	beq.n	ae34 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    ae16:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    ae1a:	e7df      	b.n	addc <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
    ae1c:	681a      	ldr	r2, [r3, #0]
    ae1e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    ae22:	2900      	cmp	r1, #0
    ae24:	d1d8      	bne.n	add8 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
    ae26:	681a      	ldr	r2, [r3, #0]
    ae28:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    ae2a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    ae2c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    ae2e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    ae32:	e7d9      	b.n	ade8 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
    ae34:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ae36:	2a03      	cmp	r2, #3
    ae38:	d0f5      	beq.n	ae26 <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    ae3a:	2a0a      	cmp	r2, #10
    ae3c:	d1eb      	bne.n	ae16 <reject_ext_ind_send+0x9e>
    ae3e:	e7f2      	b.n	ae26 <reject_ext_ind_send+0xae>
    ae40:	20001d50 	.word	0x20001d50

0000ae44 <event_len_prep>:
{
    ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
    ae46:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    ae4a:	f003 0207 	and.w	r2, r3, #7
{
    ae4e:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
    ae50:	2a06      	cmp	r2, #6
    ae52:	f200 80d4 	bhi.w	affe <event_len_prep+0x1ba>
    ae56:	e8df f002 	tbb	[pc, r2]
    ae5a:	4704      	.short	0x4704
    ae5c:	48484747 	.word	0x48484747
    ae60:	47          	.byte	0x47
    ae61:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ae62:	486e      	ldr	r0, [pc, #440]	; (b01c <event_len_prep+0x1d8>)
    ae64:	f7fa ff56 	bl	5d14 <mem_acquire>
		if (!tx) {
    ae68:	2800      	cmp	r0, #0
    ae6a:	d03d      	beq.n	aee8 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    ae6c:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    ae70:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
    ae74:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    ae78:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    ae7c:	2301      	movs	r3, #1
    ae7e:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
    ae82:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    ae86:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    ae8a:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    ae8c:	72c3      	strb	r3, [r0, #11]
    ae8e:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    ae90:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
    ae92:	2309      	movs	r3, #9
    ae94:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    ae96:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    ae98:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    ae9a:	2214      	movs	r2, #20
	    conn->tx_head &&
    ae9c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    aea0:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    aea2:	2100      	movs	r1, #0
    aea4:	221b      	movs	r2, #27
    aea6:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
    aea8:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    aeac:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    aeae:	7902      	ldrb	r2, [r0, #4]
    aeb0:	f042 0203 	orr.w	r2, r2, #3
    aeb4:	7102      	strb	r2, [r0, #4]
	if (
    aeb6:	b13b      	cbz	r3, aec8 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
    aeb8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    aebc:	0795      	lsls	r5, r2, #30
    aebe:	d403      	bmi.n	aec8 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
    aec0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    aec4:	07d2      	lsls	r2, r2, #31
    aec6:	d573      	bpl.n	afb0 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
    aec8:	2900      	cmp	r1, #0
    aeca:	d07f      	beq.n	afcc <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
    aecc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    aed0:	681a      	ldr	r2, [r3, #0]
    aed2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    aed4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    aed6:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    aed8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    aedc:	2b00      	cmp	r3, #0
    aede:	d056      	beq.n	af8e <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
    aee0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    aee4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
    aee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    aeea:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    aeee:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
    aef2:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
    aef6:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
    aefa:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    aefe:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    af02:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    af04:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    af08:	d024      	beq.n	af54 <event_len_prep+0x110>
			conn->llcp_length.state =
    af0a:	2206      	movs	r2, #6
    af0c:	f362 0302 	bfi	r3, r2, #0, #3
    af10:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
    af14:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    af18:	b335      	cbz	r5, af68 <event_len_prep+0x124>
    af1a:	6828      	ldr	r0, [r5, #0]
    af1c:	b320      	cbz	r0, af68 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    af1e:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    af20:	6842      	ldr	r2, [r0, #4]
    af22:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    af26:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
    af2a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    af2c:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
    af2e:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
    af30:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
    af32:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    af34:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    af36:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    af38:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    af3a:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    af3e:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    af40:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    af42:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    af44:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    af46:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
    af48:	f7fe fa6e 	bl	9428 <ll_rx_put>
}
    af4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
    af50:	f7fe ba74 	b.w	943c <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
    af54:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
    af58:	b9e2      	cbnz	r2, af94 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
    af5a:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
    af5e:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
    af62:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
    af66:	e7d5      	b.n	af14 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
    af68:	4a2d      	ldr	r2, [pc, #180]	; (b020 <event_len_prep+0x1dc>)
    af6a:	492e      	ldr	r1, [pc, #184]	; (b024 <event_len_prep+0x1e0>)
    af6c:	482e      	ldr	r0, [pc, #184]	; (b028 <event_len_prep+0x1e4>)
    af6e:	f241 03b1 	movw	r3, #4273	; 0x10b1
    af72:	f00b fffc 	bl	16f6e <printk>
    af76:	4040      	eors	r0, r0
    af78:	f380 8811 	msr	BASEPRI, r0
    af7c:	f04f 0003 	mov.w	r0, #3
    af80:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    af82:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    af84:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    af88:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    af8c:	e7c7      	b.n	af1e <event_len_prep+0xda>
		conn->tx_data_last = tx;
    af8e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    af92:	e7a5      	b.n	aee0 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
    af94:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
    af98:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    af9a:	f362 0302 	bfi	r3, r2, #0, #3
    af9e:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
    afa2:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
    afa6:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
    afaa:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    afae:	e7b1      	b.n	af14 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
    afb0:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    afb4:	4293      	cmp	r3, r2
    afb6:	d00f      	beq.n	afd8 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
    afb8:	2900      	cmp	r1, #0
    afba:	d187      	bne.n	aecc <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    afbc:	791a      	ldrb	r2, [r3, #4]
    afbe:	f002 0203 	and.w	r2, r2, #3
    afc2:	2a03      	cmp	r2, #3
    afc4:	d015      	beq.n	aff2 <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    afc6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    afca:	e781      	b.n	aed0 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
    afcc:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    afce:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    afd2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    afd6:	e781      	b.n	aedc <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
    afd8:	681a      	ldr	r2, [r3, #0]
    afda:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    afde:	2900      	cmp	r1, #0
    afe0:	f47f af74 	bne.w	aecc <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
    afe4:	681a      	ldr	r2, [r3, #0]
    afe6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    afe8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    afea:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    afec:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    aff0:	e774      	b.n	aedc <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
    aff2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    aff4:	2a03      	cmp	r2, #3
    aff6:	d0f5      	beq.n	afe4 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    aff8:	2a0a      	cmp	r2, #10
    affa:	d1e4      	bne.n	afc6 <event_len_prep+0x182>
    affc:	e7f2      	b.n	afe4 <event_len_prep+0x1a0>
		LL_ASSERT(0);
    affe:	4a08      	ldr	r2, [pc, #32]	; (b020 <event_len_prep+0x1dc>)
    b000:	490a      	ldr	r1, [pc, #40]	; (b02c <event_len_prep+0x1e8>)
    b002:	4809      	ldr	r0, [pc, #36]	; (b028 <event_len_prep+0x1e4>)
    b004:	f241 03db 	movw	r3, #4315	; 0x10db
    b008:	f00b ffb1 	bl	16f6e <printk>
    b00c:	4040      	eors	r0, r0
    b00e:	f380 8811 	msr	BASEPRI, r0
    b012:	f04f 0003 	mov.w	r0, #3
    b016:	df02      	svc	2
}
    b018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b01a:	bf00      	nop
    b01c:	20001d50 	.word	0x20001d50
    b020:	0001bc28 	.word	0x0001bc28
    b024:	0001bcf4 	.word	0x0001bcf4
    b028:	0001b7c8 	.word	0x0001b7c8
    b02c:	0001b828 	.word	0x0001b828

0000b030 <event_phy_upd_ind_prep>:
{
    b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
    b034:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
    b038:	f013 0601 	ands.w	r6, r3, #1
{
    b03c:	4604      	mov	r4, r0
    b03e:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
    b040:	f040 8092 	bne.w	b168 <event_phy_upd_ind_prep+0x138>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    b044:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
    b048:	1a69      	subs	r1, r5, r1
    b04a:	0409      	lsls	r1, r1, #16
    b04c:	f100 8093 	bmi.w	b176 <event_phy_upd_ind_prep+0x146>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b050:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
    b054:	2900      	cmp	r1, #0
    b056:	f2c0 8110 	blt.w	b27a <event_phy_upd_ind_prep+0x24a>
		rx = conn->llcp_rx;
    b05a:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
    b05e:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
    b060:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    b064:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
    b068:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
    b06c:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
    b070:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
    b074:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
    b078:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
    b07c:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
    b080:	d17b      	bne.n	b17a <event_phy_upd_ind_prep+0x14a>
		uint16_t eff_tx_time = lll->max_tx_time;
    b082:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
    b086:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    b08a:	d008      	beq.n	b09e <event_phy_upd_ind_prep+0x6e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    b08c:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
    b090:	095b      	lsrs	r3, r3, #5
    b092:	f363 0102 	bfi	r1, r3, #0, #3
    b096:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    b09a:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
    b09e:	2d00      	cmp	r5, #0
    b0a0:	f000 80cb 	beq.w	b23a <event_phy_upd_ind_prep+0x20a>
    b0a4:	6828      	ldr	r0, [r5, #0]
    b0a6:	2800      	cmp	r0, #0
    b0a8:	f000 80c7 	beq.w	b23a <event_phy_upd_ind_prep+0x20a>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    b0ac:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
    b0b0:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
    b0b4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b0b8:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    b0bc:	0792      	lsls	r2, r2, #30
    b0be:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
    b0c2:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    b0c6:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
    b0ca:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    b0ce:	d402      	bmi.n	b0d6 <event_phy_upd_ind_prep+0xa6>
    b0d0:	4599      	cmp	r9, r3
    b0d2:	f000 80ee 	beq.w	b2b2 <event_phy_upd_ind_prep+0x282>
		rx->hdr.handle = lll->handle;
    b0d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    b0d8:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    b0da:	231c      	movs	r3, #28
    b0dc:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
    b0de:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    b0e0:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
    b0e4:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
    b0e8:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
    b0ea:	4629      	mov	r1, r5
    b0ec:	f7fe f99c 	bl	9428 <ll_rx_put>
		rx = conn->llcp_rx;
    b0f0:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    b0f4:	2d00      	cmp	r5, #0
    b0f6:	f000 80b1 	beq.w	b25c <event_phy_upd_ind_prep+0x22c>
    b0fa:	6828      	ldr	r0, [r5, #0]
    b0fc:	2800      	cmp	r0, #0
    b0fe:	f000 80ad 	beq.w	b25c <event_phy_upd_ind_prep+0x22c>
		if ((eff_tx_time <= lll->max_tx_time) &&
    b102:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
    b106:	6842      	ldr	r2, [r0, #4]
    b108:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
    b10c:	42b3      	cmp	r3, r6
    b10e:	d30a      	bcc.n	b126 <event_phy_upd_ind_prep+0xf6>
    b110:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    b114:	d807      	bhi.n	b126 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
    b116:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
    b11a:	42bb      	cmp	r3, r7
    b11c:	d303      	bcc.n	b126 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
    b11e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    b122:	f240 80ff 	bls.w	b324 <event_phy_upd_ind_prep+0x2f4>
		lll->max_tx_time = eff_tx_time;
    b126:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
    b12a:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    b12e:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    b130:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    b132:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    b134:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    b138:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    b13c:	2109      	movs	r1, #9
    b13e:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    b140:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    b144:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    b146:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    b14a:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    b14c:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
    b150:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    b152:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    b154:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    b156:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    b158:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    b15a:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
    b15c:	f7fe f964 	bl	9428 <ll_rx_put>
}
    b160:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
    b164:	f7fe b96a 	b.w	943c <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
    b168:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
    b16c:	2200      	movs	r2, #0
    b16e:	f7fa fe3f 	bl	5df0 <memq_peek>
    b172:	4606      	mov	r6, r0
    b174:	b150      	cbz	r0, b18c <event_phy_upd_ind_prep+0x15c>
}
    b176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    b17a:	f3c3 0082 	ubfx	r0, r3, #2, #3
    b17e:	f360 0102 	bfi	r1, r0, #0, #3
    b182:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    b186:	f44f 76a4 	mov.w	r6, #328	; 0x148
    b18a:	e77c      	b.n	b086 <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
    b18c:	2002      	movs	r0, #2
    b18e:	f7fe f95b 	bl	9448 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    b192:	4680      	mov	r8, r0
    b194:	2800      	cmp	r0, #0
    b196:	d0ee      	beq.n	b176 <event_phy_upd_ind_prep+0x146>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    b198:	4893      	ldr	r0, [pc, #588]	; (b3e8 <event_phy_upd_ind_prep+0x3b8>)
    b19a:	f7fa fdbb 	bl	5d14 <mem_acquire>
		if (!tx) {
    b19e:	4607      	mov	r7, r0
    b1a0:	2800      	cmp	r0, #0
    b1a2:	d0e8      	beq.n	b176 <event_phy_upd_ind_prep+0x146>
		conn->llcp.phy_upd_ind.initiate = 0U;
    b1a4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    b1a8:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    b1ac:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    b1b0:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
    b1b4:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    b1b8:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
    b1bc:	b2db      	uxtb	r3, r3
    b1be:	f040 8093 	bne.w	b2e8 <event_phy_upd_ind_prep+0x2b8>
			conn->llcp_ack = conn->llcp_req;
    b1c2:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
    b1c6:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
    b1ca:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    b1cc:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
    b1d0:	f100 80ba 	bmi.w	b348 <event_phy_upd_ind_prep+0x318>
    b1d4:	4633      	mov	r3, r6
    b1d6:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    b1d8:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
    b1da:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    b1dc:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
    b1de:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    b1e0:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
    b1e2:	2218      	movs	r2, #24
	    conn->tx_head &&
    b1e4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		if (!conn->tx_ctrl) {
    b1e8:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->llctrl.opcode =
    b1ec:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b1ee:	793a      	ldrb	r2, [r7, #4]
    b1f0:	f042 0203 	orr.w	r2, r2, #3
    b1f4:	713a      	strb	r2, [r7, #4]
	if (
    b1f6:	2b00      	cmp	r3, #0
    b1f8:	f000 809d 	beq.w	b336 <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_enc.pause_tx &&
    b1fc:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    b200:	0795      	lsls	r5, r2, #30
    b202:	f100 8098 	bmi.w	b336 <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_phy.pause_tx &&
    b206:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    b20a:	07d0      	lsls	r0, r2, #31
    b20c:	f100 8093 	bmi.w	b336 <event_phy_upd_ind_prep+0x306>
		if (conn->tx_head == conn->tx_data) {
    b210:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    b214:	4293      	cmp	r3, r2
    b216:	f000 80cb 	beq.w	b3b0 <event_phy_upd_ind_prep+0x380>
		} else if (!conn->tx_ctrl) {
    b21a:	2900      	cmp	r1, #0
    b21c:	f000 80d5 	beq.w	b3ca <event_phy_upd_ind_prep+0x39a>
	tx->next = conn->tx_ctrl_last->next;
    b220:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    b224:	681a      	ldr	r2, [r3, #0]
    b226:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    b228:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    b22a:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
    b22c:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
    b230:	2b00      	cmp	r3, #0
    b232:	d1a0      	bne.n	b176 <event_phy_upd_ind_prep+0x146>
		conn->tx_data_last = tx;
    b234:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
    b238:	e79d      	b.n	b176 <event_phy_upd_ind_prep+0x146>
		LL_ASSERT(rx && rx->hdr.link);
    b23a:	4a6c      	ldr	r2, [pc, #432]	; (b3ec <event_phy_upd_ind_prep+0x3bc>)
    b23c:	496c      	ldr	r1, [pc, #432]	; (b3f0 <event_phy_upd_ind_prep+0x3c0>)
    b23e:	486d      	ldr	r0, [pc, #436]	; (b3f4 <event_phy_upd_ind_prep+0x3c4>)
    b240:	f241 230b 	movw	r3, #4619	; 0x120b
    b244:	f00b fe93 	bl	16f6e <printk>
    b248:	4040      	eors	r0, r0
    b24a:	f380 8811 	msr	BASEPRI, r0
    b24e:	f04f 0003 	mov.w	r0, #3
    b252:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    b254:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    b256:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    b25a:	e727      	b.n	b0ac <event_phy_upd_ind_prep+0x7c>
		LL_ASSERT(rx && rx->hdr.link);
    b25c:	4a63      	ldr	r2, [pc, #396]	; (b3ec <event_phy_upd_ind_prep+0x3bc>)
    b25e:	4964      	ldr	r1, [pc, #400]	; (b3f0 <event_phy_upd_ind_prep+0x3c0>)
    b260:	4864      	ldr	r0, [pc, #400]	; (b3f4 <event_phy_upd_ind_prep+0x3c4>)
    b262:	f241 233a 	movw	r3, #4666	; 0x123a
    b266:	f00b fe82 	bl	16f6e <printk>
    b26a:	4040      	eors	r0, r0
    b26c:	f380 8811 	msr	BASEPRI, r0
    b270:	f04f 0003 	mov.w	r0, #3
    b274:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    b276:	6828      	ldr	r0, [r5, #0]
    b278:	e743      	b.n	b102 <event_phy_upd_ind_prep+0xd2>
			rx = ll_pdu_rx_alloc();
    b27a:	f7fe f903 	bl	9484 <ll_pdu_rx_alloc>
			if (!rx) {
    b27e:	4605      	mov	r5, r0
    b280:	2800      	cmp	r0, #0
    b282:	f43f af78 	beq.w	b176 <event_phy_upd_ind_prep+0x146>
			rx->hdr.link->mem = conn->llcp_rx;
    b286:	6803      	ldr	r3, [r0, #0]
    b288:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    b28c:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    b28e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
    b292:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    b296:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
    b298:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    b29c:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    b29e:	f6bf aedf 	bge.w	b060 <event_phy_upd_ind_prep+0x30>
    b2a2:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
    b2a6:	2900      	cmp	r1, #0
    b2a8:	f43f aeda 	beq.w	b060 <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
    b2ac:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
    b2b0:	e6da      	b.n	b068 <event_phy_upd_ind_prep+0x38>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    b2b2:	4588      	cmp	r8, r1
    b2b4:	f47f af0f 	bne.w	b0d6 <event_phy_upd_ind_prep+0xa6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    b2b8:	2301      	movs	r3, #1
    b2ba:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    b2bc:	4629      	mov	r1, r5
    b2be:	f7fe f8b3 	bl	9428 <ll_rx_put>
				rx = conn->llcp_rx;
    b2c2:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
    b2c6:	2d00      	cmp	r5, #0
    b2c8:	d063      	beq.n	b392 <event_phy_upd_ind_prep+0x362>
    b2ca:	6828      	ldr	r0, [r5, #0]
    b2cc:	2800      	cmp	r0, #0
    b2ce:	d060      	beq.n	b392 <event_phy_upd_ind_prep+0x362>
				conn->llcp_rx = rx->hdr.link->mem;
    b2d0:	6842      	ldr	r2, [r0, #4]
    b2d2:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    b2d6:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
    b2d8:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    b2da:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    b2dc:	f7fe f8a4 	bl	9428 <ll_rx_put>
}
    b2e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
    b2e4:	f7fe b8aa 	b.w	943c <ll_rx_sched>
							 lll->latency +
    b2e8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    b2ea:	1da9      	adds	r1, r5, #6
    b2ec:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
    b2ee:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
    b2f2:	f7fe f8c7 	bl	9484 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    b2f6:	f8d8 3000 	ldr.w	r3, [r8]
    b2fa:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    b2fe:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    b300:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
    b304:	f7fe f8be 	bl	9484 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    b308:	6803      	ldr	r3, [r0, #0]
    b30a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    b30e:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    b310:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    b314:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
    b318:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    b31c:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    b320:	095b      	lsrs	r3, r3, #5
    b322:	e759      	b.n	b1d8 <event_phy_upd_ind_prep+0x1a8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    b324:	2301      	movs	r3, #1
    b326:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    b328:	4629      	mov	r1, r5
    b32a:	f7fe f87d 	bl	9428 <ll_rx_put>
}
    b32e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
    b332:	f7fe b883 	b.w	943c <ll_rx_sched>
		if (!conn->tx_ctrl) {
    b336:	2900      	cmp	r1, #0
    b338:	f47f af72 	bne.w	b220 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head;
    b33c:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    b33e:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    b342:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
    b346:	e773      	b.n	b230 <event_phy_upd_ind_prep+0x200>
				(void)ll_pdu_rx_alloc();
    b348:	f7fe f89c 	bl	9484 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    b34c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    b34e:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    b352:	231c      	movs	r3, #28
				upd->status = 0U;
    b354:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    b358:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    b35c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
    b360:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
    b364:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b368:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    b36c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    b370:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b374:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    b378:	4641      	mov	r1, r8
    b37a:	f7fe f855 	bl	9428 <ll_rx_put>
				ll_rx_sched();
    b37e:	f7fe f85d 	bl	943c <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    b382:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    b386:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    b38a:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    b38e:	095b      	lsrs	r3, r3, #5
    b390:	e722      	b.n	b1d8 <event_phy_upd_ind_prep+0x1a8>
				LL_ASSERT(rx && rx->hdr.link);
    b392:	4a16      	ldr	r2, [pc, #88]	; (b3ec <event_phy_upd_ind_prep+0x3bc>)
    b394:	4916      	ldr	r1, [pc, #88]	; (b3f0 <event_phy_upd_ind_prep+0x3c0>)
    b396:	4817      	ldr	r0, [pc, #92]	; (b3f4 <event_phy_upd_ind_prep+0x3c4>)
    b398:	f241 231d 	movw	r3, #4637	; 0x121d
    b39c:	f00b fde7 	bl	16f6e <printk>
    b3a0:	4040      	eors	r0, r0
    b3a2:	f380 8811 	msr	BASEPRI, r0
    b3a6:	f04f 0003 	mov.w	r0, #3
    b3aa:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
    b3ac:	6828      	ldr	r0, [r5, #0]
    b3ae:	e78f      	b.n	b2d0 <event_phy_upd_ind_prep+0x2a0>
			conn->tx_data = conn->tx_data->next;
    b3b0:	681a      	ldr	r2, [r3, #0]
    b3b2:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    b3b6:	2900      	cmp	r1, #0
    b3b8:	f47f af32 	bne.w	b220 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head->next;
    b3bc:	681a      	ldr	r2, [r3, #0]
    b3be:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    b3c0:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    b3c2:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    b3c4:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
    b3c8:	e732      	b.n	b230 <event_phy_upd_ind_prep+0x200>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    b3ca:	791a      	ldrb	r2, [r3, #4]
    b3cc:	f002 0203 	and.w	r2, r2, #3
    b3d0:	2a03      	cmp	r2, #3
    b3d2:	d002      	beq.n	b3da <event_phy_upd_ind_prep+0x3aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    b3d4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    b3d8:	e722      	b.n	b220 <event_phy_upd_ind_prep+0x1f0>
	    ((pdu_data_tx->llctrl.opcode !=
    b3da:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    b3dc:	2a03      	cmp	r2, #3
    b3de:	d0ed      	beq.n	b3bc <event_phy_upd_ind_prep+0x38c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    b3e0:	2a0a      	cmp	r2, #10
    b3e2:	d1f7      	bne.n	b3d4 <event_phy_upd_ind_prep+0x3a4>
    b3e4:	e7ea      	b.n	b3bc <event_phy_upd_ind_prep+0x38c>
    b3e6:	bf00      	nop
    b3e8:	20001d50 	.word	0x20001d50
    b3ec:	0001bc28 	.word	0x0001bc28
    b3f0:	0001bcf4 	.word	0x0001bcf4
    b3f4:	0001b7c8 	.word	0x0001b7c8

0000b3f8 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    b3f8:	4801      	ldr	r0, [pc, #4]	; (b400 <ll_conn_acquire+0x8>)
    b3fa:	f7fa bc8b 	b.w	5d14 <mem_acquire>
    b3fe:	bf00      	nop
    b400:	20001cb8 	.word	0x20001cb8

0000b404 <ll_conn_release>:
	mem_release(conn, &conn_free);
    b404:	4901      	ldr	r1, [pc, #4]	; (b40c <ll_conn_release+0x8>)
    b406:	f7fa bc9f 	b.w	5d48 <mem_release>
    b40a:	bf00      	nop
    b40c:	20001cb8 	.word	0x20001cb8

0000b410 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    b410:	4902      	ldr	r1, [pc, #8]	; (b41c <ll_conn_handle_get+0xc>)
    b412:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    b416:	f7fa bcb3 	b.w	5d80 <mem_index_get>
    b41a:	bf00      	nop
    b41c:	20000ed0 	.word	0x20000ed0

0000b420 <ll_conn_get>:
{
    b420:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b422:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b426:	4801      	ldr	r0, [pc, #4]	; (b42c <ll_conn_get+0xc>)
    b428:	f7fa bca6 	b.w	5d78 <mem_get>
    b42c:	20000ed0 	.word	0x20000ed0

0000b430 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b430:	b958      	cbnz	r0, b44a <ll_connected_get+0x1a>
{
    b432:	b508      	push	{r3, lr}
    b434:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b436:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b43a:	4805      	ldr	r0, [pc, #20]	; (b450 <ll_connected_get+0x20>)
    b43c:	f7fa fc9c 	bl	5d78 <mem_get>
	if (conn->lll.handle != handle) {
    b440:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    b442:	b903      	cbnz	r3, b446 <ll_connected_get+0x16>
}
    b444:	bd08      	pop	{r3, pc}
		return NULL;
    b446:	2000      	movs	r0, #0
}
    b448:	bd08      	pop	{r3, pc}
		return NULL;
    b44a:	2000      	movs	r0, #0
}
    b44c:	4770      	bx	lr
    b44e:	bf00      	nop
    b450:	20000ed0 	.word	0x20000ed0

0000b454 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    b454:	4801      	ldr	r0, [pc, #4]	; (b45c <ll_tx_mem_acquire+0x8>)
    b456:	f7fa bc5d 	b.w	5d14 <mem_acquire>
    b45a:	bf00      	nop
    b45c:	20001ce0 	.word	0x20001ce0

0000b460 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    b460:	4901      	ldr	r1, [pc, #4]	; (b468 <ll_tx_mem_release+0x8>)
    b462:	f7fa bc71 	b.w	5d48 <mem_release>
    b466:	bf00      	nop
    b468:	20001ce0 	.word	0x20001ce0

0000b46c <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b46c:	2800      	cmp	r0, #0
    b46e:	d13f      	bne.n	b4f0 <ll_tx_mem_enqueue+0x84>
{
    b470:	b570      	push	{r4, r5, r6, lr}
    b472:	4602      	mov	r2, r0
    b474:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b476:	4820      	ldr	r0, [pc, #128]	; (b4f8 <ll_tx_mem_enqueue+0x8c>)
    b478:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b47c:	f7fa fc7c 	bl	5d78 <mem_get>
	if (conn->lll.handle != handle) {
    b480:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b482:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    b484:	bb72      	cbnz	r2, b4e4 <ll_tx_mem_enqueue+0x78>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    b486:	4c1d      	ldr	r4, [pc, #116]	; (b4fc <ll_tx_mem_enqueue+0x90>)
    b488:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
    b48c:	7861      	ldrb	r1, [r4, #1]
    b48e:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
    b490:	f10c 0301 	add.w	r3, ip, #1
    b494:	b2db      	uxtb	r3, r3
		last = 0U;
    b496:	4299      	cmp	r1, r3
    b498:	bf08      	it	eq
    b49a:	2300      	moveq	r3, #0
    b49c:	78a1      	ldrb	r1, [r4, #2]
	if (last == first) {
    b49e:	4299      	cmp	r1, r3
    b4a0:	d023      	beq.n	b4ea <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    b4a2:	fb1c fc00 	smulbb	ip, ip, r0
    b4a6:	1d20      	adds	r0, r4, #4
	lll_tx->handle = handle;
    b4a8:	f820 200c 	strh.w	r2, [r0, ip]
    b4ac:	4484      	add	ip, r0
	lll_tx->node = tx;
    b4ae:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
    b4b2:	70e3      	strb	r3, [r4, #3]
    b4b4:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
    b4b6:	b92b      	cbnz	r3, b4c4 <ll_tx_mem_enqueue+0x58>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b4b8:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    b4bc:	2b00      	cmp	r3, #0
    b4be:	db0b      	blt.n	b4d8 <ll_tx_mem_enqueue+0x6c>
	return 0;
    b4c0:	2000      	movs	r0, #0
}
    b4c2:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
    b4c4:	4b0e      	ldr	r3, [pc, #56]	; (b500 <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    b4c6:	2101      	movs	r1, #1
    b4c8:	2003      	movs	r0, #3
		mfy.param = conn;
    b4ca:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    b4cc:	f7fa fcfa 	bl	5ec4 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b4d0:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	daf3      	bge.n	b4c0 <ll_tx_mem_enqueue+0x54>
		ull_periph_latency_cancel(conn, handle);
    b4d8:	4628      	mov	r0, r5
    b4da:	2100      	movs	r1, #0
    b4dc:	f003 ff20 	bl	f320 <ull_periph_latency_cancel>
	return 0;
    b4e0:	2000      	movs	r0, #0
}
    b4e2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    b4e4:	f06f 0015 	mvn.w	r0, #21
}
    b4e8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    b4ea:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    b4ee:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    b4f0:	f06f 0015 	mvn.w	r0, #21
}
    b4f4:	4770      	bx	lr
    b4f6:	bf00      	nop
    b4f8:	20000ed0 	.word	0x20000ed0
    b4fc:	2000055c 	.word	0x2000055c
    b500:	200005b0 	.word	0x200005b0

0000b504 <ll_conn_update>:
{
    b504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b508:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    b50c:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    b510:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
    b514:	2800      	cmp	r0, #0
    b516:	d155      	bne.n	b5c4 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b518:	460c      	mov	r4, r1
    b51a:	4615      	mov	r5, r2
    b51c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b520:	4602      	mov	r2, r0
    b522:	4841      	ldr	r0, [pc, #260]	; (b628 <ll_conn_update+0x124>)
    b524:	461e      	mov	r6, r3
    b526:	f7fa fc27 	bl	5d78 <mem_get>
    b52a:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
    b52c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    b52e:	2800      	cmp	r0, #0
    b530:	d148      	bne.n	b5c4 <ll_conn_update+0xc0>
	if (!cmd) {
    b532:	bb3c      	cbnz	r4, b584 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
    b534:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
    b538:	0699      	lsls	r1, r3, #26
    b53a:	d44a      	bmi.n	b5d2 <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
    b53c:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
    b540:	07da      	lsls	r2, r3, #31
    b542:	d442      	bmi.n	b5ca <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
    b544:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
    b548:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
    b54c:	4293      	cmp	r3, r2
    b54e:	d136      	bne.n	b5be <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
    b550:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b554:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
    b558:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
    b55c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
    b560:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
    b562:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b566:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
    b568:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
    b56c:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
    b570:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
    b574:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
    b578:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b57c:	db4e      	blt.n	b61c <ll_conn_update+0x118>
	return 0;
    b57e:	2000      	movs	r0, #0
}
    b580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
    b584:	3c01      	subs	r4, #1
		if (cmd) {
    b586:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    b58a:	d0db      	beq.n	b544 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
    b58c:	f89c 2185 	ldrb.w	r2, [ip, #389]	; 0x185
    b590:	f89c 3184 	ldrb.w	r3, [ip, #388]	; 0x184
    b594:	429a      	cmp	r2, r3
    b596:	d012      	beq.n	b5be <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
    b598:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
    b59c:	f003 020f 	and.w	r2, r3, #15
    b5a0:	2a03      	cmp	r2, #3
    b5a2:	d10c      	bne.n	b5be <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
    b5a4:	f004 040f 	and.w	r4, r4, #15
    b5a8:	f023 031f 	bic.w	r3, r3, #31
    b5ac:	f044 0410 	orr.w	r4, r4, #16
    b5b0:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
    b5b2:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
    b5b6:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
    b5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    b5be:	200c      	movs	r0, #12
}
    b5c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b5c4:	2002      	movs	r0, #2
}
    b5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
    b5ca:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
    b5ce:	079b      	lsls	r3, r3, #30
    b5d0:	d4b8      	bmi.n	b544 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
    b5d2:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
    b5d6:	2b00      	cmp	r3, #0
    b5d8:	db1e      	blt.n	b618 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
    b5da:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
    b5de:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
    b5e2:	4293      	cmp	r3, r2
    b5e4:	d1eb      	bne.n	b5be <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    b5e6:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
    b5ea:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
    b5ee:	3301      	adds	r3, #1
    b5f0:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    b5f4:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
    b5f8:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    b5fa:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
    b5fe:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
    b600:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
    b604:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
    b608:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    b60c:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
    b610:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
    b614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    b618:	201a      	movs	r0, #26
    b61a:	e7d1      	b.n	b5c0 <ll_conn_update+0xbc>
				ull_periph_latency_cancel(conn, handle);
    b61c:	4660      	mov	r0, ip
    b61e:	2100      	movs	r1, #0
    b620:	f003 fe7e 	bl	f320 <ull_periph_latency_cancel>
	return 0;
    b624:	2000      	movs	r0, #0
    b626:	e7cb      	b.n	b5c0 <ll_conn_update+0xbc>
    b628:	20000ed0 	.word	0x20000ed0

0000b62c <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b62c:	b9d0      	cbnz	r0, b664 <ll_chm_get+0x38>
{
    b62e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b630:	4602      	mov	r2, r0
    b632:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b634:	480c      	ldr	r0, [pc, #48]	; (b668 <ll_chm_get+0x3c>)
    b636:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b63a:	f7fa fb9d 	bl	5d78 <mem_get>
	if (conn->lll.handle != handle) {
    b63e:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b640:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    b642:	b96e      	cbnz	r6, b660 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
    b644:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
    b648:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
    b64c:	2205      	movs	r2, #5
    b64e:	4639      	mov	r1, r7
    b650:	4628      	mov	r0, r5
    b652:	f00c fa53 	bl	17afc <memcpy>
	} while (conn->chm_updated);
    b656:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
    b65a:	2800      	cmp	r0, #0
    b65c:	d1f4      	bne.n	b648 <ll_chm_get+0x1c>
}
    b65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b660:	2002      	movs	r0, #2
}
    b662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b664:	2002      	movs	r0, #2
}
    b666:	4770      	bx	lr
    b668:	20000ed0 	.word	0x20000ed0

0000b66c <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b66c:	2800      	cmp	r0, #0
    b66e:	d13e      	bne.n	b6ee <ll_terminate_ind_send+0x82>
{
    b670:	b510      	push	{r4, lr}
    b672:	4602      	mov	r2, r0
    b674:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b676:	4821      	ldr	r0, [pc, #132]	; (b6fc <ll_terminate_ind_send+0x90>)
    b678:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b67c:	f7fa fb7c 	bl	5d78 <mem_get>
	if (conn->lll.handle != handle) {
    b680:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    b682:	bb93      	cbnz	r3, b6ea <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
    b684:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    b688:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
    b68c:	429a      	cmp	r2, r3
    b68e:	d12a      	bne.n	b6e6 <ll_terminate_ind_send+0x7a>
	switch (reason) {
    b690:	2c29      	cmp	r4, #41	; 0x29
    b692:	d819      	bhi.n	b6c8 <ll_terminate_ind_send+0x5c>
    b694:	2c04      	cmp	r4, #4
    b696:	d919      	bls.n	b6cc <ll_terminate_ind_send+0x60>
    b698:	1f62      	subs	r2, r4, #5
    b69a:	2a24      	cmp	r2, #36	; 0x24
    b69c:	d816      	bhi.n	b6cc <ll_terminate_ind_send+0x60>
    b69e:	e8df f002 	tbb	[pc, r2]
    b6a2:	1517      	.short	0x1517
    b6a4:	15151515 	.word	0x15151515
    b6a8:	15151515 	.word	0x15151515
    b6ac:	15151515 	.word	0x15151515
    b6b0:	15171717 	.word	0x15171717
    b6b4:	17151515 	.word	0x17151515
    b6b8:	15151515 	.word	0x15151515
    b6bc:	15151515 	.word	0x15151515
    b6c0:	15151515 	.word	0x15151515
    b6c4:	1515      	.short	0x1515
    b6c6:	17          	.byte	0x17
    b6c7:	00          	.byte	0x00
    b6c8:	2c3b      	cmp	r4, #59	; 0x3b
    b6ca:	d001      	beq.n	b6d0 <ll_terminate_ind_send+0x64>
    b6cc:	2012      	movs	r0, #18
}
    b6ce:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b6d0:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
    b6d4:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    b6d8:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b6da:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    b6dc:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b6e0:	db07      	blt.n	b6f2 <ll_terminate_ind_send+0x86>
	return 0;
    b6e2:	2000      	movs	r0, #0
}
    b6e4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    b6e6:	200c      	movs	r0, #12
}
    b6e8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b6ea:	2002      	movs	r0, #2
}
    b6ec:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b6ee:	2002      	movs	r0, #2
}
    b6f0:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
    b6f2:	2100      	movs	r1, #0
    b6f4:	f003 fe14 	bl	f320 <ull_periph_latency_cancel>
	return 0;
    b6f8:	2000      	movs	r0, #0
}
    b6fa:	bd10      	pop	{r4, pc}
    b6fc:	20000ed0 	.word	0x20000ed0

0000b700 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b700:	bb00      	cbnz	r0, b744 <ll_feature_req_send+0x44>
{
    b702:	b510      	push	{r4, lr}
    b704:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b706:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b70a:	480f      	ldr	r0, [pc, #60]	; (b748 <ll_feature_req_send+0x48>)
    b70c:	f7fa fb34 	bl	5d78 <mem_get>
	if (conn->lll.handle != handle) {
    b710:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    b712:	b984      	cbnz	r4, b736 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
    b714:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    b718:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
    b71c:	428a      	cmp	r2, r1
    b71e:	d108      	bne.n	b732 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b720:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
    b724:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b726:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
    b728:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b72c:	db05      	blt.n	b73a <ll_feature_req_send+0x3a>
	return 0;
    b72e:	4620      	mov	r0, r4
}
    b730:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    b732:	200c      	movs	r0, #12
}
    b734:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b736:	2002      	movs	r0, #2
}
    b738:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
    b73a:	4621      	mov	r1, r4
    b73c:	f003 fdf0 	bl	f320 <ull_periph_latency_cancel>
	return 0;
    b740:	4620      	mov	r0, r4
}
    b742:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b744:	2002      	movs	r0, #2
}
    b746:	4770      	bx	lr
    b748:	20000ed0 	.word	0x20000ed0

0000b74c <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b74c:	bb00      	cbnz	r0, b790 <ll_version_ind_send+0x44>
{
    b74e:	b510      	push	{r4, lr}
    b750:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b752:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b756:	480f      	ldr	r0, [pc, #60]	; (b794 <ll_version_ind_send+0x48>)
    b758:	f7fa fb0e 	bl	5d78 <mem_get>
	if (conn->lll.handle != handle) {
    b75c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    b75e:	b984      	cbnz	r4, b782 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
    b760:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    b764:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
    b768:	428a      	cmp	r2, r1
    b76a:	d108      	bne.n	b77e <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b76c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
    b770:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b772:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
    b774:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b778:	db05      	blt.n	b786 <ll_version_ind_send+0x3a>
	return 0;
    b77a:	4620      	mov	r0, r4
}
    b77c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    b77e:	200c      	movs	r0, #12
}
    b780:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b782:	2002      	movs	r0, #2
}
    b784:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
    b786:	4621      	mov	r1, r4
    b788:	f003 fdca 	bl	f320 <ull_periph_latency_cancel>
	return 0;
    b78c:	4620      	mov	r0, r4
}
    b78e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b790:	2002      	movs	r0, #2
}
    b792:	4770      	bx	lr
    b794:	20000ed0 	.word	0x20000ed0

0000b798 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b798:	2800      	cmp	r0, #0
    b79a:	d14c      	bne.n	b836 <ll_length_req_send+0x9e>
{
    b79c:	b538      	push	{r3, r4, r5, lr}
    b79e:	460d      	mov	r5, r1
    b7a0:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b7a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b7a6:	4602      	mov	r2, r0
    b7a8:	4824      	ldr	r0, [pc, #144]	; (b83c <ll_length_req_send+0xa4>)
    b7aa:	f7fa fae5 	bl	5d78 <mem_get>
	if (conn->lll.handle != handle) {
    b7ae:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    b7b0:	bbc3      	cbnz	r3, b824 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
    b7b2:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    b7b6:	071a      	lsls	r2, r3, #28
    b7b8:	d432      	bmi.n	b820 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
    b7ba:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
    b7be:	07d1      	lsls	r1, r2, #31
    b7c0:	d503      	bpl.n	b7ca <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
    b7c2:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
    b7c6:	0692      	lsls	r2, r2, #26
    b7c8:	d52a      	bpl.n	b820 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
    b7ca:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    b7ce:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
    b7d2:	428a      	cmp	r2, r1
    b7d4:	d011      	beq.n	b7fa <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
    b7d6:	f003 0307 	and.w	r3, r3, #7
    b7da:	2b03      	cmp	r3, #3
    b7dc:	d004      	beq.n	b7e8 <ll_length_req_send+0x50>
    b7de:	3303      	adds	r3, #3
    b7e0:	f003 0307 	and.w	r3, r3, #7
    b7e4:	2b01      	cmp	r3, #1
    b7e6:	d824      	bhi.n	b832 <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
    b7e8:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
    b7ec:	bb0b      	cbnz	r3, b832 <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
    b7ee:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
    b7f2:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
    b7f6:	4618      	mov	r0, r3
}
    b7f8:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    b7fa:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
    b7fe:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    b802:	f36f 0302 	bfc	r3, #0, #3
    b806:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b80a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
    b80e:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
    b812:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b814:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
    b816:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b81a:	db05      	blt.n	b828 <ll_length_req_send+0x90>
	return 0;
    b81c:	2000      	movs	r0, #0
}
    b81e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    b820:	201a      	movs	r0, #26
}
    b822:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b824:	2002      	movs	r0, #2
}
    b826:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
    b828:	2100      	movs	r1, #0
    b82a:	f003 fd79 	bl	f320 <ull_periph_latency_cancel>
	return 0;
    b82e:	2000      	movs	r0, #0
}
    b830:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    b832:	200c      	movs	r0, #12
}
    b834:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b836:	2002      	movs	r0, #2
}
    b838:	4770      	bx	lr
    b83a:	bf00      	nop
    b83c:	20000ed0 	.word	0x20000ed0

0000b840 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    b840:	4a03      	ldr	r2, [pc, #12]	; (b850 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
    b842:	4b04      	ldr	r3, [pc, #16]	; (b854 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
    b844:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
    b846:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
    b848:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
    b84a:	800b      	strh	r3, [r1, #0]
}
    b84c:	4770      	bx	lr
    b84e:	bf00      	nop
    b850:	20002786 	.word	0x20002786
    b854:	20002788 	.word	0x20002788

0000b858 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    b858:	4a02      	ldr	r2, [pc, #8]	; (b864 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
    b85a:	4b03      	ldr	r3, [pc, #12]	; (b868 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
    b85c:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
    b85e:	8019      	strh	r1, [r3, #0]
}
    b860:	2000      	movs	r0, #0
    b862:	4770      	bx	lr
    b864:	20002786 	.word	0x20002786
    b868:	20002788 	.word	0x20002788

0000b86c <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    b86c:	f04f 0c1b 	mov.w	ip, #27
    b870:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    b874:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    b878:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    b87c:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    b87e:	8018      	strh	r0, [r3, #0]
}
    b880:	4770      	bx	lr
    b882:	bf00      	nop

0000b884 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b884:	b9c0      	cbnz	r0, b8b8 <ll_phy_get+0x34>
{
    b886:	b538      	push	{r3, r4, r5, lr}
    b888:	460d      	mov	r5, r1
    b88a:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b88c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b890:	4602      	mov	r2, r0
    b892:	480a      	ldr	r0, [pc, #40]	; (b8bc <ll_phy_get+0x38>)
    b894:	f7fa fa70 	bl	5d78 <mem_get>
    b898:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    b89a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    b89c:	b950      	cbnz	r0, b8b4 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
    b89e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    b8a2:	f3c2 0202 	ubfx	r2, r2, #0, #3
    b8a6:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
    b8a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
    b8ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
    b8b0:	7023      	strb	r3, [r4, #0]
}
    b8b2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b8b4:	2002      	movs	r0, #2
}
    b8b6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b8b8:	2002      	movs	r0, #2
}
    b8ba:	4770      	bx	lr
    b8bc:	20000ed0 	.word	0x20000ed0

0000b8c0 <ll_phy_default_set>:
	default_phy_tx = tx;
    b8c0:	4a02      	ldr	r2, [pc, #8]	; (b8cc <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
    b8c2:	4b03      	ldr	r3, [pc, #12]	; (b8d0 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
    b8c4:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
    b8c6:	7019      	strb	r1, [r3, #0]
}
    b8c8:	2000      	movs	r0, #0
    b8ca:	4770      	bx	lr
    b8cc:	2000278f 	.word	0x2000278f
    b8d0:	2000278e 	.word	0x2000278e

0000b8d4 <ll_phy_req_send>:
{
    b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
    b8d6:	2800      	cmp	r0, #0
    b8d8:	d143      	bne.n	b962 <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b8da:	460c      	mov	r4, r1
    b8dc:	4616      	mov	r6, r2
    b8de:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b8e2:	4602      	mov	r2, r0
    b8e4:	4823      	ldr	r0, [pc, #140]	; (b974 <ll_phy_req_send+0xa0>)
    b8e6:	461f      	mov	r7, r3
    b8e8:	f7fa fa46 	bl	5d78 <mem_get>
	if (conn->lll.handle != handle) {
    b8ec:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    b8ee:	bbc3      	cbnz	r3, b962 <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
    b8f0:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
    b8f4:	f015 0508 	ands.w	r5, r5, #8
    b8f8:	d130      	bne.n	b95c <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
    b8fa:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
    b8fe:	07db      	lsls	r3, r3, #31
    b900:	d504      	bpl.n	b90c <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
    b902:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    b906:	f413 6f10 	tst.w	r3, #2304	; 0x900
    b90a:	d027      	beq.n	b95c <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
    b90c:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
    b910:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
    b914:	4299      	cmp	r1, r3
    b916:	d11e      	bne.n	b956 <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    b918:	f004 0407 	and.w	r4, r4, #7
    b91c:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
    b920:	00a4      	lsls	r4, r4, #2
    b922:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    b926:	f007 0307 	and.w	r3, r7, #7
    b92a:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
    b92e:	f006 0601 	and.w	r6, r6, #1
    b932:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
    b936:	f022 0207 	bic.w	r2, r2, #7
    b93a:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
    b93e:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b940:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    b944:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
    b948:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b94a:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
    b94c:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    b950:	db0a      	blt.n	b968 <ll_phy_req_send+0x94>
}
    b952:	4628      	mov	r0, r5
    b954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    b956:	250c      	movs	r5, #12
}
    b958:	4628      	mov	r0, r5
    b95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    b95c:	251a      	movs	r5, #26
}
    b95e:	4628      	mov	r0, r5
    b960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b962:	2502      	movs	r5, #2
}
    b964:	4628      	mov	r0, r5
    b966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
    b968:	2100      	movs	r1, #0
    b96a:	f003 fcd9 	bl	f320 <ull_periph_latency_cancel>
}
    b96e:	4628      	mov	r0, r5
    b970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b972:	bf00      	nop
    b974:	20000ed0 	.word	0x20000ed0

0000b978 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b978:	b9d8      	cbnz	r0, b9b2 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b97a:	4602      	mov	r2, r0
{
    b97c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b97e:	480e      	ldr	r0, [pc, #56]	; (b9b8 <ll_apto_get+0x40>)
    b980:	460c      	mov	r4, r1
    b982:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b986:	f7fa f9f7 	bl	5d78 <mem_get>
    b98a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    b98c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    b98e:	b970      	cbnz	r0, b9ae <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
    b990:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
    b994:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    b996:	fb02 f303 	mul.w	r3, r2, r3
    b99a:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    b99e:	4a07      	ldr	r2, [pc, #28]	; (b9bc <ll_apto_get+0x44>)
    b9a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    b9a4:	fba2 2303 	umull	r2, r3, r2, r3
    b9a8:	099b      	lsrs	r3, r3, #6
    b9aa:	8023      	strh	r3, [r4, #0]
}
    b9ac:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b9ae:	2002      	movs	r0, #2
}
    b9b0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b9b2:	2002      	movs	r0, #2
}
    b9b4:	4770      	bx	lr
    b9b6:	bf00      	nop
    b9b8:	20000ed0 	.word	0x20000ed0
    b9bc:	10624dd3 	.word	0x10624dd3

0000b9c0 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    b9c0:	b9e0      	cbnz	r0, b9fc <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b9c2:	4602      	mov	r2, r0
{
    b9c4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    b9c6:	480e      	ldr	r0, [pc, #56]	; (ba00 <ll_apto_set+0x40>)
    b9c8:	460c      	mov	r4, r1
    b9ca:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b9ce:	f7fa f9d3 	bl	5d78 <mem_get>
    b9d2:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    b9d4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    b9d6:	b978      	cbnz	r0, b9f8 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
    b9d8:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
    b9dc:	f240 43e2 	movw	r3, #1250	; 0x4e2
    b9e0:	fb03 fc0c 	mul.w	ip, r3, ip
    b9e4:	f242 7310 	movw	r3, #10000	; 0x2710
    b9e8:	fb03 c304 	mla	r3, r3, r4, ip
    b9ec:	3b01      	subs	r3, #1
    b9ee:	fbb3 f3fc 	udiv	r3, r3, ip
    b9f2:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
    b9f6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b9f8:	2002      	movs	r0, #2
}
    b9fa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b9fc:	2002      	movs	r0, #2
}
    b9fe:	4770      	bx	lr
    ba00:	20000ed0 	.word	0x20000ed0

0000ba04 <ull_conn_init>:
	err = init_reset();
    ba04:	f7fe beea 	b.w	a7dc <init_reset>

0000ba08 <ull_conn_reset>:
{
    ba08:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ba0a:	2200      	movs	r2, #0
    ba0c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    ba10:	4815      	ldr	r0, [pc, #84]	; (ba68 <ull_conn_reset+0x60>)
    ba12:	f7fa f9b1 	bl	5d78 <mem_get>
    ba16:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
    ba18:	f100 021c 	add.w	r2, r0, #28
    ba1c:	4601      	mov	r1, r0
    ba1e:	2003      	movs	r0, #3
    ba20:	f7fd fe1a 	bl	9658 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    ba24:	b108      	cbz	r0, ba2a <ull_conn_reset+0x22>
    ba26:	3078      	adds	r0, #120	; 0x78
    ba28:	d10f      	bne.n	ba4a <ull_conn_reset+0x42>
	MFIFO_INIT(conn_tx);
    ba2a:	4810      	ldr	r0, [pc, #64]	; (ba6c <ull_conn_reset+0x64>)
	MFIFO_INIT(conn_ack);
    ba2c:	4910      	ldr	r1, [pc, #64]	; (ba70 <ull_conn_reset+0x68>)
	conn_upd_curr = NULL;
    ba2e:	4a11      	ldr	r2, [pc, #68]	; (ba74 <ull_conn_reset+0x6c>)
	conn->lll.link_tx_free = NULL;
    ba30:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
    ba32:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
    ba36:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
    ba38:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
    ba3a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
    ba3e:	6763      	str	r3, [r4, #116]	; 0x74
}
    ba40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
    ba44:	6013      	str	r3, [r2, #0]
	err = init_reset();
    ba46:	f7fe bec9 	b.w	a7dc <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
    ba4a:	4a0b      	ldr	r2, [pc, #44]	; (ba78 <ull_conn_reset+0x70>)
    ba4c:	490b      	ldr	r1, [pc, #44]	; (ba7c <ull_conn_reset+0x74>)
    ba4e:	480c      	ldr	r0, [pc, #48]	; (ba80 <ull_conn_reset+0x78>)
    ba50:	f640 03d4 	movw	r3, #2260	; 0x8d4
    ba54:	f00b fa8b 	bl	16f6e <printk>
    ba58:	4040      	eors	r0, r0
    ba5a:	f380 8811 	msr	BASEPRI, r0
    ba5e:	f04f 0003 	mov.w	r0, #3
    ba62:	df02      	svc	2
    ba64:	e7e1      	b.n	ba2a <ull_conn_reset+0x22>
    ba66:	bf00      	nop
    ba68:	20000ed0 	.word	0x20000ed0
    ba6c:	2000055c 	.word	0x2000055c
    ba70:	20000518 	.word	0x20000518
    ba74:	20001cbc 	.word	0x20001cbc
    ba78:	0001bc28 	.word	0x0001bc28
    ba7c:	0001bd38 	.word	0x0001bd38
    ba80:	0001b7c8 	.word	0x0001b7c8

0000ba84 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
    ba84:	4b01      	ldr	r3, [pc, #4]	; (ba8c <ull_conn_default_tx_octets_get+0x8>)
}
    ba86:	8818      	ldrh	r0, [r3, #0]
    ba88:	4770      	bx	lr
    ba8a:	bf00      	nop
    ba8c:	20002786 	.word	0x20002786

0000ba90 <ull_conn_default_tx_time_get>:
	return default_tx_time;
    ba90:	4b01      	ldr	r3, [pc, #4]	; (ba98 <ull_conn_default_tx_time_get+0x8>)
}
    ba92:	8818      	ldrh	r0, [r3, #0]
    ba94:	4770      	bx	lr
    ba96:	bf00      	nop
    ba98:	20002788 	.word	0x20002788

0000ba9c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
    ba9c:	4b01      	ldr	r3, [pc, #4]	; (baa4 <ull_conn_default_phy_tx_get+0x8>)
}
    ba9e:	7818      	ldrb	r0, [r3, #0]
    baa0:	4770      	bx	lr
    baa2:	bf00      	nop
    baa4:	2000278f 	.word	0x2000278f

0000baa8 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
    baa8:	4b01      	ldr	r3, [pc, #4]	; (bab0 <ull_conn_default_phy_rx_get+0x8>)
}
    baaa:	7818      	ldrb	r0, [r3, #0]
    baac:	4770      	bx	lr
    baae:	bf00      	nop
    bab0:	2000278e 	.word	0x2000278e

0000bab4 <ull_conn_setup>:
{
    bab4:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
    bab6:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
    bab8:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
    baba:	681d      	ldr	r5, [r3, #0]
    babc:	782b      	ldrb	r3, [r5, #0]
{
    babe:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
    bac0:	b193      	cbz	r3, bae8 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
    bac2:	696b      	ldr	r3, [r5, #20]
    bac4:	b163      	cbz	r3, bae0 <ull_conn_setup+0x2c>
    bac6:	4a0b      	ldr	r2, [pc, #44]	; (baf4 <ull_conn_setup+0x40>)
    bac8:	490b      	ldr	r1, [pc, #44]	; (baf8 <ull_conn_setup+0x44>)
    baca:	480c      	ldr	r0, [pc, #48]	; (bafc <ull_conn_setup+0x48>)
    bacc:	f240 33ed 	movw	r3, #1005	; 0x3ed
    bad0:	f00b fa4d 	bl	16f6e <printk>
    bad4:	4040      	eors	r0, r0
    bad6:	f380 8811 	msr	BASEPRI, r0
    bada:	f04f 0003 	mov.w	r0, #3
    bade:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
    bae0:	4b07      	ldr	r3, [pc, #28]	; (bb00 <ull_conn_setup+0x4c>)
    bae2:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
    bae6:	bd38      	pop	{r3, r4, r5, pc}
    bae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
    baec:	4608      	mov	r0, r1
    baee:	f7ff b86f 	b.w	abd0 <conn_setup_adv_scan_disabled_cb>
    baf2:	bf00      	nop
    baf4:	0001bc28 	.word	0x0001bc28
    baf8:	0001bb80 	.word	0x0001bb80
    bafc:	0001b7c8 	.word	0x0001b7c8
    bb00:	0000abd1 	.word	0x0000abd1

0000bb04 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    bb04:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
    bb06:	88da      	ldrh	r2, [r3, #6]
    bb08:	2a00      	cmp	r2, #0
    bb0a:	f040 80cd 	bne.w	bca8 <ull_conn_rx+0x1a4>
{
    bb0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb12:	460e      	mov	r6, r1
    bb14:	b085      	sub	sp, #20
    bb16:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    bb18:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    bb1c:	48bb      	ldr	r0, [pc, #748]	; (be0c <ull_conn_rx+0x308>)
    bb1e:	f7fa f92b 	bl	5d78 <mem_get>
	if (conn->lll.handle != handle) {
    bb22:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    bb24:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    bb26:	2b00      	cmp	r3, #0
    bb28:	f040 80b7 	bne.w	bc9a <ull_conn_rx+0x196>
	pdu_rx = (void *)(*rx)->pdu;
    bb2c:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    bb2e:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
	switch (pdu_rx->ll_id) {
    bb32:	7f29      	ldrb	r1, [r5, #28]
    bb34:	f001 0103 	and.w	r1, r1, #3
    bb38:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    bb3a:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
    bb3e:	d128      	bne.n	bb92 <ull_conn_rx+0x8e>
	opcode = pdu_rx->llctrl.opcode;
    bb40:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
    bb44:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    bb48:	b3c8      	cbz	r0, bbbe <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    bb4a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    bb4e:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
    bb50:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    bb54:	f2c0 80ac 	blt.w	bcb0 <ull_conn_rx+0x1ac>
	return (!conn->lll.role &&
    bb58:	2900      	cmp	r1, #0
    bb5a:	f040 80fd 	bne.w	bd58 <ull_conn_rx+0x254>
		((!conn->llcp_enc.refresh &&
    bb5e:	f1b8 0f02 	cmp.w	r8, #2
    bb62:	f000 810d 	beq.w	bd80 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    bb66:	f1b8 0f05 	cmp.w	r8, #5
    bb6a:	d04a      	beq.n	bc02 <ull_conn_rx+0xfe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    bb6c:	f1b8 0f06 	cmp.w	r8, #6
    bb70:	f000 8366 	beq.w	c240 <ull_conn_rx+0x73c>
    bb74:	f1b8 0f0d 	cmp.w	r8, #13
    bb78:	f000 81da 	beq.w	bf30 <ull_conn_rx+0x42c>
    bb7c:	f1b8 0f11 	cmp.w	r8, #17
    bb80:	f000 826c 	beq.w	c05c <ull_conn_rx+0x558>
		conn->llcp_terminate.reason_final =
    bb84:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bb86:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
    bb88:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
    bb8c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bb8e:	712b      	strb	r3, [r5, #4]
		return 0;
    bb90:	e007      	b.n	bba2 <ull_conn_rx+0x9e>
	switch (pdu_rx->ll_id) {
    bb92:	b949      	cbnz	r1, bba8 <ull_conn_rx+0xa4>
		if (conn->llcp_enc.pause_rx) {
    bb94:	b110      	cbz	r0, bb9c <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_final =
    bb96:	233d      	movs	r3, #61	; 0x3d
    bb98:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bb9c:	2301      	movs	r3, #1
    bb9e:	712b      	strb	r3, [r5, #4]
	return 0;
    bba0:	2000      	movs	r0, #0
}
    bba2:	b005      	add	sp, #20
    bba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
    bba8:	2800      	cmp	r0, #0
    bbaa:	d0f9      	beq.n	bba0 <ull_conn_rx+0x9c>
			conn->llcp_terminate.reason_final =
    bbac:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bbae:	2201      	movs	r2, #1
	return 0;
    bbb0:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
    bbb2:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bbb6:	712a      	strb	r2, [r5, #4]
}
    bbb8:	b005      	add	sp, #20
    bbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
    bbbe:	f1b8 0f18 	cmp.w	r8, #24
    bbc2:	d81e      	bhi.n	bc02 <ull_conn_rx+0xfe>
    bbc4:	e8df f018 	tbh	[pc, r8, lsl #1]
    bbc8:	02800126 	.word	0x02800126
    bbcc:	001900dc 	.word	0x001900dc
    bbd0:	001d001d 	.word	0x001d001d
    bbd4:	03e3033c 	.word	0x03e3033c
    bbd8:	03030367 	.word	0x03030367
    bbdc:	047602ba 	.word	0x047602ba
    bbe0:	01b401f7 	.word	0x01b401f7
    bbe4:	019f001d 	.word	0x019f001d
    bbe8:	024a001d 	.word	0x024a001d
    bbec:	01950226 	.word	0x01950226
    bbf0:	00e800e8 	.word	0x00e800e8
    bbf4:	001d0446 	.word	0x001d0446
    bbf8:	0409      	.short	0x0409
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
    bbfa:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    bbfe:	2b00      	cmp	r3, #0
    bc00:	db63      	blt.n	bcca <ull_conn_rx+0x1c6>
	if (conn->common.txn_lock) {
    bc02:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    bc06:	0798      	lsls	r0, r3, #30
    bc08:	d4c8      	bmi.n	bb9c <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    bc0a:	4881      	ldr	r0, [pc, #516]	; (be10 <ull_conn_rx+0x30c>)
    bc0c:	f7fa f882 	bl	5d14 <mem_acquire>
	if (!tx) {
    bc10:	2800      	cmp	r0, #0
    bc12:	f000 851b 	beq.w	c64c <ull_conn_rx+0xb48>
	conn->common.txn_lock = 1U;
    bc16:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    bc1a:	f043 0302 	orr.w	r3, r3, #2
    bc1e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bc22:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
    bc24:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bc28:	f043 0303 	orr.w	r3, r3, #3
    bc2c:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    bc2e:	2302      	movs	r3, #2
    bc30:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    bc32:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    bc36:	2307      	movs	r3, #7
    bc38:	71c3      	strb	r3, [r0, #7]
	if (
    bc3a:	b1f2      	cbz	r2, bc7a <ull_conn_rx+0x176>
	    !conn->llcp_enc.pause_tx &&
    bc3c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
    bc40:	0799      	lsls	r1, r3, #30
    bc42:	d41a      	bmi.n	bc7a <ull_conn_rx+0x176>
	    !conn->llcp_phy.pause_tx &&
    bc44:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    bc48:	07db      	lsls	r3, r3, #31
    bc4a:	d416      	bmi.n	bc7a <ull_conn_rx+0x176>
		if (conn->tx_head == conn->tx_data) {
    bc4c:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
    bc50:	429a      	cmp	r2, r3
    bc52:	f000 8504 	beq.w	c65e <ull_conn_rx+0xb5a>
		} else if (!conn->tx_ctrl) {
    bc56:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    bc5a:	2b00      	cmp	r3, #0
    bc5c:	f000 8552 	beq.w	c704 <ull_conn_rx+0xc00>
	tx->next = conn->tx_ctrl_last->next;
    bc60:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
    bc64:	6813      	ldr	r3, [r2, #0]
    bc66:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    bc68:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    bc6a:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    bc6c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    bc70:	2a00      	cmp	r2, #0
    bc72:	d193      	bne.n	bb9c <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
    bc74:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    bc78:	e790      	b.n	bb9c <ull_conn_rx+0x98>
		if (!conn->tx_ctrl) {
    bc7a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    bc7e:	2b00      	cmp	r3, #0
    bc80:	f000 84da 	beq.w	c638 <ull_conn_rx+0xb34>
	tx->next = conn->tx_ctrl_last->next;
    bc84:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    bc88:	681a      	ldr	r2, [r3, #0]
    bc8a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    bc8c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    bc8e:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    bc90:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    bc94:	2a00      	cmp	r2, #0
    bc96:	d181      	bne.n	bb9c <ull_conn_rx+0x98>
    bc98:	e7ec      	b.n	bc74 <ull_conn_rx+0x170>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bc9a:	6833      	ldr	r3, [r6, #0]
    bc9c:	2201      	movs	r2, #1
		return 0;
    bc9e:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bca0:	711a      	strb	r2, [r3, #4]
}
    bca2:	b005      	add	sp, #20
    bca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bca8:	2201      	movs	r2, #1
    bcaa:	711a      	strb	r2, [r3, #4]
		return 0;
    bcac:	2000      	movs	r0, #0
}
    bcae:	4770      	bx	lr
	       (conn->lll.role &&
    bcb0:	2900      	cmp	r1, #0
    bcb2:	d05d      	beq.n	bd70 <ull_conn_rx+0x26c>
		 (conn->llcp_enc.refresh &&
    bcb4:	f1b8 0f02 	cmp.w	r8, #2
    bcb8:	d062      	beq.n	bd80 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    bcba:	f1b8 0f0b 	cmp.w	r8, #11
    bcbe:	f000 84e1 	beq.w	c684 <ull_conn_rx+0xb80>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    bcc2:	f1b8 0f03 	cmp.w	r8, #3
    bcc6:	f47f af51 	bne.w	bb6c <ull_conn_rx+0x68>
		if (!conn->lll.role ||
    bcca:	7f6b      	ldrb	r3, [r5, #29]
    bccc:	2b17      	cmp	r3, #23
    bcce:	d198      	bne.n	bc02 <ull_conn_rx+0xfe>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
    bcd0:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
    bcd4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    bcd8:	1a9b      	subs	r3, r3, r2
    bcda:	f003 0303 	and.w	r3, r3, #3
    bcde:	2b02      	cmp	r3, #2
    bce0:	f001 818c 	beq.w	cffc <ull_conn_rx+0x14f8>

		/* Start Enc Req to be scheduled by LL api */
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
    bce4:	2208      	movs	r2, #8
    bce6:	f105 0120 	add.w	r1, r5, #32
    bcea:	f204 1069 	addw	r0, r4, #361	; 0x169
    bcee:	f00b ff05 	bl	17afc <memcpy>
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
    bcf2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    bcf6:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
    bcfa:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29

		/* Enc rsp to be scheduled in central prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    bcfe:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
    bd02:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bd06:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    bd08:	2301      	movs	r3, #1
    bd0a:	f363 0201 	bfi	r2, r3, #0, #2
    bd0e:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bd12:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
    bd14:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
    bd18:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
    bd1a:	3b02      	subs	r3, #2
    bd1c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* things from central stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[0],
    bd20:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
    bd22:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
    bd26:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    bd2a:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    bd2e:	f00b fee5 	bl	17afc <memcpy>
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
    bd32:	2204      	movs	r2, #4
    bd34:	f105 0132 	add.w	r1, r5, #50	; 0x32
    bd38:	f104 0094 	add.w	r0, r4, #148	; 0x94
    bd3c:	f00b fede 	bl	17afc <memcpy>
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
    bd40:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    bd44:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    bd48:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
    bd4c:	f043 0301 	orr.w	r3, r3, #1
    bd50:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
    bd54:	2000      	movs	r0, #0

		break;
    bd56:	e724      	b.n	bba2 <ull_conn_rx+0x9e>
		 (conn->llcp_enc.refresh &&
    bd58:	f1b8 0f02 	cmp.w	r8, #2
    bd5c:	d010      	beq.n	bd80 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    bd5e:	f1b8 0f0b 	cmp.w	r8, #11
    bd62:	f000 8477 	beq.w	c654 <ull_conn_rx+0xb50>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    bd66:	f1b8 0f04 	cmp.w	r8, #4
    bd6a:	f47f aefc 	bne.w	bb66 <ull_conn_rx+0x62>
    bd6e:	e748      	b.n	bc02 <ull_conn_rx+0xfe>
		((!conn->llcp_enc.refresh &&
    bd70:	f1b8 0f07 	cmp.w	r8, #7
    bd74:	f000 830b 	beq.w	c38e <ull_conn_rx+0x88a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    bd78:	f1b8 0f02 	cmp.w	r8, #2
    bd7c:	f47f aef6 	bne.w	bb6c <ull_conn_rx+0x68>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
    bd80:	7f6b      	ldrb	r3, [r5, #29]
    bd82:	2b02      	cmp	r3, #2
    bd84:	f47f af3d 	bne.w	bc02 <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_final =
    bd88:	f895 2020 	ldrb.w	r2, [r5, #32]
    bd8c:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    bd90:	2301      	movs	r3, #1
	int nack = 0;
    bd92:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    bd94:	712b      	strb	r3, [r5, #4]
}
    bd96:	e704      	b.n	bba2 <ull_conn_rx+0x9e>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
    bd98:	7f6b      	ldrb	r3, [r5, #29]
    bd9a:	2b09      	cmp	r3, #9
    bd9c:	f47f af31 	bne.w	bc02 <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    bda0:	f1b8 0f14 	cmp.w	r8, #20
    bda4:	f000 84b8 	beq.w	c718 <ull_conn_rx+0xc14>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    bda8:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
    bdac:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
    bdb0:	4293      	cmp	r3, r2
    bdb2:	f001 804a 	beq.w	ce4a <ull_conn_rx+0x1346>
	eff_rx_octets = conn->lll.max_rx_octets;
    bdb6:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
    bdba:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
    bdbe:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
    bdc2:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    bdc6:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
    bdca:	2300      	movs	r3, #0
	       tx) ||
    bdcc:	f001 0107 	and.w	r1, r1, #7
    bdd0:	2902      	cmp	r1, #2
    bdd2:	f000 84c1 	beq.w	c758 <ull_conn_rx+0xc54>
    bdd6:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
    bdda:	f1b8 0f15 	cmp.w	r8, #21
    bdde:	f43f aedf 	beq.w	bba0 <ull_conn_rx+0x9c>
			mem_release(tx, &mem_conn_tx_ctrl.free);
    bde2:	4618      	mov	r0, r3
    bde4:	490a      	ldr	r1, [pc, #40]	; (be10 <ull_conn_rx+0x30c>)
    bde6:	f7f9 ffaf 	bl	5d48 <mem_release>
			if (conn->llcp_length.state ==
    bdea:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
    bdee:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
    bdf2:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
    bdf6:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
    bdfa:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
    bdfc:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
    be00:	f47f aece 	bne.w	bba0 <ull_conn_rx+0x9c>
				return -EBUSY;
    be04:	f06f 000f 	mvn.w	r0, #15
    be08:	e6cb      	b.n	bba2 <ull_conn_rx+0x9e>
    be0a:	bf00      	nop
    be0c:	20000ed0 	.word	0x20000ed0
    be10:	20001d50 	.word	0x20001d50
		if (!conn->lll.role ||
    be14:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    be18:	2b00      	cmp	r3, #0
    be1a:	f6bf aef2 	bge.w	bc02 <ull_conn_rx+0xfe>
    be1e:	7f6b      	ldrb	r3, [r5, #29]
    be20:	2b0c      	cmp	r3, #12
    be22:	f47f aeee 	bne.w	bc02 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
    be26:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
    be2a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    be2c:	1ad3      	subs	r3, r2, r3
    be2e:	041b      	lsls	r3, r3, #16
    be30:	f100 8744 	bmi.w	ccbc <ull_conn_rx+0x11b8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    be34:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    be38:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    be3c:	1a5b      	subs	r3, r3, r1
    be3e:	f003 0303 	and.w	r3, r3, #3
    be42:	2b02      	cmp	r3, #2
    be44:	f000 87c4 	beq.w	cdd0 <ull_conn_rx+0x12cc>
	if (!conn_upd_curr) {
    be48:	4bba      	ldr	r3, [pc, #744]	; (c134 <ull_conn_rx+0x630>)
    be4a:	6819      	ldr	r1, [r3, #0]
    be4c:	2900      	cmp	r1, #0
    be4e:	f000 87e9 	beq.w	ce24 <ull_conn_rx+0x1320>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
    be52:	f895 3020 	ldrb.w	r3, [r5, #32]
    be56:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
    be5a:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
    be5e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    be62:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
    be66:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
    be6a:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    be6e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    be72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
    be76:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
    be7a:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    be7e:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    be82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
    be86:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    be8a:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    be8e:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
    be92:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
    be96:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    be9a:	f023 030f 	bic.w	r3, r3, #15
    be9e:	f043 0308 	orr.w	r3, r3, #8
    bea2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
    bea6:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    beaa:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
    beae:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
    beb2:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
    beb4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
    beb8:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
    bebc:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
    bebe:	6832      	ldr	r2, [r6, #0]
    bec0:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
    bec2:	6832      	ldr	r2, [r6, #0]
    bec4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
    bec8:	2300      	movs	r3, #0
    beca:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    becc:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    bed0:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    bed4:	4293      	cmp	r3, r2
    bed6:	d007      	beq.n	bee8 <ull_conn_rx+0x3e4>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
    bed8:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    bedc:	f003 030e 	and.w	r3, r3, #14
    bee0:	2b04      	cmp	r3, #4
    bee2:	d101      	bne.n	bee8 <ull_conn_rx+0x3e4>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bee4:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
    bee8:	2300      	movs	r3, #0
    beea:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    beee:	4618      	mov	r0, r3
		break;
    bef0:	e657      	b.n	bba2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
    bef2:	7f6a      	ldrb	r2, [r5, #29]
    bef4:	2a01      	cmp	r2, #1
    bef6:	f47f ae84 	bne.w	bc02 <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
    befa:	2300      	movs	r3, #0
    befc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    bf00:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    bf02:	712a      	strb	r2, [r5, #4]
		break;
    bf04:	e64d      	b.n	bba2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
    bf06:	7f6b      	ldrb	r3, [r5, #29]
    bf08:	2b18      	cmp	r3, #24
    bf0a:	f47f ae7a 	bne.w	bc02 <ull_conn_rx+0xfe>
	return conn_upd_curr && (conn_upd_curr != conn);
    bf0e:	4889      	ldr	r0, [pc, #548]	; (c134 <ull_conn_rx+0x630>)
    bf10:	6803      	ldr	r3, [r0, #0]
    bf12:	2b00      	cmp	r3, #0
    bf14:	f000 83c2 	beq.w	c69c <ull_conn_rx+0xb98>
    bf18:	429c      	cmp	r4, r3
    bf1a:	f000 83bf 	beq.w	c69c <ull_conn_rx+0xb98>
			nack = reject_ext_ind_send(conn, *rx,
    bf1e:	2320      	movs	r3, #32
    bf20:	220f      	movs	r2, #15
    bf22:	4629      	mov	r1, r5
    bf24:	4620      	mov	r0, r4
}
    bf26:	b005      	add	sp, #20
    bf28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
    bf2c:	f7fe bf24 	b.w	ad78 <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
    bf30:	7f6b      	ldrb	r3, [r5, #29]
    bf32:	2b02      	cmp	r3, #2
    bf34:	f47f ae65 	bne.w	bc02 <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
    bf38:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    bf3c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    bf40:	4293      	cmp	r3, r2
    bf42:	d004      	beq.n	bf4e <ull_conn_rx+0x44a>
    bf44:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    bf48:	2b03      	cmp	r3, #3
    bf4a:	f000 86a1 	beq.w	cc90 <ull_conn_rx+0x118c>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    bf4e:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
    bf52:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    bf56:	4293      	cmp	r3, r2
    bf58:	f000 84eb 	beq.w	c932 <ull_conn_rx+0xe2e>
		rej_ext_ind->error_code = rej_ind->error_code;
    bf5c:	f895 1020 	ldrb.w	r1, [r5, #32]
    bf60:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    bf64:	2923      	cmp	r1, #35	; 0x23
    bf66:	d012      	beq.n	bf8e <ull_conn_rx+0x48a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    bf68:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
    bf6c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    bf70:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
    bf74:	f36f 0200 	bfc	r2, #0, #1
    bf78:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
    bf7c:	2200      	movs	r2, #0
    bf7e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    bf82:	f3c3 0202 	ubfx	r2, r3, #0, #3
    bf86:	f362 1306 	bfi	r3, r2, #4, #3
    bf8a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
    bf8e:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    bf92:	075e      	lsls	r6, r3, #29
    bf94:	f57f ae02 	bpl.w	bb9c <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    bf98:	231c      	movs	r3, #28
    bf9a:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
    bf9c:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
    bf9e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    bfa2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bfa6:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
    bfa8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    bfac:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
    bfb0:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
    bfb2:	77ab      	strb	r3, [r5, #30]
	if (err) {
    bfb4:	e5f5      	b.n	bba2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
    bfb6:	7f6e      	ldrb	r6, [r5, #29]
    bfb8:	2e06      	cmp	r6, #6
    bfba:	f47f ae22 	bne.w	bc02 <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
    bfbe:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    bfc2:	07df      	lsls	r7, r3, #31
    bfc4:	f140 85aa 	bpl.w	cb1c <ull_conn_rx+0x1018>
	} else if (!conn->llcp_version.rx) {
    bfc8:	f013 0302 	ands.w	r3, r3, #2
    bfcc:	f47f ade6 	bne.w	bb9c <ull_conn_rx+0x98>
		conn->llcp_version.ack = conn->llcp_version.req;
    bfd0:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
    bfd4:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
    bfd8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
    bfdc:	f895 3020 	ldrb.w	r3, [r5, #32]
    bfe0:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    bfe4:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    bfe8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
    bfec:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    bff0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    bff4:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
    bff8:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    bffc:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
    c000:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
    c004:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
    c008:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
    c00c:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
    c010:	2000      	movs	r0, #0
    c012:	e5c6      	b.n	bba2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
    c014:	7f6f      	ldrb	r7, [r5, #29]
    c016:	2f01      	cmp	r7, #1
    c018:	f47f adf3 	bne.w	bc02 <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
    c01c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    c020:	f013 0602 	ands.w	r6, r3, #2
    c024:	f040 85a5 	bne.w	cb72 <ull_conn_rx+0x106e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    c028:	4843      	ldr	r0, [pc, #268]	; (c138 <ull_conn_rx+0x634>)
    c02a:	f7f9 fe73 	bl	5d14 <mem_acquire>
	if (!tx) {
    c02e:	4601      	mov	r1, r0
    c030:	2800      	cmp	r0, #0
    c032:	f000 830b 	beq.w	c64c <ull_conn_rx+0xb48>
	conn->common.txn_lock = 1U;
    c036:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    c03a:	f043 0302 	orr.w	r3, r3, #2
    c03e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    c042:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    c044:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    c046:	f043 0303 	orr.w	r3, r3, #3
    c04a:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    c04c:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
    c04e:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    c050:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    c052:	f7fe fce9 	bl	aa28 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    c056:	712f      	strb	r7, [r5, #4]
	return 0;
    c058:	4630      	mov	r0, r6
    c05a:	e5a2      	b.n	bba2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
    c05c:	7f6b      	ldrb	r3, [r5, #29]
    c05e:	2b03      	cmp	r3, #3
    c060:	f47f adcf 	bne.w	bc02 <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
    c064:	f895 3020 	ldrb.w	r3, [r5, #32]
    c068:	3b03      	subs	r3, #3
    c06a:	2b13      	cmp	r3, #19
    c06c:	f63f ad96 	bhi.w	bb9c <ull_conn_rx+0x98>
    c070:	a201      	add	r2, pc, #4	; (adr r2, c078 <ull_conn_rx+0x574>)
    c072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c076:	bf00      	nop
    c078:	0000c5ab 	.word	0x0000c5ab
    c07c:	0000bb9d 	.word	0x0000bb9d
    c080:	0000bb9d 	.word	0x0000bb9d
    c084:	0000bb9d 	.word	0x0000bb9d
    c088:	0000bb9d 	.word	0x0000bb9d
    c08c:	0000bb9d 	.word	0x0000bb9d
    c090:	0000bb9d 	.word	0x0000bb9d
    c094:	0000bb9d 	.word	0x0000bb9d
    c098:	0000bb9d 	.word	0x0000bb9d
    c09c:	0000bb9d 	.word	0x0000bb9d
    c0a0:	0000bb9d 	.word	0x0000bb9d
    c0a4:	0000bb9d 	.word	0x0000bb9d
    c0a8:	0000c531 	.word	0x0000c531
    c0ac:	0000bb9d 	.word	0x0000bb9d
    c0b0:	0000bb9d 	.word	0x0000bb9d
    c0b4:	0000bb9d 	.word	0x0000bb9d
    c0b8:	0000bb9d 	.word	0x0000bb9d
    c0bc:	0000c4f3 	.word	0x0000c4f3
    c0c0:	0000bb9d 	.word	0x0000bb9d
    c0c4:	0000c5eb 	.word	0x0000c5eb
		if (!conn->lll.role ||
    c0c8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    c0cc:	2b00      	cmp	r3, #0
    c0ce:	f6bf ad98 	bge.w	bc02 <ull_conn_rx+0xfe>
    c0d2:	7f6b      	ldrb	r3, [r5, #29]
    c0d4:	2b08      	cmp	r3, #8
    c0d6:	f47f ad94 	bne.w	bc02 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
    c0da:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    c0de:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    c0e0:	1af3      	subs	r3, r6, r3
    c0e2:	041f      	lsls	r7, r3, #16
    c0e4:	f100 85ea 	bmi.w	ccbc <ull_conn_rx+0x11b8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    c0e8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    c0ec:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
    c0f0:	1a9b      	subs	r3, r3, r2
    c0f2:	f003 0303 	and.w	r3, r3, #3
    c0f6:	2b02      	cmp	r3, #2
    c0f8:	f000 866a 	beq.w	cdd0 <ull_conn_rx+0x12cc>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
    c0fc:	2205      	movs	r2, #5
    c0fe:	f105 0120 	add.w	r1, r5, #32
    c102:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
    c106:	f00b fcf9 	bl	17afc <memcpy>
	conn->llcp.chan_map.initiate = 0U;
    c10a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
    c10e:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
    c112:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
    c116:	f36f 0200 	bfc	r2, #0, #1
    c11a:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
    c11e:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
    c120:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    c122:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
    c124:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
    c128:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
    c12c:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    c12e:	712a      	strb	r2, [r5, #4]
		if (err) {
    c130:	e537      	b.n	bba2 <ull_conn_rx+0x9e>
    c132:	bf00      	nop
    c134:	20001cbc 	.word	0x20001cbc
    c138:	20001d50 	.word	0x20001d50
		if (!conn->lll.role ||
    c13c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    c140:	2b00      	cmp	r3, #0
    c142:	f6bf ad5e 	bge.w	bc02 <ull_conn_rx+0xfe>
    c146:	7f6e      	ldrb	r6, [r5, #29]
    c148:	2e01      	cmp	r6, #1
    c14a:	f47f ad5a 	bne.w	bc02 <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    c14e:	48d7      	ldr	r0, [pc, #860]	; (c4ac <ull_conn_rx+0x9a8>)
    c150:	f7f9 fde0 	bl	5d14 <mem_acquire>
		if (!tx) {
    c154:	2800      	cmp	r0, #0
    c156:	f000 8279 	beq.w	c64c <ull_conn_rx+0xb48>
	conn->llcp_enc.pause_rx = 1U;
    c15a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
    c15e:	f023 0305 	bic.w	r3, r3, #5
    c162:	f043 0305 	orr.w	r3, r3, #5
    c166:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
    c16a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    c16e:	f36f 03c3 	bfc	r3, #3, #1
    c172:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c176:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    c178:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c17a:	f043 0303 	orr.w	r3, r3, #3
    c17e:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
    c180:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    c184:	220b      	movs	r2, #11
    c186:	71c2      	strb	r2, [r0, #7]
	if (
    c188:	2b00      	cmp	r3, #0
    c18a:	f000 82b0 	beq.w	c6ee <ull_conn_rx+0xbea>
	    !conn->llcp_enc.pause_tx &&
    c18e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    c192:	0791      	lsls	r1, r2, #30
    c194:	f100 82ab 	bmi.w	c6ee <ull_conn_rx+0xbea>
	    !conn->llcp_phy.pause_tx &&
    c198:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    c19c:	07d2      	lsls	r2, r2, #31
    c19e:	f100 82a6 	bmi.w	c6ee <ull_conn_rx+0xbea>
		if (conn->tx_head == conn->tx_data) {
    c1a2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    c1a6:	4293      	cmp	r3, r2
    c1a8:	f000 8752 	beq.w	d050 <ull_conn_rx+0x154c>
		} else if (!conn->tx_ctrl) {
    c1ac:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    c1b0:	2a00      	cmp	r2, #0
    c1b2:	f000 8765 	beq.w	d080 <ull_conn_rx+0x157c>
	tx->next = conn->tx_ctrl_last->next;
    c1b6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    c1ba:	681a      	ldr	r2, [r3, #0]
    c1bc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    c1be:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    c1c0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    c1c4:	6803      	ldr	r3, [r0, #0]
    c1c6:	2b00      	cmp	r3, #0
    c1c8:	f47f ace8 	bne.w	bb9c <ull_conn_rx+0x98>
    c1cc:	e552      	b.n	bc74 <ull_conn_rx+0x170>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
    c1ce:	7f6b      	ldrb	r3, [r5, #29]
    c1d0:	2b09      	cmp	r3, #9
    c1d2:	f47f ad16 	bne.w	bc02 <ull_conn_rx+0xfe>
    c1d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c1d8:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
    c1da:	49b5      	ldr	r1, [pc, #724]	; (c4b0 <ull_conn_rx+0x9ac>)
    c1dc:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    c1e0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
    c1e4:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    c1e6:	400b      	ands	r3, r1
    c1e8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    c1ec:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
    c1f0:	4013      	ands	r3, r2
    c1f2:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    c1f6:	6a2e      	ldr	r6, [r5, #32]
    c1f8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
    c1fa:	f7fc fbe5 	bl	89c8 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
    c1fe:	4aac      	ldr	r2, [pc, #688]	; (c4b0 <ull_conn_rx+0x9ac>)
	conn->llcp_feature.ack = conn->llcp_feature.req;
    c200:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    c204:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat &= LL_FEAT_BIT_MASK;
    c208:	4332      	orrs	r2, r6
	feat_result = feat_to_keep & feat_octet0;
    c20a:	4002      	ands	r2, r0
    c20c:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
	feat_result &= 0xFF;
    c210:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	conn->common.fex_valid = 1U;
    c214:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    c218:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    c21a:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
    c21e:	2300      	movs	r3, #0
    c220:	f005 050f 	and.w	r5, r5, #15
	conn->common.fex_valid = 1U;
    c224:	f041 0101 	orr.w	r1, r1, #1
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    c228:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
    c22c:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
    c230:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	conn->llcp_feature.features_peer =
    c234:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
    c238:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    c23c:	4618      	mov	r0, r3
}
    c23e:	e4b0      	b.n	bba2 <ull_conn_rx+0x9e>
		if ((conn->llcp_req == conn->llcp_ack) ||
    c240:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    c244:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    c248:	4299      	cmp	r1, r3
    c24a:	f43f acda 	beq.w	bc02 <ull_conn_rx+0xfe>
    c24e:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
    c252:	2903      	cmp	r1, #3
    c254:	f47f acd5 	bne.w	bc02 <ull_conn_rx+0xfe>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
    c258:	7f69      	ldrb	r1, [r5, #29]
    c25a:	2901      	cmp	r1, #1
    c25c:	f47f acd1 	bne.w	bc02 <ull_conn_rx+0xfe>
		if (conn->lll.role) {
    c260:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
    c264:	2900      	cmp	r1, #0
    c266:	f2c0 84e3 	blt.w	cc30 <ull_conn_rx+0x112c>
			conn->llcp_enc.pause_rx = 0U;
    c26a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
    c26e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
    c272:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
    c274:	f022 0203 	bic.w	r2, r2, #3
    c278:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
    c27c:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
    c280:	0750      	lsls	r0, r2, #29
    c282:	f57f ac8d 	bpl.w	bba0 <ull_conn_rx+0x9c>
			conn->llcp_enc.refresh = 0U;
    c286:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    c28a:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
    c28c:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	int nack = 0;
    c290:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    c292:	712b      	strb	r3, [r5, #4]
    c294:	e485      	b.n	bba2 <ull_conn_rx+0x9e>
		if (!conn->lll.role ||
    c296:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    c29a:	2b00      	cmp	r3, #0
    c29c:	f6bf acb1 	bge.w	bc02 <ull_conn_rx+0xfe>
    c2a0:	f895 901d 	ldrb.w	r9, [r5, #29]
    c2a4:	f1b9 0f09 	cmp.w	r9, #9
    c2a8:	f47f acab 	bne.w	bc02 <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
    c2ac:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    c2b0:	f010 0602 	ands.w	r6, r0, #2
    c2b4:	f47f ac72 	bne.w	bb9c <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    c2b8:	487c      	ldr	r0, [pc, #496]	; (c4ac <ull_conn_rx+0x9a8>)
    c2ba:	f7f9 fd2b 	bl	5d14 <mem_acquire>
	if (!tx) {
    c2be:	4607      	mov	r7, r0
    c2c0:	2800      	cmp	r0, #0
    c2c2:	f000 81c3 	beq.w	c64c <ull_conn_rx+0xb48>
	conn->common.txn_lock = 1U;
    c2c6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
    c2ca:	4979      	ldr	r1, [pc, #484]	; (c4b0 <ull_conn_rx+0x9ac>)
	conn->common.txn_lock = 1U;
    c2cc:	f043 0302 	orr.w	r3, r3, #2
    c2d0:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
    c2d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c2d6:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
    c2d8:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    c2dc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
    c2e0:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    c2e2:	400b      	ands	r3, r1
    c2e4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    c2e8:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
    c2ec:	4013      	ands	r3, r2
    c2ee:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    c2f2:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    c2f6:	f8d5 8020 	ldr.w	r8, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
    c2fa:	f7fc fb65 	bl	89c8 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    c2fe:	f00a 030f 	and.w	r3, sl, #15
	conn->llcp_feature.features_peer =
    c302:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
    c306:	4b6a      	ldr	r3, [pc, #424]	; (c4b0 <ull_conn_rx+0x9ac>)
    c308:	ea48 0303 	orr.w	r3, r8, r3
	feat_result = feat_to_keep & feat_octet0;
    c30c:	4003      	ands	r3, r0
	feat_result &= 0xFF;
    c30e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c312:	f028 08ff 	bic.w	r8, r8, #255	; 0xff
    c316:	ea43 0308 	orr.w	r3, r3, r8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    c31a:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
    c31e:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
    c322:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
    c326:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    c32a:	f043 0301 	orr.w	r3, r3, #1
    c32e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    c332:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    c334:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    c338:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    c33c:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    c33e:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    c340:	18b8      	adds	r0, r7, r2
    c342:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    c344:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    c348:	f00b fbe3 	bl	17b12 <memset>
	feat = feat_land_octet0(ll_feat_get(),
    c34c:	f7fc fb3c 	bl	89c8 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    c350:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	dst[1] = val >> 8;
    c354:	737e      	strb	r6, [r7, #13]
	feat = feat_land_octet0(ll_feat_get(),
    c356:	4603      	mov	r3, r0
	feat_result = feat_to_keep & feat_octet0;
    c358:	401a      	ands	r2, r3
	feat_result &= 0xFF;
    c35a:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    c35e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c362:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
    c364:	0c1a      	lsrs	r2, r3, #16
    c366:	f001 010f 	and.w	r1, r1, #15
	dst[0] = val;
    c36a:	723b      	strb	r3, [r7, #8]
    c36c:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
    c36e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    c372:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
    c374:	7339      	strb	r1, [r7, #12]
	ctrl_tx_sec_enqueue(conn, tx);
    c376:	4620      	mov	r0, r4
	dst[1] = val >> 8;
    c378:	727b      	strb	r3, [r7, #9]
	dst[0] = val;
    c37a:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
    c37c:	73fe      	strb	r6, [r7, #15]
    c37e:	72fa      	strb	r2, [r7, #11]
    c380:	4639      	mov	r1, r7
    c382:	f7fe fb51 	bl	aa28 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    c386:	2301      	movs	r3, #1
    c388:	712b      	strb	r3, [r5, #4]
	return 0;
    c38a:	4630      	mov	r0, r6
    c38c:	e409      	b.n	bba2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
    c38e:	7f6b      	ldrb	r3, [r5, #29]
    c390:	2b02      	cmp	r3, #2
    c392:	f47f ac36 	bne.w	bc02 <ull_conn_rx+0xfe>
			    conn->llcp_conn_param.req) &&
    c396:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
    c39a:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
    c39e:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
    c3a2:	4291      	cmp	r1, r2
    c3a4:	d002      	beq.n	c3ac <ull_conn_rx+0x8a8>
			    conn->llcp_conn_param.req) &&
    c3a6:	2b0f      	cmp	r3, #15
    c3a8:	f000 836d 	beq.w	ca86 <ull_conn_rx+0xf82>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
    c3ac:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    c3b0:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
    c3b4:	4291      	cmp	r1, r2
    c3b6:	d002      	beq.n	c3be <ull_conn_rx+0x8ba>
    c3b8:	2b14      	cmp	r3, #20
    c3ba:	f000 83e1 	beq.w	cb80 <ull_conn_rx+0x107c>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
    c3be:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
    c3c2:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
    c3c6:	4291      	cmp	r1, r2
    c3c8:	d002      	beq.n	c3d0 <ull_conn_rx+0x8cc>
    c3ca:	2b16      	cmp	r3, #22
    c3cc:	f000 843c 	beq.w	cc48 <ull_conn_rx+0x1144>
			switch (llctrl->unknown_rsp.type) {
    c3d0:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    c3d2:	bf04      	itt	eq
    c3d4:	2301      	moveq	r3, #1
    c3d6:	712b      	strbeq	r3, [r5, #4]
				break;
    c3d8:	e586      	b.n	bee8 <ull_conn_rx+0x3e4>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
    c3da:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    c3de:	2b00      	cmp	r3, #0
    c3e0:	f6bf ac0f 	bge.w	bc02 <ull_conn_rx+0xfe>
    c3e4:	7f6b      	ldrb	r3, [r5, #29]
    c3e6:	2b05      	cmp	r3, #5
    c3e8:	f47f ac0b 	bne.w	bc02 <ull_conn_rx+0xfe>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
    c3ec:	f895 2020 	ldrb.w	r2, [r5, #32]
    c3f0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    c3f4:	4313      	orrs	r3, r2
    c3f6:	f013 0307 	ands.w	r3, r3, #7
    c3fa:	f040 8471 	bne.w	cce0 <ull_conn_rx+0x11dc>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    c3fe:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
    c402:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
    c406:	428a      	cmp	r2, r1
    c408:	f43f abc8 	beq.w	bb9c <ull_conn_rx+0x98>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    c40c:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    c410:	f002 0203 	and.w	r2, r2, #3
    c414:	2a02      	cmp	r2, #2
    c416:	f47f abc1 	bne.w	bb9c <ull_conn_rx+0x98>
		conn->llcp_phy.pause_tx = 0U;
    c41a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c41e:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    c422:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
    c426:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
    c42a:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    c42e:	4608      	mov	r0, r1
    c430:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    c434:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
    c438:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    c43c:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
    c440:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
    c444:	f040 85e7 	bne.w	d016 <ull_conn_rx+0x1512>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    c448:	6833      	ldr	r3, [r6, #0]
    c44a:	2101      	movs	r1, #1
    c44c:	7119      	strb	r1, [r3, #4]
	int nack = 0;
    c44e:	4610      	mov	r0, r2
    c450:	f7ff bba7 	b.w	bba2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
    c454:	7f6b      	ldrb	r3, [r5, #29]
    c456:	2b03      	cmp	r3, #3
    c458:	f47f abd3 	bne.w	bc02 <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
    c45c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    c460:	2b00      	cmp	r3, #0
    c462:	f2c0 828d 	blt.w	c980 <ull_conn_rx+0xe7c>
			if ((conn->llcp_phy.ack !=
    c466:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
    c46a:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
    c46e:	4281      	cmp	r1, r0
    c470:	d007      	beq.n	c482 <ull_conn_rx+0x97e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    c472:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
    c476:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
    c47a:	3a01      	subs	r2, #1
    c47c:	2a02      	cmp	r2, #2
    c47e:	f240 83df 	bls.w	cc40 <ull_conn_rx+0x113c>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    c482:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    c486:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
    c48a:	1a9b      	subs	r3, r3, r2
    c48c:	f003 0303 	and.w	r3, r3, #3
    c490:	2b02      	cmp	r3, #2
    c492:	f000 8368 	beq.w	cb66 <ull_conn_rx+0x1062>
				     LLCP_ENCRYPTION)) ||
    c496:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    c49a:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    c49e:	429a      	cmp	r2, r3
    c4a0:	f000 8383 	beq.w	cbaa <ull_conn_rx+0x10a6>
				nack = reject_ext_ind_send(conn, *rx,
    c4a4:	232a      	movs	r3, #42	; 0x2a
    c4a6:	2216      	movs	r2, #22
    c4a8:	e53b      	b.n	bf22 <ull_conn_rx+0x41e>
    c4aa:	bf00      	nop
    c4ac:	20001d50 	.word	0x20001d50
    c4b0:	087830d0 	.word	0x087830d0
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    c4b4:	7f6b      	ldrb	r3, [r5, #29]
    c4b6:	2b01      	cmp	r3, #1
    c4b8:	f47f aba3 	bne.w	bc02 <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
    c4bc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	f2c0 80e3 	blt.w	c68c <ull_conn_rx+0xb88>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    c4c6:	48d0      	ldr	r0, [pc, #832]	; (c808 <ull_conn_rx+0xd04>)
    c4c8:	f7f9 fc24 	bl	5d14 <mem_acquire>
		if (!tx) {
    c4cc:	2800      	cmp	r0, #0
    c4ce:	f000 80bd 	beq.w	c64c <ull_conn_rx+0xb48>
	conn->llcp_enc.pause_rx = 1U;
    c4d2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
    c4d6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
    c4da:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
    c4de:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
    c4e2:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    c4e6:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
    c4e8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4ec:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    c4ee:	7142      	strb	r2, [r0, #5]
    c4f0:	e643      	b.n	c17a <ull_conn_rx+0x676>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
    c4f2:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    c4f6:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
    c4fa:	4293      	cmp	r3, r2
    c4fc:	f43f ab4e 	beq.w	bb9c <ull_conn_rx+0x98>
	conn->procedure_expire = 0U;
    c500:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    c502:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
    c504:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
    c508:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    c50c:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    c50e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    c512:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    c516:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    c518:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    c51a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    c51e:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    c520:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    c524:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    c526:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    c528:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
    c52a:	4618      	mov	r0, r3
    c52c:	f7ff bb39 	b.w	bba2 <ull_conn_rx+0x9e>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    c530:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    c534:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
    c538:	429a      	cmp	r2, r3
    c53a:	f43f ab2f 	beq.w	bb9c <ull_conn_rx+0x98>
	if (!lll->role && (rej_ext_ind->error_code ==
    c53e:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
    c542:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    c546:	2900      	cmp	r1, #0
    c548:	f2c0 8591 	blt.w	d06e <ull_conn_rx+0x156a>
    c54c:	2a1a      	cmp	r2, #26
    c54e:	f000 8620 	beq.w	d192 <ull_conn_rx+0x168e>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    c552:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    c556:	f002 010f 	and.w	r1, r2, #15
    c55a:	2904      	cmp	r1, #4
    c55c:	d106      	bne.n	c56c <ull_conn_rx+0xa68>
	conn_upd_curr = NULL;
    c55e:	49ab      	ldr	r1, [pc, #684]	; (c80c <ull_conn_rx+0xd08>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c560:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    c564:	2300      	movs	r3, #0
    c566:	600b      	str	r3, [r1, #0]
		conn->procedure_expire = 0U;
    c568:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
    c56c:	06d2      	lsls	r2, r2, #27
    c56e:	f57f ab15 	bpl.w	bb9c <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c572:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    c574:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    c578:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    c57a:	f040 8472 	bne.w	ce62 <ull_conn_rx+0x135e>
	cu->status = rej_ext_ind->error_code;
    c57e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    c582:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
    c584:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
    c586:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
    c58a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    c58c:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
    c58e:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
    c590:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
    c594:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
    c598:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
    c59a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c59e:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
    c5a2:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
    c5a4:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
    c5a6:	f7ff bafc 	b.w	bba2 <ull_conn_rx+0x9e>
		if ((conn->llcp_ack != conn->llcp_req) &&
    c5aa:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    c5ae:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    c5b2:	428b      	cmp	r3, r1
    c5b4:	f43f aaf2 	beq.w	bb9c <ull_conn_rx+0x98>
    c5b8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    c5bc:	2b03      	cmp	r3, #3
    c5be:	f47f aaed 	bne.w	bb9c <ull_conn_rx+0x98>
	conn->llcp_enc.pause_rx = 0U;
    c5c2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
    c5c6:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
    c5ca:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    c5cc:	f022 0203 	bic.w	r2, r2, #3
    c5d0:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
    c5d4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
    c5d8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    c5dc:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c5e0:	210d      	movs	r1, #13
    c5e2:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
    c5e4:	4618      	mov	r0, r3
    c5e6:	f7ff badc 	b.w	bba2 <ull_conn_rx+0x9e>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    c5ea:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
    c5ee:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    c5f2:	428b      	cmp	r3, r1
    c5f4:	f43f aad2 	beq.w	bb9c <ull_conn_rx+0x98>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    c5f8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    c5fc:	2a23      	cmp	r2, #35	; 0x23
    c5fe:	d012      	beq.n	c626 <ull_conn_rx+0xb22>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    c600:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
    c604:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    c608:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
    c60c:	f36f 0100 	bfc	r1, #0, #1
    c610:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
    c614:	2100      	movs	r1, #0
    c616:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    c61a:	f3c3 0102 	ubfx	r1, r3, #0, #3
    c61e:	f361 1306 	bfi	r3, r1, #4, #3
    c622:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
    c626:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    c62a:	0759      	lsls	r1, r3, #29
    c62c:	f57f aab6 	bpl.w	bb9c <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c630:	231c      	movs	r3, #28
    c632:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
    c634:	772a      	strb	r2, [r5, #28]
    c636:	e4b2      	b.n	bf9e <ull_conn_rx+0x49a>
			tx->next = conn->tx_head;
    c638:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    c63a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    c63e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    c642:	2a00      	cmp	r2, #0
    c644:	f47f aaaa 	bne.w	bb9c <ull_conn_rx+0x98>
    c648:	f7ff bb14 	b.w	bc74 <ull_conn_rx+0x170>
		*err = -ENOBUFS;
    c64c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    c650:	f7ff baa7 	b.w	bba2 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    c654:	7f6b      	ldrb	r3, [r5, #29]
    c656:	2b01      	cmp	r3, #1
    c658:	f47f aad3 	bne.w	bc02 <ull_conn_rx+0xfe>
    c65c:	e733      	b.n	c4c6 <ull_conn_rx+0x9c2>
			conn->tx_data = conn->tx_data->next;
    c65e:	6813      	ldr	r3, [r2, #0]
    c660:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    c664:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    c668:	2b00      	cmp	r3, #0
    c66a:	f47f aaf9 	bne.w	bc60 <ull_conn_rx+0x15c>
			tx->next = conn->tx_head->next;
    c66e:	6813      	ldr	r3, [r2, #0]
    c670:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    c672:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    c674:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    c676:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
    c67a:	2a00      	cmp	r2, #0
    c67c:	f47f aa8e 	bne.w	bb9c <ull_conn_rx+0x98>
    c680:	f7ff baf8 	b.w	bc74 <ull_conn_rx+0x170>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    c684:	7f6b      	ldrb	r3, [r5, #29]
    c686:	2b01      	cmp	r3, #1
    c688:	f47f aabb 	bne.w	bc02 <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
    c68c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    c690:	f36f 1304 	bfc	r3, #4, #1
    c694:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
    c698:	f7ff ba80 	b.w	bb9c <ull_conn_rx+0x98>
		if (!conn->lll.role) {
    c69c:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
    c6a0:	f894 6184 	ldrb.w	r6, [r4, #388]	; 0x184
					conn->llcp_conn_param.ack) &&
    c6a4:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		if (!conn->lll.role) {
    c6a8:	2f00      	cmp	r7, #0
    c6aa:	f2c0 80b1 	blt.w	c810 <ull_conn_rx+0xd0c>
			if ((conn->llcp_conn_param.req !=
    c6ae:	42b1      	cmp	r1, r6
    c6b0:	d00a      	beq.n	c6c8 <ull_conn_rx+0xbc4>
			    ((conn->llcp_conn_param.state ==
    c6b2:	f894 6186 	ldrb.w	r6, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
    c6b6:	f016 0f0b 	tst.w	r6, #11
    c6ba:	f000 825e 	beq.w	cb7a <ull_conn_rx+0x1076>
			      LLCP_CPR_STATE_RSP_WAIT) ||
    c6be:	f006 060f 	and.w	r6, r6, #15
    c6c2:	2e06      	cmp	r6, #6
    c6c4:	f000 8259 	beq.w	cb7a <ull_conn_rx+0x1076>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    c6c8:	f894 60e4 	ldrb.w	r6, [r4, #228]	; 0xe4
    c6cc:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
    c6d0:	1bf6      	subs	r6, r6, r7
    c6d2:	f006 0603 	and.w	r6, r6, #3
    c6d6:	2e02      	cmp	r6, #2
    c6d8:	f000 83d2 	beq.w	ce80 <ull_conn_rx+0x137c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    c6dc:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
    c6e0:	f894 61bd 	ldrb.w	r6, [r4, #445]	; 0x1bd
    c6e4:	42b7      	cmp	r7, r6
    c6e6:	f000 83e5 	beq.w	ceb4 <ull_conn_rx+0x13b0>
				nack = reject_ext_ind_send(conn, *rx,
    c6ea:	232a      	movs	r3, #42	; 0x2a
    c6ec:	e418      	b.n	bf20 <ull_conn_rx+0x41c>
		if (!conn->tx_ctrl) {
    c6ee:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    c6f2:	2a00      	cmp	r2, #0
    c6f4:	f47f ad5f 	bne.w	c1b6 <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head;
    c6f8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    c6fa:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    c6fe:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    c702:	e55f      	b.n	c1c4 <ull_conn_rx+0x6c0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    c704:	7913      	ldrb	r3, [r2, #4]
    c706:	f003 0303 	and.w	r3, r3, #3
    c70a:	2b03      	cmp	r3, #3
    c70c:	f000 82ce 	beq.w	ccac <ull_conn_rx+0x11a8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    c710:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
    c714:	f7ff baa6 	b.w	bc64 <ull_conn_rx+0x160>
	if (conn->common.txn_lock) {
    c718:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    c71c:	079b      	lsls	r3, r3, #30
    c71e:	f53f aa3d 	bmi.w	bb9c <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    c722:	4839      	ldr	r0, [pc, #228]	; (c808 <ull_conn_rx+0xd04>)
    c724:	f7f9 faf6 	bl	5d14 <mem_acquire>
	if (!tx) {
    c728:	4603      	mov	r3, r0
    c72a:	2800      	cmp	r0, #0
    c72c:	d08e      	beq.n	c64c <ull_conn_rx+0xb48>
	conn->common.txn_lock = 1U;
    c72e:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    c732:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
    c736:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
    c73a:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
    c73e:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
    c742:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
    c746:	f042 0202 	orr.w	r2, r2, #2
    c74a:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    c74e:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
    c752:	428a      	cmp	r2, r1
    c754:	f040 855b 	bne.w	d20e <ull_conn_rx+0x170a>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
    c758:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    c75a:	291a      	cmp	r1, #26
    c75c:	f240 8223 	bls.w	cba6 <ull_conn_rx+0x10a2>
			eff_tx_octets = MIN(max_rx_octets,
    c760:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
    c764:	4281      	cmp	r1, r0
    c766:	bf28      	it	cs
    c768:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    c76a:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
    c76c:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
    c770:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
    c772:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
    c774:	bf34      	ite	cc
    c776:	46de      	movcc	lr, fp
    c778:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
    c77c:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
    c780:	bf34      	ite	cc
    c782:	4640      	movcc	r0, r8
    c784:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
    c788:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
    c78c:	bf34      	ite	cc
    c78e:	46cc      	movcc	ip, r9
    c790:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
    c794:	45de      	cmp	lr, fp
    c796:	f000 831f 	beq.w	cdd8 <ull_conn_rx+0x12d4>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
    c79a:	3a01      	subs	r2, #1
    c79c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
    c7a0:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
    c7a4:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
    c7a8:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
    c7ac:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
    c7b0:	2b00      	cmp	r3, #0
    c7b2:	f000 836b 	beq.w	ce8c <ull_conn_rx+0x1388>
				conn->llcp_length.state =
    c7b6:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
    c7ba:	2505      	movs	r5, #5
    c7bc:	f365 0202 	bfi	r2, r5, #0, #3
    c7c0:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
    c7c4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    c7c8:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
    c7ca:	6832      	ldr	r2, [r6, #0]
    c7cc:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
    c7ce:	6832      	ldr	r2, [r6, #0]
    c7d0:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
    c7d4:	2200      	movs	r2, #0
    c7d6:	6032      	str	r2, [r6, #0]
	if (tx) {
    c7d8:	2b00      	cmp	r3, #0
    c7da:	f43f a9e1 	beq.w	bba0 <ull_conn_rx+0x9c>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7de:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
    c7e0:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7e2:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
    c7e6:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7e8:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    c7ea:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    c7ec:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
    c7ee:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
    c7f0:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
    c7f4:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
    c7f8:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    c7fa:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    c7fc:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    c7fe:	f7fe f913 	bl	aa28 <ctrl_tx_sec_enqueue>
	return 0;
    c802:	2000      	movs	r0, #0
}
    c804:	f7ff b9cd 	b.w	bba2 <ull_conn_rx+0x9e>
    c808:	20001d50 	.word	0x20001d50
    c80c:	20001cbc 	.word	0x20001cbc
		} else if ((conn->llcp_conn_param.req ==
    c810:	42b1      	cmp	r1, r6
    c812:	d005      	beq.n	c820 <ull_conn_rx+0xd1c>
			    conn->llcp_conn_param.ack) ||
    c814:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    c818:	f012 0f0b 	tst.w	r2, #11
    c81c:	f47f a9be 	bne.w	bb9c <ull_conn_rx+0x98>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    c820:	f8b5 a020 	ldrh.w	sl, [r5, #32]
    c824:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    c828:	2a05      	cmp	r2, #5
    c82a:	f240 80a6 	bls.w	c97a <ull_conn_rx+0xe76>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    c82e:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
    c832:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    c836:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
    c83a:	f200 809e 	bhi.w	c97a <ull_conn_rx+0xe76>
			    (interval_max > 3200) ||
    c83e:	42b2      	cmp	r2, r6
    c840:	f200 809b 	bhi.w	c97a <ull_conn_rx+0xe76>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    c844:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
    c848:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
    c84c:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    c850:	f080 8093 	bcs.w	c97a <ull_conn_rx+0xe76>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    c854:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
    c858:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
    c85c:	f1a2 070a 	sub.w	r7, r2, #10
    c860:	f640 4b76 	movw	fp, #3190	; 0xc76
    c864:	b2bf      	uxth	r7, r7
    c866:	455f      	cmp	r7, fp
    c868:	f200 8087 	bhi.w	c97a <ull_conn_rx+0xe76>
			     ((latency + 1) * interval_max)) ||
    c86c:	f10c 0701 	add.w	r7, ip, #1
    c870:	b2bf      	uxth	r7, r7
    c872:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
    c876:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
    c87a:	d27e      	bcs.n	c97a <ull_conn_rx+0xe76>
			     ((latency + 1) * interval_max)) ||
    c87c:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
    c880:	455e      	cmp	r6, fp
    c882:	d37a      	bcc.n	c97a <ull_conn_rx+0xe76>
			conn->llcp_conn_param.interval_min = interval_min;
    c884:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
    c888:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
    c88c:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
    c890:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
    c894:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    c898:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
    c89c:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
    c8a0:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    c8a4:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
    c8a8:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
    c8ac:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
    c8b0:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
    c8b4:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
    c8b8:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
    c8bc:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
    c8c0:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
    c8c4:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
    c8c8:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
    c8cc:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
    c8d0:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
    c8d4:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
    c8d8:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
    c8dc:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
    c8e0:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
    c8e4:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
    c8e8:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
    c8ec:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
    c8f0:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
    c8f4:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
    c8f8:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
    c8fc:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
    c900:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
    c904:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
    c908:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
    c90a:	42be      	cmp	r6, r7
    c90c:	f000 840b 	beq.w	d126 <ull_conn_rx+0x1622>
				conn->llcp_conn_param.state =
    c910:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    c914:	2503      	movs	r5, #3
    c916:	f365 0203 	bfi	r2, r5, #0, #4
    c91a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
    c91e:	3901      	subs	r1, #1
    c920:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
    c924:	2b00      	cmp	r3, #0
    c926:	f47f a93b 	bne.w	bba0 <ull_conn_rx+0x9c>
		conn_upd_curr = conn;
    c92a:	6004      	str	r4, [r0, #0]
	int nack = 0;
    c92c:	4618      	mov	r0, r3
    c92e:	f7ff b938 	b.w	bba2 <ull_conn_rx+0x9e>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    c932:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    c936:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    c93a:	4293      	cmp	r3, r2
    c93c:	f43f add9 	beq.w	c4f2 <ull_conn_rx+0x9ee>
		rej_ext_ind->error_code = rej_ind->error_code;
    c940:	f895 3020 	ldrb.w	r3, [r5, #32]
    c944:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
    c948:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
    c94c:	2900      	cmp	r1, #0
    c94e:	f2c0 82a9 	blt.w	cea4 <ull_conn_rx+0x13a0>
    c952:	2b1a      	cmp	r3, #26
    c954:	f000 841d 	beq.w	d192 <ull_conn_rx+0x168e>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    c958:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    c95c:	f003 010f 	and.w	r1, r3, #15
    c960:	2904      	cmp	r1, #4
    c962:	d106      	bne.n	c972 <ull_conn_rx+0xe6e>
	conn_upd_curr = NULL;
    c964:	49d9      	ldr	r1, [pc, #868]	; (cccc <ull_conn_rx+0x11c8>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    c966:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    c96a:	2200      	movs	r2, #0
    c96c:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
    c96e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
    c972:	06d8      	lsls	r0, r3, #27
    c974:	f57f a912 	bpl.w	bb9c <ull_conn_rx+0x98>
    c978:	e5fb      	b.n	c572 <ull_conn_rx+0xa6e>
				nack = reject_ext_ind_send(conn, *rx,
    c97a:	231e      	movs	r3, #30
    c97c:	f7ff bad0 	b.w	bf20 <ull_conn_rx+0x41c>
	if (conn->common.txn_lock) {
    c980:	f894 70d8 	ldrb.w	r7, [r4, #216]	; 0xd8
    c984:	f017 0702 	ands.w	r7, r7, #2
    c988:	f47f a908 	bne.w	bb9c <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    c98c:	48d0      	ldr	r0, [pc, #832]	; (ccd0 <ull_conn_rx+0x11cc>)
    c98e:	f7f9 f9c1 	bl	5d14 <mem_acquire>
	if (!tx) {
    c992:	4602      	mov	r2, r0
    c994:	2800      	cmp	r0, #0
    c996:	f43f ae59 	beq.w	c64c <ull_conn_rx+0xb48>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    c99a:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
    c99e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
    c9a2:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    c9a6:	2002      	movs	r0, #2
    c9a8:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
    c9ac:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    c9b0:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
    c9b4:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
	conn->common.txn_lock = 1U;
    c9b8:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
			conn->phy_pref_tx;
    c9bc:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	if (conn->llcp_phy.ack ==
    c9c0:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
    c9c2:	f3c3 0602 	ubfx	r6, r3, #0, #3
    c9c6:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
    c9ca:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
    c9ce:	d114      	bne.n	c9fa <ull_conn_rx+0xef6>
		conn->llcp_phy.ack--;
    c9d0:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
    c9d2:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
    c9d6:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
    c9da:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
    c9de:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
    c9e2:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
    c9e6:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
    c9ea:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->procedure_expire =
    c9ee:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
    c9f2:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
    c9f6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
    c9fa:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
    c9fe:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
    ca02:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
    ca06:	f3c1 0c82 	ubfx	ip, r1, #2, #3
    ca0a:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
    ca0e:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
    ca12:	009b      	lsls	r3, r3, #2
    ca14:	f001 0103 	and.w	r1, r1, #3
    ca18:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
    ca1c:	430b      	orrs	r3, r1
    ca1e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    ca22:	2303      	movs	r3, #3
    ca24:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    ca26:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca28:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
    ca2a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    ca2e:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    ca30:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca32:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    ca36:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
    ca38:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ca3c:	7110      	strb	r0, [r2, #4]
	if (
    ca3e:	2b00      	cmp	r3, #0
    ca40:	f000 80a8 	beq.w	cb94 <ull_conn_rx+0x1090>
	    !conn->llcp_enc.pause_tx &&
    ca44:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
    ca48:	0786      	lsls	r6, r0, #30
    ca4a:	f100 80a3 	bmi.w	cb94 <ull_conn_rx+0x1090>
	    !conn->llcp_phy.pause_tx &&
    ca4e:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
    ca52:	07c0      	lsls	r0, r0, #31
    ca54:	f100 809e 	bmi.w	cb94 <ull_conn_rx+0x1090>
		if (conn->tx_head == conn->tx_data) {
    ca58:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
    ca5c:	4283      	cmp	r3, r0
    ca5e:	f000 8334 	beq.w	d0ca <ull_conn_rx+0x15c6>
		} else if (!conn->tx_ctrl) {
    ca62:	2900      	cmp	r1, #0
    ca64:	f000 8375 	beq.w	d152 <ull_conn_rx+0x164e>
	tx->next = conn->tx_ctrl_last->next;
    ca68:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    ca6c:	6819      	ldr	r1, [r3, #0]
    ca6e:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    ca70:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    ca72:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
    ca76:	6813      	ldr	r3, [r2, #0]
    ca78:	2b00      	cmp	r3, #0
    ca7a:	f47f a88f 	bne.w	bb9c <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
    ca7e:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    ca82:	f7ff b88b 	b.w	bb9c <ull_conn_rx+0x98>
			conn->llcp_conn_param.disabled = 1U;
    ca86:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    ca8a:	f043 0320 	orr.w	r3, r3, #32
    ca8e:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
    ca92:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    ca96:	2b00      	cmp	r3, #0
    ca98:	f2c0 81c7 	blt.w	ce2a <ull_conn_rx+0x1326>
				LL_ASSERT(conn->llcp_cu.req ==
    ca9c:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
    caa0:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    caa4:	429a      	cmp	r2, r3
    caa6:	d00e      	beq.n	cac6 <ull_conn_rx+0xfc2>
    caa8:	4a8a      	ldr	r2, [pc, #552]	; (ccd4 <ull_conn_rx+0x11d0>)
    caaa:	498b      	ldr	r1, [pc, #556]	; (ccd8 <ull_conn_rx+0x11d4>)
    caac:	488b      	ldr	r0, [pc, #556]	; (ccdc <ull_conn_rx+0x11d8>)
    caae:	f641 33e6 	movw	r3, #7142	; 0x1be6
    cab2:	f00a fa5c 	bl	16f6e <printk>
    cab6:	4040      	eors	r0, r0
    cab8:	f380 8811 	msr	BASEPRI, r0
    cabc:	f04f 0003 	mov.w	r0, #3
    cac0:	df02      	svc	2
    cac2:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
    cac6:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    caca:	2106      	movs	r1, #6
    cacc:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
    cad0:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
    cad2:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
    cad4:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
    cad8:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cadc:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
    cade:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    cae2:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    cae6:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
    caea:	00db      	lsls	r3, r3, #3
    caec:	f022 020f 	bic.w	r2, r2, #15
    caf0:	430b      	orrs	r3, r1
    caf2:	4313      	orrs	r3, r2
    caf4:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
    caf8:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
    cafc:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
    cb00:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
    cb04:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
    cb06:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
    cb0a:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
    cb0e:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
    cb12:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cb16:	7129      	strb	r1, [r5, #4]
				break;
    cb18:	f7ff b843 	b.w	bba2 <ull_conn_rx+0x9e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    cb1c:	486c      	ldr	r0, [pc, #432]	; (ccd0 <ull_conn_rx+0x11cc>)
    cb1e:	f7f9 f8f9 	bl	5d14 <mem_acquire>
		if (!tx) {
    cb22:	4601      	mov	r1, r0
    cb24:	2800      	cmp	r0, #0
    cb26:	f43f ad91 	beq.w	c64c <ull_conn_rx+0xb48>
		conn->llcp_version.tx = 1U;
    cb2a:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    cb2e:	f043 0301 	orr.w	r3, r3, #1
    cb32:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    cb36:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
    cb38:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    cb3a:	220c      	movs	r2, #12
    cb3c:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
    cb3e:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    cb40:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    cb44:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    cb48:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    cb4a:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
    cb4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    cb50:	2205      	movs	r2, #5
		v->sub_version_number =
    cb52:	72c3      	strb	r3, [r0, #11]
    cb54:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    cb56:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
    cb58:	4620      	mov	r0, r4
    cb5a:	f7fd ff65 	bl	aa28 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    cb5e:	2301      	movs	r3, #1
    cb60:	712b      	strb	r3, [r5, #4]
    cb62:	f7ff ba3b 	b.w	bfdc <ull_conn_rx+0x4d8>
				      0x03) == 0x02) &&
    cb66:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    cb6a:	2b03      	cmp	r3, #3
    cb6c:	f47f ac9a 	bne.w	c4a4 <ull_conn_rx+0x9a0>
    cb70:	e491      	b.n	c496 <ull_conn_rx+0x992>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    cb72:	712f      	strb	r7, [r5, #4]
		*err = 0U;
    cb74:	2000      	movs	r0, #0
    cb76:	f7ff b814 	b.w	bba2 <ull_conn_rx+0x9e>
				nack = reject_ext_ind_send(conn, *rx,
    cb7a:	2323      	movs	r3, #35	; 0x23
    cb7c:	f7ff b9d0 	b.w	bf20 <ull_conn_rx+0x41c>
			conn->llcp_length.disabled = 1U;
    cb80:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
    cb84:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
    cb88:	f043 0308 	orr.w	r3, r3, #8
    cb8c:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
    cb90:	f7ff b9aa 	b.w	bee8 <ull_conn_rx+0x3e4>
		if (!conn->tx_ctrl) {
    cb94:	2900      	cmp	r1, #0
    cb96:	f47f af67 	bne.w	ca68 <ull_conn_rx+0xf64>
			tx->next = conn->tx_head;
    cb9a:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
    cb9c:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    cba0:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
    cba4:	e767      	b.n	ca76 <ull_conn_rx+0xf72>
    cba6:	4651      	mov	r1, sl
    cba8:	e5df      	b.n	c76a <ull_conn_rx+0xc66>
				conn->llcp_phy.state =
    cbaa:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
    cbae:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
    cbb0:	f043 0303 	orr.w	r3, r3, #3
    cbb4:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
    cbb8:	d111      	bne.n	cbde <ull_conn_rx+0x10da>
					conn->llcp_phy.tx =
    cbba:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
    cbbe:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
    cbc2:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
    cbc4:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
    cbc8:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
    cbcc:	f240 43fc 	movw	r3, #1276	; 0x4fc
    cbd0:	f022 0204 	bic.w	r2, r2, #4
    cbd4:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    cbd8:	4313      	orrs	r3, r2
    cbda:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
    cbde:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    cbe2:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
    cbe6:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
    cbea:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
    cbee:	f003 0203 	and.w	r2, r3, #3
    cbf2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    cbf6:	4003      	ands	r3, r0
    cbf8:	009b      	lsls	r3, r3, #2
    cbfa:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    cbfe:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    cc00:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
    cc04:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    cc08:	d002      	beq.n	cc10 <ull_conn_rx+0x110c>
    cc0a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    cc0e:	d105      	bne.n	cc1c <ull_conn_rx+0x1118>
					conn->llcp_phy.tx = 0;
    cc10:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    cc14:	f003 0303 	and.w	r3, r3, #3
    cc18:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
    cc1c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cc20:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
    cc22:	4313      	orrs	r3, r2
    cc24:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
    cc28:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cc2a:	712a      	strb	r2, [r5, #4]
    cc2c:	f7fe bfb9 	b.w	bba2 <ull_conn_rx+0x9e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    cc30:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    cc34:	f36f 0301 	bfc	r3, #0, #2
    cc38:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    cc3c:	f7ff bb20 	b.w	c280 <ull_conn_rx+0x77c>
				nack = reject_ext_ind_send(conn, *rx,
    cc40:	2323      	movs	r3, #35	; 0x23
    cc42:	2216      	movs	r2, #22
    cc44:	f7ff b96d 	b.w	bf22 <ull_conn_rx+0x41e>
			lll->phy_tx_time = lll->phy_tx;
    cc48:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
    cc4c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
    cc50:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
    cc54:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
    cc58:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
    cc5a:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
    cc5e:	f361 1206 	bfi	r2, r1, #4, #3
    cc62:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
    cc66:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
    cc6a:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
    cc6e:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    cc72:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
    cc74:	f000 80ec 	beq.w	ce50 <ull_conn_rx+0x134c>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    cc78:	221c      	movs	r2, #28
    cc7a:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
    cc7c:	2300      	movs	r3, #0
    cc7e:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
    cc80:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
    cc82:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    cc86:	f3c3 0302 	ubfx	r3, r3, #0, #3
    cc8a:	77ab      	strb	r3, [r5, #30]
    cc8c:	f7ff b92c 	b.w	bee8 <ull_conn_rx+0x3e4>
	conn->llcp_enc.pause_rx = 0U;
    cc90:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
    cc94:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
    cc98:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    cc9a:	f021 0103 	bic.w	r1, r1, #3
    cc9e:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
    cca2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    cca6:	4618      	mov	r0, r3
    cca8:	f7fe bf7b 	b.w	bba2 <ull_conn_rx+0x9e>
	    ((pdu_data_tx->llctrl.opcode !=
    ccac:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ccae:	2b03      	cmp	r3, #3
    ccb0:	f43f acdd 	beq.w	c66e <ull_conn_rx+0xb6a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    ccb4:	2b0a      	cmp	r3, #10
    ccb6:	f47f ad2b 	bne.w	c710 <ull_conn_rx+0xc0c>
    ccba:	e4d8      	b.n	c66e <ull_conn_rx+0xb6a>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    ccbc:	2301      	movs	r3, #1
    ccbe:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
    ccc0:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
    ccc2:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
    ccc6:	2000      	movs	r0, #0
    ccc8:	f7fe bf6b 	b.w	bba2 <ull_conn_rx+0x9e>
    cccc:	20001cbc 	.word	0x20001cbc
    ccd0:	20001d50 	.word	0x20001d50
    ccd4:	0001bc28 	.word	0x0001bc28
    ccd8:	0001bd74 	.word	0x0001bd74
    ccdc:	0001b7c8 	.word	0x0001b7c8
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
    cce0:	2101      	movs	r1, #1
    cce2:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
    cce6:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
    ccea:	f7f9 f9e9 	bl	60c0 <util_ones_count_get>
    ccee:	2801      	cmp	r0, #1
    ccf0:	f200 80b2 	bhi.w	ce58 <ull_conn_rx+0x1354>
	phy = ind->p_to_c_phy;
    ccf4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    ccf8:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
    ccfc:	f10d 000f 	add.w	r0, sp, #15
    cd00:	2101      	movs	r1, #1
    cd02:	f7f9 f9dd 	bl	60c0 <util_ones_count_get>
    cd06:	2801      	cmp	r0, #1
    cd08:	f200 80a6 	bhi.w	ce58 <ull_conn_rx+0x1354>
	instant = sys_le16_to_cpu(ind->instant);
    cd0c:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    cd0e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    cd10:	1ad3      	subs	r3, r2, r3
    cd12:	041b      	lsls	r3, r3, #16
    cd14:	f100 8288 	bmi.w	d228 <ull_conn_rx+0x1724>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    cd18:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    cd1c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    cd20:	1a5b      	subs	r3, r3, r1
    cd22:	f003 0303 	and.w	r3, r3, #3
    cd26:	2b02      	cmp	r3, #2
    cd28:	f000 8279 	beq.w	d21e <ull_conn_rx+0x171a>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    cd2c:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    cd30:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    cd34:	4283      	cmp	r3, r0
    cd36:	d018      	beq.n	cd6a <ull_conn_rx+0x1266>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    cd38:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    cd3c:	f003 0303 	and.w	r3, r3, #3
    cd40:	2b02      	cmp	r3, #2
    cd42:	d112      	bne.n	cd6a <ull_conn_rx+0x1266>
		conn->llcp_phy.pause_tx = 0U;
    cd44:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
    cd48:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
    cd4c:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    cd50:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
    cd54:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    cd58:	f3c3 0380 	ubfx	r3, r3, #2, #1
    cd5c:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
    cd60:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    cd62:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
    cd66:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
    cd6a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
    cd6e:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
    cd72:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
    cd76:	009b      	lsls	r3, r3, #2
    cd78:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    cd7c:	f003 031c 	and.w	r3, r3, #28
    cd80:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    cd84:	f002 0202 	and.w	r2, r2, #2
    cd88:	4313      	orrs	r3, r2
    cd8a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
    cd8e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    cd92:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
    cd94:	6833      	ldr	r3, [r6, #0]
    cd96:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
    cd98:	6832      	ldr	r2, [r6, #0]
    cd9a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
    cd9e:	2300      	movs	r3, #0
    cda0:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
    cda2:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
    cda6:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
    cda8:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
    cdaa:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
    cdae:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
    cdb2:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
    cdb6:	f43e aef4 	beq.w	bba2 <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    cdba:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    cdbe:	f3c2 0282 	ubfx	r2, r2, #2, #3
    cdc2:	f362 1106 	bfi	r1, r2, #4, #3
    cdc6:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
    cdca:	4618      	mov	r0, r3
    cdcc:	f7fe bee9 	b.w	bba2 <ull_conn_rx+0x9e>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    cdd0:	2301      	movs	r3, #1
    cdd2:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
    cdd4:	232a      	movs	r3, #42	; 0x2a
    cdd6:	e774      	b.n	ccc2 <ull_conn_rx+0x11be>
			conn->procedure_expire = 0U;
    cdd8:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    cdda:	4551      	cmp	r1, sl
			conn->llcp_length.ack = conn->llcp_length.req;
    cddc:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
    cde0:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    cde4:	f000 8129 	beq.w	d03a <ull_conn_rx+0x1536>
			conn->lll.max_rx_time = eff_rx_time;
    cde8:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
    cdec:	2b00      	cmp	r3, #0
    cdee:	f000 811f 	beq.w	d030 <ull_conn_rx+0x152c>
					(conn->llcp_length.req - 1);
    cdf2:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
    cdf4:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
    cdf8:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
    cdfc:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
    ce00:	2603      	movs	r6, #3
    ce02:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
    ce06:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
    ce0a:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
    ce0e:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
    ce12:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
    ce16:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
    ce1a:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
    ce1c:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
    ce20:	84e8      	strh	r0, [r5, #38]	; 0x26
    ce22:	e4d9      	b.n	c7d8 <ull_conn_rx+0xcd4>
		conn_upd_curr = conn;
    ce24:	601c      	str	r4, [r3, #0]
    ce26:	f7ff b814 	b.w	be52 <ull_conn_rx+0x34e>
	conn_upd_curr = NULL;
    ce2a:	4bce      	ldr	r3, [pc, #824]	; (d164 <ull_conn_rx+0x1660>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ce2c:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    ce30:	2200      	movs	r2, #0
    ce32:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
    ce34:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    ce38:	f013 0310 	ands.w	r3, r3, #16
    ce3c:	f040 80c5 	bne.w	cfca <ull_conn_rx+0x14c6>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ce40:	2201      	movs	r2, #1
    ce42:	712a      	strb	r2, [r5, #4]
	int nack = 0;
    ce44:	4618      	mov	r0, r3
				break;
    ce46:	f7fe beac 	b.w	bba2 <ull_conn_rx+0x9e>
	struct node_tx *tx = NULL;
    ce4a:	2300      	movs	r3, #0
    ce4c:	f7fe bfc5 	b.w	bdda <ull_conn_rx+0x2d6>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ce50:	2201      	movs	r2, #1
    ce52:	711a      	strb	r2, [r3, #4]
    ce54:	f7ff b848 	b.w	bee8 <ull_conn_rx+0x3e4>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ce58:	6833      	ldr	r3, [r6, #0]
    ce5a:	2201      	movs	r2, #1
    ce5c:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
    ce5e:	231e      	movs	r3, #30
    ce60:	e72f      	b.n	ccc2 <ull_conn_rx+0x11be>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    ce62:	4ac1      	ldr	r2, [pc, #772]	; (d168 <ull_conn_rx+0x1664>)
    ce64:	49c1      	ldr	r1, [pc, #772]	; (d16c <ull_conn_rx+0x1668>)
    ce66:	48c2      	ldr	r0, [pc, #776]	; (d170 <ull_conn_rx+0x166c>)
    ce68:	f241 43d1 	movw	r3, #5329	; 0x14d1
    ce6c:	f00a f87f 	bl	16f6e <printk>
    ce70:	4040      	eors	r0, r0
    ce72:	f380 8811 	msr	BASEPRI, r0
    ce76:	f04f 0003 	mov.w	r0, #3
    ce7a:	df02      	svc	2
    ce7c:	f7ff bb7f 	b.w	c57e <ull_conn_rx+0xa7a>
				      0x03) == 0x02) &&
    ce80:	f894 60e6 	ldrb.w	r6, [r4, #230]	; 0xe6
    ce84:	2e03      	cmp	r6, #3
    ce86:	f47f ac30 	bne.w	c6ea <ull_conn_rx+0xbe6>
    ce8a:	e427      	b.n	c6dc <ull_conn_rx+0xbd8>
				conn->llcp_length.state =
    ce8c:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
    ce90:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
    ce94:	2504      	movs	r5, #4
    ce96:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
    ce9a:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
    ce9e:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
    cea2:	e48f      	b.n	c7c4 <ull_conn_rx+0xcc0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    cea4:	2b23      	cmp	r3, #35	; 0x23
    cea6:	f43f ad57 	beq.w	c958 <ull_conn_rx+0xe54>
			conn->periph.ticks_to_offset =
    ceaa:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    ceae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    ceb2:	e551      	b.n	c958 <ull_conn_rx+0xe54>
				uint16_t interval_min =
    ceb4:	f8b5 9020 	ldrh.w	r9, [r5, #32]
    ceb8:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    cebc:	2e05      	cmp	r6, #5
    cebe:	f67f ad5c 	bls.w	c97a <ull_conn_rx+0xe76>
				uint16_t interval_max =
    cec2:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
    cec6:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    ceca:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
    cece:	f63f ad54 	bhi.w	c97a <ull_conn_rx+0xe76>
				    (interval_max > 3200) ||
    ced2:	4576      	cmp	r6, lr
    ced4:	f63f ad51 	bhi.w	c97a <ull_conn_rx+0xe76>
				uint16_t latency =
    ced8:	8cae      	ldrh	r6, [r5, #36]	; 0x24
    ceda:	f8ad 6006 	strh.w	r6, [sp, #6]
    cede:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
    cee0:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
    cee4:	f4bf ad49 	bcs.w	c97a <ull_conn_rx+0xe76>
				uint16_t timeout =
    cee8:	8cef      	ldrh	r7, [r5, #38]	; 0x26
    ceea:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
    ceee:	f1ac 0a0a 	sub.w	sl, ip, #10
    cef2:	f640 4b76 	movw	fp, #3190	; 0xc76
    cef6:	fa1f fa8a 	uxth.w	sl, sl
    cefa:	45da      	cmp	sl, fp
    cefc:	f63f ad3d 	bhi.w	c97a <ull_conn_rx+0xe76>
				     ((latency + 1) * interval_max)) ||
    cf00:	f106 0a01 	add.w	sl, r6, #1
    cf04:	fa1f fa8a 	uxth.w	sl, sl
    cf08:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
    cf0c:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
    cf10:	f4bf ad33 	bcs.w	c97a <ull_conn_rx+0xe76>
				     ((latency + 1) * interval_max)) ||
    cf14:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
    cf18:	45de      	cmp	lr, fp
    cf1a:	f4ff ad2e 	bcc.w	c97a <ull_conn_rx+0xe76>
				conn->llcp_conn_param.interval_max =
    cf1e:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.latency =	latency;
    cf22:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
    cf26:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.latency =	latency;
    cf2a:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
    cf2e:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
    cf32:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    cf36:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
    cf3a:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
    cf3e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    cf42:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
    cf46:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
    cf4a:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
    cf4e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
    cf52:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
    cf56:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
    cf5a:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
    cf5e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
    cf62:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
    cf66:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
    cf6a:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
    cf6e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
    cf72:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
    cf76:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
    cf7a:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
    cf7e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
    cf82:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
    cf86:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
    cf8a:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
    cf8e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
    cf92:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
    cf96:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
    cf9a:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
    cf9e:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
    cfa2:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
    cfa6:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
    cfa8:	45be      	cmp	lr, r7
    cfaa:	f000 809a 	beq.w	d0e2 <ull_conn_rx+0x15de>
					if (conn->llcp_enc.pause_tx) {
    cfae:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
    cfb2:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
    cfb6:	f43f acad 	beq.w	c914 <ull_conn_rx+0xe10>
						conn->llcp_conn_param.state =
    cfba:	2602      	movs	r6, #2
    cfbc:	f366 0203 	bfi	r2, r6, #0, #4
    cfc0:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
    cfc4:	2201      	movs	r2, #1
    cfc6:	712a      	strb	r2, [r5, #4]
    cfc8:	e4a9      	b.n	c91e <ull_conn_rx+0xe1a>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    cfca:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    cfcc:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    cfd0:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    cfd2:	d15e      	bne.n	d092 <ull_conn_rx+0x158e>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    cfd4:	231a      	movs	r3, #26
    cfd6:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
    cfd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
    cfda:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
    cfde:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
    cfe0:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
    cfe2:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
    cfe6:	227d      	movs	r2, #125	; 0x7d
    cfe8:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
    cfec:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
    cfee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cff2:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
    cff6:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
    cff8:	f7fe bf76 	b.w	bee8 <ull_conn_rx+0x3e4>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
    cffc:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
    d000:	3202      	adds	r2, #2
    d002:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
    d006:	2b00      	cmp	r3, #0
    d008:	d151      	bne.n	d0ae <ull_conn_rx+0x15aa>
			conn->periph.llcp_type = conn->llcp_type;
    d00a:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    d00e:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
    d012:	f7fe be67 	b.w	bce4 <ull_conn_rx+0x1e0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d016:	6832      	ldr	r2, [r6, #0]
    d018:	201c      	movs	r0, #28
    d01a:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
    d01c:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
    d01e:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
    d020:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
    d024:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
    d026:	f3c2 0302 	ubfx	r3, r2, #0, #3
    d02a:	77ab      	strb	r3, [r5, #30]
		if (err) {
    d02c:	f7fe bdb9 	b.w	bba2 <ull_conn_rx+0x9e>
				conn->lll.max_tx_octets = eff_tx_octets;
    d030:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
    d034:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
    d038:	e6ed      	b.n	ce16 <ull_conn_rx+0x1312>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    d03a:	4540      	cmp	r0, r8
    d03c:	f47f aed4 	bne.w	cde8 <ull_conn_rx+0x12e4>
			    eff_rx_time == conn->lll.max_rx_time &&
    d040:	45cc      	cmp	ip, r9
    d042:	f47f aed1 	bne.w	cde8 <ull_conn_rx+0x12e4>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d046:	6832      	ldr	r2, [r6, #0]
    d048:	2501      	movs	r5, #1
    d04a:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
    d04c:	f7ff bbc4 	b.w	c7d8 <ull_conn_rx+0xcd4>
			conn->tx_data = conn->tx_data->next;
    d050:	681a      	ldr	r2, [r3, #0]
    d052:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    d056:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    d05a:	2a00      	cmp	r2, #0
    d05c:	f47f a8ab 	bne.w	c1b6 <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head->next;
    d060:	681a      	ldr	r2, [r3, #0]
    d062:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    d064:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    d066:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    d06a:	f7ff b8ab 	b.w	c1c4 <ull_conn_rx+0x6c0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    d06e:	2a23      	cmp	r2, #35	; 0x23
    d070:	f43f aa6f 	beq.w	c552 <ull_conn_rx+0xa4e>
			conn->periph.ticks_to_offset =
    d074:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    d078:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
    d07c:	f7ff ba69 	b.w	c552 <ull_conn_rx+0xa4e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d080:	791a      	ldrb	r2, [r3, #4]
    d082:	f002 0203 	and.w	r2, r2, #3
    d086:	2a03      	cmp	r2, #3
    d088:	d076      	beq.n	d178 <ull_conn_rx+0x1674>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    d08a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    d08e:	f7ff b892 	b.w	c1b6 <ull_conn_rx+0x6b2>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    d092:	4a35      	ldr	r2, [pc, #212]	; (d168 <ull_conn_rx+0x1664>)
    d094:	4935      	ldr	r1, [pc, #212]	; (d16c <ull_conn_rx+0x1668>)
    d096:	4836      	ldr	r0, [pc, #216]	; (d170 <ull_conn_rx+0x166c>)
    d098:	f641 4313 	movw	r3, #7187	; 0x1c13
    d09c:	f009 ff67 	bl	16f6e <printk>
    d0a0:	4040      	eors	r0, r0
    d0a2:	f380 8811 	msr	BASEPRI, r0
    d0a6:	f04f 0003 	mov.w	r0, #3
    d0aa:	df02      	svc	2
    d0ac:	e792      	b.n	cfd4 <ull_conn_rx+0x14d0>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
    d0ae:	4a2e      	ldr	r2, [pc, #184]	; (d168 <ull_conn_rx+0x1664>)
    d0b0:	4930      	ldr	r1, [pc, #192]	; (d174 <ull_conn_rx+0x1670>)
    d0b2:	482f      	ldr	r0, [pc, #188]	; (d170 <ull_conn_rx+0x166c>)
    d0b4:	f641 139e 	movw	r3, #6558	; 0x199e
    d0b8:	f009 ff59 	bl	16f6e <printk>
    d0bc:	4040      	eors	r0, r0
    d0be:	f380 8811 	msr	BASEPRI, r0
    d0c2:	f04f 0003 	mov.w	r0, #3
    d0c6:	df02      	svc	2
    d0c8:	e79f      	b.n	d00a <ull_conn_rx+0x1506>
			conn->tx_data = conn->tx_data->next;
    d0ca:	6818      	ldr	r0, [r3, #0]
    d0cc:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    d0d0:	2900      	cmp	r1, #0
    d0d2:	f47f acc9 	bne.w	ca68 <ull_conn_rx+0xf64>
			tx->next = conn->tx_head->next;
    d0d6:	6819      	ldr	r1, [r3, #0]
    d0d8:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
    d0da:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
    d0dc:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
    d0e0:	e4c9      	b.n	ca76 <ull_conn_rx+0xf72>
				     lll->interval) ||
    d0e2:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
    d0e6:	45b6      	cmp	lr, r6
    d0e8:	f47f af61 	bne.w	cfae <ull_conn_rx+0x14aa>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d0ec:	f240 46e2 	movw	r6, #1250	; 0x4e2
    d0f0:	fb06 f707 	mul.w	r7, r6, r7
    d0f4:	f242 7610 	movw	r6, #10000	; 0x2710
    d0f8:	fb06 760c 	mla	r6, r6, ip, r7
    d0fc:	3e01      	subs	r6, #1
    d0fe:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
    d102:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
    d106:	b2b6      	uxth	r6, r6
    d108:	42b7      	cmp	r7, r6
    d10a:	f47f af50 	bne.w	cfae <ull_conn_rx+0x14aa>
				conn->llcp_conn_param.state =
    d10e:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
    d112:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
    d116:	f042 0201 	orr.w	r2, r2, #1
    d11a:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d11e:	2201      	movs	r2, #1
    d120:	712a      	strb	r2, [r5, #4]
    d122:	f7ff bbfc 	b.w	c91e <ull_conn_rx+0xe1a>
			     lll->interval) ||
    d126:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
    d128:	4567      	cmp	r7, ip
    d12a:	f47f abf1 	bne.w	c910 <ull_conn_rx+0xe0c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d12e:	f240 47e2 	movw	r7, #1250	; 0x4e2
    d132:	fb07 f606 	mul.w	r6, r7, r6
    d136:	f242 7710 	movw	r7, #10000	; 0x2710
    d13a:	fb07 6202 	mla	r2, r7, r2, r6
    d13e:	3a01      	subs	r2, #1
    d140:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
    d144:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
    d148:	b292      	uxth	r2, r2
    d14a:	4296      	cmp	r6, r2
    d14c:	f47f abe0 	bne.w	c910 <ull_conn_rx+0xe0c>
    d150:	e7dd      	b.n	d10e <ull_conn_rx+0x160a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d152:	7919      	ldrb	r1, [r3, #4]
    d154:	f001 0103 	and.w	r1, r1, #3
    d158:	2903      	cmp	r1, #3
    d15a:	d014      	beq.n	d186 <ull_conn_rx+0x1682>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    d15c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    d160:	e482      	b.n	ca68 <ull_conn_rx+0xf64>
    d162:	bf00      	nop
    d164:	20001cbc 	.word	0x20001cbc
    d168:	0001bc28 	.word	0x0001bc28
    d16c:	0001b8f0 	.word	0x0001b8f0
    d170:	0001b7c8 	.word	0x0001b7c8
    d174:	0001bd50 	.word	0x0001bd50
	    ((pdu_data_tx->llctrl.opcode !=
    d178:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d17a:	2a03      	cmp	r2, #3
    d17c:	f43f af70 	beq.w	d060 <ull_conn_rx+0x155c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    d180:	2a0a      	cmp	r2, #10
    d182:	d182      	bne.n	d08a <ull_conn_rx+0x1586>
    d184:	e76c      	b.n	d060 <ull_conn_rx+0x155c>
	    ((pdu_data_tx->llctrl.opcode !=
    d186:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d188:	2903      	cmp	r1, #3
    d18a:	d0a4      	beq.n	d0d6 <ull_conn_rx+0x15d2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    d18c:	290a      	cmp	r1, #10
    d18e:	d1e5      	bne.n	d15c <ull_conn_rx+0x1658>
    d190:	e7a1      	b.n	d0d6 <ull_conn_rx+0x15d2>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
    d192:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
    d196:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    d19a:	429a      	cmp	r2, r3
    d19c:	d00e      	beq.n	d1bc <ull_conn_rx+0x16b8>
    d19e:	4a25      	ldr	r2, [pc, #148]	; (d234 <ull_conn_rx+0x1730>)
    d1a0:	4925      	ldr	r1, [pc, #148]	; (d238 <ull_conn_rx+0x1734>)
    d1a2:	4826      	ldr	r0, [pc, #152]	; (d23c <ull_conn_rx+0x1738>)
    d1a4:	f44f 53a5 	mov.w	r3, #5280	; 0x14a0
    d1a8:	f009 fee1 	bl	16f6e <printk>
    d1ac:	4040      	eors	r0, r0
    d1ae:	f380 8811 	msr	BASEPRI, r0
    d1b2:	f04f 0003 	mov.w	r0, #3
    d1b6:	df02      	svc	2
    d1b8:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    d1bc:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    d1c0:	2106      	movs	r1, #6
    d1c2:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
    d1c6:	3b01      	subs	r3, #1
    d1c8:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    d1cc:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    d1d0:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    d1d4:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
    d1d8:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    d1da:	00db      	lsls	r3, r3, #3
    d1dc:	430b      	orrs	r3, r1
    d1de:	f022 020f 	bic.w	r2, r2, #15
    d1e2:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
    d1e4:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    d1e8:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    d1ec:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    d1f0:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
    d1f4:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    d1f6:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
    d1fa:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    d1fe:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    d202:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    d206:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
    d20a:	f7fe bcc7 	b.w	bb9c <ull_conn_rx+0x98>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    d20e:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
    d212:	f011 0f06 	tst.w	r1, #6
    d216:	f43f aa9f 	beq.w	c758 <ull_conn_rx+0xc54>
    d21a:	f7fe bdd7 	b.w	bdcc <ull_conn_rx+0x2c8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d21e:	6833      	ldr	r3, [r6, #0]
    d220:	2201      	movs	r2, #1
    d222:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    d224:	232a      	movs	r3, #42	; 0x2a
    d226:	e54c      	b.n	ccc2 <ull_conn_rx+0x11be>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d228:	6833      	ldr	r3, [r6, #0]
    d22a:	2201      	movs	r2, #1
    d22c:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
    d22e:	2328      	movs	r3, #40	; 0x28
    d230:	e547      	b.n	ccc2 <ull_conn_rx+0x11be>
    d232:	bf00      	nop
    d234:	0001bc28 	.word	0x0001bc28
    d238:	0001bd74 	.word	0x0001bd74
    d23c:	0001b7c8 	.word	0x0001b7c8

0000d240 <ull_conn_llcp>:
{
    d240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d244:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
    d246:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
    d24a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    d24e:	4298      	cmp	r0, r3
{
    d250:	460d      	mov	r5, r1
    d252:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    d254:	d030      	beq.n	d2b8 <ull_conn_llcp+0x78>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    d256:	1a1b      	subs	r3, r3, r0
    d258:	f003 0303 	and.w	r3, r3, #3
    d25c:	2b02      	cmp	r3, #2
    d25e:	d010      	beq.n	d282 <ull_conn_llcp+0x42>
    d260:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    d264:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    d266:	f1bc 0f00 	cmp.w	ip, #0
    d26a:	db4e      	blt.n	d30a <ull_conn_llcp+0xca>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
    d26c:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
    d270:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    d274:	1a9b      	subs	r3, r3, r2
    d276:	b2db      	uxtb	r3, r3
    d278:	2b01      	cmp	r3, #1
    d27a:	d05f      	beq.n	d33c <ull_conn_llcp+0xfc>
	return 0;
    d27c:	2000      	movs	r0, #0
}
    d27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    d282:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
    d286:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    d28a:	429a      	cmp	r2, r3
    d28c:	d006      	beq.n	d29c <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
    d28e:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
    d292:	f003 0306 	and.w	r3, r3, #6
    d296:	2b04      	cmp	r3, #4
    d298:	f000 81f4 	beq.w	d684 <ull_conn_llcp+0x444>
		switch (conn->llcp_type) {
    d29c:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
    d2a0:	1e7b      	subs	r3, r7, #1
    d2a2:	2b05      	cmp	r3, #5
    d2a4:	f200 81d8 	bhi.w	d658 <ull_conn_llcp+0x418>
    d2a8:	e8df f013 	tbh	[pc, r3, lsl #1]
    d2ac:	01720024 	.word	0x01720024
    d2b0:	01d600eb 	.word	0x01d600eb
    d2b4:	00a500b0 	.word	0x00a500b0
    d2b8:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
    d2bc:	2a00      	cmp	r2, #0
    d2be:	4694      	mov	ip, r2
    d2c0:	f2c0 81da 	blt.w	d678 <ull_conn_llcp+0x438>
	    !conn->llcp_enc.pause_rx) {
    d2c4:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
    d2c8:	f017 0801 	ands.w	r8, r7, #1
    d2cc:	d1cb      	bne.n	d266 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    d2ce:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
    d2d2:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
    d2d6:	45ce      	cmp	lr, r9
    d2d8:	f000 8304 	beq.w	d8e4 <ull_conn_llcp+0x6a4>
			conn->llcp_type = LLCP_CONN_UPD;
    d2dc:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
    d2de:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
    d2e0:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
    d2e4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    d2e8:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    d2ec:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
    d2f0:	429a      	cmp	r2, r3
    d2f2:	d1cc      	bne.n	d28e <ull_conn_llcp+0x4e>
			if (event_conn_upd_prep(conn, lazy,
    d2f4:	462a      	mov	r2, r5
    d2f6:	4631      	mov	r1, r6
    d2f8:	4620      	mov	r0, r4
    d2fa:	f7f3 fb25 	bl	948 <event_conn_upd_prep>
    d2fe:	2800      	cmp	r0, #0
    d300:	f040 81b7 	bne.w	d672 <ull_conn_llcp+0x432>
				return -ECANCELED;
    d304:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    d308:	e7b9      	b.n	d27e <ull_conn_llcp+0x3e>
    d30a:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    d30e:	2900      	cmp	r1, #0
    d310:	d0ac      	beq.n	d26c <ull_conn_llcp+0x2c>
		switch (conn->periph.llcp_type) {
    d312:	2902      	cmp	r1, #2
    d314:	f000 816e 	beq.w	d5f4 <ull_conn_llcp+0x3b4>
    d318:	2906      	cmp	r1, #6
    d31a:	d05a      	beq.n	d3d2 <ull_conn_llcp+0x192>
    d31c:	2901      	cmp	r1, #1
    d31e:	d061      	beq.n	d3e4 <ull_conn_llcp+0x1a4>
			LL_ASSERT(0);
    d320:	4ac9      	ldr	r2, [pc, #804]	; (d648 <ull_conn_llcp+0x408>)
    d322:	49ca      	ldr	r1, [pc, #808]	; (d64c <ull_conn_llcp+0x40c>)
    d324:	48ca      	ldr	r0, [pc, #808]	; (d650 <ull_conn_llcp+0x410>)
    d326:	f240 5312 	movw	r3, #1298	; 0x512
    d32a:	f009 fe20 	bl	16f6e <printk>
    d32e:	4040      	eors	r0, r0
    d330:	f380 8811 	msr	BASEPRI, r0
    d334:	f04f 0003 	mov.w	r0, #3
    d338:	df02      	svc	2
			break;
    d33a:	e797      	b.n	d26c <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d33c:	48c5      	ldr	r0, [pc, #788]	; (d654 <ull_conn_llcp+0x414>)
    d33e:	f7f8 fce9 	bl	5d14 <mem_acquire>
		if (tx) {
    d342:	2800      	cmp	r0, #0
    d344:	d038      	beq.n	d3b8 <ull_conn_llcp+0x178>
			conn->llcp_terminate.ack--;
    d346:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
    d34a:	3b01      	subs	r3, #1
    d34c:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d350:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    d352:	2202      	movs	r2, #2
    d354:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d356:	f043 0303 	orr.w	r3, r3, #3
    d35a:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    d35c:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
    d35e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
    d362:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
		if (!conn->tx_ctrl) {
    d366:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			pdu_tx->llctrl.terminate_ind.error_code =
    d36a:	7202      	strb	r2, [r0, #8]
	if (
    d36c:	b1b3      	cbz	r3, d39c <ull_conn_llcp+0x15c>
	    !conn->llcp_enc.pause_tx &&
    d36e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    d372:	0795      	lsls	r5, r2, #30
    d374:	d412      	bmi.n	d39c <ull_conn_llcp+0x15c>
	    !conn->llcp_phy.pause_tx &&
    d376:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    d37a:	07d2      	lsls	r2, r2, #31
    d37c:	d40e      	bmi.n	d39c <ull_conn_llcp+0x15c>
		if (conn->tx_head == conn->tx_data) {
    d37e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    d382:	4293      	cmp	r3, r2
    d384:	f000 8568 	beq.w	de58 <ull_conn_llcp+0xc18>
		} else if (!conn->tx_ctrl) {
    d388:	b959      	cbnz	r1, d3a2 <ull_conn_llcp+0x162>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d38a:	791a      	ldrb	r2, [r3, #4]
    d38c:	f002 0203 	and.w	r2, r2, #3
    d390:	2a03      	cmp	r2, #3
    d392:	f000 8705 	beq.w	e1a0 <ull_conn_llcp+0xf60>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    d396:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    d39a:	e004      	b.n	d3a6 <ull_conn_llcp+0x166>
		if (!conn->tx_ctrl) {
    d39c:	2900      	cmp	r1, #0
    d39e:	f000 82f5 	beq.w	d98c <ull_conn_llcp+0x74c>
	tx->next = conn->tx_ctrl_last->next;
    d3a2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d3a6:	681a      	ldr	r2, [r3, #0]
    d3a8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    d3aa:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    d3ac:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    d3ae:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d3b2:	2b00      	cmp	r3, #0
    d3b4:	f000 816a 	beq.w	d68c <ull_conn_llcp+0x44c>
		if (!conn->procedure_expire) {
    d3b8:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    d3bc:	2800      	cmp	r0, #0
    d3be:	f47f af5d 	bne.w	d27c <ull_conn_llcp+0x3c>
			conn->procedure_expire = conn->supervision_reload;
    d3c2:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
    d3c6:	2b01      	cmp	r3, #1
    d3c8:	f240 82dc 	bls.w	d984 <ull_conn_llcp+0x744>
			conn->procedure_expire = conn->supervision_reload;
    d3cc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    d3d0:	e754      	b.n	d27c <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
    d3d2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    d3d4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    d3d6:	440a      	add	r2, r1
    d3d8:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
    d3da:	4620      	mov	r0, r4
    d3dc:	b291      	uxth	r1, r2
    d3de:	f7fd fe27 	bl	b030 <event_phy_upd_ind_prep>
		break;
    d3e2:	e743      	b.n	d26c <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
    d3e4:	462a      	mov	r2, r5
    d3e6:	4631      	mov	r1, r6
    d3e8:	4620      	mov	r0, r4
    d3ea:	f7f3 faad 	bl	948 <event_conn_upd_prep>
    d3ee:	2800      	cmp	r0, #0
    d3f0:	f47f af3c 	bne.w	d26c <ull_conn_llcp+0x2c>
    d3f4:	e786      	b.n	d304 <ull_conn_llcp+0xc4>
			event_counter = lll->event_counter +
    d3f6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    d3f8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    d3fa:	4419      	add	r1, r3
    d3fc:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
    d3fe:	b289      	uxth	r1, r1
    d400:	4620      	mov	r0, r4
    d402:	f7fd fe15 	bl	b030 <event_phy_upd_ind_prep>
		break;
    d406:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    d40a:	e72c      	b.n	d266 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d40c:	4891      	ldr	r0, [pc, #580]	; (d654 <ull_conn_llcp+0x414>)
    d40e:	f7f8 fc81 	bl	5d14 <mem_acquire>
	if (tx) {
    d412:	2800      	cmp	r0, #0
    d414:	f000 812d 	beq.w	d672 <ull_conn_llcp+0x432>
		conn->llcp_ack = conn->llcp_req;
    d418:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    d41c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d420:	7903      	ldrb	r3, [r0, #4]
    d422:	f043 0303 	orr.w	r3, r3, #3
    d426:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    d428:	2301      	movs	r3, #1
    d42a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    d42c:	2312      	movs	r3, #18
    d42e:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
    d430:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
	if (
    d434:	2b00      	cmp	r3, #0
    d436:	f000 82b2 	beq.w	d99e <ull_conn_llcp+0x75e>
	    !conn->llcp_enc.pause_tx &&
    d43a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    d43e:	078f      	lsls	r7, r1, #30
    d440:	f100 82ad 	bmi.w	d99e <ull_conn_llcp+0x75e>
	    !conn->llcp_phy.pause_tx &&
    d444:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    d448:	07c9      	lsls	r1, r1, #31
    d44a:	f100 82a8 	bmi.w	d99e <ull_conn_llcp+0x75e>
		if (conn->tx_head == conn->tx_data) {
    d44e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    d452:	428b      	cmp	r3, r1
    d454:	f000 8681 	beq.w	e15a <ull_conn_llcp+0xf1a>
		} else if (!conn->tx_ctrl) {
    d458:	2a00      	cmp	r2, #0
    d45a:	f000 86ac 	beq.w	e1b6 <ull_conn_llcp+0xf76>
	tx->next = conn->tx_ctrl_last->next;
    d45e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d462:	681a      	ldr	r2, [r3, #0]
    d464:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    d466:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    d468:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    d46a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d46e:	2b00      	cmp	r3, #0
    d470:	f000 83e2 	beq.w	dc38 <ull_conn_llcp+0x9f8>
		conn->procedure_expire = conn->procedure_reload;
    d474:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    d478:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    d47c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    d480:	e6f1      	b.n	d266 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
    d482:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    d486:	f013 0803 	ands.w	r8, r3, #3
    d48a:	f000 8151 	beq.w	d730 <ull_conn_llcp+0x4f0>
		if (lll->role &&
    d48e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d492:	2b00      	cmp	r3, #0
    d494:	f6bf aeea 	bge.w	d26c <ull_conn_llcp+0x2c>
    d498:	f1b8 0f01 	cmp.w	r8, #1
    d49c:	f47f af35 	bne.w	d30a <ull_conn_llcp+0xca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d4a0:	486c      	ldr	r0, [pc, #432]	; (d654 <ull_conn_llcp+0x414>)
    d4a2:	f7f8 fc37 	bl	5d14 <mem_acquire>
	if (!tx) {
    d4a6:	4607      	mov	r7, r0
    d4a8:	2800      	cmp	r0, #0
    d4aa:	f000 80e2 	beq.w	d672 <ull_conn_llcp+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d4ae:	7903      	ldrb	r3, [r0, #4]
    d4b0:	f043 0303 	orr.w	r3, r3, #3
    d4b4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    d4b6:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    d4ba:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    d4bc:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    d4c0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    d4c2:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    d4c6:	210c      	movs	r1, #12
    d4c8:	4640      	mov	r0, r8
    d4ca:	f003 faa5 	bl	10a18 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
    d4ce:	4641      	mov	r1, r8
    d4d0:	2208      	movs	r2, #8
    d4d2:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
    d4d6:	f00a fb11 	bl	17afc <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
    d4da:	464a      	mov	r2, r9
    d4dc:	f107 0110 	add.w	r1, r7, #16
    d4e0:	f104 0098 	add.w	r0, r4, #152	; 0x98
    d4e4:	f00a fb0a 	bl	17afc <memcpy>
	    conn->tx_head &&
    d4e8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    d4ec:	2b00      	cmp	r3, #0
    d4ee:	f000 84a7 	beq.w	de40 <ull_conn_llcp+0xc00>
	    !conn->llcp_enc.pause_tx &&
    d4f2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    d4f6:	0791      	lsls	r1, r2, #30
    d4f8:	f100 84a2 	bmi.w	de40 <ull_conn_llcp+0xc00>
	    !conn->llcp_phy.pause_tx &&
    d4fc:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    d500:	07d2      	lsls	r2, r2, #31
    d502:	f100 849d 	bmi.w	de40 <ull_conn_llcp+0xc00>
		if (conn->tx_head == conn->tx_data) {
    d506:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    d50a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    d50e:	428b      	cmp	r3, r1
    d510:	f000 8682 	beq.w	e218 <ull_conn_llcp+0xfd8>
		} else if (!conn->tx_ctrl) {
    d514:	2a00      	cmp	r2, #0
    d516:	f000 874a 	beq.w	e3ae <ull_conn_llcp+0x116e>
	tx->next = conn->tx_ctrl_last->next;
    d51a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d51e:	681a      	ldr	r2, [r3, #0]
    d520:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    d522:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    d524:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
    d526:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d52a:	2b00      	cmp	r3, #0
    d52c:	f000 85a6 	beq.w	e07c <ull_conn_llcp+0xe3c>
			rx = ll_pdu_rx_alloc();
    d530:	f7fb ffa8 	bl	9484 <ll_pdu_rx_alloc>
			if (!rx) {
    d534:	4607      	mov	r7, r0
    d536:	2800      	cmp	r0, #0
    d538:	f000 809b 	beq.w	d672 <ull_conn_llcp+0x432>
			rx->hdr.handle = conn->lll.handle;
    d53c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    d53e:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d540:	2303      	movs	r3, #3
    d542:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    d544:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    d546:	7f3b      	ldrb	r3, [r7, #28]
    d548:	f043 0303 	orr.w	r3, r3, #3
    d54c:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    d54e:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
    d550:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    d552:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    d554:	f204 1169 	addw	r1, r4, #361	; 0x169
    d558:	f107 0020 	add.w	r0, r7, #32
    d55c:	f00a face 	bl	17afc <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    d560:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
    d564:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    d568:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
    d56c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    d570:	6838      	ldr	r0, [r7, #0]
    d572:	4639      	mov	r1, r7
    d574:	f7fb ff58 	bl	9428 <ll_rx_put>
			ll_rx_sched();
    d578:	f7fb ff60 	bl	943c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    d57c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    d580:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    d584:	2202      	movs	r2, #2
    d586:	f362 0301 	bfi	r3, r2, #0, #2
    d58a:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    d58e:	e66a      	b.n	d266 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    d590:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    d592:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    d594:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
    d596:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
    d59a:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
    d59c:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
    d5a0:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
    d5a2:	d176      	bne.n	d692 <ull_conn_llcp+0x452>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    d5a4:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    d5a8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    d5ac:	1afb      	subs	r3, r7, r3
    d5ae:	0418      	lsls	r0, r3, #16
    d5b0:	f53f ae59 	bmi.w	d266 <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    d5b4:	f1bc 0f00 	cmp.w	ip, #0
    d5b8:	f2c0 8336 	blt.w	dc28 <ull_conn_llcp+0x9e8>
			conn->llcp_ack = conn->llcp_req;
    d5bc:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    d5c0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
    d5c4:	f104 0734 	add.w	r7, r4, #52	; 0x34
    d5c8:	2205      	movs	r2, #5
    d5ca:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    d5ce:	4638      	mov	r0, r7
    d5d0:	f00a fa94 	bl	17afc <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    d5d4:	2105      	movs	r1, #5
    d5d6:	4638      	mov	r0, r7
    d5d8:	f7f8 fd72 	bl	60c0 <util_ones_count_get>
		lll->data_chan_count =
    d5dc:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    d5e0:	2301      	movs	r3, #1
		lll->data_chan_count =
    d5e2:	f360 0c05 	bfi	ip, r0, #0, #6
    d5e6:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    d5ea:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
    d5ee:	fa4f fc8c 	sxtb.w	ip, ip
    d5f2:	e638      	b.n	d266 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    d5f4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    d5f6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
    d5f8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
    d5fc:	440a      	add	r2, r1
    d5fe:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
    d600:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
    d604:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
    d606:	f040 8122 	bne.w	d84e <ull_conn_llcp+0x60e>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    d60a:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    d60e:	1ab6      	subs	r6, r6, r2
    d610:	0436      	lsls	r6, r6, #16
    d612:	f53f ae2b 	bmi.w	d26c <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
    d616:	f104 0534 	add.w	r5, r4, #52	; 0x34
    d61a:	2205      	movs	r2, #5
			conn->periph.llcp_type = LLCP_NONE;
    d61c:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
    d620:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    d624:	4628      	mov	r0, r5
    d626:	f00a fa69 	bl	17afc <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    d62a:	2105      	movs	r1, #5
    d62c:	4628      	mov	r0, r5
    d62e:	f7f8 fd47 	bl	60c0 <util_ones_count_get>
		lll->data_chan_count =
    d632:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    d636:	2201      	movs	r2, #1
		lll->data_chan_count =
    d638:	f360 0305 	bfi	r3, r0, #0, #6
    d63c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    d640:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
    d644:	e612      	b.n	d26c <ull_conn_llcp+0x2c>
    d646:	bf00      	nop
    d648:	0001bc28 	.word	0x0001bc28
    d64c:	0001b828 	.word	0x0001b828
    d650:	0001b7c8 	.word	0x0001b7c8
    d654:	20001d50 	.word	0x20001d50
			LL_ASSERT(0);
    d658:	4ad5      	ldr	r2, [pc, #852]	; (d9b0 <ull_conn_llcp+0x770>)
    d65a:	49d6      	ldr	r1, [pc, #856]	; (d9b4 <ull_conn_llcp+0x774>)
    d65c:	48d6      	ldr	r0, [pc, #856]	; (d9b8 <ull_conn_llcp+0x778>)
    d65e:	f240 43e1 	movw	r3, #1249	; 0x4e1
    d662:	f009 fc84 	bl	16f6e <printk>
    d666:	4040      	eors	r0, r0
    d668:	f380 8811 	msr	BASEPRI, r0
    d66c:	f04f 0003 	mov.w	r0, #3
    d670:	df02      	svc	2
			break;
    d672:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    d676:	e5f6      	b.n	d266 <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
    d678:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
    d67c:	2900      	cmp	r1, #0
    d67e:	f47f ae48 	bne.w	d312 <ull_conn_llcp+0xd2>
    d682:	e61f      	b.n	d2c4 <ull_conn_llcp+0x84>
				event_len_prep(conn);
    d684:	4620      	mov	r0, r4
    d686:	f7fd fbdd 	bl	ae44 <event_len_prep>
    d68a:	e607      	b.n	d29c <ull_conn_llcp+0x5c>
		conn->tx_data_last = tx;
    d68c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    d690:	e692      	b.n	d3b8 <ull_conn_llcp+0x178>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d692:	48ca      	ldr	r0, [pc, #808]	; (d9bc <ull_conn_llcp+0x77c>)
    d694:	f7f8 fb3e 	bl	5d14 <mem_acquire>
		if (tx) {
    d698:	4680      	mov	r8, r0
    d69a:	2800      	cmp	r0, #0
    d69c:	d0e9      	beq.n	d672 <ull_conn_llcp+0x432>
						      conn->lll.latency + 6;
    d69e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    d6a0:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
    d6a4:	3306      	adds	r3, #6
    d6a6:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
    d6a8:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d6ac:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    d6ae:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d6b2:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
    d6b6:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d6ba:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d6bc:	2308      	movs	r3, #8
    d6be:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d6c0:	2301      	movs	r3, #1
    d6c2:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    d6c4:	2205      	movs	r2, #5
    d6c6:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    d6ca:	3008      	adds	r0, #8
    d6cc:	f00a fa16 	bl	17afc <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    d6d0:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    d6d4:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
    d6d8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    d6dc:	2b00      	cmp	r3, #0
    d6de:	f000 82ae 	beq.w	dc3e <ull_conn_llcp+0x9fe>
	    !conn->llcp_enc.pause_tx &&
    d6e2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    d6e6:	0792      	lsls	r2, r2, #30
    d6e8:	f100 82a9 	bmi.w	dc3e <ull_conn_llcp+0x9fe>
	    !conn->llcp_phy.pause_tx &&
    d6ec:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    d6f0:	07d7      	lsls	r7, r2, #31
    d6f2:	f100 82a4 	bmi.w	dc3e <ull_conn_llcp+0x9fe>
		if (conn->tx_head == conn->tx_data) {
    d6f6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    d6fa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    d6fe:	428b      	cmp	r3, r1
    d700:	f000 8563 	beq.w	e1ca <ull_conn_llcp+0xf8a>
		} else if (!conn->tx_ctrl) {
    d704:	2a00      	cmp	r2, #0
    d706:	f000 8607 	beq.w	e318 <ull_conn_llcp+0x10d8>
	tx->next = conn->tx_ctrl_last->next;
    d70a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d70e:	681a      	ldr	r2, [r3, #0]
    d710:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    d714:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    d718:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    d71c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d720:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    d724:	2b00      	cmp	r3, #0
    d726:	f47f ad9e 	bne.w	d266 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    d72a:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
    d72e:	e59a      	b.n	d266 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d730:	48a2      	ldr	r0, [pc, #648]	; (d9bc <ull_conn_llcp+0x77c>)
    d732:	f7f8 faef 	bl	5d14 <mem_acquire>
	if (!tx) {
    d736:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    d73a:	4681      	mov	r9, r0
    d73c:	2800      	cmp	r0, #0
    d73e:	f43f ad92 	beq.w	d266 <ull_conn_llcp+0x26>
	if (!lll->role) {
    d742:	f1bc 0f00 	cmp.w	ip, #0
    d746:	f280 82ff 	bge.w	dd48 <ull_conn_llcp+0xb08>
	else if (!lll->enc_rx) {
    d74a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    d74e:	071a      	lsls	r2, r3, #28
    d750:	f100 83fb 	bmi.w	df4a <ull_conn_llcp+0xd0a>
		if (conn->llcp.encryption.error_code) {
    d754:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
    d758:	f1b8 0f00 	cmp.w	r8, #0
    d75c:	f040 8492 	bne.w	e084 <ull_conn_llcp+0xe44>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    d760:	f104 077b 	add.w	r7, r4, #123	; 0x7b
    d764:	463b      	mov	r3, r7
    d766:	4642      	mov	r2, r8
    d768:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
    d76c:	f204 1071 	addw	r0, r4, #369	; 0x171
    d770:	f004 ff50 	bl	12614 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    d774:	4639      	mov	r1, r7
    d776:	2210      	movs	r2, #16
    d778:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    d77c:	f00a f9be 	bl	17afc <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    d780:	2208      	movs	r2, #8
    d782:	f104 0194 	add.w	r1, r4, #148	; 0x94
    d786:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
    d78a:	f00a f9b7 	bl	17afc <memcpy>
			lll->ccm_rx.direction = 1U;
    d78e:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
    d792:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
    d796:	f043 0301 	orr.w	r3, r3, #1
    d79a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
    d79e:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
    d7a2:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
    d7a6:	f368 0300 	bfi	r3, r8, #0, #1
    d7aa:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
    d7ae:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
    d7b2:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
    d7b6:	f043 0308 	orr.w	r3, r3, #8
    d7ba:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d7be:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
    d7c2:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d7c6:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
    d7ca:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
    d7ce:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
    d7d2:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
    d7d6:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
    d7da:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d7de:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d7e2:	2301      	movs	r3, #1
    d7e4:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d7e8:	2305      	movs	r3, #5
    d7ea:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
    d7ee:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    d7f2:	2b00      	cmp	r3, #0
    d7f4:	f000 8357 	beq.w	dea6 <ull_conn_llcp+0xc66>
	    !conn->llcp_enc.pause_tx &&
    d7f8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    d7fc:	0797      	lsls	r7, r2, #30
    d7fe:	f100 8352 	bmi.w	dea6 <ull_conn_llcp+0xc66>
	    !conn->llcp_phy.pause_tx &&
    d802:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    d806:	07d0      	lsls	r0, r2, #31
    d808:	f100 834d 	bmi.w	dea6 <ull_conn_llcp+0xc66>
		if (conn->tx_head == conn->tx_data) {
    d80c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    d810:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    d814:	428b      	cmp	r3, r1
    d816:	f000 85db 	beq.w	e3d0 <ull_conn_llcp+0x1190>
		} else if (!conn->tx_ctrl) {
    d81a:	2a00      	cmp	r2, #0
    d81c:	f000 86d3 	beq.w	e5c6 <ull_conn_llcp+0x1386>
	tx->next = conn->tx_ctrl_last->next;
    d820:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d824:	681a      	ldr	r2, [r3, #0]
    d826:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    d82a:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
    d82e:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d832:	f8d9 3000 	ldr.w	r3, [r9]
    d836:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    d83a:	2b00      	cmp	r3, #0
    d83c:	f000 82f3 	beq.w	de26 <ull_conn_llcp+0xbe6>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
    d840:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    d844:	f043 0303 	orr.w	r3, r3, #3
    d848:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    d84c:	e50b      	b.n	d266 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d84e:	485b      	ldr	r0, [pc, #364]	; (d9bc <ull_conn_llcp+0x77c>)
    d850:	f7f8 fa60 	bl	5d14 <mem_acquire>
		if (tx) {
    d854:	4605      	mov	r5, r0
    d856:	2800      	cmp	r0, #0
    d858:	f43f ad08 	beq.w	d26c <ull_conn_llcp+0x2c>
						      conn->lll.latency + 6;
    d85c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    d85e:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d862:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    d864:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
    d866:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
    d86a:	4432      	add	r2, r6
			conn->llcp.chan_map.initiate = 0U;
    d86c:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
    d870:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d874:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d878:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
    d87a:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d87c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    d87e:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    d880:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    d882:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    d886:	2205      	movs	r2, #5
    d888:	3008      	adds	r0, #8
    d88a:	f00a f937 	bl	17afc <memcpy>
	    conn->tx_head &&
    d88e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    d892:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    d896:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
    d89a:	2b00      	cmp	r3, #0
    d89c:	f000 81db 	beq.w	dc56 <ull_conn_llcp+0xa16>
	    !conn->llcp_enc.pause_tx &&
    d8a0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    d8a4:	0792      	lsls	r2, r2, #30
    d8a6:	f100 81d6 	bmi.w	dc56 <ull_conn_llcp+0xa16>
	    !conn->llcp_phy.pause_tx &&
    d8aa:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    d8ae:	07d7      	lsls	r7, r2, #31
    d8b0:	f100 81d1 	bmi.w	dc56 <ull_conn_llcp+0xa16>
		if (conn->tx_head == conn->tx_data) {
    d8b4:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    d8b8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    d8bc:	428b      	cmp	r3, r1
    d8be:	f000 8495 	beq.w	e1ec <ull_conn_llcp+0xfac>
		} else if (!conn->tx_ctrl) {
    d8c2:	2a00      	cmp	r2, #0
    d8c4:	f000 85a1 	beq.w	e40a <ull_conn_llcp+0x11ca>
	tx->next = conn->tx_ctrl_last->next;
    d8c8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d8cc:	681a      	ldr	r2, [r3, #0]
    d8ce:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    d8d0:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    d8d2:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    d8d4:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d8d8:	2b00      	cmp	r3, #0
    d8da:	f47f acc7 	bne.w	d26c <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
    d8de:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
    d8e2:	e4c3      	b.n	d26c <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    d8e4:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
    d8e8:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
    d8ec:	4571      	cmp	r1, lr
    d8ee:	d067      	beq.n	d9c0 <ull_conn_llcp+0x780>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    d8f0:	eba1 010e 	sub.w	r1, r1, lr
    d8f4:	07c8      	lsls	r0, r1, #31
    d8f6:	f57f acb6 	bpl.w	d266 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
    d8fa:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    d8fe:	f013 0701 	ands.w	r7, r3, #1
    d902:	f000 81b3 	beq.w	dc6c <ull_conn_llcp+0xa2c>
		rx = ll_pdu_rx_alloc();
    d906:	f7fb fdbd 	bl	9484 <ll_pdu_rx_alloc>
		if (!rx) {
    d90a:	4607      	mov	r7, r0
    d90c:	2800      	cmp	r0, #0
    d90e:	f000 8185 	beq.w	dc1c <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    d912:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    d916:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    d91a:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    d91c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    d91e:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    d920:	f043 0303 	orr.w	r3, r3, #3
    d924:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    d926:	2309      	movs	r3, #9
    d928:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    d92a:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d92c:	2303      	movs	r3, #3
    d92e:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    d930:	4641      	mov	r1, r8
    d932:	2208      	movs	r2, #8
    d934:	3020      	adds	r0, #32
    d936:	f00a f8ec 	bl	17b12 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
    d93a:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
    d93e:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    d940:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
    d944:	f3c2 2207 	ubfx	r2, r2, #8, #8
    d948:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
    d94c:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    d94e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d952:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
    d956:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d95a:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    d95c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
    d960:	0a12      	lsrs	r2, r2, #8
    d962:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
    d966:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    d96a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
    d96e:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
    d970:	6808      	ldr	r0, [r1, #0]
    d972:	f7fb fd59 	bl	9428 <ll_rx_put>
	ll_rx_sched();
    d976:	f7fb fd61 	bl	943c <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    d97a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    d97e:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
    d982:	e468      	b.n	d256 <ull_conn_llcp+0x16>
				conn->procedure_expire++;
    d984:	3301      	adds	r3, #1
    d986:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    d98a:	e478      	b.n	d27e <ull_conn_llcp+0x3e>
			tx->next = conn->tx_head;
    d98c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    d98e:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    d992:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d996:	2b00      	cmp	r3, #0
    d998:	f47f ad0e 	bne.w	d3b8 <ull_conn_llcp+0x178>
    d99c:	e676      	b.n	d68c <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
    d99e:	2a00      	cmp	r2, #0
    d9a0:	f47f ad5d 	bne.w	d45e <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head;
    d9a4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    d9a6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    d9aa:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    d9ae:	e55e      	b.n	d46e <ull_conn_llcp+0x22e>
    d9b0:	0001bc28 	.word	0x0001bc28
    d9b4:	0001b828 	.word	0x0001b828
    d9b8:	0001b7c8 	.word	0x0001b7c8
    d9bc:	20001d50 	.word	0x20001d50
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    d9c0:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
    d9c4:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
    d9c8:	4571      	cmp	r1, lr
    d9ca:	d02f      	beq.n	da2c <ull_conn_llcp+0x7ec>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    d9cc:	eba1 010e 	sub.w	r1, r1, lr
    d9d0:	07cf      	lsls	r7, r1, #31
    d9d2:	f57f ac48 	bpl.w	d266 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
    d9d6:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    d9da:	07d8      	lsls	r0, r3, #31
    d9dc:	f140 82f9 	bpl.w	dfd2 <ull_conn_llcp+0xd92>
	} else if (conn->llcp_version.rx) {
    d9e0:	079b      	lsls	r3, r3, #30
    d9e2:	f140 82e3 	bpl.w	dfac <ull_conn_llcp+0xd6c>
		rx = ll_pdu_rx_alloc();
    d9e6:	f7fb fd4d 	bl	9484 <ll_pdu_rx_alloc>
		if (!rx) {
    d9ea:	4601      	mov	r1, r0
    d9ec:	2800      	cmp	r0, #0
    d9ee:	f000 8115 	beq.w	dc1c <ull_conn_llcp+0x9dc>
		conn->llcp_version.ack = conn->llcp_version.req;
    d9f2:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
    d9f6:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
    d9fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    d9fc:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    d9fe:	2303      	movs	r3, #3
    da00:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    da02:	7f03      	ldrb	r3, [r0, #28]
    da04:	f043 0303 	orr.w	r3, r3, #3
    da08:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    da0a:	2306      	movs	r3, #6
    da0c:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    da0e:	230c      	movs	r3, #12
    da10:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    da12:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
    da16:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    da1a:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
    da1e:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    da22:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
    da26:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
    da2a:	e7a1      	b.n	d970 <ull_conn_llcp+0x730>
		} else if (conn->llcp_conn_param.ack !=
    da2c:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
    da30:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    da34:	458e      	cmp	lr, r1
    da36:	f000 81f9 	beq.w	de2c <ull_conn_llcp+0xbec>
	return conn_upd_curr && (conn_upd_curr != conn);
    da3a:	f8df 8304 	ldr.w	r8, [pc, #772]	; dd40 <ull_conn_llcp+0xb00>
    da3e:	f8d8 1000 	ldr.w	r1, [r8]
    da42:	2900      	cmp	r1, #0
    da44:	f000 8365 	beq.w	e112 <ull_conn_llcp+0xed2>
    da48:	428c      	cmp	r4, r1
    da4a:	f47f ac0c 	bne.w	d266 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
    da4e:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
    da52:	f001 010f 	and.w	r1, r1, #15
    da56:	2906      	cmp	r1, #6
    da58:	f200 8671 	bhi.w	e73e <ull_conn_llcp+0x14fe>
    da5c:	f20f 0e04 	addw	lr, pc, #4
    da60:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
    da64:	0000db57 	.word	0x0000db57
    da68:	0000dad1 	.word	0x0000dad1
    da6c:	0000da81 	.word	0x0000da81
    da70:	0000d257 	.word	0x0000d257
    da74:	0000d257 	.word	0x0000d257
    da78:	0000d257 	.word	0x0000d257
    da7c:	0000d257 	.word	0x0000d257
	if (conn->llcp_enc.pause_tx) {
    da80:	07bb      	lsls	r3, r7, #30
    da82:	f53f abf0 	bmi.w	d266 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
    da86:	f7fb fcfd 	bl	9484 <ll_pdu_rx_alloc>
	if (!rx) {
    da8a:	4601      	mov	r1, r0
    da8c:	2800      	cmp	r0, #0
    da8e:	f000 80c5 	beq.w	dc1c <ull_conn_llcp+0x9dc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    da92:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    da96:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    da98:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    da9a:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    da9e:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    daa2:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    daa4:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
    daa8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    daaa:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    daac:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    daae:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    dab0:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    dab4:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    dab6:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    daba:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    dabc:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
    dac0:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    dac2:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
    dac6:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    dac8:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
    daca:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    dacc:	77cb      	strb	r3, [r1, #31]
    dace:	e74f      	b.n	d970 <ull_conn_llcp+0x730>
	if (conn->llcp_conn_param.status) {
    dad0:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
    dad4:	2b00      	cmp	r3, #0
    dad6:	f040 83b8 	bne.w	e24a <ull_conn_llcp+0x100a>
	if (!conn->lll.role) {
    dada:	2a00      	cmp	r2, #0
    dadc:	f2c0 84e2 	blt.w	e4a4 <ull_conn_llcp+0x1264>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    dae0:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
    dae4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    dae8:	2106      	movs	r1, #6
    daea:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
    daee:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    daf2:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
    daf6:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
    daf8:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
    dafc:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
    db00:	2900      	cmp	r1, #0
    db02:	f000 8571 	beq.w	e5e8 <ull_conn_llcp+0x13a8>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    db06:	fbb2 f3f1 	udiv	r3, r2, r1
    db0a:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
    db0e:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    db12:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
    db14:	4299      	cmp	r1, r3
    db16:	bf98      	it	ls
    db18:	461a      	movls	r2, r3
    db1a:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    db1e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    db22:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    db26:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
    db2a:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    db2e:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    db32:	00db      	lsls	r3, r3, #3
    db34:	f022 020f 	bic.w	r2, r2, #15
    db38:	f043 0302 	orr.w	r3, r3, #2
    db3c:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
    db3e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    db42:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
    db46:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    db4a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
    db4e:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    db52:	f7ff bb8b 	b.w	d26c <ull_conn_llcp+0x2c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    db56:	487b      	ldr	r0, [pc, #492]	; (dd44 <ull_conn_llcp+0xb04>)
			event_counter = lll->event_counter +
    db58:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
    db5a:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    db5e:	f7f8 f8d9 	bl	5d14 <mem_acquire>
	if (!tx) {
    db62:	4602      	mov	r2, r0
    db64:	2800      	cmp	r0, #0
    db66:	d059      	beq.n	dc1c <ull_conn_llcp+0x9dc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db68:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    db6a:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    db6e:	f043 0303 	orr.w	r3, r3, #3
    db72:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    db74:	2318      	movs	r3, #24
    db76:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    db78:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    db7c:	8110      	strh	r0, [r2, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    db7e:	f8b4 018a 	ldrh.w	r0, [r4, #394]	; 0x18a
    db82:	8150      	strh	r0, [r2, #10]
	p->preferred_periodicity = 0U;
    db84:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    db86:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    db8a:	8190      	strh	r0, [r2, #12]
			event_counter = lll->event_counter +
    db8c:	eb07 0109 	add.w	r1, r7, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    db90:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
    db94:	7413      	strb	r3, [r2, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    db96:	74d3      	strb	r3, [r2, #19]
    db98:	7513      	strb	r3, [r2, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    db9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    db9e:	81d0      	strh	r0, [r2, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
    dba0:	7553      	strb	r3, [r2, #21]
    dba2:	7593      	strb	r3, [r2, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    dba4:	75d3      	strb	r3, [r2, #23]
    dba6:	7613      	strb	r3, [r2, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    dba8:	7653      	strb	r3, [r2, #25]
    dbaa:	7693      	strb	r3, [r2, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    dbac:	76d3      	strb	r3, [r2, #27]
    dbae:	7713      	strb	r3, [r2, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    dbb0:	7753      	strb	r3, [r2, #29]
    dbb2:	7793      	strb	r3, [r2, #30]
			event_counter = lll->event_counter +
    dbb4:	4431      	add	r1, r6
	conn->procedure_expire = conn->procedure_reload;
    dbb6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    dbba:	200f      	movs	r0, #15
    dbbc:	71d0      	strb	r0, [r2, #7]
	conn->procedure_expire = conn->procedure_reload;
    dbbe:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    dbc2:	f8a2 1011 	strh.w	r1, [r2, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    dbc6:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    dbca:	2104      	movs	r1, #4
    dbcc:	f361 0303 	bfi	r3, r1, #0, #4
    dbd0:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
    dbd4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    dbd8:	2b00      	cmp	r3, #0
    dbda:	f000 832b 	beq.w	e234 <ull_conn_llcp+0xff4>
	    !conn->llcp_enc.pause_tx &&
    dbde:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    dbe2:	078f      	lsls	r7, r1, #30
    dbe4:	f100 8326 	bmi.w	e234 <ull_conn_llcp+0xff4>
	    !conn->llcp_phy.pause_tx &&
    dbe8:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    dbec:	07c8      	lsls	r0, r1, #31
    dbee:	f100 8321 	bmi.w	e234 <ull_conn_llcp+0xff4>
		if (conn->tx_head == conn->tx_data) {
    dbf2:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    dbf6:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
    dbf8:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    dbfc:	f000 8501 	beq.w	e602 <ull_conn_llcp+0x13c2>
		} else if (!conn->tx_ctrl) {
    dc00:	2900      	cmp	r1, #0
    dc02:	f000 857b 	beq.w	e6fc <ull_conn_llcp+0x14bc>
	tx->next = conn->tx_ctrl_last->next;
    dc06:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    dc0a:	6819      	ldr	r1, [r3, #0]
    dc0c:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    dc0e:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    dc10:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
    dc14:	6813      	ldr	r3, [r2, #0]
    dc16:	2b00      	cmp	r3, #0
    dc18:	f000 8376 	beq.w	e308 <ull_conn_llcp+0x10c8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    dc1c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    dc20:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
    dc24:	f7ff bb17 	b.w	d256 <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    dc28:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
    dc2c:	2b00      	cmp	r3, #0
    dc2e:	f43f acc5 	beq.w	d5bc <ull_conn_llcp+0x37c>
			conn->periph.llcp_type = LLCP_NONE;
    dc32:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
    dc36:	e4c5      	b.n	d5c4 <ull_conn_llcp+0x384>
		conn->tx_data_last = tx;
    dc38:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    dc3c:	e41a      	b.n	d474 <ull_conn_llcp+0x234>
		if (!conn->tx_ctrl) {
    dc3e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    dc42:	2a00      	cmp	r2, #0
    dc44:	f47f ad61 	bne.w	d70a <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head;
    dc48:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    dc4c:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    dc50:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
    dc54:	e564      	b.n	d720 <ull_conn_llcp+0x4e0>
		if (!conn->tx_ctrl) {
    dc56:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    dc5a:	2a00      	cmp	r2, #0
    dc5c:	f47f ae34 	bne.w	d8c8 <ull_conn_llcp+0x688>
			tx->next = conn->tx_head;
    dc60:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    dc62:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    dc66:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    dc6a:	e635      	b.n	d8d8 <ull_conn_llcp+0x698>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    dc6c:	4835      	ldr	r0, [pc, #212]	; (dd44 <ull_conn_llcp+0xb04>)
    dc6e:	f7f8 f851 	bl	5d14 <mem_acquire>
	if (tx) {
    dc72:	4680      	mov	r8, r0
    dc74:	2800      	cmp	r0, #0
    dc76:	d0d1      	beq.n	dc1c <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack--;
    dc78:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
    dc7c:	3b01      	subs	r3, #1
    dc7e:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    dc82:	2309      	movs	r3, #9
    dc84:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    dc86:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    dc8a:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    dc8c:	7903      	ldrb	r3, [r0, #4]
    dc8e:	f043 0303 	orr.w	r3, r3, #3
    dc92:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    dc94:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    dc98:	bfac      	ite	ge
    dc9a:	2308      	movge	r3, #8
    dc9c:	230e      	movlt	r3, #14
    dc9e:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    dca0:	4639      	mov	r1, r7
    dca2:	4410      	add	r0, r2
    dca4:	f009 ff35 	bl	17b12 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    dca8:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
    dcac:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    dcae:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
    dcb2:	f3c2 2207 	ubfx	r2, r2, #8, #8
    dcb6:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
    dcba:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    dcbc:	f888 300c 	strb.w	r3, [r8, #12]
    dcc0:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
    dcc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
    dcc8:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
    dccc:	0a09      	lsrs	r1, r1, #8
    dcce:	0a12      	lsrs	r2, r2, #8
    dcd0:	f888 100b 	strb.w	r1, [r8, #11]
    dcd4:	f888 300d 	strb.w	r3, [r8, #13]
    dcd8:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
    dcdc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    dce0:	2b00      	cmp	r3, #0
    dce2:	f000 80d4 	beq.w	de8e <ull_conn_llcp+0xc4e>
	    !conn->llcp_enc.pause_tx &&
    dce6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    dcea:	0791      	lsls	r1, r2, #30
    dcec:	f100 80cf 	bmi.w	de8e <ull_conn_llcp+0xc4e>
	    !conn->llcp_phy.pause_tx &&
    dcf0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    dcf4:	07d2      	lsls	r2, r2, #31
    dcf6:	f100 80ca 	bmi.w	de8e <ull_conn_llcp+0xc4e>
		if (conn->tx_head == conn->tx_data) {
    dcfa:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    dcfe:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    dd02:	428b      	cmp	r3, r1
    dd04:	f000 82f0 	beq.w	e2e8 <ull_conn_llcp+0x10a8>
		} else if (!conn->tx_ctrl) {
    dd08:	2a00      	cmp	r2, #0
    dd0a:	f000 83b4 	beq.w	e476 <ull_conn_llcp+0x1236>
	tx->next = conn->tx_ctrl_last->next;
    dd0e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    dd12:	681a      	ldr	r2, [r3, #0]
    dd14:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    dd18:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    dd1c:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    dd20:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
    dd24:	2b00      	cmp	r3, #0
    dd26:	f000 8226 	beq.w	e176 <ull_conn_llcp+0xf36>
		conn->procedure_expire = conn->procedure_reload;
    dd2a:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    dd2e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    dd32:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
    dd36:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
    dd3a:	f7ff ba8c 	b.w	d256 <ull_conn_llcp+0x16>
    dd3e:	bf00      	nop
    dd40:	20001cbc 	.word	0x20001cbc
    dd44:	20001d50 	.word	0x20001d50
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    dd48:	f104 077b 	add.w	r7, r4, #123	; 0x7b
    dd4c:	463b      	mov	r3, r7
    dd4e:	4642      	mov	r2, r8
    dd50:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
    dd54:	f204 1071 	addw	r0, r4, #369	; 0x171
    dd58:	f004 fc5c 	bl	12614 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    dd5c:	4639      	mov	r1, r7
    dd5e:	2210      	movs	r2, #16
    dd60:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    dd64:	f009 feca 	bl	17afc <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    dd68:	2208      	movs	r2, #8
    dd6a:	f104 0194 	add.w	r1, r4, #148	; 0x94
    dd6e:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
    dd72:	f009 fec3 	bl	17afc <memcpy>
		lll->enc_rx = 1;
    dd76:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
    dd7a:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
    dd7e:	f023 0318 	bic.w	r3, r3, #24
    dd82:	f043 0318 	orr.w	r3, r3, #24
    dd86:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
    dd8a:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
    dd8e:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
    dd92:	f368 0300 	bfi	r3, r8, #0, #1
    dd96:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
    dd9a:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
    dd9e:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
    dda2:	f043 0301 	orr.w	r3, r3, #1
    dda6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    ddaa:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
    ddac:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
    ddb0:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
    ddb4:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
    ddb8:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
    ddbc:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
    ddc0:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ddc4:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    ddc8:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    ddcc:	2306      	movs	r3, #6
    ddce:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
    ddd2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ddd6:	f042 0203 	orr.w	r2, r2, #3
    ddda:	f889 2004 	strb.w	r2, [r9, #4]
	if (
    ddde:	2b00      	cmp	r3, #0
    dde0:	d04a      	beq.n	de78 <ull_conn_llcp+0xc38>
	    !conn->llcp_enc.pause_tx &&
    dde2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    dde6:	0790      	lsls	r0, r2, #30
    dde8:	d446      	bmi.n	de78 <ull_conn_llcp+0xc38>
	    !conn->llcp_phy.pause_tx &&
    ddea:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    ddee:	07d1      	lsls	r1, r2, #31
    ddf0:	d442      	bmi.n	de78 <ull_conn_llcp+0xc38>
		if (conn->tx_head == conn->tx_data) {
    ddf2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    ddf6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    ddf8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    ddfc:	f000 8264 	beq.w	e2c8 <ull_conn_llcp+0x1088>
		} else if (!conn->tx_ctrl) {
    de00:	2a00      	cmp	r2, #0
    de02:	f000 83b9 	beq.w	e578 <ull_conn_llcp+0x1338>
	tx->next = conn->tx_ctrl_last->next;
    de06:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    de0a:	681a      	ldr	r2, [r3, #0]
    de0c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    de10:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
    de14:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
    de18:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    de1c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    de20:	2b00      	cmp	r3, #0
    de22:	f47f ad0d 	bne.w	d840 <ull_conn_llcp+0x600>
		conn->tx_data_last = tx;
    de26:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
    de2a:	e509      	b.n	d840 <ull_conn_llcp+0x600>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    de2c:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
    de30:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    de34:	4299      	cmp	r1, r3
    de36:	d042      	beq.n	debe <ull_conn_llcp+0xc7e>
			event_len_prep(conn);
    de38:	4620      	mov	r0, r4
    de3a:	f7fd f803 	bl	ae44 <event_len_prep>
    de3e:	e6ed      	b.n	dc1c <ull_conn_llcp+0x9dc>
		if (!conn->tx_ctrl) {
    de40:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    de44:	2a00      	cmp	r2, #0
    de46:	f47f ab68 	bne.w	d51a <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head;
    de4a:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    de4c:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    de50:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
    de54:	f7ff bb69 	b.w	d52a <ull_conn_llcp+0x2ea>
			conn->tx_data = conn->tx_data->next;
    de58:	681a      	ldr	r2, [r3, #0]
    de5a:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    de5e:	2900      	cmp	r1, #0
    de60:	f47f aa9f 	bne.w	d3a2 <ull_conn_llcp+0x162>
			tx->next = conn->tx_head->next;
    de64:	681a      	ldr	r2, [r3, #0]
    de66:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    de68:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    de6a:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    de6c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
    de70:	2b00      	cmp	r3, #0
    de72:	f47f aaa1 	bne.w	d3b8 <ull_conn_llcp+0x178>
    de76:	e409      	b.n	d68c <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
    de78:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    de7c:	2a00      	cmp	r2, #0
    de7e:	d1c2      	bne.n	de06 <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head;
    de80:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    de84:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    de88:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    de8c:	e7c6      	b.n	de1c <ull_conn_llcp+0xbdc>
		if (!conn->tx_ctrl) {
    de8e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    de92:	2a00      	cmp	r2, #0
    de94:	f47f af3b 	bne.w	dd0e <ull_conn_llcp+0xace>
			tx->next = conn->tx_head;
    de98:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    de9c:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    dea0:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
    dea4:	e73e      	b.n	dd24 <ull_conn_llcp+0xae4>
		if (!conn->tx_ctrl) {
    dea6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    deaa:	2a00      	cmp	r2, #0
    deac:	f47f acb8 	bne.w	d820 <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head;
    deb0:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    deb4:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    deb8:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    debc:	e4b9      	b.n	d832 <ull_conn_llcp+0x5f2>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    debe:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
    dec2:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    dec6:	428b      	cmp	r3, r1
    dec8:	f43f a9cd 	beq.w	d266 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
    decc:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    ded0:	f003 0703 	and.w	r7, r3, #3
    ded4:	2f03      	cmp	r7, #3
    ded6:	f000 8229 	beq.w	e32c <ull_conn_llcp+0x10ec>
    deda:	2f00      	cmp	r7, #0
    dedc:	f47f a9c2 	bne.w	d264 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    dee0:	48c9      	ldr	r0, [pc, #804]	; (e208 <ull_conn_llcp+0xfc8>)
    dee2:	f7f7 ff17 	bl	5d14 <mem_acquire>
		if (!tx) {
    dee6:	4601      	mov	r1, r0
    dee8:	2800      	cmp	r0, #0
    deea:	f43f ae97 	beq.w	dc1c <ull_conn_llcp+0x9dc>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    deee:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
    def2:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    def6:	2201      	movs	r2, #1
    def8:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    defc:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    df00:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
    df04:	f3c3 0782 	ubfx	r7, r3, #2, #3
    df08:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    df0c:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
    df10:	f3c0 0040 	ubfx	r0, r0, #1, #1
    df14:	f360 07c3 	bfi	r7, r0, #3, #1
    df18:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
    df1c:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df20:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    df22:	f367 02c5 	bfi	r2, r7, #3, #3
    df26:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
    df2a:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
    df2e:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df30:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
    df34:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    df36:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df38:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    df3a:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    df3c:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    df3e:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    df40:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
    df42:	4620      	mov	r0, r4
    df44:	f7fc fc88 	bl	a858 <ctrl_tx_pause_enqueue>
    df48:	e6ef      	b.n	dd2a <ull_conn_llcp+0xaea>
	conn->lll.enc_tx = 1;
    df4a:	f043 0310 	orr.w	r3, r3, #16
    df4e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    df52:	2301      	movs	r3, #1
    df54:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    df56:	7903      	ldrb	r3, [r0, #4]
    df58:	f043 0303 	orr.w	r3, r3, #3
    df5c:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
    df5e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    df62:	2206      	movs	r2, #6
    df64:	71c2      	strb	r2, [r0, #7]
	if (
    df66:	2b00      	cmp	r3, #0
    df68:	d07d      	beq.n	e066 <ull_conn_llcp+0xe26>
	    !conn->llcp_enc.pause_tx &&
    df6a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    df6e:	0791      	lsls	r1, r2, #30
    df70:	d479      	bmi.n	e066 <ull_conn_llcp+0xe26>
	    !conn->llcp_phy.pause_tx &&
    df72:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    df76:	07d2      	lsls	r2, r2, #31
    df78:	d475      	bmi.n	e066 <ull_conn_llcp+0xe26>
		if (conn->tx_head == conn->tx_data) {
    df7a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    df7e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    df80:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    df84:	f000 8233 	beq.w	e3ee <ull_conn_llcp+0x11ae>
		} else if (!conn->tx_ctrl) {
    df88:	2a00      	cmp	r2, #0
    df8a:	f000 8325 	beq.w	e5d8 <ull_conn_llcp+0x1398>
	tx->next = conn->tx_ctrl_last->next;
    df8e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    df92:	681a      	ldr	r2, [r3, #0]
    df94:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    df98:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
    df9c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    dfa0:	f8d9 3000 	ldr.w	r3, [r9]
    dfa4:	2b00      	cmp	r3, #0
    dfa6:	f47f ac4b 	bne.w	d840 <ull_conn_llcp+0x600>
    dfaa:	e73c      	b.n	de26 <ull_conn_llcp+0xbe6>
		LL_ASSERT(0);
    dfac:	4a97      	ldr	r2, [pc, #604]	; (e20c <ull_conn_llcp+0xfcc>)
    dfae:	4998      	ldr	r1, [pc, #608]	; (e210 <ull_conn_llcp+0xfd0>)
    dfb0:	f640 6392 	movw	r3, #3730	; 0xe92
		LL_ASSERT(0);
    dfb4:	4897      	ldr	r0, [pc, #604]	; (e214 <ull_conn_llcp+0xfd4>)
    dfb6:	f008 ffda 	bl	16f6e <printk>
    dfba:	4040      	eors	r0, r0
    dfbc:	f380 8811 	msr	BASEPRI, r0
    dfc0:	f04f 0003 	mov.w	r0, #3
    dfc4:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    dfc6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    dfca:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
    dfce:	f7ff b942 	b.w	d256 <ull_conn_llcp+0x16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    dfd2:	488d      	ldr	r0, [pc, #564]	; (e208 <ull_conn_llcp+0xfc8>)
    dfd4:	f7f7 fe9e 	bl	5d14 <mem_acquire>
		if (tx) {
    dfd8:	2800      	cmp	r0, #0
    dfda:	f43f ae1f 	beq.w	dc1c <ull_conn_llcp+0x9dc>
			conn->llcp_version.ack--;
    dfde:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
    dfe2:	3b01      	subs	r3, #1
    dfe4:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
    dfe8:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    dfec:	f043 0301 	orr.w	r3, r3, #1
    dff0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    dff4:	7903      	ldrb	r3, [r0, #4]
    dff6:	f043 0303 	orr.w	r3, r3, #3
    dffa:	7103      	strb	r3, [r0, #4]
			pdu->len =
    dffc:	2306      	movs	r3, #6
    dffe:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    e000:	230c      	movs	r3, #12
    e002:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    e004:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    e006:	f06f 030e 	mvn.w	r3, #14
    e00a:	7243      	strb	r3, [r0, #9]
    e00c:	2305      	movs	r3, #5
    e00e:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    e010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e014:	72c3      	strb	r3, [r0, #11]
    e016:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    e018:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    e01c:	2b00      	cmp	r3, #0
    e01e:	f000 80b4 	beq.w	e18a <ull_conn_llcp+0xf4a>
	    !conn->llcp_enc.pause_tx &&
    e022:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    e026:	0791      	lsls	r1, r2, #30
    e028:	f100 80af 	bmi.w	e18a <ull_conn_llcp+0xf4a>
	    !conn->llcp_phy.pause_tx &&
    e02c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    e030:	07d2      	lsls	r2, r2, #31
    e032:	f100 80aa 	bmi.w	e18a <ull_conn_llcp+0xf4a>
		if (conn->tx_head == conn->tx_data) {
    e036:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    e03a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    e03c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    e040:	f000 82b5 	beq.w	e5ae <ull_conn_llcp+0x136e>
		} else if (!conn->tx_ctrl) {
    e044:	2a00      	cmp	r2, #0
    e046:	f000 82d3 	beq.w	e5f0 <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
    e04a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    e04e:	681a      	ldr	r2, [r3, #0]
    e050:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    e052:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    e054:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e058:	6803      	ldr	r3, [r0, #0]
    e05a:	2b00      	cmp	r3, #0
    e05c:	f47f ae65 	bne.w	dd2a <ull_conn_llcp+0xaea>
		conn->tx_data_last = tx;
    e060:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
    e064:	e661      	b.n	dd2a <ull_conn_llcp+0xaea>
		if (!conn->tx_ctrl) {
    e066:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    e06a:	2a00      	cmp	r2, #0
    e06c:	d18f      	bne.n	df8e <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head;
    e06e:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    e072:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    e076:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    e07a:	e791      	b.n	dfa0 <ull_conn_llcp+0xd60>
		conn->tx_data_last = tx;
    e07c:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
    e080:	f7ff ba56 	b.w	d530 <ull_conn_llcp+0x2f0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e084:	7903      	ldrb	r3, [r0, #4]
    e086:	f043 0303 	orr.w	r3, r3, #3
    e08a:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    e08c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    e090:	07db      	lsls	r3, r3, #31
    e092:	d573      	bpl.n	e17c <ull_conn_llcp+0xf3c>
	    (conn->llcp_feature.features_conn &
    e094:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
    e098:	0758      	lsls	r0, r3, #29
    e09a:	d56f      	bpl.n	e17c <ull_conn_llcp+0xf3c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    e09c:	2311      	movs	r3, #17
    e09e:	f889 3007 	strb.w	r3, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    e0a2:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    e0a4:	f889 8009 	strb.w	r8, [r9, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    e0a8:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    e0ac:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
    e0b0:	2300      	movs	r3, #0
    e0b2:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
    e0b6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    e0ba:	2b00      	cmp	r3, #0
    e0bc:	d042      	beq.n	e144 <ull_conn_llcp+0xf04>
	    !conn->llcp_enc.pause_tx &&
    e0be:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    e0c2:	0791      	lsls	r1, r2, #30
    e0c4:	d43e      	bmi.n	e144 <ull_conn_llcp+0xf04>
	    !conn->llcp_phy.pause_tx &&
    e0c6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    e0ca:	07d2      	lsls	r2, r2, #31
    e0cc:	d43a      	bmi.n	e144 <ull_conn_llcp+0xf04>
		if (conn->tx_head == conn->tx_data) {
    e0ce:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    e0d2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    e0d4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    e0d8:	f000 81d6 	beq.w	e488 <ull_conn_llcp+0x1248>
		} else if (!conn->tx_ctrl) {
    e0dc:	2a00      	cmp	r2, #0
    e0de:	f000 82c3 	beq.w	e668 <ull_conn_llcp+0x1428>
	tx->next = conn->tx_ctrl_last->next;
    e0e2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    e0e6:	681a      	ldr	r2, [r3, #0]
    e0e8:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    e0ec:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
    e0f0:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e0f4:	f8d9 3000 	ldr.w	r3, [r9]
    e0f8:	2b00      	cmp	r3, #0
    e0fa:	d059      	beq.n	e1b0 <ull_conn_llcp+0xf70>
			conn->llcp_ack = conn->llcp_req;
    e0fc:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
    e100:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    e104:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    e108:	2900      	cmp	r1, #0
    e10a:	f43f a8af 	beq.w	d26c <ull_conn_llcp+0x2c>
    e10e:	f7ff b900 	b.w	d312 <ull_conn_llcp+0xd2>
	switch (conn->llcp_conn_param.state) {
    e112:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    e116:	f003 030f 	and.w	r3, r3, #15
    e11a:	2b06      	cmp	r3, #6
    e11c:	f200 830f 	bhi.w	e73e <ull_conn_llcp+0x14fe>
    e120:	a101      	add	r1, pc, #4	; (adr r1, e128 <ull_conn_llcp+0xee8>)
    e122:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    e126:	bf00      	nop
    e128:	0000db57 	.word	0x0000db57
    e12c:	0000dad1 	.word	0x0000dad1
    e130:	0000da81 	.word	0x0000da81
    e134:	0000d267 	.word	0x0000d267
    e138:	0000d267 	.word	0x0000d267
    e13c:	0000d267 	.word	0x0000d267
    e140:	0000d267 	.word	0x0000d267
		if (!conn->tx_ctrl) {
    e144:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    e148:	2a00      	cmp	r2, #0
    e14a:	d1ca      	bne.n	e0e2 <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head;
    e14c:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    e150:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    e154:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    e158:	e7cc      	b.n	e0f4 <ull_conn_llcp+0xeb4>
			conn->tx_data = conn->tx_data->next;
    e15a:	6819      	ldr	r1, [r3, #0]
    e15c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e160:	2a00      	cmp	r2, #0
    e162:	f47f a97c 	bne.w	d45e <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head->next;
    e166:	681a      	ldr	r2, [r3, #0]
    e168:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    e16a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    e16c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    e16e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    e172:	f7ff b97c 	b.w	d46e <ull_conn_llcp+0x22e>
		conn->tx_data_last = tx;
    e176:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
    e17a:	e5d6      	b.n	dd2a <ull_conn_llcp+0xaea>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    e17c:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    e17e:	f889 8008 	strb.w	r8, [r9, #8]
    e182:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    e184:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    e188:	e790      	b.n	e0ac <ull_conn_llcp+0xe6c>
		if (!conn->tx_ctrl) {
    e18a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    e18e:	2a00      	cmp	r2, #0
    e190:	f47f af5b 	bne.w	e04a <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head;
    e194:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    e196:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    e19a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    e19e:	e75b      	b.n	e058 <ull_conn_llcp+0xe18>
	    ((pdu_data_tx->llctrl.opcode !=
    e1a0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e1a2:	2a03      	cmp	r2, #3
    e1a4:	f43f ae5e 	beq.w	de64 <ull_conn_llcp+0xc24>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e1a8:	2a0a      	cmp	r2, #10
    e1aa:	f47f a8f4 	bne.w	d396 <ull_conn_llcp+0x156>
    e1ae:	e659      	b.n	de64 <ull_conn_llcp+0xc24>
		conn->tx_data_last = tx;
    e1b0:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
    e1b4:	e7a2      	b.n	e0fc <ull_conn_llcp+0xebc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e1b6:	791a      	ldrb	r2, [r3, #4]
    e1b8:	f002 0203 	and.w	r2, r2, #3
    e1bc:	2a03      	cmp	r2, #3
    e1be:	f000 80ff 	beq.w	e3c0 <ull_conn_llcp+0x1180>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e1c2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e1c6:	f7ff b94a 	b.w	d45e <ull_conn_llcp+0x21e>
			conn->tx_data = conn->tx_data->next;
    e1ca:	6819      	ldr	r1, [r3, #0]
    e1cc:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e1d0:	2a00      	cmp	r2, #0
    e1d2:	f47f aa9a 	bne.w	d70a <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head->next;
    e1d6:	681a      	ldr	r2, [r3, #0]
    e1d8:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    e1dc:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    e1e0:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    e1e4:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
    e1e8:	f7ff ba9a 	b.w	d720 <ull_conn_llcp+0x4e0>
			conn->tx_data = conn->tx_data->next;
    e1ec:	6819      	ldr	r1, [r3, #0]
    e1ee:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e1f2:	2a00      	cmp	r2, #0
    e1f4:	f47f ab68 	bne.w	d8c8 <ull_conn_llcp+0x688>
			tx->next = conn->tx_head->next;
    e1f8:	681a      	ldr	r2, [r3, #0]
    e1fa:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    e1fc:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    e1fe:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    e200:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    e204:	f7ff bb68 	b.w	d8d8 <ull_conn_llcp+0x698>
    e208:	20001d50 	.word	0x20001d50
    e20c:	0001bc28 	.word	0x0001bc28
    e210:	0001b828 	.word	0x0001b828
    e214:	0001b7c8 	.word	0x0001b7c8
			conn->tx_data = conn->tx_data->next;
    e218:	6819      	ldr	r1, [r3, #0]
    e21a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e21e:	2a00      	cmp	r2, #0
    e220:	f47f a97b 	bne.w	d51a <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head->next;
    e224:	681a      	ldr	r2, [r3, #0]
    e226:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    e228:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    e22a:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    e22c:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
    e230:	f7ff b97b 	b.w	d52a <ull_conn_llcp+0x2ea>
		if (!conn->tx_ctrl) {
    e234:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    e238:	2900      	cmp	r1, #0
    e23a:	f47f ace4 	bne.w	dc06 <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head;
    e23e:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
    e240:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    e244:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
    e248:	e4e4      	b.n	dc14 <ull_conn_llcp+0x9d4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e24a:	48ca      	ldr	r0, [pc, #808]	; (e574 <ull_conn_llcp+0x1334>)
    e24c:	f7f7 fd62 	bl	5d14 <mem_acquire>
		if (!tx) {
    e250:	2800      	cmp	r0, #0
    e252:	f43f ace3 	beq.w	dc1c <ull_conn_llcp+0x9dc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    e256:	7902      	ldrb	r2, [r0, #4]
    e258:	f042 0203 	orr.w	r2, r2, #3
    e25c:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    e25e:	2211      	movs	r2, #17
    e260:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    e262:	2203      	movs	r2, #3
    e264:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    e266:	220f      	movs	r2, #15
    e268:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    e26a:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
    e26e:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
    e270:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
    e274:	2a00      	cmp	r2, #0
    e276:	f000 80df 	beq.w	e438 <ull_conn_llcp+0x11f8>
	    !conn->llcp_enc.pause_tx &&
    e27a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    e27e:	0789      	lsls	r1, r1, #30
    e280:	f100 80da 	bmi.w	e438 <ull_conn_llcp+0x11f8>
	    !conn->llcp_phy.pause_tx &&
    e284:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    e288:	07cb      	lsls	r3, r1, #31
    e28a:	f100 80d5 	bmi.w	e438 <ull_conn_llcp+0x11f8>
		if (conn->tx_head == conn->tx_data) {
    e28e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    e292:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    e294:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    e298:	f000 81cb 	beq.w	e632 <ull_conn_llcp+0x13f2>
		} else if (!conn->tx_ctrl) {
    e29c:	2900      	cmp	r1, #0
    e29e:	f000 81c0 	beq.w	e622 <ull_conn_llcp+0x13e2>
	tx->next = conn->tx_ctrl_last->next;
    e2a2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
    e2a6:	6811      	ldr	r1, [r2, #0]
    e2a8:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    e2aa:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    e2ac:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e2b0:	6802      	ldr	r2, [r0, #0]
    e2b2:	2a00      	cmp	r2, #0
    e2b4:	f000 81b2 	beq.w	e61c <ull_conn_llcp+0x13dc>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e2b8:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    e2bc:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    e2c0:	2300      	movs	r3, #0
    e2c2:	f8c8 3000 	str.w	r3, [r8]
    e2c6:	e4a9      	b.n	dc1c <ull_conn_llcp+0x9dc>
			conn->tx_data = conn->tx_data->next;
    e2c8:	6819      	ldr	r1, [r3, #0]
    e2ca:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e2ce:	2a00      	cmp	r2, #0
    e2d0:	f47f ad99 	bne.w	de06 <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head->next;
    e2d4:	681a      	ldr	r2, [r3, #0]
    e2d6:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    e2da:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
    e2de:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
    e2e2:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    e2e6:	e599      	b.n	de1c <ull_conn_llcp+0xbdc>
			conn->tx_data = conn->tx_data->next;
    e2e8:	6819      	ldr	r1, [r3, #0]
    e2ea:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e2ee:	2a00      	cmp	r2, #0
    e2f0:	f47f ad0d 	bne.w	dd0e <ull_conn_llcp+0xace>
			tx->next = conn->tx_head->next;
    e2f4:	681a      	ldr	r2, [r3, #0]
    e2f6:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    e2fa:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    e2fe:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    e302:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
    e306:	e50d      	b.n	dd24 <ull_conn_llcp+0xae4>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    e308:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    e30c:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->tx_data_last = tx;
    e310:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
    e314:	f7fe bf9f 	b.w	d256 <ull_conn_llcp+0x16>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e318:	791a      	ldrb	r2, [r3, #4]
    e31a:	f002 0203 	and.w	r2, r2, #3
    e31e:	2a03      	cmp	r2, #3
    e320:	f000 813d 	beq.w	e59e <ull_conn_llcp+0x135e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e324:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e328:	f7ff b9ef 	b.w	d70a <ull_conn_llcp+0x4ca>
		if (conn->llcp_phy.tx & PHY_2M) {
    e32c:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    e32e:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
    e332:	f3c3 0282 	ubfx	r2, r3, #2, #3
    e336:	f140 8093 	bpl.w	e460 <ull_conn_llcp+0x1220>
			conn->llcp_phy.tx = PHY_2M;
    e33a:	2202      	movs	r2, #2
    e33c:	f362 0384 	bfi	r3, r2, #2, #3
    e340:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
    e344:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    e348:	065f      	lsls	r7, r3, #25
    e34a:	ea4f 1253 	mov.w	r2, r3, lsr #5
    e34e:	d57e      	bpl.n	e44e <ull_conn_llcp+0x120e>
			conn->llcp_phy.rx = PHY_2M;
    e350:	2202      	movs	r2, #2
    e352:	f362 1347 	bfi	r3, r2, #5, #3
    e356:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
    e35a:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    e35c:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
    e360:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    e364:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
    e368:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e36c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    e370:	f3c2 0182 	ubfx	r1, r2, #2, #3
    e374:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    e378:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    e37c:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    e380:	428f      	cmp	r7, r1
    e382:	bf08      	it	eq
    e384:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    e386:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    e388:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    e38c:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    e390:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    e394:	bf08      	it	eq
    e396:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    e398:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    e39c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    e3a0:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
    e3a2:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
    e3a6:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    e3aa:	f7fe bf77 	b.w	d29c <ull_conn_llcp+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e3ae:	791a      	ldrb	r2, [r3, #4]
    e3b0:	f002 0203 	and.w	r2, r2, #3
    e3b4:	2a03      	cmp	r2, #3
    e3b6:	d031      	beq.n	e41c <ull_conn_llcp+0x11dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e3b8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e3bc:	f7ff b8ad 	b.w	d51a <ull_conn_llcp+0x2da>
	    ((pdu_data_tx->llctrl.opcode !=
    e3c0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e3c2:	2a03      	cmp	r2, #3
    e3c4:	f43f aecf 	beq.w	e166 <ull_conn_llcp+0xf26>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e3c8:	2a0a      	cmp	r2, #10
    e3ca:	f47f aefa 	bne.w	e1c2 <ull_conn_llcp+0xf82>
    e3ce:	e6ca      	b.n	e166 <ull_conn_llcp+0xf26>
			conn->tx_data = conn->tx_data->next;
    e3d0:	6819      	ldr	r1, [r3, #0]
    e3d2:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e3d6:	2a00      	cmp	r2, #0
    e3d8:	f47f aa22 	bne.w	d820 <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head->next;
    e3dc:	681a      	ldr	r2, [r3, #0]
    e3de:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    e3e2:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
    e3e6:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    e3ea:	f7ff ba22 	b.w	d832 <ull_conn_llcp+0x5f2>
			conn->tx_data = conn->tx_data->next;
    e3ee:	6819      	ldr	r1, [r3, #0]
    e3f0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e3f4:	2a00      	cmp	r2, #0
    e3f6:	f47f adca 	bne.w	df8e <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head->next;
    e3fa:	681a      	ldr	r2, [r3, #0]
    e3fc:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    e400:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
    e404:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    e408:	e5ca      	b.n	dfa0 <ull_conn_llcp+0xd60>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e40a:	791a      	ldrb	r2, [r3, #4]
    e40c:	f002 0203 	and.w	r2, r2, #3
    e410:	2a03      	cmp	r2, #3
    e412:	d00a      	beq.n	e42a <ull_conn_llcp+0x11ea>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e414:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e418:	f7ff ba56 	b.w	d8c8 <ull_conn_llcp+0x688>
	    ((pdu_data_tx->llctrl.opcode !=
    e41c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e41e:	2a03      	cmp	r2, #3
    e420:	f43f af00 	beq.w	e224 <ull_conn_llcp+0xfe4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e424:	2a0a      	cmp	r2, #10
    e426:	d1c7      	bne.n	e3b8 <ull_conn_llcp+0x1178>
    e428:	e6fc      	b.n	e224 <ull_conn_llcp+0xfe4>
	    ((pdu_data_tx->llctrl.opcode !=
    e42a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e42c:	2a03      	cmp	r2, #3
    e42e:	f43f aee3 	beq.w	e1f8 <ull_conn_llcp+0xfb8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e432:	2a0a      	cmp	r2, #10
    e434:	d1ee      	bne.n	e414 <ull_conn_llcp+0x11d4>
    e436:	e6df      	b.n	e1f8 <ull_conn_llcp+0xfb8>
		if (!conn->tx_ctrl) {
    e438:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    e43c:	2900      	cmp	r1, #0
    e43e:	f47f af30 	bne.w	e2a2 <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head;
    e442:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    e444:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    e448:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    e44c:	e730      	b.n	e2b0 <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_1M) {
    e44e:	07d1      	lsls	r1, r2, #31
    e450:	f140 80fb 	bpl.w	e64a <ull_conn_llcp+0x140a>
			conn->llcp_phy.rx = PHY_1M;
    e454:	2201      	movs	r2, #1
    e456:	f362 1347 	bfi	r3, r2, #5, #3
    e45a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    e45e:	e77c      	b.n	e35a <ull_conn_llcp+0x111a>
		} else if (conn->llcp_phy.tx & PHY_1M) {
    e460:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
    e462:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
    e466:	f140 8152 	bpl.w	e70e <ull_conn_llcp+0x14ce>
			conn->llcp_phy.tx = PHY_1M;
    e46a:	2201      	movs	r2, #1
    e46c:	f362 0384 	bfi	r3, r2, #2, #3
    e470:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    e474:	e766      	b.n	e344 <ull_conn_llcp+0x1104>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e476:	791a      	ldrb	r2, [r3, #4]
    e478:	f002 0203 	and.w	r2, r2, #3
    e47c:	2a03      	cmp	r2, #3
    e47e:	f000 80fb 	beq.w	e678 <ull_conn_llcp+0x1438>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e482:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e486:	e442      	b.n	dd0e <ull_conn_llcp+0xace>
			conn->tx_data = conn->tx_data->next;
    e488:	6819      	ldr	r1, [r3, #0]
    e48a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e48e:	2a00      	cmp	r2, #0
    e490:	f47f ae27 	bne.w	e0e2 <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head->next;
    e494:	681a      	ldr	r2, [r3, #0]
    e496:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    e49a:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
    e49e:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    e4a2:	e627      	b.n	e0f4 <ull_conn_llcp+0xeb4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e4a4:	4833      	ldr	r0, [pc, #204]	; (e574 <ull_conn_llcp+0x1334>)
    e4a6:	f7f7 fc35 	bl	5d14 <mem_acquire>
	if (!tx) {
    e4aa:	2800      	cmp	r0, #0
    e4ac:	f43f abb6 	beq.w	dc1c <ull_conn_llcp+0x9dc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e4b0:	7902      	ldrb	r2, [r0, #4]
    e4b2:	f042 0203 	orr.w	r2, r2, #3
    e4b6:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    e4b8:	2218      	movs	r2, #24
    e4ba:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    e4bc:	2210      	movs	r2, #16
    e4be:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
    e4c0:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
    e4c4:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
    e4c6:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
    e4ca:	8142      	strh	r2, [r0, #10]
	rsp->latency =
    e4cc:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
    e4d0:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
    e4d2:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
    e4d6:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
    e4d8:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
    e4dc:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
    e4de:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
    e4e2:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    e4e6:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
    e4ea:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    e4ee:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
    e4f2:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    e4f6:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
    e4fa:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    e4fe:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
    e502:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    e506:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
    e50a:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    e50e:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
    e512:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
    e516:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
    e51a:	2a00      	cmp	r2, #0
    e51c:	d035      	beq.n	e58a <ull_conn_llcp+0x134a>
	    !conn->llcp_enc.pause_tx &&
    e51e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    e522:	078f      	lsls	r7, r1, #30
    e524:	d431      	bmi.n	e58a <ull_conn_llcp+0x134a>
	    !conn->llcp_phy.pause_tx &&
    e526:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    e52a:	07c9      	lsls	r1, r1, #31
    e52c:	d42d      	bmi.n	e58a <ull_conn_llcp+0x134a>
		if (conn->tx_head == conn->tx_data) {
    e52e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    e532:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    e534:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    e538:	f000 80c6 	beq.w	e6c8 <ull_conn_llcp+0x1488>
		} else if (!conn->tx_ctrl) {
    e53c:	2900      	cmp	r1, #0
    e53e:	f000 80bb 	beq.w	e6b8 <ull_conn_llcp+0x1478>
	tx->next = conn->tx_ctrl_last->next;
    e542:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
    e546:	6811      	ldr	r1, [r2, #0]
    e548:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    e54a:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    e54c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e550:	6802      	ldr	r2, [r0, #0]
    e552:	2a00      	cmp	r2, #0
    e554:	f000 80ad 	beq.w	e6b2 <ull_conn_llcp+0x1472>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    e558:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    e55c:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    e560:	2305      	movs	r3, #5
    e562:	f363 0203 	bfi	r2, r3, #0, #4
    e566:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    e56a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    e56e:	f7fe be72 	b.w	d256 <ull_conn_llcp+0x16>
    e572:	bf00      	nop
    e574:	20001d50 	.word	0x20001d50
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e578:	791a      	ldrb	r2, [r3, #4]
    e57a:	f002 0203 	and.w	r2, r2, #3
    e57e:	2a03      	cmp	r2, #3
    e580:	f000 80ae 	beq.w	e6e0 <ull_conn_llcp+0x14a0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e584:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e588:	e43d      	b.n	de06 <ull_conn_llcp+0xbc6>
		if (!conn->tx_ctrl) {
    e58a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    e58e:	2900      	cmp	r1, #0
    e590:	d1d7      	bne.n	e542 <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head;
    e592:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    e594:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    e598:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    e59c:	e7d8      	b.n	e550 <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
    e59e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e5a0:	2a03      	cmp	r2, #3
    e5a2:	f43f ae18 	beq.w	e1d6 <ull_conn_llcp+0xf96>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e5a6:	2a0a      	cmp	r2, #10
    e5a8:	f47f aebc 	bne.w	e324 <ull_conn_llcp+0x10e4>
    e5ac:	e613      	b.n	e1d6 <ull_conn_llcp+0xf96>
			conn->tx_data = conn->tx_data->next;
    e5ae:	6819      	ldr	r1, [r3, #0]
    e5b0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e5b4:	2a00      	cmp	r2, #0
    e5b6:	f47f ad48 	bne.w	e04a <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head->next;
    e5ba:	681a      	ldr	r2, [r3, #0]
    e5bc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    e5be:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    e5c0:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    e5c4:	e548      	b.n	e058 <ull_conn_llcp+0xe18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e5c6:	791a      	ldrb	r2, [r3, #4]
    e5c8:	f002 0203 	and.w	r2, r2, #3
    e5cc:	2a03      	cmp	r2, #3
    e5ce:	d062      	beq.n	e696 <ull_conn_llcp+0x1456>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e5d0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e5d4:	f7ff b924 	b.w	d820 <ull_conn_llcp+0x5e0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e5d8:	791a      	ldrb	r2, [r3, #4]
    e5da:	f002 0203 	and.w	r2, r2, #3
    e5de:	2a03      	cmp	r2, #3
    e5e0:	d060      	beq.n	e6a4 <ull_conn_llcp+0x1464>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e5e2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e5e6:	e4d2      	b.n	df8e <ull_conn_llcp+0xd4e>
			conn->llcp_cu.interval = interval_max;
    e5e8:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    e5ec:	f7ff ba97 	b.w	db1e <ull_conn_llcp+0x8de>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e5f0:	791a      	ldrb	r2, [r3, #4]
    e5f2:	f002 0203 	and.w	r2, r2, #3
    e5f6:	2a03      	cmp	r2, #3
    e5f8:	f000 8099 	beq.w	e72e <ull_conn_llcp+0x14ee>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e5fc:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e600:	e523      	b.n	e04a <ull_conn_llcp+0xe0a>
			conn->tx_data = conn->tx_data->next;
    e602:	6818      	ldr	r0, [r3, #0]
    e604:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e608:	2900      	cmp	r1, #0
    e60a:	f47f aafc 	bne.w	dc06 <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head->next;
    e60e:	6819      	ldr	r1, [r3, #0]
    e610:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
    e612:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
    e614:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
    e618:	f7ff bafc 	b.w	dc14 <ull_conn_llcp+0x9d4>
		conn->tx_data_last = tx;
    e61c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    e620:	e64a      	b.n	e2b8 <ull_conn_llcp+0x1078>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e622:	7911      	ldrb	r1, [r2, #4]
    e624:	f001 0103 	and.w	r1, r1, #3
    e628:	2903      	cmp	r1, #3
    e62a:	d017      	beq.n	e65c <ull_conn_llcp+0x141c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e62c:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
    e630:	e637      	b.n	e2a2 <ull_conn_llcp+0x1062>
			conn->tx_data = conn->tx_data->next;
    e632:	6813      	ldr	r3, [r2, #0]
    e634:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e638:	2900      	cmp	r1, #0
    e63a:	f47f ae32 	bne.w	e2a2 <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head->next;
    e63e:	6811      	ldr	r1, [r2, #0]
    e640:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    e642:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    e644:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    e648:	e632      	b.n	e2b0 <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
    e64a:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
    e64e:	bf18      	it	ne
    e650:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    e652:	f362 1347 	bfi	r3, r2, #5, #3
    e656:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    e65a:	e67e      	b.n	e35a <ull_conn_llcp+0x111a>
	    ((pdu_data_tx->llctrl.opcode !=
    e65c:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e65e:	2903      	cmp	r1, #3
    e660:	d0ed      	beq.n	e63e <ull_conn_llcp+0x13fe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e662:	290a      	cmp	r1, #10
    e664:	d1e2      	bne.n	e62c <ull_conn_llcp+0x13ec>
    e666:	e7ea      	b.n	e63e <ull_conn_llcp+0x13fe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e668:	791a      	ldrb	r2, [r3, #4]
    e66a:	f002 0203 	and.w	r2, r2, #3
    e66e:	2a03      	cmp	r2, #3
    e670:	d00a      	beq.n	e688 <ull_conn_llcp+0x1448>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e672:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e676:	e534      	b.n	e0e2 <ull_conn_llcp+0xea2>
	    ((pdu_data_tx->llctrl.opcode !=
    e678:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e67a:	2a03      	cmp	r2, #3
    e67c:	f43f ae3a 	beq.w	e2f4 <ull_conn_llcp+0x10b4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e680:	2a0a      	cmp	r2, #10
    e682:	f47f aefe 	bne.w	e482 <ull_conn_llcp+0x1242>
    e686:	e635      	b.n	e2f4 <ull_conn_llcp+0x10b4>
	    ((pdu_data_tx->llctrl.opcode !=
    e688:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e68a:	2a03      	cmp	r2, #3
    e68c:	f43f af02 	beq.w	e494 <ull_conn_llcp+0x1254>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e690:	2a0a      	cmp	r2, #10
    e692:	d1ee      	bne.n	e672 <ull_conn_llcp+0x1432>
    e694:	e6fe      	b.n	e494 <ull_conn_llcp+0x1254>
	    ((pdu_data_tx->llctrl.opcode !=
    e696:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e698:	2a03      	cmp	r2, #3
    e69a:	f43f ae9f 	beq.w	e3dc <ull_conn_llcp+0x119c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e69e:	2a0a      	cmp	r2, #10
    e6a0:	d196      	bne.n	e5d0 <ull_conn_llcp+0x1390>
    e6a2:	e69b      	b.n	e3dc <ull_conn_llcp+0x119c>
	    ((pdu_data_tx->llctrl.opcode !=
    e6a4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e6a6:	2a03      	cmp	r2, #3
    e6a8:	f43f aea7 	beq.w	e3fa <ull_conn_llcp+0x11ba>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e6ac:	2a0a      	cmp	r2, #10
    e6ae:	d198      	bne.n	e5e2 <ull_conn_llcp+0x13a2>
    e6b0:	e6a3      	b.n	e3fa <ull_conn_llcp+0x11ba>
		conn->tx_data_last = tx;
    e6b2:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    e6b6:	e74f      	b.n	e558 <ull_conn_llcp+0x1318>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e6b8:	7911      	ldrb	r1, [r2, #4]
    e6ba:	f001 0103 	and.w	r1, r1, #3
    e6be:	2903      	cmp	r1, #3
    e6c0:	d016      	beq.n	e6f0 <ull_conn_llcp+0x14b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e6c2:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
    e6c6:	e73c      	b.n	e542 <ull_conn_llcp+0x1302>
			conn->tx_data = conn->tx_data->next;
    e6c8:	6813      	ldr	r3, [r2, #0]
    e6ca:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e6ce:	2900      	cmp	r1, #0
    e6d0:	f47f af37 	bne.w	e542 <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head->next;
    e6d4:	6811      	ldr	r1, [r2, #0]
    e6d6:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    e6d8:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    e6da:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    e6de:	e737      	b.n	e550 <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
    e6e0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e6e2:	2a03      	cmp	r2, #3
    e6e4:	f43f adf6 	beq.w	e2d4 <ull_conn_llcp+0x1094>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e6e8:	2a0a      	cmp	r2, #10
    e6ea:	f47f af4b 	bne.w	e584 <ull_conn_llcp+0x1344>
    e6ee:	e5f1      	b.n	e2d4 <ull_conn_llcp+0x1094>
	    ((pdu_data_tx->llctrl.opcode !=
    e6f0:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e6f2:	2903      	cmp	r1, #3
    e6f4:	d0ee      	beq.n	e6d4 <ull_conn_llcp+0x1494>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e6f6:	290a      	cmp	r1, #10
    e6f8:	d1e3      	bne.n	e6c2 <ull_conn_llcp+0x1482>
    e6fa:	e7eb      	b.n	e6d4 <ull_conn_llcp+0x1494>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e6fc:	7919      	ldrb	r1, [r3, #4]
    e6fe:	f001 0103 	and.w	r1, r1, #3
    e702:	2903      	cmp	r1, #3
    e704:	d00c      	beq.n	e720 <ull_conn_llcp+0x14e0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e706:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e70a:	f7ff ba7c 	b.w	dc06 <ull_conn_llcp+0x9c6>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
    e70e:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
    e712:	bf18      	it	ne
    e714:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
    e716:	f362 0384 	bfi	r3, r2, #2, #3
    e71a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    e71e:	e611      	b.n	e344 <ull_conn_llcp+0x1104>
	    ((pdu_data_tx->llctrl.opcode !=
    e720:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e722:	2903      	cmp	r1, #3
    e724:	f43f af73 	beq.w	e60e <ull_conn_llcp+0x13ce>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e728:	290a      	cmp	r1, #10
    e72a:	d1ec      	bne.n	e706 <ull_conn_llcp+0x14c6>
    e72c:	e76f      	b.n	e60e <ull_conn_llcp+0x13ce>
	    ((pdu_data_tx->llctrl.opcode !=
    e72e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e730:	2a03      	cmp	r2, #3
    e732:	f43f af42 	beq.w	e5ba <ull_conn_llcp+0x137a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e736:	2a0a      	cmp	r2, #10
    e738:	f47f af60 	bne.w	e5fc <ull_conn_llcp+0x13bc>
    e73c:	e73d      	b.n	e5ba <ull_conn_llcp+0x137a>
		LL_ASSERT(0);
    e73e:	4a02      	ldr	r2, [pc, #8]	; (e748 <ull_conn_llcp+0x1508>)
    e740:	4902      	ldr	r1, [pc, #8]	; (e74c <ull_conn_llcp+0x150c>)
    e742:	f640 73d2 	movw	r3, #4050	; 0xfd2
    e746:	e435      	b.n	dfb4 <ull_conn_llcp+0xd74>
    e748:	0001bc28 	.word	0x0001bc28
    e74c:	0001b828 	.word	0x0001b828

0000e750 <ull_conn_tx_demux>:
{
    e750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    e754:	4c24      	ldr	r4, [pc, #144]	; (e7e8 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e756:	4f25      	ldr	r7, [pc, #148]	; (e7ec <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    e758:	78e2      	ldrb	r2, [r4, #3]
{
    e75a:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
    e75c:	1d26      	adds	r6, r4, #4
    e75e:	e021      	b.n	e7a4 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    e760:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    e764:	4638      	mov	r0, r7
    e766:	f7f7 fb07 	bl	5d78 <mem_get>
	if (conn->lll.handle != handle) {
    e76a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    e76c:	bb2a      	cbnz	r2, e7ba <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
    e76e:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
    e772:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
    e776:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
    e778:	b351      	cbz	r1, e7d0 <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
    e77a:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
    e77e:	b102      	cbz	r2, e782 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
    e780:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
    e782:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
    e786:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
    e788:	78a3      	ldrb	r3, [r4, #2]
    e78a:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
    e78c:	429a      	cmp	r2, r3
    e78e:	d005      	beq.n	e79c <ull_conn_tx_demux+0x4c>
	_first += 1U;
    e790:	3301      	adds	r3, #1
    e792:	b2db      	uxtb	r3, r3
		_first = 0U;
    e794:	4299      	cmp	r1, r3
    e796:	bf08      	it	eq
    e798:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    e79a:	70a3      	strb	r3, [r4, #2]
	} while (--count);
    e79c:	3d01      	subs	r5, #1
    e79e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    e7a2:	d01e      	beq.n	e7e2 <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    e7a4:	78a3      	ldrb	r3, [r4, #2]
    e7a6:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
    e7a8:	4293      	cmp	r3, r2
    e7aa:	d01a      	beq.n	e7e2 <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
    e7ac:	fb13 f301 	smulbb	r3, r3, r1
    e7b0:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
    e7b4:	5af2      	ldrh	r2, [r6, r3]
    e7b6:	2a00      	cmp	r2, #0
    e7b8:	d0d2      	beq.n	e760 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
    e7ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
    e7be:	790b      	ldrb	r3, [r1, #4]
    e7c0:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    e7c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
    e7c8:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    e7ca:	f7fa fe71 	bl	94b0 <ll_tx_ack_put>
    e7ce:	e7da      	b.n	e786 <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
    e7d0:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
    e7d4:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
    e7d8:	2a00      	cmp	r2, #0
    e7da:	d1ce      	bne.n	e77a <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
    e7dc:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
    e7e0:	e7cf      	b.n	e782 <ull_conn_tx_demux+0x32>
}
    e7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7e6:	bf00      	nop
    e7e8:	2000055c 	.word	0x2000055c
    e7ec:	20000ed0 	.word	0x20000ed0

0000e7f0 <conn_cleanup_finalize>:
{
    e7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
    e7f4:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
    e7f8:	b082      	sub	sp, #8
    e7fa:	4606      	mov	r6, r0
	while (rx) {
    e7fc:	b144      	cbz	r4, e810 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
    e7fe:	2501      	movs	r5, #1
		rx = hdr->link->mem;
    e800:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
    e802:	4621      	mov	r1, r4
		rx = hdr->link->mem;
    e804:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
    e806:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
    e808:	f7fa fe0e 	bl	9428 <ll_rx_put>
	while (rx) {
    e80c:	2c00      	cmp	r4, #0
    e80e:	d1f7      	bne.n	e800 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
    e810:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
    e814:	b381      	cbz	r1, e878 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
    e816:	f8df 80a4 	ldr.w	r8, [pc, #164]	; e8bc <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
    e81a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; e8c0 <conn_cleanup_finalize+0xd0>
    e81e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; e8c4 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    e822:	f106 0768 	add.w	r7, r6, #104	; 0x68
    e826:	e007      	b.n	e838 <conn_cleanup_finalize+0x48>
    e828:	4629      	mov	r1, r5
    e82a:	463a      	mov	r2, r7
    e82c:	4620      	mov	r0, r4
    e82e:	f7f7 fad5 	bl	5ddc <memq_enqueue>
	while (conn->tx_head) {
    e832:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
    e836:	b1f9      	cbz	r1, e878 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    e838:	4630      	mov	r0, r6
    e83a:	f7fc fa61 	bl	ad00 <tx_ull_dequeue>
    e83e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
    e840:	4640      	mov	r0, r8
    e842:	f7f7 fa67 	bl	5d14 <mem_acquire>
		LL_ASSERT(link);
    e846:	4604      	mov	r4, r0
    e848:	2800      	cmp	r0, #0
    e84a:	d1ed      	bne.n	e828 <conn_cleanup_finalize+0x38>
    e84c:	481e      	ldr	r0, [pc, #120]	; (e8c8 <conn_cleanup_finalize+0xd8>)
    e84e:	f640 134f 	movw	r3, #2383	; 0x94f
    e852:	4652      	mov	r2, sl
    e854:	4649      	mov	r1, r9
    e856:	f008 fb8a 	bl	16f6e <printk>
    e85a:	4040      	eors	r0, r0
    e85c:	f380 8811 	msr	BASEPRI, r0
    e860:	f04f 0003 	mov.w	r0, #3
    e864:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    e866:	4629      	mov	r1, r5
    e868:	463a      	mov	r2, r7
    e86a:	4620      	mov	r0, r4
    e86c:	f7f7 fab6 	bl	5ddc <memq_enqueue>
	while (conn->tx_head) {
    e870:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
    e874:	2900      	cmp	r1, #0
    e876:	d1df      	bne.n	e838 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    e878:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    e87a:	4b14      	ldr	r3, [pc, #80]	; (e8cc <conn_cleanup_finalize+0xdc>)
    e87c:	9600      	str	r6, [sp, #0]
    e87e:	3203      	adds	r2, #3
    e880:	b2d2      	uxtb	r2, r2
    e882:	2101      	movs	r1, #1
    e884:	2000      	movs	r0, #0
    e886:	f7f8 fcdd 	bl	7244 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e88a:	f030 0302 	bics.w	r3, r0, #2
    e88e:	d00c      	beq.n	e8aa <conn_cleanup_finalize+0xba>
    e890:	4a0b      	ldr	r2, [pc, #44]	; (e8c0 <conn_cleanup_finalize+0xd0>)
    e892:	490f      	ldr	r1, [pc, #60]	; (e8d0 <conn_cleanup_finalize+0xe0>)
    e894:	480c      	ldr	r0, [pc, #48]	; (e8c8 <conn_cleanup_finalize+0xd8>)
    e896:	f640 1314 	movw	r3, #2324	; 0x914
    e89a:	f008 fb68 	bl	16f6e <printk>
    e89e:	4040      	eors	r0, r0
    e8a0:	f380 8811 	msr	BASEPRI, r0
    e8a4:	f04f 0003 	mov.w	r0, #3
    e8a8:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
    e8aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
    e8ae:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
    e8b0:	8533      	strh	r3, [r6, #40]	; 0x28
}
    e8b2:	b002      	add	sp, #8
    e8b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
    e8b8:	f7ff bf4a 	b.w	e750 <ull_conn_tx_demux>
    e8bc:	20001e04 	.word	0x20001e04
    e8c0:	0001bc28 	.word	0x0001bc28
    e8c4:	0001bc80 	.word	0x0001bc80
    e8c8:	0001b7c8 	.word	0x0001b7c8
    e8cc:	0000aaad 	.word	0x0000aaad
    e8d0:	0001bd08 	.word	0x0001bd08

0000e8d4 <ull_conn_done>:
{
    e8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
    e8d8:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    e8da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    e8dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e8e0:	429a      	cmp	r2, r3
{
    e8e2:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    e8e4:	f000 808f 	beq.w	ea06 <ull_conn_done+0x132>
	switch (done->extra.mic_state) {
    e8e8:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    e8ec:	2b01      	cmp	r3, #1
    e8ee:	4605      	mov	r5, r0
    e8f0:	f000 80e5 	beq.w	eabe <ull_conn_done+0x1ea>
    e8f4:	2b02      	cmp	r3, #2
    e8f6:	f000 80cc 	beq.w	ea92 <ull_conn_done+0x1be>
    e8fa:	2b00      	cmp	r3, #0
    e8fc:	f000 80af 	beq.w	ea5e <ull_conn_done+0x18a>
	reason_final = conn->llcp_terminate.reason_final;
    e900:	f894 6143 	ldrb.w	r6, [r4, #323]	; 0x143
	if (reason_final && (
    e904:	2e00      	cmp	r6, #0
    e906:	f040 80c7 	bne.w	ea98 <ull_conn_done+0x1c4>
	latency_event = lll->latency_event;
    e90a:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
    e90e:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
    e910:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
    e914:	e9cd 6608 	strd	r6, r6, [sp, #32]
	elapsed_event = latency_event + 1;
    e918:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
    e91a:	2b00      	cmp	r3, #0
    e91c:	d076      	beq.n	ea0c <ull_conn_done+0x138>
		} else if (lll->role) {
    e91e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    e922:	2b00      	cmp	r3, #0
    e924:	f2c0 8111 	blt.w	eb4a <ull_conn_done+0x276>
	if (done->extra.crc_valid) {
    e928:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
    e92c:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
    e92e:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
    e930:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
    e934:	f140 80c9 	bpl.w	eaca <ull_conn_done+0x1f6>
		conn->supervision_expire = 0U;
    e938:	2300      	movs	r3, #0
    e93a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
    e93e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    e942:	b12b      	cbz	r3, e950 <ull_conn_done+0x7c>
		if (conn->procedure_expire > elapsed_event) {
    e944:	42bb      	cmp	r3, r7
    e946:	f240 8127 	bls.w	eb98 <ull_conn_done+0x2c4>
			conn->procedure_expire -= elapsed_event;
    e94a:	1bdb      	subs	r3, r3, r7
    e94c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
    e950:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    e954:	b12b      	cbz	r3, e962 <ull_conn_done+0x8e>
		if (conn->apto_expire > elapsed_event) {
    e956:	42bb      	cmp	r3, r7
    e958:	f240 80e3 	bls.w	eb22 <ull_conn_done+0x24e>
			conn->apto_expire -= elapsed_event;
    e95c:	1bdb      	subs	r3, r3, r7
    e95e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
    e962:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
    e966:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    e96a:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
    e96e:	b15a      	cbz	r2, e988 <ull_conn_done+0xb4>
		if (conn->appto_expire > elapsed_event) {
    e970:	42ba      	cmp	r2, r7
    e972:	f200 80ba 	bhi.w	eaea <ull_conn_done+0x216>
			if ((conn->procedure_expire == 0U) &&
    e976:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
    e97a:	2000      	movs	r0, #0
    e97c:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
    e980:	b912      	cbnz	r2, e988 <ull_conn_done+0xb4>
    e982:	4299      	cmp	r1, r3
    e984:	f000 8124 	beq.w	ebd0 <ull_conn_done+0x2fc>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    e988:	1a5b      	subs	r3, r3, r1
    e98a:	f003 0303 	and.w	r3, r3, #3
    e98e:	2b02      	cmp	r3, #2
    e990:	f000 80b4 	beq.w	eafc <ull_conn_done+0x228>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
    e994:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
    e998:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    e99c:	429a      	cmp	r2, r3
    e99e:	f000 80d2 	beq.w	eb46 <ull_conn_done+0x272>
		lll->latency_event = 0U;
    e9a2:	2200      	movs	r2, #0
    e9a4:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    e9a6:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
    e9aa:	b916      	cbnz	r6, e9b2 <ull_conn_done+0xde>
    e9ac:	4590      	cmp	r8, r2
    e9ae:	f000 80b2 	beq.w	eb16 <ull_conn_done+0x242>
		lazy = lll->latency_event + 1U;
    e9b2:	3201      	adds	r2, #1
    e9b4:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    e9b6:	b913      	cbnz	r3, e9be <ull_conn_done+0xea>
    e9b8:	2d00      	cmp	r5, #0
    e9ba:	f000 808f 	beq.w	eadc <ull_conn_done+0x208>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    e9be:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
    e9c0:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    e9c2:	9500      	str	r5, [sp, #0]
    e9c4:	2000      	movs	r0, #0
    e9c6:	4d99      	ldr	r5, [pc, #612]	; (ec2c <ull_conn_done+0x358>)
    e9c8:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    e9ca:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    e9cc:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e9d0:	9604      	str	r6, [sp, #16]
    e9d2:	9406      	str	r4, [sp, #24]
    e9d4:	b2d2      	uxtb	r2, r2
    e9d6:	2101      	movs	r1, #1
    e9d8:	9505      	str	r5, [sp, #20]
    e9da:	f7f8 fc1b 	bl	7214 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e9de:	f030 0302 	bics.w	r3, r0, #2
    e9e2:	d010      	beq.n	ea06 <ull_conn_done+0x132>
    e9e4:	f7fa fdd6 	bl	9594 <ull_disable_mark_get>
    e9e8:	4284      	cmp	r4, r0
    e9ea:	d00c      	beq.n	ea06 <ull_conn_done+0x132>
    e9ec:	4a90      	ldr	r2, [pc, #576]	; (ec30 <ull_conn_done+0x35c>)
    e9ee:	4991      	ldr	r1, [pc, #580]	; (ec34 <ull_conn_done+0x360>)
    e9f0:	4891      	ldr	r0, [pc, #580]	; (ec38 <ull_conn_done+0x364>)
    e9f2:	f240 63be 	movw	r3, #1726	; 0x6be
    e9f6:	f008 faba 	bl	16f6e <printk>
    e9fa:	4040      	eors	r0, r0
    e9fc:	f380 8811 	msr	BASEPRI, r0
    ea00:	f04f 0003 	mov.w	r0, #3
    ea04:	df02      	svc	2
}
    ea06:	b00a      	add	sp, #40	; 0x28
    ea08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
    ea0c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    ea10:	f013 0301 	ands.w	r3, r3, #1
    ea14:	d190      	bne.n	e938 <ull_conn_done+0x64>
	else if (conn->connect_expire) {
    ea16:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
    ea1a:	2900      	cmp	r1, #0
    ea1c:	d055      	beq.n	eaca <ull_conn_done+0x1f6>
		if (conn->connect_expire > elapsed_event) {
    ea1e:	42b9      	cmp	r1, r7
    ea20:	f240 80dd 	bls.w	ebde <ull_conn_done+0x30a>
			conn->connect_expire -= elapsed_event;
    ea24:	1bc9      	subs	r1, r1, r7
	if (conn->supervision_expire) {
    ea26:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
    ea2a:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
    ea2e:	2b00      	cmp	r3, #0
    ea30:	d085      	beq.n	e93e <ull_conn_done+0x6a>
		if (conn->supervision_expire > elapsed_event) {
    ea32:	429f      	cmp	r7, r3
    ea34:	f080 809b 	bcs.w	eb6e <ull_conn_done+0x29a>
			conn->supervision_expire -= elapsed_event;
    ea38:	1bdb      	subs	r3, r3, r7
    ea3a:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
    ea3c:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
    ea3e:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
    ea40:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
    ea44:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
    ea46:	d908      	bls.n	ea5a <ull_conn_done+0x186>
			else if (lll->role) {
    ea48:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    ea4c:	4293      	cmp	r3, r2
    ea4e:	f6bf af76 	bge.w	e93e <ull_conn_done+0x6a>
				if (latency_event) {
    ea52:	f1b8 0f00 	cmp.w	r8, #0
    ea56:	f000 80ad 	beq.w	ebb4 <ull_conn_done+0x2e0>
				force = 1U;
    ea5a:	2601      	movs	r6, #1
    ea5c:	e76f      	b.n	e93e <ull_conn_done+0x6a>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    ea5e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    ea62:	0718      	lsls	r0, r3, #28
    ea64:	d551      	bpl.n	eb0a <ull_conn_done+0x236>
					    (lll->latency + 6)) ?
    ea66:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
    ea68:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
    ea6c:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    ea6e:	4299      	cmp	r1, r3
    ea70:	bfc4      	itt	gt
    ea72:	1f8b      	subgt	r3, r1, #6
    ea74:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    ea76:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
    ea7a:	bfcc      	ite	gt
    ea7c:	b29b      	uxthgt	r3, r3
    ea7e:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    ea80:	4298      	cmp	r0, r3
    ea82:	d06e      	beq.n	eb62 <ull_conn_done+0x28e>
				conn->appto_reload = appto_reload_new;
    ea84:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
    ea88:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
    ea8c:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
    ea90:	e736      	b.n	e900 <ull_conn_done+0x2c>
		conn->llcp_terminate.reason_final =
    ea92:	263d      	movs	r6, #61	; 0x3d
    ea94:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
	if (conn == conn_upd_curr) {
    ea98:	4b68      	ldr	r3, [pc, #416]	; (ec3c <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
    ea9a:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
    ea9e:	6819      	ldr	r1, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
    eaa0:	f884 6160 	strb.w	r6, [r4, #352]	; 0x160
	if (conn == conn_upd_curr) {
    eaa4:	428c      	cmp	r4, r1
		conn_upd_curr = NULL;
    eaa6:	bf04      	itt	eq
    eaa8:	2100      	moveq	r1, #0
    eaaa:	6019      	streq	r1, [r3, #0]
	conn_cleanup_finalize(conn);
    eaac:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    eaae:	2317      	movs	r3, #23
    eab0:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
    eab4:	b00a      	add	sp, #40	; 0x28
    eab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_cleanup_finalize(conn);
    eaba:	f7ff be99 	b.w	e7f0 <conn_cleanup_finalize>
		conn->appto_expire = conn->apto_expire = 0U;
    eabe:	2300      	movs	r3, #0
    eac0:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    eac4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
    eac8:	e71a      	b.n	e900 <ull_conn_done+0x2c>
		if (!conn->supervision_expire) {
    eaca:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    eace:	2b00      	cmp	r3, #0
    ead0:	d1af      	bne.n	ea32 <ull_conn_done+0x15e>
			conn->supervision_expire = conn->supervision_reload;
    ead2:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
    ead6:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
    eada:	e7a8      	b.n	ea2e <ull_conn_done+0x15a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    eadc:	2900      	cmp	r1, #0
    eade:	f47f af6e 	bne.w	e9be <ull_conn_done+0xea>
    eae2:	2e00      	cmp	r6, #0
    eae4:	f47f af6b 	bne.w	e9be <ull_conn_done+0xea>
    eae8:	e78d      	b.n	ea06 <ull_conn_done+0x132>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    eaea:	1a5b      	subs	r3, r3, r1
    eaec:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
    eaf0:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    eaf2:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
    eaf4:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    eaf8:	f47f af4c 	bne.w	e994 <ull_conn_done+0xc0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
    eafc:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    eb00:	3b01      	subs	r3, #1
    eb02:	2b01      	cmp	r3, #1
    eb04:	f63f af46 	bhi.w	e994 <ull_conn_done+0xc0>
    eb08:	e74b      	b.n	e9a2 <ull_conn_done+0xce>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    eb0a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
    eb0e:	07d9      	lsls	r1, r3, #31
    eb10:	f57f aef6 	bpl.w	e900 <ull_conn_done+0x2c>
    eb14:	e7a7      	b.n	ea66 <ull_conn_done+0x192>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    eb16:	b913      	cbnz	r3, eb1e <ull_conn_done+0x24a>
    eb18:	2d00      	cmp	r5, #0
    eb1a:	f43f af74 	beq.w	ea06 <ull_conn_done+0x132>
	lazy = 0U;
    eb1e:	4631      	mov	r1, r6
    eb20:	e74d      	b.n	e9be <ull_conn_done+0xea>
			rx = ll_pdu_rx_alloc();
    eb22:	f7fa fcaf 	bl	9484 <ll_pdu_rx_alloc>
			if (rx) {
    eb26:	4601      	mov	r1, r0
    eb28:	2800      	cmp	r0, #0
    eb2a:	d03f      	beq.n	ebac <ull_conn_done+0x2d8>
				rx->handle = lll->handle;
    eb2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
    eb2e:	2200      	movs	r2, #0
    eb30:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
    eb34:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
    eb36:	231a      	movs	r3, #26
    eb38:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
    eb3a:	6800      	ldr	r0, [r0, #0]
    eb3c:	f7fa fc74 	bl	9428 <ll_rx_put>
				ll_rx_sched();
    eb40:	f7fa fc7c 	bl	943c <ll_rx_sched>
    eb44:	e70d      	b.n	e962 <ull_conn_done+0x8e>
	if ((force) || (latency_event != lll->latency_event)) {
    eb46:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    eb48:	e72d      	b.n	e9a6 <ull_conn_done+0xd2>
			ull_drift_ticks_get(done, &ticks_drift_plus,
    eb4a:	aa08      	add	r2, sp, #32
    eb4c:	a909      	add	r1, sp, #36	; 0x24
    eb4e:	4628      	mov	r0, r5
    eb50:	f7f1 fc36 	bl	3c0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
    eb54:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    eb58:	2b00      	cmp	r3, #0
    eb5a:	d051      	beq.n	ec00 <ull_conn_done+0x32c>
				lll->latency_event = 0;
    eb5c:	2300      	movs	r3, #0
    eb5e:	8623      	strh	r3, [r4, #48]	; 0x30
    eb60:	e6e2      	b.n	e928 <ull_conn_done+0x54>
			if (conn->apto_expire == 0U) {
    eb62:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
    eb66:	2800      	cmp	r0, #0
    eb68:	f47f aeca 	bne.w	e900 <ull_conn_done+0x2c>
    eb6c:	e78c      	b.n	ea88 <ull_conn_done+0x1b4>
	if (conn == conn_upd_curr) {
    eb6e:	4b33      	ldr	r3, [pc, #204]	; (ec3c <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
    eb70:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
    eb72:	681a      	ldr	r2, [r3, #0]
    eb74:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    eb76:	bf04      	itt	eq
    eb78:	2200      	moveq	r2, #0
    eb7a:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    eb7c:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
    eb7e:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
    eb80:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    eb84:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
    eb88:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
    eb8c:	4620      	mov	r0, r4
    eb8e:	f7ff fe2f 	bl	e7f0 <conn_cleanup_finalize>
}
    eb92:	b00a      	add	sp, #40	; 0x28
    eb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn == conn_upd_curr) {
    eb98:	4b28      	ldr	r3, [pc, #160]	; (ec3c <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
    eb9a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
    eb9c:	681a      	ldr	r2, [r3, #0]
    eb9e:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    eba0:	bf04      	itt	eq
    eba2:	2200      	moveq	r2, #0
    eba4:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    eba6:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
    eba8:	2322      	movs	r3, #34	; 0x22
    ebaa:	e7e9      	b.n	eb80 <ull_conn_done+0x2ac>
				conn->apto_expire = 1U;
    ebac:	2301      	movs	r3, #1
    ebae:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    ebb2:	e6d6      	b.n	e962 <ull_conn_done+0x8e>
					force = conn->periph.force & 0x01;
    ebb4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
    ebb8:	085a      	lsrs	r2, r3, #1
					if (force) {
    ebba:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
    ebbe:	bf17      	itett	ne
    ebc0:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
    ebc4:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->periph.force |= BIT(31);
    ebc8:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->periph.force & 0x01;
    ebcc:	461e      	movne	r6, r3
    ebce:	e6b6      	b.n	e93e <ull_conn_done+0x6a>
				conn->llcp_type = LLCP_PING;
    ebd0:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
    ebd2:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
    ebd4:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
    ebd8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    ebdc:	e6da      	b.n	e994 <ull_conn_done+0xc0>
	if (conn == conn_upd_curr) {
    ebde:	4917      	ldr	r1, [pc, #92]	; (ec3c <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
    ebe0:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
    ebe4:	6808      	ldr	r0, [r1, #0]
    ebe6:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
    ebe8:	bf08      	it	eq
    ebea:	600b      	streq	r3, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    ebec:	2117      	movs	r1, #23
	*((uint8_t *)rx->pdu) = reason;
    ebee:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    ebf0:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
    ebf4:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
    ebf8:	4620      	mov	r0, r4
    ebfa:	f7ff fdf9 	bl	e7f0 <conn_cleanup_finalize>
}
    ebfe:	e702      	b.n	ea06 <ull_conn_done+0x132>
				ull_conn_tx_demux(UINT8_MAX);
    ec00:	20ff      	movs	r0, #255	; 0xff
    ec02:	f7ff fda5 	bl	e750 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
    ec06:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    ec0a:	2b00      	cmp	r3, #0
    ec0c:	d1a6      	bne.n	eb5c <ull_conn_done+0x288>
    ec0e:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
    ec12:	4632      	mov	r2, r6
    ec14:	f7f7 f8ec 	bl	5df0 <memq_peek>
    ec18:	2800      	cmp	r0, #0
    ec1a:	d19f      	bne.n	eb5c <ull_conn_done+0x288>
			} else if (lll->periph.latency_enabled) {
    ec1c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    ec20:	075a      	lsls	r2, r3, #29
				lll->latency_event = lll->latency;
    ec22:	bf44      	itt	mi
    ec24:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
    ec26:	8623      	strhmi	r3, [r4, #48]	; 0x30
    ec28:	e67e      	b.n	e928 <ull_conn_done+0x54>
    ec2a:	bf00      	nop
    ec2c:	0000acc1 	.word	0x0000acc1
    ec30:	0001bc28 	.word	0x0001bc28
    ec34:	0001bd9c 	.word	0x0001bd9c
    ec38:	0001b7c8 	.word	0x0001b7c8
    ec3c:	20001cbc 	.word	0x20001cbc

0000ec40 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
    ec40:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    ec44:	2b00      	cmp	r3, #0
    ec46:	f000 80be 	beq.w	edc6 <ull_conn_tx_lll_enqueue+0x186>
    ec4a:	3901      	subs	r1, #1
{
    ec4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
    ec50:	f8df 8174 	ldr.w	r8, [pc, #372]	; edc8 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
    ec54:	f8df a174 	ldr.w	sl, [pc, #372]	; edcc <ull_conn_tx_lll_enqueue+0x18c>
    ec58:	f8df 9174 	ldr.w	r9, [pc, #372]	; edd0 <ull_conn_tx_lll_enqueue+0x190>
    ec5c:	4604      	mov	r4, r0
    ec5e:	b2cd      	uxtb	r5, r1
    ec60:	e010      	b.n	ec84 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
    ec62:	4640      	mov	r0, r8
    ec64:	f7f7 f856 	bl	5d14 <mem_acquire>
		LL_ASSERT(link);
    ec68:	4607      	mov	r7, r0
    ec6a:	b3b0      	cbz	r0, ecda <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    ec6c:	f104 0268 	add.w	r2, r4, #104	; 0x68
    ec70:	4631      	mov	r1, r6
    ec72:	4638      	mov	r0, r7
    ec74:	f7f7 f8b2 	bl	5ddc <memq_enqueue>
	while (conn->tx_head &&
    ec78:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    ec7c:	3d01      	subs	r5, #1
    ec7e:	b2ed      	uxtb	r5, r5
    ec80:	2b00      	cmp	r3, #0
    ec82:	d05c      	beq.n	ed3e <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
    ec84:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
    ec88:	07d1      	lsls	r1, r2, #31
    ec8a:	d403      	bmi.n	ec94 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
    ec8c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
    ec90:	0792      	lsls	r2, r2, #30
    ec92:	d53a      	bpl.n	ed0a <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
    ec94:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    ec98:	4293      	cmp	r3, r2
    ec9a:	d150      	bne.n	ed3e <ull_conn_tx_lll_enqueue+0xfe>
    ec9c:	2dff      	cmp	r5, #255	; 0xff
    ec9e:	d04e      	beq.n	ed3e <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    eca0:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
    eca4:	4620      	mov	r0, r4
    eca6:	f7fc f82b 	bl	ad00 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    ecaa:	7903      	ldrb	r3, [r0, #4]
    ecac:	f003 0303 	and.w	r3, r3, #3
    ecb0:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
    ecb2:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    ecb4:	d1d5      	bne.n	ec62 <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
    ecb6:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
    ecb8:	2b0b      	cmp	r3, #11
    ecba:	d042      	beq.n	ed42 <ull_conn_tx_lll_enqueue+0x102>
    ecbc:	d81b      	bhi.n	ecf6 <ull_conn_tx_lll_enqueue+0xb6>
    ecbe:	2b04      	cmp	r3, #4
    ecc0:	d1cf      	bne.n	ec62 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
    ecc2:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
    ecc6:	f043 0302 	orr.w	r3, r3, #2
    ecca:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
    ecce:	4640      	mov	r0, r8
    ecd0:	f7f7 f820 	bl	5d14 <mem_acquire>
		LL_ASSERT(link);
    ecd4:	4607      	mov	r7, r0
    ecd6:	2800      	cmp	r0, #0
    ecd8:	d1c8      	bne.n	ec6c <ull_conn_tx_lll_enqueue+0x2c>
    ecda:	483e      	ldr	r0, [pc, #248]	; (edd4 <ull_conn_tx_lll_enqueue+0x194>)
    ecdc:	f240 7317 	movw	r3, #1815	; 0x717
    ece0:	4652      	mov	r2, sl
    ece2:	4649      	mov	r1, r9
    ece4:	f008 f943 	bl	16f6e <printk>
    ece8:	4040      	eors	r0, r0
    ecea:	f380 8811 	msr	BASEPRI, r0
    ecee:	f04f 0003 	mov.w	r0, #3
    ecf2:	df02      	svc	2
    ecf4:	e7ba      	b.n	ec6c <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
    ecf6:	3b16      	subs	r3, #22
    ecf8:	2b01      	cmp	r3, #1
    ecfa:	d8b2      	bhi.n	ec62 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
    ecfc:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    ed00:	f043 0301 	orr.w	r3, r3, #1
    ed04:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
    ed08:	e7ab      	b.n	ec62 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    ed0a:	791a      	ldrb	r2, [r3, #4]
    ed0c:	f002 0203 	and.w	r2, r2, #3
    ed10:	2a03      	cmp	r2, #3
    ed12:	d1c3      	bne.n	ec9c <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
    ed14:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    ed16:	2a03      	cmp	r2, #3
    ed18:	d001      	beq.n	ed1e <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    ed1a:	2a0a      	cmp	r2, #10
    ed1c:	d1be      	bne.n	ec9c <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
    ed1e:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    ed22:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    ed26:	428a      	cmp	r2, r1
    ed28:	d010      	beq.n	ed4c <ull_conn_tx_lll_enqueue+0x10c>
    ed2a:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
    ed2e:	2a03      	cmp	r2, #3
    ed30:	d0b4      	beq.n	ec9c <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
    ed32:	681a      	ldr	r2, [r3, #0]
    ed34:	b11a      	cbz	r2, ed3e <ull_conn_tx_lll_enqueue+0xfe>
    ed36:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    ed3a:	428a      	cmp	r2, r1
    ed3c:	d032      	beq.n	eda4 <ull_conn_tx_lll_enqueue+0x164>
}
    ed3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
    ed42:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    ed46:	2b00      	cmp	r3, #0
    ed48:	da8b      	bge.n	ec62 <ull_conn_tx_lll_enqueue+0x22>
    ed4a:	e7ba      	b.n	ecc2 <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
    ed4c:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    ed50:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
    ed54:	4288      	cmp	r0, r1
    ed56:	d1ec      	bne.n	ed32 <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
    ed58:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
    ed5c:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
    ed60:	4288      	cmp	r0, r1
    ed62:	d1e6      	bne.n	ed32 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
    ed64:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    ed68:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    ed6c:	4288      	cmp	r0, r1
    ed6e:	d1e0      	bne.n	ed32 <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
    ed70:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
    ed74:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    ed78:	4288      	cmp	r0, r1
    ed7a:	d1da      	bne.n	ed32 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
    ed7c:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
    ed80:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
    ed84:	4288      	cmp	r0, r1
    ed86:	d1d4      	bne.n	ed32 <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    ed88:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
    ed8c:	3a02      	subs	r2, #2
    ed8e:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    ed92:	2201      	movs	r2, #1
    ed94:	f362 0301 	bfi	r3, r2, #0, #2
    ed98:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
    ed9c:	2303      	movs	r3, #3
    ed9e:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
    eda2:	e77b      	b.n	ec9c <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
    eda4:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
    eda8:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
    edac:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
    edb0:	6810      	ldr	r0, [r2, #0]
    edb2:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
    edb4:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
    edb6:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
    edba:	2900      	cmp	r1, #0
    edbc:	f47f af6e 	bne.w	ec9c <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
    edc0:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
    edc4:	e76a      	b.n	ec9c <ull_conn_tx_lll_enqueue+0x5c>
    edc6:	4770      	bx	lr
    edc8:	20001e04 	.word	0x20001e04
    edcc:	0001bc28 	.word	0x0001bc28
    edd0:	0001bc80 	.word	0x0001bc80
    edd4:	0001b7c8 	.word	0x0001b7c8

0000edd8 <tx_demux>:
{
    edd8:	b510      	push	{r4, lr}
    edda:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
    eddc:	2001      	movs	r0, #1
    edde:	f7ff fcb7 	bl	e750 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
    ede2:	4620      	mov	r0, r4
    ede4:	2101      	movs	r1, #1
}
    ede6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
    edea:	f7ff bf29 	b.w	ec40 <ull_conn_tx_lll_enqueue>
    edee:	bf00      	nop

0000edf0 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
    edf0:	4901      	ldr	r1, [pc, #4]	; (edf8 <ull_conn_link_tx_release+0x8>)
    edf2:	f7f6 bfa9 	b.w	5d48 <mem_release>
    edf6:	bf00      	nop
    edf8:	20001e04 	.word	0x20001e04

0000edfc <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
    edfc:	4b01      	ldr	r3, [pc, #4]	; (ee04 <ull_conn_ack_last_idx_get+0x8>)
}
    edfe:	78d8      	ldrb	r0, [r3, #3]
    ee00:	4770      	bx	lr
    ee02:	bf00      	nop
    ee04:	20000518 	.word	0x20000518

0000ee08 <ull_conn_ack_peek>:
{
    ee08:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
    ee0a:	4b0c      	ldr	r3, [pc, #48]	; (ee3c <ull_conn_ack_peek+0x34>)
    ee0c:	f893 c002 	ldrb.w	ip, [r3, #2]
    ee10:	f893 e003 	ldrb.w	lr, [r3, #3]
    ee14:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
    ee16:	45f4      	cmp	ip, lr
    ee18:	d00d      	beq.n	ee36 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
    ee1a:	fb1c fc04 	smulbb	ip, ip, r4
    ee1e:	3304      	adds	r3, #4
    ee20:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
    ee24:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
    ee28:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
    ee2c:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
    ee2e:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
    ee30:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    ee32:	6818      	ldr	r0, [r3, #0]
}
    ee34:	bd10      	pop	{r4, pc}
		return NULL;
    ee36:	2000      	movs	r0, #0
}
    ee38:	bd10      	pop	{r4, pc}
    ee3a:	bf00      	nop
    ee3c:	20000518 	.word	0x20000518

0000ee40 <ull_conn_ack_by_last_peek>:
{
    ee40:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
    ee42:	4b0b      	ldr	r3, [pc, #44]	; (ee70 <ull_conn_ack_by_last_peek+0x30>)
    ee44:	f893 c002 	ldrb.w	ip, [r3, #2]
    ee48:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
    ee4c:	4584      	cmp	ip, r0
    ee4e:	d00d      	beq.n	ee6c <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
    ee50:	3304      	adds	r3, #4
    ee52:	fb1c fc0e 	smulbb	ip, ip, lr
    ee56:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
    ee5a:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
    ee5e:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
    ee62:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
    ee64:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    ee66:	6818      	ldr	r0, [r3, #0]
}
    ee68:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    ee6c:	2000      	movs	r0, #0
    ee6e:	e7fb      	b.n	ee68 <ull_conn_ack_by_last_peek+0x28>
    ee70:	20000518 	.word	0x20000518

0000ee74 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
    ee74:	4b09      	ldr	r3, [pc, #36]	; (ee9c <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    ee76:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    ee78:	78da      	ldrb	r2, [r3, #3]
    ee7a:	7818      	ldrb	r0, [r3, #0]
    ee7c:	f893 c001 	ldrb.w	ip, [r3, #1]
    ee80:	428a      	cmp	r2, r1
    ee82:	d009      	beq.n	ee98 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
    ee84:	1c4a      	adds	r2, r1, #1
    ee86:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    ee88:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    ee8c:	4594      	cmp	ip, r2
    ee8e:	bf08      	it	eq
    ee90:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    ee92:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    ee94:	709a      	strb	r2, [r3, #2]
	return mem;
    ee96:	4770      	bx	lr
		return NULL;
    ee98:	2000      	movs	r0, #0
}
    ee9a:	4770      	bx	lr
    ee9c:	20000518 	.word	0x20000518

0000eea0 <ull_conn_lll_ack_enqueue>:
{
    eea0:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    eea2:	4a15      	ldr	r2, [pc, #84]	; (eef8 <ull_conn_lll_ack_enqueue+0x58>)
    eea4:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
    eea8:	7854      	ldrb	r4, [r2, #1]
    eeaa:	f892 e002 	ldrb.w	lr, [r2, #2]
    eeae:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
    eeb0:	f10c 0301 	add.w	r3, ip, #1
    eeb4:	b2db      	uxtb	r3, r3
		last = 0U;
    eeb6:	429c      	cmp	r4, r3
    eeb8:	bf08      	it	eq
    eeba:	2300      	moveq	r3, #0
	if (last == first) {
    eebc:	459e      	cmp	lr, r3
    eebe:	d00a      	beq.n	eed6 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    eec0:	fb1c fc05 	smulbb	ip, ip, r5
    eec4:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
    eec8:	f82e 000c 	strh.w	r0, [lr, ip]
    eecc:	44f4      	add	ip, lr
	lll_tx->node = tx;
    eece:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
    eed2:	70d3      	strb	r3, [r2, #3]
}
    eed4:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
    eed6:	4a09      	ldr	r2, [pc, #36]	; (eefc <ull_conn_lll_ack_enqueue+0x5c>)
    eed8:	4909      	ldr	r1, [pc, #36]	; (ef00 <ull_conn_lll_ack_enqueue+0x60>)
    eeda:	480a      	ldr	r0, [pc, #40]	; (ef04 <ull_conn_lll_ack_enqueue+0x64>)
    eedc:	f240 7367 	movw	r3, #1895	; 0x767
    eee0:	f008 f845 	bl	16f6e <printk>
    eee4:	4040      	eors	r0, r0
    eee6:	f380 8811 	msr	BASEPRI, r0
    eeea:	f04f 0003 	mov.w	r0, #3
    eeee:	df02      	svc	2
	lll_tx->handle = handle;
    eef0:	2300      	movs	r3, #0
    eef2:	801b      	strh	r3, [r3, #0]
    eef4:	deff      	udf	#255	; 0xff
    eef6:	bf00      	nop
    eef8:	20000518 	.word	0x20000518
    eefc:	0001bc28 	.word	0x0001bc28
    ef00:	0001bc70 	.word	0x0001bc70
    ef04:	0001b7c8 	.word	0x0001b7c8

0000ef08 <ull_conn_tx_ack>:
{
    ef08:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
    ef0a:	7953      	ldrb	r3, [r2, #5]
{
    ef0c:	b082      	sub	sp, #8
    ef0e:	4614      	mov	r4, r2
    ef10:	4605      	mov	r5, r0
    ef12:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
    ef14:	b37b      	cbz	r3, ef76 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    ef16:	7923      	ldrb	r3, [r4, #4]
    ef18:	f003 0203 	and.w	r2, r3, #3
    ef1c:	2a03      	cmp	r2, #3
    ef1e:	d00d      	beq.n	ef3c <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
    ef20:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ef24:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
    ef26:	bf04      	itt	eq
    ef28:	f36f 0301 	bfceq	r3, #0, #2
    ef2c:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
    ef2e:	4621      	mov	r1, r4
    ef30:	4628      	mov	r0, r5
}
    ef32:	b002      	add	sp, #8
    ef34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
    ef38:	f7fa baba 	b.w	94b0 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
    ef3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ef40:	429d      	cmp	r5, r3
    ef42:	d126      	bne.n	ef92 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
    ef44:	6833      	ldr	r3, [r6, #0]
    ef46:	429c      	cmp	r4, r3
    ef48:	d03e      	beq.n	efc8 <ull_conn_tx_ack+0xc0>
		LL_ASSERT(!link->next);
    ef4a:	2b00      	cmp	r3, #0
    ef4c:	d0ef      	beq.n	ef2e <ull_conn_tx_ack+0x26>
    ef4e:	4a85      	ldr	r2, [pc, #532]	; (f164 <ull_conn_tx_ack+0x25c>)
    ef50:	4985      	ldr	r1, [pc, #532]	; (f168 <ull_conn_tx_ack+0x260>)
    ef52:	4886      	ldr	r0, [pc, #536]	; (f16c <ull_conn_tx_ack+0x264>)
    ef54:	f240 7391 	movw	r3, #1937	; 0x791
    ef58:	f008 f809 	bl	16f6e <printk>
    ef5c:	4040      	eors	r0, r0
    ef5e:	f380 8811 	msr	BASEPRI, r0
    ef62:	f04f 0003 	mov.w	r0, #3
    ef66:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
    ef68:	4621      	mov	r1, r4
    ef6a:	4628      	mov	r0, r5
}
    ef6c:	b002      	add	sp, #8
    ef6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
    ef72:	f7fa ba9d 	b.w	94b0 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
    ef76:	4a7b      	ldr	r2, [pc, #492]	; (f164 <ull_conn_tx_ack+0x25c>)
    ef78:	497d      	ldr	r1, [pc, #500]	; (f170 <ull_conn_tx_ack+0x268>)
    ef7a:	487c      	ldr	r0, [pc, #496]	; (f16c <ull_conn_tx_ack+0x264>)
    ef7c:	f240 7374 	movw	r3, #1908	; 0x774
    ef80:	f007 fff5 	bl	16f6e <printk>
    ef84:	4040      	eors	r0, r0
    ef86:	f380 8811 	msr	BASEPRI, r0
    ef8a:	f04f 0003 	mov.w	r0, #3
    ef8e:	df02      	svc	2
    ef90:	e7c1      	b.n	ef16 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    ef92:	462a      	mov	r2, r5
    ef94:	4877      	ldr	r0, [pc, #476]	; (f174 <ull_conn_tx_ack+0x26c>)
    ef96:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    ef9a:	f7f6 feed 	bl	5d78 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
    ef9e:	79e2      	ldrb	r2, [r4, #7]
    efa0:	3a02      	subs	r2, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    efa2:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
    efa4:	2a15      	cmp	r2, #21
    efa6:	d80c      	bhi.n	efc2 <ull_conn_tx_ack+0xba>
    efa8:	e8df f002 	tbb	[pc, r2]
    efac:	261f0b4e 	.word	0x261f0b4e
    efb0:	180b185a 	.word	0x180b185a
    efb4:	2d0b1f0b 	.word	0x2d0b1f0b
    efb8:	150b0b0b 	.word	0x150b0b0b
    efbc:	8e42180b 	.word	0x8e42180b
    efc0:	376c      	.short	0x376c
		if (link->next == (void *)tx) {
    efc2:	6833      	ldr	r3, [r6, #0]
    efc4:	42a3      	cmp	r3, r4
    efc6:	d1c0      	bne.n	ef4a <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
    efc8:	496b      	ldr	r1, [pc, #428]	; (f178 <ull_conn_tx_ack+0x270>)
    efca:	4620      	mov	r0, r4
}
    efcc:	b002      	add	sp, #8
    efce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
    efd2:	f7f6 beb9 	b.w	5d48 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
    efd6:	7a22      	ldrb	r2, [r4, #8]
    efd8:	2a03      	cmp	r2, #3
    efda:	d014      	beq.n	f006 <ull_conn_tx_ack+0xfe>
			conn->common.txn_lock = 0U;
    efdc:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
    efe0:	f36f 0241 	bfc	r2, #1, #1
    efe4:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
    efe8:	e7ac      	b.n	ef44 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
    efea:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
    efee:	f042 0202 	orr.w	r2, r2, #2
    eff2:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
    eff6:	e7a5      	b.n	ef44 <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
    eff8:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    effc:	f042 0203 	orr.w	r2, r2, #3
    f000:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    f004:	e79e      	b.n	ef44 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
    f006:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
    f00a:	f022 0203 	bic.w	r2, r2, #3
    f00e:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
    f012:	2200      	movs	r2, #0
    f014:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
    f018:	e794      	b.n	ef44 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
    f01a:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
    f01e:	2a00      	cmp	r2, #0
    f020:	db7f      	blt.n	f122 <ull_conn_tx_ack+0x21a>
		conn->llcp_phy.pause_tx = 0U;
    f022:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
    f026:	f36f 0200 	bfc	r2, #0, #1
    f02a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
    f02e:	e789      	b.n	ef44 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
    f030:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
    f034:	f002 0107 	and.w	r1, r2, #7
    f038:	2901      	cmp	r1, #1
    f03a:	d183      	bne.n	ef44 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
    f03c:	2102      	movs	r1, #2
    f03e:	f361 0202 	bfi	r2, r1, #0, #3
    f042:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
    f046:	e77d      	b.n	ef44 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
    f048:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
    f04a:	2a13      	cmp	r2, #19
    f04c:	bf08      	it	eq
    f04e:	2216      	moveq	r2, #22
    f050:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
    f054:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
    f058:	3a01      	subs	r2, #1
    f05a:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
    f05e:	e771      	b.n	ef44 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
    f060:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
    f064:	2a00      	cmp	r2, #0
    f066:	dac7      	bge.n	eff8 <ull_conn_tx_ack+0xf0>
			conn->llcp_enc.pause_rx = 0U;
    f068:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
    f06c:	f022 0203 	bic.w	r2, r2, #3
    f070:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
    f074:	2200      	movs	r2, #0
    f076:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
    f07a:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
    f07e:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
    f082:	e75f      	b.n	ef44 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f084:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
    f088:	2102      	movs	r1, #2
    f08a:	f361 0201 	bfi	r2, r1, #0, #2
    f08e:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
    f092:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
    f096:	2a00      	cmp	r2, #0
    f098:	dac3      	bge.n	f022 <ull_conn_tx_ack+0x11a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
    f09a:	4a38      	ldr	r2, [pc, #224]	; (f17c <ull_conn_tx_ack+0x274>)
    f09c:	e892 0003 	ldmia.w	r2, {r0, r1}
    f0a0:	aa02      	add	r2, sp, #8
    f0a2:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
    f0a6:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
    f0aa:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    f0ae:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
    f0b2:	f002 0207 	and.w	r2, r2, #7
    f0b6:	a802      	add	r0, sp, #8
    f0b8:	4402      	add	r2, r0
    f0ba:	f812 2c08 	ldrb.w	r2, [r2, #-8]
    f0be:	f362 1106 	bfi	r1, r2, #4, #3
    f0c2:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
    f0c6:	e7ac      	b.n	f022 <ull_conn_tx_ack+0x11a>
		conn->common.txn_lock = 0U;
    f0c8:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
    f0cc:	f36f 0241 	bfc	r2, #1, #1
    f0d0:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
    f0d4:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
    f0d8:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
    f0dc:	4282      	cmp	r2, r0
    f0de:	f43f af31 	beq.w	ef44 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
    f0e2:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
    f0e6:	f001 0207 	and.w	r2, r1, #7
    f0ea:	2a03      	cmp	r2, #3
    f0ec:	d005      	beq.n	f0fa <ull_conn_tx_ack+0x1f2>
    f0ee:	3203      	adds	r2, #3
    f0f0:	f002 0207 	and.w	r2, r2, #7
    f0f4:	2a01      	cmp	r2, #1
    f0f6:	f63f af64 	bhi.w	efc2 <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
    f0fa:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
    f0fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
    f102:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
    f106:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
    f10a:	f001 0207 	and.w	r2, r1, #7
    f10e:	2a05      	cmp	r2, #5
    f110:	d022      	beq.n	f158 <ull_conn_tx_ack+0x250>
				if (!conn->llcp_length.cache.tx_octets) {
    f112:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
    f116:	b98a      	cbnz	r2, f13c <ull_conn_tx_ack+0x234>
					conn->llcp_length.ack =
    f118:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
    f11c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
    f120:	e710      	b.n	ef44 <ull_conn_tx_ack+0x3c>
				conn->common.txn_lock = 0U;
    f122:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
    f126:	4a15      	ldr	r2, [pc, #84]	; (f17c <ull_conn_tx_ack+0x274>)
				conn->common.txn_lock = 0U;
    f128:	f36f 0141 	bfc	r1, #1, #1
    f12c:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
    f130:	e892 0003 	ldmia.w	r2, {r0, r1}
    f134:	aa02      	add	r2, sp, #8
    f136:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
    f13a:	e7b4      	b.n	f0a6 <ull_conn_tx_ack+0x19e>
				conn->llcp_length.tx_octets =
    f13c:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
    f140:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    f142:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
    f146:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
    f14a:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    f14e:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
    f152:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
    f156:	e6f5      	b.n	ef44 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
    f158:	2204      	movs	r2, #4
    f15a:	f362 0102 	bfi	r1, r2, #0, #3
    f15e:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
    f162:	e6ef      	b.n	ef44 <ull_conn_tx_ack+0x3c>
    f164:	0001bc28 	.word	0x0001bc28
    f168:	0001be04 	.word	0x0001be04
    f16c:	0001b7c8 	.word	0x0001b7c8
    f170:	0001bdf8 	.word	0x0001bdf8
    f174:	20000ed0 	.word	0x20000ed0
    f178:	20001d50 	.word	0x20001d50
    f17c:	0001be10 	.word	0x0001be10

0000f180 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
    f180:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    f184:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
    f188:	f3c2 1202 	ubfx	r2, r2, #4, #3
    f18c:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    f18e:	bf14      	ite	ne
    f190:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
    f192:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
    f194:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
    f198:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
    f19a:	bf14      	ite	ne
    f19c:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
    f19e:	3b0b      	subeq	r3, #11
    f1a0:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
    f1a2:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
    f1a4:	bf44      	itt	mi
    f1a6:	3b04      	submi	r3, #4
    f1a8:	b29b      	uxthmi	r3, r3
}
    f1aa:	4298      	cmp	r0, r3
    f1ac:	bf28      	it	cs
    f1ae:	4618      	movcs	r0, r3
    f1b0:	4770      	bx	lr
    f1b2:	bf00      	nop

0000f1b4 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
    f1b4:	b510      	push	{r4, lr}
    f1b6:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    f1b8:	b930      	cbnz	r0, f1c8 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
    f1ba:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    f1be:	f36f 0382 	bfc	r3, #2, #1
    f1c2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
    f1c6:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    f1c8:	4a09      	ldr	r2, [pc, #36]	; (f1f0 <ticker_update_latency_cancel_op_cb+0x3c>)
    f1ca:	490a      	ldr	r1, [pc, #40]	; (f1f4 <ticker_update_latency_cancel_op_cb+0x40>)
    f1cc:	480a      	ldr	r0, [pc, #40]	; (f1f8 <ticker_update_latency_cancel_op_cb+0x44>)
    f1ce:	f240 23af 	movw	r3, #687	; 0x2af
    f1d2:	f007 fecc 	bl	16f6e <printk>
    f1d6:	4040      	eors	r0, r0
    f1d8:	f380 8811 	msr	BASEPRI, r0
    f1dc:	f04f 0003 	mov.w	r0, #3
    f1e0:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
    f1e2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    f1e6:	f36f 0382 	bfc	r3, #2, #1
    f1ea:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
    f1ee:	bd10      	pop	{r4, pc}
    f1f0:	0001be1c 	.word	0x0001be1c
    f1f4:	0001be64 	.word	0x0001be64
    f1f8:	0001b7c8 	.word	0x0001b7c8

0000f1fc <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f1fc:	b900      	cbnz	r0, f200 <ticker_op_cb+0x4>
    f1fe:	4770      	bx	lr
{
    f200:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    f202:	4a07      	ldr	r2, [pc, #28]	; (f220 <ticker_op_cb+0x24>)
    f204:	4907      	ldr	r1, [pc, #28]	; (f224 <ticker_op_cb+0x28>)
    f206:	4808      	ldr	r0, [pc, #32]	; (f228 <ticker_op_cb+0x2c>)
    f208:	f240 23a7 	movw	r3, #679	; 0x2a7
    f20c:	f007 feaf 	bl	16f6e <printk>
    f210:	4040      	eors	r0, r0
    f212:	f380 8811 	msr	BASEPRI, r0
    f216:	f04f 0003 	mov.w	r0, #3
    f21a:	df02      	svc	2
}
    f21c:	bd08      	pop	{r3, pc}
    f21e:	bf00      	nop
    f220:	0001be1c 	.word	0x0001be1c
    f224:	0001bc88 	.word	0x0001bc88
    f228:	0001b7c8 	.word	0x0001b7c8

0000f22c <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    f22c:	2801      	cmp	r0, #1
    f22e:	d000      	beq.n	f232 <ticker_op_stop_adv_cb+0x6>
    f230:	4770      	bx	lr
{
    f232:	b510      	push	{r4, lr}
    f234:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    f236:	f7fa f9ad 	bl	9594 <ull_disable_mark_get>
    f23a:	4284      	cmp	r4, r0
    f23c:	d00c      	beq.n	f258 <ticker_op_stop_adv_cb+0x2c>
    f23e:	4a07      	ldr	r2, [pc, #28]	; (f25c <ticker_op_stop_adv_cb+0x30>)
    f240:	4907      	ldr	r1, [pc, #28]	; (f260 <ticker_op_stop_adv_cb+0x34>)
    f242:	4808      	ldr	r0, [pc, #32]	; (f264 <ticker_op_stop_adv_cb+0x38>)
    f244:	f240 239f 	movw	r3, #671	; 0x29f
    f248:	f007 fe91 	bl	16f6e <printk>
    f24c:	4040      	eors	r0, r0
    f24e:	f380 8811 	msr	BASEPRI, r0
    f252:	f04f 0003 	mov.w	r0, #3
    f256:	df02      	svc	2
}
    f258:	bd10      	pop	{r4, pc}
    f25a:	bf00      	nop
    f25c:	0001be1c 	.word	0x0001be1c
    f260:	0001be78 	.word	0x0001be78
    f264:	0001b7c8 	.word	0x0001b7c8

0000f268 <ull_periph_ticker_cb>:
{
    f268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f26c:	9c07      	ldr	r4, [sp, #28]
    f26e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
    f272:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
    f274:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
    f276:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f27a:	4299      	cmp	r1, r3
    f27c:	d026      	beq.n	f2cc <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
    f27e:	4606      	mov	r6, r0
    f280:	4617      	mov	r7, r2
    f282:	4601      	mov	r1, r0
    f284:	462a      	mov	r2, r5
    f286:	4620      	mov	r0, r4
    f288:	f7fd ffda 	bl	d240 <ull_conn_llcp>
		if (ret) {
    f28c:	b9f0      	cbnz	r0, f2cc <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
    f28e:	7823      	ldrb	r3, [r4, #0]
    f290:	3301      	adds	r3, #1
    f292:	b2db      	uxtb	r3, r3
    f294:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
    f296:	b34b      	cbz	r3, f2ec <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
    f298:	491b      	ldr	r1, [pc, #108]	; (f308 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
    f29a:	4b1c      	ldr	r3, [pc, #112]	; (f30c <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
    f29c:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
    f29e:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f2a2:	2200      	movs	r2, #0
	p.param = &conn->lll;
    f2a4:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
    f2a6:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
    f2aa:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
    f2ae:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    f2b0:	2001      	movs	r0, #1
    f2b2:	4611      	mov	r1, r2
    f2b4:	f7f6 fe06 	bl	5ec4 <mayfly_enqueue>
	LL_ASSERT(!err);
    f2b8:	b950      	cbnz	r0, f2d0 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
    f2ba:	20ff      	movs	r0, #255	; 0xff
    f2bc:	f7ff fa48 	bl	e750 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    f2c0:	4620      	mov	r0, r4
    f2c2:	21ff      	movs	r1, #255	; 0xff
}
    f2c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
    f2c8:	f7ff bcba 	b.w	ec40 <ull_conn_tx_lll_enqueue>
}
    f2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
    f2d0:	4a0f      	ldr	r2, [pc, #60]	; (f310 <ull_periph_ticker_cb+0xa8>)
    f2d2:	4910      	ldr	r1, [pc, #64]	; (f314 <ull_periph_ticker_cb+0xac>)
    f2d4:	4810      	ldr	r0, [pc, #64]	; (f318 <ull_periph_ticker_cb+0xb0>)
    f2d6:	f240 232a 	movw	r3, #554	; 0x22a
    f2da:	f007 fe48 	bl	16f6e <printk>
    f2de:	4040      	eors	r0, r0
    f2e0:	f380 8811 	msr	BASEPRI, r0
    f2e4:	f04f 0003 	mov.w	r0, #3
    f2e8:	df02      	svc	2
    f2ea:	e7e6      	b.n	f2ba <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
    f2ec:	4a08      	ldr	r2, [pc, #32]	; (f310 <ull_periph_ticker_cb+0xa8>)
    f2ee:	490b      	ldr	r1, [pc, #44]	; (f31c <ull_periph_ticker_cb+0xb4>)
    f2f0:	4809      	ldr	r0, [pc, #36]	; (f318 <ull_periph_ticker_cb+0xb0>)
    f2f2:	f240 231d 	movw	r3, #541	; 0x21d
    f2f6:	f007 fe3a 	bl	16f6e <printk>
    f2fa:	4040      	eors	r0, r0
    f2fc:	f380 8811 	msr	BASEPRI, r0
    f300:	f04f 0003 	mov.w	r0, #3
    f304:	df02      	svc	2
    f306:	e7c7      	b.n	f298 <ull_periph_ticker_cb+0x30>
    f308:	20001e48 	.word	0x20001e48
    f30c:	200005c0 	.word	0x200005c0
    f310:	0001be1c 	.word	0x0001be1c
    f314:	0001b968 	.word	0x0001b968
    f318:	0001b7c8 	.word	0x0001b7c8
    f31c:	0001bbe4 	.word	0x0001bbe4

0000f320 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
    f320:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    f322:	b123      	cbz	r3, f32e <ull_periph_latency_cancel+0xe>
    f324:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
    f328:	f012 0304 	ands.w	r3, r2, #4
    f32c:	d000      	beq.n	f330 <ull_periph_latency_cancel+0x10>
    f32e:	4770      	bx	lr
{
    f330:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
    f332:	f042 0204 	orr.w	r2, r2, #4
{
    f336:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
    f338:	4c11      	ldr	r4, [pc, #68]	; (f380 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
    f33a:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
    f33e:	3103      	adds	r1, #3
    f340:	2201      	movs	r2, #1
    f342:	e9cd 3202 	strd	r3, r2, [sp, #8]
    f346:	e9cd 3404 	strd	r3, r4, [sp, #16]
    f34a:	e9cd 3300 	strd	r3, r3, [sp]
    f34e:	9006      	str	r0, [sp, #24]
    f350:	b2ca      	uxtb	r2, r1
    f352:	4618      	mov	r0, r3
    f354:	2103      	movs	r1, #3
    f356:	f7f7 ff5d 	bl	7214 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f35a:	f030 0302 	bics.w	r3, r0, #2
    f35e:	d00c      	beq.n	f37a <ull_periph_latency_cancel+0x5a>
    f360:	4a08      	ldr	r2, [pc, #32]	; (f384 <ull_periph_latency_cancel+0x64>)
    f362:	4909      	ldr	r1, [pc, #36]	; (f388 <ull_periph_latency_cancel+0x68>)
    f364:	4809      	ldr	r0, [pc, #36]	; (f38c <ull_periph_latency_cancel+0x6c>)
    f366:	f240 13e3 	movw	r3, #483	; 0x1e3
    f36a:	f007 fe00 	bl	16f6e <printk>
    f36e:	4040      	eors	r0, r0
    f370:	f380 8811 	msr	BASEPRI, r0
    f374:	f04f 0003 	mov.w	r0, #3
    f378:	df02      	svc	2
}
    f37a:	b008      	add	sp, #32
    f37c:	bd10      	pop	{r4, pc}
    f37e:	bf00      	nop
    f380:	0000f1b5 	.word	0x0000f1b5
    f384:	0001be1c 	.word	0x0001be1c
    f388:	0001bd08 	.word	0x0001bd08
    f38c:	0001b7c8 	.word	0x0001b7c8

0000f390 <ll_start_enc_req_send>:
{
    f390:	b570      	push	{r4, r5, r6, lr}
    f392:	460e      	mov	r6, r1
    f394:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
    f396:	f7fc f84b 	bl	b430 <ll_connected_get>
	if (!conn) {
    f39a:	2800      	cmp	r0, #0
    f39c:	d040      	beq.n	f420 <ll_start_enc_req_send+0x90>
	if (error_code) {
    f39e:	4604      	mov	r4, r0
    f3a0:	b95e      	cbnz	r6, f3ba <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
    f3a2:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
    f3a6:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
    f3aa:	429a      	cmp	r2, r3
    f3ac:	d003      	beq.n	f3b6 <ll_start_enc_req_send+0x26>
    f3ae:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
    f3b2:	2b03      	cmp	r3, #3
    f3b4:	d026      	beq.n	f404 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
    f3b6:	200c      	movs	r0, #12
}
    f3b8:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
    f3ba:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
    f3be:	f010 0004 	ands.w	r0, r0, #4
    f3c2:	d112      	bne.n	f3ea <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
    f3c4:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    f3c8:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    f3cc:	429a      	cmp	r2, r3
    f3ce:	d0f2      	beq.n	f3b6 <ll_start_enc_req_send+0x26>
    f3d0:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    f3d4:	2b03      	cmp	r3, #3
    f3d6:	d1ee      	bne.n	f3b6 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    f3d8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
    f3dc:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    f3e0:	f360 0301 	bfi	r3, r0, #0, #2
    f3e4:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
    f3e8:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
    f3ea:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
    f3ee:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
    f3f2:	4293      	cmp	r3, r2
    f3f4:	d1df      	bne.n	f3b6 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
    f3f6:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
    f3f8:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
    f3fc:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
    f400:	2000      	movs	r0, #0
}
    f402:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
    f404:	2210      	movs	r2, #16
    f406:	4629      	mov	r1, r5
    f408:	f200 1071 	addw	r0, r0, #369	; 0x171
    f40c:	f008 fb76 	bl	17afc <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    f410:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
    f414:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    f418:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
    f41c:	4630      	mov	r0, r6
}
    f41e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f420:	2002      	movs	r0, #2
}
    f422:	bd70      	pop	{r4, r5, r6, pc}

0000f424 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
    f424:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    f426:	fb02 1c01 	mla	ip, r2, r1, r1
    f42a:	7802      	ldrb	r2, [r0, #0]
    f42c:	491c      	ldr	r1, [pc, #112]	; (f4a0 <lll_chan_sel_1+0x7c>)
{
    f42e:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    f432:	4494      	add	ip, r2
    f434:	fb81 210c 	smull	r2, r1, r1, ip
    f438:	4461      	add	r1, ip
    f43a:	1149      	asrs	r1, r1, #5
    f43c:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    f440:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
    f444:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    f446:	ebac 0101 	sub.w	r1, ip, r1
    f44a:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
    f44c:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    f44e:	08c4      	lsrs	r4, r0, #3
    f450:	f001 0107 	and.w	r1, r1, #7
    f454:	f813 c004 	ldrb.w	ip, [r3, r4]
    f458:	fa4c f101 	asr.w	r1, ip, r1
    f45c:	f011 0101 	ands.w	r1, r1, #1
    f460:	d11d      	bne.n	f49e <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
    f462:	fbb0 f2f5 	udiv	r2, r0, r5
    f466:	fb05 0212 	mls	r2, r5, r2, r0
    f46a:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
    f46c:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
    f470:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
    f472:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
    f474:	f100 0c08 	add.w	ip, r0, #8
    f478:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
    f47c:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
    f480:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
    f484:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
    f488:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
    f48c:	d002      	beq.n	f494 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
    f48e:	b132      	cbz	r2, f49e <lll_chan_sel_1+0x7a>
				chan_index--;
    f490:	3a01      	subs	r2, #1
    f492:	b2d2      	uxtb	r2, r2
			chan_next++;
    f494:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
    f496:	4584      	cmp	ip, r0
    f498:	d1f2      	bne.n	f480 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
    f49a:	45a6      	cmp	lr, r4
    f49c:	d1ea      	bne.n	f474 <lll_chan_sel_1+0x50>
}
    f49e:	bd30      	pop	{r4, r5, pc}
    f4a0:	dd67c8a7 	.word	0xdd67c8a7

0000f4a4 <lll_chan_id>:
	return aa_ms ^ aa_ls;
    f4a4:	8842      	ldrh	r2, [r0, #2]
    f4a6:	8800      	ldrh	r0, [r0, #0]
}
    f4a8:	4050      	eors	r0, r2
    f4aa:	4770      	bx	lr

0000f4ac <lll_chan_sel_2>:
{
    f4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
    f4ae:	4d2f      	ldr	r5, [pc, #188]	; (f56c <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    f4b0:	4c2f      	ldr	r4, [pc, #188]	; (f570 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
    f4b2:	4048      	eors	r0, r1
    f4b4:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
    f4b8:	0a07      	lsrs	r7, r0, #8
    f4ba:	b2c0      	uxtb	r0, r0
    f4bc:	eb07 2787 	add.w	r7, r7, r7, lsl #10
    f4c0:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
    f4c4:	ea05 0647 	and.w	r6, r5, r7, lsl #1
    f4c8:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    f4cc:	ea04 1747 	and.w	r7, r4, r7, lsl #5
    f4d0:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
    f4d4:	433e      	orrs	r6, r7
    f4d6:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    f4da:	eb00 2700 	add.w	r7, r0, r0, lsl #8
    f4de:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
    f4e2:	eb06 260e 	add.w	r6, r6, lr, lsl #8
    f4e6:	eb00 2007 	add.w	r0, r0, r7, lsl #8
    f4ea:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f4ec:	f3c0 4007 	ubfx	r0, r0, #16, #8
    f4f0:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
    f4f4:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
    f4f8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
    f4fc:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
    f4fe:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
    f502:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
    f504:	d1d8      	bne.n	f4b8 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
    f506:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    f508:	481a      	ldr	r0, [pc, #104]	; (f574 <lll_chan_sel_2+0xc8>)
    f50a:	fba0 4001 	umull	r4, r0, r0, r1
    f50e:	1a0c      	subs	r4, r1, r0
    f510:	eb00 0054 	add.w	r0, r0, r4, lsr #1
    f514:	0940      	lsrs	r0, r0, #5
    f516:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    f51a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    f51e:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    f520:	f3c0 04c4 	ubfx	r4, r0, #3, #5
    f524:	f000 0507 	and.w	r5, r0, #7
    f528:	5d14      	ldrb	r4, [r2, r4]
    f52a:	412c      	asrs	r4, r5
    f52c:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
    f52e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    f530:	d41a      	bmi.n	f568 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
    f532:	fb01 f303 	mul.w	r3, r1, r3
    f536:	1e56      	subs	r6, r2, #1
    f538:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
    f53c:	3204      	adds	r2, #4
	chan_next = 0U;
    f53e:	4660      	mov	r0, ip
		bite = *chan_map;
    f540:	f100 0508 	add.w	r5, r0, #8
    f544:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
    f548:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
    f54a:	f011 0f01 	tst.w	r1, #1
			chan_next++;
    f54e:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
    f552:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
    f556:	d002      	beq.n	f55e <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
    f558:	b133      	cbz	r3, f568 <lll_chan_sel_2+0xbc>
				chan_index--;
    f55a:	3b01      	subs	r3, #1
    f55c:	b2db      	uxtb	r3, r3
			chan_next++;
    f55e:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
    f560:	42a8      	cmp	r0, r5
    f562:	d1f2      	bne.n	f54a <lll_chan_sel_2+0x9e>
	while (byte_count--) {
    f564:	42b2      	cmp	r2, r6
    f566:	d1eb      	bne.n	f540 <lll_chan_sel_2+0x94>
}
    f568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f56a:	bf00      	nop
    f56c:	00022110 	.word	0x00022110
    f570:	00088440 	.word	0x00088440
    f574:	bacf914d 	.word	0xbacf914d

0000f578 <rl_update>:
		}
	}
}

static void rl_update(void)
{
    f578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f57c:	4d18      	ldr	r5, [pc, #96]	; (f5e0 <rl_update+0x68>)
    f57e:	4e19      	ldr	r6, [pc, #100]	; (f5e4 <rl_update+0x6c>)
    f580:	2400      	movs	r4, #0
    f582:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
    f586:	1eaf      	subs	r7, r5, #2
    f588:	f04f 0801 	mov.w	r8, #1
    f58c:	e006      	b.n	f59c <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f58e:	3401      	adds	r4, #1
    f590:	2c08      	cmp	r4, #8
    f592:	f105 0506 	add.w	r5, r5, #6
    f596:	f106 0628 	add.w	r6, r6, #40	; 0x28
    f59a:	d01e      	beq.n	f5da <rl_update+0x62>
		if (rl[i].taken) {
    f59c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    f5a0:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
    f5a4:	07da      	lsls	r2, r3, #31
    f5a6:	d5f2      	bpl.n	f58e <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
    f5a8:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f5aa:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    f5ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
    f5b0:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f5b4:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
    f5b6:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f5ba:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f5bc:	4631      	mov	r1, r6
    f5be:	4628      	mov	r0, r5
    f5c0:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f5c2:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
    f5c4:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f5c8:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f5ca:	f008 fa97 	bl	17afc <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f5ce:	2c08      	cmp	r4, #8
    f5d0:	f105 0506 	add.w	r5, r5, #6
    f5d4:	f106 0628 	add.w	r6, r6, #40	; 0x28
    f5d8:	d1e0      	bne.n	f59c <rl_update+0x24>
}
    f5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f5de:	bf00      	nop
    f5e0:	200020c6 	.word	0x200020c6
    f5e4:	20001f85 	.word	0x20001f85

0000f5e8 <fal_update>:
{
    f5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5ec:	4e20      	ldr	r6, [pc, #128]	; (f670 <__kernel_ram_size+0x68>)
    f5ee:	4d21      	ldr	r5, [pc, #132]	; (f674 <__kernel_ram_size+0x6c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    f5f0:	f8df 8084 	ldr.w	r8, [pc, #132]	; f678 <__kernel_ram_size+0x70>
    f5f4:	f8df 9084 	ldr.w	r9, [pc, #132]	; f67c <__kernel_ram_size+0x74>
{
    f5f8:	2400      	movs	r4, #0
    f5fa:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
    f5fe:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
    f600:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
    f604:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
    f608:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f60c:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
    f60e:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f612:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
    f614:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f618:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
    f61c:	d021      	beq.n	f662 <__kernel_ram_size+0x5a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    f61e:	f898 3000 	ldrb.w	r3, [r8]
    f622:	b163      	cbz	r3, f63e <__kernel_ram_size+0x36>
		j = fal[i].rl_idx;
    f624:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    f628:	2b07      	cmp	r3, #7
    f62a:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    f62e:	d806      	bhi.n	f63e <__kernel_ram_size+0x36>
    f630:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
    f634:	f013 0f04 	tst.w	r3, #4
    f638:	d001      	beq.n	f63e <__kernel_ram_size+0x36>
    f63a:	06db      	lsls	r3, r3, #27
    f63c:	d511      	bpl.n	f662 <__kernel_ram_size+0x5a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
    f63e:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
    f642:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
    f646:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
    f64a:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f64e:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
    f652:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    f656:	40a3      	lsls	r3, r4
    f658:	ea4e 0303 	orr.w	r3, lr, r3
    f65c:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    f65e:	f008 fa4d 	bl	17afc <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
    f662:	3401      	adds	r4, #1
    f664:	2c08      	cmp	r4, #8
    f666:	f105 0508 	add.w	r5, r5, #8
    f66a:	d1c9      	bne.n	f600 <fal_update+0x18>
}
    f66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f670:	20001e9a 	.word	0x20001e9a
    f674:	20001e5a 	.word	0x20001e5a
    f678:	20002791 	.word	0x20002791
    f67c:	20001f84 	.word	0x20001f84

0000f680 <ll_fal_size_get>:
}
    f680:	2008      	movs	r0, #8
    f682:	4770      	bx	lr

0000f684 <ll_fal_clear>:
{
    f684:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
    f686:	2000      	movs	r0, #0
    f688:	f7fa ffb8 	bl	a5fc <ull_adv_filter_pol_get>
    f68c:	b9c8      	cbnz	r0, f6c2 <ll_fal_clear+0x3e>
    f68e:	4a0e      	ldr	r2, [pc, #56]	; (f6c8 <ll_fal_clear+0x44>)
			rl[j].fal = 0U;
    f690:	4c0e      	ldr	r4, [pc, #56]	; (f6cc <ll_fal_clear+0x48>)
		uint8_t j = fal[i].rl_idx;
    f692:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    f696:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
    f698:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
    f69a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
    f69e:	d805      	bhi.n	f6ac <ll_fal_clear+0x28>
			rl[j].fal = 0U;
    f6a0:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
    f6a4:	f36f 1345 	bfc	r3, #5, #1
    f6a8:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
    f6ac:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
    f6b0:	f36f 0300 	bfc	r3, #0, #1
    f6b4:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
    f6b8:	3001      	adds	r0, #1
    f6ba:	2808      	cmp	r0, #8
    f6bc:	d1e9      	bne.n	f692 <ll_fal_clear+0xe>
	return 0;
    f6be:	2000      	movs	r0, #0
}
    f6c0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f6c2:	200c      	movs	r0, #12
}
    f6c4:	bd10      	pop	{r4, pc}
    f6c6:	bf00      	nop
    f6c8:	20001e58 	.word	0x20001e58
    f6cc:	20001f84 	.word	0x20001f84

0000f6d0 <ll_fal_add>:
{
    f6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6d4:	4681      	mov	r9, r0
    f6d6:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
    f6d8:	2000      	movs	r0, #0
    f6da:	f7fa ff8f 	bl	a5fc <ull_adv_filter_pol_get>
    f6de:	2800      	cmp	r0, #0
    f6e0:	d16d      	bne.n	f7be <ll_fal_add+0xee>
	if (addr->type == ADDR_TYPE_ANON) {
    f6e2:	f899 a000 	ldrb.w	sl, [r9]
    f6e6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    f6ea:	4605      	mov	r5, r0
    f6ec:	d064      	beq.n	f7b8 <ll_fal_add+0xe8>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
    f6ee:	4e42      	ldr	r6, [pc, #264]	; (f7f8 <ll_fal_add+0x128>)
    f6f0:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
    f6f4:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
    f6f8:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
    f6fc:	4604      	mov	r4, r0
    f6fe:	1eb7      	subs	r7, r6, #2
    f700:	e009      	b.n	f716 <ll_fal_add+0x46>
		} else if (free_idx && !fal[i].taken &&
    f702:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    f706:	d101      	bne.n	f70c <ll_fal_add+0x3c>
			*free_idx = i;
    f708:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < FAL_SIZE; i++) {
    f70c:	3401      	adds	r4, #1
    f70e:	2c08      	cmp	r4, #8
    f710:	f106 0608 	add.w	r6, r6, #8
    f714:	d017      	beq.n	f746 <ll_fal_add+0x76>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
    f716:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
    f71a:	07d8      	lsls	r0, r3, #31
    f71c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f720:	d5ef      	bpl.n	f702 <ll_fal_add+0x32>
    f722:	4552      	cmp	r2, sl
    f724:	d1f2      	bne.n	f70c <ll_fal_add+0x3c>
    f726:	2206      	movs	r2, #6
    f728:	4630      	mov	r0, r6
    f72a:	4659      	mov	r1, fp
    f72c:	f008 f9d5 	bl	17ada <memcmp>
    f730:	2800      	cmp	r0, #0
    f732:	d041      	beq.n	f7b8 <ll_fal_add+0xe8>
		} else if (free_idx && !fal[i].taken &&
    f734:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
    f738:	07d9      	lsls	r1, r3, #31
    f73a:	d5e2      	bpl.n	f702 <ll_fal_add+0x32>
	for (i = 0; i < FAL_SIZE; i++) {
    f73c:	3401      	adds	r4, #1
    f73e:	2c08      	cmp	r4, #8
    f740:	f106 0608 	add.w	r6, r6, #8
    f744:	d1e7      	bne.n	f716 <ll_fal_add+0x46>
	} else if (j >= ARRAY_SIZE(fal)) {
    f746:	f1b8 0f07 	cmp.w	r8, #7
    f74a:	d850      	bhi.n	f7ee <ll_fal_add+0x11e>
	fal[i].id_addr_type = id_addr->type & 0x1;
    f74c:	f899 2000 	ldrb.w	r2, [r9]
    f750:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
    f754:	4e29      	ldr	r6, [pc, #164]	; (f7fc <ll_fal_add+0x12c>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
    f756:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
    f758:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
    f75c:	fb14 0008 	smlabb	r0, r4, r8, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
    f760:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
    f764:	4438      	add	r0, r7
    f766:	2206      	movs	r2, #6
    f768:	4659      	mov	r1, fp
    f76a:	f008 f9c7 	bl	17afc <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    f76e:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f772:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f776:	f003 0301 	and.w	r3, r3, #1
    f77a:	eb05 0485 	add.w	r4, r5, r5, lsl #2
    f77e:	fa5f fa85 	uxtb.w	sl, r5
    f782:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
    f786:	f3c2 1180 	ubfx	r1, r2, #6, #1
    f78a:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f78c:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f790:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    f794:	d501      	bpl.n	f79a <ll_fal_add+0xca>
    f796:	4299      	cmp	r1, r3
    f798:	d015      	beq.n	f7c6 <ll_fal_add+0xf6>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f79a:	2d08      	cmp	r5, #8
    f79c:	f106 0628 	add.w	r6, r6, #40	; 0x28
    f7a0:	d1eb      	bne.n	f77a <ll_fal_add+0xaa>
		fal[i].rl_idx = FILTER_IDX_NONE;
    f7a2:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
    f7a6:	22ff      	movs	r2, #255	; 0xff
    f7a8:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
    f7aa:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
    f7ae:	f043 0301 	orr.w	r3, r3, #1
    f7b2:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
    f7b6:	2000      	movs	r0, #0
}
    f7b8:	b003      	add	sp, #12
    f7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f7be:	200c      	movs	r0, #12
}
    f7c0:	b003      	add	sp, #12
    f7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f7c6:	4630      	mov	r0, r6
    f7c8:	2206      	movs	r2, #6
    f7ca:	4659      	mov	r1, fp
    f7cc:	9301      	str	r3, [sp, #4]
    f7ce:	f008 f984 	bl	17ada <memcmp>
    f7d2:	9b01      	ldr	r3, [sp, #4]
    f7d4:	2800      	cmp	r0, #0
    f7d6:	d1e0      	bne.n	f79a <ll_fal_add+0xca>
		rl[j].fal = 1U;
    f7d8:	f819 3004 	ldrb.w	r3, [r9, r4]
    f7dc:	f043 0320 	orr.w	r3, r3, #32
    f7e0:	f809 3004 	strb.w	r3, [r9, r4]
		fal[i].rl_idx = j;
    f7e4:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
    f7e8:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
    f7ec:	e7dd      	b.n	f7aa <ll_fal_add+0xda>
    f7ee:	2007      	movs	r0, #7
}
    f7f0:	b003      	add	sp, #12
    f7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7f6:	bf00      	nop
    f7f8:	20001e5a 	.word	0x20001e5a
    f7fc:	20001f85 	.word	0x20001f85

0000f800 <ll_fal_remove>:
{
    f800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f804:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
    f806:	2000      	movs	r0, #0
    f808:	f7fa fef8 	bl	a5fc <ull_adv_filter_pol_get>
    f80c:	bbb8      	cbnz	r0, f87e <ll_fal_remove+0x7e>
	if (addr->type == ADDR_TYPE_ANON) {
    f80e:	783e      	ldrb	r6, [r7, #0]
    f810:	2eff      	cmp	r6, #255	; 0xff
    f812:	4604      	mov	r4, r0
    f814:	d013      	beq.n	f83e <ll_fal_remove+0x3e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
    f816:	4d1b      	ldr	r5, [pc, #108]	; (f884 <ll_fal_remove+0x84>)
    f818:	3701      	adds	r7, #1
	for (i = 0; i < FAL_SIZE; i++) {
    f81a:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
    f81e:	f006 0601 	and.w	r6, r6, #1
    f822:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
    f826:	f3c3 0240 	ubfx	r2, r3, #1, #1
    f82a:	07db      	lsls	r3, r3, #31
    f82c:	d501      	bpl.n	f832 <ll_fal_remove+0x32>
    f82e:	42b2      	cmp	r2, r6
    f830:	d007      	beq.n	f842 <ll_fal_remove+0x42>
	for (i = 0; i < FAL_SIZE; i++) {
    f832:	3401      	adds	r4, #1
    f834:	2c08      	cmp	r4, #8
    f836:	f105 0508 	add.w	r5, r5, #8
    f83a:	d1f2      	bne.n	f822 <ll_fal_remove+0x22>
    f83c:	2002      	movs	r0, #2
}
    f83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
    f842:	2206      	movs	r2, #6
    f844:	4628      	mov	r0, r5
    f846:	4639      	mov	r1, r7
    f848:	f008 f947 	bl	17ada <memcmp>
    f84c:	2800      	cmp	r0, #0
    f84e:	d1f0      	bne.n	f832 <ll_fal_remove+0x32>
		uint8_t j = fal[i].rl_idx;
    f850:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
    f854:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
    f856:	2b07      	cmp	r3, #7
    f858:	d808      	bhi.n	f86c <ll_fal_remove+0x6c>
			rl[j].fal = 0U;
    f85a:	4a0b      	ldr	r2, [pc, #44]	; (f888 <ll_fal_remove+0x88>)
    f85c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    f860:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    f864:	f360 1145 	bfi	r1, r0, #5, #1
    f868:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
    f86c:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
    f870:	f36f 0300 	bfc	r3, #0, #1
    f874:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
    f878:	2000      	movs	r0, #0
}
    f87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f87e:	200c      	movs	r0, #12
}
    f880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f884:	20001e5a 	.word	0x20001e5a
    f888:	20001f84 	.word	0x20001f84

0000f88c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    f88c:	2807      	cmp	r0, #7
{
    f88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f892:	4604      	mov	r4, r0
    f894:	460e      	mov	r6, r1
    f896:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    f898:	d817      	bhi.n	f8ca <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
    f89a:	4d1a      	ldr	r5, [pc, #104]	; (f904 <ll_rl_id_addr_get+0x78>)
    f89c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    f8a0:	00a7      	lsls	r7, r4, #2
    f8a2:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
    f8a6:	07db      	lsls	r3, r3, #31
    f8a8:	d51d      	bpl.n	f8e6 <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
    f8aa:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    f8ac:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
    f8ae:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
    f8b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    f8b6:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
    f8ba:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    f8bc:	4640      	mov	r0, r8
    f8be:	2206      	movs	r2, #6
}
    f8c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    f8c4:	3101      	adds	r1, #1
    f8c6:	f008 b919 	b.w	17afc <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    f8ca:	4a0f      	ldr	r2, [pc, #60]	; (f908 <ll_rl_id_addr_get+0x7c>)
    f8cc:	490f      	ldr	r1, [pc, #60]	; (f90c <ll_rl_id_addr_get+0x80>)
    f8ce:	4810      	ldr	r0, [pc, #64]	; (f910 <ll_rl_id_addr_get+0x84>)
    f8d0:	f44f 7389 	mov.w	r3, #274	; 0x112
    f8d4:	f007 fb4b 	bl	16f6e <printk>
    f8d8:	4040      	eors	r0, r0
    f8da:	f380 8811 	msr	BASEPRI, r0
    f8de:	f04f 0003 	mov.w	r0, #3
    f8e2:	df02      	svc	2
    f8e4:	e7d9      	b.n	f89a <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
    f8e6:	4a08      	ldr	r2, [pc, #32]	; (f908 <ll_rl_id_addr_get+0x7c>)
    f8e8:	490a      	ldr	r1, [pc, #40]	; (f914 <ll_rl_id_addr_get+0x88>)
    f8ea:	4809      	ldr	r0, [pc, #36]	; (f910 <ll_rl_id_addr_get+0x84>)
    f8ec:	f240 1313 	movw	r3, #275	; 0x113
    f8f0:	f007 fb3d 	bl	16f6e <printk>
    f8f4:	4040      	eors	r0, r0
    f8f6:	f380 8811 	msr	BASEPRI, r0
    f8fa:	f04f 0003 	mov.w	r0, #3
    f8fe:	df02      	svc	2
    f900:	e7d3      	b.n	f8aa <ll_rl_id_addr_get+0x1e>
    f902:	bf00      	nop
    f904:	20001f84 	.word	0x20001f84
    f908:	0001bea8 	.word	0x0001bea8
    f90c:	0001beec 	.word	0x0001beec
    f910:	0001b7c8 	.word	0x0001b7c8
    f914:	0001bef8 	.word	0x0001bef8

0000f918 <ll_rl_size_get>:
    f918:	2008      	movs	r0, #8
    f91a:	4770      	bx	lr

0000f91c <ll_rl_clear>:
{
    f91c:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    f91e:	2000      	movs	r0, #0
    f920:	f7fa fe60 	bl	a5e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
    f924:	bb88      	cbnz	r0, f98a <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
    f926:	4b1a      	ldr	r3, [pc, #104]	; (f990 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
    f928:	4c1a      	ldr	r4, [pc, #104]	; (f994 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
    f92a:	7819      	ldrb	r1, [r3, #0]
    f92c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
    f930:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
    f932:	f360 0100 	bfi	r1, r0, #0, #1
    f936:	f360 0200 	bfi	r2, r0, #0, #1
    f93a:	7019      	strb	r1, [r3, #0]
    f93c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    f940:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
    f944:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
    f948:	f360 0100 	bfi	r1, r0, #0, #1
    f94c:	f360 0200 	bfi	r2, r0, #0, #1
    f950:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    f954:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    f958:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
    f95c:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
    f960:	f360 0100 	bfi	r1, r0, #0, #1
    f964:	f360 0200 	bfi	r2, r0, #0, #1
    f968:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
    f96c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
    f970:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
    f974:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
    f978:	f360 0100 	bfi	r1, r0, #0, #1
    f97c:	f360 0200 	bfi	r2, r0, #0, #1
    f980:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
    f984:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
    f988:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    f98a:	200c      	movs	r0, #12
}
    f98c:	bd10      	pop	{r4, pc}
    f98e:	bf00      	nop
    f990:	20001f84 	.word	0x20001f84
    f994:	20002790 	.word	0x20002790

0000f998 <ll_rl_remove>:
{
    f998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f99c:	4681      	mov	r9, r0
    f99e:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    f9a0:	2000      	movs	r0, #0
    f9a2:	f7fa fe1f 	bl	a5e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
    f9a6:	2800      	cmp	r0, #0
    f9a8:	d149      	bne.n	fa3e <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    f9aa:	46ca      	mov	sl, r9
    f9ac:	4e4e      	ldr	r6, [pc, #312]	; (fae8 <ll_rl_remove+0x150>)
    f9ae:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f9b2:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f9b4:	f008 0801 	and.w	r8, r8, #1
    f9b8:	1e75      	subs	r5, r6, #1
    f9ba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    f9be:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    f9c2:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    f9c6:	f3c2 1380 	ubfx	r3, r2, #6, #1
    f9ca:	07d2      	lsls	r2, r2, #31
    f9cc:	ea4f 0784 	mov.w	r7, r4, lsl #2
    f9d0:	d501      	bpl.n	f9d6 <ll_rl_remove+0x3e>
    f9d2:	4543      	cmp	r3, r8
    f9d4:	d008      	beq.n	f9e8 <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    f9d6:	3401      	adds	r4, #1
    f9d8:	2c08      	cmp	r4, #8
    f9da:	f106 0628 	add.w	r6, r6, #40	; 0x28
    f9de:	d1ec      	bne.n	f9ba <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    f9e0:	2002      	movs	r0, #2
}
    f9e2:	b003      	add	sp, #12
    f9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    f9e8:	4630      	mov	r0, r6
    f9ea:	2206      	movs	r2, #6
    f9ec:	4651      	mov	r1, sl
    f9ee:	f008 f874 	bl	17ada <memcmp>
    f9f2:	4603      	mov	r3, r0
    f9f4:	2800      	cmp	r0, #0
    f9f6:	d1ee      	bne.n	f9d6 <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
    f9f8:	f89b 2000 	ldrb.w	r2, [fp]
    f9fc:	0752      	lsls	r2, r2, #29
    f9fe:	d430      	bmi.n	fa62 <ll_rl_remove+0xca>
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
    fa00:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < FAL_SIZE; i++) {
    fa04:	4e39      	ldr	r6, [pc, #228]	; (faec <ll_rl_remove+0x154>)
		if (LIST_MATCH(fal, i, addr_type, addr)) {
    fa06:	f009 0901 	and.w	r9, r9, #1
    fa0a:	f1a6 0802 	sub.w	r8, r6, #2
    fa0e:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
    fa12:	07d0      	lsls	r0, r2, #31
    fa14:	f3c2 0140 	ubfx	r1, r2, #1, #1
    fa18:	d501      	bpl.n	fa1e <ll_rl_remove+0x86>
    fa1a:	4549      	cmp	r1, r9
    fa1c:	d013      	beq.n	fa46 <ll_rl_remove+0xae>
	for (i = 0; i < FAL_SIZE; i++) {
    fa1e:	3301      	adds	r3, #1
    fa20:	2b08      	cmp	r3, #8
    fa22:	f106 0608 	add.w	r6, r6, #8
    fa26:	d1f2      	bne.n	fa0e <ll_rl_remove+0x76>
		rl[i].taken = 0U;
    fa28:	443c      	add	r4, r7
		return 0;
    fa2a:	2000      	movs	r0, #0
		rl[i].taken = 0U;
    fa2c:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
    fa30:	f36f 0300 	bfc	r3, #0, #1
    fa34:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
    fa38:	b003      	add	sp, #12
    fa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    fa3e:	200c      	movs	r0, #12
}
    fa40:	b003      	add	sp, #12
    fa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
    fa46:	2206      	movs	r2, #6
    fa48:	4630      	mov	r0, r6
    fa4a:	4651      	mov	r1, sl
    fa4c:	9301      	str	r3, [sp, #4]
    fa4e:	f008 f844 	bl	17ada <memcmp>
    fa52:	9b01      	ldr	r3, [sp, #4]
    fa54:	2800      	cmp	r0, #0
    fa56:	d1e2      	bne.n	fa1e <ll_rl_remove+0x86>
			fal[j].rl_idx = FILTER_IDX_NONE;
    fa58:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    fa5c:	22ff      	movs	r2, #255	; 0xff
    fa5e:	705a      	strb	r2, [r3, #1]
    fa60:	e7e2      	b.n	fa28 <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    fa62:	f8df 808c 	ldr.w	r8, [pc, #140]	; faf0 <ll_rl_remove+0x158>
    fa66:	f898 6000 	ldrb.w	r6, [r8]
    fa6a:	3e01      	subs	r6, #1
			if (pj && pi != pj) {
    fa6c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    fa70:	d003      	beq.n	fa7a <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    fa72:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
    fa76:	45b3      	cmp	fp, r6
    fa78:	d102      	bne.n	fa80 <ll_rl_remove+0xe8>
			peer_irk_count--;
    fa7a:	f888 6000 	strb.w	r6, [r8]
    fa7e:	e7bf      	b.n	fa00 <ll_rl_remove+0x68>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
    fa80:	481c      	ldr	r0, [pc, #112]	; (faf4 <ll_rl_remove+0x15c>)
    fa82:	9301      	str	r3, [sp, #4]
    fa84:	2210      	movs	r2, #16
    fa86:	eb00 1106 	add.w	r1, r0, r6, lsl #4
    fa8a:	eb00 100b 	add.w	r0, r0, fp, lsl #4
    fa8e:	f008 f835 	bl	17afc <memcpy>
    fa92:	9b01      	ldr	r3, [sp, #4]
    fa94:	f8df c060 	ldr.w	ip, [pc, #96]	; faf8 <ll_rl_remove+0x160>
    fa98:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
    fa9a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    fa9e:	fa5f fe82 	uxtb.w	lr, r2
    faa2:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
    faa6:	f010 0f01 	tst.w	r0, #1
    faaa:	f102 0201 	add.w	r2, r2, #1
    faae:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    fab2:	d005      	beq.n	fac0 <ll_rl_remove+0x128>
    fab4:	0740      	lsls	r0, r0, #29
    fab6:	d503      	bpl.n	fac0 <ll_rl_remove+0x128>
    fab8:	f89c 0017 	ldrb.w	r0, [ip, #23]
    fabc:	42b0      	cmp	r0, r6
    fabe:	d008      	beq.n	fad2 <ll_rl_remove+0x13a>
				for (k = 0U;
    fac0:	2a08      	cmp	r2, #8
    fac2:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
    fac6:	d1e8      	bne.n	fa9a <ll_rl_remove+0x102>
			peer_irk_count--;
    fac8:	f898 6000 	ldrb.w	r6, [r8]
    facc:	3e01      	subs	r6, #1
    face:	b2f6      	uxtb	r6, r6
    fad0:	e7d3      	b.n	fa7a <ll_rl_remove+0xe2>
    fad2:	f898 6000 	ldrb.w	r6, [r8]
						peer_irk_rl_ids[pi] = k;
    fad6:	4a09      	ldr	r2, [pc, #36]	; (fafc <ll_rl_remove+0x164>)
						rl[k].pirk_idx = pi;
    fad8:	f881 b017 	strb.w	fp, [r1, #23]
			peer_irk_count--;
    fadc:	3e01      	subs	r6, #1
						peer_irk_rl_ids[pi] = k;
    fade:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
    fae2:	b2f6      	uxtb	r6, r6
						break;
    fae4:	e7c9      	b.n	fa7a <ll_rl_remove+0xe2>
    fae6:	bf00      	nop
    fae8:	20001f85 	.word	0x20001f85
    faec:	20001e5a 	.word	0x20001e5a
    faf0:	20002790 	.word	0x20002790
    faf4:	20001f04 	.word	0x20001f04
    faf8:	20001f84 	.word	0x20001f84
    fafc:	20001efc 	.word	0x20001efc

0000fb00 <ll_rl_crpa_set>:
{
    fb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
    fb04:	795c      	ldrb	r4, [r3, #5]
    fb06:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    fb0a:	2c40      	cmp	r4, #64	; 0x40
    fb0c:	d001      	beq.n	fb12 <ll_rl_crpa_set+0x12>
}
    fb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
    fb12:	461e      	mov	r6, r3
    fb14:	460f      	mov	r7, r1
    fb16:	b301      	cbz	r1, fb5a <ll_rl_crpa_set+0x5a>
    fb18:	f8df 9068 	ldr.w	r9, [pc, #104]	; fb84 <ll_rl_crpa_set+0x84>
    fb1c:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    fb1e:	f000 0a01 	and.w	sl, r0, #1
    fb22:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
    fb26:	e003      	b.n	fb30 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fb28:	2c08      	cmp	r4, #8
    fb2a:	f109 0928 	add.w	r9, r9, #40	; 0x28
    fb2e:	d0ee      	beq.n	fb0e <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    fb30:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    fb34:	4625      	mov	r5, r4
    fb36:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
    fb3a:	f3c2 1380 	ubfx	r3, r2, #6, #1
    fb3e:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fb40:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    fb44:	d5f0      	bpl.n	fb28 <ll_rl_crpa_set+0x28>
    fb46:	4553      	cmp	r3, sl
    fb48:	d1ee      	bne.n	fb28 <ll_rl_crpa_set+0x28>
    fb4a:	4648      	mov	r0, r9
    fb4c:	2206      	movs	r2, #6
    fb4e:	4639      	mov	r1, r7
    fb50:	f007 ffc3 	bl	17ada <memcmp>
    fb54:	2800      	cmp	r0, #0
    fb56:	d1e7      	bne.n	fb28 <ll_rl_crpa_set+0x28>
    fb58:	e004      	b.n	fb64 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
    fb5a:	2a07      	cmp	r2, #7
    fb5c:	d8d7      	bhi.n	fb0e <ll_rl_crpa_set+0xe>
    fb5e:	f8df 8028 	ldr.w	r8, [pc, #40]	; fb88 <ll_rl_crpa_set+0x88>
    fb62:	4615      	mov	r5, r2
    fb64:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    fb68:	00e8      	lsls	r0, r5, #3
    fb6a:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
    fb6e:	07db      	lsls	r3, r3, #31
    fb70:	d5cd      	bpl.n	fb0e <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
    fb72:	3018      	adds	r0, #24
    fb74:	4631      	mov	r1, r6
    fb76:	4440      	add	r0, r8
    fb78:	2206      	movs	r2, #6
}
    fb7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
    fb7e:	f007 bfbd 	b.w	17afc <memcpy>
    fb82:	bf00      	nop
    fb84:	20001f85 	.word	0x20001f85
    fb88:	20001f84 	.word	0x20001f84

0000fb8c <ll_rl_crpa_get>:
{
    fb8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    fb90:	4682      	mov	sl, r0
    fb92:	4e1a      	ldr	r6, [pc, #104]	; (fbfc <ll_rl_crpa_get+0x70>)
    fb94:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
    fb98:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    fb9a:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    fb9c:	f008 0801 	and.w	r8, r8, #1
    fba0:	1e77      	subs	r7, r6, #1
    fba2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    fba6:	00d5      	lsls	r5, r2, #3
    fba8:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
    fbac:	f3c3 1280 	ubfx	r2, r3, #6, #1
    fbb0:	07db      	lsls	r3, r3, #31
    fbb2:	f104 0401 	add.w	r4, r4, #1
    fbb6:	d501      	bpl.n	fbbc <ll_rl_crpa_get+0x30>
    fbb8:	4542      	cmp	r2, r8
    fbba:	d006      	beq.n	fbca <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fbbc:	2c08      	cmp	r4, #8
    fbbe:	f106 0628 	add.w	r6, r6, #40	; 0x28
    fbc2:	d1ee      	bne.n	fba2 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fbc4:	2002      	movs	r0, #2
}
    fbc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    fbca:	4630      	mov	r0, r6
    fbcc:	2206      	movs	r2, #6
    fbce:	4651      	mov	r1, sl
    fbd0:	f007 ff83 	bl	17ada <memcmp>
    fbd4:	4683      	mov	fp, r0
    fbd6:	2800      	cmp	r0, #0
    fbd8:	d1f0      	bne.n	fbbc <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
    fbda:	f105 0218 	add.w	r2, r5, #24
    fbde:	4417      	add	r7, r2
    fbe0:	2106      	movs	r1, #6
    fbe2:	4638      	mov	r0, r7
    fbe4:	f7f6 f8e0 	bl	5da8 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
    fbe8:	2800      	cmp	r0, #0
    fbea:	d0eb      	beq.n	fbc4 <ll_rl_crpa_get+0x38>
    fbec:	2206      	movs	r2, #6
    fbee:	4639      	mov	r1, r7
    fbf0:	4648      	mov	r0, r9
    fbf2:	f007 ff83 	bl	17afc <memcpy>
		return 0;
    fbf6:	4658      	mov	r0, fp
}
    fbf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fbfc:	20001f85 	.word	0x20001f85

0000fc00 <ll_rl_lrpa_get>:
{
    fc00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    fc04:	4681      	mov	r9, r0
    fc06:	4e16      	ldr	r6, [pc, #88]	; (fc60 <ll_rl_lrpa_get+0x60>)
    fc08:	f819 8b01 	ldrb.w	r8, [r9], #1
{
    fc0c:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    fc0e:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    fc10:	f008 0801 	and.w	r8, r8, #1
    fc14:	1e77      	subs	r7, r6, #1
    fc16:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    fc1a:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
    fc1e:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
    fc22:	f3c3 1280 	ubfx	r2, r3, #6, #1
    fc26:	07db      	lsls	r3, r3, #31
    fc28:	f104 0401 	add.w	r4, r4, #1
    fc2c:	d501      	bpl.n	fc32 <ll_rl_lrpa_get+0x32>
    fc2e:	4542      	cmp	r2, r8
    fc30:	d006      	beq.n	fc40 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fc32:	2c08      	cmp	r4, #8
    fc34:	f106 0628 	add.w	r6, r6, #40	; 0x28
    fc38:	d1ed      	bne.n	fc16 <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fc3a:	2002      	movs	r0, #2
}
    fc3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    fc40:	4630      	mov	r0, r6
    fc42:	2206      	movs	r2, #6
    fc44:	4649      	mov	r1, r9
    fc46:	f007 ff48 	bl	17ada <memcmp>
    fc4a:	4683      	mov	fp, r0
    fc4c:	2800      	cmp	r0, #0
    fc4e:	d1f0      	bne.n	fc32 <ll_rl_lrpa_get+0x32>
    fc50:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fc52:	2206      	movs	r2, #6
    fc54:	4650      	mov	r0, sl
    fc56:	f007 ff51 	bl	17afc <memcpy>
		return 0;
    fc5a:	4658      	mov	r0, fp
}
    fc5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc60:	20001f85 	.word	0x20001f85

0000fc64 <ll_rl_enable>:
{
    fc64:	b510      	push	{r4, lr}
    fc66:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    fc68:	2000      	movs	r0, #0
    fc6a:	f7fa fcbb 	bl	a5e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
    fc6e:	b958      	cbnz	r0, fc88 <ll_rl_enable+0x24>
	switch (enable) {
    fc70:	b134      	cbz	r4, fc80 <ll_rl_enable+0x1c>
    fc72:	2c01      	cmp	r4, #1
    fc74:	d001      	beq.n	fc7a <ll_rl_enable+0x16>
    fc76:	2012      	movs	r0, #18
}
    fc78:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
    fc7a:	4b04      	ldr	r3, [pc, #16]	; (fc8c <ll_rl_enable+0x28>)
    fc7c:	701c      	strb	r4, [r3, #0]
}
    fc7e:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
    fc80:	4b02      	ldr	r3, [pc, #8]	; (fc8c <ll_rl_enable+0x28>)
    fc82:	701c      	strb	r4, [r3, #0]
	return 0;
    fc84:	4620      	mov	r0, r4
}
    fc86:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    fc88:	200c      	movs	r0, #12
}
    fc8a:	bd10      	pop	{r4, pc}
    fc8c:	20002791 	.word	0x20002791

0000fc90 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
    fc90:	4b03      	ldr	r3, [pc, #12]	; (fca0 <ll_rl_timeout_set+0x10>)
    fc92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc96:	fb02 f000 	mul.w	r0, r2, r0
    fc9a:	6018      	str	r0, [r3, #0]
}
    fc9c:	4770      	bx	lr
    fc9e:	bf00      	nop
    fca0:	200020f8 	.word	0x200020f8

0000fca4 <ll_priv_mode_set>:
{
    fca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fca8:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    fcaa:	2000      	movs	r0, #0
{
    fcac:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
    fcae:	f7fa fc99 	bl	a5e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
    fcb2:	bb68      	cbnz	r0, fd10 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    fcb4:	4e1d      	ldr	r6, [pc, #116]	; (fd2c <ll_priv_mode_set+0x88>)
    fcb6:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fcba:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    fcbc:	f009 0901 	and.w	r9, r9, #1
    fcc0:	1e77      	subs	r7, r6, #1
    fcc2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    fcc6:	00d5      	lsls	r5, r2, #3
    fcc8:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
    fccc:	f3c3 1280 	ubfx	r2, r3, #6, #1
    fcd0:	07db      	lsls	r3, r3, #31
    fcd2:	f104 0401 	add.w	r4, r4, #1
    fcd6:	d501      	bpl.n	fcdc <ll_priv_mode_set+0x38>
    fcd8:	454a      	cmp	r2, r9
    fcda:	d006      	beq.n	fcea <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    fcdc:	2c08      	cmp	r4, #8
    fcde:	f106 0628 	add.w	r6, r6, #40	; 0x28
    fce2:	d1ee      	bne.n	fcc2 <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    fce4:	2002      	movs	r0, #2
}
    fce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    fcea:	4630      	mov	r0, r6
    fcec:	2206      	movs	r2, #6
    fcee:	4651      	mov	r1, sl
    fcf0:	f007 fef3 	bl	17ada <memcmp>
    fcf4:	2800      	cmp	r0, #0
    fcf6:	d1f1      	bne.n	fcdc <ll_priv_mode_set+0x38>
		switch (mode) {
    fcf8:	f1b8 0f00 	cmp.w	r8, #0
    fcfc:	d00e      	beq.n	fd1c <ll_priv_mode_set+0x78>
    fcfe:	f1b8 0f01 	cmp.w	r8, #1
    fd02:	d108      	bne.n	fd16 <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
    fd04:	5d7b      	ldrb	r3, [r7, r5]
    fd06:	f043 0310 	orr.w	r3, r3, #16
    fd0a:	557b      	strb	r3, [r7, r5]
}
    fd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    fd10:	200c      	movs	r0, #12
}
    fd12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
    fd16:	2012      	movs	r0, #18
}
    fd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
    fd1c:	5d7b      	ldrb	r3, [r7, r5]
    fd1e:	f368 1304 	bfi	r3, r8, #4, #1
    fd22:	557b      	strb	r3, [r7, r5]
	return 0;
    fd24:	4640      	mov	r0, r8
}
    fd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fd2a:	bf00      	nop
    fd2c:	20001f85 	.word	0x20001f85

0000fd30 <ull_filter_reset>:
{
    fd30:	b4d0      	push	{r4, r6, r7}
    fd32:	4930      	ldr	r1, [pc, #192]	; (fdf4 <ull_filter_reset+0xc4>)
    fd34:	4c30      	ldr	r4, [pc, #192]	; (fdf8 <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
    fd36:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
    fd38:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    fd3c:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
    fd3e:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
    fd40:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
    fd44:	d805      	bhi.n	fd52 <ull_filter_reset+0x22>
			rl[j].fal = 0U;
    fd46:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
    fd4a:	f36f 1245 	bfc	r2, #5, #1
    fd4e:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
    fd52:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    fd56:	f36f 0200 	bfc	r2, #0, #1
    fd5a:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
    fd5e:	3301      	adds	r3, #1
    fd60:	2b08      	cmp	r3, #8
    fd62:	d1e9      	bne.n	fd38 <ull_filter_reset+0x8>
	rl_enable = 0U;
    fd64:	4a25      	ldr	r2, [pc, #148]	; (fdfc <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    fd66:	4c26      	ldr	r4, [pc, #152]	; (fe00 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
    fd68:	2300      	movs	r3, #0
    fd6a:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
    fd6c:	780a      	ldrb	r2, [r1, #0]
    fd6e:	f363 0200 	bfi	r2, r3, #0, #1
    fd72:	700a      	strb	r2, [r1, #0]
    fd74:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
    fd78:	f363 0200 	bfi	r2, r3, #0, #1
    fd7c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
    fd80:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    fd84:	f363 0200 	bfi	r2, r3, #0, #1
    fd88:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
    fd8c:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
    fd90:	f363 0200 	bfi	r2, r3, #0, #1
    fd94:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
    fd98:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
    fd9c:	f363 0200 	bfi	r2, r3, #0, #1
    fda0:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
    fda4:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
    fda8:	f363 0200 	bfi	r2, r3, #0, #1
    fdac:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
    fdb0:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
    fdb4:	f363 0200 	bfi	r2, r3, #0, #1
    fdb8:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
    fdbc:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
    fdc0:	f363 0200 	bfi	r2, r3, #0, #1
    fdc4:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
    fdc8:	4a0e      	ldr	r2, [pc, #56]	; (fe04 <ull_filter_reset+0xd4>)
    fdca:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
    fdcc:	4b0e      	ldr	r3, [pc, #56]	; (fe08 <ull_filter_reset+0xd8>)
    fdce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    fdd2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    fdd6:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    fdda:	4b0c      	ldr	r3, [pc, #48]	; (fe0c <ull_filter_reset+0xdc>)
    fddc:	6023      	str	r3, [r4, #0]
	if (init) {
    fdde:	b120      	cbz	r0, fdea <ull_filter_reset+0xba>
}
    fde0:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
    fde2:	490b      	ldr	r1, [pc, #44]	; (fe10 <ull_filter_reset+0xe0>)
    fde4:	480b      	ldr	r0, [pc, #44]	; (fe14 <ull_filter_reset+0xe4>)
    fde6:	f00a be01 	b.w	1a9ec <k_work_init_delayable>
}
    fdea:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
    fdec:	4809      	ldr	r0, [pc, #36]	; (fe14 <ull_filter_reset+0xe4>)
    fdee:	f00a be09 	b.w	1aa04 <k_work_cancel_delayable>
    fdf2:	bf00      	nop
    fdf4:	20001f84 	.word	0x20001f84
    fdf8:	20001e58 	.word	0x20001e58
    fdfc:	20002791 	.word	0x20002791
    fe00:	200020f8 	.word	0x200020f8
    fe04:	20002790 	.word	0x20002790
    fe08:	200010b0 	.word	0x200010b0
    fe0c:	000dbba0 	.word	0x000dbba0
    fe10:	0001007d 	.word	0x0001007d
    fe14:	200010b8 	.word	0x200010b8

0000fe18 <ull_filter_lll_get>:
		return &fal_filter;
    fe18:	4a03      	ldr	r2, [pc, #12]	; (fe28 <ull_filter_lll_get+0x10>)
    fe1a:	4b04      	ldr	r3, [pc, #16]	; (fe2c <ull_filter_lll_get+0x14>)
}
    fe1c:	2800      	cmp	r0, #0
    fe1e:	bf0c      	ite	eq
    fe20:	4610      	moveq	r0, r2
    fe22:	4618      	movne	r0, r3
    fe24:	4770      	bx	lr
    fe26:	bf00      	nop
    fe28:	200020c4 	.word	0x200020c4
    fe2c:	20001e98 	.word	0x20001e98

0000fe30 <ull_filter_adv_scan_state_cb>:
	if (bm) {
    fe30:	b1a8      	cbz	r0, fe5e <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
    fe32:	4a0c      	ldr	r2, [pc, #48]	; (fe64 <ull_filter_adv_scan_state_cb+0x34>)
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    fe34:	6812      	ldr	r2, [r2, #0]
{
    fe36:	b510      	push	{r4, lr}
    fe38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    fe3c:	f240 30e7 	movw	r0, #999	; 0x3e7
    fe40:	2100      	movs	r1, #0
    fe42:	fbe2 0103 	umlal	r0, r1, r2, r3
    fe46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe4a:	2300      	movs	r3, #0
    fe4c:	f7f0 f948 	bl	e0 <__aeabi_uldivmod>
}
    fe50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe54:	4602      	mov	r2, r0
    fe56:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
    fe58:	4803      	ldr	r0, [pc, #12]	; (fe68 <ull_filter_adv_scan_state_cb+0x38>)
    fe5a:	f006 bae5 	b.w	16428 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
    fe5e:	4802      	ldr	r0, [pc, #8]	; (fe68 <ull_filter_adv_scan_state_cb+0x38>)
    fe60:	f00a bdd0 	b.w	1aa04 <k_work_cancel_delayable>
    fe64:	200020f8 	.word	0x200020f8
    fe68:	200010b8 	.word	0x200010b8

0000fe6c <ull_filter_adv_update>:
{
    fe6c:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
    fe6e:	4b09      	ldr	r3, [pc, #36]	; (fe94 <ull_filter_adv_update+0x28>)
    fe70:	2200      	movs	r2, #0
    fe72:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
    fe74:	b930      	cbnz	r0, fe84 <ull_filter_adv_update+0x18>
	if (rl_enable &&
    fe76:	4b08      	ldr	r3, [pc, #32]	; (fe98 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
    fe78:	4a08      	ldr	r2, [pc, #32]	; (fe9c <ull_filter_adv_update+0x30>)
	if (rl_enable &&
    fe7a:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
    fe7c:	2100      	movs	r1, #0
    fe7e:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
    fe80:	b91b      	cbnz	r3, fe8a <ull_filter_adv_update+0x1e>
}
    fe82:	bd08      	pop	{r3, pc}
		fal_update();
    fe84:	f7ff fbb0 	bl	f5e8 <fal_update>
    fe88:	e7f5      	b.n	fe76 <ull_filter_adv_update+0xa>
}
    fe8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
    fe8e:	f7ff bb73 	b.w	f578 <rl_update>
    fe92:	bf00      	nop
    fe94:	20001e98 	.word	0x20001e98
    fe98:	20002791 	.word	0x20002791
    fe9c:	200020c4 	.word	0x200020c4

0000fea0 <ull_filter_rpa_update>:
{
    fea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fea4:	4683      	mov	fp, r0
    fea6:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
    fea8:	f00a ff1c 	bl	1ace4 <z_impl_k_uptime_ticks>
    feac:	014b      	lsls	r3, r1, #5
    feae:	0142      	lsls	r2, r0, #5
    feb0:	1a12      	subs	r2, r2, r0
    feb2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    feb6:	eb63 0301 	sbc.w	r3, r3, r1
    feba:	009b      	lsls	r3, r3, #2
    febc:	ea4f 0982 	mov.w	r9, r2, lsl #2
    fec0:	eb19 0900 	adds.w	r9, r9, r0
    fec4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
    fec8:	eb41 0103 	adc.w	r1, r1, r3
    fecc:	00cb      	lsls	r3, r1, #3
    fece:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
    fed2:	0bd9      	lsrs	r1, r3, #15
    fed4:	f3c9 3910 	ubfx	r9, r9, #12, #17
    fed8:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
    fedc:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
    fede:	f1bb 0f00 	cmp.w	fp, #0
    fee2:	d117      	bne.n	ff14 <ull_filter_rpa_update+0x74>
    fee4:	4a5d      	ldr	r2, [pc, #372]	; (1005c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5d>)
    fee6:	e9d2 3200 	ldrd	r3, r2, [r2]
    feea:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    feee:	bf08      	it	eq
    fef0:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
    fef4:	d00e      	beq.n	ff14 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
    fef6:	ebb9 0303 	subs.w	r3, r9, r3
    fefa:	eb61 0202 	sbc.w	r2, r1, r2
    fefe:	4958      	ldr	r1, [pc, #352]	; (10060 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x61>)
    ff00:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
    ff02:	428b      	cmp	r3, r1
    ff04:	f172 0300 	sbcs.w	r3, r2, #0
    ff08:	bfac      	ite	ge
    ff0a:	f04f 0a01 	movge.w	sl, #1
    ff0e:	f04f 0a00 	movlt.w	sl, #0
    ff12:	e001      	b.n	ff18 <ull_filter_rpa_update+0x78>
    ff14:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    ff18:	4e52      	ldr	r6, [pc, #328]	; (10064 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x65>)
    ff1a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 10068 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x69>
	bool all = timeout || (rpa_last_ms == -1) ||
    ff1e:	2400      	movs	r4, #0
    ff20:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    ff24:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    ff28:	00a5      	lsls	r5, r4, #2
    ff2a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
    ff2e:	07da      	lsls	r2, r3, #31
    ff30:	d515      	bpl.n	ff5e <ull_filter_rpa_update+0xbe>
    ff32:	f1ba 0f00 	cmp.w	sl, #0
    ff36:	d101      	bne.n	ff3c <ull_filter_rpa_update+0x9c>
    ff38:	0798      	lsls	r0, r3, #30
    ff3a:	d410      	bmi.n	ff5e <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
    ff3c:	192b      	adds	r3, r5, r4
    ff3e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
    ff42:	0759      	lsls	r1, r3, #29
    ff44:	d432      	bmi.n	ffac <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
    ff46:	192b      	adds	r3, r5, r4
    ff48:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
    ff4c:	071a      	lsls	r2, r3, #28
    ff4e:	d41b      	bmi.n	ff88 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
    ff50:	4425      	add	r5, r4
    ff52:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
    ff56:	f043 0302 	orr.w	r3, r3, #2
    ff5a:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    ff5e:	3401      	adds	r4, #1
    ff60:	2c08      	cmp	r4, #8
    ff62:	f108 0806 	add.w	r8, r8, #6
    ff66:	f106 0628 	add.w	r6, r6, #40	; 0x28
    ff6a:	d1db      	bne.n	ff24 <ull_filter_rpa_update+0x84>
	if (all) {
    ff6c:	f1ba 0f00 	cmp.w	sl, #0
    ff70:	d004      	beq.n	ff7c <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
    ff72:	4b3a      	ldr	r3, [pc, #232]	; (1005c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5d>)
    ff74:	9a01      	ldr	r2, [sp, #4]
    ff76:	f8c3 9000 	str.w	r9, [r3]
    ff7a:	605a      	str	r2, [r3, #4]
	if (timeout) {
    ff7c:	f1bb 0f00 	cmp.w	fp, #0
    ff80:	d138      	bne.n	fff4 <ull_filter_rpa_update+0x154>
}
    ff82:	b007      	add	sp, #28
    ff84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
    ff88:	a902      	add	r1, sp, #8
    ff8a:	f1a6 0017 	sub.w	r0, r6, #23
    ff8e:	f007 fe07 	bl	17ba0 <bt_rpa_create>
				LL_ASSERT(!err);
    ff92:	2800      	cmp	r0, #0
    ff94:	d154      	bne.n	10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>
				rl[i].local_rpa = &rpa;
    ff96:	ab02      	add	r3, sp, #8
    ff98:	f8c6 3006 	str.w	r3, [r6, #6]
    ff9c:	4619      	mov	r1, r3
    ff9e:	2206      	movs	r2, #6
    ffa0:	4640      	mov	r0, r8
    ffa2:	f007 fdab 	bl	17afc <memcpy>
				rl[i].local_rpa = &local_rpas[i];
    ffa6:	f8c6 8006 	str.w	r8, [r6, #6]
    ffaa:	e7d1      	b.n	ff50 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
    ffac:	f816 3c07 	ldrb.w	r3, [r6, #-7]
    ffb0:	4a2e      	ldr	r2, [pc, #184]	; (1006c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6d>)
    ffb2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    ffb6:	320f      	adds	r2, #15
	for (; length > 0; length--) {
    ffb8:	f10d 0307 	add.w	r3, sp, #7
    ffbc:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
    ffc0:	f812 1901 	ldrb.w	r1, [r2], #-1
    ffc4:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
    ffc8:	4283      	cmp	r3, r0
    ffca:	d1f9      	bne.n	ffc0 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
    ffcc:	4631      	mov	r1, r6
    ffce:	a802      	add	r0, sp, #8
    ffd0:	f007 fde6 	bl	17ba0 <bt_rpa_create>
				LL_ASSERT(!err);
    ffd4:	2800      	cmp	r0, #0
    ffd6:	d0b6      	beq.n	ff46 <ull_filter_rpa_update+0xa6>
    ffd8:	4a25      	ldr	r2, [pc, #148]	; (10070 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x71>)
    ffda:	4926      	ldr	r1, [pc, #152]	; (10074 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x75>)
    ffdc:	4826      	ldr	r0, [pc, #152]	; (10078 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x79>)
    ffde:	f240 23eb 	movw	r3, #747	; 0x2eb
    ffe2:	f006 ffc4 	bl	16f6e <printk>
    ffe6:	4040      	eors	r0, r0
    ffe8:	f380 8811 	msr	BASEPRI, r0
    ffec:	f04f 0003 	mov.w	r0, #3
    fff0:	df02      	svc	2
    fff2:	e7a8      	b.n	ff46 <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
    fff4:	2000      	movs	r0, #0
    fff6:	f7fa fae7 	bl	a5c8 <ull_adv_is_enabled_get>
		if (adv) {
    fffa:	4604      	mov	r4, r0
    fffc:	2800      	cmp	r0, #0
    fffe:	d0c0      	beq.n	ff82 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   10000:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   10004:	075b      	lsls	r3, r3, #29
   10006:	d5bc      	bpl.n	ff82 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   10008:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   1000c:	2b07      	cmp	r3, #7
   1000e:	d8b8      	bhi.n	ff82 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   10010:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   10014:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   10018:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1001a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1001c:	3028      	adds	r0, #40	; 0x28
   1001e:	f001 f9cb 	bl	113b8 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   10022:	7872      	ldrb	r2, [r6, #1]
   10024:	4605      	mov	r5, r0
   10026:	3202      	adds	r2, #2
   10028:	4631      	mov	r1, r6
   1002a:	f007 fd67 	bl	17afc <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   1002e:	4629      	mov	r1, r5
   10030:	4620      	mov	r0, r4
   10032:	f7fa faf3 	bl	a61c <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   10036:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1003a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1003e:	e7a0      	b.n	ff82 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   10040:	4a0b      	ldr	r2, [pc, #44]	; (10070 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x71>)
   10042:	490c      	ldr	r1, [pc, #48]	; (10074 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x75>)
   10044:	480c      	ldr	r0, [pc, #48]	; (10078 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x79>)
   10046:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   1004a:	f006 ff90 	bl	16f6e <printk>
   1004e:	4040      	eors	r0, r0
   10050:	f380 8811 	msr	BASEPRI, r0
   10054:	f04f 0003 	mov.w	r0, #3
   10058:	df02      	svc	2
   1005a:	e79c      	b.n	ff96 <ull_filter_rpa_update+0xf6>
   1005c:	200010b0 	.word	0x200010b0
   10060:	200020f8 	.word	0x200020f8
   10064:	20001fa2 	.word	0x20001fa2
   10068:	20001ecc 	.word	0x20001ecc
   1006c:	20001f04 	.word	0x20001f04
   10070:	0001bea8 	.word	0x0001bea8
   10074:	0001b968 	.word	0x0001b968
   10078:	0001b7c8 	.word	0x0001b7c8

0001007c <rpa_timeout>:
{
   1007c:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1007e:	2001      	movs	r0, #1
   10080:	f7ff ff0e 	bl	fea0 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   10084:	4a0a      	ldr	r2, [pc, #40]	; (100b0 <rpa_timeout+0x34>)
   10086:	6812      	ldr	r2, [r2, #0]
   10088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1008c:	f240 30e7 	movw	r0, #999	; 0x3e7
   10090:	2100      	movs	r1, #0
   10092:	fbe2 0103 	umlal	r0, r1, r2, r3
   10096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1009a:	2300      	movs	r3, #0
   1009c:	f7f0 f820 	bl	e0 <__aeabi_uldivmod>
}
   100a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100a4:	4602      	mov	r2, r0
   100a6:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   100a8:	4802      	ldr	r0, [pc, #8]	; (100b4 <rpa_timeout+0x38>)
   100aa:	f006 b9bd 	b.w	16428 <k_work_schedule>
   100ae:	bf00      	nop
   100b0:	200020f8 	.word	0x200020f8
   100b4:	200010b8 	.word	0x200010b8

000100b8 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   100b8:	2807      	cmp	r0, #7
   100ba:	d813      	bhi.n	100e4 <ull_filter_adva_get+0x2c>
{
   100bc:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   100be:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   100c2:	4d10      	ldr	r5, [pc, #64]	; (10104 <ull_filter_adva_get+0x4c>)
   100c4:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   100c8:	071a      	lsls	r2, r3, #28
   100ca:	4604      	mov	r4, r0
   100cc:	ea4f 0680 	mov.w	r6, r0, lsl #2
   100d0:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   100d4:	d505      	bpl.n	100e2 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   100d6:	079b      	lsls	r3, r3, #30
   100d8:	d506      	bpl.n	100e8 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   100da:	4434      	add	r4, r6
   100dc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   100e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   100e2:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   100e4:	2000      	movs	r0, #0
}
   100e6:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   100e8:	4a07      	ldr	r2, [pc, #28]	; (10108 <ull_filter_adva_get+0x50>)
   100ea:	4908      	ldr	r1, [pc, #32]	; (1010c <ull_filter_adva_get+0x54>)
   100ec:	4808      	ldr	r0, [pc, #32]	; (10110 <ull_filter_adva_get+0x58>)
   100ee:	f44f 7347 	mov.w	r3, #796	; 0x31c
   100f2:	f006 ff3c 	bl	16f6e <printk>
   100f6:	4040      	eors	r0, r0
   100f8:	f380 8811 	msr	BASEPRI, r0
   100fc:	f04f 0003 	mov.w	r0, #3
   10100:	df02      	svc	2
   10102:	e7ea      	b.n	100da <ull_filter_adva_get+0x22>
   10104:	20001f84 	.word	0x20001f84
   10108:	0001bea8 	.word	0x0001bea8
   1010c:	0001bf0c 	.word	0x0001bf0c
   10110:	0001b7c8 	.word	0x0001b7c8

00010114 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   10114:	2807      	cmp	r0, #7
   10116:	d80b      	bhi.n	10130 <ull_filter_tgta_get+0x1c>
   10118:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1011c:	4a05      	ldr	r2, [pc, #20]	; (10134 <ull_filter_tgta_get+0x20>)
   1011e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   10122:	074b      	lsls	r3, r1, #29
   10124:	d504      	bpl.n	10130 <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   10126:	2328      	movs	r3, #40	; 0x28
   10128:	fb03 2000 	mla	r0, r3, r0, r2
   1012c:	301e      	adds	r0, #30
   1012e:	4770      	bx	lr
	return NULL;
   10130:	2000      	movs	r0, #0
   10132:	4770      	bx	lr
   10134:	20001f84 	.word	0x20001f84

00010138 <ull_filter_rl_find>:
{
   10138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1013c:	468b      	mov	fp, r1
	if (free_idx) {
   1013e:	4617      	mov	r7, r2
   10140:	b10a      	cbz	r2, 10146 <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   10142:	23ff      	movs	r3, #255	; 0xff
   10144:	7013      	strb	r3, [r2, #0]
   10146:	4d1b      	ldr	r5, [pc, #108]	; (101b4 <ull_filter_rl_find+0x7c>)
{
   10148:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1014a:	f000 0a01 	and.w	sl, r0, #1
   1014e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   10152:	e006      	b.n	10162 <ull_filter_rl_find+0x2a>
   10154:	4552      	cmp	r2, sl
   10156:	d01f      	beq.n	10198 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10158:	3401      	adds	r4, #1
   1015a:	2c08      	cmp	r4, #8
   1015c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   10160:	d015      	beq.n	1018e <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10162:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   10166:	fa5f f884 	uxtb.w	r8, r4
   1016a:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1016e:	07d9      	lsls	r1, r3, #31
   10170:	f3c3 1280 	ubfx	r2, r3, #6, #1
   10174:	d4ee      	bmi.n	10154 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   10176:	2f00      	cmp	r7, #0
   10178:	d0ee      	beq.n	10158 <ull_filter_rl_find+0x20>
   1017a:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1017c:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   1017e:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   10180:	bf08      	it	eq
   10182:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10186:	2c08      	cmp	r4, #8
   10188:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1018c:	d1e9      	bne.n	10162 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   1018e:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   10192:	4640      	mov	r0, r8
   10194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10198:	4628      	mov	r0, r5
   1019a:	2206      	movs	r2, #6
   1019c:	4659      	mov	r1, fp
   1019e:	f007 fc9c 	bl	17ada <memcmp>
   101a2:	2800      	cmp	r0, #0
   101a4:	d0f5      	beq.n	10192 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   101a6:	2f00      	cmp	r7, #0
   101a8:	d0d6      	beq.n	10158 <ull_filter_rl_find+0x20>
   101aa:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   101ae:	07db      	lsls	r3, r3, #31
   101b0:	d4d2      	bmi.n	10158 <ull_filter_rl_find+0x20>
   101b2:	e7e2      	b.n	1017a <ull_filter_rl_find+0x42>
   101b4:	20001f85 	.word	0x20001f85

000101b8 <ll_rl_add>:
{
   101b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101bc:	4680      	mov	r8, r0
   101be:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   101c0:	2000      	movs	r0, #0
{
   101c2:	460e      	mov	r6, r1
   101c4:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   101c6:	f7fa fa0d 	bl	a5e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   101ca:	2800      	cmp	r0, #0
   101cc:	d17d      	bne.n	102ca <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   101ce:	46c2      	mov	sl, r8
   101d0:	4604      	mov	r4, r0
   101d2:	f81a 0b01 	ldrb.w	r0, [sl], #1
   101d6:	f10d 020f 	add.w	r2, sp, #15
   101da:	4651      	mov	r1, sl
   101dc:	f7ff ffac 	bl	10138 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   101e0:	2807      	cmp	r0, #7
   101e2:	f240 80b5 	bls.w	10350 <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   101e6:	f89d 700f 	ldrb.w	r7, [sp, #15]
   101ea:	2f07      	cmp	r7, #7
   101ec:	f200 8084 	bhi.w	102f8 <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   101f0:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   101f4:	4d58      	ldr	r5, [pc, #352]	; (10358 <ll_rl_add+0x1a0>)
   101f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   101fa:	1c58      	adds	r0, r3, #1
   101fc:	2206      	movs	r2, #6
   101fe:	4651      	mov	r1, sl
   10200:	4428      	add	r0, r5
   10202:	9300      	str	r3, [sp, #0]
   10204:	f007 fc7a 	bl	17afc <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   10208:	f898 3000 	ldrb.w	r3, [r8]
   1020c:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   10210:	465a      	mov	r2, fp
   10212:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   10216:	f363 1186 	bfi	r1, r3, #6, #1
   1021a:	f805 100b 	strb.w	r1, [r5, fp]
   1021e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   10222:	2110      	movs	r1, #16
   10224:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   10226:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   10228:	f7f5 fdbe 	bl	5da8 <mem_nz>
   1022c:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   10230:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   10232:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   10236:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   10238:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1023c:	f7f5 fdb4 	bl	5da8 <mem_nz>
   10240:	f815 200b 	ldrb.w	r2, [r5, fp]
   10244:	f000 0001 	and.w	r0, r0, #1
   10248:	f360 02c3 	bfi	r2, r0, #3, #1
   1024c:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   10250:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   10252:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   10256:	d453      	bmi.n	10300 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   10258:	2800      	cmp	r0, #0
   1025a:	d16b      	bne.n	10334 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1025c:	9800      	ldr	r0, [sp, #0]
   1025e:	4e3f      	ldr	r6, [pc, #252]	; (1035c <ll_rl_add+0x1a4>)
   10260:	3018      	adds	r0, #24
   10262:	2206      	movs	r2, #6
   10264:	2100      	movs	r1, #0
   10266:	4428      	add	r0, r5
   10268:	f007 fc53 	bl	17b12 <memset>
	rl[i].dev = 0U;
   1026c:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   10270:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   10274:	f021 0112 	bic.w	r1, r1, #18
   10278:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1027c:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < FAL_SIZE; i++) {
   10280:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   10284:	f009 0901 	and.w	r9, r9, #1
   10288:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   1028c:	07d3      	lsls	r3, r2, #31
   1028e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   10292:	d501      	bpl.n	10298 <ll_rl_add+0xe0>
   10294:	4549      	cmp	r1, r9
   10296:	d01c      	beq.n	102d2 <ll_rl_add+0x11a>
	for (i = 0; i < FAL_SIZE; i++) {
   10298:	3401      	adds	r4, #1
   1029a:	2c08      	cmp	r4, #8
   1029c:	f106 0608 	add.w	r6, r6, #8
   102a0:	d1f2      	bne.n	10288 <ll_rl_add+0xd0>
		rl[i].fal = 0U;
   102a2:	eb0b 0207 	add.w	r2, fp, r7
   102a6:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   102aa:	f36f 1145 	bfc	r1, #5, #1
   102ae:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   102b2:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   102b6:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   102b8:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   102bc:	f042 0201 	orr.w	r2, r2, #1
   102c0:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   102c4:	b005      	add	sp, #20
   102c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   102ca:	200c      	movs	r0, #12
}
   102cc:	b005      	add	sp, #20
   102ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   102d2:	2206      	movs	r2, #6
   102d4:	4630      	mov	r0, r6
   102d6:	4651      	mov	r1, sl
   102d8:	f007 fbff 	bl	17ada <memcmp>
   102dc:	2800      	cmp	r0, #0
   102de:	d1db      	bne.n	10298 <ll_rl_add+0xe0>
		rl[i].fal = 1U;
   102e0:	eb0b 0207 	add.w	r2, fp, r7
		fal[j].rl_idx = i;
   102e4:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   102e8:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   102ec:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   102ee:	f041 0120 	orr.w	r1, r1, #32
   102f2:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   102f6:	e7dc      	b.n	102b2 <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   102f8:	2007      	movs	r0, #7
}
   102fa:	b005      	add	sp, #20
   102fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   10300:	4b17      	ldr	r3, [pc, #92]	; (10360 <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   10302:	4a18      	ldr	r2, [pc, #96]	; (10364 <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   10304:	7819      	ldrb	r1, [r3, #0]
   10306:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   1030a:	5457      	strb	r7, [r2, r1]
   1030c:	4a16      	ldr	r2, [pc, #88]	; (10368 <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   1030e:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   10312:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   10316:	3101      	adds	r1, #1
	psrc += length - 1;
   10318:	f106 020f 	add.w	r2, r6, #15
   1031c:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1031e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   10322:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   10324:	f812 1901 	ldrb.w	r1, [r2], #-1
   10328:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   1032c:	42b2      	cmp	r2, r6
   1032e:	d1f9      	bne.n	10324 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   10330:	2800      	cmp	r0, #0
   10332:	d093      	beq.n	1025c <ll_rl_add+0xa4>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   10334:	9b00      	ldr	r3, [sp, #0]
   10336:	1dd8      	adds	r0, r3, #7
   10338:	4649      	mov	r1, r9
   1033a:	2210      	movs	r2, #16
   1033c:	4428      	add	r0, r5
   1033e:	f007 fbdd 	bl	17afc <memcpy>
		rl[i].local_rpa = NULL;
   10342:	eb0b 0207 	add.w	r2, fp, r7
   10346:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   1034a:	2100      	movs	r1, #0
   1034c:	6251      	str	r1, [r2, #36]	; 0x24
   1034e:	e785      	b.n	1025c <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   10350:	2012      	movs	r0, #18
}
   10352:	b005      	add	sp, #20
   10354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10358:	20001f84 	.word	0x20001f84
   1035c:	20001e5a 	.word	0x20001e5a
   10360:	20002790 	.word	0x20002790
   10364:	20001efc 	.word	0x20001efc
   10368:	20001f04 	.word	0x20001f04

0001036c <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   1036c:	2807      	cmp	r0, #7
   1036e:	d807      	bhi.n	10380 <ull_filter_lll_lrpa_used+0x14>
   10370:	4b04      	ldr	r3, [pc, #16]	; (10384 <ull_filter_lll_lrpa_used+0x18>)
   10372:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   10376:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1037a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1037e:	4770      	bx	lr
   10380:	2000      	movs	r0, #0
}
   10382:	4770      	bx	lr
   10384:	20001f84 	.word	0x20001f84

00010388 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   10388:	4b02      	ldr	r3, [pc, #8]	; (10394 <ull_filter_lll_irks_get+0xc>)
   1038a:	781b      	ldrb	r3, [r3, #0]
   1038c:	7003      	strb	r3, [r0, #0]
}
   1038e:	4802      	ldr	r0, [pc, #8]	; (10398 <ull_filter_lll_irks_get+0x10>)
   10390:	4770      	bx	lr
   10392:	bf00      	nop
   10394:	20002790 	.word	0x20002790
   10398:	20001f04 	.word	0x20001f04

0001039c <ull_filter_lll_rl_irk_idx>:
{
   1039c:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1039e:	4b20      	ldr	r3, [pc, #128]	; (10420 <ull_filter_lll_rl_irk_idx+0x84>)
   103a0:	781b      	ldrb	r3, [r3, #0]
   103a2:	4283      	cmp	r3, r0
{
   103a4:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   103a6:	d90c      	bls.n	103c2 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   103a8:	4b1e      	ldr	r3, [pc, #120]	; (10424 <ull_filter_lll_rl_irk_idx+0x88>)
   103aa:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   103ac:	2c07      	cmp	r4, #7
   103ae:	d819      	bhi.n	103e4 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   103b0:	4b1d      	ldr	r3, [pc, #116]	; (10428 <ull_filter_lll_rl_irk_idx+0x8c>)
   103b2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   103b6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   103ba:	07db      	lsls	r3, r3, #31
   103bc:	d520      	bpl.n	10400 <ull_filter_lll_rl_irk_idx+0x64>
}
   103be:	4620      	mov	r0, r4
   103c0:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   103c2:	4a1a      	ldr	r2, [pc, #104]	; (1042c <ull_filter_lll_rl_irk_idx+0x90>)
   103c4:	491a      	ldr	r1, [pc, #104]	; (10430 <ull_filter_lll_rl_irk_idx+0x94>)
   103c6:	481b      	ldr	r0, [pc, #108]	; (10434 <ull_filter_lll_rl_irk_idx+0x98>)
   103c8:	f240 336d 	movw	r3, #877	; 0x36d
   103cc:	f006 fdcf 	bl	16f6e <printk>
   103d0:	4040      	eors	r0, r0
   103d2:	f380 8811 	msr	BASEPRI, r0
   103d6:	f04f 0003 	mov.w	r0, #3
   103da:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   103dc:	4b11      	ldr	r3, [pc, #68]	; (10424 <ull_filter_lll_rl_irk_idx+0x88>)
   103de:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   103e0:	2c07      	cmp	r4, #7
   103e2:	d9e5      	bls.n	103b0 <ull_filter_lll_rl_irk_idx+0x14>
   103e4:	4a11      	ldr	r2, [pc, #68]	; (1042c <ull_filter_lll_rl_irk_idx+0x90>)
   103e6:	4914      	ldr	r1, [pc, #80]	; (10438 <ull_filter_lll_rl_irk_idx+0x9c>)
   103e8:	4812      	ldr	r0, [pc, #72]	; (10434 <ull_filter_lll_rl_irk_idx+0x98>)
   103ea:	f240 336f 	movw	r3, #879	; 0x36f
   103ee:	f006 fdbe 	bl	16f6e <printk>
   103f2:	4040      	eors	r0, r0
   103f4:	f380 8811 	msr	BASEPRI, r0
   103f8:	f04f 0003 	mov.w	r0, #3
   103fc:	df02      	svc	2
   103fe:	e7d7      	b.n	103b0 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   10400:	4a0a      	ldr	r2, [pc, #40]	; (1042c <ull_filter_lll_rl_irk_idx+0x90>)
   10402:	490e      	ldr	r1, [pc, #56]	; (1043c <ull_filter_lll_rl_irk_idx+0xa0>)
   10404:	480b      	ldr	r0, [pc, #44]	; (10434 <ull_filter_lll_rl_irk_idx+0x98>)
   10406:	f44f 735c 	mov.w	r3, #880	; 0x370
   1040a:	f006 fdb0 	bl	16f6e <printk>
   1040e:	4040      	eors	r0, r0
   10410:	f380 8811 	msr	BASEPRI, r0
   10414:	f04f 0003 	mov.w	r0, #3
   10418:	df02      	svc	2
}
   1041a:	4620      	mov	r0, r4
   1041c:	bd10      	pop	{r4, pc}
   1041e:	bf00      	nop
   10420:	20002790 	.word	0x20002790
   10424:	20001efc 	.word	0x20001efc
   10428:	20001f84 	.word	0x20001f84
   1042c:	0001bea8 	.word	0x0001bea8
   10430:	0001c094 	.word	0x0001c094
   10434:	0001b7c8 	.word	0x0001b7c8
   10438:	0001c0b4 	.word	0x0001c0b4
   1043c:	0001c088 	.word	0x0001c088

00010440 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   10440:	2807      	cmp	r0, #7
   10442:	d823      	bhi.n	1048c <ull_filter_lll_irk_in_fal+0x4c>
{
   10444:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   10446:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1044a:	4e11      	ldr	r6, [pc, #68]	; (10490 <ull_filter_lll_irk_in_fal+0x50>)
   1044c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   10450:	07db      	lsls	r3, r3, #31
   10452:	4604      	mov	r4, r0
   10454:	ea4f 0580 	mov.w	r5, r0, lsl #2
   10458:	d505      	bpl.n	10466 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   1045a:	442c      	add	r4, r5
   1045c:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   10460:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   10464:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   10466:	4a0b      	ldr	r2, [pc, #44]	; (10494 <ull_filter_lll_irk_in_fal+0x54>)
   10468:	490b      	ldr	r1, [pc, #44]	; (10498 <ull_filter_lll_irk_in_fal+0x58>)
   1046a:	480c      	ldr	r0, [pc, #48]	; (1049c <ull_filter_lll_irk_in_fal+0x5c>)
   1046c:	f240 337b 	movw	r3, #891	; 0x37b
   10470:	f006 fd7d 	bl	16f6e <printk>
   10474:	4040      	eors	r0, r0
   10476:	f380 8811 	msr	BASEPRI, r0
   1047a:	f04f 0003 	mov.w	r0, #3
   1047e:	df02      	svc	2
	return rl[rl_idx].fal;
   10480:	442c      	add	r4, r5
   10482:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   10486:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1048a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1048c:	2000      	movs	r0, #0
}
   1048e:	4770      	bx	lr
   10490:	20001f84 	.word	0x20001f84
   10494:	0001bea8 	.word	0x0001bea8
   10498:	0001bef8 	.word	0x0001bef8
   1049c:	0001b7c8 	.word	0x0001b7c8

000104a0 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   104a0:	7813      	ldrb	r3, [r2, #0]
   104a2:	2bff      	cmp	r3, #255	; 0xff
   104a4:	d11b      	bne.n	104de <ull_filter_lll_rl_addr_allowed+0x3e>
{
   104a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104aa:	4d19      	ldr	r5, [pc, #100]	; (10510 <ull_filter_lll_rl_addr_allowed+0x70>)
   104ac:	4604      	mov	r4, r0
   104ae:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   104b0:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   104b2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   104b6:	b2df      	uxtb	r7, r3
   104b8:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   104bc:	f01c 0001 	ands.w	r0, ip, #1
   104c0:	ea4f 0683 	mov.w	r6, r3, lsl #2
   104c4:	d003      	beq.n	104ce <ull_filter_lll_rl_addr_allowed+0x2e>
   104c6:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   104ca:	45a4      	cmp	ip, r4
   104cc:	d009      	beq.n	104e2 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   104ce:	3301      	adds	r3, #1
   104d0:	2b08      	cmp	r3, #8
   104d2:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   104d6:	d1ec      	bne.n	104b2 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   104d8:	2001      	movs	r0, #1
}
   104da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   104de:	2001      	movs	r0, #1
}
   104e0:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   104e2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   104e6:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   104e8:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   104ec:	f81c af01 	ldrb.w	sl, [ip, #1]!
   104f0:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   104f4:	45ca      	cmp	sl, r9
   104f6:	d1ea      	bne.n	104ce <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   104f8:	45dc      	cmp	ip, fp
   104fa:	d1f7      	bne.n	104ec <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   104fc:	4433      	add	r3, r6
				*rl_idx = i;
   104fe:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   10500:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   10504:	075a      	lsls	r2, r3, #29
   10506:	d5e8      	bpl.n	104da <ull_filter_lll_rl_addr_allowed+0x3a>
   10508:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1050c:	e7e5      	b.n	104da <ull_filter_lll_rl_addr_allowed+0x3a>
   1050e:	bf00      	nop
   10510:	20001f84 	.word	0x20001f84

00010514 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   10514:	4b02      	ldr	r3, [pc, #8]	; (10520 <ull_filter_lll_rl_enabled+0xc>)
   10516:	7818      	ldrb	r0, [r3, #0]
}
   10518:	3800      	subs	r0, #0
   1051a:	bf18      	it	ne
   1051c:	2001      	movne	r0, #1
   1051e:	4770      	bx	lr
   10520:	20002791 	.word	0x20002791

00010524 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10524:	4668      	mov	r0, sp
   10526:	f020 0107 	bic.w	r1, r0, #7
   1052a:	468d      	mov	sp, r1
   1052c:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1052e:	f002 f893 	bl	12658 <isr_radio>

	ISR_DIRECT_PM();
   10532:	f7f1 fe9d 	bl	2270 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   10536:	f7f1 ff8d 	bl	2454 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1053a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1053e:	4685      	mov	sp, r0
   10540:	4770      	bx	lr
   10542:	bf00      	nop

00010544 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   10544:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   10546:	4b09      	ldr	r3, [pc, #36]	; (1056c <rtc0_nrf5_isr+0x28>)
   10548:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1054c:	b93a      	cbnz	r2, 1055e <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1054e:	2001      	movs	r0, #1
   10550:	f7f5 fd10 	bl	5f74 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   10554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   10558:	2002      	movs	r0, #2
   1055a:	f7f5 bd0b 	b.w	5f74 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1055e:	2000      	movs	r0, #0
   10560:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   10564:	f7f6 fd76 	bl	7054 <ticker_trigger>
   10568:	e7f1      	b.n	1054e <rtc0_nrf5_isr+0xa>
   1056a:	bf00      	nop
   1056c:	4000b000 	.word	0x4000b000

00010570 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   10570:	2000      	movs	r0, #0
   10572:	f7f5 bcff 	b.w	5f74 <mayfly_run>
   10576:	bf00      	nop

00010578 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   10578:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1057a:	4b0e      	ldr	r3, [pc, #56]	; (105b4 <ticker_stop_op_cb+0x3c>)
   1057c:	4c0e      	ldr	r4, [pc, #56]	; (105b8 <ticker_stop_op_cb+0x40>)
   1057e:	781a      	ldrb	r2, [r3, #0]
   10580:	7823      	ldrb	r3, [r4, #0]
   10582:	429a      	cmp	r2, r3
   10584:	d006      	beq.n	10594 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   10586:	490d      	ldr	r1, [pc, #52]	; (105bc <ticker_stop_op_cb+0x44>)
   10588:	4a0d      	ldr	r2, [pc, #52]	; (105c0 <ticker_stop_op_cb+0x48>)
   1058a:	7809      	ldrb	r1, [r1, #0]
   1058c:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   1058e:	3301      	adds	r3, #1
   10590:	7023      	strb	r3, [r4, #0]
}
   10592:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   10594:	4a0b      	ldr	r2, [pc, #44]	; (105c4 <ticker_stop_op_cb+0x4c>)
   10596:	490c      	ldr	r1, [pc, #48]	; (105c8 <ticker_stop_op_cb+0x50>)
   10598:	480c      	ldr	r0, [pc, #48]	; (105cc <ticker_stop_op_cb+0x54>)
   1059a:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   1059e:	f006 fce6 	bl	16f6e <printk>
   105a2:	4040      	eors	r0, r0
   105a4:	f380 8811 	msr	BASEPRI, r0
   105a8:	f04f 0003 	mov.w	r0, #3
   105ac:	df02      	svc	2
	preempt_stop_ack++;
   105ae:	7823      	ldrb	r3, [r4, #0]
   105b0:	e7e9      	b.n	10586 <ticker_stop_op_cb+0xe>
   105b2:	bf00      	nop
   105b4:	20002797 	.word	0x20002797
   105b8:	20002796 	.word	0x20002796
   105bc:	20002792 	.word	0x20002792
   105c0:	20002793 	.word	0x20002793
   105c4:	0001c0bc 	.word	0x0001c0bc
   105c8:	0001c104 	.word	0x0001c104
   105cc:	0001b7c8 	.word	0x0001b7c8

000105d0 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   105d0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   105d2:	b9f8      	cbnz	r0, 10614 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   105d4:	4b1e      	ldr	r3, [pc, #120]	; (10650 <ticker_start_op_cb+0x80>)
   105d6:	4d1f      	ldr	r5, [pc, #124]	; (10654 <ticker_start_op_cb+0x84>)
   105d8:	781a      	ldrb	r2, [r3, #0]
   105da:	782b      	ldrb	r3, [r5, #0]
   105dc:	429a      	cmp	r2, r3
   105de:	d027      	beq.n	10630 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   105e0:	4a1d      	ldr	r2, [pc, #116]	; (10658 <ticker_start_op_cb+0x88>)
   105e2:	4c1e      	ldr	r4, [pc, #120]	; (1065c <ticker_start_op_cb+0x8c>)
   105e4:	7812      	ldrb	r2, [r2, #0]
   105e6:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   105e8:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   105ea:	4291      	cmp	r1, r2
	preempt_start_ack++;
   105ec:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   105ee:	b2d3      	uxtb	r3, r2
   105f0:	d00d      	beq.n	1060e <ticker_start_op_cb+0x3e>
   105f2:	4a1b      	ldr	r2, [pc, #108]	; (10660 <ticker_start_op_cb+0x90>)
   105f4:	491b      	ldr	r1, [pc, #108]	; (10664 <ticker_start_op_cb+0x94>)
   105f6:	481c      	ldr	r0, [pc, #112]	; (10668 <ticker_start_op_cb+0x98>)
   105f8:	f240 3306 	movw	r3, #774	; 0x306
   105fc:	f006 fcb7 	bl	16f6e <printk>
   10600:	4040      	eors	r0, r0
   10602:	f380 8811 	msr	BASEPRI, r0
   10606:	f04f 0003 	mov.w	r0, #3
   1060a:	df02      	svc	2
	preempt_req++;
   1060c:	7823      	ldrb	r3, [r4, #0]
   1060e:	3301      	adds	r3, #1
   10610:	7023      	strb	r3, [r4, #0]
}
   10612:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10614:	4a12      	ldr	r2, [pc, #72]	; (10660 <ticker_start_op_cb+0x90>)
   10616:	4915      	ldr	r1, [pc, #84]	; (1066c <ticker_start_op_cb+0x9c>)
   10618:	4813      	ldr	r0, [pc, #76]	; (10668 <ticker_start_op_cb+0x98>)
   1061a:	f240 3301 	movw	r3, #769	; 0x301
   1061e:	f006 fca6 	bl	16f6e <printk>
   10622:	4040      	eors	r0, r0
   10624:	f380 8811 	msr	BASEPRI, r0
   10628:	f04f 0003 	mov.w	r0, #3
   1062c:	df02      	svc	2
   1062e:	e7d1      	b.n	105d4 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   10630:	4a0b      	ldr	r2, [pc, #44]	; (10660 <ticker_start_op_cb+0x90>)
   10632:	490f      	ldr	r1, [pc, #60]	; (10670 <ticker_start_op_cb+0xa0>)
   10634:	480c      	ldr	r0, [pc, #48]	; (10668 <ticker_start_op_cb+0x98>)
   10636:	f240 3303 	movw	r3, #771	; 0x303
   1063a:	f006 fc98 	bl	16f6e <printk>
   1063e:	4040      	eors	r0, r0
   10640:	f380 8811 	msr	BASEPRI, r0
   10644:	f04f 0003 	mov.w	r0, #3
   10648:	df02      	svc	2
	preempt_start_ack++;
   1064a:	782b      	ldrb	r3, [r5, #0]
   1064c:	e7c8      	b.n	105e0 <ticker_start_op_cb+0x10>
   1064e:	bf00      	nop
   10650:	20002795 	.word	0x20002795
   10654:	20002794 	.word	0x20002794
   10658:	20002792 	.word	0x20002792
   1065c:	20002793 	.word	0x20002793
   10660:	0001c0bc 	.word	0x0001c0bc
   10664:	0001c154 	.word	0x0001c154
   10668:	0001b7c8 	.word	0x0001b7c8
   1066c:	0001bc88 	.word	0x0001bc88
   10670:	0001c12c 	.word	0x0001c12c

00010674 <isr_race>:
	radio_status_reset();
   10674:	f002 b904 	b.w	12880 <radio_status_reset>

00010678 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   10678:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1067a:	4a18      	ldr	r2, [pc, #96]	; (106dc <preempt_ticker_cb+0x64>)
   1067c:	4c18      	ldr	r4, [pc, #96]	; (106e0 <preempt_ticker_cb+0x68>)
   1067e:	7812      	ldrb	r2, [r2, #0]
   10680:	7823      	ldrb	r3, [r4, #0]
   10682:	429a      	cmp	r2, r3
   10684:	d01b      	beq.n	106be <preempt_ticker_cb+0x46>
	preempt_ack++;
   10686:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   10688:	4b16      	ldr	r3, [pc, #88]	; (106e4 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1068a:	3101      	adds	r1, #1
   1068c:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1068e:	2200      	movs	r2, #0
	preempt_ack++;
   10690:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   10692:	9903      	ldr	r1, [sp, #12]
   10694:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   10696:	2001      	movs	r0, #1
   10698:	4611      	mov	r1, r2
   1069a:	f7f5 fc13 	bl	5ec4 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1069e:	b900      	cbnz	r0, 106a2 <preempt_ticker_cb+0x2a>
}
   106a0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   106a2:	4a11      	ldr	r2, [pc, #68]	; (106e8 <preempt_ticker_cb+0x70>)
   106a4:	4911      	ldr	r1, [pc, #68]	; (106ec <preempt_ticker_cb+0x74>)
   106a6:	4812      	ldr	r0, [pc, #72]	; (106f0 <preempt_ticker_cb+0x78>)
   106a8:	f240 336d 	movw	r3, #877	; 0x36d
   106ac:	f006 fc5f 	bl	16f6e <printk>
   106b0:	4040      	eors	r0, r0
   106b2:	f380 8811 	msr	BASEPRI, r0
   106b6:	f04f 0003 	mov.w	r0, #3
   106ba:	df02      	svc	2
}
   106bc:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   106be:	4a0a      	ldr	r2, [pc, #40]	; (106e8 <preempt_ticker_cb+0x70>)
   106c0:	490c      	ldr	r1, [pc, #48]	; (106f4 <preempt_ticker_cb+0x7c>)
   106c2:	480b      	ldr	r0, [pc, #44]	; (106f0 <preempt_ticker_cb+0x78>)
   106c4:	f240 3367 	movw	r3, #871	; 0x367
   106c8:	f006 fc51 	bl	16f6e <printk>
   106cc:	4040      	eors	r0, r0
   106ce:	f380 8811 	msr	BASEPRI, r0
   106d2:	f04f 0003 	mov.w	r0, #3
   106d6:	df02      	svc	2
   106d8:	e7d5      	b.n	10686 <preempt_ticker_cb+0xe>
   106da:	bf00      	nop
   106dc:	20002793 	.word	0x20002793
   106e0:	20002792 	.word	0x20002792
   106e4:	200005d0 	.word	0x200005d0
   106e8:	0001c0bc 	.word	0x0001c0bc
   106ec:	0001ba64 	.word	0x0001ba64
   106f0:	0001b7c8 	.word	0x0001b7c8
   106f4:	0001c170 	.word	0x0001c170

000106f8 <preempt_ticker_stop>:
{
   106f8:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   106fa:	4917      	ldr	r1, [pc, #92]	; (10758 <preempt_ticker_stop+0x60>)
   106fc:	4a17      	ldr	r2, [pc, #92]	; (1075c <preempt_ticker_stop+0x64>)
   106fe:	780b      	ldrb	r3, [r1, #0]
   10700:	7812      	ldrb	r2, [r2, #0]
   10702:	429a      	cmp	r2, r3
{
   10704:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   10706:	d122      	bne.n	1074e <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   10708:	4b15      	ldr	r3, [pc, #84]	; (10760 <preempt_ticker_stop+0x68>)
   1070a:	4a16      	ldr	r2, [pc, #88]	; (10764 <preempt_ticker_stop+0x6c>)
   1070c:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   1070e:	7812      	ldrb	r2, [r2, #0]
   10710:	429a      	cmp	r2, r3
   10712:	d01c      	beq.n	1074e <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   10714:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   10716:	4b14      	ldr	r3, [pc, #80]	; (10768 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   10718:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1071a:	2200      	movs	r2, #0
	preempt_stop_req++;
   1071c:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1071e:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   10720:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   10722:	4611      	mov	r1, r2
   10724:	4610      	mov	r0, r2
   10726:	f7f6 fd8d 	bl	7244 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1072a:	4604      	mov	r4, r0
   1072c:	b178      	cbz	r0, 1074e <preempt_ticker_stop+0x56>
   1072e:	2802      	cmp	r0, #2
   10730:	d00e      	beq.n	10750 <preempt_ticker_stop+0x58>
   10732:	4a0e      	ldr	r2, [pc, #56]	; (1076c <preempt_ticker_stop+0x74>)
   10734:	490e      	ldr	r1, [pc, #56]	; (10770 <preempt_ticker_stop+0x78>)
   10736:	480f      	ldr	r0, [pc, #60]	; (10774 <preempt_ticker_stop+0x7c>)
   10738:	f240 3359 	movw	r3, #857	; 0x359
   1073c:	f006 fc17 	bl	16f6e <printk>
   10740:	4040      	eors	r0, r0
   10742:	f380 8811 	msr	BASEPRI, r0
   10746:	f04f 0003 	mov.w	r0, #3
   1074a:	df02      	svc	2
   1074c:	e000      	b.n	10750 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   1074e:	2400      	movs	r4, #0
}
   10750:	4620      	mov	r0, r4
   10752:	b002      	add	sp, #8
   10754:	bd10      	pop	{r4, pc}
   10756:	bf00      	nop
   10758:	20002797 	.word	0x20002797
   1075c:	20002796 	.word	0x20002796
   10760:	20002792 	.word	0x20002792
   10764:	20002793 	.word	0x20002793
   10768:	00010579 	.word	0x00010579
   1076c:	0001c0bc 	.word	0x0001c0bc
   10770:	0001bb38 	.word	0x0001bb38
   10774:	0001b7c8 	.word	0x0001b7c8

00010778 <preempt_ticker_start>:
{
   10778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   1077c:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   1077e:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   10782:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   10784:	4b2a      	ldr	r3, [pc, #168]	; (10830 <preempt_ticker_start+0xb8>)
   10786:	4f2b      	ldr	r7, [pc, #172]	; (10834 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   10788:	68d6      	ldr	r6, [r2, #12]
{
   1078a:	460d      	mov	r5, r1
   1078c:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   1078e:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   10790:	6890      	ldr	r0, [r2, #8]
   10792:	6853      	ldr	r3, [r2, #4]
   10794:	4298      	cmp	r0, r3
   10796:	bf2c      	ite	cs
   10798:	ebc6 0600 	rsbcs	r6, r6, r0
   1079c:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   107a0:	783b      	ldrb	r3, [r7, #0]
   107a2:	4299      	cmp	r1, r3
{
   107a4:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   107a6:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   107aa:	d033      	beq.n	10814 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   107ac:	2c00      	cmp	r4, #0
   107ae:	d03a      	beq.n	10826 <preempt_ticker_start+0xae>
   107b0:	7f23      	ldrb	r3, [r4, #28]
   107b2:	079b      	lsls	r3, r3, #30
   107b4:	d437      	bmi.n	10826 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   107b6:	f8df a080 	ldr.w	sl, [pc, #128]	; 10838 <preempt_ticker_start+0xc0>
   107ba:	f8da 0000 	ldr.w	r0, [sl]
   107be:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   107c2:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   107c6:	d022      	beq.n	1080e <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   107c8:	f7ff ff96 	bl	106f8 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   107cc:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   107ce:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   107d0:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   107d4:	f043 0302 	orr.w	r3, r3, #2
   107d8:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   107da:	4620      	mov	r0, r4
   107dc:	69a3      	ldr	r3, [r4, #24]
   107de:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   107e0:	4b16      	ldr	r3, [pc, #88]	; (1083c <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   107e2:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   107e4:	9600      	str	r6, [sp, #0]
   107e6:	e9cd 3507 	strd	r3, r5, [sp, #28]
   107ea:	4b15      	ldr	r3, [pc, #84]	; (10840 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   107ec:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   107f0:	2200      	movs	r2, #0
	preempt_start_req++;
   107f2:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   107f4:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   107f8:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   107fa:	e9cd 2203 	strd	r2, r2, [sp, #12]
   107fe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   10802:	4643      	mov	r3, r8
   10804:	4611      	mov	r1, r2
   10806:	4610      	mov	r0, r2
	preempt_start_req++;
   10808:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1080a:	f7f6 fc91 	bl	7130 <ticker_start>
}
   1080e:	b00a      	add	sp, #40	; 0x28
   10810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   10814:	4b0b      	ldr	r3, [pc, #44]	; (10844 <preempt_ticker_start+0xcc>)
   10816:	4a0c      	ldr	r2, [pc, #48]	; (10848 <preempt_ticker_start+0xd0>)
   10818:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1081a:	7812      	ldrb	r2, [r2, #0]
   1081c:	429a      	cmp	r2, r3
   1081e:	d1c5      	bne.n	107ac <preempt_ticker_start+0x34>
   10820:	f8df a014 	ldr.w	sl, [pc, #20]	; 10838 <preempt_ticker_start+0xc0>
   10824:	e7dc      	b.n	107e0 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   10826:	2000      	movs	r0, #0
}
   10828:	b00a      	add	sp, #40	; 0x28
   1082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1082e:	bf00      	nop
   10830:	20002794 	.word	0x20002794
   10834:	20002795 	.word	0x20002795
   10838:	20002114 	.word	0x20002114
   1083c:	000105d1 	.word	0x000105d1
   10840:	00010679 	.word	0x00010679
   10844:	20002792 	.word	0x20002792
   10848:	20002793 	.word	0x20002793

0001084c <preempt>:

static void preempt(void *param)
{
   1084c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1084e:	4e4b      	ldr	r6, [pc, #300]	; (1097c <preempt+0x130>)
   10850:	68b3      	ldr	r3, [r6, #8]
{
   10852:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   10854:	b1b3      	cbz	r3, 10884 <preempt+0x38>
   10856:	6833      	ldr	r3, [r6, #0]
   10858:	b1a3      	cbz	r3, 10884 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1085a:	23ff      	movs	r3, #255	; 0xff
   1085c:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   1085e:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   10862:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   10866:	f7f8 ffc1 	bl	97ec <ull_prepare_dequeue_iter>
	if (!next) {
   1086a:	4601      	mov	r1, r0
   1086c:	b150      	cbz	r0, 10884 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   1086e:	7f0b      	ldrb	r3, [r1, #28]
   10870:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   10874:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   10878:	d006      	beq.n	10888 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1087a:	f7f8 ffb7 	bl	97ec <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1087e:	4601      	mov	r1, r0
   10880:	2800      	cmp	r0, #0
   10882:	d1f4      	bne.n	1086e <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   10884:	b009      	add	sp, #36	; 0x24
   10886:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   10888:	428d      	cmp	r5, r1
   1088a:	d126      	bne.n	108da <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1088c:	6873      	ldr	r3, [r6, #4]
   1088e:	6831      	ldr	r1, [r6, #0]
   10890:	68e8      	ldr	r0, [r5, #12]
   10892:	aa03      	add	r2, sp, #12
   10894:	4798      	blx	r3
	if (!err) {
   10896:	4607      	mov	r7, r0
   10898:	b1b0      	cbz	r0, 108c8 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   1089a:	68b3      	ldr	r3, [r6, #8]
   1089c:	6831      	ldr	r1, [r6, #0]
   1089e:	4620      	mov	r0, r4
   108a0:	4798      	blx	r3
	if (err == -EAGAIN) {
   108a2:	f117 0f0b 	cmn.w	r7, #11
   108a6:	d02c      	beq.n	10902 <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   108a8:	378c      	adds	r7, #140	; 0x8c
   108aa:	d0eb      	beq.n	10884 <preempt+0x38>
   108ac:	4a34      	ldr	r2, [pc, #208]	; (10980 <preempt+0x134>)
   108ae:	4935      	ldr	r1, [pc, #212]	; (10984 <preempt+0x138>)
   108b0:	4835      	ldr	r0, [pc, #212]	; (10988 <preempt+0x13c>)
   108b2:	f240 33c7 	movw	r3, #967	; 0x3c7
   108b6:	f006 fb5a 	bl	16f6e <printk>
   108ba:	4040      	eors	r0, r0
   108bc:	f380 8811 	msr	BASEPRI, r0
   108c0:	f04f 0003 	mov.w	r0, #3
   108c4:	df02      	svc	2
   108c6:	e7dd      	b.n	10884 <preempt+0x38>
		next->is_aborted = 1;
   108c8:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   108ca:	69aa      	ldr	r2, [r5, #24]
   108cc:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   108ce:	f043 0302 	orr.w	r3, r3, #2
   108d2:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   108d4:	4628      	mov	r0, r5
   108d6:	4790      	blx	r2
		return;
   108d8:	e7d4      	b.n	10884 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   108da:	4620      	mov	r0, r4
   108dc:	f7ff ff4c 	bl	10778 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   108e0:	f030 0302 	bics.w	r3, r0, #2
   108e4:	d0ce      	beq.n	10884 <preempt+0x38>
   108e6:	4a26      	ldr	r2, [pc, #152]	; (10980 <preempt+0x134>)
   108e8:	4928      	ldr	r1, [pc, #160]	; (1098c <preempt+0x140>)
   108ea:	4827      	ldr	r0, [pc, #156]	; (10988 <preempt+0x13c>)
   108ec:	f240 3393 	movw	r3, #915	; 0x393
   108f0:	f006 fb3d 	bl	16f6e <printk>
   108f4:	4040      	eors	r0, r0
   108f6:	f380 8811 	msr	BASEPRI, r0
   108fa:	f04f 0003 	mov.w	r0, #3
   108fe:	df02      	svc	2
   10900:	e7c0      	b.n	10884 <preempt+0x38>
		iter_idx = UINT8_MAX;
   10902:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   10904:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   10908:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1090c:	f7f8 ff6e 	bl	97ec <ull_prepare_dequeue_iter>
		while (iter) {
   10910:	b928      	cbnz	r0, 1091e <preempt+0xd2>
   10912:	e013      	b.n	1093c <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   10914:	f10d 000b 	add.w	r0, sp, #11
   10918:	f7f8 ff68 	bl	97ec <ull_prepare_dequeue_iter>
		while (iter) {
   1091c:	b170      	cbz	r0, 1093c <preempt+0xf0>
			if (!iter->is_aborted &&
   1091e:	7f03      	ldrb	r3, [r0, #28]
   10920:	079a      	lsls	r2, r3, #30
   10922:	d4f7      	bmi.n	10914 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   10924:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   10926:	6831      	ldr	r1, [r6, #0]
   10928:	4291      	cmp	r1, r2
   1092a:	d1f3      	bne.n	10914 <preempt+0xc8>
				iter->is_aborted = 1;
   1092c:	f043 0302 	orr.w	r3, r3, #2
   10930:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   10932:	6983      	ldr	r3, [r0, #24]
   10934:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   10936:	f88d 400b 	strb.w	r4, [sp, #11]
   1093a:	e7eb      	b.n	10914 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   1093c:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   1093e:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   10940:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   10942:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   10944:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   10948:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   1094a:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   1094c:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1094e:	9b03      	ldr	r3, [sp, #12]
   10950:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   10954:	aa04      	add	r2, sp, #16
   10956:	f7f8 ff0b 	bl	9770 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   1095a:	2800      	cmp	r0, #0
   1095c:	d192      	bne.n	10884 <preempt+0x38>
   1095e:	4a08      	ldr	r2, [pc, #32]	; (10980 <preempt+0x134>)
   10960:	490b      	ldr	r1, [pc, #44]	; (10990 <preempt+0x144>)
   10962:	4809      	ldr	r0, [pc, #36]	; (10988 <preempt+0x13c>)
   10964:	f240 33c5 	movw	r3, #965	; 0x3c5
   10968:	f006 fb01 	bl	16f6e <printk>
   1096c:	4040      	eors	r0, r0
   1096e:	f380 8811 	msr	BASEPRI, r0
   10972:	f04f 0003 	mov.w	r0, #3
   10976:	df02      	svc	2
   10978:	e784      	b.n	10884 <preempt+0x38>
   1097a:	bf00      	nop
   1097c:	20002100 	.word	0x20002100
   10980:	0001c0bc 	.word	0x0001c0bc
   10984:	0001c194 	.word	0x0001c194
   10988:	0001b7c8 	.word	0x0001b7c8
   1098c:	0001bb38 	.word	0x0001bb38
   10990:	0001c18c 	.word	0x0001c18c

00010994 <lll_init>:
{
   10994:	b510      	push	{r4, lr}
   10996:	4816      	ldr	r0, [pc, #88]	; (109f0 <lll_init+0x5c>)
   10998:	f005 f918 	bl	15bcc <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1099c:	4b15      	ldr	r3, [pc, #84]	; (109f4 <lll_init+0x60>)
   1099e:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   109a0:	b310      	cbz	r0, 109e8 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   109a2:	4b15      	ldr	r3, [pc, #84]	; (109f8 <lll_init+0x64>)
   109a4:	2400      	movs	r4, #0
   109a6:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   109a8:	f000 fafa 	bl	10fa0 <lll_clock_init>
	if (err < 0) {
   109ac:	2800      	cmp	r0, #0
   109ae:	db1a      	blt.n	109e6 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   109b0:	4621      	mov	r1, r4
   109b2:	2001      	movs	r0, #1
   109b4:	4622      	mov	r2, r4
   109b6:	f7f1 fc43 	bl	2240 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   109ba:	4622      	mov	r2, r4
   109bc:	200b      	movs	r0, #11
   109be:	2101      	movs	r1, #1
   109c0:	f7f1 fc3e 	bl	2240 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   109c4:	4622      	mov	r2, r4
   109c6:	4621      	mov	r1, r4
   109c8:	2018      	movs	r0, #24
   109ca:	f7f1 fc39 	bl	2240 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   109ce:	2001      	movs	r0, #1
   109d0:	f7f1 fc04 	bl	21dc <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   109d4:	200b      	movs	r0, #11
   109d6:	f7f1 fc01 	bl	21dc <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   109da:	2018      	movs	r0, #24
   109dc:	f7f1 fbfe 	bl	21dc <arch_irq_enable>
	radio_setup();
   109e0:	f001 fe6a 	bl	126b8 <radio_setup>
	return 0;
   109e4:	4620      	mov	r0, r4
}
   109e6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   109e8:	f06f 0012 	mvn.w	r0, #18
}
   109ec:	bd10      	pop	{r4, pc}
   109ee:	bf00      	nop
   109f0:	0001c1a0 	.word	0x0001c1a0
   109f4:	200020fc 	.word	0x200020fc
   109f8:	20002100 	.word	0x20002100

000109fc <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   109fc:	4a05      	ldr	r2, [pc, #20]	; (10a14 <lll_csrand_get+0x18>)
{
   109fe:	b410      	push	{r4}
   10a00:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   10a02:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   10a04:	6884      	ldr	r4, [r0, #8]
   10a06:	6824      	ldr	r4, [r4, #0]
   10a08:	b28a      	uxth	r2, r1
   10a0a:	4619      	mov	r1, r3
   10a0c:	4623      	mov	r3, r4
}
   10a0e:	bc10      	pop	{r4}
   10a10:	4718      	bx	r3
   10a12:	bf00      	nop
   10a14:	200020fc 	.word	0x200020fc

00010a18 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   10a18:	4b08      	ldr	r3, [pc, #32]	; (10a3c <lll_csrand_isr_get+0x24>)
{
   10a1a:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   10a1c:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   10a1e:	68ab      	ldr	r3, [r5, #8]
   10a20:	685c      	ldr	r4, [r3, #4]
   10a22:	b13c      	cbz	r4, 10a34 <lll_csrand_isr_get+0x1c>
   10a24:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   10a26:	46a4      	mov	ip, r4
   10a28:	4601      	mov	r1, r0
   10a2a:	b292      	uxth	r2, r2
   10a2c:	4628      	mov	r0, r5
   10a2e:	2300      	movs	r3, #0
}
   10a30:	bc30      	pop	{r4, r5}
   10a32:	4760      	bx	ip
   10a34:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10a38:	bc30      	pop	{r4, r5}
   10a3a:	4770      	bx	lr
   10a3c:	200020fc 	.word	0x200020fc

00010a40 <lll_rand_isr_get>:
   10a40:	4b08      	ldr	r3, [pc, #32]	; (10a64 <lll_rand_isr_get+0x24>)
   10a42:	b430      	push	{r4, r5}
   10a44:	681d      	ldr	r5, [r3, #0]
   10a46:	68ab      	ldr	r3, [r5, #8]
   10a48:	685c      	ldr	r4, [r3, #4]
   10a4a:	b13c      	cbz	r4, 10a5c <lll_rand_isr_get+0x1c>
   10a4c:	460a      	mov	r2, r1
   10a4e:	46a4      	mov	ip, r4
   10a50:	4601      	mov	r1, r0
   10a52:	b292      	uxth	r2, r2
   10a54:	4628      	mov	r0, r5
   10a56:	2300      	movs	r3, #0
   10a58:	bc30      	pop	{r4, r5}
   10a5a:	4760      	bx	ip
   10a5c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   10a60:	bc30      	pop	{r4, r5}
   10a62:	4770      	bx	lr
   10a64:	200020fc 	.word	0x200020fc

00010a68 <lll_reset>:
}
   10a68:	2000      	movs	r0, #0
   10a6a:	4770      	bx	lr

00010a6c <lll_disable>:
{
   10a6c:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   10a6e:	4604      	mov	r4, r0
{
   10a70:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   10a72:	b378      	cbz	r0, 10ad4 <lll_disable+0x68>
   10a74:	4b23      	ldr	r3, [pc, #140]	; (10b04 <lll_disable+0x98>)
   10a76:	681a      	ldr	r2, [r3, #0]
   10a78:	4282      	cmp	r2, r0
   10a7a:	d025      	beq.n	10ac8 <lll_disable+0x5c>
		idx = UINT8_MAX;
   10a7c:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   10a7e:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   10a82:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   10a86:	f7f8 feb1 	bl	97ec <ull_prepare_dequeue_iter>
		while (next) {
   10a8a:	b938      	cbnz	r0, 10a9c <lll_disable+0x30>
   10a8c:	e01a      	b.n	10ac4 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   10a8e:	428c      	cmp	r4, r1
   10a90:	d00a      	beq.n	10aa8 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   10a92:	f10d 0007 	add.w	r0, sp, #7
   10a96:	f7f8 fea9 	bl	97ec <ull_prepare_dequeue_iter>
		while (next) {
   10a9a:	b198      	cbz	r0, 10ac4 <lll_disable+0x58>
			if (!next->is_aborted &&
   10a9c:	7f03      	ldrb	r3, [r0, #28]
   10a9e:	079b      	lsls	r3, r3, #30
   10aa0:	d4f7      	bmi.n	10a92 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   10aa2:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   10aa4:	2c00      	cmp	r4, #0
   10aa6:	d1f2      	bne.n	10a8e <lll_disable+0x22>
				next->is_aborted = 1;
   10aa8:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   10aaa:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   10aac:	f043 0302 	orr.w	r3, r3, #2
   10ab0:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   10ab2:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   10ab4:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   10ab8:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   10abc:	f7f8 fe96 	bl	97ec <ull_prepare_dequeue_iter>
		while (next) {
   10ac0:	2800      	cmp	r0, #0
   10ac2:	d1eb      	bne.n	10a9c <lll_disable+0x30>
}
   10ac4:	b003      	add	sp, #12
   10ac6:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   10ac8:	689b      	ldr	r3, [r3, #8]
   10aca:	b16b      	cbz	r3, 10ae8 <lll_disable+0x7c>
   10acc:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   10ace:	2000      	movs	r0, #0
   10ad0:	4798      	blx	r3
   10ad2:	e7d3      	b.n	10a7c <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   10ad4:	4a0b      	ldr	r2, [pc, #44]	; (10b04 <lll_disable+0x98>)
   10ad6:	6893      	ldr	r3, [r2, #8]
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d0cf      	beq.n	10a7c <lll_disable+0x10>
   10adc:	6811      	ldr	r1, [r2, #0]
   10ade:	2900      	cmp	r1, #0
   10ae0:	d0cc      	beq.n	10a7c <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   10ae2:	2000      	movs	r0, #0
   10ae4:	4798      	blx	r3
   10ae6:	e7c9      	b.n	10a7c <lll_disable+0x10>
			LL_ASSERT(!param);
   10ae8:	4a07      	ldr	r2, [pc, #28]	; (10b08 <lll_disable+0x9c>)
   10aea:	4908      	ldr	r1, [pc, #32]	; (10b0c <lll_disable+0xa0>)
   10aec:	4808      	ldr	r0, [pc, #32]	; (10b10 <lll_disable+0xa4>)
   10aee:	23fd      	movs	r3, #253	; 0xfd
   10af0:	f006 fa3d 	bl	16f6e <printk>
   10af4:	4040      	eors	r0, r0
   10af6:	f380 8811 	msr	BASEPRI, r0
   10afa:	f04f 0003 	mov.w	r0, #3
   10afe:	df02      	svc	2
   10b00:	e7bc      	b.n	10a7c <lll_disable+0x10>
   10b02:	bf00      	nop
   10b04:	20002100 	.word	0x20002100
   10b08:	0001c0bc 	.word	0x0001c0bc
   10b0c:	0001c1a4 	.word	0x0001c1a4
   10b10:	0001b7c8 	.word	0x0001b7c8

00010b14 <lll_prepare_done>:
}
   10b14:	2000      	movs	r0, #0
   10b16:	4770      	bx	lr

00010b18 <lll_done>:
{
   10b18:	b538      	push	{r3, r4, r5, lr}
   10b1a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   10b1c:	f7f8 fe58 	bl	97d0 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   10b20:	b154      	cbz	r4, 10b38 <lll_done+0x20>
   10b22:	b310      	cbz	r0, 10b6a <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   10b24:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   10b26:	2000      	movs	r0, #0
   10b28:	f7f8 fe80 	bl	982c <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   10b2c:	4620      	mov	r0, r4
   10b2e:	f7f8 fee1 	bl	98f4 <ull_event_done>
	LL_ASSERT(evdone);
   10b32:	b158      	cbz	r0, 10b4c <lll_done+0x34>
}
   10b34:	2000      	movs	r0, #0
   10b36:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   10b38:	4d1a      	ldr	r5, [pc, #104]	; (10ba4 <lll_done+0x8c>)
   10b3a:	68ab      	ldr	r3, [r5, #8]
   10b3c:	b31b      	cbz	r3, 10b86 <lll_done+0x6e>
		param = event.curr.param;
   10b3e:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   10b40:	2300      	movs	r3, #0
   10b42:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   10b44:	602b      	str	r3, [r5, #0]
		if (param) {
   10b46:	2c00      	cmp	r4, #0
   10b48:	d1ec      	bne.n	10b24 <lll_done+0xc>
   10b4a:	e7ec      	b.n	10b26 <lll_done+0xe>
	LL_ASSERT(evdone);
   10b4c:	4a16      	ldr	r2, [pc, #88]	; (10ba8 <lll_done+0x90>)
   10b4e:	4917      	ldr	r1, [pc, #92]	; (10bac <lll_done+0x94>)
   10b50:	4817      	ldr	r0, [pc, #92]	; (10bb0 <lll_done+0x98>)
   10b52:	f240 136d 	movw	r3, #365	; 0x16d
   10b56:	f006 fa0a 	bl	16f6e <printk>
   10b5a:	4040      	eors	r0, r0
   10b5c:	f380 8811 	msr	BASEPRI, r0
   10b60:	f04f 0003 	mov.w	r0, #3
   10b64:	df02      	svc	2
}
   10b66:	2000      	movs	r0, #0
   10b68:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   10b6a:	4a0f      	ldr	r2, [pc, #60]	; (10ba8 <lll_done+0x90>)
   10b6c:	4911      	ldr	r1, [pc, #68]	; (10bb4 <lll_done+0x9c>)
   10b6e:	4810      	ldr	r0, [pc, #64]	; (10bb0 <lll_done+0x98>)
   10b70:	f240 1337 	movw	r3, #311	; 0x137
   10b74:	f006 f9fb 	bl	16f6e <printk>
   10b78:	4040      	eors	r0, r0
   10b7a:	f380 8811 	msr	BASEPRI, r0
   10b7e:	f04f 0003 	mov.w	r0, #3
   10b82:	df02      	svc	2
   10b84:	e7ce      	b.n	10b24 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   10b86:	4a08      	ldr	r2, [pc, #32]	; (10ba8 <lll_done+0x90>)
   10b88:	490b      	ldr	r1, [pc, #44]	; (10bb8 <lll_done+0xa0>)
   10b8a:	4809      	ldr	r0, [pc, #36]	; (10bb0 <lll_done+0x98>)
   10b8c:	f240 133d 	movw	r3, #317	; 0x13d
   10b90:	f006 f9ed 	bl	16f6e <printk>
   10b94:	4040      	eors	r0, r0
   10b96:	f380 8811 	msr	BASEPRI, r0
   10b9a:	f04f 0003 	mov.w	r0, #3
   10b9e:	df02      	svc	2
   10ba0:	e7cd      	b.n	10b3e <lll_done+0x26>
   10ba2:	bf00      	nop
   10ba4:	20002100 	.word	0x20002100
   10ba8:	0001c0bc 	.word	0x0001c0bc
   10bac:	0001c1d0 	.word	0x0001c1d0
   10bb0:	0001b7c8 	.word	0x0001b7c8
   10bb4:	0001c1ac 	.word	0x0001c1ac
   10bb8:	0001c1bc 	.word	0x0001c1bc

00010bbc <lll_is_abort_cb>:
}
   10bbc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   10bc0:	4770      	bx	lr
   10bc2:	bf00      	nop

00010bc4 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   10bc4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   10bc8:	2a00      	cmp	r2, #0
   10bca:	db04      	blt.n	10bd6 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   10bcc:	429a      	cmp	r2, r3
   10bce:	bf38      	it	cc
   10bd0:	461a      	movcc	r2, r3
   10bd2:	4610      	mov	r0, r2
}
   10bd4:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   10bd6:	68c0      	ldr	r0, [r0, #12]
   10bd8:	4298      	cmp	r0, r3
   10bda:	bf38      	it	cc
   10bdc:	4618      	movcc	r0, r3
   10bde:	4770      	bx	lr

00010be0 <lll_preempt_calc>:
{
   10be0:	b510      	push	{r4, lr}
   10be2:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   10be4:	f7f6 fb70 	bl	72c8 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   10be8:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   10bea:	0203      	lsls	r3, r0, #8
   10bec:	d405      	bmi.n	10bfa <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   10bee:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   10bf0:	2809      	cmp	r0, #9
   10bf2:	bf94      	ite	ls
   10bf4:	2000      	movls	r0, #0
   10bf6:	2001      	movhi	r0, #1
}
   10bf8:	bd10      	pop	{r4, pc}
		return 0;
   10bfa:	2000      	movs	r0, #0
}
   10bfc:	bd10      	pop	{r4, pc}
   10bfe:	bf00      	nop

00010c00 <lll_chan_set>:
	switch (chan) {
   10c00:	2826      	cmp	r0, #38	; 0x26
{
   10c02:	b510      	push	{r4, lr}
   10c04:	4604      	mov	r4, r0
	switch (chan) {
   10c06:	d01c      	beq.n	10c42 <lll_chan_set+0x42>
   10c08:	2827      	cmp	r0, #39	; 0x27
   10c0a:	d012      	beq.n	10c32 <lll_chan_set+0x32>
   10c0c:	2825      	cmp	r0, #37	; 0x25
   10c0e:	d008      	beq.n	10c22 <lll_chan_set+0x22>
		if (chan < 11) {
   10c10:	280a      	cmp	r0, #10
   10c12:	d91e      	bls.n	10c52 <lll_chan_set+0x52>
		} else if (chan < 40) {
   10c14:	2827      	cmp	r0, #39	; 0x27
   10c16:	d821      	bhi.n	10c5c <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   10c18:	3003      	adds	r0, #3
   10c1a:	0040      	lsls	r0, r0, #1
   10c1c:	f001 fda8 	bl	12770 <radio_freq_chan_set>
   10c20:	e002      	b.n	10c28 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   10c22:	2002      	movs	r0, #2
   10c24:	f001 fda4 	bl	12770 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   10c28:	4620      	mov	r0, r4
}
   10c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   10c2e:	f001 bda5 	b.w	1277c <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   10c32:	2050      	movs	r0, #80	; 0x50
   10c34:	f001 fd9c 	bl	12770 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   10c38:	4620      	mov	r0, r4
}
   10c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   10c3e:	f001 bd9d 	b.w	1277c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   10c42:	201a      	movs	r0, #26
   10c44:	f001 fd94 	bl	12770 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   10c48:	4620      	mov	r0, r4
}
   10c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   10c4e:	f001 bd95 	b.w	1277c <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   10c52:	3002      	adds	r0, #2
   10c54:	0040      	lsls	r0, r0, #1
   10c56:	f001 fd8b 	bl	12770 <radio_freq_chan_set>
   10c5a:	e7e5      	b.n	10c28 <lll_chan_set+0x28>
			LL_ASSERT(0);
   10c5c:	4a06      	ldr	r2, [pc, #24]	; (10c78 <lll_chan_set+0x78>)
   10c5e:	4907      	ldr	r1, [pc, #28]	; (10c7c <lll_chan_set+0x7c>)
   10c60:	4807      	ldr	r0, [pc, #28]	; (10c80 <lll_chan_set+0x80>)
   10c62:	f44f 73ed 	mov.w	r3, #474	; 0x1da
   10c66:	f006 f982 	bl	16f6e <printk>
   10c6a:	4040      	eors	r0, r0
   10c6c:	f380 8811 	msr	BASEPRI, r0
   10c70:	f04f 0003 	mov.w	r0, #3
   10c74:	df02      	svc	2
   10c76:	e7d7      	b.n	10c28 <lll_chan_set+0x28>
   10c78:	0001c0bc 	.word	0x0001c0bc
   10c7c:	0001b828 	.word	0x0001b828
   10c80:	0001b7c8 	.word	0x0001b7c8

00010c84 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   10c84:	f001 bdda 	b.w	1283c <radio_rx_ready_delay_get>

00010c88 <lll_isr_tx_status_reset>:
{
   10c88:	b508      	push	{r3, lr}
	radio_status_reset();
   10c8a:	f001 fdf9 	bl	12880 <radio_status_reset>
}
   10c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   10c92:	f001 bf4b 	b.w	12b2c <radio_tmr_status_reset>
   10c96:	bf00      	nop

00010c98 <lll_isr_rx_status_reset>:
{
   10c98:	b508      	push	{r3, lr}
	radio_status_reset();
   10c9a:	f001 fdf1 	bl	12880 <radio_status_reset>
	radio_tmr_status_reset();
   10c9e:	f001 ff45 	bl	12b2c <radio_tmr_status_reset>
}
   10ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   10ca6:	f001 beed 	b.w	12a84 <radio_rssi_status_reset>
   10caa:	bf00      	nop

00010cac <lll_isr_status_reset>:
{
   10cac:	b508      	push	{r3, lr}
	radio_status_reset();
   10cae:	f001 fde7 	bl	12880 <radio_status_reset>
	radio_tmr_status_reset();
   10cb2:	f001 ff3b 	bl	12b2c <radio_tmr_status_reset>
	radio_filter_status_reset();
   10cb6:	f001 ff21 	bl	12afc <radio_filter_status_reset>
	radio_ar_status_reset();
   10cba:	f002 f8f9 	bl	12eb0 <radio_ar_status_reset>
}
   10cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   10cc2:	f001 bedf 	b.w	12a84 <radio_rssi_status_reset>
   10cc6:	bf00      	nop

00010cc8 <lll_isr_cleanup>:
{
   10cc8:	b508      	push	{r3, lr}
   10cca:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   10ccc:	4815      	ldr	r0, [pc, #84]	; (10d24 <lll_isr_cleanup+0x5c>)
   10cce:	f001 fcd3 	bl	12678 <radio_isr_set>
	if (!radio_is_idle()) {
   10cd2:	f001 fdf5 	bl	128c0 <radio_is_idle>
   10cd6:	b150      	cbz	r0, 10cee <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   10cd8:	f001 ffcc 	bl	12c74 <radio_tmr_stop>
	err = lll_hfclock_off();
   10cdc:	f000 f9a4 	bl	11028 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10ce0:	2800      	cmp	r0, #0
   10ce2:	db0c      	blt.n	10cfe <lll_isr_cleanup+0x36>
}
   10ce4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10ce8:	2000      	movs	r0, #0
   10cea:	f7ff bf15 	b.w	10b18 <lll_done>
		radio_disable();
   10cee:	f001 fdb3 	bl	12858 <radio_disable>
	radio_tmr_stop();
   10cf2:	f001 ffbf 	bl	12c74 <radio_tmr_stop>
	err = lll_hfclock_off();
   10cf6:	f000 f997 	bl	11028 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10cfa:	2800      	cmp	r0, #0
   10cfc:	daf2      	bge.n	10ce4 <lll_isr_cleanup+0x1c>
   10cfe:	4a0a      	ldr	r2, [pc, #40]	; (10d28 <lll_isr_cleanup+0x60>)
   10d00:	490a      	ldr	r1, [pc, #40]	; (10d2c <lll_isr_cleanup+0x64>)
   10d02:	480b      	ldr	r0, [pc, #44]	; (10d30 <lll_isr_cleanup+0x68>)
   10d04:	f240 233d 	movw	r3, #573	; 0x23d
   10d08:	f006 f931 	bl	16f6e <printk>
   10d0c:	4040      	eors	r0, r0
   10d0e:	f380 8811 	msr	BASEPRI, r0
   10d12:	f04f 0003 	mov.w	r0, #3
   10d16:	df02      	svc	2
	lll_done(NULL);
   10d18:	2000      	movs	r0, #0
}
   10d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10d1e:	f7ff befb 	b.w	10b18 <lll_done>
   10d22:	bf00      	nop
   10d24:	00010675 	.word	0x00010675
   10d28:	0001c0bc 	.word	0x0001c0bc
   10d2c:	0001c1d8 	.word	0x0001c1d8
   10d30:	0001b7c8 	.word	0x0001b7c8

00010d34 <lll_isr_abort>:
{
   10d34:	b510      	push	{r4, lr}
   10d36:	4604      	mov	r4, r0
	radio_status_reset();
   10d38:	f001 fda2 	bl	12880 <radio_status_reset>
	radio_tmr_status_reset();
   10d3c:	f001 fef6 	bl	12b2c <radio_tmr_status_reset>
	radio_filter_status_reset();
   10d40:	f001 fedc 	bl	12afc <radio_filter_status_reset>
	radio_ar_status_reset();
   10d44:	f002 f8b4 	bl	12eb0 <radio_ar_status_reset>
	radio_rssi_status_reset();
   10d48:	f001 fe9c 	bl	12a84 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   10d4c:	4620      	mov	r0, r4
}
   10d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   10d52:	f7ff bfb9 	b.w	10cc8 <lll_isr_cleanup>
   10d56:	bf00      	nop

00010d58 <lll_isr_early_abort>:
{
   10d58:	b508      	push	{r3, lr}
   10d5a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   10d5c:	4813      	ldr	r0, [pc, #76]	; (10dac <lll_isr_early_abort+0x54>)
   10d5e:	f001 fc8b 	bl	12678 <radio_isr_set>
	if (!radio_is_idle()) {
   10d62:	f001 fdad 	bl	128c0 <radio_is_idle>
   10d66:	b140      	cbz	r0, 10d7a <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   10d68:	f000 f95e 	bl	11028 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10d6c:	2800      	cmp	r0, #0
   10d6e:	db0a      	blt.n	10d86 <lll_isr_early_abort+0x2e>
}
   10d70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10d74:	2000      	movs	r0, #0
   10d76:	f7ff becf 	b.w	10b18 <lll_done>
		radio_disable();
   10d7a:	f001 fd6d 	bl	12858 <radio_disable>
	err = lll_hfclock_off();
   10d7e:	f000 f953 	bl	11028 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   10d82:	2800      	cmp	r0, #0
   10d84:	daf4      	bge.n	10d70 <lll_isr_early_abort+0x18>
   10d86:	4a0a      	ldr	r2, [pc, #40]	; (10db0 <lll_isr_early_abort+0x58>)
   10d88:	490a      	ldr	r1, [pc, #40]	; (10db4 <lll_isr_early_abort+0x5c>)
   10d8a:	480b      	ldr	r0, [pc, #44]	; (10db8 <lll_isr_early_abort+0x60>)
   10d8c:	f44f 7313 	mov.w	r3, #588	; 0x24c
   10d90:	f006 f8ed 	bl	16f6e <printk>
   10d94:	4040      	eors	r0, r0
   10d96:	f380 8811 	msr	BASEPRI, r0
   10d9a:	f04f 0003 	mov.w	r0, #3
   10d9e:	df02      	svc	2
	lll_done(NULL);
   10da0:	2000      	movs	r0, #0
}
   10da2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   10da6:	f7ff beb7 	b.w	10b18 <lll_done>
   10daa:	bf00      	nop
   10dac:	00010675 	.word	0x00010675
   10db0:	0001c0bc 	.word	0x0001c0bc
   10db4:	0001c1d8 	.word	0x0001c1d8
   10db8:	0001b7c8 	.word	0x0001b7c8

00010dbc <lll_prepare_resolve>:
{
   10dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10dc0:	b084      	sub	sp, #16
   10dc2:	4606      	mov	r6, r0
   10dc4:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   10dc6:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   10dca:	23ff      	movs	r3, #255	; 0xff
{
   10dcc:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   10dd0:	f88d 300f 	strb.w	r3, [sp, #15]
{
   10dd4:	460f      	mov	r7, r1
   10dd6:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   10dd8:	f7f8 fd08 	bl	97ec <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   10ddc:	4604      	mov	r4, r0
   10dde:	b920      	cbnz	r0, 10dea <lll_prepare_resolve+0x2e>
   10de0:	e032      	b.n	10e48 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   10de2:	f7f8 fd03 	bl	97ec <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   10de6:	4604      	mov	r4, r0
   10de8:	b370      	cbz	r0, 10e48 <lll_prepare_resolve+0x8c>
   10dea:	f894 c01c 	ldrb.w	ip, [r4, #28]
   10dee:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   10df2:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   10df6:	d1f4      	bne.n	10de2 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   10df8:	f8df a130 	ldr.w	sl, [pc, #304]	; 10f2c <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   10dfc:	f8da 3008 	ldr.w	r3, [sl, #8]
   10e00:	bb4b      	cbnz	r3, 10e56 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   10e02:	f1b9 0f00 	cmp.w	r9, #0
   10e06:	d048      	beq.n	10e9a <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   10e08:	f8cd 9000 	str.w	r9, [sp]
   10e0c:	4643      	mov	r3, r8
   10e0e:	462a      	mov	r2, r5
   10e10:	4639      	mov	r1, r7
   10e12:	4630      	mov	r0, r6
   10e14:	f7f8 fcac 	bl	9770 <ull_prepare_enqueue>
		LL_ASSERT(next);
   10e18:	b980      	cbnz	r0, 10e3c <lll_prepare_resolve+0x80>
   10e1a:	4a45      	ldr	r2, [pc, #276]	; (10f30 <lll_prepare_resolve+0x174>)
   10e1c:	4945      	ldr	r1, [pc, #276]	; (10f34 <lll_prepare_resolve+0x178>)
   10e1e:	4846      	ldr	r0, [pc, #280]	; (10f38 <lll_prepare_resolve+0x17c>)
   10e20:	f44f 7322 	mov.w	r3, #648	; 0x288
   10e24:	f006 f8a3 	bl	16f6e <printk>
   10e28:	4040      	eors	r0, r0
   10e2a:	f380 8811 	msr	BASEPRI, r0
   10e2e:	f04f 0003 	mov.w	r0, #3
   10e32:	df02      	svc	2
   10e34:	2000      	movs	r0, #0
		if (is_resume) {
   10e36:	f1b9 0f00 	cmp.w	r9, #0
   10e3a:	d019      	beq.n	10e70 <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   10e3c:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   10e40:	4620      	mov	r0, r4
   10e42:	b004      	add	sp, #16
   10e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   10e48:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 10f2c <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   10e4c:	f8da 3008 	ldr.w	r3, [sl, #8]
   10e50:	2b00      	cmp	r3, #0
   10e52:	d031      	beq.n	10eb8 <lll_prepare_resolve+0xfc>
   10e54:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   10e56:	f8cd 9000 	str.w	r9, [sp]
   10e5a:	4643      	mov	r3, r8
   10e5c:	462a      	mov	r2, r5
   10e5e:	4639      	mov	r1, r7
   10e60:	4630      	mov	r0, r6
   10e62:	f7f8 fc85 	bl	9770 <ull_prepare_enqueue>
		LL_ASSERT(next);
   10e66:	2800      	cmp	r0, #0
   10e68:	d0d7      	beq.n	10e1a <lll_prepare_resolve+0x5e>
		if (is_resume) {
   10e6a:	f1b9 0f00 	cmp.w	r9, #0
   10e6e:	d1e5      	bne.n	10e3c <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   10e70:	4601      	mov	r1, r0
   10e72:	4620      	mov	r0, r4
   10e74:	f7ff fc80 	bl	10778 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10e78:	f030 0302 	bics.w	r3, r0, #2
   10e7c:	d0de      	beq.n	10e3c <lll_prepare_resolve+0x80>
   10e7e:	4a2c      	ldr	r2, [pc, #176]	; (10f30 <lll_prepare_resolve+0x174>)
   10e80:	492e      	ldr	r1, [pc, #184]	; (10f3c <lll_prepare_resolve+0x180>)
   10e82:	482d      	ldr	r0, [pc, #180]	; (10f38 <lll_prepare_resolve+0x17c>)
   10e84:	f240 2393 	movw	r3, #659	; 0x293
   10e88:	f006 f871 	bl	16f6e <printk>
   10e8c:	4040      	eors	r0, r0
   10e8e:	f380 8811 	msr	BASEPRI, r0
   10e92:	f04f 0003 	mov.w	r0, #3
   10e96:	df02      	svc	2
   10e98:	e7d0      	b.n	10e3c <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   10e9a:	42ac      	cmp	r4, r5
   10e9c:	d00c      	beq.n	10eb8 <lll_prepare_resolve+0xfc>
   10e9e:	4a24      	ldr	r2, [pc, #144]	; (10f30 <lll_prepare_resolve+0x174>)
   10ea0:	4927      	ldr	r1, [pc, #156]	; (10f40 <lll_prepare_resolve+0x184>)
   10ea2:	4825      	ldr	r0, [pc, #148]	; (10f38 <lll_prepare_resolve+0x17c>)
   10ea4:	f240 23b9 	movw	r3, #697	; 0x2b9
   10ea8:	f006 f861 	bl	16f6e <printk>
   10eac:	4040      	eors	r0, r0
   10eae:	f380 8811 	msr	BASEPRI, r0
   10eb2:	f04f 0003 	mov.w	r0, #3
   10eb6:	df02      	svc	2
	event.curr.param = prepare_param->param;
   10eb8:	68eb      	ldr	r3, [r5, #12]
   10eba:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   10ebe:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   10ec2:	4628      	mov	r0, r5
   10ec4:	47c0      	blx	r8
   10ec6:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   10ec8:	f7ff fc16 	bl	106f8 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10ecc:	f030 0302 	bics.w	r3, r0, #2
   10ed0:	d11e      	bne.n	10f10 <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   10ed2:	f10d 000f 	add.w	r0, sp, #15
   10ed6:	f7f8 fc89 	bl	97ec <ull_prepare_dequeue_iter>
		if (!p) {
   10eda:	2800      	cmp	r0, #0
   10edc:	d0b0      	beq.n	10e40 <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   10ede:	7f03      	ldrb	r3, [r0, #28]
   10ee0:	f013 0303 	ands.w	r3, r3, #3
   10ee4:	d1f5      	bne.n	10ed2 <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   10ee6:	4601      	mov	r1, r0
   10ee8:	4618      	mov	r0, r3
   10eea:	f7ff fc45 	bl	10778 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10eee:	f030 0302 	bics.w	r3, r0, #2
   10ef2:	d0a5      	beq.n	10e40 <lll_prepare_resolve+0x84>
   10ef4:	4a0e      	ldr	r2, [pc, #56]	; (10f30 <lll_prepare_resolve+0x174>)
   10ef6:	4911      	ldr	r1, [pc, #68]	; (10f3c <lll_prepare_resolve+0x180>)
   10ef8:	480f      	ldr	r0, [pc, #60]	; (10f38 <lll_prepare_resolve+0x17c>)
   10efa:	f240 23d3 	movw	r3, #723	; 0x2d3
   10efe:	f006 f836 	bl	16f6e <printk>
   10f02:	4040      	eors	r0, r0
   10f04:	f380 8811 	msr	BASEPRI, r0
   10f08:	f04f 0003 	mov.w	r0, #3
   10f0c:	df02      	svc	2
   10f0e:	e797      	b.n	10e40 <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   10f10:	4a07      	ldr	r2, [pc, #28]	; (10f30 <lll_prepare_resolve+0x174>)
   10f12:	490a      	ldr	r1, [pc, #40]	; (10f3c <lll_prepare_resolve+0x180>)
   10f14:	4808      	ldr	r0, [pc, #32]	; (10f38 <lll_prepare_resolve+0x17c>)
   10f16:	f240 23c6 	movw	r3, #710	; 0x2c6
   10f1a:	f006 f828 	bl	16f6e <printk>
   10f1e:	4040      	eors	r0, r0
   10f20:	f380 8811 	msr	BASEPRI, r0
   10f24:	f04f 0003 	mov.w	r0, #3
   10f28:	df02      	svc	2
   10f2a:	e7d2      	b.n	10ed2 <lll_prepare_resolve+0x116>
   10f2c:	20002100 	.word	0x20002100
   10f30:	0001c0bc 	.word	0x0001c0bc
   10f34:	0001c1e4 	.word	0x0001c1e4
   10f38:	0001b7c8 	.word	0x0001b7c8
   10f3c:	0001bb38 	.word	0x0001bb38
   10f40:	0001c1ec 	.word	0x0001c1ec

00010f44 <clock_ready>:
	z_impl_k_sem_give(sem);
   10f44:	f101 0010 	add.w	r0, r1, #16
   10f48:	f005 b89a 	b.w	16080 <z_impl_k_sem_give>

00010f4c <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   10f4c:	b570      	push	{r4, r5, r6, lr}
   10f4e:	4605      	mov	r5, r0
   10f50:	b08a      	sub	sp, #40	; 0x28
   10f52:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   10f54:	2201      	movs	r2, #1
   10f56:	2100      	movs	r1, #0
   10f58:	a804      	add	r0, sp, #16
   10f5a:	f009 fca1 	bl	1a8a0 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   10f5e:	4b0f      	ldr	r3, [pc, #60]	; (10f9c <blocking_on+0x50>)
   10f60:	9301      	str	r3, [sp, #4]
   10f62:	2600      	movs	r6, #0
   10f64:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   10f66:	4669      	mov	r1, sp
   10f68:	4628      	mov	r0, r5
   10f6a:	9603      	str	r6, [sp, #12]
   10f6c:	9302      	str	r3, [sp, #8]
   10f6e:	f006 f87a 	bl	17066 <onoff_request>
	if (err < 0) {
   10f72:	2800      	cmp	r0, #0
   10f74:	db10      	blt.n	10f98 <blocking_on+0x4c>
   10f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   10f7a:	4631      	mov	r1, r6
   10f7c:	f240 30e7 	movw	r0, #999	; 0x3e7
   10f80:	fbe4 0103 	umlal	r0, r1, r4, r3
   10f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10f88:	2300      	movs	r3, #0
   10f8a:	f7ef f8a9 	bl	e0 <__aeabi_uldivmod>
   10f8e:	4602      	mov	r2, r0
   10f90:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   10f92:	a804      	add	r0, sp, #16
   10f94:	f005 f89a 	bl	160cc <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   10f98:	b00a      	add	sp, #40	; 0x28
   10f9a:	bd70      	pop	{r4, r5, r6, pc}
   10f9c:	00010f45 	.word	0x00010f45

00010fa0 <lll_clock_init>:

int lll_clock_init(void)
{
   10fa0:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   10fa2:	2001      	movs	r0, #1
   10fa4:	f002 fbc6 	bl	13734 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   10fa8:	4904      	ldr	r1, [pc, #16]	; (10fbc <lll_clock_init+0x1c>)
   10faa:	2300      	movs	r3, #0
   10fac:	2401      	movs	r4, #1
   10fae:	608c      	str	r4, [r1, #8]
   10fb0:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   10fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10fb6:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   10fb8:	f006 b855 	b.w	17066 <onoff_request>
   10fbc:	2000211c 	.word	0x2000211c

00010fc0 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   10fc0:	4b0c      	ldr	r3, [pc, #48]	; (10ff4 <lll_clock_wait+0x34>)
   10fc2:	781a      	ldrb	r2, [r3, #0]
   10fc4:	b10a      	cbz	r2, 10fca <lll_clock_wait+0xa>
		return 0;
   10fc6:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   10fc8:	4770      	bx	lr
{
   10fca:	b510      	push	{r4, lr}
	done = true;
   10fcc:	2001      	movs	r0, #1
   10fce:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   10fd0:	f002 fbb0 	bl	13734 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   10fd4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   10fd8:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   10fda:	f7ff ffb7 	bl	10f4c <blocking_on>
	if (err) {
   10fde:	b938      	cbnz	r0, 10ff0 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   10fe0:	4620      	mov	r0, r4
   10fe2:	f006 f889 	bl	170f8 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   10fe6:	2802      	cmp	r0, #2
		return 0;
   10fe8:	bf0c      	ite	eq
   10fea:	2000      	moveq	r0, #0
		return -EIO;
   10fec:	f06f 0004 	mvnne.w	r0, #4
}
   10ff0:	bd10      	pop	{r4, pc}
   10ff2:	bf00      	nop
   10ff4:	20002798 	.word	0x20002798

00010ff8 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   10ff8:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10ffa:	4b0a      	ldr	r3, [pc, #40]	; (11024 <lll_hfclock_on+0x2c>)
   10ffc:	f3bf 8f5b 	dmb	ish
   11000:	e853 2f00 	ldrex	r2, [r3]
   11004:	1c51      	adds	r1, r2, #1
   11006:	e843 1000 	strex	r0, r1, [r3]
   1100a:	2800      	cmp	r0, #0
   1100c:	d1f8      	bne.n	11000 <lll_hfclock_on+0x8>
   1100e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   11012:	2a00      	cmp	r2, #0
   11014:	dd01      	ble.n	1101a <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   11016:	2000      	movs	r0, #0
   11018:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1101a:	f002 fb93 	bl	13744 <z_nrf_clock_bt_ctlr_hf_request>
}
   1101e:	2000      	movs	r0, #0
   11020:	bd08      	pop	{r3, pc}
   11022:	bf00      	nop
   11024:	20002118 	.word	0x20002118

00011028 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   11028:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1102a:	4b0d      	ldr	r3, [pc, #52]	; (11060 <lll_hfclock_off+0x38>)
   1102c:	681a      	ldr	r2, [r3, #0]
   1102e:	2a00      	cmp	r2, #0
   11030:	dd12      	ble.n	11058 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11032:	f3bf 8f5b 	dmb	ish
   11036:	e853 2f00 	ldrex	r2, [r3]
   1103a:	1e51      	subs	r1, r2, #1
   1103c:	e843 1000 	strex	r0, r1, [r3]
   11040:	2800      	cmp	r0, #0
   11042:	d1f8      	bne.n	11036 <lll_hfclock_off+0xe>
   11044:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   11048:	2a01      	cmp	r2, #1
   1104a:	dd01      	ble.n	11050 <lll_hfclock_off+0x28>
		return 0;
   1104c:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1104e:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   11050:	f002 fb8e 	bl	13770 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   11054:	2000      	movs	r0, #0
}
   11056:	bd08      	pop	{r3, pc}
		return -EALREADY;
   11058:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1105c:	bd08      	pop	{r3, pc}
   1105e:	bf00      	nop
   11060:	20002118 	.word	0x20002118

00011064 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   11064:	2032      	movs	r0, #50	; 0x32
   11066:	4770      	bx	lr

00011068 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   11068:	4b01      	ldr	r3, [pc, #4]	; (11070 <lll_clock_ppm_get+0x8>)
}
   1106a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1106e:	4770      	bx	lr
   11070:	0001c218 	.word	0x0001c218

00011074 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   11074:	b510      	push	{r4, lr}
   11076:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   11078:	f7ff fe18 	bl	10cac <lll_isr_status_reset>

	radio_filter_disable();
   1107c:	f001 fd34 	bl	12ae8 <radio_filter_disable>

	lll_isr_cleanup(param);
   11080:	4620      	mov	r0, r4
}
   11082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   11086:	f7ff be1f 	b.w	10cc8 <lll_isr_cleanup>
   1108a:	bf00      	nop

0001108c <isr_tx>:
{
   1108c:	b530      	push	{r4, r5, lr}
   1108e:	b083      	sub	sp, #12
   11090:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   11092:	f7ff fdf9 	bl	10c88 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   11096:	2096      	movs	r0, #150	; 0x96
   11098:	f001 fd58 	bl	12b4c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   1109c:	2300      	movs	r3, #0
   1109e:	4618      	mov	r0, r3
   110a0:	461a      	mov	r2, r3
   110a2:	4619      	mov	r1, r3
   110a4:	f001 fc80 	bl	129a8 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   110a8:	2001      	movs	r0, #1
   110aa:	f7f8 fb15 	bl	96d8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   110ae:	4604      	mov	r4, r0
   110b0:	2800      	cmp	r0, #0
   110b2:	d043      	beq.n	1113c <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   110b4:	f104 001c 	add.w	r0, r4, #28
   110b8:	f001 fbb2 	bl	12820 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   110bc:	f001 fbec 	bl	12898 <radio_is_ready>
   110c0:	b9e0      	cbnz	r0, 110fc <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   110c2:	4825      	ldr	r0, [pc, #148]	; (11158 <isr_tx+0xcc>)
   110c4:	4629      	mov	r1, r5
   110c6:	f001 fad7 	bl	12678 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   110ca:	f7ff fa23 	bl	10514 <ull_filter_lll_rl_enabled>
   110ce:	bb50      	cbnz	r0, 11126 <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   110d0:	f001 fe24 	bl	12d1c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   110d4:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   110d6:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   110d8:	4608      	mov	r0, r1
   110da:	f001 fbb1 	bl	12840 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   110de:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   110e0:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   110e2:	4608      	mov	r0, r1
   110e4:	f001 fba8 	bl	12838 <radio_tx_chain_delay_get>
   110e8:	442c      	add	r4, r5
   110ea:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   110ec:	1a20      	subs	r0, r4, r0
   110ee:	f001 fdcd 	bl	12c8c <radio_tmr_hcto_configure>
}
   110f2:	b003      	add	sp, #12
   110f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   110f8:	f001 be02 	b.w	12d00 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   110fc:	4a17      	ldr	r2, [pc, #92]	; (1115c <isr_tx+0xd0>)
   110fe:	4918      	ldr	r1, [pc, #96]	; (11160 <isr_tx+0xd4>)
   11100:	4818      	ldr	r0, [pc, #96]	; (11164 <isr_tx+0xd8>)
   11102:	f240 4343 	movw	r3, #1091	; 0x443
   11106:	f005 ff32 	bl	16f6e <printk>
   1110a:	4040      	eors	r0, r0
   1110c:	f380 8811 	msr	BASEPRI, r0
   11110:	f04f 0003 	mov.w	r0, #3
   11114:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   11116:	4810      	ldr	r0, [pc, #64]	; (11158 <isr_tx+0xcc>)
   11118:	4629      	mov	r1, r5
   1111a:	f001 faad 	bl	12678 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1111e:	f7ff f9f9 	bl	10514 <ull_filter_lll_rl_enabled>
   11122:	2800      	cmp	r0, #0
   11124:	d0d4      	beq.n	110d0 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   11126:	f10d 0007 	add.w	r0, sp, #7
   1112a:	f7ff f92d 	bl	10388 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1112e:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   11130:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   11132:	f89d 0007 	ldrb.w	r0, [sp, #7]
   11136:	f001 fe81 	bl	12e3c <radio_ar_configure>
   1113a:	e7c9      	b.n	110d0 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   1113c:	4a07      	ldr	r2, [pc, #28]	; (1115c <isr_tx+0xd0>)
   1113e:	490a      	ldr	r1, [pc, #40]	; (11168 <isr_tx+0xdc>)
   11140:	4808      	ldr	r0, [pc, #32]	; (11164 <isr_tx+0xd8>)
   11142:	f240 433f 	movw	r3, #1087	; 0x43f
   11146:	f005 ff12 	bl	16f6e <printk>
   1114a:	4040      	eors	r0, r0
   1114c:	f380 8811 	msr	BASEPRI, r0
   11150:	f04f 0003 	mov.w	r0, #3
   11154:	df02      	svc	2
   11156:	e7ad      	b.n	110b4 <isr_tx+0x28>
   11158:	000118dd 	.word	0x000118dd
   1115c:	0001c228 	.word	0x0001c228
   11160:	0001c27c 	.word	0x0001c27c
   11164:	0001b7c8 	.word	0x0001b7c8
   11168:	0001c274 	.word	0x0001c274

0001116c <is_abort_cb>:
	if (next != curr) {
   1116c:	4281      	cmp	r1, r0
{
   1116e:	b508      	push	{r3, lr}
	if (next != curr) {
   11170:	d00e      	beq.n	11190 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   11172:	7a0b      	ldrb	r3, [r1, #8]
   11174:	07db      	lsls	r3, r3, #31
   11176:	d402      	bmi.n	1117e <is_abort_cb+0x12>
			return -ECANCELED;
   11178:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1117c:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1117e:	4b13      	ldr	r3, [pc, #76]	; (111cc <is_abort_cb+0x60>)
   11180:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   11182:	f7ff ff39 	bl	10ff8 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   11186:	2800      	cmp	r0, #0
   11188:	db0f      	blt.n	111aa <is_abort_cb+0x3e>
   1118a:	f06f 000a 	mvn.w	r0, #10
}
   1118e:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   11190:	7b0b      	ldrb	r3, [r1, #12]
   11192:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   11196:	690b      	ldr	r3, [r1, #16]
   11198:	781b      	ldrb	r3, [r3, #0]
   1119a:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1119e:	2b01      	cmp	r3, #1
   111a0:	bf14      	ite	ne
   111a2:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   111a6:	2000      	moveq	r0, #0
}
   111a8:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   111aa:	4a09      	ldr	r2, [pc, #36]	; (111d0 <is_abort_cb+0x64>)
   111ac:	4909      	ldr	r1, [pc, #36]	; (111d4 <is_abort_cb+0x68>)
   111ae:	480a      	ldr	r0, [pc, #40]	; (111d8 <is_abort_cb+0x6c>)
   111b0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   111b4:	f005 fedb 	bl	16f6e <printk>
   111b8:	4040      	eors	r0, r0
   111ba:	f380 8811 	msr	BASEPRI, r0
   111be:	f04f 0003 	mov.w	r0, #3
   111c2:	df02      	svc	2
   111c4:	f06f 000a 	mvn.w	r0, #10
}
   111c8:	bd08      	pop	{r3, pc}
   111ca:	bf00      	nop
   111cc:	000116f9 	.word	0x000116f9
   111d0:	0001c228 	.word	0x0001c228
   111d4:	0001c1d8 	.word	0x0001c1d8
   111d8:	0001b7c8 	.word	0x0001b7c8

000111dc <abort_cb>:
{
   111dc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   111de:	b1d8      	cbz	r0, 11218 <abort_cb+0x3c>
	err = lll_hfclock_off();
   111e0:	460c      	mov	r4, r1
   111e2:	f7ff ff21 	bl	11028 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   111e6:	2800      	cmp	r0, #0
   111e8:	db04      	blt.n	111f4 <abort_cb+0x18>
	lll_done(param);
   111ea:	4620      	mov	r0, r4
}
   111ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   111f0:	f7ff bc92 	b.w	10b18 <lll_done>
	LL_ASSERT(err >= 0);
   111f4:	4a0c      	ldr	r2, [pc, #48]	; (11228 <abort_cb+0x4c>)
   111f6:	490d      	ldr	r1, [pc, #52]	; (1122c <abort_cb+0x50>)
   111f8:	480d      	ldr	r0, [pc, #52]	; (11230 <abort_cb+0x54>)
   111fa:	f240 431e 	movw	r3, #1054	; 0x41e
   111fe:	f005 feb6 	bl	16f6e <printk>
   11202:	4040      	eors	r0, r0
   11204:	f380 8811 	msr	BASEPRI, r0
   11208:	f04f 0003 	mov.w	r0, #3
   1120c:	df02      	svc	2
	lll_done(param);
   1120e:	4620      	mov	r0, r4
}
   11210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   11214:	f7ff bc80 	b.w	10b18 <lll_done>
		radio_isr_set(isr_abort, param);
   11218:	4806      	ldr	r0, [pc, #24]	; (11234 <abort_cb+0x58>)
   1121a:	f001 fa2d 	bl	12678 <radio_isr_set>
}
   1121e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   11222:	f001 bb19 	b.w	12858 <radio_disable>
   11226:	bf00      	nop
   11228:	0001c228 	.word	0x0001c228
   1122c:	0001c1d8 	.word	0x0001c1d8
   11230:	0001b7c8 	.word	0x0001b7c8
   11234:	00011075 	.word	0x00011075

00011238 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   11238:	4b08      	ldr	r3, [pc, #32]	; (1125c <lll_adv_init+0x24>)
   1123a:	2204      	movs	r2, #4
{
   1123c:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1123e:	1898      	adds	r0, r3, r2
   11240:	2128      	movs	r1, #40	; 0x28
   11242:	f7f4 fd37 	bl	5cb4 <mem_init>
	MFIFO_INIT(pdu_free);
   11246:	4b06      	ldr	r3, [pc, #24]	; (11260 <lll_adv_init+0x28>)
   11248:	2400      	movs	r4, #0
   1124a:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1124c:	2202      	movs	r2, #2
   1124e:	4621      	mov	r1, r4
   11250:	4804      	ldr	r0, [pc, #16]	; (11264 <lll_adv_init+0x2c>)
   11252:	f009 fb25 	bl	1a8a0 <z_impl_k_sem_init>
}
   11256:	4620      	mov	r0, r4
   11258:	bd10      	pop	{r4, pc}
   1125a:	bf00      	nop
   1125c:	2000212c 	.word	0x2000212c
   11260:	200005e0 	.word	0x200005e0
   11264:	200021d0 	.word	0x200021d0

00011268 <lll_adv_reset>:
   11268:	4b08      	ldr	r3, [pc, #32]	; (1128c <lll_adv_reset+0x24>)
   1126a:	2204      	movs	r2, #4
   1126c:	b510      	push	{r4, lr}
   1126e:	1898      	adds	r0, r3, r2
   11270:	2128      	movs	r1, #40	; 0x28
   11272:	f7f4 fd1f 	bl	5cb4 <mem_init>
   11276:	4b06      	ldr	r3, [pc, #24]	; (11290 <lll_adv_reset+0x28>)
   11278:	2400      	movs	r4, #0
   1127a:	805c      	strh	r4, [r3, #2]
   1127c:	2202      	movs	r2, #2
   1127e:	4621      	mov	r1, r4
   11280:	4804      	ldr	r0, [pc, #16]	; (11294 <lll_adv_reset+0x2c>)
   11282:	f009 fb0d 	bl	1a8a0 <z_impl_k_sem_init>
   11286:	4620      	mov	r0, r4
   11288:	bd10      	pop	{r4, pc}
   1128a:	bf00      	nop
   1128c:	2000212c 	.word	0x2000212c
   11290:	200005e0 	.word	0x200005e0
   11294:	200021d0 	.word	0x200021d0

00011298 <lll_adv_data_init>:
{
   11298:	b510      	push	{r4, lr}
   1129a:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1129c:	4805      	ldr	r0, [pc, #20]	; (112b4 <lll_adv_data_init+0x1c>)
   1129e:	f7f4 fd39 	bl	5d14 <mem_acquire>
	if (!p) {
   112a2:	b120      	cbz	r0, 112ae <lll_adv_data_init+0x16>
   112a4:	4603      	mov	r3, r0
	p->len = 0U;
   112a6:	2000      	movs	r0, #0
   112a8:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   112aa:	6063      	str	r3, [r4, #4]
}
   112ac:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   112ae:	f06f 000b 	mvn.w	r0, #11
}
   112b2:	bd10      	pop	{r4, pc}
   112b4:	2000212c 	.word	0x2000212c

000112b8 <lll_adv_data_reset>:
{
   112b8:	4603      	mov	r3, r0
	pdu->first = 0U;
   112ba:	2000      	movs	r0, #0
   112bc:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   112be:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   112c0:	6098      	str	r0, [r3, #8]
}
   112c2:	4770      	bx	lr

000112c4 <lll_adv_pdu_alloc_pdu_adv>:
{
   112c4:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   112c6:	4c35      	ldr	r4, [pc, #212]	; (1139c <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   112c8:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   112ca:	78e1      	ldrb	r1, [r4, #3]
   112cc:	7823      	ldrb	r3, [r4, #0]
   112ce:	4291      	cmp	r1, r2
   112d0:	d003      	beq.n	112da <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   112d2:	fb02 4303 	mla	r3, r2, r3, r4
   112d6:	685d      	ldr	r5, [r3, #4]
	if (p) {
   112d8:	b935      	cbnz	r5, 112e8 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   112da:	4831      	ldr	r0, [pc, #196]	; (113a0 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   112dc:	f7f4 fd1a 	bl	5d14 <mem_acquire>
	if (p) {
   112e0:	4605      	mov	r5, r0
   112e2:	b1a0      	cbz	r0, 1130e <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   112e4:	4628      	mov	r0, r5
   112e6:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   112e8:	482e      	ldr	r0, [pc, #184]	; (113a4 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   112ea:	2200      	movs	r2, #0
   112ec:	2300      	movs	r3, #0
   112ee:	f004 feed 	bl	160cc <z_impl_k_sem_take>
		LL_ASSERT(!err);
   112f2:	bb40      	cbnz	r0, 11346 <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   112f4:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   112f6:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   112f8:	7861      	ldrb	r1, [r4, #1]
   112fa:	429a      	cmp	r2, r3
   112fc:	d0f2      	beq.n	112e4 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   112fe:	3301      	adds	r3, #1
   11300:	b2db      	uxtb	r3, r3
		_first = 0U;
   11302:	4299      	cmp	r1, r3
   11304:	bf08      	it	eq
   11306:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   11308:	70a3      	strb	r3, [r4, #2]
}
   1130a:	4628      	mov	r0, r5
   1130c:	bd38      	pop	{r3, r4, r5, pc}
   1130e:	4825      	ldr	r0, [pc, #148]	; (113a4 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   11310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11318:	f004 fed8 	bl	160cc <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1131c:	2800      	cmp	r0, #0
   1131e:	d12e      	bne.n	1137e <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   11320:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   11322:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   11324:	7822      	ldrb	r2, [r4, #0]
   11326:	7860      	ldrb	r0, [r4, #1]
   11328:	4299      	cmp	r1, r3
   1132a:	d01a      	beq.n	11362 <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   1132c:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   11330:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   11332:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   11334:	b2db      	uxtb	r3, r3
		_first = 0U;
   11336:	4298      	cmp	r0, r3
   11338:	bf08      	it	eq
   1133a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1133c:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   1133e:	b182      	cbz	r2, 11362 <lll_adv_pdu_alloc_pdu_adv+0x9e>
   11340:	4615      	mov	r5, r2
}
   11342:	4628      	mov	r0, r5
   11344:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   11346:	4a18      	ldr	r2, [pc, #96]	; (113a8 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   11348:	4918      	ldr	r1, [pc, #96]	; (113ac <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   1134a:	4819      	ldr	r0, [pc, #100]	; (113b0 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1134c:	f240 1397 	movw	r3, #407	; 0x197
   11350:	f005 fe0d 	bl	16f6e <printk>
   11354:	4040      	eors	r0, r0
   11356:	f380 8811 	msr	BASEPRI, r0
   1135a:	f04f 0003 	mov.w	r0, #3
   1135e:	df02      	svc	2
   11360:	e7c8      	b.n	112f4 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   11362:	4a11      	ldr	r2, [pc, #68]	; (113a8 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   11364:	4913      	ldr	r1, [pc, #76]	; (113b4 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   11366:	4812      	ldr	r0, [pc, #72]	; (113b0 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   11368:	f240 13ad 	movw	r3, #429	; 0x1ad
   1136c:	f005 fdff 	bl	16f6e <printk>
   11370:	4040      	eors	r0, r0
   11372:	f380 8811 	msr	BASEPRI, r0
   11376:	f04f 0003 	mov.w	r0, #3
   1137a:	df02      	svc	2
   1137c:	e7b2      	b.n	112e4 <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   1137e:	4a0a      	ldr	r2, [pc, #40]	; (113a8 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   11380:	490a      	ldr	r1, [pc, #40]	; (113ac <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   11382:	480b      	ldr	r0, [pc, #44]	; (113b0 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   11384:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   11388:	f005 fdf1 	bl	16f6e <printk>
   1138c:	4040      	eors	r0, r0
   1138e:	f380 8811 	msr	BASEPRI, r0
   11392:	f04f 0003 	mov.w	r0, #3
   11396:	df02      	svc	2
   11398:	e7c2      	b.n	11320 <lll_adv_pdu_alloc_pdu_adv+0x5c>
   1139a:	bf00      	nop
   1139c:	200005e0 	.word	0x200005e0
   113a0:	2000212c 	.word	0x2000212c
   113a4:	200021d0 	.word	0x200021d0
   113a8:	0001c228 	.word	0x0001c228
   113ac:	0001b968 	.word	0x0001b968
   113b0:	0001b7c8 	.word	0x0001b7c8
   113b4:	0001c290 	.word	0x0001c290

000113b8 <lll_adv_pdu_alloc>:
{
   113b8:	b510      	push	{r4, lr}
	first = pdu->first;
   113ba:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   113bc:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   113be:	429a      	cmp	r2, r3
   113c0:	d014      	beq.n	113ec <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   113c2:	b2d4      	uxtb	r4, r2
   113c4:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   113c6:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   113c8:	4294      	cmp	r4, r2
   113ca:	d004      	beq.n	113d6 <lll_adv_pdu_alloc+0x1e>
			last++;
   113cc:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   113ce:	7043      	strb	r3, [r0, #1]
			last++;
   113d0:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   113d2:	2b02      	cmp	r3, #2
   113d4:	d00e      	beq.n	113f4 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   113d6:	461c      	mov	r4, r3
	*idx = last;
   113d8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   113dc:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   113de:	6860      	ldr	r0, [r4, #4]
	if (p) {
   113e0:	b100      	cbz	r0, 113e4 <lll_adv_pdu_alloc+0x2c>
}
   113e2:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   113e4:	f7ff ff6e 	bl	112c4 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   113e8:	6060      	str	r0, [r4, #4]
}
   113ea:	bd10      	pop	{r4, pc}
		last++;
   113ec:	3301      	adds	r3, #1
   113ee:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   113f0:	2b02      	cmp	r3, #2
   113f2:	d1f0      	bne.n	113d6 <lll_adv_pdu_alloc+0x1e>
{
   113f4:	2400      	movs	r4, #0
			last = 0U;
   113f6:	4623      	mov	r3, r4
   113f8:	e7ee      	b.n	113d8 <lll_adv_pdu_alloc+0x20>
   113fa:	bf00      	nop

000113fc <lll_adv_pdu_latest_get>:
{
   113fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   113fe:	4604      	mov	r4, r0
	first = pdu->first;
   11400:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   11402:	7840      	ldrb	r0, [r0, #1]
   11404:	4298      	cmp	r0, r3
   11406:	d027      	beq.n	11458 <lll_adv_pdu_latest_get+0x5c>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   11408:	4a16      	ldr	r2, [pc, #88]	; (11464 <lll_adv_pdu_latest_get+0x68>)
   1140a:	460e      	mov	r6, r1
   1140c:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   1140e:	7857      	ldrb	r7, [r2, #1]
   11410:	7890      	ldrb	r0, [r2, #2]
   11412:	b2dd      	uxtb	r5, r3
	last = last + 1;
   11414:	1c4b      	adds	r3, r1, #1
   11416:	b2db      	uxtb	r3, r3
		last = 0U;
   11418:	429f      	cmp	r7, r3
   1141a:	bf08      	it	eq
   1141c:	2300      	moveq	r3, #0
	if (last == first) {
   1141e:	4298      	cmp	r0, r3
   11420:	d01e      	beq.n	11460 <lll_adv_pdu_latest_get+0x64>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11422:	7810      	ldrb	r0, [r2, #0]
   11424:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11428:	fb00 2101 	mla	r1, r0, r1, r2
		p = pdu->pdu[pdu_idx];
   1142c:	6878      	ldr	r0, [r7, #4]
   1142e:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   11430:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   11432:	480d      	ldr	r0, [pc, #52]	; (11468 <lll_adv_pdu_latest_get+0x6c>)
		first += 1U;
   11434:	3501      	adds	r5, #1
   11436:	f004 fe23 	bl	16080 <z_impl_k_sem_give>
   1143a:	b2ed      	uxtb	r5, r5
		if (first == DOUBLE_BUFFER_SIZE) {
   1143c:	2d02      	cmp	r5, #2
   1143e:	bf08      	it	eq
   11440:	2000      	moveq	r0, #0
		*is_modified = 1U;
   11442:	f04f 0301 	mov.w	r3, #1
			first = 0U;
   11446:	bf08      	it	eq
   11448:	4605      	moveq	r5, r0
		pdu->first = first;
   1144a:	7025      	strb	r5, [r4, #0]
		*is_modified = 1U;
   1144c:	7033      	strb	r3, [r6, #0]
		pdu->pdu[pdu_idx] = NULL;
   1144e:	f04f 0300 	mov.w	r3, #0
	return (void *)pdu->pdu[first];
   11452:	bf18      	it	ne
   11454:	4628      	movne	r0, r5
		pdu->pdu[pdu_idx] = NULL;
   11456:	607b      	str	r3, [r7, #4]
	return (void *)pdu->pdu[first];
   11458:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   1145c:	6860      	ldr	r0, [r4, #4]
}
   1145e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return NULL;
   11460:	2000      	movs	r0, #0
}
   11462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11464:	200005e0 	.word	0x200005e0
   11468:	200021d0 	.word	0x200021d0

0001146c <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1146c:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1146e:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   11470:	f3c3 1302 	ubfx	r3, r3, #4, #3
   11474:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   11476:	4604      	mov	r4, r0
   11478:	fa93 f0a3 	rbit	r0, r3
   1147c:	fab0 f080 	clz	r0, r0
   11480:	bf08      	it	eq
   11482:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   11486:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   11488:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   1148a:	d043      	beq.n	11514 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1148c:	7a21      	ldrb	r1, [r4, #8]
   1148e:	1e5a      	subs	r2, r3, #1
   11490:	4013      	ands	r3, r2
   11492:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   11496:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1149a:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   1149c:	f7ff fbb0 	bl	10c00 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   114a0:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   114a2:	f10d 0107 	add.w	r1, sp, #7
   114a6:	f104 000c 	add.w	r0, r4, #12
   114aa:	f88d 3007 	strb.w	r3, [sp, #7]
   114ae:	f7ff ffa5 	bl	113fc <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   114b2:	4605      	mov	r5, r0
   114b4:	2800      	cmp	r0, #0
   114b6:	d03e      	beq.n	11536 <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   114b8:	4628      	mov	r0, r5
   114ba:	f001 f9b7 	bl	1282c <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   114be:	782b      	ldrb	r3, [r5, #0]
   114c0:	f003 030f 	and.w	r3, r3, #15
   114c4:	2b02      	cmp	r3, #2
   114c6:	d01d      	beq.n	11504 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   114c8:	f10d 0107 	add.w	r1, sp, #7
   114cc:	f104 0018 	add.w	r0, r4, #24
   114d0:	f7ff ff94 	bl	113fc <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   114d4:	4606      	mov	r6, r0
   114d6:	2800      	cmp	r0, #0
   114d8:	d03b      	beq.n	11552 <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   114da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   114de:	b95b      	cbnz	r3, 114f8 <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   114e0:	4621      	mov	r1, r4
   114e2:	4823      	ldr	r0, [pc, #140]	; (11570 <chan_prepare.isra.0+0x104>)
   114e4:	f001 f8c8 	bl	12678 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   114e8:	2096      	movs	r0, #150	; 0x96
   114ea:	f001 fb2f 	bl	12b4c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   114ee:	2000      	movs	r0, #0
   114f0:	f001 fa12 	bl	12918 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   114f4:	b002      	add	sp, #8
   114f6:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   114f8:	2206      	movs	r2, #6
   114fa:	1ca9      	adds	r1, r5, #2
   114fc:	1cb0      	adds	r0, r6, #2
   114fe:	f006 fafd 	bl	17afc <memcpy>
   11502:	e7ed      	b.n	114e0 <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   11504:	481b      	ldr	r0, [pc, #108]	; (11574 <chan_prepare.isra.0+0x108>)
   11506:	4621      	mov	r1, r4
   11508:	f001 f8b6 	bl	12678 <radio_isr_set>
		radio_switch_complete_and_disable();
   1150c:	f001 faac 	bl	12a68 <radio_switch_complete_and_disable>
}
   11510:	b002      	add	sp, #8
   11512:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   11514:	4a18      	ldr	r2, [pc, #96]	; (11578 <chan_prepare.isra.0+0x10c>)
   11516:	4919      	ldr	r1, [pc, #100]	; (1157c <chan_prepare.isra.0+0x110>)
   11518:	4819      	ldr	r0, [pc, #100]	; (11580 <chan_prepare.isra.0+0x114>)
   1151a:	f240 5335 	movw	r3, #1333	; 0x535
   1151e:	f005 fd26 	bl	16f6e <printk>
   11522:	4040      	eors	r0, r0
   11524:	f380 8811 	msr	BASEPRI, r0
   11528:	f04f 0003 	mov.w	r0, #3
   1152c:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1152e:	7a23      	ldrb	r3, [r4, #8]
   11530:	f3c3 1302 	ubfx	r3, r3, #4, #3
   11534:	e7aa      	b.n	1148c <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   11536:	4a10      	ldr	r2, [pc, #64]	; (11578 <chan_prepare.isra.0+0x10c>)
   11538:	4912      	ldr	r1, [pc, #72]	; (11584 <chan_prepare.isra.0+0x118>)
   1153a:	4811      	ldr	r0, [pc, #68]	; (11580 <chan_prepare.isra.0+0x114>)
   1153c:	f240 533e 	movw	r3, #1342	; 0x53e
   11540:	f005 fd15 	bl	16f6e <printk>
   11544:	4040      	eors	r0, r0
   11546:	f380 8811 	msr	BASEPRI, r0
   1154a:	f04f 0003 	mov.w	r0, #3
   1154e:	df02      	svc	2
   11550:	e7b2      	b.n	114b8 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   11552:	4a09      	ldr	r2, [pc, #36]	; (11578 <chan_prepare.isra.0+0x10c>)
   11554:	490c      	ldr	r1, [pc, #48]	; (11588 <chan_prepare.isra.0+0x11c>)
   11556:	480a      	ldr	r0, [pc, #40]	; (11580 <chan_prepare.isra.0+0x114>)
   11558:	f44f 63a9 	mov.w	r3, #1352	; 0x548
   1155c:	f005 fd07 	bl	16f6e <printk>
   11560:	4040      	eors	r0, r0
   11562:	f380 8811 	msr	BASEPRI, r0
   11566:	f04f 0003 	mov.w	r0, #3
   1156a:	df02      	svc	2
   1156c:	e7b5      	b.n	114da <chan_prepare.isra.0+0x6e>
   1156e:	bf00      	nop
   11570:	0001108d 	.word	0x0001108d
   11574:	0001158d 	.word	0x0001158d
   11578:	0001c228 	.word	0x0001c228
   1157c:	0001c294 	.word	0x0001c294
   11580:	0001b7c8 	.word	0x0001b7c8
   11584:	0001c29c 	.word	0x0001c29c
   11588:	0001c2a0 	.word	0x0001c2a0

0001158c <isr_done>:
{
   1158c:	b510      	push	{r4, lr}
   1158e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   11590:	f7ff fb8c 	bl	10cac <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   11594:	7a23      	ldrb	r3, [r4, #8]
   11596:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1159a:	2a01      	cmp	r2, #1
   1159c:	d105      	bne.n	115aa <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1159e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   115a2:	f362 1306 	bfi	r3, r2, #4, #3
   115a6:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   115a8:	b2db      	uxtb	r3, r3
   115aa:	f013 0f70 	tst.w	r3, #112	; 0x70
   115ae:	d005      	beq.n	115bc <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   115b0:	6863      	ldr	r3, [r4, #4]
   115b2:	b153      	cbz	r3, 115ca <isr_done+0x3e>
   115b4:	f893 3020 	ldrb.w	r3, [r3, #32]
   115b8:	079b      	lsls	r3, r3, #30
   115ba:	d506      	bpl.n	115ca <isr_done+0x3e>
	radio_filter_disable();
   115bc:	f001 fa94 	bl	12ae8 <radio_filter_disable>
	lll_isr_cleanup(param);
   115c0:	4620      	mov	r0, r4
}
   115c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   115c6:	f7ff bb7f 	b.w	10cc8 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   115ca:	4620      	mov	r0, r4
   115cc:	f7ff ff4e 	bl	1146c <chan_prepare.isra.0>
		radio_tx_enable();
   115d0:	f001 f93c 	bl	1284c <radio_tx_enable>
}
   115d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   115d8:	f001 bb92 	b.w	12d00 <radio_tmr_end_capture>

000115dc <prepare_cb>:
{
   115dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   115de:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   115e0:	6863      	ldr	r3, [r4, #4]
{
   115e2:	b083      	sub	sp, #12
   115e4:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   115e6:	2b00      	cmp	r3, #0
   115e8:	d16d      	bne.n	116c6 <prepare_cb+0xea>
	radio_reset();
   115ea:	f001 f887 	bl	126fc <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   115ee:	2000      	movs	r0, #0
   115f0:	f001 f8b8 	bl	12764 <radio_tx_power_set>
	radio_phy_set(0, 0);
   115f4:	2100      	movs	r1, #0
   115f6:	4608      	mov	r0, r1
   115f8:	f001 f8a4 	bl	12744 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   115fc:	2200      	movs	r2, #0
   115fe:	2125      	movs	r1, #37	; 0x25
   11600:	2008      	movs	r0, #8
   11602:	f001 f8e5 	bl	127d0 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   11606:	4b35      	ldr	r3, [pc, #212]	; (116dc <prepare_cb+0x100>)
   11608:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1160a:	a801      	add	r0, sp, #4
   1160c:	f001 f8c8 	bl	127a0 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   11610:	4933      	ldr	r1, [pc, #204]	; (116e0 <prepare_cb+0x104>)
   11612:	f240 605b 	movw	r0, #1627	; 0x65b
   11616:	f001 f95d 	bl	128d4 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1161a:	7a23      	ldrb	r3, [r4, #8]
   1161c:	f3c3 0242 	ubfx	r2, r3, #1, #3
   11620:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   11624:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   11626:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   11628:	f7ff ff20 	bl	1146c <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   1162c:	f7fe ff72 	bl	10514 <ull_filter_lll_rl_enabled>
   11630:	bb98      	cbnz	r0, 1169a <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   11632:	7a63      	ldrb	r3, [r4, #9]
   11634:	079b      	lsls	r3, r3, #30
   11636:	d127      	bne.n	11688 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   11638:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1163a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1163c:	4638      	mov	r0, r7
   1163e:	f7ff fac1 	bl	10bc4 <lll_event_offset_get>
   11642:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   11644:	686a      	ldr	r2, [r5, #4]
   11646:	f106 0109 	add.w	r1, r6, #9
   1164a:	2001      	movs	r0, #1
   1164c:	f001 fa8a 	bl	12b64 <radio_tmr_start>
	radio_tmr_end_capture();
   11650:	f001 fb56 	bl	12d00 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   11654:	4620      	mov	r0, r4
   11656:	f7f8 ffa9 	bl	a5ac <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   1165a:	1c81      	adds	r1, r0, #2
   1165c:	4632      	mov	r2, r6
   1165e:	b2c9      	uxtb	r1, r1
   11660:	4638      	mov	r0, r7
   11662:	f7ff fabd 	bl	10be0 <lll_preempt_calc>
   11666:	b930      	cbnz	r0, 11676 <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   11668:	4620      	mov	r0, r4
   1166a:	f7ff fa53 	bl	10b14 <lll_prepare_done>
		LL_ASSERT(!ret);
   1166e:	b9d0      	cbnz	r0, 116a6 <prepare_cb+0xca>
}
   11670:	2000      	movs	r0, #0
   11672:	b003      	add	sp, #12
   11674:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   11676:	481b      	ldr	r0, [pc, #108]	; (116e4 <prepare_cb+0x108>)
   11678:	4621      	mov	r1, r4
   1167a:	f000 fffd 	bl	12678 <radio_isr_set>
		radio_disable();
   1167e:	f001 f8eb 	bl	12858 <radio_disable>
}
   11682:	2000      	movs	r0, #0
   11684:	b003      	add	sp, #12
   11686:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   11688:	2001      	movs	r0, #1
   1168a:	f7fe fbc5 	bl	fe18 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1168e:	7841      	ldrb	r1, [r0, #1]
   11690:	1c82      	adds	r2, r0, #2
   11692:	7800      	ldrb	r0, [r0, #0]
   11694:	f001 fa08 	bl	12aa8 <radio_filter_configure>
   11698:	e7ce      	b.n	11638 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   1169a:	7a60      	ldrb	r0, [r4, #9]
   1169c:	f010 0003 	ands.w	r0, r0, #3
   116a0:	bf18      	it	ne
   116a2:	2001      	movne	r0, #1
   116a4:	e7f1      	b.n	1168a <prepare_cb+0xae>
		LL_ASSERT(!ret);
   116a6:	4a10      	ldr	r2, [pc, #64]	; (116e8 <prepare_cb+0x10c>)
   116a8:	4910      	ldr	r1, [pc, #64]	; (116ec <prepare_cb+0x110>)
   116aa:	4811      	ldr	r0, [pc, #68]	; (116f0 <prepare_cb+0x114>)
   116ac:	f240 33cf 	movw	r3, #975	; 0x3cf
   116b0:	f005 fc5d 	bl	16f6e <printk>
   116b4:	4040      	eors	r0, r0
   116b6:	f380 8811 	msr	BASEPRI, r0
   116ba:	f04f 0003 	mov.w	r0, #3
   116be:	df02      	svc	2
}
   116c0:	2000      	movs	r0, #0
   116c2:	b003      	add	sp, #12
   116c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   116c6:	f893 3020 	ldrb.w	r3, [r3, #32]
   116ca:	079a      	lsls	r2, r3, #30
   116cc:	d08d      	beq.n	115ea <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   116ce:	4809      	ldr	r0, [pc, #36]	; (116f4 <prepare_cb+0x118>)
   116d0:	4621      	mov	r1, r4
   116d2:	f000 ffd1 	bl	12678 <radio_isr_set>
		radio_disable();
   116d6:	f001 f8bf 	bl	12858 <radio_disable>
		return 0;
   116da:	e7c9      	b.n	11670 <prepare_cb+0x94>
   116dc:	8e89bed6 	.word	0x8e89bed6
   116e0:	00555555 	.word	0x00555555
   116e4:	00011075 	.word	0x00011075
   116e8:	0001c228 	.word	0x0001c228
   116ec:	0001ba64 	.word	0x0001ba64
   116f0:	0001b7c8 	.word	0x0001b7c8
   116f4:	00010d59 	.word	0x00010d59

000116f8 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   116f8:	68c3      	ldr	r3, [r0, #12]
{
   116fa:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   116fc:	681e      	ldr	r6, [r3, #0]
{
   116fe:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   11700:	f7f5 fde2 	bl	72c8 <ticker_ticks_now_get>
   11704:	4605      	mov	r5, r0
   11706:	4630      	mov	r0, r6
   11708:	f7ff fa5c 	bl	10bc4 <lll_event_offset_get>
	p->remainder = 0;
   1170c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1170e:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   11710:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   11714:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   11716:	4620      	mov	r0, r4
}
   11718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1171c:	f7ff bf5e 	b.w	115dc <prepare_cb>

00011720 <lll_adv_prepare>:
{
   11720:	b510      	push	{r4, lr}
   11722:	b082      	sub	sp, #8
   11724:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   11726:	f7ff fc67 	bl	10ff8 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1172a:	2800      	cmp	r0, #0
   1172c:	db1a      	blt.n	11764 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1172e:	4a14      	ldr	r2, [pc, #80]	; (11780 <lll_adv_prepare+0x60>)
   11730:	4914      	ldr	r1, [pc, #80]	; (11784 <lll_adv_prepare+0x64>)
   11732:	4815      	ldr	r0, [pc, #84]	; (11788 <lll_adv_prepare+0x68>)
   11734:	9400      	str	r4, [sp, #0]
   11736:	2300      	movs	r3, #0
   11738:	f7f8 fade 	bl	9cf8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1173c:	b108      	cbz	r0, 11742 <lll_adv_prepare+0x22>
   1173e:	3077      	adds	r0, #119	; 0x77
   11740:	d101      	bne.n	11746 <lll_adv_prepare+0x26>
}
   11742:	b002      	add	sp, #8
   11744:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   11746:	4a11      	ldr	r2, [pc, #68]	; (1178c <lll_adv_prepare+0x6c>)
   11748:	4911      	ldr	r1, [pc, #68]	; (11790 <lll_adv_prepare+0x70>)
   1174a:	4812      	ldr	r0, [pc, #72]	; (11794 <lll_adv_prepare+0x74>)
   1174c:	f240 239b 	movw	r3, #667	; 0x29b
   11750:	f005 fc0d 	bl	16f6e <printk>
   11754:	4040      	eors	r0, r0
   11756:	f380 8811 	msr	BASEPRI, r0
   1175a:	f04f 0003 	mov.w	r0, #3
   1175e:	df02      	svc	2
}
   11760:	b002      	add	sp, #8
   11762:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   11764:	4a09      	ldr	r2, [pc, #36]	; (1178c <lll_adv_prepare+0x6c>)
   11766:	490c      	ldr	r1, [pc, #48]	; (11798 <lll_adv_prepare+0x78>)
   11768:	480a      	ldr	r0, [pc, #40]	; (11794 <lll_adv_prepare+0x74>)
   1176a:	f44f 7326 	mov.w	r3, #664	; 0x298
   1176e:	f005 fbfe 	bl	16f6e <printk>
   11772:	4040      	eors	r0, r0
   11774:	f380 8811 	msr	BASEPRI, r0
   11778:	f04f 0003 	mov.w	r0, #3
   1177c:	df02      	svc	2
   1177e:	e7d6      	b.n	1172e <lll_adv_prepare+0xe>
   11780:	000115dd 	.word	0x000115dd
   11784:	000111dd 	.word	0x000111dd
   11788:	0001116d 	.word	0x0001116d
   1178c:	0001c228 	.word	0x0001c228
   11790:	0001c2ac 	.word	0x0001c2ac
   11794:	0001b7c8 	.word	0x0001b7c8
   11798:	0001c1d8 	.word	0x0001c1d8

0001179c <lll_adv_scan_req_check>:
{
   1179c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   117a0:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   117a4:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   117a8:	f01c 0f01 	tst.w	ip, #1
{
   117ac:	460f      	mov	r7, r1
   117ae:	4616      	mov	r6, r2
   117b0:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   117b2:	d009      	beq.n	117c8 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   117b4:	f1b8 0f00 	cmp.w	r8, #0
   117b8:	d016      	beq.n	117e8 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   117ba:	783b      	ldrb	r3, [r7, #0]
   117bc:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   117c0:	d019      	beq.n	117f6 <lll_adv_scan_req_check+0x5a>
{
   117c2:	2000      	movs	r0, #0
}
   117c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117c8:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   117ca:	f811 0b02 	ldrb.w	r0, [r1], #2
   117ce:	9a07      	ldr	r2, [sp, #28]
   117d0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   117d4:	f7fe fe64 	bl	104a0 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   117d8:	2800      	cmp	r0, #0
   117da:	d1ee      	bne.n	117ba <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   117dc:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   117de:	07db      	lsls	r3, r3, #31
   117e0:	d5ef      	bpl.n	117c2 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   117e2:	f1b8 0f00 	cmp.w	r8, #0
   117e6:	d1e8      	bne.n	117ba <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   117e8:	9b07      	ldr	r3, [sp, #28]
   117ea:	7818      	ldrb	r0, [r3, #0]
   117ec:	f7fe fe28 	bl	10440 <ull_filter_lll_irk_in_fal>
   117f0:	2800      	cmp	r0, #0
   117f2:	d1e2      	bne.n	117ba <lll_adv_scan_req_check+0x1e>
   117f4:	e7e5      	b.n	117c2 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   117f6:	2206      	movs	r2, #6
   117f8:	f107 0108 	add.w	r1, r7, #8
   117fc:	4628      	mov	r0, r5
   117fe:	f006 f96c 	bl	17ada <memcmp>
	return (tx_addr == sr->rx_addr) &&
   11802:	fab0 f080 	clz	r0, r0
   11806:	0940      	lsrs	r0, r0, #5
}
   11808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001180c <lll_adv_connect_ind_check>:
{
   1180c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11810:	461f      	mov	r7, r3
	if (tgt_addr) {
   11812:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   11814:	f89d 9020 	ldrb.w	r9, [sp, #32]
   11818:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1181c:	4605      	mov	r5, r0
   1181e:	460c      	mov	r4, r1
   11820:	4690      	mov	r8, r2
	if (tgt_addr) {
   11822:	b9fb      	cbnz	r3, 11864 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   11824:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   11826:	079a      	lsls	r2, r3, #30
   11828:	d507      	bpl.n	1183a <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   1182a:	b1a6      	cbz	r6, 11856 <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1182c:	7823      	ldrb	r3, [r4, #0]
   1182e:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   11832:	d03a      	beq.n	118aa <lll_adv_connect_ind_check+0x9e>
   11834:	2000      	movs	r0, #0
}
   11836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1183a:	f811 0b02 	ldrb.w	r0, [r1], #2
   1183e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11840:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11844:	f7fe fe2c 	bl	104a0 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   11848:	2800      	cmp	r0, #0
   1184a:	d1ef      	bne.n	1182c <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   1184c:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   1184e:	079b      	lsls	r3, r3, #30
   11850:	d5f0      	bpl.n	11834 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   11852:	2e00      	cmp	r6, #0
   11854:	d1ea      	bne.n	1182c <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   11856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11858:	7818      	ldrb	r0, [r3, #0]
   1185a:	f7fe fdf1 	bl	10440 <ull_filter_lll_irk_in_fal>
   1185e:	2800      	cmp	r0, #0
   11860:	d1e4      	bne.n	1182c <lll_adv_connect_ind_check+0x20>
   11862:	e7e7      	b.n	11834 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   11864:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   11866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11868:	f81a 0b02 	ldrb.w	r0, [sl], #2
   1186c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11870:	4651      	mov	r1, sl
   11872:	f7fe fe15 	bl	104a0 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   11876:	2800      	cmp	r0, #0
   11878:	d0dc      	beq.n	11834 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1187a:	7823      	ldrb	r3, [r4, #0]
   1187c:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   11880:	d1d8      	bne.n	11834 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   11882:	4638      	mov	r0, r7
   11884:	2206      	movs	r2, #6
   11886:	f104 0108 	add.w	r1, r4, #8
   1188a:	f006 f926 	bl	17ada <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1188e:	2800      	cmp	r0, #0
   11890:	d1d0      	bne.n	11834 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   11892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11894:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   11896:	28ff      	cmp	r0, #255	; 0xff
   11898:	d011      	beq.n	118be <lll_adv_connect_ind_check+0xb2>
   1189a:	7aab      	ldrb	r3, [r5, #10]
   1189c:	2bff      	cmp	r3, #255	; 0xff
   1189e:	d00e      	beq.n	118be <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   118a0:	1ac0      	subs	r0, r0, r3
   118a2:	fab0 f080 	clz	r0, r0
   118a6:	0940      	lsrs	r0, r0, #5
   118a8:	e7c5      	b.n	11836 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   118aa:	2206      	movs	r2, #6
   118ac:	f104 0108 	add.w	r1, r4, #8
   118b0:	4638      	mov	r0, r7
   118b2:	f006 f912 	bl	17ada <memcmp>
	return (tx_addr == ci->rx_addr) &&
   118b6:	fab0 f080 	clz	r0, r0
   118ba:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   118bc:	e7bb      	b.n	11836 <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   118be:	7823      	ldrb	r3, [r4, #0]
   118c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   118c4:	454b      	cmp	r3, r9
   118c6:	d1b5      	bne.n	11834 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   118c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   118ca:	2206      	movs	r2, #6
   118cc:	4651      	mov	r1, sl
   118ce:	f006 f904 	bl	17ada <memcmp>
	return (rx_addr == ci->tx_addr) &&
   118d2:	fab0 f080 	clz	r0, r0
   118d6:	0940      	lsrs	r0, r0, #5
   118d8:	e7ad      	b.n	11836 <lll_adv_connect_ind_check+0x2a>
   118da:	bf00      	nop

000118dc <isr_rx>:
{
   118dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   118e0:	b08b      	sub	sp, #44	; 0x2c
   118e2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   118e4:	f000 ffe2 	bl	128ac <radio_is_done>
	if (trx_done) {
   118e8:	b2c0      	uxtb	r0, r0
   118ea:	b950      	cbnz	r0, 11902 <isr_rx+0x26>
	lll_isr_status_reset();
   118ec:	f7ff f9de 	bl	10cac <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   118f0:	487c      	ldr	r0, [pc, #496]	; (11ae4 <isr_rx+0x208>)
   118f2:	4621      	mov	r1, r4
   118f4:	f000 fec0 	bl	12678 <radio_isr_set>
}
   118f8:	b00b      	add	sp, #44	; 0x2c
   118fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   118fe:	f000 bfab 	b.w	12858 <radio_disable>
		crc_ok = radio_crc_is_valid();
   11902:	f000 fff3 	bl	128ec <radio_crc_is_valid>
   11906:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   11908:	f001 f900 	bl	12b0c <radio_filter_has_match>
   1190c:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   1190e:	f001 f907 	bl	12b20 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   11912:	f001 fae3 	bl	12edc <radio_ar_has_match>
   11916:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   11918:	f001 fac4 	bl	12ea4 <radio_ar_match_get>
	if (crc_ok) {
   1191c:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   1191e:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   11920:	f001 f8b8 	bl	12a94 <radio_rssi_is_ready>
	lll_isr_status_reset();
   11924:	f7ff f9c2 	bl	10cac <lll_isr_status_reset>
	if (crc_ok) {
   11928:	2d00      	cmp	r5, #0
   1192a:	d0e1      	beq.n	118f0 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1192c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   11930:	d17a      	bne.n	11a28 <isr_rx+0x14c>
   11932:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   11934:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   11936:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   1193a:	f7f7 fecd 	bl	96d8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1193e:	4605      	mov	r5, r0
   11940:	2800      	cmp	r0, #0
   11942:	f000 80a2 	beq.w	11a8a <isr_rx+0x1ae>
   11946:	7b23      	ldrb	r3, [r4, #12]
   11948:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   1194c:	f105 011c 	add.w	r1, r5, #28
   11950:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   11952:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   11954:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   11958:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1195c:	f000 0c0f 	and.w	ip, r0, #15
   11960:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   11964:	bf08      	it	eq
   11966:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   1196a:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1196e:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   11972:	7f28      	ldrb	r0, [r5, #28]
   11974:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   11978:	bf18      	it	ne
   1197a:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1197e:	2803      	cmp	r0, #3
   11980:	d05a      	beq.n	11a38 <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   11982:	2805      	cmp	r0, #5
   11984:	d1b4      	bne.n	118f0 <isr_rx+0x14>
   11986:	7f68      	ldrb	r0, [r5, #29]
   11988:	2822      	cmp	r0, #34	; 0x22
   1198a:	d1b1      	bne.n	118f0 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   1198c:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1198e:	2800      	cmp	r0, #0
   11990:	d0ae      	beq.n	118f0 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   11992:	f890 0020 	ldrb.w	r0, [r0, #32]
   11996:	0780      	lsls	r0, r0, #30
   11998:	d4aa      	bmi.n	118f0 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1199a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1199e:	9003      	str	r0, [sp, #12]
   119a0:	e9cd 8901 	strd	r8, r9, [sp, #4]
   119a4:	9700      	str	r7, [sp, #0]
   119a6:	4620      	mov	r0, r4
   119a8:	f7ff ff30 	bl	1180c <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   119ac:	2800      	cmp	r0, #0
   119ae:	d09f      	beq.n	118f0 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   119b0:	2004      	movs	r0, #4
   119b2:	f7f7 fe91 	bl	96d8 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   119b6:	2800      	cmp	r0, #0
   119b8:	d09a      	beq.n	118f0 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   119ba:	484b      	ldr	r0, [pc, #300]	; (11ae8 <isr_rx+0x20c>)
   119bc:	4621      	mov	r1, r4
   119be:	f000 fe5b 	bl	12678 <radio_isr_set>
		radio_disable();
   119c2:	f000 ff49 	bl	12858 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   119c6:	f000 ff67 	bl	12898 <radio_is_ready>
   119ca:	2800      	cmp	r0, #0
   119cc:	d14f      	bne.n	11a6e <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   119ce:	6862      	ldr	r2, [r4, #4]
   119d0:	f892 3020 	ldrb.w	r3, [r2, #32]
   119d4:	f043 0301 	orr.w	r3, r3, #1
   119d8:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   119dc:	f7f7 fe9a 	bl	9714 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   119e0:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   119e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   119e6:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   119e8:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   119ea:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   119ec:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   119ee:	f001 f93b 	bl	12c68 <radio_tmr_start_get>
   119f2:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   119f4:	f001 f98c 	bl	12d10 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   119f8:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   119fa:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   119fc:	4608      	mov	r0, r1
   119fe:	f000 ff1f 	bl	12840 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   11a02:	1a24      	subs	r4, r4, r0
   11a04:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   11a06:	b1ae      	cbz	r6, 11a34 <isr_rx+0x158>
   11a08:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   11a0c:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   11a0e:	f7f7 fe81 	bl	9714 <ull_pdu_rx_alloc>
   11a12:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   11a14:	4629      	mov	r1, r5
   11a16:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   11a18:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   11a1a:	f7f7 fe91 	bl	9740 <ull_rx_put>
		ull_rx_sched();
   11a1e:	f7f7 fe9f 	bl	9760 <ull_rx_sched>
}
   11a22:	b00b      	add	sp, #44	; 0x2c
   11a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   11a28:	fa5f f088 	uxtb.w	r0, r8
   11a2c:	f7fe fcb6 	bl	1039c <ull_filter_lll_rl_irk_idx>
   11a30:	4603      	mov	r3, r0
   11a32:	e77f      	b.n	11934 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   11a34:	23ff      	movs	r3, #255	; 0xff
   11a36:	e7e9      	b.n	11a0c <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   11a38:	7f68      	ldrb	r0, [r5, #29]
   11a3a:	280c      	cmp	r0, #12
   11a3c:	f47f af58 	bne.w	118f0 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   11a40:	f1b8 0f00 	cmp.w	r8, #0
   11a44:	f47f af54 	bne.w	118f0 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   11a48:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   11a4c:	9001      	str	r0, [sp, #4]
   11a4e:	f8cd 9000 	str.w	r9, [sp]
   11a52:	4620      	mov	r0, r4
   11a54:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11a58:	9105      	str	r1, [sp, #20]
   11a5a:	f7ff fe9f 	bl	1179c <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   11a5e:	bb10      	cbnz	r0, 11aa6 <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   11a60:	7f28      	ldrb	r0, [r5, #28]
   11a62:	9b07      	ldr	r3, [sp, #28]
   11a64:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   11a68:	f000 000f 	and.w	r0, r0, #15
   11a6c:	e789      	b.n	11982 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   11a6e:	4a1f      	ldr	r2, [pc, #124]	; (11aec <isr_rx+0x210>)
   11a70:	491f      	ldr	r1, [pc, #124]	; (11af0 <isr_rx+0x214>)
   11a72:	4820      	ldr	r0, [pc, #128]	; (11af4 <isr_rx+0x218>)
   11a74:	f44f 63bb 	mov.w	r3, #1496	; 0x5d8
   11a78:	f005 fa79 	bl	16f6e <printk>
   11a7c:	4040      	eors	r0, r0
   11a7e:	f380 8811 	msr	BASEPRI, r0
   11a82:	f04f 0003 	mov.w	r0, #3
   11a86:	df02      	svc	2
   11a88:	e7a1      	b.n	119ce <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   11a8a:	4a18      	ldr	r2, [pc, #96]	; (11aec <isr_rx+0x210>)
   11a8c:	491a      	ldr	r1, [pc, #104]	; (11af8 <isr_rx+0x21c>)
   11a8e:	4819      	ldr	r0, [pc, #100]	; (11af4 <isr_rx+0x218>)
   11a90:	f44f 63af 	mov.w	r3, #1400	; 0x578
   11a94:	f005 fa6b 	bl	16f6e <printk>
   11a98:	4040      	eors	r0, r0
   11a9a:	f380 8811 	msr	BASEPRI, r0
   11a9e:	f04f 0003 	mov.w	r0, #3
   11aa2:	df02      	svc	2
   11aa4:	e74f      	b.n	11946 <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   11aa6:	4621      	mov	r1, r4
   11aa8:	480e      	ldr	r0, [pc, #56]	; (11ae4 <isr_rx+0x208>)
   11aaa:	f000 fde5 	bl	12678 <radio_isr_set>
		radio_switch_complete_and_disable();
   11aae:	f000 ffdb 	bl	12a68 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   11ab2:	7e23      	ldrb	r3, [r4, #24]
   11ab4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   11ab8:	69e0      	ldr	r0, [r4, #28]
   11aba:	f000 feb7 	bl	1282c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   11abe:	f000 feeb 	bl	12898 <radio_is_ready>
   11ac2:	2800      	cmp	r0, #0
   11ac4:	d0ad      	beq.n	11a22 <isr_rx+0x146>
   11ac6:	4a09      	ldr	r2, [pc, #36]	; (11aec <isr_rx+0x210>)
   11ac8:	4909      	ldr	r1, [pc, #36]	; (11af0 <isr_rx+0x214>)
   11aca:	480a      	ldr	r0, [pc, #40]	; (11af4 <isr_rx+0x218>)
   11acc:	f240 5391 	movw	r3, #1425	; 0x591
   11ad0:	f005 fa4d 	bl	16f6e <printk>
   11ad4:	4040      	eors	r0, r0
   11ad6:	f380 8811 	msr	BASEPRI, r0
   11ada:	f04f 0003 	mov.w	r0, #3
   11ade:	df02      	svc	2
		if (!err) {
   11ae0:	e79f      	b.n	11a22 <isr_rx+0x146>
   11ae2:	bf00      	nop
   11ae4:	0001158d 	.word	0x0001158d
   11ae8:	00011075 	.word	0x00011075
   11aec:	0001c228 	.word	0x0001c228
   11af0:	0001c27c 	.word	0x0001c27c
   11af4:	0001b7c8 	.word	0x0001b7c8
   11af8:	0001c274 	.word	0x0001c274

00011afc <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   11afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11afe:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   11b00:	f7ff f8d4 	bl	10cac <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   11b04:	f7f7 fee6 	bl	98d4 <ull_event_done_extra_get>
	LL_ASSERT(e);
   11b08:	4604      	mov	r4, r0
   11b0a:	2800      	cmp	r0, #0
   11b0c:	d036      	beq.n	11b7c <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   11b0e:	4922      	ldr	r1, [pc, #136]	; (11b98 <isr_done+0x9c>)
   11b10:	79a2      	ldrb	r2, [r4, #6]
   11b12:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   11b14:	4b21      	ldr	r3, [pc, #132]	; (11b9c <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   11b16:	f360 0200 	bfi	r2, r0, #0, #1
   11b1a:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   11b1c:	4a20      	ldr	r2, [pc, #128]	; (11ba0 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   11b1e:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   11b20:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   11b22:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   11b24:	2101      	movs	r1, #1
   11b26:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   11b28:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   11b2a:	b11b      	cbz	r3, 11b34 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   11b2c:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11b30:	2b00      	cmp	r3, #0
   11b32:	db04      	blt.n	11b3e <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   11b34:	4628      	mov	r0, r5
}
   11b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   11b3a:	f7ff b8c5 	b.w	10cc8 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   11b3e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   11b42:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   11b46:	2b02      	cmp	r3, #2
   11b48:	d016      	beq.n	11b78 <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   11b4a:	2b04      	cmp	r3, #4
   11b4c:	bf14      	ite	ne
   11b4e:	2728      	movne	r7, #40	; 0x28
   11b50:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   11b54:	f001 f8c8 	bl	12ce8 <radio_tmr_aa_restore>
   11b58:	4606      	mov	r6, r0
   11b5a:	f001 f8cb 	bl	12cf4 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   11b5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   11b60:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   11b62:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   11b64:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   11b68:	2300      	movs	r3, #0
   11b6a:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   11b6c:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   11b6e:	4628      	mov	r0, r5
}
   11b70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   11b74:	f7ff b8a8 	b.w	10cc8 <lll_isr_cleanup>
	switch (phy) {
   11b78:	2718      	movs	r7, #24
   11b7a:	e7eb      	b.n	11b54 <isr_done+0x58>
	LL_ASSERT(e);
   11b7c:	4a09      	ldr	r2, [pc, #36]	; (11ba4 <isr_done+0xa8>)
   11b7e:	490a      	ldr	r1, [pc, #40]	; (11ba8 <isr_done+0xac>)
   11b80:	480a      	ldr	r0, [pc, #40]	; (11bac <isr_done+0xb0>)
   11b82:	f240 3313 	movw	r3, #787	; 0x313
   11b86:	f005 f9f2 	bl	16f6e <printk>
   11b8a:	4040      	eors	r0, r0
   11b8c:	f380 8811 	msr	BASEPRI, r0
   11b90:	f04f 0003 	mov.w	r0, #3
   11b94:	df02      	svc	2
   11b96:	e7ba      	b.n	11b0e <isr_done+0x12>
   11b98:	2000279a 	.word	0x2000279a
   11b9c:	2000278a 	.word	0x2000278a
   11ba0:	2000279b 	.word	0x2000279b
   11ba4:	0001c2c0 	.word	0x0001c2c0
   11ba8:	0001bb64 	.word	0x0001bb64
   11bac:	0001b7c8 	.word	0x0001b7c8

00011bb0 <lll_conn_init>:
{
   11bb0:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   11bb2:	f000 fea5 	bl	12900 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11bb6:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   11bb8:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11bba:	2101      	movs	r1, #1
   11bbc:	f361 0201 	bfi	r2, r1, #0, #2
}
   11bc0:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11bc2:	701a      	strb	r2, [r3, #0]
}
   11bc4:	bd08      	pop	{r3, pc}
   11bc6:	bf00      	nop

00011bc8 <lll_conn_reset>:
}
   11bc8:	2000      	movs	r0, #0
   11bca:	4770      	bx	lr

00011bcc <lll_conn_flush>:
}
   11bcc:	4770      	bx	lr
   11bce:	bf00      	nop

00011bd0 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   11bd0:	4805      	ldr	r0, [pc, #20]	; (11be8 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   11bd2:	4906      	ldr	r1, [pc, #24]	; (11bec <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   11bd4:	4a06      	ldr	r2, [pc, #24]	; (11bf0 <lll_conn_prepare_reset+0x20>)
{
   11bd6:	b410      	push	{r4}
	trx_cnt = 0U;
   11bd8:	2300      	movs	r3, #0
   11bda:	4c06      	ldr	r4, [pc, #24]	; (11bf4 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   11bdc:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   11bde:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   11be0:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   11be2:	8023      	strh	r3, [r4, #0]
}
   11be4:	bc10      	pop	{r4}
   11be6:	4770      	bx	lr
   11be8:	2000279a 	.word	0x2000279a
   11bec:	20002799 	.word	0x20002799
   11bf0:	2000279b 	.word	0x2000279b
   11bf4:	2000278a 	.word	0x2000278a

00011bf8 <lll_conn_abort_cb>:
{
   11bf8:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   11bfa:	b1e8      	cbz	r0, 11c38 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   11bfc:	460d      	mov	r5, r1
   11bfe:	4604      	mov	r4, r0
   11c00:	f7ff fa12 	bl	11028 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   11c04:	2800      	cmp	r0, #0
   11c06:	db0a      	blt.n	11c1e <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   11c08:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   11c0a:	8923      	ldrh	r3, [r4, #8]
   11c0c:	8a51      	ldrh	r1, [r2, #18]
   11c0e:	3301      	adds	r3, #1
   11c10:	440b      	add	r3, r1
   11c12:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   11c14:	4628      	mov	r0, r5
}
   11c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   11c1a:	f7fe bf7d 	b.w	10b18 <lll_done>
	LL_ASSERT(err >= 0);
   11c1e:	4a0a      	ldr	r2, [pc, #40]	; (11c48 <lll_conn_abort_cb+0x50>)
   11c20:	490a      	ldr	r1, [pc, #40]	; (11c4c <lll_conn_abort_cb+0x54>)
   11c22:	480b      	ldr	r0, [pc, #44]	; (11c50 <lll_conn_abort_cb+0x58>)
   11c24:	23aa      	movs	r3, #170	; 0xaa
   11c26:	f005 f9a2 	bl	16f6e <printk>
   11c2a:	4040      	eors	r0, r0
   11c2c:	f380 8811 	msr	BASEPRI, r0
   11c30:	f04f 0003 	mov.w	r0, #3
   11c34:	df02      	svc	2
   11c36:	e7e7      	b.n	11c08 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   11c38:	4806      	ldr	r0, [pc, #24]	; (11c54 <lll_conn_abort_cb+0x5c>)
   11c3a:	f000 fd1d 	bl	12678 <radio_isr_set>
}
   11c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   11c42:	f000 be09 	b.w	12858 <radio_disable>
   11c46:	bf00      	nop
   11c48:	0001c2c0 	.word	0x0001c2c0
   11c4c:	0001c1d8 	.word	0x0001c1d8
   11c50:	0001b7c8 	.word	0x0001b7c8
   11c54:	00011afd 	.word	0x00011afd

00011c58 <lll_conn_rx_pkt_set>:
{
   11c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c5a:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   11c5c:	2001      	movs	r0, #1
   11c5e:	f7f7 fd3b 	bl	96d8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11c62:	4607      	mov	r7, r0
   11c64:	b350      	cbz	r0, 11cbc <lll_conn_rx_pkt_set+0x64>
	phy = lll->phy_rx;
   11c66:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   11c6a:	8fe6      	ldrh	r6, [r4, #62]	; 0x3e
	phy = lll->phy_rx;
   11c6c:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   11c70:	2100      	movs	r1, #0
   11c72:	4628      	mov	r0, r5
   11c74:	f000 fd66 	bl	12744 <radio_phy_set>
	} else if (lll->enc_rx) {
   11c78:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   11c7c:	006a      	lsls	r2, r5, #1
	} else if (lll->enc_rx) {
   11c7e:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   11c80:	b2f1      	uxtb	r1, r6
   11c82:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_rx) {
   11c86:	d510      	bpl.n	11caa <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   11c88:	3104      	adds	r1, #4
   11c8a:	b2c9      	uxtb	r1, r1
   11c8c:	2008      	movs	r0, #8
   11c8e:	f000 fd9f 	bl	127d0 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   11c92:	f000 fe3d 	bl	12910 <radio_pkt_decrypt_get>
   11c96:	4629      	mov	r1, r5
   11c98:	4602      	mov	r2, r0
   11c9a:	f104 005f 	add.w	r0, r4, #95	; 0x5f
   11c9e:	f001 f843 	bl	12d28 <radio_ccm_rx_pkt_set>
}
   11ca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   11ca6:	f000 bdbb 	b.w	12820 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   11caa:	2008      	movs	r0, #8
   11cac:	f000 fd90 	bl	127d0 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   11cb0:	f107 001c 	add.w	r0, r7, #28
}
   11cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   11cb8:	f000 bdb2 	b.w	12820 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   11cbc:	4a06      	ldr	r2, [pc, #24]	; (11cd8 <lll_conn_rx_pkt_set+0x80>)
   11cbe:	4907      	ldr	r1, [pc, #28]	; (11cdc <lll_conn_rx_pkt_set+0x84>)
   11cc0:	4807      	ldr	r0, [pc, #28]	; (11ce0 <lll_conn_rx_pkt_set+0x88>)
   11cc2:	f240 2356 	movw	r3, #598	; 0x256
   11cc6:	f005 f952 	bl	16f6e <printk>
   11cca:	4040      	eors	r0, r0
   11ccc:	f380 8811 	msr	BASEPRI, r0
   11cd0:	f04f 0003 	mov.w	r0, #3
   11cd4:	df02      	svc	2
   11cd6:	e7c6      	b.n	11c66 <lll_conn_rx_pkt_set+0xe>
   11cd8:	0001c2c0 	.word	0x0001c2c0
   11cdc:	0001c274 	.word	0x0001c274
   11ce0:	0001b7c8 	.word	0x0001b7c8

00011ce4 <lll_conn_isr_tx>:
{
   11ce4:	b538      	push	{r3, r4, r5, lr}
   11ce6:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   11ce8:	f7fe ffce 	bl	10c88 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   11cec:	2096      	movs	r0, #150	; 0x96
   11cee:	f000 ff2d 	bl	12b4c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   11cf2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   11cf6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   11cfa:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   11cfe:	f000 0007 	and.w	r0, r0, #7
   11d02:	f002 0207 	and.w	r2, r2, #7
   11d06:	2100      	movs	r1, #0
   11d08:	f000 fe4e 	bl	129a8 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   11d0c:	4620      	mov	r0, r4
   11d0e:	f7ff ffa3 	bl	11c58 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   11d12:	f000 fdc1 	bl	12898 <radio_is_ready>
   11d16:	bb58      	cbnz	r0, 11d70 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   11d18:	f001 f800 	bl	12d1c <radio_tmr_tifs_base_get>
   11d1c:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   11d1e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   11d22:	2101      	movs	r1, #1
   11d24:	f000 0007 	and.w	r0, r0, #7
   11d28:	f000 fd8a 	bl	12840 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   11d2c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   11d30:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   11d34:	4405      	add	r5, r0
   11d36:	2b02      	cmp	r3, #2
   11d38:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   11d3c:	d016      	beq.n	11d6c <lll_conn_isr_tx+0x88>
		return 376;
   11d3e:	2b04      	cmp	r3, #4
   11d40:	bf14      	ite	ne
   11d42:	2328      	movne	r3, #40	; 0x28
   11d44:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   11d48:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   11d4c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   11d50:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   11d54:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   11d56:	f000 fd6f 	bl	12838 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   11d5a:	1a28      	subs	r0, r5, r0
   11d5c:	f000 ff96 	bl	12c8c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   11d60:	4621      	mov	r1, r4
   11d62:	480a      	ldr	r0, [pc, #40]	; (11d8c <lll_conn_isr_tx+0xa8>)
}
   11d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   11d68:	f000 bc86 	b.w	12678 <radio_isr_set>
	switch (phy) {
   11d6c:	2318      	movs	r3, #24
   11d6e:	e7eb      	b.n	11d48 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   11d70:	4a07      	ldr	r2, [pc, #28]	; (11d90 <lll_conn_isr_tx+0xac>)
   11d72:	4908      	ldr	r1, [pc, #32]	; (11d94 <lll_conn_isr_tx+0xb0>)
   11d74:	4808      	ldr	r0, [pc, #32]	; (11d98 <lll_conn_isr_tx+0xb4>)
   11d76:	f240 230f 	movw	r3, #527	; 0x20f
   11d7a:	f005 f8f8 	bl	16f6e <printk>
   11d7e:	4040      	eors	r0, r0
   11d80:	f380 8811 	msr	BASEPRI, r0
   11d84:	f04f 0003 	mov.w	r0, #3
   11d88:	df02      	svc	2
   11d8a:	e7c5      	b.n	11d18 <lll_conn_isr_tx+0x34>
   11d8c:	00011ed5 	.word	0x00011ed5
   11d90:	0001c2c0 	.word	0x0001c2c0
   11d94:	0001c27c 	.word	0x0001c27c
   11d98:	0001b7c8 	.word	0x0001b7c8

00011d9c <lll_conn_tx_pkt_set>:
{
   11d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d9e:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   11da0:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   11da4:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   11da6:	f001 0407 	and.w	r4, r1, #7
{
   11daa:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   11dac:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   11db0:	4620      	mov	r0, r4
   11db2:	f000 fcc7 	bl	12744 <radio_phy_set>
	} else if (lll->enc_tx) {
   11db6:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   11dba:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   11dbc:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   11dbe:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   11dc2:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   11dc4:	d50d      	bpl.n	11de2 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   11dc6:	3104      	adds	r1, #4
   11dc8:	b2c9      	uxtb	r1, r1
   11dca:	2008      	movs	r0, #8
   11dcc:	f000 fd00 	bl	127d0 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   11dd0:	4639      	mov	r1, r7
   11dd2:	f105 0080 	add.w	r0, r5, #128	; 0x80
   11dd6:	f000 ffdd 	bl	12d94 <radio_ccm_tx_pkt_set>
}
   11dda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   11dde:	f000 bd25 	b.w	1282c <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   11de2:	2008      	movs	r0, #8
   11de4:	f000 fcf4 	bl	127d0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   11de8:	4638      	mov	r0, r7
}
   11dea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   11dee:	f000 bd1d 	b.w	1282c <radio_pkt_tx_set>
   11df2:	bf00      	nop

00011df4 <lll_conn_pdu_tx_prep>:
{
   11df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11df8:	4604      	mov	r4, r0
   11dfa:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   11dfc:	aa01      	add	r2, sp, #4
   11dfe:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   11e00:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   11e02:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   11e04:	f7f3 fff4 	bl	5df0 <memq_peek>
	if (lll->empty || !link) {
   11e08:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   11e0c:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   11e0e:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   11e10:	d432      	bmi.n	11e78 <lll_conn_pdu_tx_prep+0x84>
   11e12:	2800      	cmp	r0, #0
   11e14:	d04e      	beq.n	11eb4 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   11e16:	9b01      	ldr	r3, [sp, #4]
   11e18:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   11e1c:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   11e20:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   11e24:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   11e28:	b913      	cbnz	r3, 11e30 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   11e2a:	786b      	ldrb	r3, [r5, #1]
   11e2c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   11e30:	b137      	cbz	r7, 11e40 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11e32:	f818 2007 	ldrb.w	r2, [r8, r7]
   11e36:	2101      	movs	r1, #1
   11e38:	f361 0201 	bfi	r2, r1, #0, #2
   11e3c:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   11e40:	1bdb      	subs	r3, r3, r7
   11e42:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   11e44:	4620      	mov	r0, r4
   11e46:	f7fd f99b 	bl	f180 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   11e4a:	786b      	ldrb	r3, [r5, #1]
   11e4c:	4283      	cmp	r3, r0
   11e4e:	d924      	bls.n	11e9a <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   11e50:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   11e52:	f818 3007 	ldrb.w	r3, [r8, r7]
   11e56:	f043 0310 	orr.w	r3, r3, #16
   11e5a:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   11e5e:	f818 3007 	ldrb.w	r3, [r8, r7]
   11e62:	f36f 1347 	bfc	r3, #5, #3
   11e66:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   11e6a:	2300      	movs	r3, #0
   11e6c:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   11e6e:	f8c9 5000 	str.w	r5, [r9]
}
   11e72:	b003      	add	sp, #12
   11e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   11e78:	f043 0304 	orr.w	r3, r3, #4
   11e7c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   11e80:	f000 fd3e 	bl	12900 <radio_pkt_empty_get>
   11e84:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   11e86:	b1e6      	cbz	r6, 11ec2 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   11e88:	7803      	ldrb	r3, [r0, #0]
   11e8a:	f043 0310 	orr.w	r3, r3, #16
   11e8e:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   11e90:	f8c9 5000 	str.w	r5, [r9]
}
   11e94:	b003      	add	sp, #12
   11e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   11e9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   11e9c:	6832      	ldr	r2, [r6, #0]
   11e9e:	429a      	cmp	r2, r3
			p->md = 1U;
   11ea0:	f818 3007 	ldrb.w	r3, [r8, r7]
   11ea4:	bf14      	ite	ne
   11ea6:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   11eaa:	f36f 1304 	bfceq	r3, #4, #1
   11eae:	f808 3007 	strb.w	r3, [r8, r7]
   11eb2:	e7d4      	b.n	11e5e <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   11eb4:	f043 0304 	orr.w	r3, r3, #4
   11eb8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   11ebc:	f000 fd20 	bl	12900 <radio_pkt_empty_get>
   11ec0:	4605      	mov	r5, r0
			p->md = 0U;
   11ec2:	782b      	ldrb	r3, [r5, #0]
   11ec4:	f36f 1304 	bfc	r3, #4, #1
   11ec8:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   11eca:	f8c9 5000 	str.w	r5, [r9]
}
   11ece:	b003      	add	sp, #12
   11ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00011ed4 <lll_conn_isr_rx>:
{
   11ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ed6:	b083      	sub	sp, #12
   11ed8:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   11eda:	f000 fce7 	bl	128ac <radio_is_done>
	if (trx_done) {
   11ede:	b2c0      	uxtb	r0, r0
   11ee0:	b950      	cbnz	r0, 11ef8 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   11ee2:	f7fe fed9 	bl	10c98 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   11ee6:	48b5      	ldr	r0, [pc, #724]	; (121bc <lll_conn_isr_rx+0x2e8>)
   11ee8:	4621      	mov	r1, r4
   11eea:	f000 fbc5 	bl	12678 <radio_isr_set>
}
   11eee:	b003      	add	sp, #12
   11ef0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   11ef4:	f000 bcb0 	b.w	12858 <radio_disable>
		crc_ok = radio_crc_is_valid();
   11ef8:	f000 fcf8 	bl	128ec <radio_crc_is_valid>
   11efc:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   11efe:	f000 fdc9 	bl	12a94 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   11f02:	f7fe fec9 	bl	10c98 <lll_isr_rx_status_reset>
	trx_cnt++;
   11f06:	4aae      	ldr	r2, [pc, #696]	; (121c0 <lll_conn_isr_rx+0x2ec>)
   11f08:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   11f0a:	2001      	movs	r0, #1
	trx_cnt++;
   11f0c:	4403      	add	r3, r0
   11f0e:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   11f10:	f7f7 fbe2 	bl	96d8 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11f14:	4606      	mov	r6, r0
   11f16:	2800      	cmp	r0, #0
   11f18:	f000 80ca 	beq.w	120b0 <lll_conn_isr_rx+0x1dc>
	if (crc_ok) {
   11f1c:	2d00      	cmp	r5, #0
   11f1e:	d15a      	bne.n	11fd6 <lll_conn_isr_rx+0x102>
		if (crc_expire == 0U) {
   11f20:	4ba8      	ldr	r3, [pc, #672]	; (121c4 <lll_conn_isr_rx+0x2f0>)
   11f22:	781f      	ldrb	r7, [r3, #0]
   11f24:	2f00      	cmp	r7, #0
   11f26:	f040 80b2 	bne.w	1208e <lll_conn_isr_rx+0x1ba>
		crc_expire--;
   11f2a:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11f2c:	a901      	add	r1, sp, #4
   11f2e:	4620      	mov	r0, r4
		crc_expire--;
   11f30:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   11f32:	f7ff ff5f 	bl	11df4 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   11f36:	2096      	movs	r0, #150	; 0x96
   11f38:	f000 fe08 	bl	12b4c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   11f3c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   11f40:	f000 0007 	and.w	r0, r0, #7
   11f44:	f000 fce8 	bl	12918 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   11f48:	489f      	ldr	r0, [pc, #636]	; (121c8 <lll_conn_isr_rx+0x2f4>)
   11f4a:	4621      	mov	r1, r4
   11f4c:	f000 fb94 	bl	12678 <radio_isr_set>
		radio_tmr_end_capture();
   11f50:	f000 fed6 	bl	12d00 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   11f54:	9901      	ldr	r1, [sp, #4]
   11f56:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   11f5a:	780b      	ldrb	r3, [r1, #0]
   11f5c:	f023 000c 	bic.w	r0, r3, #12
   11f60:	f3c2 0340 	ubfx	r3, r2, #1, #1
   11f64:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   11f66:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   11f6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   11f6e:	4303      	orrs	r3, r0
   11f70:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   11f72:	4620      	mov	r0, r4
   11f74:	f7ff ff12 	bl	11d9c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   11f78:	f000 fc8e 	bl	12898 <radio_is_ready>
   11f7c:	2800      	cmp	r0, #0
   11f7e:	f040 80d0 	bne.w	12122 <lll_conn_isr_rx+0x24e>
	if (!radio_tmr_aa_restore()) {
   11f82:	f000 feb1 	bl	12ce8 <radio_tmr_aa_restore>
   11f86:	b1e8      	cbz	r0, 11fc4 <lll_conn_isr_rx+0xf0>
	if (tx_release) {
   11f88:	b315      	cbz	r5, 11fd0 <lll_conn_isr_rx+0xfc>
		LL_ASSERT(lll->handle != 0xFFFF);
   11f8a:	89a0      	ldrh	r0, [r4, #12]
   11f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11f90:	4298      	cmp	r0, r3
   11f92:	f000 80dd 	beq.w	12150 <lll_conn_isr_rx+0x27c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   11f96:	4629      	mov	r1, r5
   11f98:	f7fc ff82 	bl	eea0 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   11f9c:	b177      	cbz	r7, 11fbc <lll_conn_isr_rx+0xe8>
		if (lll->enc_rx) {
   11f9e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   11fa2:	071b      	lsls	r3, r3, #28
   11fa4:	f100 80cb 	bmi.w	1213e <lll_conn_isr_rx+0x26a>
		ull_pdu_rx_alloc();
   11fa8:	f7f7 fbb4 	bl	9714 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   11fac:	2303      	movs	r3, #3
   11fae:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   11fb0:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   11fb2:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   11fb4:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   11fb6:	4631      	mov	r1, r6
   11fb8:	f7f7 fbc2 	bl	9740 <ull_rx_put>
		ull_rx_sched();
   11fbc:	f7f7 fbd0 	bl	9760 <ull_rx_sched>
}
   11fc0:	b003      	add	sp, #12
   11fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   11fc4:	f000 fe84 	bl	12cd0 <radio_tmr_aa_get>
   11fc8:	f000 fe88 	bl	12cdc <radio_tmr_aa_save>
	if (tx_release) {
   11fcc:	2d00      	cmp	r5, #0
   11fce:	d1dc      	bne.n	11f8a <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   11fd0:	2f00      	cmp	r7, #0
   11fd2:	d1e4      	bne.n	11f9e <lll_conn_isr_rx+0xca>
   11fd4:	e7f4      	b.n	11fc0 <lll_conn_isr_rx+0xec>
	if (lll->enc_rx) {
   11fd6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   11fda:	0719      	lsls	r1, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   11fdc:	f106 071c 	add.w	r7, r6, #28
	if (lll->enc_rx) {
   11fe0:	f100 8095 	bmi.w	1210e <lll_conn_isr_rx+0x23a>
	if (pdu_data_rx->nesn != lll->sn) {
   11fe4:	7f32      	ldrb	r2, [r6, #28]
   11fe6:	f003 0101 	and.w	r1, r3, #1
   11fea:	f3c2 0080 	ubfx	r0, r2, #2, #1
   11fee:	4288      	cmp	r0, r1
   11ff0:	d06e      	beq.n	120d0 <lll_conn_isr_rx+0x1fc>
		if (lll->role) {
   11ff2:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   11ff6:	f081 0101 	eor.w	r1, r1, #1
   11ffa:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   11ffe:	2a00      	cmp	r2, #0
		lll->sn++;
   12000:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   12004:	da05      	bge.n	12012 <lll_conn_isr_rx+0x13e>
			lll->periph.latency_enabled = 1;
   12006:	f894 3020 	ldrb.w	r3, [r4, #32]
   1200a:	f043 0304 	orr.w	r3, r3, #4
   1200e:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   12012:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12016:	075a      	lsls	r2, r3, #29
   12018:	f100 80a9 	bmi.w	1216e <lll_conn_isr_rx+0x29a>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1201c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   12020:	aa01      	add	r2, sp, #4
   12022:	f7f3 fee5 	bl	5df0 <memq_peek>
		if (link) {
   12026:	4605      	mov	r5, r0
   12028:	2800      	cmp	r0, #0
   1202a:	f000 80a7 	beq.w	1217c <lll_conn_isr_rx+0x2a8>
					       lll->packet_tx_head_offset);
   1202e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   12032:	9b01      	ldr	r3, [sp, #4]
   12034:	4413      	add	r3, r2
   12036:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   12038:	b171      	cbz	r1, 12058 <lll_conn_isr_rx+0x184>
				if (lll->enc_tx) {
   1203a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1203e:	06db      	lsls	r3, r3, #27
   12040:	d50a      	bpl.n	12058 <lll_conn_isr_rx+0x184>
					lll->ccm_tx.counter++;
   12042:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   12046:	3301      	adds	r3, #1
   12048:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   1204c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   12050:	f143 0300 	adc.w	r3, r3, #0
   12054:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   12058:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1205c:	440a      	add	r2, r1
   1205e:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   12060:	429a      	cmp	r2, r3
   12062:	f0c0 808f 	bcc.w	12184 <lll_conn_isr_rx+0x2b0>
			} else if (offset == lll->packet_tx_head_len) {
   12066:	f000 80bf 	beq.w	121e8 <lll_conn_isr_rx+0x314>
				LL_ASSERT(0);
   1206a:	4a58      	ldr	r2, [pc, #352]	; (121cc <lll_conn_isr_rx+0x2f8>)
   1206c:	4958      	ldr	r1, [pc, #352]	; (121d0 <lll_conn_isr_rx+0x2fc>)
   1206e:	4859      	ldr	r0, [pc, #356]	; (121d4 <lll_conn_isr_rx+0x300>)
   12070:	f240 339f 	movw	r3, #927	; 0x39f
   12074:	f004 ff7b 	bl	16f6e <printk>
   12078:	4040      	eors	r0, r0
   1207a:	f380 8811 	msr	BASEPRI, r0
   1207e:	f04f 0003 	mov.w	r0, #3
   12082:	df02      	svc	2
	tx_release = NULL;
   12084:	2500      	movs	r5, #0
   12086:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1208a:	7f32      	ldrb	r2, [r6, #28]
   1208c:	e021      	b.n	120d2 <lll_conn_isr_rx+0x1fe>
		crc_expire--;
   1208e:	3f01      	subs	r7, #1
   12090:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12092:	a901      	add	r1, sp, #4
   12094:	4620      	mov	r0, r4
		crc_expire--;
   12096:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12098:	f7ff feac 	bl	11df4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1209c:	2f00      	cmp	r7, #0
   1209e:	f040 80fe 	bne.w	1229e <lll_conn_isr_rx+0x3ca>
		radio_isr_set(isr_done, param);
   120a2:	4846      	ldr	r0, [pc, #280]	; (121bc <lll_conn_isr_rx+0x2e8>)
   120a4:	4621      	mov	r1, r4
   120a6:	f000 fae7 	bl	12678 <radio_isr_set>
			radio_switch_complete_and_disable();
   120aa:	f000 fcdd 	bl	12a68 <radio_switch_complete_and_disable>
   120ae:	e751      	b.n	11f54 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   120b0:	4a46      	ldr	r2, [pc, #280]	; (121cc <lll_conn_isr_rx+0x2f8>)
   120b2:	4949      	ldr	r1, [pc, #292]	; (121d8 <lll_conn_isr_rx+0x304>)
   120b4:	4847      	ldr	r0, [pc, #284]	; (121d4 <lll_conn_isr_rx+0x300>)
   120b6:	23f2      	movs	r3, #242	; 0xf2
   120b8:	f004 ff59 	bl	16f6e <printk>
   120bc:	4040      	eors	r0, r0
   120be:	f380 8811 	msr	BASEPRI, r0
   120c2:	f04f 0003 	mov.w	r0, #3
   120c6:	df02      	svc	2
	if (crc_ok) {
   120c8:	2d00      	cmp	r5, #0
   120ca:	f43f af29 	beq.w	11f20 <lll_conn_isr_rx+0x4c>
   120ce:	e782      	b.n	11fd6 <lll_conn_isr_rx+0x102>
	tx_release = NULL;
   120d0:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   120d2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   120d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   120da:	429a      	cmp	r2, r3
   120dc:	d059      	beq.n	12192 <lll_conn_isr_rx+0x2be>
	is_rx_enqueue = 0U;
   120de:	2700      	movs	r7, #0
		crc_expire = 0U;
   120e0:	4a38      	ldr	r2, [pc, #224]	; (121c4 <lll_conn_isr_rx+0x2f0>)
		crc_valid = 1U;
   120e2:	4b3e      	ldr	r3, [pc, #248]	; (121dc <lll_conn_isr_rx+0x308>)
		crc_expire = 0U;
   120e4:	2100      	movs	r1, #0
   120e6:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   120e8:	4620      	mov	r0, r4
		crc_valid = 1U;
   120ea:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   120ec:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   120ee:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   120f0:	f7ff fe80 	bl	11df4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   120f4:	7f33      	ldrb	r3, [r6, #28]
   120f6:	06d9      	lsls	r1, r3, #27
   120f8:	f53f af1d 	bmi.w	11f36 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   120fc:	9b01      	ldr	r3, [sp, #4]
   120fe:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   12100:	06d2      	lsls	r2, r2, #27
   12102:	f53f af18 	bmi.w	11f36 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   12106:	785b      	ldrb	r3, [r3, #1]
   12108:	2b00      	cmp	r3, #0
   1210a:	d0ca      	beq.n	120a2 <lll_conn_isr_rx+0x1ce>
   1210c:	e713      	b.n	11f36 <lll_conn_isr_rx+0x62>
		pkt_decrypt = radio_pkt_decrypt_get();
   1210e:	f000 fbff 	bl	12910 <radio_pkt_decrypt_get>
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   12112:	2203      	movs	r2, #3
		pkt_decrypt = radio_pkt_decrypt_get();
   12114:	4601      	mov	r1, r0
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   12116:	4638      	mov	r0, r7
   12118:	f005 fcf0 	bl	17afc <memcpy>
   1211c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12120:	e760      	b.n	11fe4 <lll_conn_isr_rx+0x110>
	LL_ASSERT(!radio_is_ready());
   12122:	4a2a      	ldr	r2, [pc, #168]	; (121cc <lll_conn_isr_rx+0x2f8>)
   12124:	492e      	ldr	r1, [pc, #184]	; (121e0 <lll_conn_isr_rx+0x30c>)
   12126:	482b      	ldr	r0, [pc, #172]	; (121d4 <lll_conn_isr_rx+0x300>)
   12128:	f240 1369 	movw	r3, #361	; 0x169
   1212c:	f004 ff1f 	bl	16f6e <printk>
   12130:	4040      	eors	r0, r0
   12132:	f380 8811 	msr	BASEPRI, r0
   12136:	f04f 0003 	mov.w	r0, #3
   1213a:	df02      	svc	2
   1213c:	e721      	b.n	11f82 <lll_conn_isr_rx+0xae>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   1213e:	f000 fbe7 	bl	12910 <radio_pkt_decrypt_get>
			memcpy((void *)pdu_data_rx->lldata,
   12142:	7f72      	ldrb	r2, [r6, #29]
   12144:	1cc1      	adds	r1, r0, #3
   12146:	f106 001f 	add.w	r0, r6, #31
   1214a:	f005 fcd7 	bl	17afc <memcpy>
   1214e:	e72b      	b.n	11fa8 <lll_conn_isr_rx+0xd4>
		LL_ASSERT(lll->handle != 0xFFFF);
   12150:	4a1e      	ldr	r2, [pc, #120]	; (121cc <lll_conn_isr_rx+0x2f8>)
   12152:	4924      	ldr	r1, [pc, #144]	; (121e4 <lll_conn_isr_rx+0x310>)
   12154:	481f      	ldr	r0, [pc, #124]	; (121d4 <lll_conn_isr_rx+0x300>)
   12156:	f44f 73bc 	mov.w	r3, #376	; 0x178
   1215a:	f004 ff08 	bl	16f6e <printk>
   1215e:	4040      	eors	r0, r0
   12160:	f380 8811 	msr	BASEPRI, r0
   12164:	f04f 0003 	mov.w	r0, #3
   12168:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1216a:	89a0      	ldrh	r0, [r4, #12]
   1216c:	e713      	b.n	11f96 <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   1216e:	f36f 0382 	bfc	r3, #2, #1
   12172:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   12176:	f000 fbc3 	bl	12900 <radio_pkt_empty_get>
	tx_release = NULL;
   1217a:	2500      	movs	r5, #0
   1217c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12180:	7f32      	ldrb	r2, [r6, #28]
   12182:	e7a6      	b.n	120d2 <lll_conn_isr_rx+0x1fe>
				lll->packet_tx_head_offset = offset;
   12184:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   12188:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1218c:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   1218e:	2500      	movs	r5, #0
   12190:	e79f      	b.n	120d2 <lll_conn_isr_rx+0x1fe>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   12192:	2003      	movs	r0, #3
   12194:	f7f7 faa0 	bl	96d8 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   12198:	2800      	cmp	r0, #0
   1219a:	d0a0      	beq.n	120de <lll_conn_isr_rx+0x20a>
		lll->nesn++;
   1219c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   121a0:	f083 0302 	eor.w	r3, r3, #2
   121a4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   121a8:	7f73      	ldrb	r3, [r6, #29]
   121aa:	2b00      	cmp	r3, #0
   121ac:	d097      	beq.n	120de <lll_conn_isr_rx+0x20a>
			if (lll->enc_rx) {
   121ae:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   121b2:	0718      	lsls	r0, r3, #28
   121b4:	d429      	bmi.n	1220a <lll_conn_isr_rx+0x336>
			*is_rx_enqueue = 1U;
   121b6:	2701      	movs	r7, #1
   121b8:	e792      	b.n	120e0 <lll_conn_isr_rx+0x20c>
   121ba:	bf00      	nop
   121bc:	00011afd 	.word	0x00011afd
   121c0:	2000278a 	.word	0x2000278a
   121c4:	20002799 	.word	0x20002799
   121c8:	00011ce5 	.word	0x00011ce5
   121cc:	0001c2c0 	.word	0x0001c2c0
   121d0:	0001b828 	.word	0x0001b828
   121d4:	0001b7c8 	.word	0x0001b7c8
   121d8:	0001c274 	.word	0x0001c274
   121dc:	2000279a 	.word	0x2000279a
   121e0:	0001c27c 	.word	0x0001c27c
   121e4:	0001c314 	.word	0x0001c314
				lll->packet_tx_head_len = 0;
   121e8:	2200      	movs	r2, #0
   121ea:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   121ee:	f104 0148 	add.w	r1, r4, #72	; 0x48
   121f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   121f4:	f7f3 fe04 	bl	5e00 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   121f8:	9b01      	ldr	r3, [sp, #4]
   121fa:	7f32      	ldrb	r2, [r6, #28]
   121fc:	6819      	ldr	r1, [r3, #0]
   121fe:	6029      	str	r1, [r5, #0]
				tx->next = link;
   12200:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   12202:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   12204:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12208:	e763      	b.n	120d2 <lll_conn_isr_rx+0x1fe>
				done = radio_ccm_is_done();
   1220a:	f000 fdeb 	bl	12de4 <radio_ccm_is_done>
				LL_ASSERT(done);
   1220e:	b3c0      	cbz	r0, 12282 <lll_conn_isr_rx+0x3ae>
				bool mic_failure = !radio_ccm_mic_is_valid();
   12210:	f000 fe0a 	bl	12e28 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   12214:	bb28      	cbnz	r0, 12262 <lll_conn_isr_rx+0x38e>
				    lll->ccm_rx.counter == 0 &&
   12216:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   1221a:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   1221e:	4313      	orrs	r3, r2
   12220:	d104      	bne.n	1222c <lll_conn_isr_rx+0x358>
				    (pdu_data_rx->ll_id ==
   12222:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   12224:	f003 0303 	and.w	r3, r3, #3
   12228:	2b03      	cmp	r3, #3
   1222a:	d004      	beq.n	12236 <lll_conn_isr_rx+0x362>
					mic_state = LLL_CONN_MIC_FAIL;
   1222c:	4b1d      	ldr	r3, [pc, #116]	; (122a4 <lll_conn_isr_rx+0x3d0>)
   1222e:	2202      	movs	r2, #2
   12230:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   12232:	2700      	movs	r7, #0
   12234:	e6a5      	b.n	11f82 <lll_conn_isr_rx+0xae>
						radio_pkt_scratch_get();
   12236:	f000 fb67 	bl	12908 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1223a:	7843      	ldrb	r3, [r0, #1]
   1223c:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   1223e:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   12240:	d8f4      	bhi.n	1222c <lll_conn_isr_rx+0x358>
						memcpy(pdu_data_rx,
   12242:	3303      	adds	r3, #3
   12244:	b2da      	uxtb	r2, r3
   12246:	4638      	mov	r0, r7
   12248:	f005 fc58 	bl	17afc <memcpy>
						lll->ccm_rx.counter--;
   1224c:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   12250:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   12254:	3b01      	subs	r3, #1
   12256:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   1225a:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   1225e:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   12262:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   12266:	4a0f      	ldr	r2, [pc, #60]	; (122a4 <lll_conn_isr_rx+0x3d0>)
				lll->ccm_rx.counter++;
   12268:	3301      	adds	r3, #1
   1226a:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   1226e:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   12272:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   12276:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   1227a:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   1227c:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1227e:	7017      	strb	r7, [r2, #0]
		if (err) {
   12280:	e72e      	b.n	120e0 <lll_conn_isr_rx+0x20c>
				LL_ASSERT(done);
   12282:	4a09      	ldr	r2, [pc, #36]	; (122a8 <lll_conn_isr_rx+0x3d4>)
   12284:	4909      	ldr	r1, [pc, #36]	; (122ac <lll_conn_isr_rx+0x3d8>)
   12286:	480a      	ldr	r0, [pc, #40]	; (122b0 <lll_conn_isr_rx+0x3dc>)
   12288:	f240 33ba 	movw	r3, #954	; 0x3ba
   1228c:	f004 fe6f 	bl	16f6e <printk>
   12290:	4040      	eors	r0, r0
   12292:	f380 8811 	msr	BASEPRI, r0
   12296:	f04f 0003 	mov.w	r0, #3
   1229a:	df02      	svc	2
   1229c:	e7b8      	b.n	12210 <lll_conn_isr_rx+0x33c>
	is_rx_enqueue = 0U;
   1229e:	462f      	mov	r7, r5
   122a0:	e649      	b.n	11f36 <lll_conn_isr_rx+0x62>
   122a2:	bf00      	nop
   122a4:	2000279b 	.word	0x2000279b
   122a8:	0001c2c0 	.word	0x0001c2c0
   122ac:	0001c30c 	.word	0x0001c30c
   122b0:	0001b7c8 	.word	0x0001b7c8

000122b4 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   122b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   122b6:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   122b8:	89a2      	ldrh	r2, [r4, #12]
   122ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   122be:	429a      	cmp	r2, r3
{
   122c0:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   122c2:	f000 80d0 	beq.w	12466 <prepare_cb+0x1b2>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   122c6:	4605      	mov	r5, r0
   122c8:	f7ff fc82 	bl	11bd0 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   122cc:	892b      	ldrh	r3, [r5, #8]
   122ce:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   122d0:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   122d2:	441a      	add	r2, r3
   122d4:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   122d6:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   122d8:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   122da:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   122dc:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   122de:	1c41      	adds	r1, r0, #1
   122e0:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   122e2:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   122e4:	f04f 0100 	mov.w	r1, #0
   122e8:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   122ea:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   122ee:	f100 808d 	bmi.w	1240c <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   122f2:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   122f6:	460b      	mov	r3, r1
   122f8:	7fa1      	ldrb	r1, [r4, #30]
   122fa:	9000      	str	r0, [sp, #0]
   122fc:	f104 001f 	add.w	r0, r4, #31
   12300:	f7fd f890 	bl	f424 <lll_chan_sel_1>
   12304:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   12306:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   1230a:	4419      	add	r1, r3
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   1230c:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   12310:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   12312:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   12314:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->periph.window_widening_max_us) {
   12316:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   12318:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   1231a:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   1231c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->periph.window_widening_event_us =
   12320:	428b      	cmp	r3, r1
   12322:	bf28      	it	cs
   12324:	460b      	movcs	r3, r1
	if (!lll->empty) {
   12326:	f012 0204 	ands.w	r2, r2, #4
		lll->periph.window_widening_event_us =
   1232a:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   1232c:	f000 808d 	beq.w	1244a <prepare_cb+0x196>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   12330:	f000 f9e4 	bl	126fc <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   12334:	2000      	movs	r0, #0
   12336:	f000 fa15 	bl	12764 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1233a:	4620      	mov	r0, r4
   1233c:	f7ff fc8c 	bl	11c58 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   12340:	1d20      	adds	r0, r4, #4
   12342:	f000 fa2d 	bl	127a0 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   12346:	8923      	ldrh	r3, [r4, #8]
   12348:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1234a:	f240 605b 	movw	r0, #1627	; 0x65b
   1234e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   12352:	f000 fabf 	bl	128d4 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   12356:	4630      	mov	r0, r6
   12358:	f7fe fc52 	bl	10c00 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1235c:	4621      	mov	r1, r4
   1235e:	4846      	ldr	r0, [pc, #280]	; (12478 <prepare_cb+0x1c4>)
   12360:	f000 f98a 	bl	12678 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   12364:	2096      	movs	r0, #150	; 0x96
   12366:	f000 fbf1 	bl	12b4c <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1236a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1236e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   12372:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   12376:	2100      	movs	r1, #0
   12378:	f002 0207 	and.w	r2, r2, #7
   1237c:	f000 0007 	and.w	r0, r0, #7
   12380:	f000 fb12 	bl	129a8 <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   12384:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   12386:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   12388:	4638      	mov	r0, r7
   1238a:	f7fe fc1b 	bl	10bc4 <lll_event_offset_get>
   1238e:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   12390:	686a      	ldr	r2, [r5, #4]
   12392:	f106 0109 	add.w	r1, r6, #9
   12396:	2000      	movs	r0, #0
   12398:	f000 fbe4 	bl	12b64 <radio_tmr_start>
   1239c:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1239e:	f000 fc83 	bl	12ca8 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   123a2:	2000      	movs	r0, #0
   123a4:	f000 fc9a 	bl	12cdc <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   123a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   123aa:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   123ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   123b0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   123b4:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   123b8:	2101      	movs	r1, #1
   123ba:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   123be:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   123c0:	f000 fa3c 	bl	1283c <radio_rx_ready_delay_get>
   123c4:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   123c6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   123ca:	f000 0007 	and.w	r0, r0, #7
   123ce:	2802      	cmp	r0, #2
   123d0:	d039      	beq.n	12446 <prepare_cb+0x192>
		return 40;
   123d2:	2804      	cmp	r0, #4
   123d4:	bf0c      	ite	eq
   123d6:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   123da:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   123dc:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   123de:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   123e0:	f000 fa2e 	bl	12840 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   123e4:	4428      	add	r0, r5
   123e6:	f000 fc51 	bl	12c8c <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   123ea:	89a1      	ldrh	r1, [r4, #12]
   123ec:	3103      	adds	r1, #3
   123ee:	4632      	mov	r2, r6
   123f0:	b2c9      	uxtb	r1, r1
   123f2:	4638      	mov	r0, r7
   123f4:	f7fe fbf4 	bl	10be0 <lll_preempt_calc>
   123f8:	b180      	cbz	r0, 1241c <prepare_cb+0x168>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   123fa:	4820      	ldr	r0, [pc, #128]	; (1247c <prepare_cb+0x1c8>)
   123fc:	4621      	mov	r1, r4
   123fe:	f000 f93b 	bl	12678 <radio_isr_set>
		radio_disable();
   12402:	f000 fa29 	bl	12858 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   12406:	2000      	movs	r0, #0
   12408:	b003      	add	sp, #12
   1240a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1240c:	460a      	mov	r2, r1
   1240e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   12412:	8be1      	ldrh	r1, [r4, #30]
   12414:	f7fd f84a 	bl	f4ac <lll_chan_sel_2>
   12418:	4606      	mov	r6, r0
   1241a:	e774      	b.n	12306 <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   1241c:	4620      	mov	r0, r4
   1241e:	f7fe fb79 	bl	10b14 <lll_prepare_done>
		LL_ASSERT(!ret);
   12422:	2800      	cmp	r0, #0
   12424:	d0ef      	beq.n	12406 <prepare_cb+0x152>
   12426:	4a16      	ldr	r2, [pc, #88]	; (12480 <prepare_cb+0x1cc>)
   12428:	4916      	ldr	r1, [pc, #88]	; (12484 <prepare_cb+0x1d0>)
   1242a:	4817      	ldr	r0, [pc, #92]	; (12488 <prepare_cb+0x1d4>)
   1242c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   12430:	f004 fd9d 	bl	16f6e <printk>
   12434:	4040      	eors	r0, r0
   12436:	f380 8811 	msr	BASEPRI, r0
   1243a:	f04f 0003 	mov.w	r0, #3
   1243e:	df02      	svc	2
}
   12440:	2000      	movs	r0, #0
   12442:	b003      	add	sp, #12
   12444:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   12446:	2318      	movs	r3, #24
   12448:	e7c8      	b.n	123dc <prepare_cb+0x128>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   1244a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1244e:	f7f3 fccf 	bl	5df0 <memq_peek>
		if (!link) {
   12452:	2800      	cmp	r0, #0
   12454:	f47f af6c 	bne.w	12330 <prepare_cb+0x7c>
			lll->empty = 1U;
   12458:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1245c:	f043 0304 	orr.w	r3, r3, #4
   12460:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   12464:	e764      	b.n	12330 <prepare_cb+0x7c>
		radio_isr_set(lll_isr_early_abort, lll);
   12466:	4809      	ldr	r0, [pc, #36]	; (1248c <prepare_cb+0x1d8>)
   12468:	4621      	mov	r1, r4
   1246a:	f000 f905 	bl	12678 <radio_isr_set>
		radio_disable();
   1246e:	f000 f9f3 	bl	12858 <radio_disable>
}
   12472:	2000      	movs	r0, #0
   12474:	b003      	add	sp, #12
   12476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12478:	00011ed5 	.word	0x00011ed5
   1247c:	00010d35 	.word	0x00010d35
   12480:	0001c32c 	.word	0x0001c32c
   12484:	0001ba64 	.word	0x0001ba64
   12488:	0001b7c8 	.word	0x0001b7c8
   1248c:	00010d59 	.word	0x00010d59

00012490 <lll_periph_prepare>:
{
   12490:	b510      	push	{r4, lr}
   12492:	b082      	sub	sp, #8
   12494:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   12496:	f7fe fdaf 	bl	10ff8 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1249a:	2800      	cmp	r0, #0
   1249c:	db25      	blt.n	124ea <lll_periph_prepare+0x5a>
	lll = p->param;
   1249e:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   124a0:	8920      	ldrh	r0, [r4, #8]
   124a2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   124a4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   124a6:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->periph.window_widening_max_us) {
   124aa:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   124ac:	4413      	add	r3, r2
		lll->periph.window_widening_prepare_us =
   124ae:	4283      	cmp	r3, r0
   124b0:	bf28      	it	cs
   124b2:	4603      	movcs	r3, r0
   124b4:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   124b6:	4a13      	ldr	r2, [pc, #76]	; (12504 <lll_periph_prepare+0x74>)
   124b8:	4913      	ldr	r1, [pc, #76]	; (12508 <lll_periph_prepare+0x78>)
   124ba:	4814      	ldr	r0, [pc, #80]	; (1250c <lll_periph_prepare+0x7c>)
   124bc:	9400      	str	r4, [sp, #0]
   124be:	2300      	movs	r3, #0
   124c0:	f7f7 fc1a 	bl	9cf8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   124c4:	b108      	cbz	r0, 124ca <lll_periph_prepare+0x3a>
   124c6:	3077      	adds	r0, #119	; 0x77
   124c8:	d101      	bne.n	124ce <lll_periph_prepare+0x3e>
}
   124ca:	b002      	add	sp, #8
   124cc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   124ce:	4a10      	ldr	r2, [pc, #64]	; (12510 <lll_periph_prepare+0x80>)
   124d0:	4910      	ldr	r1, [pc, #64]	; (12514 <lll_periph_prepare+0x84>)
   124d2:	4811      	ldr	r0, [pc, #68]	; (12518 <lll_periph_prepare+0x88>)
   124d4:	235e      	movs	r3, #94	; 0x5e
   124d6:	f004 fd4a 	bl	16f6e <printk>
   124da:	4040      	eors	r0, r0
   124dc:	f380 8811 	msr	BASEPRI, r0
   124e0:	f04f 0003 	mov.w	r0, #3
   124e4:	df02      	svc	2
}
   124e6:	b002      	add	sp, #8
   124e8:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   124ea:	4a09      	ldr	r2, [pc, #36]	; (12510 <lll_periph_prepare+0x80>)
   124ec:	490b      	ldr	r1, [pc, #44]	; (1251c <lll_periph_prepare+0x8c>)
   124ee:	480a      	ldr	r0, [pc, #40]	; (12518 <lll_periph_prepare+0x88>)
   124f0:	234d      	movs	r3, #77	; 0x4d
   124f2:	f004 fd3c 	bl	16f6e <printk>
   124f6:	4040      	eors	r0, r0
   124f8:	f380 8811 	msr	BASEPRI, r0
   124fc:	f04f 0003 	mov.w	r0, #3
   12500:	df02      	svc	2
   12502:	e7cc      	b.n	1249e <lll_periph_prepare+0xe>
   12504:	000122b5 	.word	0x000122b5
   12508:	00011bf9 	.word	0x00011bf9
   1250c:	00010bbd 	.word	0x00010bbd
   12510:	0001c32c 	.word	0x0001c32c
   12514:	0001c2ac 	.word	0x0001c2ac
   12518:	0001b7c8 	.word	0x0001b7c8
   1251c:	0001c1d8 	.word	0x0001c1d8

00012520 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   12520:	4b05      	ldr	r3, [pc, #20]	; (12538 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   12522:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12526:	2100      	movs	r1, #0
   12528:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1252c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   12530:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   12534:	4770      	bx	lr
   12536:	bf00      	nop
   12538:	4000b000 	.word	0x4000b000

0001253c <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1253c:	4b05      	ldr	r3, [pc, #20]	; (12554 <cntr_start+0x18>)
   1253e:	7818      	ldrb	r0, [r3, #0]
   12540:	1c42      	adds	r2, r0, #1
   12542:	701a      	strb	r2, [r3, #0]
   12544:	b918      	cbnz	r0, 1254e <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12546:	4b04      	ldr	r3, [pc, #16]	; (12558 <cntr_start+0x1c>)
   12548:	2201      	movs	r2, #1
   1254a:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1254c:	4770      	bx	lr
		return 1;
   1254e:	2001      	movs	r0, #1
}
   12550:	4770      	bx	lr
   12552:	bf00      	nop
   12554:	2000279c 	.word	0x2000279c
   12558:	4000b000 	.word	0x4000b000

0001255c <cntr_stop>:

uint32_t cntr_stop(void)
{
   1255c:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1255e:	4c0d      	ldr	r4, [pc, #52]	; (12594 <cntr_stop+0x38>)
   12560:	7820      	ldrb	r0, [r4, #0]
   12562:	b148      	cbz	r0, 12578 <cntr_stop+0x1c>

	if (--_refcount) {
   12564:	3801      	subs	r0, #1
   12566:	b2c0      	uxtb	r0, r0
   12568:	7020      	strb	r0, [r4, #0]
   1256a:	b918      	cbnz	r0, 12574 <cntr_stop+0x18>
   1256c:	4b0a      	ldr	r3, [pc, #40]	; (12598 <cntr_stop+0x3c>)
   1256e:	2201      	movs	r2, #1
   12570:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   12572:	bd10      	pop	{r4, pc}
		return 1;
   12574:	2001      	movs	r0, #1
}
   12576:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   12578:	4a08      	ldr	r2, [pc, #32]	; (1259c <cntr_stop+0x40>)
   1257a:	4909      	ldr	r1, [pc, #36]	; (125a0 <cntr_stop+0x44>)
   1257c:	4809      	ldr	r0, [pc, #36]	; (125a4 <cntr_stop+0x48>)
   1257e:	232d      	movs	r3, #45	; 0x2d
   12580:	f004 fcf5 	bl	16f6e <printk>
   12584:	4040      	eors	r0, r0
   12586:	f380 8811 	msr	BASEPRI, r0
   1258a:	f04f 0003 	mov.w	r0, #3
   1258e:	df02      	svc	2
	if (--_refcount) {
   12590:	7820      	ldrb	r0, [r4, #0]
   12592:	e7e7      	b.n	12564 <cntr_stop+0x8>
   12594:	2000279c 	.word	0x2000279c
   12598:	4000b000 	.word	0x4000b000
   1259c:	0001c380 	.word	0x0001c380
   125a0:	0001c3cc 	.word	0x0001c3cc
   125a4:	0001b7c8 	.word	0x0001b7c8

000125a8 <cntr_cnt_get>:
     return p_reg->COUNTER;
   125a8:	4b01      	ldr	r3, [pc, #4]	; (125b0 <cntr_cnt_get+0x8>)
   125aa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   125ae:	4770      	bx	lr
   125b0:	4000b000 	.word	0x4000b000

000125b4 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   125b4:	4b02      	ldr	r3, [pc, #8]	; (125c0 <cntr_cmp_set+0xc>)
   125b6:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   125ba:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   125be:	4770      	bx	lr
   125c0:	4000b000 	.word	0x4000b000

000125c4 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   125c4:	4b12      	ldr	r3, [pc, #72]	; (12610 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   125c6:	b430      	push	{r4, r5}
   125c8:	2101      	movs	r1, #1
   125ca:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   125cc:	2000      	movs	r0, #0
   125ce:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   125d0:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   125d4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   125d8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   125dc:	6019      	str	r1, [r3, #0]
}
   125de:	e005      	b.n	125ec <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   125e0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   125e4:	b932      	cbnz	r2, 125f4 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   125e6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   125ea:	b11a      	cbz	r2, 125f4 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   125ec:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   125f0:	2a00      	cmp	r2, #0
   125f2:	d0f5      	beq.n	125e0 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   125f4:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   125f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   125fa:	2a00      	cmp	r2, #0
   125fc:	d1e7      	bne.n	125ce <do_ecb+0xa>
   125fe:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   12602:	2d00      	cmp	r5, #0
   12604:	d0e3      	beq.n	125ce <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   12606:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   12608:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1260c:	4770      	bx	lr
   1260e:	bf00      	nop
   12610:	4000e000 	.word	0x4000e000

00012614 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   12614:	b570      	push	{r4, r5, r6, lr}
   12616:	b08c      	sub	sp, #48	; 0x30
   12618:	460e      	mov	r6, r1
   1261a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1261c:	4601      	mov	r1, r0
   1261e:	2210      	movs	r2, #16
   12620:	4668      	mov	r0, sp
{
   12622:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12624:	f7f3 fbb2 	bl	5d8c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   12628:	2210      	movs	r2, #16
   1262a:	eb0d 0002 	add.w	r0, sp, r2
   1262e:	4631      	mov	r1, r6
   12630:	f7f3 fbac 	bl	5d8c <mem_rcopy>

	do_ecb(&ecb);
   12634:	4668      	mov	r0, sp
   12636:	f7ff ffc5 	bl	125c4 <do_ecb>

	if (cipher_text_le) {
   1263a:	b125      	cbz	r5, 12646 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1263c:	2210      	movs	r2, #16
   1263e:	a908      	add	r1, sp, #32
   12640:	4628      	mov	r0, r5
   12642:	f7f3 fba3 	bl	5d8c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   12646:	b124      	cbz	r4, 12652 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12648:	2210      	movs	r2, #16
   1264a:	a908      	add	r1, sp, #32
   1264c:	4620      	mov	r0, r4
   1264e:	f005 fa55 	bl	17afc <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   12652:	b00c      	add	sp, #48	; 0x30
   12654:	bd70      	pop	{r4, r5, r6, pc}
   12656:	bf00      	nop

00012658 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   12658:	4b04      	ldr	r3, [pc, #16]	; (1266c <isr_radio+0x14>)
   1265a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1265e:	b123      	cbz	r3, 1266a <isr_radio+0x12>
		isr_cb(isr_cb_param);
   12660:	4a03      	ldr	r2, [pc, #12]	; (12670 <isr_radio+0x18>)
   12662:	4b04      	ldr	r3, [pc, #16]	; (12674 <isr_radio+0x1c>)
   12664:	6810      	ldr	r0, [r2, #0]
   12666:	681b      	ldr	r3, [r3, #0]
   12668:	4718      	bx	r3
}
   1266a:	4770      	bx	lr
   1266c:	40001000 	.word	0x40001000
   12670:	20002508 	.word	0x20002508
   12674:	20002504 	.word	0x20002504

00012678 <radio_isr_set>:
{
   12678:	b538      	push	{r3, r4, r5, lr}
   1267a:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1267c:	2001      	movs	r0, #1
{
   1267e:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   12680:	f7ef fdbc 	bl	21fc <arch_irq_disable>
	isr_cb = cb;
   12684:	4b08      	ldr	r3, [pc, #32]	; (126a8 <radio_isr_set+0x30>)
	isr_cb_param = param;
   12686:	4a09      	ldr	r2, [pc, #36]	; (126ac <radio_isr_set+0x34>)
	isr_cb = cb;
   12688:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1268a:	4909      	ldr	r1, [pc, #36]	; (126b0 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1268c:	4b09      	ldr	r3, [pc, #36]	; (126b4 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1268e:	6015      	str	r5, [r2, #0]
   12690:	2010      	movs	r0, #16
   12692:	2202      	movs	r2, #2
   12694:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   12698:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1269c:	2001      	movs	r0, #1
}
   1269e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   126a2:	f7ef bd9b 	b.w	21dc <arch_irq_enable>
   126a6:	bf00      	nop
   126a8:	20002504 	.word	0x20002504
   126ac:	20002508 	.word	0x20002508
   126b0:	40001000 	.word	0x40001000
   126b4:	e000e100 	.word	0xe000e100

000126b8 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   126b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   126bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   126c0:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   126c2:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   126c6:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   126ca:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   126ce:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   126d2:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   126d6:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   126da:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   126de:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   126e2:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   126e6:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   126ea:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   126ee:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   126f2:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   126f6:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   126fa:	4770      	bx	lr

000126fc <radio_reset>:
{
   126fc:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   126fe:	2001      	movs	r0, #1
   12700:	f7ef fd7c 	bl	21fc <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   12704:	4a0d      	ldr	r2, [pc, #52]	; (1273c <radio_reset+0x40>)
   12706:	2100      	movs	r1, #0
   12708:	2301      	movs	r3, #1
   1270a:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1270e:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   12712:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   12716:	490a      	ldr	r1, [pc, #40]	; (12740 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   12718:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1271c:	f023 0301 	bic.w	r3, r3, #1
   12720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   12724:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   12728:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1272c:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   12730:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   12734:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   12738:	bd10      	pop	{r4, pc}
   1273a:	bf00      	nop
   1273c:	40001000 	.word	0x40001000
   12740:	4001f000 	.word	0x4001f000

00012744 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   12744:	4b06      	ldr	r3, [pc, #24]	; (12760 <radio_phy_set+0x1c>)
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   12746:	2802      	cmp	r0, #2
   12748:	bf14      	ite	ne
   1274a:	2203      	movne	r2, #3
   1274c:	2204      	moveq	r2, #4
   1274e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   12752:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   12756:	f042 0201 	orr.w	r2, r2, #1
   1275a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1275e:	4770      	bx	lr
   12760:	40001000 	.word	0x40001000

00012764 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   12764:	4b01      	ldr	r3, [pc, #4]	; (1276c <radio_tx_power_set+0x8>)
   12766:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1276a:	4770      	bx	lr
   1276c:	40001000 	.word	0x40001000

00012770 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   12770:	4b01      	ldr	r3, [pc, #4]	; (12778 <radio_freq_chan_set+0x8>)
   12772:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   12776:	4770      	bx	lr
   12778:	40001000 	.word	0x40001000

0001277c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1277c:	4b07      	ldr	r3, [pc, #28]	; (1279c <radio_whiten_iv_set+0x20>)
   1277e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   12782:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12786:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1278a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1278e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12792:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   12796:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1279a:	4770      	bx	lr
   1279c:	40001000 	.word	0x40001000

000127a0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   127a0:	4a0a      	ldr	r2, [pc, #40]	; (127cc <radio_aa_set+0x2c>)
   127a2:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   127a4:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   127a6:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   127aa:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   127ae:	78c3      	ldrb	r3, [r0, #3]
   127b0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   127b4:	7843      	ldrb	r3, [r0, #1]
   127b6:	f890 c002 	ldrb.w	ip, [r0, #2]
   127ba:	7801      	ldrb	r1, [r0, #0]
   127bc:	041b      	lsls	r3, r3, #16
   127be:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   127c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   127c6:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   127ca:	4770      	bx	lr
   127cc:	40001000 	.word	0x40001000

000127d0 <radio_pkt_configure>:
	switch (phy) {
   127d0:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   127d4:	2b02      	cmp	r3, #2
   127d6:	bf14      	ite	ne
   127d8:	f04f 0c00 	movne.w	ip, #0
   127dc:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   127e0:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   127e2:	bf48      	it	mi
   127e4:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   127e8:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   127ec:	4b0a      	ldr	r3, [pc, #40]	; (12818 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   127ee:	4a0b      	ldr	r2, [pc, #44]	; (1281c <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   127f0:	ea40 000c 	orr.w	r0, r0, ip
   127f4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   127f8:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   127fc:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   12800:	4002      	ands	r2, r0
   12802:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   12806:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1280a:	4311      	orrs	r1, r2
   1280c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   12810:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   12814:	4770      	bx	lr
   12816:	bf00      	nop
   12818:	40001000 	.word	0x40001000
   1281c:	fef80000 	.word	0xfef80000

00012820 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   12820:	4b01      	ldr	r3, [pc, #4]	; (12828 <radio_pkt_rx_set+0x8>)
   12822:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   12826:	4770      	bx	lr
   12828:	40001000 	.word	0x40001000

0001282c <radio_pkt_tx_set>:
   1282c:	4b01      	ldr	r3, [pc, #4]	; (12834 <radio_pkt_tx_set+0x8>)
   1282e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   12832:	4770      	bx	lr
   12834:	40001000 	.word	0x40001000

00012838 <radio_tx_chain_delay_get>:
}
   12838:	2001      	movs	r0, #1
   1283a:	4770      	bx	lr

0001283c <radio_rx_ready_delay_get>:
}
   1283c:	2029      	movs	r0, #41	; 0x29
   1283e:	4770      	bx	lr

00012840 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_US;
   12840:	2802      	cmp	r0, #2
}
   12842:	bf14      	ite	ne
   12844:	200a      	movne	r0, #10
   12846:	2006      	moveq	r0, #6
   12848:	4770      	bx	lr
   1284a:	bf00      	nop

0001284c <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1284c:	4b01      	ldr	r3, [pc, #4]	; (12854 <radio_tx_enable+0x8>)
   1284e:	2201      	movs	r2, #1
   12850:	601a      	str	r2, [r3, #0]
}
   12852:	4770      	bx	lr
   12854:	40001000 	.word	0x40001000

00012858 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   12858:	4a07      	ldr	r2, [pc, #28]	; (12878 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1285a:	4908      	ldr	r1, [pc, #32]	; (1287c <radio_disable+0x24>)
{
   1285c:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1285e:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   12860:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   12864:	2000      	movs	r0, #0
   12866:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1286a:	6053      	str	r3, [r2, #4]
}
   1286c:	bc10      	pop	{r4}
   1286e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   12870:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   12874:	610b      	str	r3, [r1, #16]
}
   12876:	4770      	bx	lr
   12878:	4001f000 	.word	0x4001f000
   1287c:	40001000 	.word	0x40001000

00012880 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   12880:	4b04      	ldr	r3, [pc, #16]	; (12894 <radio_status_reset+0x14>)
   12882:	2200      	movs	r2, #0
   12884:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   12888:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1288c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   12890:	4770      	bx	lr
   12892:	bf00      	nop
   12894:	40001000 	.word	0x40001000

00012898 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   12898:	4b03      	ldr	r3, [pc, #12]	; (128a8 <radio_is_ready+0x10>)
   1289a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1289e:	3800      	subs	r0, #0
   128a0:	bf18      	it	ne
   128a2:	2001      	movne	r0, #1
   128a4:	4770      	bx	lr
   128a6:	bf00      	nop
   128a8:	40001000 	.word	0x40001000

000128ac <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   128ac:	4b03      	ldr	r3, [pc, #12]	; (128bc <radio_is_done+0x10>)
   128ae:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   128b2:	3800      	subs	r0, #0
   128b4:	bf18      	it	ne
   128b6:	2001      	movne	r0, #1
   128b8:	4770      	bx	lr
   128ba:	bf00      	nop
   128bc:	40001000 	.word	0x40001000

000128c0 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   128c0:	4b03      	ldr	r3, [pc, #12]	; (128d0 <radio_is_idle+0x10>)
   128c2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   128c6:	fab0 f080 	clz	r0, r0
   128ca:	0940      	lsrs	r0, r0, #5
   128cc:	4770      	bx	lr
   128ce:	bf00      	nop
   128d0:	40001000 	.word	0x40001000

000128d4 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   128d4:	4b04      	ldr	r3, [pc, #16]	; (128e8 <radio_crc_configure+0x14>)
   128d6:	f240 1203 	movw	r2, #259	; 0x103
   128da:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   128de:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   128e2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   128e6:	4770      	bx	lr
   128e8:	40001000 	.word	0x40001000

000128ec <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   128ec:	4b03      	ldr	r3, [pc, #12]	; (128fc <radio_crc_is_valid+0x10>)
   128ee:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   128f2:	3800      	subs	r0, #0
   128f4:	bf18      	it	ne
   128f6:	2001      	movne	r0, #1
   128f8:	4770      	bx	lr
   128fa:	bf00      	nop
   128fc:	40001000 	.word	0x40001000

00012900 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   12900:	4800      	ldr	r0, [pc, #0]	; (12904 <radio_pkt_empty_get+0x4>)
   12902:	4770      	bx	lr
   12904:	200023fc 	.word	0x200023fc

00012908 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   12908:	4800      	ldr	r0, [pc, #0]	; (1290c <radio_pkt_scratch_get+0x4>)
   1290a:	4770      	bx	lr
   1290c:	20002400 	.word	0x20002400

00012910 <radio_pkt_decrypt_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_decrypt_get(void)
{
	return _pkt_decrypt;
}
   12910:	4800      	ldr	r0, [pc, #0]	; (12914 <radio_pkt_decrypt_get+0x4>)
   12912:	4770      	bx	lr
   12914:	200022f8 	.word	0x200022f8

00012918 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   12918:	4b1d      	ldr	r3, [pc, #116]	; (12990 <radio_switch_complete_and_rx+0x78>)
{
   1291a:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1291c:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1291e:	4d1d      	ldr	r5, [pc, #116]	; (12994 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   12920:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   12924:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12926:	4e1c      	ldr	r6, [pc, #112]	; (12998 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   12928:	4c1c      	ldr	r4, [pc, #112]	; (1299c <radio_switch_complete_and_rx+0x84>)
   1292a:	4f1d      	ldr	r7, [pc, #116]	; (129a0 <radio_switch_complete_and_rx+0x88>)
   1292c:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   12930:	f102 030c 	add.w	r3, r2, #12
   12934:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   12936:	00d0      	lsls	r0, r2, #3
   12938:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1293a:	0091      	lsls	r1, r2, #2
   1293c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   12940:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   12944:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   12948:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1294c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   12950:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   12954:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   12958:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1295c:	4811      	ldr	r0, [pc, #68]	; (129a4 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1295e:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12962:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   12966:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1296a:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1296c:	bf8a      	itet	hi
   1296e:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   12972:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   12974:	3b2d      	subhi	r3, #45	; 0x2d
   12976:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1297a:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1297c:	4b06      	ldr	r3, [pc, #24]	; (12998 <radio_switch_complete_and_rx+0x80>)
   1297e:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   12982:	f002 0201 	and.w	r2, r2, #1
   12986:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1298a:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1298c:	bcf0      	pop	{r4, r5, r6, r7}
   1298e:	4770      	bx	lr
   12990:	40001000 	.word	0x40001000
   12994:	2000279d 	.word	0x2000279d
   12998:	4001f000 	.word	0x4001f000
   1299c:	40009140 	.word	0x40009140
   129a0:	4000110c 	.word	0x4000110c
   129a4:	40001004 	.word	0x40001004

000129a8 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   129a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   129ac:	4e28      	ldr	r6, [pc, #160]	; (12a50 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   129ae:	4c29      	ldr	r4, [pc, #164]	; (12a54 <radio_switch_complete_and_tx+0xac>)
   129b0:	4f29      	ldr	r7, [pc, #164]	; (12a58 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   129b2:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 12a5c <radio_switch_complete_and_tx+0xb4>
   129b6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 12a60 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   129ba:	2303      	movs	r3, #3
   129bc:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   129c0:	7821      	ldrb	r1, [r4, #0]
   129c2:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   129c6:	f101 030c 	add.w	r3, r1, #12
   129ca:	b2db      	uxtb	r3, r3
   129cc:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   129ce:	00cd      	lsls	r5, r1, #3
   129d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   129d4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   129d8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   129dc:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   129e0:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   129e4:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   129e8:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   129ec:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   129f0:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   129f4:	f24a 234e 	movw	r3, #41550	; 0xa24e
   129f8:	2a02      	cmp	r2, #2
   129fa:	bf08      	it	eq
   129fc:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   129fe:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   12a02:	f242 42b8 	movw	r2, #9400	; 0x24b8
   12a06:	f241 554a 	movw	r5, #5450	; 0x154a
   12a0a:	2802      	cmp	r0, #2
   12a0c:	bf08      	it	eq
   12a0e:	462a      	moveq	r2, r5
   12a10:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   12a14:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   12a18:	4413      	add	r3, r2
   12a1a:	4a12      	ldr	r2, [pc, #72]	; (12a64 <radio_switch_complete_and_tx+0xbc>)
   12a1c:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   12a20:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   12a24:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   12a28:	bf85      	ittet	hi
   12a2a:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   12a2c:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   12a30:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   12a32:	1a1b      	subhi	r3, r3, r0
   12a34:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   12a38:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   12a3a:	4b08      	ldr	r3, [pc, #32]	; (12a5c <radio_switch_complete_and_tx+0xb4>)
   12a3c:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   12a40:	f001 0101 	and.w	r1, r1, #1
   12a44:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12a48:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   12a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a4e:	bf00      	nop
   12a50:	40001000 	.word	0x40001000
   12a54:	2000279d 	.word	0x2000279d
   12a58:	40009140 	.word	0x40009140
   12a5c:	4001f000 	.word	0x4001f000
   12a60:	4000110c 	.word	0x4000110c
   12a64:	10624dd3 	.word	0x10624dd3

00012a68 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   12a68:	4904      	ldr	r1, [pc, #16]	; (12a7c <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   12a6a:	4b05      	ldr	r3, [pc, #20]	; (12a80 <radio_switch_complete_and_disable+0x18>)
   12a6c:	2003      	movs	r0, #3
   12a6e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   12a72:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   12a76:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   12a7a:	4770      	bx	lr
   12a7c:	40001000 	.word	0x40001000
   12a80:	4001f000 	.word	0x4001f000

00012a84 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   12a84:	4b02      	ldr	r3, [pc, #8]	; (12a90 <radio_rssi_status_reset+0xc>)
   12a86:	2200      	movs	r2, #0
   12a88:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   12a8c:	4770      	bx	lr
   12a8e:	bf00      	nop
   12a90:	40001000 	.word	0x40001000

00012a94 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   12a94:	4b03      	ldr	r3, [pc, #12]	; (12aa4 <radio_rssi_is_ready+0x10>)
   12a96:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   12a9a:	3800      	subs	r0, #0
   12a9c:	bf18      	it	ne
   12a9e:	2001      	movne	r0, #1
   12aa0:	4770      	bx	lr
   12aa2:	bf00      	nop
   12aa4:	40001000 	.word	0x40001000

00012aa8 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   12aa8:	b410      	push	{r4}
   12aaa:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   12aae:	ea4f 038c 	mov.w	r3, ip, lsl #2
   12ab2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   12aba:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   12abc:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   12ac0:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   12ac4:	8894      	ldrh	r4, [r2, #4]
   12ac6:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   12aca:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   12ace:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   12ad2:	d1ec      	bne.n	12aae <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <radio_filter_configure+0x3c>)
}
   12ad6:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   12ad8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   12adc:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   12ae0:	4770      	bx	lr
   12ae2:	bf00      	nop
   12ae4:	40001000 	.word	0x40001000

00012ae8 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   12ae8:	4a03      	ldr	r2, [pc, #12]	; (12af8 <radio_filter_disable+0x10>)
   12aea:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   12aee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12af2:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   12af6:	4770      	bx	lr
   12af8:	40001000 	.word	0x40001000

00012afc <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   12afc:	4b02      	ldr	r3, [pc, #8]	; (12b08 <radio_filter_status_reset+0xc>)
   12afe:	2200      	movs	r2, #0
   12b00:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   12b04:	4770      	bx	lr
   12b06:	bf00      	nop
   12b08:	40001000 	.word	0x40001000

00012b0c <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   12b0c:	4b03      	ldr	r3, [pc, #12]	; (12b1c <radio_filter_has_match+0x10>)
   12b0e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   12b12:	3800      	subs	r0, #0
   12b14:	bf18      	it	ne
   12b16:	2001      	movne	r0, #1
   12b18:	4770      	bx	lr
   12b1a:	bf00      	nop
   12b1c:	40001000 	.word	0x40001000

00012b20 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   12b20:	4b01      	ldr	r3, [pc, #4]	; (12b28 <radio_filter_match_get+0x8>)
   12b22:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   12b26:	4770      	bx	lr
   12b28:	40001000 	.word	0x40001000

00012b2c <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   12b2c:	4904      	ldr	r1, [pc, #16]	; (12b40 <radio_tmr_status_reset+0x14>)
   12b2e:	4b05      	ldr	r3, [pc, #20]	; (12b44 <radio_tmr_status_reset+0x18>)
   12b30:	4a05      	ldr	r2, [pc, #20]	; (12b48 <radio_tmr_status_reset+0x1c>)
   12b32:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   12b36:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   12b3a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   12b3e:	4770      	bx	lr
   12b40:	4000b000 	.word	0x4000b000
   12b44:	4001f000 	.word	0x4001f000
   12b48:	0e7000c0 	.word	0x0e7000c0

00012b4c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   12b4c:	4b03      	ldr	r3, [pc, #12]	; (12b5c <radio_tmr_tifs_set+0x10>)
   12b4e:	4a04      	ldr	r2, [pc, #16]	; (12b60 <radio_tmr_tifs_set+0x14>)
   12b50:	781b      	ldrb	r3, [r3, #0]
   12b52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   12b56:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   12b5a:	4770      	bx	lr
   12b5c:	2000279d 	.word	0x2000279d
   12b60:	40009000 	.word	0x40009000

00012b64 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   12b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12b68:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12b6c:	4d31      	ldr	r5, [pc, #196]	; (12c34 <radio_tmr_start+0xd0>)
   12b6e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12b72:	42ab      	cmp	r3, r5
{
   12b74:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12b76:	d906      	bls.n	12b86 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   12b78:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   12b7c:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   12b80:	3901      	subs	r1, #1
		remainder += 30517578UL;
   12b82:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12b86:	4b2c      	ldr	r3, [pc, #176]	; (12c38 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   12b88:	482c      	ldr	r0, [pc, #176]	; (12c3c <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   12b8a:	4d2d      	ldr	r5, [pc, #180]	; (12c40 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12b8c:	4e2d      	ldr	r6, [pc, #180]	; (12c44 <radio_tmr_start+0xe0>)
   12b8e:	2701      	movs	r7, #1
   12b90:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   12b92:	2700      	movs	r7, #0
   12b94:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   12b98:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   12b9c:	2704      	movs	r7, #4
   12b9e:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   12ba2:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12ba4:	2702      	movs	r7, #2
   12ba6:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   12baa:	4a27      	ldr	r2, [pc, #156]	; (12c48 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   12bac:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   12bb0:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   12bb4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   12bb8:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   12bbc:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12bbe:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12bc2:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   12bc6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   12bca:	bb64      	cbnz	r4, 12c26 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   12bcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   12bd0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   12bd4:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   12bd8:	4b1b      	ldr	r3, [pc, #108]	; (12c48 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12bda:	4a1c      	ldr	r2, [pc, #112]	; (12c4c <radio_tmr_start+0xe8>)
   12bdc:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   12be0:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   12be2:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12be4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 12c50 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12be8:	f8df e068 	ldr.w	lr, [pc, #104]	; 12c54 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12bec:	f8df c068 	ldr.w	ip, [pc, #104]	; 12c58 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12bf0:	4f1a      	ldr	r7, [pc, #104]	; (12c5c <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12bf2:	4e1b      	ldr	r6, [pc, #108]	; (12c60 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12bf4:	4d1b      	ldr	r5, [pc, #108]	; (12c64 <radio_tmr_start+0x100>)
   12bf6:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   12bf8:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   12bfc:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   12c00:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   12c04:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   12c08:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12c0a:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12c0e:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12c12:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12c16:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12c1a:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12c1e:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   12c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   12c26:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   12c2a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   12c2e:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   12c32:	e7d1      	b.n	12bd8 <radio_tmr_start+0x74>
   12c34:	7ff0bdbf 	.word	0x7ff0bdbf
   12c38:	40008000 	.word	0x40008000
   12c3c:	431bde83 	.word	0x431bde83
   12c40:	4000b000 	.word	0x4000b000
   12c44:	4000b148 	.word	0x4000b148
   12c48:	4001f000 	.word	0x4001f000
   12c4c:	40009000 	.word	0x40009000
   12c50:	4000110c 	.word	0x4000110c
   12c54:	4000900c 	.word	0x4000900c
   12c58:	40009140 	.word	0x40009140
   12c5c:	4001f004 	.word	0x4001f004
   12c60:	40009144 	.word	0x40009144
   12c64:	4001f00c 	.word	0x4001f00c

00012c68 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   12c68:	4b01      	ldr	r3, [pc, #4]	; (12c70 <radio_tmr_start_get+0x8>)
   12c6a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   12c6e:	4770      	bx	lr
   12c70:	4000b000 	.word	0x4000b000

00012c74 <radio_tmr_stop>:
   12c74:	4903      	ldr	r1, [pc, #12]	; (12c84 <radio_tmr_stop+0x10>)
   12c76:	4a04      	ldr	r2, [pc, #16]	; (12c88 <radio_tmr_stop+0x14>)
   12c78:	2301      	movs	r3, #1
   12c7a:	604b      	str	r3, [r1, #4]
   12c7c:	610b      	str	r3, [r1, #16]
   12c7e:	6053      	str	r3, [r2, #4]
   12c80:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   12c82:	4770      	bx	lr
   12c84:	40008000 	.word	0x40008000
   12c88:	40009000 	.word	0x40009000

00012c8c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   12c8c:	4904      	ldr	r1, [pc, #16]	; (12ca0 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   12c8e:	4b05      	ldr	r3, [pc, #20]	; (12ca4 <radio_tmr_hcto_configure+0x18>)
   12c90:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   12c94:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   12c98:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   12c9c:	4770      	bx	lr
   12c9e:	bf00      	nop
   12ca0:	40008000 	.word	0x40008000
   12ca4:	4001f000 	.word	0x4001f000

00012ca8 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12ca8:	4b05      	ldr	r3, [pc, #20]	; (12cc0 <radio_tmr_aa_capture+0x18>)
   12caa:	4806      	ldr	r0, [pc, #24]	; (12cc4 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12cac:	4906      	ldr	r1, [pc, #24]	; (12cc8 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   12cae:	4a07      	ldr	r2, [pc, #28]	; (12ccc <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   12cb0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   12cb4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   12cb8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   12cbc:	4770      	bx	lr
   12cbe:	bf00      	nop
   12cc0:	4001f000 	.word	0x4001f000
   12cc4:	40001100 	.word	0x40001100
   12cc8:	40008040 	.word	0x40008040
   12ccc:	04000080 	.word	0x04000080

00012cd0 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   12cd0:	4b01      	ldr	r3, [pc, #4]	; (12cd8 <radio_tmr_aa_get+0x8>)
   12cd2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   12cd6:	4770      	bx	lr
   12cd8:	40008000 	.word	0x40008000

00012cdc <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   12cdc:	4b01      	ldr	r3, [pc, #4]	; (12ce4 <radio_tmr_aa_save+0x8>)
   12cde:	6018      	str	r0, [r3, #0]
}
   12ce0:	4770      	bx	lr
   12ce2:	bf00      	nop
   12ce4:	2000250c 	.word	0x2000250c

00012ce8 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   12ce8:	4b01      	ldr	r3, [pc, #4]	; (12cf0 <radio_tmr_aa_restore+0x8>)
}
   12cea:	6818      	ldr	r0, [r3, #0]
   12cec:	4770      	bx	lr
   12cee:	bf00      	nop
   12cf0:	2000250c 	.word	0x2000250c

00012cf4 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   12cf4:	4b01      	ldr	r3, [pc, #4]	; (12cfc <radio_tmr_ready_get+0x8>)
   12cf6:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   12cfa:	4770      	bx	lr
   12cfc:	40008000 	.word	0x40008000

00012d00 <radio_tmr_end_capture>:
   12d00:	4b02      	ldr	r3, [pc, #8]	; (12d0c <radio_tmr_end_capture+0xc>)
   12d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   12d06:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   12d0a:	4770      	bx	lr
   12d0c:	4001f000 	.word	0x4001f000

00012d10 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   12d10:	4b01      	ldr	r3, [pc, #4]	; (12d18 <radio_tmr_end_get+0x8>)
   12d12:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   12d16:	4770      	bx	lr
   12d18:	40008000 	.word	0x40008000

00012d1c <radio_tmr_tifs_base_get>:
   12d1c:	4b01      	ldr	r3, [pc, #4]	; (12d24 <radio_tmr_tifs_base_get+0x8>)
   12d1e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   12d22:	4770      	bx	lr
   12d24:	40008000 	.word	0x40008000

00012d28 <radio_ccm_rx_pkt_set>:
#endif /* HAL_RADIO_GPIO_HAVE_PA_PIN || HAL_RADIO_GPIO_HAVE_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   12d28:	b4f0      	push	{r4, r5, r6, r7}
   12d2a:	4605      	mov	r5, r0
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   12d2c:	4e13      	ldr	r6, [pc, #76]	; (12d7c <radio_ccm_rx_pkt_set+0x54>)
   12d2e:	4814      	ldr	r0, [pc, #80]	; (12d80 <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d30:	4b14      	ldr	r3, [pc, #80]	; (12d84 <radio_ccm_rx_pkt_set+0x5c>)

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   12d32:	4f15      	ldr	r7, [pc, #84]	; (12d88 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d34:	2400      	movs	r4, #0
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   12d36:	2902      	cmp	r1, #2
   12d38:	bf08      	it	eq
   12d3a:	4606      	moveq	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12d3c:	f04f 0c02 	mov.w	ip, #2
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   12d40:	4812      	ldr	r0, [pc, #72]	; (12d8c <radio_ccm_rx_pkt_set+0x64>)
   12d42:	4913      	ldr	r1, [pc, #76]	; (12d90 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d44:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12d48:	f8c3 c500 	str.w	ip, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   12d4c:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   12d50:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   12d54:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   12d58:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   12d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   12d60:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   12d64:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12d68:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12d6c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   12d70:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12d74:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   12d76:	bcf0      	pop	{r4, r5, r6, r7}
   12d78:	601a      	str	r2, [r3, #0]
   12d7a:	4770      	bx	lr
   12d7c:	01000001 	.word	0x01000001
   12d80:	01010001 	.word	0x01010001
   12d84:	4000f000 	.word	0x4000f000
   12d88:	200021ec 	.word	0x200021ec
   12d8c:	20002400 	.word	0x20002400
   12d90:	4001f000 	.word	0x4001f000

00012d94 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d94:	4b0f      	ldr	r3, [pc, #60]	; (12dd4 <radio_ccm_tx_pkt_set+0x40>)
{
   12d96:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d98:	2200      	movs	r2, #0
{
   12d9a:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12d9c:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12d9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12da2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   12da6:	480c      	ldr	r0, [pc, #48]	; (12dd8 <radio_ccm_tx_pkt_set+0x44>)
   12da8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   12dac:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   12db0:	480a      	ldr	r0, [pc, #40]	; (12ddc <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   12db2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   12db6:	4c0a      	ldr	r4, [pc, #40]	; (12de0 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   12db8:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   12dbc:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   12dbe:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   12dc2:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   12dc6:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12dc8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12dcc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   12dd0:	6019      	str	r1, [r3, #0]
}
   12dd2:	4770      	bx	lr
   12dd4:	4000f000 	.word	0x4000f000
   12dd8:	01010000 	.word	0x01010000
   12ddc:	20002400 	.word	0x20002400
   12de0:	200021ec 	.word	0x200021ec

00012de4 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   12de4:	4a0e      	ldr	r2, [pc, #56]	; (12e20 <radio_ccm_is_done+0x3c>)
   12de6:	2302      	movs	r3, #2
   12de8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12dec:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   12df0:	b933      	cbnz	r3, 12e00 <radio_ccm_is_done+0x1c>
		__WFE();
   12df2:	bf20      	wfe
		__SEV();
   12df4:	bf40      	sev
		__WFE();
   12df6:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12df8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   12dfc:	2b00      	cmp	r3, #0
   12dfe:	d0f8      	beq.n	12df2 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   12e00:	4b07      	ldr	r3, [pc, #28]	; (12e20 <radio_ccm_is_done+0x3c>)
   12e02:	4a08      	ldr	r2, [pc, #32]	; (12e24 <radio_ccm_is_done+0x40>)
   12e04:	2002      	movs	r0, #2
   12e06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12e0a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   12e0e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   12e12:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   12e16:	fab0 f080 	clz	r0, r0
   12e1a:	0940      	lsrs	r0, r0, #5
   12e1c:	4770      	bx	lr
   12e1e:	bf00      	nop
   12e20:	4000f000 	.word	0x4000f000
   12e24:	e000e100 	.word	0xe000e100

00012e28 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   12e28:	4b03      	ldr	r3, [pc, #12]	; (12e38 <radio_ccm_mic_is_valid+0x10>)
   12e2a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12e2e:	3800      	subs	r0, #0
   12e30:	bf18      	it	ne
   12e32:	2001      	movne	r0, #1
   12e34:	4770      	bx	lr
   12e36:	bf00      	nop
   12e38:	4000f000 	.word	0x4000f000

00012e3c <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   12e3c:	4a15      	ldr	r2, [pc, #84]	; (12e94 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12e3e:	4b16      	ldr	r3, [pc, #88]	; (12e98 <radio_ar_configure+0x5c>)
{
   12e40:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   12e42:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   12e46:	4e15      	ldr	r6, [pc, #84]	; (12e9c <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12e48:	2703      	movs	r7, #3
   12e4a:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   12e4e:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   12e50:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   12e54:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   12e56:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   12e5a:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   12e5c:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   12e60:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   12e64:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   12e68:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   12e6c:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   12e70:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   12e74:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   12e78:	4909      	ldr	r1, [pc, #36]	; (12ea0 <radio_ar_configure+0x64>)
   12e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12e7e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   12e82:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12e86:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   12e8a:	bcf0      	pop	{r4, r5, r6, r7}
   12e8c:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   12e90:	4770      	bx	lr
   12e92:	bf00      	nop
   12e94:	40001000 	.word	0x40001000
   12e98:	4000f000 	.word	0x4000f000
   12e9c:	200021e8 	.word	0x200021e8
   12ea0:	4001f000 	.word	0x4001f000

00012ea4 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   12ea4:	4b01      	ldr	r3, [pc, #4]	; (12eac <radio_ar_match_get+0x8>)
   12ea6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12eaa:	4770      	bx	lr
   12eac:	4000f000 	.word	0x4000f000

00012eb0 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   12eb0:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   12eb2:	4807      	ldr	r0, [pc, #28]	; (12ed0 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12eb4:	4c07      	ldr	r4, [pc, #28]	; (12ed4 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   12eb6:	4a08      	ldr	r2, [pc, #32]	; (12ed8 <radio_ar_status_reset+0x28>)
   12eb8:	2300      	movs	r3, #0
   12eba:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   12ebe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   12ec2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   12ec6:	bc10      	pop	{r4}
   12ec8:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   12ecc:	4770      	bx	lr
   12ece:	bf00      	nop
   12ed0:	4000f000 	.word	0x4000f000
   12ed4:	40001000 	.word	0x40001000
   12ed8:	4001f000 	.word	0x4001f000

00012edc <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   12edc:	4b08      	ldr	r3, [pc, #32]	; (12f00 <radio_ar_has_match+0x24>)
   12ede:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   12ee2:	b160      	cbz	r0, 12efe <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   12ee4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   12ee8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   12eec:	b138      	cbz	r0, 12efe <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   12eee:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   12ef2:	b120      	cbz	r0, 12efe <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   12ef4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   12ef8:	fab0 f080 	clz	r0, r0
   12efc:	0940      	lsrs	r0, r0, #5
}
   12efe:	4770      	bx	lr
   12f00:	40001000 	.word	0x40001000

00012f04 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12f04:	2902      	cmp	r1, #2
{
   12f06:	b510      	push	{r4, lr}
   12f08:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12f0a:	d00b      	beq.n	12f24 <mayfly_enable_cb+0x20>
   12f0c:	4a0a      	ldr	r2, [pc, #40]	; (12f38 <mayfly_enable_cb+0x34>)
   12f0e:	490b      	ldr	r1, [pc, #44]	; (12f3c <mayfly_enable_cb+0x38>)
   12f10:	480b      	ldr	r0, [pc, #44]	; (12f40 <mayfly_enable_cb+0x3c>)
   12f12:	231e      	movs	r3, #30
   12f14:	f004 f82b 	bl	16f6e <printk>
   12f18:	4040      	eors	r0, r0
   12f1a:	f380 8811 	msr	BASEPRI, r0
   12f1e:	f04f 0003 	mov.w	r0, #3
   12f22:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   12f24:	200b      	movs	r0, #11
	if (enable) {
   12f26:	b11c      	cbz	r4, 12f30 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   12f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   12f2c:	f7ef b956 	b.w	21dc <arch_irq_enable>
}
   12f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   12f34:	f7ef b962 	b.w	21fc <arch_irq_disable>
   12f38:	0001c3d8 	.word	0x0001c3d8
   12f3c:	0001c428 	.word	0x0001c428
   12f40:	0001b7c8 	.word	0x0001b7c8

00012f44 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   12f44:	b129      	cbz	r1, 12f52 <mayfly_is_enabled+0xe>
   12f46:	3901      	subs	r1, #1
   12f48:	2901      	cmp	r1, #1
   12f4a:	d805      	bhi.n	12f58 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   12f4c:	200b      	movs	r0, #11
   12f4e:	f7ef b969 	b.w	2224 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   12f52:	2018      	movs	r0, #24
   12f54:	f7ef b966 	b.w	2224 <arch_irq_is_enabled>
{
   12f58:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   12f5a:	4a07      	ldr	r2, [pc, #28]	; (12f78 <mayfly_is_enabled+0x34>)
   12f5c:	4907      	ldr	r1, [pc, #28]	; (12f7c <mayfly_is_enabled+0x38>)
   12f5e:	4808      	ldr	r0, [pc, #32]	; (12f80 <mayfly_is_enabled+0x3c>)
   12f60:	2336      	movs	r3, #54	; 0x36
   12f62:	f004 f804 	bl	16f6e <printk>
   12f66:	4040      	eors	r0, r0
   12f68:	f380 8811 	msr	BASEPRI, r0
   12f6c:	f04f 0003 	mov.w	r0, #3
   12f70:	df02      	svc	2
		break;
	}

	return 0;
}
   12f72:	2000      	movs	r0, #0
   12f74:	bd08      	pop	{r3, pc}
   12f76:	bf00      	nop
   12f78:	0001c3d8 	.word	0x0001c3d8
   12f7c:	0001b828 	.word	0x0001b828
   12f80:	0001b7c8 	.word	0x0001b7c8

00012f84 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   12f84:	4288      	cmp	r0, r1
   12f86:	d00b      	beq.n	12fa0 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   12f88:	2801      	cmp	r0, #1
   12f8a:	d003      	beq.n	12f94 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   12f8c:	2802      	cmp	r0, #2
   12f8e:	d009      	beq.n	12fa4 <mayfly_prio_is_equal+0x20>
   12f90:	2000      	movs	r0, #0
#endif
	       0;
}
   12f92:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   12f94:	f1a1 0002 	sub.w	r0, r1, #2
   12f98:	fab0 f080 	clz	r0, r0
   12f9c:	0940      	lsrs	r0, r0, #5
   12f9e:	4770      	bx	lr
   12fa0:	2001      	movs	r0, #1
   12fa2:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   12fa4:	f1a1 0001 	sub.w	r0, r1, #1
   12fa8:	fab0 f080 	clz	r0, r0
   12fac:	0940      	lsrs	r0, r0, #5
   12fae:	4770      	bx	lr

00012fb0 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   12fb0:	2901      	cmp	r1, #1
{
   12fb2:	b508      	push	{r3, lr}
	switch (callee_id) {
   12fb4:	d00f      	beq.n	12fd6 <mayfly_pend+0x26>
   12fb6:	2902      	cmp	r1, #2
   12fb8:	d00d      	beq.n	12fd6 <mayfly_pend+0x26>
   12fba:	b191      	cbz	r1, 12fe2 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   12fbc:	4a0c      	ldr	r2, [pc, #48]	; (12ff0 <mayfly_pend+0x40>)
   12fbe:	490d      	ldr	r1, [pc, #52]	; (12ff4 <mayfly_pend+0x44>)
   12fc0:	480d      	ldr	r0, [pc, #52]	; (12ff8 <mayfly_pend+0x48>)
   12fc2:	2367      	movs	r3, #103	; 0x67
   12fc4:	f003 ffd3 	bl	16f6e <printk>
   12fc8:	4040      	eors	r0, r0
   12fca:	f380 8811 	msr	BASEPRI, r0
   12fce:	f04f 0003 	mov.w	r0, #3
   12fd2:	df02      	svc	2
		break;
	}
}
   12fd4:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12fd6:	4b09      	ldr	r3, [pc, #36]	; (12ffc <mayfly_pend+0x4c>)
   12fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12fdc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   12fe0:	bd08      	pop	{r3, pc}
   12fe2:	4b06      	ldr	r3, [pc, #24]	; (12ffc <mayfly_pend+0x4c>)
   12fe4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   12fe8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   12fec:	bd08      	pop	{r3, pc}
   12fee:	bf00      	nop
   12ff0:	0001c3d8 	.word	0x0001c3d8
   12ff4:	0001b828 	.word	0x0001b828
   12ff8:	0001b7c8 	.word	0x0001b7c8
   12ffc:	e000e100 	.word	0xe000e100

00013000 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13000:	2803      	cmp	r0, #3
{
   13002:	b510      	push	{r4, lr}
   13004:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13006:	d804      	bhi.n	13012 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   13008:	4b11      	ldr	r3, [pc, #68]	; (13050 <hal_ticker_instance0_caller_id_get+0x50>)
   1300a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1300c:	b18c      	cbz	r4, 13032 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1300e:	4620      	mov	r0, r4
   13010:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13012:	4a10      	ldr	r2, [pc, #64]	; (13054 <hal_ticker_instance0_caller_id_get+0x54>)
   13014:	4910      	ldr	r1, [pc, #64]	; (13058 <hal_ticker_instance0_caller_id_get+0x58>)
   13016:	4811      	ldr	r0, [pc, #68]	; (1305c <hal_ticker_instance0_caller_id_get+0x5c>)
   13018:	232b      	movs	r3, #43	; 0x2b
   1301a:	f003 ffa8 	bl	16f6e <printk>
   1301e:	4040      	eors	r0, r0
   13020:	f380 8811 	msr	BASEPRI, r0
   13024:	f04f 0003 	mov.w	r0, #3
   13028:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1302a:	4b09      	ldr	r3, [pc, #36]	; (13050 <hal_ticker_instance0_caller_id_get+0x50>)
   1302c:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1302e:	2c00      	cmp	r4, #0
   13030:	d1ed      	bne.n	1300e <hal_ticker_instance0_caller_id_get+0xe>
   13032:	4a08      	ldr	r2, [pc, #32]	; (13054 <hal_ticker_instance0_caller_id_get+0x54>)
   13034:	490a      	ldr	r1, [pc, #40]	; (13060 <hal_ticker_instance0_caller_id_get+0x60>)
   13036:	4809      	ldr	r0, [pc, #36]	; (1305c <hal_ticker_instance0_caller_id_get+0x5c>)
   13038:	232e      	movs	r3, #46	; 0x2e
   1303a:	f003 ff98 	bl	16f6e <printk>
   1303e:	4040      	eors	r0, r0
   13040:	f380 8811 	msr	BASEPRI, r0
   13044:	f04f 0003 	mov.w	r0, #3
   13048:	df02      	svc	2
}
   1304a:	4620      	mov	r0, r4
   1304c:	bd10      	pop	{r4, pc}
   1304e:	bf00      	nop
   13050:	0001c4b8 	.word	0x0001c4b8
   13054:	0001c438 	.word	0x0001c438
   13058:	0001c488 	.word	0x0001c488
   1305c:	0001b7c8 	.word	0x0001b7c8
   13060:	0001c4a8 	.word	0x0001c4a8

00013064 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   13064:	3801      	subs	r0, #1
{
   13066:	b510      	push	{r4, lr}
   13068:	461c      	mov	r4, r3
	switch (caller_id) {
   1306a:	2804      	cmp	r0, #4
   1306c:	f200 8082 	bhi.w	13174 <hal_ticker_instance0_sched+0x110>
   13070:	e8df f000 	tbb	[pc, r0]
   13074:	3f302112 	.word	0x3f302112
   13078:	03          	.byte	0x03
   13079:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1307a:	2904      	cmp	r1, #4
   1307c:	d04a      	beq.n	13114 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1307e:	4a44      	ldr	r2, [pc, #272]	; (13190 <hal_ticker_instance0_sched+0x12c>)
   13080:	4944      	ldr	r1, [pc, #272]	; (13194 <hal_ticker_instance0_sched+0x130>)
   13082:	4845      	ldr	r0, [pc, #276]	; (13198 <hal_ticker_instance0_sched+0x134>)
   13084:	23ba      	movs	r3, #186	; 0xba
   13086:	f003 ff72 	bl	16f6e <printk>
   1308a:	4040      	eors	r0, r0
   1308c:	f380 8811 	msr	BASEPRI, r0
   13090:	f04f 0003 	mov.w	r0, #3
   13094:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   13096:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   13098:	2904      	cmp	r1, #4
   1309a:	d043      	beq.n	13124 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1309c:	4a3c      	ldr	r2, [pc, #240]	; (13190 <hal_ticker_instance0_sched+0x12c>)
   1309e:	493d      	ldr	r1, [pc, #244]	; (13194 <hal_ticker_instance0_sched+0x130>)
   130a0:	483d      	ldr	r0, [pc, #244]	; (13198 <hal_ticker_instance0_sched+0x134>)
   130a2:	234e      	movs	r3, #78	; 0x4e
   130a4:	f003 ff63 	bl	16f6e <printk>
   130a8:	4040      	eors	r0, r0
   130aa:	f380 8811 	msr	BASEPRI, r0
   130ae:	f04f 0003 	mov.w	r0, #3
   130b2:	df02      	svc	2
}
   130b4:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   130b6:	2903      	cmp	r1, #3
   130b8:	d03c      	beq.n	13134 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   130ba:	4a35      	ldr	r2, [pc, #212]	; (13190 <hal_ticker_instance0_sched+0x12c>)
   130bc:	4935      	ldr	r1, [pc, #212]	; (13194 <hal_ticker_instance0_sched+0x130>)
   130be:	4836      	ldr	r0, [pc, #216]	; (13198 <hal_ticker_instance0_sched+0x134>)
   130c0:	2365      	movs	r3, #101	; 0x65
   130c2:	f003 ff54 	bl	16f6e <printk>
   130c6:	4040      	eors	r0, r0
   130c8:	f380 8811 	msr	BASEPRI, r0
   130cc:	f04f 0003 	mov.w	r0, #3
   130d0:	df02      	svc	2
}
   130d2:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   130d4:	2904      	cmp	r1, #4
   130d6:	d035      	beq.n	13144 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   130d8:	4a2d      	ldr	r2, [pc, #180]	; (13190 <hal_ticker_instance0_sched+0x12c>)
   130da:	492e      	ldr	r1, [pc, #184]	; (13194 <hal_ticker_instance0_sched+0x130>)
   130dc:	482e      	ldr	r0, [pc, #184]	; (13198 <hal_ticker_instance0_sched+0x134>)
   130de:	237c      	movs	r3, #124	; 0x7c
   130e0:	f003 ff45 	bl	16f6e <printk>
   130e4:	4040      	eors	r0, r0
   130e6:	f380 8811 	msr	BASEPRI, r0
   130ea:	f04f 0003 	mov.w	r0, #3
   130ee:	df02      	svc	2
}
   130f0:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   130f2:	2903      	cmp	r1, #3
   130f4:	d036      	beq.n	13164 <hal_ticker_instance0_sched+0x100>
   130f6:	2904      	cmp	r1, #4
   130f8:	d02c      	beq.n	13154 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   130fa:	4a25      	ldr	r2, [pc, #148]	; (13190 <hal_ticker_instance0_sched+0x12c>)
   130fc:	4925      	ldr	r1, [pc, #148]	; (13194 <hal_ticker_instance0_sched+0x130>)
   130fe:	4826      	ldr	r0, [pc, #152]	; (13198 <hal_ticker_instance0_sched+0x134>)
   13100:	23a2      	movs	r3, #162	; 0xa2
   13102:	f003 ff34 	bl	16f6e <printk>
   13106:	4040      	eors	r0, r0
   13108:	f380 8811 	msr	BASEPRI, r0
   1310c:	f04f 0003 	mov.w	r0, #3
   13110:	df02      	svc	2
}
   13112:	bd10      	pop	{r4, pc}
			m.param = instance;
   13114:	4b21      	ldr	r3, [pc, #132]	; (1319c <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13116:	2102      	movs	r1, #2
			m.param = instance;
   13118:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1311a:	2003      	movs	r0, #3
}
   1311c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13120:	f7f2 bed0 	b.w	5ec4 <mayfly_enqueue>
			m.param = instance;
   13124:	4b1e      	ldr	r3, [pc, #120]	; (131a0 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   13126:	2102      	movs	r1, #2
			m.param = instance;
   13128:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1312a:	2000      	movs	r0, #0
}
   1312c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   13130:	f7f2 bec8 	b.w	5ec4 <mayfly_enqueue>
			m.param = instance;
   13134:	4b1b      	ldr	r3, [pc, #108]	; (131a4 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13136:	2101      	movs	r1, #1
			m.param = instance;
   13138:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1313a:	4608      	mov	r0, r1
}
   1313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13140:	f7f2 bec0 	b.w	5ec4 <mayfly_enqueue>
			m.param = instance;
   13144:	4b18      	ldr	r3, [pc, #96]	; (131a8 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13146:	2102      	movs	r1, #2
			m.param = instance;
   13148:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1314a:	2001      	movs	r0, #1
}
   1314c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13150:	f7f2 beb8 	b.w	5ec4 <mayfly_enqueue>
			m.param = instance;
   13154:	4b15      	ldr	r3, [pc, #84]	; (131ac <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13156:	2102      	movs	r1, #2
			m.param = instance;
   13158:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1315a:	4608      	mov	r0, r1
}
   1315c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13160:	f7f2 beb0 	b.w	5ec4 <mayfly_enqueue>
			m.param = instance;
   13164:	4b12      	ldr	r3, [pc, #72]	; (131b0 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13166:	2101      	movs	r1, #1
			m.param = instance;
   13168:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1316a:	2002      	movs	r0, #2
}
   1316c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13170:	f7f2 bea8 	b.w	5ec4 <mayfly_enqueue>
		LL_ASSERT(0);
   13174:	4a06      	ldr	r2, [pc, #24]	; (13190 <hal_ticker_instance0_sched+0x12c>)
   13176:	4907      	ldr	r1, [pc, #28]	; (13194 <hal_ticker_instance0_sched+0x130>)
   13178:	4807      	ldr	r0, [pc, #28]	; (13198 <hal_ticker_instance0_sched+0x134>)
   1317a:	23c0      	movs	r3, #192	; 0xc0
   1317c:	f003 fef7 	bl	16f6e <printk>
   13180:	4040      	eors	r0, r0
   13182:	f380 8811 	msr	BASEPRI, r0
   13186:	f04f 0003 	mov.w	r0, #3
   1318a:	df02      	svc	2
}
   1318c:	bd10      	pop	{r4, pc}
   1318e:	bf00      	nop
   13190:	0001c438 	.word	0x0001c438
   13194:	0001b828 	.word	0x0001b828
   13198:	0001b7c8 	.word	0x0001b7c8
   1319c:	20000610 	.word	0x20000610
   131a0:	20000600 	.word	0x20000600
   131a4:	200005f0 	.word	0x200005f0
   131a8:	20000640 	.word	0x20000640
   131ac:	20000620 	.word	0x20000620
   131b0:	20000630 	.word	0x20000630

000131b4 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   131b4:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   131b6:	2000      	movs	r0, #0
   131b8:	f7ff b9fc 	b.w	125b4 <cntr_cmp_set>

000131bc <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   131bc:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   131be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   131c2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   131c6:	3201      	adds	r2, #1
   131c8:	d008      	beq.n	131dc <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   131ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   131ce:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   131d2:	f013 0301 	ands.w	r3, r3, #1
   131d6:	d10a      	bne.n	131ee <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   131d8:	4618      	mov	r0, r3
}
   131da:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   131dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   131e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   131e4:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   131e6:	4293      	cmp	r3, r2
   131e8:	d1ef      	bne.n	131ca <hci_vendor_read_static_addr+0xe>
	return 0;
   131ea:	2000      	movs	r0, #0
}
   131ec:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   131ee:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   131f2:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   131f4:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   131f6:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   131fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
   131fe:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   13200:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   13202:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   13206:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1320a:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1320c:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   13210:	f063 033f 	orn	r3, r3, #63	; 0x3f
   13214:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   13216:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1321a:	3301      	adds	r3, #1
   1321c:	d03b      	beq.n	13296 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1321e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   13222:	3301      	adds	r3, #1
   13224:	d037      	beq.n	13296 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   13226:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1322a:	3301      	adds	r3, #1
   1322c:	d033      	beq.n	13296 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1322e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   13232:	3301      	adds	r3, #1
   13234:	d02f      	beq.n	13296 <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   13236:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1323a:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1323c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1323e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   13242:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   13246:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   13248:	f880 c009 	strb.w	ip, [r0, #9]
   1324c:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1324e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   13252:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   13254:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   13256:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1325a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1325e:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   13260:	f880 c00d 	strb.w	ip, [r0, #13]
   13264:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   13266:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1326a:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1326c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1326e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   13272:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   13276:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   13278:	73c3      	strb	r3, [r0, #15]
   1327a:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1327e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   13282:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   13284:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   13286:	0a11      	lsrs	r1, r2, #8
   13288:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1328c:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   1328e:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   13290:	7541      	strb	r1, [r0, #21]
		return 1;
   13292:	2001      	movs	r0, #1
}
   13294:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   13296:	2210      	movs	r2, #16
   13298:	2100      	movs	r1, #0
   1329a:	3006      	adds	r0, #6
   1329c:	f004 fc39 	bl	17b12 <memset>
		return 1;
   132a0:	2001      	movs	r0, #1
}
   132a2:	bd08      	pop	{r3, pc}

000132a4 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   132a4:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   132a6:	2210      	movs	r2, #16
{
   132a8:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   132aa:	2100      	movs	r1, #0
   132ac:	f004 fc31 	bl	17b12 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   132b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   132b4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   132b8:	3201      	adds	r2, #1
   132ba:	d034      	beq.n	13326 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   132bc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   132c0:	3201      	adds	r2, #1
   132c2:	d030      	beq.n	13326 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   132c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   132c8:	3201      	adds	r2, #1
   132ca:	d02c      	beq.n	13326 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   132cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   132d0:	3201      	adds	r2, #1
   132d2:	d028      	beq.n	13326 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   132d4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   132d8:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   132da:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   132dc:	0a08      	lsrs	r0, r1, #8
   132de:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   132e2:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   132e4:	70e0      	strb	r0, [r4, #3]
   132e6:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   132e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   132ec:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   132ee:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   132f0:	0a08      	lsrs	r0, r1, #8
   132f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   132f6:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   132f8:	71e0      	strb	r0, [r4, #7]
   132fa:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   132fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   13300:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   13302:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   13304:	0a08      	lsrs	r0, r1, #8
   13306:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1330a:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   1330c:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1330e:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   13310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   13314:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   13316:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   13318:	0a11      	lsrs	r1, r2, #8
   1331a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1331e:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   13320:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   13322:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   13324:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   13326:	4620      	mov	r0, r4
   13328:	2210      	movs	r2, #16
}
   1332a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1332e:	2100      	movs	r1, #0
   13330:	f004 bbef 	b.w	17b12 <memset>

00013334 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   13334:	4b02      	ldr	r3, [pc, #8]	; (13340 <net_buf_pool_get+0xc>)
   13336:	222c      	movs	r2, #44	; 0x2c
   13338:	fb02 3000 	mla	r0, r2, r0, r3
   1333c:	4770      	bx	lr
   1333e:	bf00      	nop
   13340:	200008f0 	.word	0x200008f0

00013344 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13344:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13346:	4b06      	ldr	r3, [pc, #24]	; (13360 <net_buf_id+0x1c>)
   13348:	212c      	movs	r1, #44	; 0x2c
   1334a:	fb01 3302 	mla	r3, r1, r2, r3
   1334e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13350:	7f1b      	ldrb	r3, [r3, #28]
   13352:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   13354:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13356:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1335a:	fbb0 f0f3 	udiv	r0, r0, r3
   1335e:	4770      	bx	lr
   13360:	200008f0 	.word	0x200008f0

00013364 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   13364:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13366:	4b0a      	ldr	r3, [pc, #40]	; (13390 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13368:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1336a:	242c      	movs	r4, #44	; 0x2c
   1336c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   13370:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13374:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   13376:	6823      	ldr	r3, [r4, #0]
   13378:	429a      	cmp	r2, r3
   1337a:	bf94      	ite	ls
   1337c:	600a      	strls	r2, [r1, #0]
   1337e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   13380:	f7ff ffe0 	bl	13344 <net_buf_id>
   13384:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   13388:	fb02 3000 	mla	r0, r2, r0, r3
   1338c:	bd10      	pop	{r4, pc}
   1338e:	bf00      	nop
   13390:	200008f0 	.word	0x200008f0

00013394 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   13394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13398:	4605      	mov	r5, r0
   1339a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1339c:	4610      	mov	r0, r2
   1339e:	4619      	mov	r1, r3
{
   133a0:	4691      	mov	r9, r2
   133a2:	4698      	mov	r8, r3
   133a4:	4617      	mov	r7, r2
   133a6:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   133a8:	f007 fca2 	bl	1acf0 <sys_clock_timeout_end_calc>
   133ac:	4682      	mov	sl, r0
   133ae:	468b      	mov	fp, r1
	__asm__ volatile(
   133b0:	f04f 0320 	mov.w	r3, #32
   133b4:	f3ef 8111 	mrs	r1, BASEPRI
   133b8:	f383 8812 	msr	BASEPRI_MAX, r3
   133bc:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   133c0:	8b6b      	ldrh	r3, [r5, #26]
   133c2:	2b00      	cmp	r3, #0
   133c4:	d05a      	beq.n	1347c <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   133c6:	8b2a      	ldrh	r2, [r5, #24]
   133c8:	429a      	cmp	r2, r3
   133ca:	d93e      	bls.n	1344a <net_buf_alloc_len+0xb6>
   133cc:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   133ce:	2200      	movs	r2, #0
   133d0:	2300      	movs	r3, #0
   133d2:	4628      	mov	r0, r5
   133d4:	f002 fe20 	bl	16018 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   133d8:	9900      	ldr	r1, [sp, #0]
   133da:	4604      	mov	r4, r0
   133dc:	2800      	cmp	r0, #0
   133de:	d034      	beq.n	1344a <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   133e0:	f381 8811 	msr	BASEPRI, r1
   133e4:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   133e8:	9b01      	ldr	r3, [sp, #4]
   133ea:	2b00      	cmp	r3, #0
   133ec:	d056      	beq.n	1349c <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   133ee:	ea58 0309 	orrs.w	r3, r8, r9
   133f2:	d00f      	beq.n	13414 <net_buf_alloc_len+0x80>
   133f4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   133f8:	bf08      	it	eq
   133fa:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   133fe:	d009      	beq.n	13414 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   13400:	f003 fcaa 	bl	16d58 <sys_clock_tick_get>
   13404:	ebba 0700 	subs.w	r7, sl, r0
   13408:	eb6b 0601 	sbc.w	r6, fp, r1
   1340c:	2e00      	cmp	r6, #0
   1340e:	bfbc      	itt	lt
   13410:	2700      	movlt	r7, #0
   13412:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13414:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   13416:	f8df 809c 	ldr.w	r8, [pc, #156]	; 134b4 <net_buf_alloc_len+0x120>
   1341a:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1341e:	fb09 8303 	mla	r3, r9, r3, r8
   13422:	463a      	mov	r2, r7
   13424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13426:	681b      	ldr	r3, [r3, #0]
   13428:	a901      	add	r1, sp, #4
   1342a:	681d      	ldr	r5, [r3, #0]
   1342c:	4620      	mov	r0, r4
   1342e:	4633      	mov	r3, r6
   13430:	47a8      	blx	r5
   13432:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   13434:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   13436:	2800      	cmp	r0, #0
   13438:	d131      	bne.n	1349e <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1343a:	79a0      	ldrb	r0, [r4, #6]
   1343c:	4621      	mov	r1, r4
   1343e:	fb00 8009 	mla	r0, r0, r9, r8
   13442:	f007 f9e7 	bl	1a814 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   13446:	462c      	mov	r4, r5
}
   13448:	e024      	b.n	13494 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1344a:	8b68      	ldrh	r0, [r5, #26]
   1344c:	1e43      	subs	r3, r0, #1
   1344e:	836b      	strh	r3, [r5, #26]
   13450:	f381 8811 	msr	BASEPRI, r1
   13454:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   13458:	7f2a      	ldrb	r2, [r5, #28]
   1345a:	f102 0417 	add.w	r4, r2, #23
   1345e:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   13462:	8b2c      	ldrh	r4, [r5, #24]
   13464:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   13466:	6aac      	ldr	r4, [r5, #40]	; 0x28
   13468:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1346c:	4811      	ldr	r0, [pc, #68]	; (134b4 <net_buf_alloc_len+0x120>)
   1346e:	4b12      	ldr	r3, [pc, #72]	; (134b8 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   13470:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   13472:	1a2d      	subs	r5, r5, r0
   13474:	10ad      	asrs	r5, r5, #2
   13476:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   13478:	71a5      	strb	r5, [r4, #6]
		goto success;
   1347a:	e7b5      	b.n	133e8 <net_buf_alloc_len+0x54>
   1347c:	f381 8811 	msr	BASEPRI, r1
   13480:	f3bf 8f6f 	isb	sy
   13484:	464a      	mov	r2, r9
   13486:	4643      	mov	r3, r8
   13488:	4628      	mov	r0, r5
   1348a:	f002 fdc5 	bl	16018 <z_impl_k_queue_get>
	if (!buf) {
   1348e:	4604      	mov	r4, r0
   13490:	2800      	cmp	r0, #0
   13492:	d1a9      	bne.n	133e8 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   13494:	4620      	mov	r0, r4
   13496:	b003      	add	sp, #12
   13498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1349c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1349e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   134a0:	2201      	movs	r2, #1
	buf->frags = NULL;
   134a2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   134a4:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   134a6:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   134a8:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   134aa:	6923      	ldr	r3, [r4, #16]
   134ac:	81e2      	strh	r2, [r4, #14]
   134ae:	60a3      	str	r3, [r4, #8]
	return buf;
   134b0:	e7f0      	b.n	13494 <net_buf_alloc_len+0x100>
   134b2:	bf00      	nop
   134b4:	200008f0 	.word	0x200008f0
   134b8:	ba2e8ba3 	.word	0xba2e8ba3

000134bc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   134bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134c0:	4d16      	ldr	r5, [pc, #88]	; (1351c <net_buf_unref+0x60>)
   134c2:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   134c4:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   134c6:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   134c8:	b90c      	cbnz	r4, 134ce <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   134ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   134ce:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   134d0:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   134d4:	3b01      	subs	r3, #1
   134d6:	b2db      	uxtb	r3, r3
   134d8:	7123      	strb	r3, [r4, #4]
   134da:	2b00      	cmp	r3, #0
   134dc:	d1f5      	bne.n	134ca <net_buf_unref+0xe>
		if (buf->__buf) {
   134de:	6921      	ldr	r1, [r4, #16]
   134e0:	b159      	cbz	r1, 134fa <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   134e2:	7963      	ldrb	r3, [r4, #5]
   134e4:	079b      	lsls	r3, r3, #30
   134e6:	d407      	bmi.n	134f8 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   134e8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   134ea:	fb07 5303 	mla	r3, r7, r3, r5
   134ee:	4620      	mov	r0, r4
   134f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   134f2:	681b      	ldr	r3, [r3, #0]
   134f4:	689b      	ldr	r3, [r3, #8]
   134f6:	4798      	blx	r3
			buf->__buf = NULL;
   134f8:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   134fa:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   134fc:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   134fe:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   13502:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   13504:	6a1b      	ldr	r3, [r3, #32]
   13506:	b11b      	cbz	r3, 13510 <net_buf_unref+0x54>
			pool->destroy(buf);
   13508:	4620      	mov	r0, r4
   1350a:	4798      	blx	r3
{
   1350c:	4644      	mov	r4, r8
   1350e:	e7db      	b.n	134c8 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   13510:	4621      	mov	r1, r4
   13512:	fb00 5007 	mla	r0, r0, r7, r5
   13516:	f007 f97d 	bl	1a814 <k_queue_prepend>
}
   1351a:	e7f7      	b.n	1350c <net_buf_unref+0x50>
   1351c:	200008f0 	.word	0x200008f0

00013520 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   13520:	4b08      	ldr	r3, [pc, #32]	; (13544 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13522:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13524:	1ac3      	subs	r3, r0, r3
{
   13526:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13528:	4907      	ldr	r1, [pc, #28]	; (13548 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1352a:	109b      	asrs	r3, r3, #2
{
   1352c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1352e:	4359      	muls	r1, r3
   13530:	4806      	ldr	r0, [pc, #24]	; (1354c <onoff_stop+0x2c>)
   13532:	2240      	movs	r2, #64	; 0x40
   13534:	f006 fb1c 	bl	19b70 <stop>
	notify(mgr, res);
   13538:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1353a:	4601      	mov	r1, r0
	notify(mgr, res);
   1353c:	4620      	mov	r0, r4
}
   1353e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   13542:	4718      	bx	r3
   13544:	20002550 	.word	0x20002550
   13548:	b6db6db7 	.word	0xb6db6db7
   1354c:	0001b0a0 	.word	0x0001b0a0

00013550 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   13550:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   13552:	4c0c      	ldr	r4, [pc, #48]	; (13584 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13554:	4a0c      	ldr	r2, [pc, #48]	; (13588 <onoff_start+0x38>)
   13556:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   13558:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1355a:	9300      	str	r3, [sp, #0]
{
   1355c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1355e:	460b      	mov	r3, r1
   13560:	490a      	ldr	r1, [pc, #40]	; (1358c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   13562:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13564:	4361      	muls	r1, r4
{
   13566:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   13568:	4809      	ldr	r0, [pc, #36]	; (13590 <onoff_start+0x40>)
   1356a:	f006 fb2d 	bl	19bc8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1356e:	1e01      	subs	r1, r0, #0
   13570:	da05      	bge.n	1357e <onoff_start+0x2e>
		notify(mgr, err);
   13572:	4630      	mov	r0, r6
   13574:	462b      	mov	r3, r5
	}
}
   13576:	b002      	add	sp, #8
   13578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1357c:	4718      	bx	r3
}
   1357e:	b002      	add	sp, #8
   13580:	bd70      	pop	{r4, r5, r6, pc}
   13582:	bf00      	nop
   13584:	20002550 	.word	0x20002550
   13588:	00019c39 	.word	0x00019c39
   1358c:	b6db6db7 	.word	0xb6db6db7
   13590:	0001b0a0 	.word	0x0001b0a0

00013594 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13594:	2200      	movs	r2, #0
{
   13596:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13598:	2101      	movs	r1, #1
{
   1359a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1359c:	4610      	mov	r0, r2
   1359e:	f7ee fe4f 	bl	2240 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   135a2:	2000      	movs	r0, #0
   135a4:	f7ee fe1a 	bl	21dc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   135a8:	480f      	ldr	r0, [pc, #60]	; (135e8 <clk_init+0x54>)
   135aa:	f001 fb89 	bl	14cc0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   135ae:	4b0f      	ldr	r3, [pc, #60]	; (135ec <clk_init+0x58>)
   135b0:	4298      	cmp	r0, r3
   135b2:	d115      	bne.n	135e0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   135b4:	f006 ff32 	bl	1a41c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   135b8:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   135ba:	490d      	ldr	r1, [pc, #52]	; (135f0 <clk_init+0x5c>)
   135bc:	4630      	mov	r0, r6
   135be:	f003 fd3f 	bl	17040 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   135c2:	2800      	cmp	r0, #0
   135c4:	db0b      	blt.n	135de <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   135c6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   135c8:	4909      	ldr	r1, [pc, #36]	; (135f0 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   135ca:	2501      	movs	r5, #1
   135cc:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   135ce:	f104 001c 	add.w	r0, r4, #28
   135d2:	f003 fd35 	bl	17040 <onoff_manager_init>
		if (err < 0) {
   135d6:	2800      	cmp	r0, #0
   135d8:	db01      	blt.n	135de <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   135da:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   135dc:	2000      	movs	r0, #0
}
   135de:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   135e0:	f06f 0004 	mvn.w	r0, #4
   135e4:	e7fb      	b.n	135de <clk_init+0x4a>
   135e6:	bf00      	nop
   135e8:	00013629 	.word	0x00013629
   135ec:	0bad0000 	.word	0x0bad0000
   135f0:	0001c4f0 	.word	0x0001c4f0

000135f4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   135f4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   135f6:	230c      	movs	r3, #12
   135f8:	4809      	ldr	r0, [pc, #36]	; (13620 <clkstarted_handle.constprop.0+0x2c>)
   135fa:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   135fc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   135fe:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   13600:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   13604:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   13606:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   13608:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1360a:	4418      	add	r0, r3
   1360c:	f006 fa9d 	bl	19b4a <set_on_state>
	if (callback) {
   13610:	b12d      	cbz	r5, 1361e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   13612:	4632      	mov	r2, r6
   13614:	462b      	mov	r3, r5
   13616:	4803      	ldr	r0, [pc, #12]	; (13624 <clkstarted_handle.constprop.0+0x30>)
}
   13618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1361c:	4718      	bx	r3
}
   1361e:	bd70      	pop	{r4, r5, r6, pc}
   13620:	20002550 	.word	0x20002550
   13624:	0001b0a0 	.word	0x0001b0a0

00013628 <clock_event_handler>:
	switch (event) {
   13628:	b110      	cbz	r0, 13630 <clock_event_handler+0x8>
   1362a:	2801      	cmp	r0, #1
   1362c:	d004      	beq.n	13638 <clock_event_handler+0x10>
   1362e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   13630:	4b03      	ldr	r3, [pc, #12]	; (13640 <clock_event_handler+0x18>)
   13632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   13634:	075b      	lsls	r3, r3, #29
   13636:	d101      	bne.n	1363c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13638:	f7ff bfdc 	b.w	135f4 <clkstarted_handle.constprop.0>
}
   1363c:	4770      	bx	lr
   1363e:	bf00      	nop
   13640:	20002550 	.word	0x20002550

00013644 <generic_hfclk_start>:
{
   13644:	b508      	push	{r3, lr}
	__asm__ volatile(
   13646:	f04f 0320 	mov.w	r3, #32
   1364a:	f3ef 8111 	mrs	r1, BASEPRI
   1364e:	f383 8812 	msr	BASEPRI_MAX, r3
   13652:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   13656:	4a12      	ldr	r2, [pc, #72]	; (136a0 <generic_hfclk_start+0x5c>)
   13658:	6813      	ldr	r3, [r2, #0]
   1365a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1365e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   13662:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   13664:	d00c      	beq.n	13680 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1366a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1366e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   13672:	f013 0301 	ands.w	r3, r3, #1
   13676:	d003      	beq.n	13680 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   13678:	480a      	ldr	r0, [pc, #40]	; (136a4 <generic_hfclk_start+0x60>)
   1367a:	f006 fa66 	bl	19b4a <set_on_state>
			already_started = true;
   1367e:	2301      	movs	r3, #1
	__asm__ volatile(
   13680:	f381 8811 	msr	BASEPRI, r1
   13684:	f3bf 8f6f 	isb	sy
	if (already_started) {
   13688:	b123      	cbz	r3, 13694 <generic_hfclk_start+0x50>
}
   1368a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1368e:	2000      	movs	r0, #0
   13690:	f7ff bfb0 	b.w	135f4 <clkstarted_handle.constprop.0>
}
   13694:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   13698:	2001      	movs	r0, #1
   1369a:	f001 bb21 	b.w	14ce0 <nrfx_clock_start>
   1369e:	bf00      	nop
   136a0:	200025a0 	.word	0x200025a0
   136a4:	20002590 	.word	0x20002590

000136a8 <api_blocking_start>:
{
   136a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   136aa:	2200      	movs	r2, #0
   136ac:	2301      	movs	r3, #1
   136ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
   136b2:	ab04      	add	r3, sp, #16
   136b4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   136b8:	4a09      	ldr	r2, [pc, #36]	; (136e0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   136ba:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   136be:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   136c0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   136c4:	f006 fab1 	bl	19c2a <api_start>
	if (err < 0) {
   136c8:	2800      	cmp	r0, #0
   136ca:	db05      	blt.n	136d8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   136cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   136d0:	2300      	movs	r3, #0
   136d2:	4668      	mov	r0, sp
   136d4:	f002 fcfa 	bl	160cc <z_impl_k_sem_take>
}
   136d8:	b007      	add	sp, #28
   136da:	f85d fb04 	ldr.w	pc, [sp], #4
   136de:	bf00      	nop
   136e0:	00019c51 	.word	0x00019c51

000136e4 <lfclk_start>:
{
   136e4:	b510      	push	{r4, lr}
	if (!once) {
   136e6:	4c07      	ldr	r4, [pc, #28]	; (13704 <lfclk_start+0x20>)
   136e8:	7823      	ldrb	r3, [r4, #0]
   136ea:	b92b      	cbnz	r3, 136f8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   136ec:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   136f0:	f007 fafa 	bl	1ace8 <z_impl_k_busy_wait>
		once = true;
   136f4:	2301      	movs	r3, #1
   136f6:	7023      	strb	r3, [r4, #0]
}
   136f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   136fc:	2000      	movs	r0, #0
   136fe:	f001 baef 	b.w	14ce0 <nrfx_clock_start>
   13702:	bf00      	nop
   13704:	2000279e 	.word	0x2000279e

00013708 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13708:	4b09      	ldr	r3, [pc, #36]	; (13730 <generic_hfclk_stop+0x28>)
   1370a:	f3bf 8f5b 	dmb	ish
   1370e:	e853 2f00 	ldrex	r2, [r3]
   13712:	f022 0102 	bic.w	r1, r2, #2
   13716:	e843 1000 	strex	r0, r1, [r3]
   1371a:	2800      	cmp	r0, #0
   1371c:	d1f7      	bne.n	1370e <generic_hfclk_stop+0x6>
   1371e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   13722:	07d3      	lsls	r3, r2, #31
   13724:	d402      	bmi.n	1372c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   13726:	2001      	movs	r0, #1
   13728:	f001 bb22 	b.w	14d70 <nrfx_clock_stop>
}
   1372c:	4770      	bx	lr
   1372e:	bf00      	nop
   13730:	200025a0 	.word	0x200025a0

00013734 <z_nrf_clock_control_get_onoff>:
}
   13734:	4a02      	ldr	r2, [pc, #8]	; (13740 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   13736:	b2c3      	uxtb	r3, r0
}
   13738:	201c      	movs	r0, #28
   1373a:	fb03 2000 	mla	r0, r3, r0, r2
   1373e:	4770      	bx	lr
   13740:	20002550 	.word	0x20002550

00013744 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13744:	4b09      	ldr	r3, [pc, #36]	; (1376c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   13746:	f3bf 8f5b 	dmb	ish
   1374a:	e853 2f00 	ldrex	r2, [r3]
   1374e:	f042 0101 	orr.w	r1, r2, #1
   13752:	e843 1000 	strex	r0, r1, [r3]
   13756:	2800      	cmp	r0, #0
   13758:	d1f7      	bne.n	1374a <z_nrf_clock_bt_ctlr_hf_request+0x6>
   1375a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   1375e:	0793      	lsls	r3, r2, #30
   13760:	d402      	bmi.n	13768 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   13762:	2001      	movs	r0, #1
   13764:	f001 babc 	b.w	14ce0 <nrfx_clock_start>
}
   13768:	4770      	bx	lr
   1376a:	bf00      	nop
   1376c:	200025a0 	.word	0x200025a0

00013770 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13770:	4b09      	ldr	r3, [pc, #36]	; (13798 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   13772:	f3bf 8f5b 	dmb	ish
   13776:	e853 2f00 	ldrex	r2, [r3]
   1377a:	f022 0101 	bic.w	r1, r2, #1
   1377e:	e843 1000 	strex	r0, r1, [r3]
   13782:	2800      	cmp	r0, #0
   13784:	d1f7      	bne.n	13776 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   13786:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   1378a:	0793      	lsls	r3, r2, #30
   1378c:	d402      	bmi.n	13794 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1378e:	2001      	movs	r0, #1
   13790:	f001 baee 	b.w	14d70 <nrfx_clock_stop>
}
   13794:	4770      	bx	lr
   13796:	bf00      	nop
   13798:	200025a0 	.word	0x200025a0

0001379c <z_nrf_clock_control_lf_on>:
{
   1379c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   137a0:	4939      	ldr	r1, [pc, #228]	; (13888 <z_nrf_clock_control_lf_on+0xec>)
   137a2:	f3bf 8f5b 	dmb	ish
   137a6:	4607      	mov	r7, r0
   137a8:	2201      	movs	r2, #1
   137aa:	e851 3f00 	ldrex	r3, [r1]
   137ae:	e841 2000 	strex	r0, r2, [r1]
   137b2:	2800      	cmp	r0, #0
   137b4:	d1f9      	bne.n	137aa <z_nrf_clock_control_lf_on+0xe>
   137b6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   137ba:	b933      	cbnz	r3, 137ca <z_nrf_clock_control_lf_on+0x2e>
   137bc:	4933      	ldr	r1, [pc, #204]	; (1388c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   137be:	4834      	ldr	r0, [pc, #208]	; (13890 <z_nrf_clock_control_lf_on+0xf4>)
   137c0:	604b      	str	r3, [r1, #4]
   137c2:	60cb      	str	r3, [r1, #12]
   137c4:	608a      	str	r2, [r1, #8]
   137c6:	f003 fc4e 	bl	17066 <onoff_request>
	switch (start_mode) {
   137ca:	1e7b      	subs	r3, r7, #1
   137cc:	2b01      	cmp	r3, #1
   137ce:	d82f      	bhi.n	13830 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   137d0:	2f01      	cmp	r7, #1
   137d2:	d107      	bne.n	137e4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   137d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   137d8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   137dc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   137e0:	2b01      	cmp	r3, #1
   137e2:	d025      	beq.n	13830 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   137e4:	f006 ff7d 	bl	1a6e2 <k_is_in_isr>
   137e8:	4604      	mov	r4, r0
   137ea:	b918      	cbnz	r0, 137f4 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   137ec:	4b29      	ldr	r3, [pc, #164]	; (13894 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   137ee:	781b      	ldrb	r3, [r3, #0]
   137f0:	2b00      	cmp	r3, #0
   137f2:	d141      	bne.n	13878 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   137f4:	f04f 0320 	mov.w	r3, #32
   137f8:	f3ef 8611 	mrs	r6, BASEPRI
   137fc:	f383 8812 	msr	BASEPRI_MAX, r3
   13800:	f3bf 8f6f 	isb	sy
   13804:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13806:	f8df 8090 	ldr.w	r8, [pc, #144]	; 13898 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1380a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   1380e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13812:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   13816:	03d2      	lsls	r2, r2, #15
   13818:	d50c      	bpl.n	13834 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1381a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1381e:	2b01      	cmp	r3, #1
   13820:	d001      	beq.n	13826 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   13822:	2f01      	cmp	r7, #1
   13824:	d106      	bne.n	13834 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   13826:	b30c      	cbz	r4, 1386c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   13828:	f386 8811 	msr	BASEPRI, r6
   1382c:	f3bf 8f6f 	isb	sy
}
   13830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   13834:	b1ac      	cbz	r4, 13862 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   13836:	4630      	mov	r0, r6
   13838:	f7ee fcc6 	bl	21c8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1383c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   13840:	2b00      	cmp	r3, #0
   13842:	d1e4      	bne.n	1380e <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   13844:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   13848:	2a00      	cmp	r2, #0
   1384a:	d0e0      	beq.n	1380e <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1384c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   13850:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   13854:	2301      	movs	r3, #1
   13856:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1385a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1385e:	60ab      	str	r3, [r5, #8]
}
   13860:	e7d5      	b.n	1380e <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   13862:	2100      	movs	r1, #0
   13864:	2021      	movs	r0, #33	; 0x21
   13866:	f003 f8a7 	bl	169b8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1386a:	e7e7      	b.n	1383c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   1386c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13870:	2202      	movs	r2, #2
   13872:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   13876:	e7db      	b.n	13830 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   13878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1387c:	2202      	movs	r2, #2
   1387e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   13882:	4606      	mov	r6, r0
}
   13884:	e7bf      	b.n	13806 <z_nrf_clock_control_lf_on+0x6a>
   13886:	bf00      	nop
   13888:	200025a4 	.word	0x200025a4
   1388c:	20002540 	.word	0x20002540
   13890:	2000256c 	.word	0x2000256c
   13894:	20002bd0 	.word	0x20002bd0
   13898:	e000e100 	.word	0xe000e100

0001389c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1389c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   1389e:	4c04      	ldr	r4, [pc, #16]	; (138b0 <rtt_console_init+0x14>)
   138a0:	4620      	mov	r0, r4
   138a2:	f7ed fdef 	bl	1484 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   138a6:	4620      	mov	r0, r4
   138a8:	f7ee ffd8 	bl	285c <__stdout_hook_install>

	return 0;
}
   138ac:	2000      	movs	r0, #0
   138ae:	bd10      	pop	{r4, pc}
   138b0:	000138b5 	.word	0x000138b5

000138b4 <rtt_console_out>:
{
   138b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   138b6:	4e14      	ldr	r6, [pc, #80]	; (13908 <rtt_console_out+0x54>)
	char c = (char)character;
   138b8:	f88d 0007 	strb.w	r0, [sp, #7]
{
   138bc:	4604      	mov	r4, r0
	char c = (char)character;
   138be:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   138c0:	f3ef 8711 	mrs	r7, BASEPRI
   138c4:	f04f 0120 	mov.w	r1, #32
   138c8:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   138cc:	2201      	movs	r2, #1
   138ce:	f10d 0107 	add.w	r1, sp, #7
   138d2:	2000      	movs	r0, #0
   138d4:	f002 f92a 	bl	15b2c <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   138d8:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   138dc:	b120      	cbz	r0, 138e8 <rtt_console_out+0x34>
			host_present = true;
   138de:	2301      	movs	r3, #1
   138e0:	7033      	strb	r3, [r6, #0]
}
   138e2:	4620      	mov	r0, r4
   138e4:	b003      	add	sp, #12
   138e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   138e8:	7833      	ldrb	r3, [r6, #0]
   138ea:	2b00      	cmp	r3, #0
   138ec:	d0f9      	beq.n	138e2 <rtt_console_out+0x2e>
			if (max_cnt) {
   138ee:	3d01      	subs	r5, #1
   138f0:	d008      	beq.n	13904 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   138f2:	f006 fef6 	bl	1a6e2 <k_is_in_isr>
   138f6:	2800      	cmp	r0, #0
   138f8:	d1e2      	bne.n	138c0 <rtt_console_out+0xc>
   138fa:	2100      	movs	r1, #0
   138fc:	2042      	movs	r0, #66	; 0x42
   138fe:	f003 f85b 	bl	169b8 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   13902:	e7dd      	b.n	138c0 <rtt_console_out+0xc>
				host_present = false;
   13904:	7035      	strb	r5, [r6, #0]
   13906:	e7ec      	b.n	138e2 <rtt_console_out+0x2e>
   13908:	2000279f 	.word	0x2000279f

0001390c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1390c:	b530      	push	{r4, r5, lr}
	return port->config;
   1390e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   13910:	7b04      	ldrb	r4, [r0, #12]
   13912:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   13916:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1391a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   1391e:	b085      	sub	sp, #20
   13920:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   13924:	d104      	bne.n	13930 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   13926:	4628      	mov	r0, r5
   13928:	f001 fcc0 	bl	152ac <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   1392c:	2000      	movs	r0, #0
   1392e:	e02e      	b.n	1398e <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
   13930:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   13934:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   13938:	d12b      	bne.n	13992 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1393a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1393e:	bf0c      	ite	eq
   13940:	2304      	moveq	r3, #4
   13942:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   13944:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   13948:	6883      	ldr	r3, [r0, #8]
   1394a:	fa23 f101 	lsr.w	r1, r3, r1
   1394e:	07c9      	lsls	r1, r1, #31
   13950:	d42b      	bmi.n	139aa <gpio_nrfx_pin_interrupt_configure+0x9e>
   13952:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   13956:	d128      	bne.n	139aa <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   13958:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1395c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   13960:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   13964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   13968:	07db      	lsls	r3, r3, #31
   1396a:	d41e      	bmi.n	139aa <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1396c:	f10d 0407 	add.w	r4, sp, #7
   13970:	4621      	mov	r1, r4
   13972:	4628      	mov	r0, r5
   13974:	f001 fc02 	bl	1517c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   13978:	4b14      	ldr	r3, [pc, #80]	; (139cc <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1397a:	4298      	cmp	r0, r3
   1397c:	d114      	bne.n	139a8 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1397e:	4620      	mov	r0, r4
   13980:	f001 fc4a 	bl	15218 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   13984:	4b12      	ldr	r3, [pc, #72]	; (139d0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   13986:	4298      	cmp	r0, r3
   13988:	d00e      	beq.n	139a8 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   1398a:	f06f 000b 	mvn.w	r0, #11
}
   1398e:	b005      	add	sp, #20
   13990:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   13992:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   13996:	d005      	beq.n	139a4 <gpio_nrfx_pin_interrupt_configure+0x98>
   13998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1399c:	bf0c      	ite	eq
   1399e:	2302      	moveq	r3, #2
   139a0:	2301      	movne	r3, #1
   139a2:	e7cf      	b.n	13944 <gpio_nrfx_pin_interrupt_configure+0x38>
   139a4:	2303      	movs	r3, #3
   139a6:	e7cd      	b.n	13944 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   139a8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   139aa:	2300      	movs	r3, #0
   139ac:	4619      	mov	r1, r3
   139ae:	aa02      	add	r2, sp, #8
   139b0:	4628      	mov	r0, r5
   139b2:	f001 fabb 	bl	14f2c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   139b6:	4b06      	ldr	r3, [pc, #24]	; (139d0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   139b8:	4298      	cmp	r0, r3
   139ba:	d104      	bne.n	139c6 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   139bc:	2101      	movs	r1, #1
   139be:	4628      	mov	r0, r5
   139c0:	f001 fc30 	bl	15224 <nrfx_gpiote_trigger_enable>
   139c4:	e7b2      	b.n	1392c <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   139c6:	f06f 0004 	mvn.w	r0, #4
   139ca:	e7e0      	b.n	1398e <gpio_nrfx_pin_interrupt_configure+0x82>
   139cc:	0bad0004 	.word	0x0bad0004
   139d0:	0bad0000 	.word	0x0bad0000

000139d4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   139d4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   139d6:	f001 fc0f 	bl	151f8 <nrfx_gpiote_is_init>
   139da:	4604      	mov	r4, r0
   139dc:	b968      	cbnz	r0, 139fa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   139de:	f001 fbe3 	bl	151a8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   139e2:	4b08      	ldr	r3, [pc, #32]	; (13a04 <gpio_nrfx_init+0x30>)
   139e4:	4298      	cmp	r0, r3
   139e6:	d10a      	bne.n	139fe <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   139e8:	4807      	ldr	r0, [pc, #28]	; (13a08 <gpio_nrfx_init+0x34>)
   139ea:	4621      	mov	r1, r4
   139ec:	f001 fbc0 	bl	15170 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   139f0:	4622      	mov	r2, r4
   139f2:	2105      	movs	r1, #5
   139f4:	2006      	movs	r0, #6
   139f6:	f7ee fc23 	bl	2240 <z_arm_irq_priority_set>
		return 0;
   139fa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   139fc:	bd10      	pop	{r4, pc}
		return -EIO;
   139fe:	f06f 0004 	mvn.w	r0, #4
   13a02:	e7fb      	b.n	139fc <gpio_nrfx_init+0x28>
   13a04:	0bad0000 	.word	0x0bad0000
   13a08:	00013a0d 	.word	0x00013a0d

00013a0c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   13a0c:	0943      	lsrs	r3, r0, #5
{
   13a0e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   13a10:	d110      	bne.n	13a34 <nrfx_gpio_handler+0x28>
	return list->head;
   13a12:	4b09      	ldr	r3, [pc, #36]	; (13a38 <nrfx_gpio_handler+0x2c>)
   13a14:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13a16:	b169      	cbz	r1, 13a34 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
   13a18:	2501      	movs	r5, #1
	return node->next;
   13a1a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   13a1c:	4e07      	ldr	r6, [pc, #28]	; (13a3c <nrfx_gpio_handler+0x30>)
   13a1e:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
   13a20:	688a      	ldr	r2, [r1, #8]
   13a22:	402a      	ands	r2, r5
   13a24:	d002      	beq.n	13a2c <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
   13a26:	684b      	ldr	r3, [r1, #4]
   13a28:	4630      	mov	r0, r6
   13a2a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13a2c:	b114      	cbz	r4, 13a34 <nrfx_gpio_handler+0x28>
   13a2e:	4621      	mov	r1, r4
   13a30:	6824      	ldr	r4, [r4, #0]
   13a32:	e7f5      	b.n	13a20 <nrfx_gpio_handler+0x14>
}
   13a34:	bd70      	pop	{r4, r5, r6, pc}
   13a36:	bf00      	nop
   13a38:	200025a8 	.word	0x200025a8
   13a3c:	0001b0b8 	.word	0x0001b0b8

00013a40 <gpio_nrfx_pin_configure>:
{
   13a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   13a44:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   13a46:	7b3b      	ldrb	r3, [r7, #12]
   13a48:	f001 051f 	and.w	r5, r1, #31
{
   13a4c:	b085      	sub	sp, #20
   13a4e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   13a50:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   13a54:	4614      	mov	r4, r2
   13a56:	b9ca      	cbnz	r2, 13a8c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   13a58:	a902      	add	r1, sp, #8
   13a5a:	4628      	mov	r0, r5
   13a5c:	f001 fb8e 	bl	1517c <nrfx_gpiote_channel_get>
   13a60:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   13a62:	4628      	mov	r0, r5
   13a64:	f001 fc4a 	bl	152fc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   13a68:	4b48      	ldr	r3, [pc, #288]	; (13b8c <gpio_nrfx_pin_configure+0x14c>)
   13a6a:	4298      	cmp	r0, r3
   13a6c:	d004      	beq.n	13a78 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   13a6e:	f06f 0004 	mvn.w	r0, #4
}
   13a72:	b005      	add	sp, #20
   13a74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   13a78:	4284      	cmp	r4, r0
   13a7a:	d105      	bne.n	13a88 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   13a7c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   13a80:	f001 fbc4 	bl	1520c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   13a84:	42a0      	cmp	r0, r4
   13a86:	d1f2      	bne.n	13a6e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   13a88:	2000      	movs	r0, #0
   13a8a:	e7f2      	b.n	13a72 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   13a8c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   13a90:	f10d 0103 	add.w	r1, sp, #3
   13a94:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   13a96:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   13a9a:	f001 fb6f 	bl	1517c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13a9e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   13aa0:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   13aa2:	aa02      	add	r2, sp, #8
   13aa4:	4649      	mov	r1, r9
   13aa6:	4628      	mov	r0, r5
   13aa8:	f001 fa40 	bl	14f2c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   13aac:	4b37      	ldr	r3, [pc, #220]	; (13b8c <gpio_nrfx_pin_configure+0x14c>)
   13aae:	4298      	cmp	r0, r3
   13ab0:	d002      	beq.n	13ab8 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   13ab2:	f06f 0015 	mvn.w	r0, #21
   13ab6:	e7dc      	b.n	13a72 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   13ab8:	4580      	cmp	r8, r0
   13aba:	d103      	bne.n	13ac4 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   13abc:	f89d 0003 	ldrb.w	r0, [sp, #3]
   13ac0:	f001 fba4 	bl	1520c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   13ac4:	05a3      	lsls	r3, r4, #22
   13ac6:	d54e      	bpl.n	13b66 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   13ac8:	4b31      	ldr	r3, [pc, #196]	; (13b90 <gpio_nrfx_pin_configure+0x150>)
   13aca:	4a32      	ldr	r2, [pc, #200]	; (13b94 <gpio_nrfx_pin_configure+0x154>)
   13acc:	4023      	ands	r3, r4
   13ace:	4293      	cmp	r3, r2
   13ad0:	d03a      	beq.n	13b48 <gpio_nrfx_pin_configure+0x108>
   13ad2:	d80c      	bhi.n	13aee <gpio_nrfx_pin_configure+0xae>
   13ad4:	2b06      	cmp	r3, #6
   13ad6:	d014      	beq.n	13b02 <gpio_nrfx_pin_configure+0xc2>
   13ad8:	d804      	bhi.n	13ae4 <gpio_nrfx_pin_configure+0xa4>
   13ada:	b193      	cbz	r3, 13b02 <gpio_nrfx_pin_configure+0xc2>
   13adc:	2b02      	cmp	r3, #2
   13ade:	d1e8      	bne.n	13ab2 <gpio_nrfx_pin_configure+0x72>
   13ae0:	2304      	movs	r3, #4
   13ae2:	e00e      	b.n	13b02 <gpio_nrfx_pin_configure+0xc2>
   13ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   13ae8:	d1e3      	bne.n	13ab2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   13aea:	2301      	movs	r3, #1
   13aec:	e009      	b.n	13b02 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   13aee:	4a2a      	ldr	r2, [pc, #168]	; (13b98 <gpio_nrfx_pin_configure+0x158>)
   13af0:	4293      	cmp	r3, r2
   13af2:	d02b      	beq.n	13b4c <gpio_nrfx_pin_configure+0x10c>
   13af4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   13af8:	d02a      	beq.n	13b50 <gpio_nrfx_pin_configure+0x110>
   13afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   13afe:	d1d8      	bne.n	13ab2 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   13b00:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   13b02:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   13b06:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   13b0a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   13b0e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   13b10:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   13b14:	bf54      	ite	pl
   13b16:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   13b1a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   13b1c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   13b1e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   13b22:	d517      	bpl.n	13b54 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   13b24:	687b      	ldr	r3, [r7, #4]
   13b26:	2101      	movs	r1, #1
   13b28:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   13b2c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   13b30:	2200      	movs	r2, #0
   13b32:	a901      	add	r1, sp, #4
   13b34:	4628      	mov	r0, r5
   13b36:	f001 faa3 	bl	15080 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   13b3a:	4b14      	ldr	r3, [pc, #80]	; (13b8c <gpio_nrfx_pin_configure+0x14c>)
   13b3c:	4298      	cmp	r0, r3
   13b3e:	bf14      	ite	ne
   13b40:	f06f 0015 	mvnne.w	r0, #21
   13b44:	2000      	moveq	r0, #0
   13b46:	e794      	b.n	13a72 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   13b48:	2307      	movs	r3, #7
   13b4a:	e7da      	b.n	13b02 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   13b4c:	2305      	movs	r3, #5
   13b4e:	e7d8      	b.n	13b02 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   13b50:	2303      	movs	r3, #3
   13b52:	e7d6      	b.n	13b02 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   13b54:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   13b56:	bf41      	itttt	mi
   13b58:	687b      	ldrmi	r3, [r7, #4]
   13b5a:	2101      	movmi	r1, #1
   13b5c:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   13b60:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   13b64:	e7e4      	b.n	13b30 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   13b66:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   13b68:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   13b6c:	bf54      	ite	pl
   13b6e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   13b72:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   13b74:	461a      	mov	r2, r3
   13b76:	a901      	add	r1, sp, #4
   13b78:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   13b7a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   13b7e:	f001 f9d5 	bl	14f2c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   13b82:	4b02      	ldr	r3, [pc, #8]	; (13b8c <gpio_nrfx_pin_configure+0x14c>)
   13b84:	4298      	cmp	r0, r3
   13b86:	f43f af7f 	beq.w	13a88 <gpio_nrfx_pin_configure+0x48>
   13b8a:	e792      	b.n	13ab2 <gpio_nrfx_pin_configure+0x72>
   13b8c:	0bad0000 	.word	0x0bad0000
   13b90:	00f00006 	.word	0x00f00006
   13b94:	00100006 	.word	0x00100006
   13b98:	00400002 	.word	0x00400002

00013b9c <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   13b9c:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twim_config *config = dev->config;
   13b9e:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   13ba0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   13ba4:	f001 ff44 	bl	15a30 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(config->config.scl,
					       config->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   13ba8:	4b03      	ldr	r3, [pc, #12]	; (13bb8 <i2c_nrfx_twim_recover_bus+0x1c>)
   13baa:	4298      	cmp	r0, r3
}
   13bac:	bf14      	ite	ne
   13bae:	f06f 000f 	mvnne.w	r0, #15
   13bb2:	2000      	moveq	r0, #0
   13bb4:	bd08      	pop	{r3, pc}
   13bb6:	bf00      	nop
   13bb8:	0bad0000 	.word	0x0bad0000

00013bbc <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   13bbc:	b510      	push	{r4, lr}
   13bbe:	4604      	mov	r4, r0
   13bc0:	2200      	movs	r2, #0
   13bc2:	2101      	movs	r1, #1
   13bc4:	2003      	movs	r0, #3
   13bc6:	f7ee fb3b 	bl	2240 <z_arm_irq_priority_set>
	const struct i2c_nrfx_twim_config *config = dev->config;
   13bca:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&config->twim, &config->config,
   13bcc:	6923      	ldr	r3, [r4, #16]
   13bce:	4a06      	ldr	r2, [pc, #24]	; (13be8 <twim_0_init+0x2c>)
   13bd0:	f100 0108 	add.w	r1, r0, #8
   13bd4:	f001 fd20 	bl	15618 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   13bd8:	4b04      	ldr	r3, [pc, #16]	; (13bec <twim_0_init+0x30>)
		return -EBUSY;
   13bda:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(0);
   13bdc:	bf14      	ite	ne
   13bde:	f06f 000f 	mvnne.w	r0, #15
   13be2:	2000      	moveq	r0, #0
   13be4:	bd10      	pop	{r4, pc}
   13be6:	bf00      	nop
   13be8:	00013bf1 	.word	0x00013bf1
   13bec:	0bad0000 	.word	0x0bad0000

00013bf0 <event_handler>:
	switch (p_event->type) {
   13bf0:	7803      	ldrb	r3, [r0, #0]
   13bf2:	2b01      	cmp	r3, #1
   13bf4:	d008      	beq.n	13c08 <event_handler+0x18>
   13bf6:	2b02      	cmp	r3, #2
   13bf8:	d008      	beq.n	13c0c <event_handler+0x1c>
   13bfa:	b94b      	cbnz	r3, 13c10 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   13bfc:	4b05      	ldr	r3, [pc, #20]	; (13c14 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   13bfe:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   13c00:	f101 0018 	add.w	r0, r1, #24
   13c04:	f002 ba3c 	b.w	16080 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   13c08:	4b03      	ldr	r3, [pc, #12]	; (13c18 <event_handler+0x28>)
   13c0a:	e7f8      	b.n	13bfe <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   13c0c:	4b03      	ldr	r3, [pc, #12]	; (13c1c <event_handler+0x2c>)
   13c0e:	e7f6      	b.n	13bfe <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   13c10:	4b03      	ldr	r3, [pc, #12]	; (13c20 <event_handler+0x30>)
   13c12:	e7f4      	b.n	13bfe <event_handler+0xe>
   13c14:	0bad0000 	.word	0x0bad0000
   13c18:	0bae0001 	.word	0x0bae0001
   13c1c:	0bae0002 	.word	0x0bae0002
   13c20:	0bad0001 	.word	0x0bad0001

00013c24 <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   13c24:	b510      	push	{r4, lr}
   13c26:	4604      	mov	r4, r0
   13c28:	2200      	movs	r2, #0
   13c2a:	2101      	movs	r1, #1
   13c2c:	2004      	movs	r0, #4
   13c2e:	f7ee fb07 	bl	2240 <z_arm_irq_priority_set>
	const struct i2c_nrfx_twim_config *config = dev->config;
   13c32:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&config->twim, &config->config,
   13c34:	6923      	ldr	r3, [r4, #16]
   13c36:	4a06      	ldr	r2, [pc, #24]	; (13c50 <twim_1_init+0x2c>)
   13c38:	f100 0108 	add.w	r1, r0, #8
   13c3c:	f001 fcec 	bl	15618 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   13c40:	4b04      	ldr	r3, [pc, #16]	; (13c54 <twim_1_init+0x30>)
		return -EBUSY;
   13c42:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(1);
   13c44:	bf14      	ite	ne
   13c46:	f06f 000f 	mvnne.w	r0, #15
   13c4a:	2000      	moveq	r0, #0
   13c4c:	bd10      	pop	{r4, pc}
   13c4e:	bf00      	nop
   13c50:	00013bf1 	.word	0x00013bf1
   13c54:	0bad0000 	.word	0x0bad0000

00013c58 <i2c_nrfx_twim_transfer>:
{
   13c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   13c5c:	6846      	ldr	r6, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   13c5e:	6907      	ldr	r7, [r0, #16]
{
   13c60:	b089      	sub	sp, #36	; 0x24
   13c62:	461d      	mov	r5, r3
   13c64:	460c      	mov	r4, r1
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   13c66:	8b33      	ldrh	r3, [r6, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
   13c68:	f8d7 9038 	ldr.w	r9, [r7, #56]	; 0x38
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   13c6c:	9300      	str	r3, [sp, #0]
{
   13c6e:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   13c70:	2100      	movs	r1, #0
   13c72:	2214      	movs	r2, #20
   13c74:	a803      	add	r0, sp, #12
   13c76:	f003 ff4c 	bl	17b12 <memset>
   13c7a:	f88d 500d 	strb.w	r5, [sp, #13]
	return z_impl_k_sem_take(sem, timeout);
   13c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c86:	4638      	mov	r0, r7
   13c88:	f002 fa20 	bl	160cc <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   13c8c:	f107 0a18 	add.w	sl, r7, #24
   13c90:	2200      	movs	r2, #0
   13c92:	2300      	movs	r3, #0
   13c94:	4650      	mov	r0, sl
   13c96:	f002 fa19 	bl	160cc <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   13c9a:	4630      	mov	r0, r6
   13c9c:	f001 fd0c 	bl	156b8 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   13ca0:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   13ca4:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   13ca6:	45d8      	cmp	r8, fp
   13ca8:	d301      	bcc.n	13cae <i2c_nrfx_twim_transfer+0x56>
   13caa:	2400      	movs	r4, #0
   13cac:	e049      	b.n	13d42 <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   13cae:	7a21      	ldrb	r1, [r4, #8]
   13cb0:	070a      	lsls	r2, r1, #28
   13cb2:	f100 808f 	bmi.w	13dd4 <i2c_nrfx_twim_transfer+0x17c>
		bool concat_next = ((i + 1) < num_msgs)
   13cb6:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   13cba:	45d8      	cmp	r8, fp
   13cbc:	6862      	ldr	r2, [r4, #4]
   13cbe:	d20a      	bcs.n	13cd6 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   13cc0:	078b      	lsls	r3, r1, #30
   13cc2:	d408      	bmi.n	13cd6 <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   13cc4:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   13cc6:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   13cca:	f000 0001 	and.w	r0, r0, #1
   13cce:	f003 0304 	and.w	r3, r3, #4
   13cd2:	4303      	orrs	r3, r0
   13cd4:	d016      	beq.n	13d04 <i2c_nrfx_twim_transfer+0xac>
		if (concat_next || (msg_buf_used != 0)) {
   13cd6:	b1bd      	cbz	r5, 13d08 <i2c_nrfx_twim_transfer+0xb0>
				&& ((msgs[i].flags & I2C_MSG_READ)
   13cd8:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   13cda:	f8dd c000 	ldr.w	ip, [sp]
   13cde:	18a8      	adds	r0, r5, r2
   13ce0:	4560      	cmp	r0, ip
   13ce2:	d87a      	bhi.n	13dda <i2c_nrfx_twim_transfer+0x182>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   13ce4:	07c8      	lsls	r0, r1, #31
   13ce6:	d406      	bmi.n	13cf6 <i2c_nrfx_twim_transfer+0x9e>
				memcpy(msg_buf + msg_buf_used,
   13ce8:	6821      	ldr	r1, [r4, #0]
   13cea:	9301      	str	r3, [sp, #4]
   13cec:	eb09 0005 	add.w	r0, r9, r5
   13cf0:	f003 ff04 	bl	17afc <memcpy>
   13cf4:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
   13cf6:	6862      	ldr	r2, [r4, #4]
   13cf8:	4415      	add	r5, r2
   13cfa:	b2ad      	uxth	r5, r5
		if (concat_next) {
   13cfc:	2b00      	cmp	r3, #0
   13cfe:	d037      	beq.n	13d70 <i2c_nrfx_twim_transfer+0x118>
   13d00:	340c      	adds	r4, #12
   13d02:	e7d0      	b.n	13ca6 <i2c_nrfx_twim_transfer+0x4e>
				&& ((msgs[i].flags & I2C_MSG_READ)
   13d04:	2301      	movs	r3, #1
   13d06:	e7e8      	b.n	13cda <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   13d08:	07c9      	lsls	r1, r1, #31
   13d0a:	d524      	bpl.n	13d56 <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
   13d0c:	6823      	ldr	r3, [r4, #0]
   13d0e:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   13d10:	6863      	ldr	r3, [r4, #4]
   13d12:	9304      	str	r3, [sp, #16]
   13d14:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   13d16:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   13d18:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   13d1c:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   13d20:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   13d24:	a903      	add	r1, sp, #12
   13d26:	bf0c      	ite	eq
   13d28:	2220      	moveq	r2, #32
   13d2a:	2200      	movne	r2, #0
   13d2c:	4630      	mov	r0, r6
   13d2e:	f001 fcf1 	bl	15714 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   13d32:	4b2e      	ldr	r3, [pc, #184]	; (13dec <i2c_nrfx_twim_transfer+0x194>)
   13d34:	4298      	cmp	r0, r3
   13d36:	d021      	beq.n	13d7c <i2c_nrfx_twim_transfer+0x124>
			if (res == NRFX_ERROR_BUSY) {
   13d38:	330b      	adds	r3, #11
   13d3a:	4298      	cmp	r0, r3
   13d3c:	d053      	beq.n	13de6 <i2c_nrfx_twim_transfer+0x18e>
			ret = -EIO;
   13d3e:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
   13d42:	4630      	mov	r0, r6
   13d44:	f001 fcc8 	bl	156d8 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   13d48:	4638      	mov	r0, r7
   13d4a:	f002 f999 	bl	16080 <z_impl_k_sem_give>
}
   13d4e:	4620      	mov	r0, r4
   13d50:	b009      	add	sp, #36	; 0x24
   13d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
   13d56:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   13d58:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   13d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   13d60:	d0d4      	beq.n	13d0c <i2c_nrfx_twim_transfer+0xb4>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   13d62:	8b73      	ldrh	r3, [r6, #26]
   13d64:	4293      	cmp	r3, r2
   13d66:	d33b      	bcc.n	13de0 <i2c_nrfx_twim_transfer+0x188>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   13d68:	4648      	mov	r0, r9
   13d6a:	f003 fec7 	bl	17afc <memcpy>
			msg_buf_used = msgs[i].len;
   13d6e:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   13d70:	2d00      	cmp	r5, #0
   13d72:	d0cb      	beq.n	13d0c <i2c_nrfx_twim_transfer+0xb4>
			cur_xfer.p_primary_buf = msg_buf;
   13d74:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
   13d78:	9504      	str	r5, [sp, #16]
   13d7a:	e7cc      	b.n	13d16 <i2c_nrfx_twim_transfer+0xbe>
	return z_impl_k_sem_take(sem, timeout);
   13d7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   13d80:	2300      	movs	r3, #0
   13d82:	4650      	mov	r0, sl
   13d84:	f002 f9a2 	bl	160cc <z_impl_k_sem_take>
		if (ret != 0) {
   13d88:	b138      	cbz	r0, 13d9a <i2c_nrfx_twim_transfer+0x142>
			nrfx_twim_disable(&dev_config->twim);
   13d8a:	4630      	mov	r0, r6
   13d8c:	f001 fca4 	bl	156d8 <nrfx_twim_disable>
   13d90:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   13d94:	f001 fe4c 	bl	15a30 <nrfx_twi_twim_bus_recover>
   13d98:	e7d1      	b.n	13d3e <i2c_nrfx_twim_transfer+0xe6>
		res = dev_data->res;
   13d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   13d9c:	4a13      	ldr	r2, [pc, #76]	; (13dec <i2c_nrfx_twim_transfer+0x194>)
   13d9e:	4293      	cmp	r3, r2
   13da0:	d1cd      	bne.n	13d3e <i2c_nrfx_twim_transfer+0xe6>
		if ((msgs[i].flags & I2C_MSG_READ)
   13da2:	7a23      	ldrb	r3, [r4, #8]
   13da4:	07db      	lsls	r3, r3, #31
   13da6:	d401      	bmi.n	13dac <i2c_nrfx_twim_transfer+0x154>
		msg_buf_used = 0;
   13da8:	2500      	movs	r5, #0
   13daa:	e7a9      	b.n	13d00 <i2c_nrfx_twim_transfer+0xa8>
		    && cur_xfer.p_primary_buf == msg_buf) {
   13dac:	9b06      	ldr	r3, [sp, #24]
   13dae:	4599      	cmp	r9, r3
   13db0:	d1fa      	bne.n	13da8 <i2c_nrfx_twim_transfer+0x150>
   13db2:	4623      	mov	r3, r4
   13db4:	e008      	b.n	13dc8 <i2c_nrfx_twim_transfer+0x170>
				msg_buf_used -= msgs[j].len;
   13db6:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
   13db8:	68d8      	ldr	r0, [r3, #12]
   13dba:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
   13dbc:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   13dbe:	fa19 f181 	uxtah	r1, r9, r1
   13dc2:	f003 fe9b 	bl	17afc <memcpy>
				j--;
   13dc6:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
   13dc8:	685a      	ldr	r2, [r3, #4]
   13dca:	4295      	cmp	r5, r2
   13dcc:	f1a3 030c 	sub.w	r3, r3, #12
   13dd0:	d2f1      	bcs.n	13db6 <i2c_nrfx_twim_transfer+0x15e>
   13dd2:	e7e9      	b.n	13da8 <i2c_nrfx_twim_transfer+0x150>
			ret = -ENOTSUP;
   13dd4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   13dd8:	e7b3      	b.n	13d42 <i2c_nrfx_twim_transfer+0xea>
				ret = -ENOSPC;
   13dda:	f06f 041b 	mvn.w	r4, #27
   13dde:	e7b0      	b.n	13d42 <i2c_nrfx_twim_transfer+0xea>
				ret = -EINVAL;
   13de0:	f06f 0415 	mvn.w	r4, #21
   13de4:	e7ad      	b.n	13d42 <i2c_nrfx_twim_transfer+0xea>
				ret = -EBUSY;
   13de6:	f06f 040f 	mvn.w	r4, #15
   13dea:	e7aa      	b.n	13d42 <i2c_nrfx_twim_transfer+0xea>
   13dec:	0bad0000 	.word	0x0bad0000

00013df0 <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
   13df0:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
   13df2:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
   13df4:	4908      	ldr	r1, [pc, #32]	; (13e18 <regulator_fixed_init_onoff+0x28>)
{
   13df6:	4604      	mov	r4, r0
	data->dev = dev;
   13df8:	4628      	mov	r0, r5
   13dfa:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
   13dfe:	f003 f91f 	bl	17040 <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
   13e02:	4906      	ldr	r1, [pc, #24]	; (13e1c <regulator_fixed_init_onoff+0x2c>)
   13e04:	f105 0020 	add.w	r0, r5, #32
   13e08:	f006 fdf0 	bl	1a9ec <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
   13e0c:	6860      	ldr	r0, [r4, #4]
   13e0e:	f006 f9d7 	bl	1a1c0 <common_init.isra.0>
	}

	LOG_INF("%s onoff: %d", dev->name, rc);

	return rc;
}
   13e12:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   13e16:	bd38      	pop	{r3, r4, r5, pc}
   13e18:	0001c638 	.word	0x0001c638
   13e1c:	0001a22b 	.word	0x0001a22b

00013e20 <finalize_transition>:
{
   13e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
   13e24:	1e1c      	subs	r4, r3, #0
{
   13e26:	4605      	mov	r5, r0
   13e28:	460f      	mov	r7, r1
   13e2a:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
   13e2c:	db10      	blt.n	13e50 <finalize_transition+0x30>
   13e2e:	b17a      	cbz	r2, 13e50 <finalize_transition+0x30>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13e30:	ea4f 4952 	mov.w	r9, r2, lsr #17
   13e34:	03d6      	lsls	r6, r2, #15
   13e36:	2300      	movs	r3, #0
   13e38:	4a14      	ldr	r2, [pc, #80]	; (13e8c <finalize_transition+0x6c>)
   13e3a:	4630      	mov	r0, r6
   13e3c:	4649      	mov	r1, r9
   13e3e:	f7ec f94f 	bl	e0 <__aeabi_uldivmod>
		    || k_is_pre_kernel()
   13e42:	b110      	cbz	r0, 13e4a <finalize_transition+0x2a>
	return !z_sys_post_kernel;
   13e44:	4b12      	ldr	r3, [pc, #72]	; (13e90 <finalize_transition+0x70>)
   13e46:	781b      	ldrb	r3, [r3, #0]
   13e48:	b943      	cbnz	r3, 13e5c <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
   13e4a:	4640      	mov	r0, r8
   13e4c:	f006 ff4c 	bl	1ace8 <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
   13e50:	4621      	mov	r1, r4
   13e52:	1d28      	adds	r0, r5, #4
   13e54:	463b      	mov	r3, r7
}
   13e56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
   13e5a:	4718      	bx	r3
			return ((t * to_hz + off) / from_hz);
   13e5c:	480d      	ldr	r0, [pc, #52]	; (13e94 <finalize_transition+0x74>)
   13e5e:	4a0b      	ldr	r2, [pc, #44]	; (13e8c <finalize_transition+0x6c>)
			data->notify = notify;
   13e60:	652f      	str	r7, [r5, #80]	; 0x50
   13e62:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
   13e64:	f04f 0303 	mov.w	r3, #3
   13e68:	f149 0100 	adc.w	r1, r9, #0
   13e6c:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
   13e70:	2300      	movs	r3, #0
   13e72:	f7ec f935 	bl	e0 <__aeabi_uldivmod>
   13e76:	4602      	mov	r2, r0
   13e78:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
   13e7a:	f105 0020 	add.w	r0, r5, #32
   13e7e:	f002 fad3 	bl	16428 <k_work_schedule>
			if (rc >= 0) {
   13e82:	1e04      	subs	r4, r0, #0
   13e84:	dbe4      	blt.n	13e50 <finalize_transition+0x30>
}
   13e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e8a:	bf00      	nop
   13e8c:	000f4240 	.word	0x000f4240
   13e90:	20002bd0 	.word	0x20002bd0
   13e94:	000f423f 	.word	0x000f423f

00013e98 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   13e98:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   13e9a:	794b      	ldrb	r3, [r1, #5]
   13e9c:	2b01      	cmp	r3, #1
   13e9e:	d120      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   13ea0:	798b      	ldrb	r3, [r1, #6]
   13ea2:	2b03      	cmp	r3, #3
   13ea4:	d11d      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   13ea6:	79cc      	ldrb	r4, [r1, #7]
   13ea8:	b10c      	cbz	r4, 13eae <uarte_nrfx_configure+0x16>
   13eaa:	2c01      	cmp	r4, #1
   13eac:	d119      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   13eae:	790a      	ldrb	r2, [r1, #4]
   13eb0:	b112      	cbz	r2, 13eb8 <uarte_nrfx_configure+0x20>
   13eb2:	2a02      	cmp	r2, #2
   13eb4:	d115      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
   13eb6:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   13eb8:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   13eba:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   13ebc:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   13ec0:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   13ec2:	d062      	beq.n	13f8a <uarte_nrfx_configure+0xf2>
   13ec4:	d82b      	bhi.n	13f1e <uarte_nrfx_configure+0x86>
   13ec6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   13eca:	d061      	beq.n	13f90 <uarte_nrfx_configure+0xf8>
   13ecc:	d814      	bhi.n	13ef8 <uarte_nrfx_configure+0x60>
   13ece:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   13ed2:	d05f      	beq.n	13f94 <uarte_nrfx_configure+0xfc>
   13ed4:	d808      	bhi.n	13ee8 <uarte_nrfx_configure+0x50>
   13ed6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   13eda:	d05e      	beq.n	13f9a <uarte_nrfx_configure+0x102>
   13edc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   13ee0:	d05e      	beq.n	13fa0 <uarte_nrfx_configure+0x108>
   13ee2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13ee6:	e04f      	b.n	13f88 <uarte_nrfx_configure+0xf0>
   13ee8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   13eec:	d05b      	beq.n	13fa6 <uarte_nrfx_configure+0x10e>
   13eee:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   13ef2:	d1f6      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   13ef4:	4b36      	ldr	r3, [pc, #216]	; (13fd0 <uarte_nrfx_configure+0x138>)
   13ef6:	e03c      	b.n	13f72 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13ef8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   13efc:	d056      	beq.n	13fac <uarte_nrfx_configure+0x114>
   13efe:	d807      	bhi.n	13f10 <uarte_nrfx_configure+0x78>
   13f00:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   13f04:	d054      	beq.n	13fb0 <uarte_nrfx_configure+0x118>
   13f06:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   13f0a:	d1ea      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   13f0c:	4b31      	ldr	r3, [pc, #196]	; (13fd4 <uarte_nrfx_configure+0x13c>)
   13f0e:	e030      	b.n	13f72 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f10:	f647 2612 	movw	r6, #31250	; 0x7a12
   13f14:	42b3      	cmp	r3, r6
   13f16:	d1e4      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   13f18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   13f1c:	e029      	b.n	13f72 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f1e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   13f22:	d047      	beq.n	13fb4 <uarte_nrfx_configure+0x11c>
   13f24:	d813      	bhi.n	13f4e <uarte_nrfx_configure+0xb6>
   13f26:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   13f2a:	d046      	beq.n	13fba <uarte_nrfx_configure+0x122>
   13f2c:	d809      	bhi.n	13f42 <uarte_nrfx_configure+0xaa>
   13f2e:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   13f32:	42b3      	cmp	r3, r6
   13f34:	d043      	beq.n	13fbe <uarte_nrfx_configure+0x126>
   13f36:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   13f3a:	d1d2      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   13f3c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   13f40:	e017      	b.n	13f72 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f42:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   13f46:	d1cc      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   13f48:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   13f4c:	e011      	b.n	13f72 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f4e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   13f52:	d037      	beq.n	13fc4 <uarte_nrfx_configure+0x12c>
   13f54:	d808      	bhi.n	13f68 <uarte_nrfx_configure+0xd0>
   13f56:	4e20      	ldr	r6, [pc, #128]	; (13fd8 <uarte_nrfx_configure+0x140>)
   13f58:	42b3      	cmp	r3, r6
   13f5a:	d036      	beq.n	13fca <uarte_nrfx_configure+0x132>
   13f5c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   13f60:	d1bf      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   13f62:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   13f66:	e004      	b.n	13f72 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13f68:	4e1c      	ldr	r6, [pc, #112]	; (13fdc <uarte_nrfx_configure+0x144>)
   13f6a:	42b3      	cmp	r3, r6
   13f6c:	d1b9      	bne.n	13ee2 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   13f6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   13f72:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   13f74:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   13f78:	1d03      	adds	r3, r0, #4
   13f7a:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   13f7c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13f7e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   13f82:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   13f86:	2000      	movs	r0, #0
}
   13f88:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   13f8a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   13f8e:	e7f0      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   13f90:	4b13      	ldr	r3, [pc, #76]	; (13fe0 <uarte_nrfx_configure+0x148>)
   13f92:	e7ee      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   13f94:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   13f98:	e7eb      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   13f9a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   13f9e:	e7e8      	b.n	13f72 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   13fa0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   13fa4:	e7e5      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   13fa6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   13faa:	e7e2      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   13fac:	4b0d      	ldr	r3, [pc, #52]	; (13fe4 <uarte_nrfx_configure+0x14c>)
   13fae:	e7e0      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   13fb0:	4b0d      	ldr	r3, [pc, #52]	; (13fe8 <uarte_nrfx_configure+0x150>)
   13fb2:	e7de      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   13fb4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   13fb8:	e7db      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   13fba:	4b0c      	ldr	r3, [pc, #48]	; (13fec <uarte_nrfx_configure+0x154>)
   13fbc:	e7d9      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   13fbe:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   13fc2:	e7d6      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   13fc4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   13fc8:	e7d3      	b.n	13f72 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   13fca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   13fce:	e7d0      	b.n	13f72 <uarte_nrfx_configure+0xda>
   13fd0:	0013b000 	.word	0x0013b000
   13fd4:	004ea000 	.word	0x004ea000
   13fd8:	0003d090 	.word	0x0003d090
   13fdc:	000f4240 	.word	0x000f4240
   13fe0:	00275000 	.word	0x00275000
   13fe4:	0075c000 	.word	0x0075c000
   13fe8:	003af000 	.word	0x003af000
   13fec:	013a9000 	.word	0x013a9000

00013ff0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   13ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   13ff2:	6906      	ldr	r6, [r0, #16]
{
   13ff4:	4605      	mov	r5, r0
   13ff6:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13ff8:	f006 fb73 	bl	1a6e2 <k_is_in_isr>
   13ffc:	b910      	cbnz	r0, 14004 <uarte_nrfx_poll_out+0x14>
   13ffe:	4b2c      	ldr	r3, [pc, #176]	; (140b0 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   14000:	781b      	ldrb	r3, [r3, #0]
   14002:	b983      	cbnz	r3, 14026 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   14004:	f04f 0320 	mov.w	r3, #32
   14008:	f3ef 8411 	mrs	r4, BASEPRI
   1400c:	f383 8812 	msr	BASEPRI_MAX, r3
   14010:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   14014:	6868      	ldr	r0, [r5, #4]
   14016:	f006 f9a6 	bl	1a366 <is_tx_ready.isra.0>
   1401a:	bb28      	cbnz	r0, 14068 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   1401c:	f384 8811 	msr	BASEPRI, r4
   14020:	f3bf 8f6f 	isb	sy
}
   14024:	e7ee      	b.n	14004 <uarte_nrfx_poll_out+0x14>
{
   14026:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   14028:	6868      	ldr	r0, [r5, #4]
   1402a:	f006 f99c 	bl	1a366 <is_tx_ready.isra.0>
   1402e:	b970      	cbnz	r0, 1404e <uarte_nrfx_poll_out+0x5e>
   14030:	2001      	movs	r0, #1
   14032:	f006 f9f1 	bl	1a418 <nrfx_busy_wait>
   14036:	3c01      	subs	r4, #1
   14038:	d1f6      	bne.n	14028 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   1403a:	2100      	movs	r1, #0
   1403c:	2021      	movs	r0, #33	; 0x21
   1403e:	f002 fcbb 	bl	169b8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   14042:	e7f0      	b.n	14026 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   14044:	f384 8811 	msr	BASEPRI, r4
   14048:	f3bf 8f6f 	isb	sy
}
   1404c:	e7f5      	b.n	1403a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1404e:	f04f 0320 	mov.w	r3, #32
   14052:	f3ef 8411 	mrs	r4, BASEPRI
   14056:	f383 8812 	msr	BASEPRI_MAX, r3
   1405a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1405e:	6868      	ldr	r0, [r5, #4]
   14060:	f006 f981 	bl	1a366 <is_tx_ready.isra.0>
   14064:	2800      	cmp	r0, #0
   14066:	d0ed      	beq.n	14044 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   14068:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   1406c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   1406e:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   14070:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14072:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14076:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1407a:	2200      	movs	r2, #0
   1407c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   14080:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   14084:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   14088:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1408c:	684a      	ldr	r2, [r1, #4]
   1408e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   14090:	bf41      	itttt	mi
   14092:	2208      	movmi	r2, #8
   14094:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   14098:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   1409c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   140a0:	2201      	movs	r2, #1
   140a2:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   140a4:	f384 8811 	msr	BASEPRI, r4
   140a8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   140ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140ae:	bf00      	nop
   140b0:	20002bd0 	.word	0x20002bd0

000140b4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   140b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   140b8:	2101      	movs	r1, #1
   140ba:	4606      	mov	r6, r0
   140bc:	2200      	movs	r2, #0
   140be:	2002      	movs	r0, #2
   140c0:	f7ee f8be 	bl	2240 <z_arm_irq_priority_set>
   140c4:	2002      	movs	r0, #2
   140c6:	f7ee f889 	bl	21dc <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   140ca:	6877      	ldr	r7, [r6, #4]
	struct uarte_nrfx_data *data = dev->data;
   140cc:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
   140ce:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   140d0:	2300      	movs	r3, #0
   140d2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   140d6:	602e      	str	r6, [r5, #0]
	uarte_nrfx_pins_configure(dev, false);
   140d8:	6873      	ldr	r3, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   140da:	68d8      	ldr	r0, [r3, #12]
   140dc:	1c41      	adds	r1, r0, #1
   140de:	d00c      	beq.n	140fa <uarte_0_init+0x46>
    *p_pin = pin_number & 0x1F;
   140e0:	f000 021f 	and.w	r2, r0, #31
    p_reg->OUTSET = set_mask;
   140e4:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   140e8:	2101      	movs	r1, #1
   140ea:	4091      	lsls	r1, r2
    reg->PIN_CNF[pin_number] = cnf;
   140ec:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   140f0:	f8cc 1508 	str.w	r1, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   140f4:	2103      	movs	r1, #3
   140f6:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   140fa:	6919      	ldr	r1, [r3, #16]
   140fc:	1c4a      	adds	r2, r1, #1
   140fe:	d010      	beq.n	14122 <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
   14100:	7f1a      	ldrb	r2, [r3, #28]
   14102:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   14104:	f001 021f 	and.w	r2, r1, #31
   14108:	bf14      	ite	ne
   1410a:	f04f 0c03 	movne.w	ip, #3
   1410e:	f04f 0c00 	moveq.w	ip, #0
    reg->PIN_CNF[pin_number] = cnf;
   14112:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   14116:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1411a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1411e:	f84e c022 	str.w	ip, [lr, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   14122:	f8d3 c014 	ldr.w	ip, [r3, #20]
   14126:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   1412a:	d00f      	beq.n	1414c <uarte_0_init+0x98>
    *p_pin = pin_number & 0x1F;
   1412c:	f00c 021f 	and.w	r2, ip, #31
    p_reg->OUTSET = set_mask;
   14130:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14134:	f04f 0e01 	mov.w	lr, #1
   14138:	fa0e fe02 	lsl.w	lr, lr, r2
    reg->PIN_CNF[pin_number] = cnf;
   1413c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   14140:	f8c8 e508 	str.w	lr, [r8, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   14144:	f04f 0e03 	mov.w	lr, #3
   14148:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1414c:	f8d3 e018 	ldr.w	lr, [r3, #24]
   14150:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   14154:	d010      	beq.n	14178 <uarte_0_init+0xc4>
			nrf_gpio_cfg_input(cfg->cts_pin,
   14156:	7f5a      	ldrb	r2, [r3, #29]
   14158:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   1415a:	f00e 021f 	and.w	r2, lr, #31
   1415e:	bf14      	ite	ne
   14160:	f04f 0803 	movne.w	r8, #3
   14164:	f04f 0800 	moveq.w	r8, #0
    reg->PIN_CNF[pin_number] = cnf;
   14168:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1416c:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   14170:	ea4f 0888 	mov.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   14174:	f849 8022 	str.w	r8, [r9, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   14178:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
   1417a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1417e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &data->uart_config);
   14182:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   14184:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
   14188:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.CTS = pselcts;
   1418a:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
   1418e:	f7ff fe83 	bl	13e98 <uarte_nrfx_configure>
	if (err) {
   14192:	4606      	mov	r6, r0
   14194:	2800      	cmp	r0, #0
   14196:	d143      	bne.n	14220 <uarte_0_init+0x16c>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   14198:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1419a:	0799      	lsls	r1, r3, #30
   1419c:	d519      	bpl.n	141d2 <uarte_0_init+0x11e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1419e:	f105 0012 	add.w	r0, r5, #18
   141a2:	f001 f975 	bl	15490 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   141a6:	4b21      	ldr	r3, [pc, #132]	; (1422c <uarte_0_init+0x178>)
   141a8:	4298      	cmp	r0, r3
   141aa:	d13c      	bne.n	14226 <uarte_0_init+0x172>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   141ac:	7ca8      	ldrb	r0, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   141ae:	00c3      	lsls	r3, r0, #3
   141b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   141b4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   141b8:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   141bc:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   141c0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   141c4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   141c8:	4a19      	ldr	r2, [pc, #100]	; (14230 <uarte_0_init+0x17c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   141ca:	2301      	movs	r3, #1
   141cc:	4083      	lsls	r3, r0
   141ce:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   141d2:	2308      	movs	r3, #8
   141d4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   141d8:	7a3b      	ldrb	r3, [r7, #8]
   141da:	b95b      	cbnz	r3, 141f4 <uarte_0_init+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   141dc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   141e0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   141e4:	f105 0311 	add.w	r3, r5, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   141e8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   141ec:	2301      	movs	r3, #1
   141ee:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   141f2:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   141f4:	687b      	ldr	r3, [r7, #4]
   141f6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   141f8:	bf5c      	itt	pl
   141fa:	f44f 7280 	movpl.w	r2, #256	; 0x100
   141fe:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14202:	06db      	lsls	r3, r3, #27
   14204:	bf44      	itt	mi
   14206:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1420a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1420e:	3510      	adds	r5, #16
    p_reg->TXD.MAXCNT = length;
   14210:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   14212:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   14216:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1421a:	2301      	movs	r3, #1
   1421c:	60a3      	str	r3, [r4, #8]
   1421e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   14220:	4630      	mov	r0, r6
   14222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   14226:	f06f 0604 	mvn.w	r6, #4
UART_NRF_UARTE_DEVICE(0);
   1422a:	e7f9      	b.n	14220 <uarte_0_init+0x16c>
   1422c:	0bad0000 	.word	0x0bad0000
   14230:	4001f000 	.word	0x4001f000

00014234 <random_byte_get>:
	__asm__ volatile(
   14234:	f04f 0320 	mov.w	r3, #32
   14238:	f3ef 8211 	mrs	r2, BASEPRI
   1423c:	f383 8812 	msr	BASEPRI_MAX, r3
   14240:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   14244:	4b09      	ldr	r3, [pc, #36]	; (1426c <random_byte_get+0x38>)
   14246:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1424a:	b161      	cbz	r1, 14266 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1424c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1424e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   14252:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   14256:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1425a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1425c:	f382 8811 	msr	BASEPRI, r2
   14260:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   14264:	4770      	bx	lr
	int retval = -EAGAIN;
   14266:	f06f 000a 	mvn.w	r0, #10
   1426a:	e7f7      	b.n	1425c <random_byte_get+0x28>
   1426c:	4000d000 	.word	0x4000d000

00014270 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   14270:	b5f0      	push	{r4, r5, r6, r7, lr}
   14272:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   14274:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   14276:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   14278:	f04f 0020 	mov.w	r0, #32
   1427c:	f3ef 8e11 	mrs	lr, BASEPRI
   14280:	f380 8812 	msr	BASEPRI_MAX, r0
   14284:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   14288:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1428a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1428e:	1ba4      	subs	r4, r4, r6
   14290:	403c      	ands	r4, r7
	if (available < len) {
   14292:	42a2      	cmp	r2, r4
		len = available;
   14294:	bf88      	it	hi
   14296:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   14298:	18b0      	adds	r0, r6, r2
   1429a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1429c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1429e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   142a0:	f38e 8811 	msr	BASEPRI, lr
   142a4:	f3bf 8f6f 	isb	sy
   142a8:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   142aa:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   142ac:	4290      	cmp	r0, r2
   142ae:	d119      	bne.n	142e4 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   142b0:	4566      	cmp	r6, ip
   142b2:	d10d      	bne.n	142d0 <rng_pool_get+0x60>
	__asm__ volatile(
   142b4:	f04f 0520 	mov.w	r5, #32
   142b8:	f3ef 8011 	mrs	r0, BASEPRI
   142bc:	f385 8812 	msr	BASEPRI_MAX, r5
   142c0:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   142c4:	781d      	ldrb	r5, [r3, #0]
   142c6:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   142c8:	f380 8811 	msr	BASEPRI, r0
   142cc:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   142d0:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   142d2:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   142d4:	b290      	uxth	r0, r2
	available = available - len;
   142d6:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   142d8:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   142da:	bf22      	ittt	cs
   142dc:	4b06      	ldrcs	r3, [pc, #24]	; (142f8 <rng_pool_get+0x88>)
   142de:	2201      	movcs	r2, #1
   142e0:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   142e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   142e4:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   142e8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   142ea:	f89e e005 	ldrb.w	lr, [lr, #5]
   142ee:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   142f2:	403d      	ands	r5, r7
   142f4:	e7da      	b.n	142ac <rng_pool_get+0x3c>
   142f6:	bf00      	nop
   142f8:	4000d000 	.word	0x4000d000

000142fc <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   142fc:	43db      	mvns	r3, r3
{
   142fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   14302:	f013 0501 	ands.w	r5, r3, #1
{
   14306:	460e      	mov	r6, r1
   14308:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1430a:	d004      	beq.n	14316 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1430c:	4821      	ldr	r0, [pc, #132]	; (14394 <entropy_nrf5_get_entropy_isr+0x98>)
   1430e:	f7ff ffaf 	bl	14270 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   14312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   14316:	b3a2      	cbz	r2, 14382 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   14318:	f04f 0320 	mov.w	r3, #32
   1431c:	f3ef 8811 	mrs	r8, BASEPRI
   14320:	f383 8812 	msr	BASEPRI_MAX, r3
   14324:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   14328:	200d      	movs	r0, #13
   1432a:	f7ed ff7b 	bl	2224 <arch_irq_is_enabled>
   1432e:	4607      	mov	r7, r0
		irq_disable(IRQN);
   14330:	200d      	movs	r0, #13
   14332:	f7ed ff63 	bl	21fc <arch_irq_disable>
	__asm__ volatile(
   14336:	f388 8811 	msr	BASEPRI, r8
   1433a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1433e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 14398 <entropy_nrf5_get_entropy_isr+0x9c>
   14342:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1439c <entropy_nrf5_get_entropy_isr+0xa0>
   14346:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1434a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1434e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   14352:	2301      	movs	r3, #1
   14354:	f8c8 3000 	str.w	r3, [r8]
   14358:	4625      	mov	r5, r4
   1435a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1435e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   14362:	b183      	cbz	r3, 14386 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   14364:	f7ff ff66 	bl	14234 <random_byte_get>
			if (byte < 0) {
   14368:	1e03      	subs	r3, r0, #0
   1436a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1436e:	dbf6      	blt.n	1435e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   14370:	3d01      	subs	r5, #1
   14372:	b2ad      	uxth	r5, r5
   14374:	5573      	strb	r3, [r6, r5]
		} while (len);
   14376:	2d00      	cmp	r5, #0
   14378:	d1f1      	bne.n	1435e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1437a:	b117      	cbz	r7, 14382 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1437c:	200d      	movs	r0, #13
   1437e:	f7ed ff2d 	bl	21dc <arch_irq_enable>
	return cnt;
   14382:	4620      	mov	r0, r4
   14384:	e7c5      	b.n	14312 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   14386:	f3bf 8f4f 	dsb	sy
				__WFE();
   1438a:	bf20      	wfe
				__SEV();
   1438c:	bf40      	sev
				__WFE();
   1438e:	bf20      	wfe
   14390:	e7e5      	b.n	1435e <entropy_nrf5_get_entropy_isr+0x62>
   14392:	bf00      	nop
   14394:	200025ec 	.word	0x200025ec
   14398:	4000d000 	.word	0x4000d000
   1439c:	e000e100 	.word	0xe000e100

000143a0 <entropy_nrf5_get_entropy>:
{
   143a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   143a4:	4f13      	ldr	r7, [pc, #76]	; (143f4 <entropy_nrf5_get_entropy+0x54>)
   143a6:	460d      	mov	r5, r1
   143a8:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   143aa:	f107 0845 	add.w	r8, r7, #69	; 0x45
   143ae:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   143b2:	b914      	cbnz	r4, 143ba <entropy_nrf5_get_entropy+0x1a>
}
   143b4:	4620      	mov	r0, r4
   143b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   143ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   143c2:	4638      	mov	r0, r7
   143c4:	f001 fe82 	bl	160cc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   143c8:	4622      	mov	r2, r4
   143ca:	4629      	mov	r1, r5
   143cc:	4640      	mov	r0, r8
   143ce:	f7ff ff4f 	bl	14270 <rng_pool_get>
   143d2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   143d4:	4638      	mov	r0, r7
   143d6:	f001 fe53 	bl	16080 <z_impl_k_sem_give>
		if (bytes == 0U) {
   143da:	b93e      	cbnz	r6, 143ec <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   143dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   143e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143e4:	4648      	mov	r0, r9
   143e6:	f001 fe71 	bl	160cc <z_impl_k_sem_take>
			continue;
   143ea:	e7e2      	b.n	143b2 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   143ec:	1ba4      	subs	r4, r4, r6
   143ee:	b2a4      	uxth	r4, r4
		buf += bytes;
   143f0:	4435      	add	r5, r6
   143f2:	e7de      	b.n	143b2 <entropy_nrf5_get_entropy+0x12>
   143f4:	200025bc 	.word	0x200025bc

000143f8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   143f8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   143fa:	4c19      	ldr	r4, [pc, #100]	; (14460 <entropy_nrf5_init+0x68>)
   143fc:	2201      	movs	r2, #1
   143fe:	4611      	mov	r1, r2
   14400:	4620      	mov	r0, r4
   14402:	f006 fa4d 	bl	1a8a0 <z_impl_k_sem_init>
   14406:	2201      	movs	r2, #1
   14408:	2100      	movs	r1, #0
   1440a:	f104 0018 	add.w	r0, r4, #24
   1440e:	f006 fa47 	bl	1a8a0 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   14412:	f240 4307 	movw	r3, #1031	; 0x407
   14416:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1441a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1441e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   14420:	230c      	movs	r3, #12
   14422:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   14426:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   14428:	4b0e      	ldr	r3, [pc, #56]	; (14464 <entropy_nrf5_init+0x6c>)
   1442a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1442e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   14432:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   14436:	f042 0201 	orr.w	r2, r2, #1
   1443a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1443e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   14440:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   14444:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   14448:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1444c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1444e:	6019      	str	r1, [r3, #0]
   14450:	200d      	movs	r0, #13
   14452:	f7ed fef5 	bl	2240 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   14456:	200d      	movs	r0, #13
   14458:	f7ed fec0 	bl	21dc <arch_irq_enable>

	return 0;
}
   1445c:	4628      	mov	r0, r5
   1445e:	bd38      	pop	{r3, r4, r5, pc}
   14460:	200025bc 	.word	0x200025bc
   14464:	4000d000 	.word	0x4000d000

00014468 <isr>:
{
   14468:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1446a:	f7ff fee3 	bl	14234 <random_byte_get>
	if (byte < 0) {
   1446e:	2800      	cmp	r0, #0
   14470:	db20      	blt.n	144b4 <isr+0x4c>
	uint8_t last  = rngp->last;
   14472:	4b17      	ldr	r3, [pc, #92]	; (144d0 <isr+0x68>)
   14474:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   14478:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1447c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   14480:	1a51      	subs	r1, r2, r1
   14482:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   14486:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   14488:	d10d      	bne.n	144a6 <isr+0x3e>
	uint8_t last  = rngp->last;
   1448a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1448e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   14492:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   14496:	1a51      	subs	r1, r2, r1
   14498:	ea34 0101 	bics.w	r1, r4, r1
   1449c:	d10b      	bne.n	144b6 <isr+0x4e>
   1449e:	4b0d      	ldr	r3, [pc, #52]	; (144d4 <isr+0x6c>)
   144a0:	2201      	movs	r2, #1
   144a2:	605a      	str	r2, [r3, #4]
}
   144a4:	e00e      	b.n	144c4 <isr+0x5c>
	rngp->buffer[last] = byte;
   144a6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   144a8:	3201      	adds	r2, #1
   144aa:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   144ac:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   144b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   144b4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   144b6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   144b8:	3201      	adds	r2, #1
   144ba:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   144bc:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   144c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   144c4:	4804      	ldr	r0, [pc, #16]	; (144d8 <isr+0x70>)
}
   144c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   144ca:	f001 bdd9 	b.w	16080 <z_impl_k_sem_give>
   144ce:	bf00      	nop
   144d0:	200025bc 	.word	0x200025bc
   144d4:	4000d000 	.word	0x4000d000
   144d8:	200025d4 	.word	0x200025d4

000144dc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   144dc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   144de:	2301      	movs	r3, #1
   144e0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   144e2:	4a11      	ldr	r2, [pc, #68]	; (14528 <compare_int_lock+0x4c>)
   144e4:	f3bf 8f5b 	dmb	ish
   144e8:	43dc      	mvns	r4, r3
   144ea:	e852 1f00 	ldrex	r1, [r2]
   144ee:	ea01 0c04 	and.w	ip, r1, r4
   144f2:	e842 ce00 	strex	lr, ip, [r2]
   144f6:	f1be 0f00 	cmp.w	lr, #0
   144fa:	d1f6      	bne.n	144ea <compare_int_lock+0xe>
   144fc:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14500:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   14504:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   14508:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1450c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   14510:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   14514:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14518:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1451c:	420b      	tst	r3, r1
}
   1451e:	bf14      	ite	ne
   14520:	2001      	movne	r0, #1
   14522:	2000      	moveq	r0, #0
   14524:	bd10      	pop	{r4, pc}
   14526:	bf00      	nop
   14528:	20002614 	.word	0x20002614

0001452c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1452c:	4919      	ldr	r1, [pc, #100]	; (14594 <sys_clock_timeout_handler+0x68>)
{
   1452e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14530:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   14532:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14536:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   14538:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1453c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   14540:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   14542:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   14546:	d222      	bcs.n	1458e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   14548:	4b13      	ldr	r3, [pc, #76]	; (14598 <sys_clock_timeout_handler+0x6c>)
   1454a:	681b      	ldr	r3, [r3, #0]
   1454c:	0a1a      	lsrs	r2, r3, #8
   1454e:	061b      	lsls	r3, r3, #24
   14550:	195e      	adds	r6, r3, r5
   14552:	4b12      	ldr	r3, [pc, #72]	; (1459c <sys_clock_timeout_handler+0x70>)
   14554:	f142 0700 	adc.w	r7, r2, #0
   14558:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   1455c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1455e:	f002 fb9f 	bl	16ca0 <sys_clock_announce>
    return p_reg->CC[ch];
   14562:	00a3      	lsls	r3, r4, #2
   14564:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14568:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1456c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   14570:	42aa      	cmp	r2, r5
   14572:	d10b      	bne.n	1458c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   14574:	b91e      	cbnz	r6, 1457e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   14576:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1457a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1457e:	4b08      	ldr	r3, [pc, #32]	; (145a0 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14580:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   14584:	fa00 f404 	lsl.w	r4, r0, r4
   14588:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   1458e:	2600      	movs	r6, #0
   14590:	e7e5      	b.n	1455e <sys_clock_timeout_handler+0x32>
   14592:	bf00      	nop
   14594:	20001208 	.word	0x20001208
   14598:	20002618 	.word	0x20002618
   1459c:	200011f0 	.word	0x200011f0
   145a0:	40011000 	.word	0x40011000

000145a4 <compare_int_unlock>:
	if (key) {
   145a4:	b319      	cbz	r1, 145ee <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   145a6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   145aa:	2301      	movs	r3, #1
   145ac:	4a10      	ldr	r2, [pc, #64]	; (145f0 <compare_int_unlock+0x4c>)
   145ae:	4083      	lsls	r3, r0
   145b0:	e852 1f00 	ldrex	r1, [r2]
   145b4:	4319      	orrs	r1, r3
   145b6:	e842 1c00 	strex	ip, r1, [r2]
   145ba:	f1bc 0f00 	cmp.w	ip, #0
   145be:	d1f7      	bne.n	145b0 <compare_int_unlock+0xc>
   145c0:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   145c4:	4a0b      	ldr	r2, [pc, #44]	; (145f4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   145c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   145ca:	4083      	lsls	r3, r0
   145cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   145d0:	4b09      	ldr	r3, [pc, #36]	; (145f8 <compare_int_unlock+0x54>)
   145d2:	f3bf 8f5b 	dmb	ish
   145d6:	681b      	ldr	r3, [r3, #0]
   145d8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   145dc:	fa23 f000 	lsr.w	r0, r3, r0
   145e0:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   145e2:	bf42      	ittt	mi
   145e4:	4b05      	ldrmi	r3, [pc, #20]	; (145fc <compare_int_unlock+0x58>)
   145e6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   145ea:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   145ee:	4770      	bx	lr
   145f0:	20002614 	.word	0x20002614
   145f4:	40011000 	.word	0x40011000
   145f8:	20002610 	.word	0x20002610
   145fc:	e000e100 	.word	0xe000e100

00014600 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   14600:	4b0d      	ldr	r3, [pc, #52]	; (14638 <z_nrf_rtc_timer_read+0x38>)
   14602:	6818      	ldr	r0, [r3, #0]
   14604:	0a01      	lsrs	r1, r0, #8
   14606:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   14608:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1460c:	4b0b      	ldr	r3, [pc, #44]	; (1463c <z_nrf_rtc_timer_read+0x3c>)
   1460e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   14612:	1818      	adds	r0, r3, r0
   14614:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   14618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1461c:	d20a      	bcs.n	14634 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1461e:	4b08      	ldr	r3, [pc, #32]	; (14640 <z_nrf_rtc_timer_read+0x40>)
   14620:	e9d3 2300 	ldrd	r2, r3, [r3]
   14624:	4290      	cmp	r0, r2
   14626:	eb71 0303 	sbcs.w	r3, r1, r3
   1462a:	d203      	bcs.n	14634 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1462c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   14630:	f141 0100 	adc.w	r1, r1, #0
}
   14634:	4770      	bx	lr
   14636:	bf00      	nop
   14638:	20002618 	.word	0x20002618
   1463c:	40011000 	.word	0x40011000
   14640:	200011f0 	.word	0x200011f0

00014644 <compare_set>:
{
   14644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14648:	b085      	sub	sp, #20
   1464a:	4616      	mov	r6, r2
   1464c:	4698      	mov	r8, r3
   1464e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   14650:	f7ff ff44 	bl	144dc <compare_int_lock>
   14654:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   14656:	f7ff ffd3 	bl	14600 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1465a:	42b0      	cmp	r0, r6
   1465c:	eb71 0308 	sbcs.w	r3, r1, r8
   14660:	d278      	bcs.n	14754 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   14662:	4b46      	ldr	r3, [pc, #280]	; (1477c <compare_set+0x138>)
   14664:	1a30      	subs	r0, r6, r0
   14666:	eb68 0101 	sbc.w	r1, r8, r1
   1466a:	4298      	cmp	r0, r3
   1466c:	f171 0300 	sbcs.w	r3, r1, #0
   14670:	f080 8081 	bcs.w	14776 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   14674:	4b42      	ldr	r3, [pc, #264]	; (14780 <compare_set+0x13c>)
   14676:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1467a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   1467e:	45d8      	cmp	r8, fp
   14680:	bf08      	it	eq
   14682:	4556      	cmpeq	r6, sl
   14684:	d051      	beq.n	1472a <compare_set+0xe6>
   14686:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1468a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1468e:	f105 0750 	add.w	r7, r5, #80	; 0x50
   14692:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   14696:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   14698:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1469c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   146a0:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   146a2:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   146a6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   146aa:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   146ac:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   146b0:	4b34      	ldr	r3, [pc, #208]	; (14784 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   146b2:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   146b6:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   146b8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   146bc:	1a40      	subs	r0, r0, r1
   146be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   146c2:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   146c6:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   146c8:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   146cc:	d107      	bne.n	146de <compare_set+0x9a>
   146ce:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   146d2:	2013      	movs	r0, #19
   146d4:	f006 fb08 	bl	1ace8 <z_impl_k_busy_wait>
   146d8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   146dc:	4b29      	ldr	r3, [pc, #164]	; (14784 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   146de:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   146e2:	eba4 000c 	sub.w	r0, r4, ip
   146e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   146ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   146ee:	bf88      	it	hi
   146f0:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   146f2:	2000      	movs	r0, #0
   146f4:	6038      	str	r0, [r7, #0]
   146f6:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   146f8:	9801      	ldr	r0, [sp, #4]
   146fa:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   146fe:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   14702:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   14706:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1470a:	4281      	cmp	r1, r0
   1470c:	d006      	beq.n	1471c <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   1470e:	1a20      	subs	r0, r4, r0
   14710:	3802      	subs	r0, #2
   14712:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   14716:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1471a:	d819      	bhi.n	14750 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   1471c:	1aa4      	subs	r4, r4, r2
   1471e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   14722:	eb14 0a06 	adds.w	sl, r4, r6
   14726:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1472a:	4915      	ldr	r1, [pc, #84]	; (14780 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   1472c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   1472e:	012b      	lsls	r3, r5, #4
   14730:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   14734:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   14738:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1473a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1473c:	6053      	str	r3, [r2, #4]
	return ret;
   1473e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   14740:	4628      	mov	r0, r5
   14742:	9900      	ldr	r1, [sp, #0]
   14744:	f7ff ff2e 	bl	145a4 <compare_int_unlock>
}
   14748:	4620      	mov	r0, r4
   1474a:	b005      	add	sp, #20
   1474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14750:	4620      	mov	r0, r4
   14752:	e7b1      	b.n	146b8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   14754:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14756:	4a0c      	ldr	r2, [pc, #48]	; (14788 <compare_set+0x144>)
   14758:	f3bf 8f5b 	dmb	ish
   1475c:	40ab      	lsls	r3, r5
   1475e:	e852 1f00 	ldrex	r1, [r2]
   14762:	4319      	orrs	r1, r3
   14764:	e842 1000 	strex	r0, r1, [r2]
   14768:	2800      	cmp	r0, #0
   1476a:	d1f8      	bne.n	1475e <compare_set+0x11a>
   1476c:	f3bf 8f5b 	dmb	ish
   14770:	46b2      	mov	sl, r6
   14772:	46c3      	mov	fp, r8
   14774:	e7d9      	b.n	1472a <compare_set+0xe6>
			return -EINVAL;
   14776:	f06f 0415 	mvn.w	r4, #21
   1477a:	e7e1      	b.n	14740 <compare_set+0xfc>
   1477c:	01000001 	.word	0x01000001
   14780:	200011f8 	.word	0x200011f8
   14784:	40011000 	.word	0x40011000
   14788:	20002610 	.word	0x20002610

0001478c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1478c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1478e:	4b19      	ldr	r3, [pc, #100]	; (147f4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   14790:	4d19      	ldr	r5, [pc, #100]	; (147f8 <sys_clock_driver_init+0x6c>)
   14792:	2400      	movs	r4, #0
   14794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1479c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   147a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   147a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   147a8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   147ac:	4b13      	ldr	r3, [pc, #76]	; (147fc <sys_clock_driver_init+0x70>)
   147ae:	2602      	movs	r6, #2
   147b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   147b4:	2101      	movs	r1, #1
   147b6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   147ba:	2011      	movs	r0, #17
   147bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   147c0:	4622      	mov	r2, r4
   147c2:	f7ed fd3d 	bl	2240 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   147c6:	2011      	movs	r0, #17
   147c8:	f7ed fd08 	bl	21dc <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   147cc:	4a0c      	ldr	r2, [pc, #48]	; (14800 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   147ce:	2301      	movs	r3, #1
   147d0:	60ab      	str	r3, [r5, #8]
   147d2:	602b      	str	r3, [r5, #0]
   147d4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   147d6:	4b0b      	ldr	r3, [pc, #44]	; (14804 <sys_clock_driver_init+0x78>)
   147d8:	4a0b      	ldr	r2, [pc, #44]	; (14808 <sys_clock_driver_init+0x7c>)
   147da:	9300      	str	r3, [sp, #0]
   147dc:	9401      	str	r4, [sp, #4]
   147de:	2300      	movs	r3, #0
   147e0:	4620      	mov	r0, r4
   147e2:	f7ff ff2f 	bl	14644 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   147e6:	4630      	mov	r0, r6
   147e8:	f7fe ffd8 	bl	1379c <z_nrf_clock_control_lf_on>

	return 0;
}
   147ec:	4620      	mov	r0, r4
   147ee:	b002      	add	sp, #8
   147f0:	bd70      	pop	{r4, r5, r6, pc}
   147f2:	bf00      	nop
   147f4:	200011f8 	.word	0x200011f8
   147f8:	40011000 	.word	0x40011000
   147fc:	e000e100 	.word	0xe000e100
   14800:	20002614 	.word	0x20002614
   14804:	0001452d 	.word	0x0001452d
   14808:	007fffff 	.word	0x007fffff

0001480c <rtc_nrf_isr>:
{
   1480c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   14810:	4c35      	ldr	r4, [pc, #212]	; (148e8 <rtc_nrf_isr+0xdc>)
   14812:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   14816:	079a      	lsls	r2, r3, #30
   14818:	d50b      	bpl.n	14832 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1481a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1481e:	b143      	cbz	r3, 14832 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   14820:	4a32      	ldr	r2, [pc, #200]	; (148ec <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   14822:	2300      	movs	r3, #0
   14824:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   14828:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1482c:	6813      	ldr	r3, [r2, #0]
   1482e:	3301      	adds	r3, #1
   14830:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   14832:	f04f 0320 	mov.w	r3, #32
   14836:	f3ef 8211 	mrs	r2, BASEPRI
   1483a:	f383 8812 	msr	BASEPRI_MAX, r3
   1483e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   14842:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   14846:	03db      	lsls	r3, r3, #15
   14848:	d512      	bpl.n	14870 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1484a:	f3bf 8f5b 	dmb	ish
   1484e:	4b28      	ldr	r3, [pc, #160]	; (148f0 <rtc_nrf_isr+0xe4>)
   14850:	e853 1f00 	ldrex	r1, [r3]
   14854:	f021 0001 	bic.w	r0, r1, #1
   14858:	e843 0600 	strex	r6, r0, [r3]
   1485c:	2e00      	cmp	r6, #0
   1485e:	d1f7      	bne.n	14850 <rtc_nrf_isr+0x44>
   14860:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   14864:	2900      	cmp	r1, #0
   14866:	d136      	bne.n	148d6 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14868:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   1486c:	2b00      	cmp	r3, #0
   1486e:	d132      	bne.n	148d6 <rtc_nrf_isr+0xca>
{
   14870:	2300      	movs	r3, #0
	__asm__ volatile(
   14872:	f382 8811 	msr	BASEPRI, r2
   14876:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   1487a:	b34b      	cbz	r3, 148d0 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   1487c:	f7ff fec0 	bl	14600 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   14880:	f04f 0320 	mov.w	r3, #32
   14884:	f3ef 8c11 	mrs	ip, BASEPRI
   14888:	f383 8812 	msr	BASEPRI_MAX, r3
   1488c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   14890:	4b18      	ldr	r3, [pc, #96]	; (148f4 <rtc_nrf_isr+0xe8>)
   14892:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   14896:	42b0      	cmp	r0, r6
   14898:	eb71 0207 	sbcs.w	r2, r1, r7
   1489c:	f04f 0200 	mov.w	r2, #0
   148a0:	d320      	bcc.n	148e4 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   148a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   148a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   148aa:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   148ae:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   148b2:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   148b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   148b8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   148bc:	f38c 8811 	msr	BASEPRI, ip
   148c0:	f3bf 8f6f 	isb	sy
		if (handler) {
   148c4:	b121      	cbz	r1, 148d0 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   148c6:	9500      	str	r5, [sp, #0]
   148c8:	4632      	mov	r2, r6
   148ca:	463b      	mov	r3, r7
   148cc:	2000      	movs	r0, #0
   148ce:	4788      	blx	r1
}
   148d0:	b003      	add	sp, #12
   148d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   148d6:	2300      	movs	r3, #0
   148d8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   148dc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   148e0:	2301      	movs	r3, #1
}
   148e2:	e7c6      	b.n	14872 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   148e4:	4611      	mov	r1, r2
   148e6:	e7e9      	b.n	148bc <rtc_nrf_isr+0xb0>
   148e8:	40011000 	.word	0x40011000
   148ec:	20002618 	.word	0x20002618
   148f0:	20002610 	.word	0x20002610
   148f4:	200011f8 	.word	0x200011f8

000148f8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   148f8:	1c43      	adds	r3, r0, #1
{
   148fa:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   148fc:	d021      	beq.n	14942 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   148fe:	2801      	cmp	r0, #1
   14900:	dd21      	ble.n	14946 <sys_clock_set_timeout+0x4e>
   14902:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14906:	da20      	bge.n	1494a <sys_clock_set_timeout+0x52>
   14908:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1490a:	f7ff fe79 	bl	14600 <z_nrf_rtc_timer_read>
   1490e:	4b10      	ldr	r3, [pc, #64]	; (14950 <sys_clock_set_timeout+0x58>)
   14910:	e9d3 1300 	ldrd	r1, r3, [r3]
   14914:	1a40      	subs	r0, r0, r1
		ticks = 0;
   14916:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1491a:	bf28      	it	cs
   1491c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1491e:	3001      	adds	r0, #1
   14920:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   14922:	480c      	ldr	r0, [pc, #48]	; (14954 <sys_clock_set_timeout+0x5c>)
   14924:	4282      	cmp	r2, r0
   14926:	bf28      	it	cs
   14928:	4602      	movcs	r2, r0
   1492a:	1852      	adds	r2, r2, r1
   1492c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   14930:	4909      	ldr	r1, [pc, #36]	; (14958 <sys_clock_set_timeout+0x60>)
   14932:	9001      	str	r0, [sp, #4]
   14934:	9100      	str	r1, [sp, #0]
   14936:	f143 0300 	adc.w	r3, r3, #0
   1493a:	f7ff fe83 	bl	14644 <compare_set>
}
   1493e:	b002      	add	sp, #8
   14940:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   14942:	4804      	ldr	r0, [pc, #16]	; (14954 <sys_clock_set_timeout+0x5c>)
   14944:	e7e0      	b.n	14908 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   14946:	2400      	movs	r4, #0
   14948:	e7df      	b.n	1490a <sys_clock_set_timeout+0x12>
   1494a:	4c02      	ldr	r4, [pc, #8]	; (14954 <sys_clock_set_timeout+0x5c>)
   1494c:	e7dd      	b.n	1490a <sys_clock_set_timeout+0x12>
   1494e:	bf00      	nop
   14950:	20001208 	.word	0x20001208
   14954:	007fffff 	.word	0x007fffff
   14958:	0001452d 	.word	0x0001452d

0001495c <sys_clock_elapsed>:
{
   1495c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1495e:	f7ff fe4f 	bl	14600 <z_nrf_rtc_timer_read>
   14962:	4b02      	ldr	r3, [pc, #8]	; (1496c <sys_clock_elapsed+0x10>)
   14964:	681b      	ldr	r3, [r3, #0]
}
   14966:	1ac0      	subs	r0, r0, r3
   14968:	bd08      	pop	{r3, pc}
   1496a:	bf00      	nop
   1496c:	20001208 	.word	0x20001208

00014970 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14970:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   14974:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14978:	2a06      	cmp	r2, #6
   1497a:	d109      	bne.n	14990 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1497c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   14980:	f3c3 1303 	ubfx	r3, r3, #4, #4
   14984:	3b03      	subs	r3, #3
   14986:	2b04      	cmp	r3, #4
   14988:	d802      	bhi.n	14990 <nrf52_errata_16+0x20>
   1498a:	4a02      	ldr	r2, [pc, #8]	; (14994 <nrf52_errata_16+0x24>)
   1498c:	5cd0      	ldrb	r0, [r2, r3]
   1498e:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   14990:	2000      	movs	r0, #0
    #endif
}
   14992:	4770      	bx	lr
   14994:	0001caad 	.word	0x0001caad

00014998 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   14998:	4a02      	ldr	r2, [pc, #8]	; (149a4 <nvmc_wait+0xc>)
   1499a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1499e:	2b00      	cmp	r3, #0
   149a0:	d0fb      	beq.n	1499a <nvmc_wait+0x2>
}
   149a2:	4770      	bx	lr
   149a4:	4001e000 	.word	0x4001e000

000149a8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   149a8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   149aa:	f005 fd26 	bl	1a3fa <nrf52_errata_108>
   149ae:	b140      	cbz	r0, 149c2 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   149b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   149b4:	4a90      	ldr	r2, [pc, #576]	; (14bf8 <SystemInit+0x250>)
   149b6:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   149ba:	f3c3 2304 	ubfx	r3, r3, #8, #5
   149be:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   149c2:	f7ff ffd5 	bl	14970 <nrf52_errata_16>
   149c6:	b110      	cbz	r0, 149ce <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   149c8:	4b8c      	ldr	r3, [pc, #560]	; (14bfc <SystemInit+0x254>)
   149ca:	4a8d      	ldr	r2, [pc, #564]	; (14c00 <SystemInit+0x258>)
   149cc:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   149ce:	f005 fd14 	bl	1a3fa <nrf52_errata_108>
   149d2:	b148      	cbz	r0, 149e8 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   149d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   149d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   149dc:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   149e0:	f3c3 3342 	ubfx	r3, r3, #13, #3
   149e4:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   149e8:	f7ff ffc2 	bl	14970 <nrf52_errata_16>
   149ec:	b130      	cbz	r0, 149fc <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   149ee:	4a85      	ldr	r2, [pc, #532]	; (14c04 <SystemInit+0x25c>)
   149f0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   149f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   149f8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   149fc:	f005 fcfd 	bl	1a3fa <nrf52_errata_108>
   14a00:	b140      	cbz	r0, 14a14 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   14a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14a06:	2200      	movs	r2, #0
   14a08:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   14a0c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   14a10:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   14a14:	f7ff ffac 	bl	14970 <nrf52_errata_16>
   14a18:	b120      	cbz	r0, 14a24 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   14a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14a1e:	2203      	movs	r2, #3
   14a20:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   14a24:	f7ff ffa4 	bl	14970 <nrf52_errata_16>
   14a28:	b160      	cbz	r0, 14a44 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   14a2a:	4b77      	ldr	r3, [pc, #476]	; (14c08 <SystemInit+0x260>)
   14a2c:	2205      	movs	r2, #5
   14a2e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   14a32:	2201      	movs	r2, #1
   14a34:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   14a38:	2200      	movs	r2, #0
   14a3a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   14a3e:	223f      	movs	r2, #63	; 0x3f
   14a40:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   14a44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14a48:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   14a4c:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14a4e:	bf09      	itett	eq
   14a50:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   14a54:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   14a58:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   14a5c:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   14a60:	bf08      	it	eq
   14a62:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14a66:	2a06      	cmp	r2, #6
   14a68:	d14d      	bne.n	14b06 <SystemInit+0x15e>
            {
                switch(var2)
   14a6a:	3b03      	subs	r3, #3
   14a6c:	2b04      	cmp	r3, #4
   14a6e:	d803      	bhi.n	14a78 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   14a70:	4a66      	ldr	r2, [pc, #408]	; (14c0c <SystemInit+0x264>)
   14a72:	5cd3      	ldrb	r3, [r2, r3]
   14a74:	2b00      	cmp	r3, #0
   14a76:	d046      	beq.n	14b06 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   14a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14a7c:	4b64      	ldr	r3, [pc, #400]	; (14c10 <SystemInit+0x268>)
   14a7e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   14a82:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   14a86:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   14a8a:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   14a8e:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   14a92:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   14a96:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   14a9a:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   14a9e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   14aa2:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   14aa6:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   14aaa:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   14aae:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   14ab2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   14ab6:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   14aba:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   14abe:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   14ac2:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   14ac6:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   14aca:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   14ace:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   14ad2:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   14ad6:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   14ada:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   14ade:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   14ae2:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   14ae6:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   14aea:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   14aee:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   14af2:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   14af6:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   14afa:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   14afe:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   14b02:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   14b06:	f005 fc78 	bl	1a3fa <nrf52_errata_108>
   14b0a:	b148      	cbz	r0, 14b20 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   14b0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   14b14:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   14b18:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   14b1c:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   14b20:	f005 fc6b 	bl	1a3fa <nrf52_errata_108>
   14b24:	b148      	cbz	r0, 14b3a <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   14b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14b2a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   14b2e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   14b30:	bf44      	itt	mi
   14b32:	f06f 0201 	mvnmi.w	r2, #1
   14b36:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14b3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14b3e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   14b42:	2a06      	cmp	r2, #6
   14b44:	d126      	bne.n	14b94 <SystemInit+0x1ec>
            {
                switch(var2)
   14b46:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   14b4a:	3b03      	subs	r3, #3
   14b4c:	2b04      	cmp	r3, #4
   14b4e:	d802      	bhi.n	14b56 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   14b50:	4a30      	ldr	r2, [pc, #192]	; (14c14 <SystemInit+0x26c>)
   14b52:	5cd3      	ldrb	r3, [r2, r3]
   14b54:	b163      	cbz	r3, 14b70 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   14b56:	4a30      	ldr	r2, [pc, #192]	; (14c18 <SystemInit+0x270>)
   14b58:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   14b5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   14b60:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   14b64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   14b68:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   14b6c:	2b06      	cmp	r3, #6
   14b6e:	d111      	bne.n	14b94 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   14b70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14b74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   14b78:	3b03      	subs	r3, #3
   14b7a:	2b04      	cmp	r3, #4
   14b7c:	d802      	bhi.n	14b84 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   14b7e:	4a27      	ldr	r2, [pc, #156]	; (14c1c <SystemInit+0x274>)
   14b80:	5cd3      	ldrb	r3, [r2, r3]
   14b82:	b13b      	cbz	r3, 14b94 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   14b84:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14b88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   14b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14b90:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   14b94:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   14b98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   14b9c:	2a00      	cmp	r2, #0
   14b9e:	db03      	blt.n	14ba8 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   14ba0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   14ba4:	2b00      	cmp	r3, #0
   14ba6:	da22      	bge.n	14bee <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   14ba8:	491d      	ldr	r1, [pc, #116]	; (14c20 <SystemInit+0x278>)
   14baa:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   14bac:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   14bb0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   14bb4:	2415      	movs	r4, #21
    nvmc_wait();
   14bb6:	f7ff feef 	bl	14998 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   14bba:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   14bbe:	f7ff feeb 	bl	14998 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   14bc2:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   14bc6:	f7ff fee7 	bl	14998 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   14bca:	2300      	movs	r3, #0
   14bcc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   14bd0:	f7ff fee2 	bl	14998 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   14bd4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14bd8:	490a      	ldr	r1, [pc, #40]	; (14c04 <SystemInit+0x25c>)
   14bda:	4b12      	ldr	r3, [pc, #72]	; (14c24 <SystemInit+0x27c>)
   14bdc:	68ca      	ldr	r2, [r1, #12]
   14bde:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14be2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14be4:	60cb      	str	r3, [r1, #12]
   14be6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14bea:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14bec:	e7fd      	b.n	14bea <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   14bee:	4b0e      	ldr	r3, [pc, #56]	; (14c28 <SystemInit+0x280>)
   14bf0:	4a0e      	ldr	r2, [pc, #56]	; (14c2c <SystemInit+0x284>)
   14bf2:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   14bf4:	bd10      	pop	{r4, pc}
   14bf6:	bf00      	nop
   14bf8:	40013000 	.word	0x40013000
   14bfc:	4007c000 	.word	0x4007c000
   14c00:	baadf00d 	.word	0xbaadf00d
   14c04:	e000ed00 	.word	0xe000ed00
   14c08:	40005000 	.word	0x40005000
   14c0c:	0001ca9e 	.word	0x0001ca9e
   14c10:	4000c000 	.word	0x4000c000
   14c14:	0001caa3 	.word	0x0001caa3
   14c18:	40001000 	.word	0x40001000
   14c1c:	0001caa8 	.word	0x0001caa8
   14c20:	4001e000 	.word	0x4001e000
   14c24:	05fa0004 	.word	0x05fa0004
   14c28:	20000714 	.word	0x20000714
   14c2c:	03d09000 	.word	0x03d09000

00014c30 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   14c30:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   14c32:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   14c34:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   14c36:	fab2 f382 	clz	r3, r2
   14c3a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   14c3e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   14c40:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   14c42:	d014      	beq.n	14c6e <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14c44:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   14c48:	fa05 f303 	lsl.w	r3, r5, r3
   14c4c:	ea22 0303 	bic.w	r3, r2, r3
   14c50:	e850 6f00 	ldrex	r6, [r0]
   14c54:	4296      	cmp	r6, r2
   14c56:	d104      	bne.n	14c62 <nrfx_flag32_alloc+0x32>
   14c58:	e840 3c00 	strex	ip, r3, [r0]
   14c5c:	f1bc 0f00 	cmp.w	ip, #0
   14c60:	d1f6      	bne.n	14c50 <nrfx_flag32_alloc+0x20>
   14c62:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   14c66:	d1e5      	bne.n	14c34 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   14c68:	4802      	ldr	r0, [pc, #8]	; (14c74 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   14c6a:	700c      	strb	r4, [r1, #0]
}
   14c6c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   14c6e:	4802      	ldr	r0, [pc, #8]	; (14c78 <nrfx_flag32_alloc+0x48>)
   14c70:	e7fc      	b.n	14c6c <nrfx_flag32_alloc+0x3c>
   14c72:	bf00      	nop
   14c74:	0bad0000 	.word	0x0bad0000
   14c78:	0bad0002 	.word	0x0bad0002

00014c7c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   14c7c:	6803      	ldr	r3, [r0, #0]
   14c7e:	40cb      	lsrs	r3, r1
   14c80:	07db      	lsls	r3, r3, #31
{
   14c82:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   14c84:	d415      	bmi.n	14cb2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   14c86:	2301      	movs	r3, #1
   14c88:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   14c8c:	6803      	ldr	r3, [r0, #0]
   14c8e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   14c92:	ea41 0203 	orr.w	r2, r1, r3
   14c96:	e850 4f00 	ldrex	r4, [r0]
   14c9a:	429c      	cmp	r4, r3
   14c9c:	d104      	bne.n	14ca8 <nrfx_flag32_free+0x2c>
   14c9e:	e840 2c00 	strex	ip, r2, [r0]
   14ca2:	f1bc 0f00 	cmp.w	ip, #0
   14ca6:	d1f6      	bne.n	14c96 <nrfx_flag32_free+0x1a>
   14ca8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   14cac:	d1ee      	bne.n	14c8c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   14cae:	4802      	ldr	r0, [pc, #8]	; (14cb8 <nrfx_flag32_free+0x3c>)
}
   14cb0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   14cb2:	4802      	ldr	r0, [pc, #8]	; (14cbc <nrfx_flag32_free+0x40>)
   14cb4:	e7fc      	b.n	14cb0 <nrfx_flag32_free+0x34>
   14cb6:	bf00      	nop
   14cb8:	0bad0000 	.word	0x0bad0000
   14cbc:	0bad0004 	.word	0x0bad0004

00014cc0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   14cc0:	4b04      	ldr	r3, [pc, #16]	; (14cd4 <nrfx_clock_init+0x14>)
   14cc2:	791a      	ldrb	r2, [r3, #4]
   14cc4:	b922      	cbnz	r2, 14cd0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   14cc6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   14cc8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   14cca:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   14ccc:	4802      	ldr	r0, [pc, #8]	; (14cd8 <nrfx_clock_init+0x18>)
   14cce:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   14cd0:	4802      	ldr	r0, [pc, #8]	; (14cdc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   14cd2:	4770      	bx	lr
   14cd4:	2000261c 	.word	0x2000261c
   14cd8:	0bad0000 	.word	0x0bad0000
   14cdc:	0bad000c 	.word	0x0bad000c

00014ce0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   14ce0:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   14ce2:	b110      	cbz	r0, 14cea <nrfx_clock_start+0xa>
   14ce4:	2801      	cmp	r0, #1
   14ce6:	d034      	beq.n	14d52 <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   14ce8:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14cee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14cf2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   14cf6:	03c9      	lsls	r1, r1, #15
   14cf8:	d529      	bpl.n	14d4e <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   14cfa:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   14cfe:	2a01      	cmp	r2, #1
   14d00:	d125      	bne.n	14d4e <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14d02:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14d0a:	2200      	movs	r2, #0
   14d0c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   14d10:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   14d14:	2202      	movs	r2, #2
   14d16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   14d1a:	4a13      	ldr	r2, [pc, #76]	; (14d68 <nrfx_clock_start+0x88>)
   14d1c:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   14d20:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   14d24:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   14d28:	4b10      	ldr	r3, [pc, #64]	; (14d6c <nrfx_clock_start+0x8c>)
   14d2a:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   14d2c:	f044 0101 	orr.w	r1, r4, #1
   14d30:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   14d32:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   14d34:	6859      	ldr	r1, [r3, #4]
   14d36:	1b49      	subs	r1, r1, r5
   14d38:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   14d3c:	d3fa      	bcc.n	14d34 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
   14d3e:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   14d44:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   14d48:	2201      	movs	r2, #1
   14d4a:	609a      	str	r2, [r3, #8]
}
   14d4c:	e7cc      	b.n	14ce8 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14d4e:	2200      	movs	r2, #0
   14d50:	e7d7      	b.n	14d02 <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14d56:	2200      	movs	r2, #0
   14d58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14d5c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   14d60:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d64:	6018      	str	r0, [r3, #0]
}
   14d66:	e7bf      	b.n	14ce8 <nrfx_clock_start+0x8>
   14d68:	e000ed00 	.word	0xe000ed00
   14d6c:	e0001000 	.word	0xe0001000

00014d70 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   14d70:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   14d72:	b110      	cbz	r0, 14d7a <nrfx_clock_stop+0xa>
   14d74:	2801      	cmp	r0, #1
   14d76:	d017      	beq.n	14da8 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   14d78:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   14d7a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   14d7e:	2302      	movs	r3, #2
   14d80:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14d84:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   14d88:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14d8c:	2301      	movs	r3, #1
   14d8e:	60e3      	str	r3, [r4, #12]
   14d90:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14d94:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   14d98:	03db      	lsls	r3, r3, #15
   14d9a:	d5ed      	bpl.n	14d78 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   14d9c:	2001      	movs	r0, #1
   14d9e:	f005 fb3b 	bl	1a418 <nrfx_busy_wait>
   14da2:	3d01      	subs	r5, #1
   14da4:	d1f6      	bne.n	14d94 <nrfx_clock_stop+0x24>
   14da6:	e7e7      	b.n	14d78 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   14da8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14dac:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   14dae:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14db2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   14db6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14dba:	6060      	str	r0, [r4, #4]
   14dbc:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14dc0:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14dc4:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   14dc8:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14dca:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14dce:	d505      	bpl.n	14ddc <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   14dd0:	b123      	cbz	r3, 14ddc <nrfx_clock_stop+0x6c>
   14dd2:	2001      	movs	r0, #1
   14dd4:	f005 fb20 	bl	1a418 <nrfx_busy_wait>
   14dd8:	3d01      	subs	r5, #1
   14dda:	d1f1      	bne.n	14dc0 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   14ddc:	4b01      	ldr	r3, [pc, #4]	; (14de4 <nrfx_clock_stop+0x74>)
   14dde:	2200      	movs	r2, #0
   14de0:	715a      	strb	r2, [r3, #5]
   14de2:	e7c9      	b.n	14d78 <nrfx_clock_stop+0x8>
   14de4:	2000261c 	.word	0x2000261c

00014de8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   14dec:	b510      	push	{r4, lr}
   14dee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   14df2:	b16a      	cbz	r2, 14e10 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14df4:	2200      	movs	r2, #0
   14df6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14dfa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   14dfe:	2201      	movs	r2, #1
   14e00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   14e04:	4b11      	ldr	r3, [pc, #68]	; (14e4c <nrfx_power_clock_irq_handler+0x64>)
   14e06:	7958      	ldrb	r0, [r3, #5]
   14e08:	b910      	cbnz	r0, 14e10 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   14e0a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   14e0c:	681b      	ldr	r3, [r3, #0]
   14e0e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14e14:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   14e18:	b172      	cbz	r2, 14e38 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14e1a:	2200      	movs	r2, #0
   14e1c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   14e20:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14e24:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14e28:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   14e2c:	0792      	lsls	r2, r2, #30
   14e2e:	d104      	bne.n	14e3a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   14e30:	2201      	movs	r2, #1
   14e32:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14e36:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   14e38:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   14e3a:	2202      	movs	r2, #2
   14e3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14e40:	4b02      	ldr	r3, [pc, #8]	; (14e4c <nrfx_power_clock_irq_handler+0x64>)
}
   14e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   14e46:	681b      	ldr	r3, [r3, #0]
   14e48:	2001      	movs	r0, #1
   14e4a:	4718      	bx	r3
   14e4c:	2000261c 	.word	0x2000261c

00014e50 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   14e50:	4b03      	ldr	r3, [pc, #12]	; (14e60 <pin_in_use_by_te+0x10>)
   14e52:	3008      	adds	r0, #8
   14e54:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   14e58:	f3c0 1040 	ubfx	r0, r0, #5, #1
   14e5c:	4770      	bx	lr
   14e5e:	bf00      	nop
   14e60:	20000718 	.word	0x20000718

00014e64 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   14e64:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14e66:	f100 0308 	add.w	r3, r0, #8
   14e6a:	4c0c      	ldr	r4, [pc, #48]	; (14e9c <call_handler+0x38>)
   14e6c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   14e70:	05da      	lsls	r2, r3, #23
{
   14e72:	4605      	mov	r5, r0
   14e74:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14e76:	d507      	bpl.n	14e88 <call_handler+0x24>
   14e78:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   14e7c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   14e80:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   14e84:	6852      	ldr	r2, [r2, #4]
   14e86:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   14e88:	68a3      	ldr	r3, [r4, #8]
   14e8a:	b12b      	cbz	r3, 14e98 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   14e8c:	68e2      	ldr	r2, [r4, #12]
   14e8e:	4631      	mov	r1, r6
   14e90:	4628      	mov	r0, r5
    }
}
   14e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   14e96:	4718      	bx	r3
}
   14e98:	bd70      	pop	{r4, r5, r6, pc}
   14e9a:	bf00      	nop
   14e9c:	20000718 	.word	0x20000718

00014ea0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14ea0:	4a12      	ldr	r2, [pc, #72]	; (14eec <release_handler+0x4c>)
   14ea2:	3008      	adds	r0, #8
{
   14ea4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   14ea6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   14eaa:	05d9      	lsls	r1, r3, #23
   14eac:	d51b      	bpl.n	14ee6 <release_handler+0x46>
   14eae:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   14eb2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   14eb6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14eba:	f102 0410 	add.w	r4, r2, #16
   14ebe:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   14ec0:	f834 3b02 	ldrh.w	r3, [r4], #2
   14ec4:	f413 7f80 	tst.w	r3, #256	; 0x100
   14ec8:	d003      	beq.n	14ed2 <release_handler+0x32>
   14eca:	f3c3 2343 	ubfx	r3, r3, #9, #4
   14ece:	4299      	cmp	r1, r3
   14ed0:	d009      	beq.n	14ee6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   14ed2:	3001      	adds	r0, #1
   14ed4:	2820      	cmp	r0, #32
   14ed6:	d1f3      	bne.n	14ec0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   14ed8:	2300      	movs	r3, #0
   14eda:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14ede:	4804      	ldr	r0, [pc, #16]	; (14ef0 <release_handler+0x50>)
}
   14ee0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   14ee2:	f7ff becb 	b.w	14c7c <nrfx_flag32_free>
}
   14ee6:	bc10      	pop	{r4}
   14ee8:	4770      	bx	lr
   14eea:	bf00      	nop
   14eec:	20000718 	.word	0x20000718
   14ef0:	2000076c 	.word	0x2000076c

00014ef4 <pin_handler_trigger_uninit>:
{
   14ef4:	b538      	push	{r3, r4, r5, lr}
   14ef6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   14ef8:	f7ff ffaa 	bl	14e50 <pin_in_use_by_te>
   14efc:	4c09      	ldr	r4, [pc, #36]	; (14f24 <pin_handler_trigger_uninit+0x30>)
   14efe:	f102 0508 	add.w	r5, r2, #8
   14f02:	b140      	cbz	r0, 14f16 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   14f04:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   14f08:	4907      	ldr	r1, [pc, #28]	; (14f28 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   14f0a:	0b5b      	lsrs	r3, r3, #13
   14f0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   14f10:	2000      	movs	r0, #0
   14f12:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   14f16:	4610      	mov	r0, r2
   14f18:	f7ff ffc2 	bl	14ea0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   14f1c:	2300      	movs	r3, #0
   14f1e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   14f22:	bd38      	pop	{r3, r4, r5, pc}
   14f24:	20000718 	.word	0x20000718
   14f28:	40006000 	.word	0x40006000

00014f2c <nrfx_gpiote_input_configure>:
{
   14f2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14f30:	4604      	mov	r4, r0
   14f32:	461e      	mov	r6, r3
    if (p_input_config)
   14f34:	b309      	cbz	r1, 14f7a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14f36:	4f4d      	ldr	r7, [pc, #308]	; (1506c <nrfx_gpiote_input_configure+0x140>)
   14f38:	f100 0808 	add.w	r8, r0, #8
   14f3c:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   14f40:	07ab      	lsls	r3, r5, #30
   14f42:	d506      	bpl.n	14f52 <nrfx_gpiote_input_configure+0x26>
   14f44:	f7ff ff84 	bl	14e50 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   14f48:	b118      	cbz	r0, 14f52 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   14f4a:	4849      	ldr	r0, [pc, #292]	; (15070 <nrfx_gpiote_input_configure+0x144>)
}
   14f4c:	b002      	add	sp, #8
   14f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
   14f52:	f004 001f 	and.w	r0, r4, #31
   14f56:	0080      	lsls	r0, r0, #2
   14f58:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   14f5c:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   14f5e:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   14f62:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
   14f66:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   14f6a:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   14f6e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
   14f72:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   14f76:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
   14f7a:	b192      	cbz	r2, 14fa2 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14f7c:	4b3b      	ldr	r3, [pc, #236]	; (1506c <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   14f7e:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   14f80:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   14f82:	f104 0008 	add.w	r0, r4, #8
   14f86:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   14f8a:	078f      	lsls	r7, r1, #30
   14f8c:	d50c      	bpl.n	14fa8 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
   14f8e:	2a00      	cmp	r2, #0
   14f90:	d1db      	bne.n	14f4a <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   14f92:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   14f96:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   14f9a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
   14f9e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   14fa2:	bbce      	cbnz	r6, 15018 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
   14fa4:	4833      	ldr	r0, [pc, #204]	; (15074 <nrfx_gpiote_input_configure+0x148>)
   14fa6:	e7d1      	b.n	14f4c <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   14fa8:	f021 0120 	bic.w	r1, r1, #32
   14fac:	04c9      	lsls	r1, r1, #19
   14fae:	0cc9      	lsrs	r1, r1, #19
   14fb0:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   14fb4:	2a00      	cmp	r2, #0
   14fb6:	d0ec      	beq.n	14f92 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
   14fb8:	2d03      	cmp	r5, #3
   14fba:	d8c6      	bhi.n	14f4a <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   14fbc:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   14fbe:	b92d      	cbnz	r5, 14fcc <nrfx_gpiote_input_configure+0xa0>
   14fc0:	4a2d      	ldr	r2, [pc, #180]	; (15078 <nrfx_gpiote_input_configure+0x14c>)
   14fc2:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   14fc6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   14fca:	e7e2      	b.n	14f92 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   14fcc:	00ba      	lsls	r2, r7, #2
   14fce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   14fd2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   14fd6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   14fda:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   14fde:	f02c 0c03 	bic.w	ip, ip, #3
   14fe2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14fe6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   14fea:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
   14fee:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   14ff2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14ff6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   14ffa:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   14ffe:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
   15002:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
   15006:	ea4c 0c0e 	orr.w	ip, ip, lr
   1500a:	f041 0120 	orr.w	r1, r1, #32
   1500e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   15012:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   15016:	e7bc      	b.n	14f92 <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   15018:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
   1501c:	4620      	mov	r0, r4
   1501e:	f7ff ff3f 	bl	14ea0 <release_handler>
    if (!handler)
   15022:	2f00      	cmp	r7, #0
   15024:	d0be      	beq.n	14fa4 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   15026:	4d11      	ldr	r5, [pc, #68]	; (1506c <nrfx_gpiote_input_configure+0x140>)
   15028:	682b      	ldr	r3, [r5, #0]
   1502a:	429f      	cmp	r7, r3
   1502c:	d104      	bne.n	15038 <nrfx_gpiote_input_configure+0x10c>
   1502e:	686b      	ldr	r3, [r5, #4]
   15030:	429e      	cmp	r6, r3
   15032:	d101      	bne.n	15038 <nrfx_gpiote_input_configure+0x10c>
   15034:	2200      	movs	r2, #0
   15036:	e009      	b.n	1504c <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   15038:	4810      	ldr	r0, [pc, #64]	; (1507c <nrfx_gpiote_input_configure+0x150>)
   1503a:	f10d 0107 	add.w	r1, sp, #7
   1503e:	f7ff fdf7 	bl	14c30 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   15042:	4b0c      	ldr	r3, [pc, #48]	; (15074 <nrfx_gpiote_input_configure+0x148>)
   15044:	4298      	cmp	r0, r3
   15046:	d181      	bne.n	14f4c <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   15048:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   1504c:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   15050:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   15054:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   15056:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   15058:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1505c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   15060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15064:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   15068:	e79c      	b.n	14fa4 <nrfx_gpiote_input_configure+0x78>
   1506a:	bf00      	nop
   1506c:	20000718 	.word	0x20000718
   15070:	0bad0004 	.word	0x0bad0004
   15074:	0bad0000 	.word	0x0bad0000
   15078:	40006000 	.word	0x40006000
   1507c:	2000076c 	.word	0x2000076c

00015080 <nrfx_gpiote_output_configure>:
{
   15080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15082:	4604      	mov	r4, r0
    if (p_config)
   15084:	b371      	cbz	r1, 150e4 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   15086:	4e37      	ldr	r6, [pc, #220]	; (15164 <nrfx_gpiote_output_configure+0xe4>)
   15088:	f100 0708 	add.w	r7, r0, #8
   1508c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   15090:	07ab      	lsls	r3, r5, #30
   15092:	d404      	bmi.n	1509e <nrfx_gpiote_output_configure+0x1e>
   15094:	f7ff fedc 	bl	14e50 <pin_in_use_by_te>
   15098:	b108      	cbz	r0, 1509e <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
   1509a:	4833      	ldr	r0, [pc, #204]	; (15168 <nrfx_gpiote_output_configure+0xe8>)
}
   1509c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1509e:	f015 0f1c 	tst.w	r5, #28
   150a2:	784b      	ldrb	r3, [r1, #1]
   150a4:	d001      	beq.n	150aa <nrfx_gpiote_output_configure+0x2a>
   150a6:	2b01      	cmp	r3, #1
   150a8:	d0f7      	beq.n	1509a <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
   150aa:	f004 001f 	and.w	r0, r4, #31
   150ae:	0080      	lsls	r0, r0, #2
   150b0:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   150b4:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   150b8:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   150bc:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   150be:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   150c0:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
   150c4:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   150c8:	f02c 0c07 	bic.w	ip, ip, #7
   150cc:	ea43 030c 	orr.w	r3, r3, ip
   150d0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   150d4:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   150d8:	f043 0301 	orr.w	r3, r3, #1
   150dc:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   150e0:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
   150e4:	b90a      	cbnz	r2, 150ea <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
   150e6:	4821      	ldr	r0, [pc, #132]	; (1516c <nrfx_gpiote_output_configure+0xec>)
   150e8:	e7d8      	b.n	1509c <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   150ea:	4e1e      	ldr	r6, [pc, #120]	; (15164 <nrfx_gpiote_output_configure+0xe4>)
   150ec:	f104 0708 	add.w	r7, r4, #8
   150f0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   150f4:	0783      	lsls	r3, r0, #30
   150f6:	d5d0      	bpl.n	1509a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   150f8:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   150fc:	4661      	mov	r1, ip
   150fe:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   15100:	f020 0020 	bic.w	r0, r0, #32
   15104:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   15108:	04c0      	lsls	r0, r0, #19
   1510a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1510e:	0cc0      	lsrs	r0, r0, #19
   15110:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   15114:	2300      	movs	r3, #0
   15116:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1511a:	7855      	ldrb	r5, [r2, #1]
   1511c:	2d00      	cmp	r5, #0
   1511e:	d0e2      	beq.n	150e6 <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   15120:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   15124:	7892      	ldrb	r2, [r2, #2]
   15126:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1512a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1512e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15132:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   15136:	0223      	lsls	r3, r4, #8
   15138:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1513c:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1513e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   15142:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   15146:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15148:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1514a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1514e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15152:	4313      	orrs	r3, r2
   15154:	f040 0020 	orr.w	r0, r0, #32
   15158:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1515c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   15160:	e7c1      	b.n	150e6 <nrfx_gpiote_output_configure+0x66>
   15162:	bf00      	nop
   15164:	20000718 	.word	0x20000718
   15168:	0bad0004 	.word	0x0bad0004
   1516c:	0bad0000 	.word	0x0bad0000

00015170 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   15170:	4b01      	ldr	r3, [pc, #4]	; (15178 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   15172:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   15176:	4770      	bx	lr
   15178:	20000718 	.word	0x20000718

0001517c <nrfx_gpiote_channel_get>:
{
   1517c:	b508      	push	{r3, lr}
   1517e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   15180:	f7ff fe66 	bl	14e50 <pin_in_use_by_te>
   15184:	b138      	cbz	r0, 15196 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   15186:	4b05      	ldr	r3, [pc, #20]	; (1519c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   15188:	4805      	ldr	r0, [pc, #20]	; (151a0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1518a:	3208      	adds	r2, #8
   1518c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   15190:	0b5b      	lsrs	r3, r3, #13
   15192:	700b      	strb	r3, [r1, #0]
}
   15194:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   15196:	4803      	ldr	r0, [pc, #12]	; (151a4 <nrfx_gpiote_channel_get+0x28>)
   15198:	e7fc      	b.n	15194 <nrfx_gpiote_channel_get+0x18>
   1519a:	bf00      	nop
   1519c:	20000718 	.word	0x20000718
   151a0:	0bad0000 	.word	0x0bad0000
   151a4:	0bad0004 	.word	0x0bad0004

000151a8 <nrfx_gpiote_init>:
{
   151a8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   151aa:	4c0f      	ldr	r4, [pc, #60]	; (151e8 <nrfx_gpiote_init+0x40>)
   151ac:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   151b0:	b9bd      	cbnz	r5, 151e2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   151b2:	2240      	movs	r2, #64	; 0x40
   151b4:	4629      	mov	r1, r5
   151b6:	f104 0010 	add.w	r0, r4, #16
   151ba:	f002 fcaa 	bl	17b12 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   151be:	2006      	movs	r0, #6
   151c0:	f7ed f80c 	bl	21dc <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   151c4:	4b09      	ldr	r3, [pc, #36]	; (151ec <nrfx_gpiote_init+0x44>)
    return err_code;
   151c6:	480a      	ldr	r0, [pc, #40]	; (151f0 <nrfx_gpiote_init+0x48>)
   151c8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   151cc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   151d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   151d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   151d8:	2301      	movs	r3, #1
   151da:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   151de:	6563      	str	r3, [r4, #84]	; 0x54
}
   151e0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   151e2:	4804      	ldr	r0, [pc, #16]	; (151f4 <nrfx_gpiote_init+0x4c>)
   151e4:	e7fc      	b.n	151e0 <nrfx_gpiote_init+0x38>
   151e6:	bf00      	nop
   151e8:	20000718 	.word	0x20000718
   151ec:	40006000 	.word	0x40006000
   151f0:	0bad0000 	.word	0x0bad0000
   151f4:	0bad0005 	.word	0x0bad0005

000151f8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   151f8:	4b03      	ldr	r3, [pc, #12]	; (15208 <nrfx_gpiote_is_init+0x10>)
   151fa:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   151fe:	3800      	subs	r0, #0
   15200:	bf18      	it	ne
   15202:	2001      	movne	r0, #1
   15204:	4770      	bx	lr
   15206:	bf00      	nop
   15208:	20000718 	.word	0x20000718

0001520c <nrfx_gpiote_channel_free>:
{
   1520c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1520e:	4801      	ldr	r0, [pc, #4]	; (15214 <nrfx_gpiote_channel_free+0x8>)
   15210:	f7ff bd34 	b.w	14c7c <nrfx_flag32_free>
   15214:	20000768 	.word	0x20000768

00015218 <nrfx_gpiote_channel_alloc>:
{
   15218:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1521a:	4801      	ldr	r0, [pc, #4]	; (15220 <nrfx_gpiote_channel_alloc+0x8>)
   1521c:	f7ff bd08 	b.w	14c30 <nrfx_flag32_alloc>
   15220:	20000768 	.word	0x20000768

00015224 <nrfx_gpiote_trigger_enable>:
{
   15224:	b510      	push	{r4, lr}
   15226:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15228:	f7ff fe12 	bl	14e50 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1522c:	f102 0408 	add.w	r4, r2, #8
   15230:	4b1c      	ldr	r3, [pc, #112]	; (152a4 <nrfx_gpiote_trigger_enable+0x80>)
   15232:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   15236:	b1e0      	cbz	r0, 15272 <nrfx_gpiote_trigger_enable+0x4e>
   15238:	f013 0402 	ands.w	r4, r3, #2
   1523c:	d119      	bne.n	15272 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1523e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   15240:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   15242:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   15246:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1524a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1524e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15252:	6004      	str	r4, [r0, #0]
   15254:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15256:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1525a:	f040 0001 	orr.w	r0, r0, #1
   1525e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   15262:	b129      	cbz	r1, 15270 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   15264:	2201      	movs	r2, #1
   15266:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1526a:	4a0f      	ldr	r2, [pc, #60]	; (152a8 <nrfx_gpiote_trigger_enable+0x84>)
   1526c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15270:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   15272:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   15276:	2b04      	cmp	r3, #4
   15278:	d010      	beq.n	1529c <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1527a:	2b05      	cmp	r3, #5
   1527c:	d010      	beq.n	152a0 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
   1527e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   15282:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   15286:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1528a:	40d9      	lsrs	r1, r3
   1528c:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15290:	3102      	adds	r1, #2
}
   15292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   15296:	4610      	mov	r0, r2
   15298:	f005 b8ca 	b.w	1a430 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1529c:	2103      	movs	r1, #3
   1529e:	e7f8      	b.n	15292 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   152a0:	2102      	movs	r1, #2
   152a2:	e7f6      	b.n	15292 <nrfx_gpiote_trigger_enable+0x6e>
   152a4:	20000718 	.word	0x20000718
   152a8:	40006000 	.word	0x40006000

000152ac <nrfx_gpiote_trigger_disable>:
{
   152ac:	b508      	push	{r3, lr}
   152ae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   152b0:	f7ff fdce 	bl	14e50 <pin_in_use_by_te>
   152b4:	b1c0      	cbz	r0, 152e8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   152b6:	f102 0108 	add.w	r1, r2, #8
   152ba:	4b0e      	ldr	r3, [pc, #56]	; (152f4 <nrfx_gpiote_trigger_disable+0x48>)
   152bc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   152c0:	0799      	lsls	r1, r3, #30
   152c2:	d411      	bmi.n	152e8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   152c4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   152c6:	2201      	movs	r2, #1
   152c8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   152ca:	009b      	lsls	r3, r3, #2
   152cc:	490a      	ldr	r1, [pc, #40]	; (152f8 <nrfx_gpiote_trigger_disable+0x4c>)
   152ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   152d2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   152d6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   152da:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   152de:	f022 0203 	bic.w	r2, r2, #3
   152e2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   152e6:	bd08      	pop	{r3, pc}
   152e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   152ec:	2100      	movs	r1, #0
   152ee:	4610      	mov	r0, r2
   152f0:	f005 b89e 	b.w	1a430 <nrf_gpio_cfg_sense_set>
   152f4:	20000718 	.word	0x20000718
   152f8:	40006000 	.word	0x40006000

000152fc <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   152fc:	4b0d      	ldr	r3, [pc, #52]	; (15334 <nrfx_gpiote_pin_uninit+0x38>)
   152fe:	f100 0208 	add.w	r2, r0, #8
{
   15302:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   15304:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   15308:	07db      	lsls	r3, r3, #31
{
   1530a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   1530c:	d50f      	bpl.n	1532e <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   1530e:	f7ff ffcd 	bl	152ac <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   15312:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   15314:	f004 041f 	and.w	r4, r4, #31
   15318:	f7ff fdec 	bl	14ef4 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   1531c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   15320:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   15324:	2202      	movs	r2, #2
   15326:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1532a:	4803      	ldr	r0, [pc, #12]	; (15338 <nrfx_gpiote_pin_uninit+0x3c>)
}
   1532c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1532e:	4803      	ldr	r0, [pc, #12]	; (1533c <nrfx_gpiote_pin_uninit+0x40>)
   15330:	e7fc      	b.n	1532c <nrfx_gpiote_pin_uninit+0x30>
   15332:	bf00      	nop
   15334:	20000718 	.word	0x20000718
   15338:	0bad0000 	.word	0x0bad0000
   1533c:	0bad0004 	.word	0x0bad0004

00015340 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   15340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15344:	4b4e      	ldr	r3, [pc, #312]	; (15480 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   15346:	484f      	ldr	r0, [pc, #316]	; (15484 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15348:	494f      	ldr	r1, [pc, #316]	; (15488 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
   1534a:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1534c:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1534e:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15350:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   15352:	b136      	cbz	r6, 15362 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   15354:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   15358:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1535a:	bf1e      	ittt	ne
   1535c:	601c      	strne	r4, [r3, #0]
   1535e:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   15360:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   15362:	3304      	adds	r3, #4
   15364:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   15366:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1536a:	d1f1      	bne.n	15350 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1536c:	4b45      	ldr	r3, [pc, #276]	; (15484 <nrfx_gpiote_irq_handler+0x144>)
   1536e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   15372:	b1bb      	cbz	r3, 153a4 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   15374:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   15378:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   1537c:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   1537e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   15382:	af01      	add	r7, sp, #4
   15384:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   15388:	9c01      	ldr	r4, [sp, #4]
   1538a:	b96c      	cbnz	r4, 153a8 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1538c:	4b3d      	ldr	r3, [pc, #244]	; (15484 <nrfx_gpiote_irq_handler+0x144>)
   1538e:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   15392:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   15396:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   1539a:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   1539c:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
   153a0:	2b00      	cmp	r3, #0
   153a2:	d1ee      	bne.n	15382 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   153a4:	2401      	movs	r4, #1
   153a6:	e066      	b.n	15476 <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
   153a8:	fa94 f4a4 	rbit	r4, r4
   153ac:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   153b0:	4a36      	ldr	r2, [pc, #216]	; (1548c <nrfx_gpiote_irq_handler+0x14c>)
   153b2:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   153b6:	08e0      	lsrs	r0, r4, #3
   153b8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   153bc:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   153c0:	fa08 f203 	lsl.w	r2, r8, r3
   153c4:	5c3b      	ldrb	r3, [r7, r0]
   153c6:	ea23 0302 	bic.w	r3, r3, r2
   153ca:	543b      	strb	r3, [r7, r0]
   153cc:	00a3      	lsls	r3, r4, #2
   153ce:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
   153d2:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   153d6:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
   153da:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   153dc:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   153de:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   153e2:	d518      	bpl.n	15416 <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
   153e4:	4659      	mov	r1, fp
   153e6:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   153e8:	fa5f fa82 	uxtb.w	sl, r2
   153ec:	f7ff fd3a 	bl	14e64 <call_handler>
   153f0:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   153f4:	f3c3 4301 	ubfx	r3, r3, #16, #2
   153f8:	459a      	cmp	sl, r3
   153fa:	d107      	bne.n	1540c <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   153fc:	2100      	movs	r1, #0
   153fe:	4620      	mov	r0, r4
   15400:	f005 f816 	bl	1a430 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   15404:	4651      	mov	r1, sl
   15406:	4620      	mov	r0, r4
   15408:	f005 f812 	bl	1a430 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   1540c:	fa08 f404 	lsl.w	r4, r8, r4
   15410:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
   15414:	e7b8      	b.n	15388 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   15416:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   15418:	bf0c      	ite	eq
   1541a:	2103      	moveq	r1, #3
   1541c:	2102      	movne	r1, #2
   1541e:	4620      	mov	r0, r4
   15420:	f005 f806 	bl	1a430 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   15424:	f1ba 0f03 	cmp.w	sl, #3
   15428:	d004      	beq.n	15434 <nrfx_gpiote_irq_handler+0xf4>
   1542a:	2a02      	cmp	r2, #2
   1542c:	d107      	bne.n	1543e <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1542e:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   15432:	d1eb      	bne.n	1540c <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
   15434:	4659      	mov	r1, fp
   15436:	4620      	mov	r0, r4
   15438:	f7ff fd14 	bl	14e64 <call_handler>
   1543c:	e7e6      	b.n	1540c <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1543e:	2a03      	cmp	r2, #3
   15440:	d1e4      	bne.n	1540c <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   15442:	f1ba 0f02 	cmp.w	sl, #2
   15446:	e7f4      	b.n	15432 <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
   15448:	fa95 f3a5 	rbit	r3, r5
   1544c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   15450:	fa04 f203 	lsl.w	r2, r4, r3
   15454:	009b      	lsls	r3, r3, #2
   15456:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1545a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1545e:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15462:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   15466:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1546a:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1546e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   15472:	f7ff fcf7 	bl	14e64 <call_handler>
    while (mask)
   15476:	2d00      	cmp	r5, #0
   15478:	d1e6      	bne.n	15448 <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1547a:	b003      	add	sp, #12
   1547c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15480:	40006100 	.word	0x40006100
   15484:	40006000 	.word	0x40006000
   15488:	40006120 	.word	0x40006120
   1548c:	20000718 	.word	0x20000718

00015490 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   15490:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   15492:	4801      	ldr	r0, [pc, #4]	; (15498 <nrfx_ppi_channel_alloc+0x8>)
   15494:	f7ff bbcc 	b.w	14c30 <nrfx_flag32_alloc>
   15498:	20000774 	.word	0x20000774

0001549c <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   1549c:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1549e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   154a2:	b087      	sub	sp, #28
   154a4:	4604      	mov	r4, r0
   154a6:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   154a8:	b1f3      	cbz	r3, 154e8 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   154aa:	2300      	movs	r3, #0
   154ac:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   154b0:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   154b4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   154b8:	b9b3      	cbnz	r3, 154e8 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   154ba:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
   154bc:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   154c0:	2302      	movs	r3, #2
   154c2:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   154c4:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   154c6:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   154ca:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   154ce:	b11b      	cbz	r3, 154d8 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   154d0:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   154d4:	059f      	lsls	r7, r3, #22
   154d6:	d402      	bmi.n	154de <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   154d8:	2301      	movs	r3, #1
   154da:	6223      	str	r3, [r4, #32]
   154dc:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   154de:	2301      	movs	r3, #1
   154e0:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   154e4:	b007      	add	sp, #28
   154e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   154e8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   154ec:	2b00      	cmp	r3, #0
   154ee:	d044      	beq.n	1557a <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   154f0:	2300      	movs	r3, #0
   154f2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   154f6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   154fa:	6a2b      	ldr	r3, [r5, #32]
   154fc:	065e      	lsls	r6, r3, #25
   154fe:	d40a      	bmi.n	15516 <twim_irq_handler+0x7a>
   15500:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   15504:	b93b      	cbnz	r3, 15516 <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   15506:	4629      	mov	r1, r5
   15508:	4620      	mov	r0, r4
   1550a:	f004 ff9f 	bl	1a44c <xfer_completeness_check>
   1550e:	f080 0001 	eor.w	r0, r0, #1
   15512:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   15516:	6a2b      	ldr	r3, [r5, #32]
   15518:	f013 0c04 	ands.w	ip, r3, #4
   1551c:	d13e      	bne.n	1559c <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
   1551e:	f105 070c 	add.w	r7, r5, #12
   15522:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   15524:	ae01      	add	r6, sp, #4
   15526:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
   15528:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   1552c:	683b      	ldr	r3, [r7, #0]
   1552e:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   15532:	6033      	str	r3, [r6, #0]
   15534:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   15538:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   1553c:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   15540:	f1be 0f00 	cmp.w	lr, #0
   15544:	d002      	beq.n	1554c <twim_irq_handler+0xb0>
   15546:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1554a:	b33b      	cbz	r3, 1559c <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
   1554c:	2300      	movs	r3, #0
   1554e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   15552:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   15554:	4b2e      	ldr	r3, [pc, #184]	; (15610 <twim_irq_handler+0x174>)
   15556:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1555a:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   1555e:	2b00      	cmp	r3, #0
   15560:	ea4f 3214 	mov.w	r2, r4, lsr #12
   15564:	db1a      	blt.n	1559c <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15566:	f002 011f 	and.w	r1, r2, #31
   1556a:	095b      	lsrs	r3, r3, #5
   1556c:	2201      	movs	r2, #1
   1556e:	408a      	lsls	r2, r1
   15570:	3360      	adds	r3, #96	; 0x60
   15572:	4928      	ldr	r1, [pc, #160]	; (15614 <twim_irq_handler+0x178>)
   15574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15578:	e010      	b.n	1559c <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1557a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   1557e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   15582:	7b2b      	ldrb	r3, [r5, #12]
   15584:	bb23      	cbnz	r3, 155d0 <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
   15586:	f105 070c 	add.w	r7, r5, #12
   1558a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1558c:	ae01      	add	r6, sp, #4
   1558e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   15590:	683b      	ldr	r3, [r7, #0]
   15592:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   15594:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   15598:	2b00      	cmp	r3, #0
   1559a:	d0d8      	beq.n	1554e <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
   1559c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   155a0:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   155a4:	0798      	lsls	r0, r3, #30
   155a6:	d525      	bpl.n	155f4 <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   155a8:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   155aa:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   155ae:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   155b2:	b90b      	cbnz	r3, 155b8 <twim_irq_handler+0x11c>
        p_cb->busy = false;
   155b4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   155b8:	6a2b      	ldr	r3, [r5, #32]
   155ba:	075b      	lsls	r3, r3, #29
   155bc:	d503      	bpl.n	155c6 <twim_irq_handler+0x12a>
   155be:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   155c2:	2b00      	cmp	r3, #0
   155c4:	d08e      	beq.n	154e4 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
   155c6:	e9d5 3100 	ldrd	r3, r1, [r5]
   155ca:	4668      	mov	r0, sp
   155cc:	4798      	blx	r3
   155ce:	e789      	b.n	154e4 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
   155d0:	f44f 7300 	mov.w	r3, #512	; 0x200
   155d4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   155d8:	f240 2302 	movw	r3, #514	; 0x202
   155dc:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   155de:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   155e2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   155e6:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   155e8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   155ec:	2301      	movs	r3, #1
   155ee:	60a3      	str	r3, [r4, #8]
   155f0:	6223      	str	r3, [r4, #32]
            return;
   155f2:	e777      	b.n	154e4 <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   155f4:	0759      	lsls	r1, r3, #29
   155f6:	d501      	bpl.n	155fc <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   155f8:	2302      	movs	r3, #2
   155fa:	e7d6      	b.n	155aa <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   155fc:	07da      	lsls	r2, r3, #31
   155fe:	d501      	bpl.n	15604 <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   15600:	2303      	movs	r3, #3
   15602:	e7d2      	b.n	155aa <twim_irq_handler+0x10e>
    else if (p_cb->error)
   15604:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   15608:	2b00      	cmp	r3, #0
   1560a:	d0ce      	beq.n	155aa <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   1560c:	2304      	movs	r3, #4
   1560e:	e7cc      	b.n	155aa <twim_irq_handler+0x10e>
   15610:	019c0202 	.word	0x019c0202
   15614:	e000e100 	.word	0xe000e100

00015618 <nrfx_twim_init>:
{
   15618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1561a:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1561c:	4d23      	ldr	r5, [pc, #140]	; (156ac <nrfx_twim_init+0x94>)
   1561e:	f04f 0c34 	mov.w	ip, #52	; 0x34
   15622:	fb0c fc06 	mul.w	ip, ip, r6
   15626:	eb05 040c 	add.w	r4, r5, ip
   1562a:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   1562e:	2f00      	cmp	r7, #0
   15630:	d13a      	bne.n	156a8 <nrfx_twim_init+0x90>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   15632:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   15634:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   15636:	7b4b      	ldrb	r3, [r1, #13]
   15638:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1563c:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
   1563e:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   15640:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   15644:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   15648:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    p_cb->handler         = event_handler;
   1564c:	f845 200c 	str.w	r2, [r5, ip]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   15650:	7bcc      	ldrb	r4, [r1, #15]
   15652:	b1b3      	cbz	r3, 15682 <nrfx_twim_init+0x6a>
   15654:	b92c      	cbnz	r4, 15662 <nrfx_twim_init+0x4a>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   15656:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   1565a:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1565e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   15662:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   15664:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   15668:	b11a      	cbz	r2, 15672 <nrfx_twim_init+0x5a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   1566a:	f340 3007 	sbfx	r0, r0, #12, #8
   1566e:	f7ec fdb5 	bl	21dc <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   15672:	2334      	movs	r3, #52	; 0x34
   15674:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   15678:	480d      	ldr	r0, [pc, #52]	; (156b0 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1567a:	2301      	movs	r3, #1
   1567c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   15680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   15682:	680b      	ldr	r3, [r1, #0]
   15684:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   15688:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   1568c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   15690:	f240 6c0c 	movw	ip, #1548	; 0x60c
   15694:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   15698:	684b      	ldr	r3, [r1, #4]
   1569a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   1569e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   156a2:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   156a6:	e7d5      	b.n	15654 <nrfx_twim_init+0x3c>
        return err_code;
   156a8:	4802      	ldr	r0, [pc, #8]	; (156b4 <nrfx_twim_init+0x9c>)
   156aa:	e7e9      	b.n	15680 <nrfx_twim_init+0x68>
   156ac:	20002624 	.word	0x20002624
   156b0:	0bad0000 	.word	0x0bad0000
   156b4:	0bad0005 	.word	0x0bad0005

000156b8 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
   156b8:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   156ba:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   156bc:	2106      	movs	r1, #6
   156be:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   156c2:	4b04      	ldr	r3, [pc, #16]	; (156d4 <nrfx_twim_enable+0x1c>)
   156c4:	2134      	movs	r1, #52	; 0x34
   156c6:	fb01 3302 	mla	r3, r1, r2, r3
   156ca:	2202      	movs	r2, #2
   156cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   156d0:	4770      	bx	lr
   156d2:	bf00      	nop
   156d4:	20002624 	.word	0x20002624

000156d8 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   156d8:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
   156da:	4b0c      	ldr	r3, [pc, #48]	; (1570c <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   156dc:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   156de:	2034      	movs	r0, #52	; 0x34
   156e0:	fb00 3301 	mla	r3, r0, r1, r3
   156e4:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   156e6:	480a      	ldr	r0, [pc, #40]	; (15710 <nrfx_twim_disable+0x38>)
   156e8:	6099      	str	r1, [r3, #8]
   156ea:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   156ee:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   156f2:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   156f6:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   156fa:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   156fe:	2201      	movs	r2, #1
   15700:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   15704:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   15708:	4770      	bx	lr
   1570a:	bf00      	nop
   1570c:	20002624 	.word	0x20002624
   15710:	019c0202 	.word	0x019c0202

00015714 <nrfx_twim_xfer>:
{
   15714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   15718:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 159ec <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1571c:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   15720:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   15722:	2334      	movs	r3, #52	; 0x34
   15724:	fb03 c30e 	mla	r3, r3, lr, ip
{
   15728:	4617      	mov	r7, r2
    p_cb->error = false;
   1572a:	2200      	movs	r2, #0
   1572c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   15730:	684b      	ldr	r3, [r1, #4]
{
   15732:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   15734:	b14b      	cbz	r3, 1574a <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   15736:	68cb      	ldr	r3, [r1, #12]
   15738:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   1573c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   15740:	d003      	beq.n	1574a <nrfx_twim_xfer+0x36>
        return err_code;
   15742:	4eab      	ldr	r6, [pc, #684]	; (159f0 <nrfx_twim_xfer+0x2dc>)
}
   15744:	4630      	mov	r0, r6
   15746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   1574a:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   1574c:	4ba9      	ldr	r3, [pc, #676]	; (159f4 <nrfx_twim_xfer+0x2e0>)
   1574e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   15752:	fb06 c60e 	mla	r6, r6, lr, ip
   15756:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1575a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   1575e:	b123      	cbz	r3, 1576a <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   15760:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   15762:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   15766:	4ea4      	ldr	r6, [pc, #656]	; (159f8 <nrfx_twim_xfer+0x2e4>)
   15768:	e7ec      	b.n	15744 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   1576a:	f017 0f14 	tst.w	r7, #20
   1576e:	bf0c      	ite	eq
   15770:	2301      	moveq	r3, #1
   15772:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   15774:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   15778:	46a9      	mov	r9, r5
   1577a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   1577e:	f106 080c 	add.w	r8, r6, #12
   15782:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   15786:	f8d9 3000 	ldr.w	r3, [r9]
   1578a:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   1578e:	f3c7 1300 	ubfx	r3, r7, #4, #1
   15792:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   15796:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
   15798:	786b      	ldrb	r3, [r5, #1]
   1579a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1579e:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   157a2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   157a6:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   157aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   157ae:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   157b2:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   157b6:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   157ba:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   157be:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   157c2:	bf18      	it	ne
   157c4:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   157c6:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   157ca:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   157ce:	bf18      	it	ne
   157d0:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   157d2:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   157d6:	782a      	ldrb	r2, [r5, #0]
   157d8:	2a03      	cmp	r2, #3
   157da:	f200 80b5 	bhi.w	15948 <nrfx_twim_xfer+0x234>
   157de:	e8df f002 	tbb	[pc, r2]
   157e2:	a084      	.short	0xa084
   157e4:	0269      	.short	0x0269
   157e6:	692b      	ldr	r3, [r5, #16]
   157e8:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   157ec:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   157f0:	d1a7      	bne.n	15742 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   157f2:	f44f 7180 	mov.w	r1, #256	; 0x100
   157f6:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   157fa:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   157fc:	6869      	ldr	r1, [r5, #4]
   157fe:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15802:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15806:	2100      	movs	r1, #0
   15808:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   1580c:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15810:	2001      	movs	r0, #1
   15812:	6220      	str	r0, [r4, #32]
   15814:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15816:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   1581a:	2800      	cmp	r0, #0
   1581c:	d0fb      	beq.n	15816 <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1581e:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   15822:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   15826:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15828:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   1582c:	2334      	movs	r3, #52	; 0x34
   1582e:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
   15832:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
   15836:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1583a:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   1583c:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   1583e:	4e6f      	ldr	r6, [pc, #444]	; (159fc <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   15840:	0739      	lsls	r1, r7, #28
   15842:	d406      	bmi.n	15852 <nrfx_twim_xfer+0x13e>
   15844:	2a03      	cmp	r2, #3
   15846:	d004      	beq.n	15852 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15848:	2201      	movs	r2, #1
   1584a:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   1584c:	686b      	ldr	r3, [r5, #4]
   1584e:	b903      	cbnz	r3, 15852 <nrfx_twim_xfer+0x13e>
   15850:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   15852:	2334      	movs	r3, #52	; 0x34
   15854:	fb03 f30e 	mul.w	r3, r3, lr
   15858:	eb0c 0103 	add.w	r1, ip, r3
   1585c:	f85c 2003 	ldr.w	r2, [ip, r3]
   15860:	2a00      	cmp	r2, #0
   15862:	d174      	bne.n	1594e <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   15864:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15866:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1586a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   1586e:	2800      	cmp	r0, #0
   15870:	f040 8088 	bne.w	15984 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   15874:	3b00      	subs	r3, #0
   15876:	bf18      	it	ne
   15878:	2301      	movne	r3, #1
   1587a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1587e:	2800      	cmp	r0, #0
   15880:	f000 8086 	beq.w	15990 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15884:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   15888:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1588c:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   15890:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   15894:	b115      	cbz	r5, 1589c <nrfx_twim_xfer+0x188>
   15896:	f410 7f00 	tst.w	r0, #512	; 0x200
   1589a:	d104      	bne.n	158a6 <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1589c:	6221      	str	r1, [r4, #32]
   1589e:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   158a0:	2d00      	cmp	r5, #0
   158a2:	d0e0      	beq.n	15866 <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   158a4:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   158a6:	05c0      	lsls	r0, r0, #23
   158a8:	d572      	bpl.n	15990 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   158aa:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   158ae:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   158b2:	e7d8      	b.n	15866 <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   158b4:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   158b6:	68e9      	ldr	r1, [r5, #12]
   158b8:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   158bc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   158c0:	692b      	ldr	r3, [r5, #16]
   158c2:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   158c6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   158ca:	f47f af3a 	bne.w	15742 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   158ce:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   158d0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   158d4:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   158d8:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   158dc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   158e0:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   158e2:	fb03 c30e 	mla	r3, r3, lr, ip
   158e6:	2102      	movs	r1, #2
   158e8:	e012      	b.n	15910 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   158ea:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   158ec:	68e9      	ldr	r1, [r5, #12]
   158ee:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   158f2:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   158f6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   158fa:	f04f 0334 	mov.w	r3, #52	; 0x34
   158fe:	d00b      	beq.n	15918 <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   15900:	f44f 7180 	mov.w	r1, #256	; 0x100
   15904:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   15908:	fb03 c30e 	mla	r3, r3, lr, ip
   1590c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   15910:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15912:	2301      	movs	r3, #1
   15914:	6223      	str	r3, [r4, #32]
   15916:	e791      	b.n	1583c <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   15918:	f44f 7100 	mov.w	r1, #512	; 0x200
   1591c:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   15920:	e7df      	b.n	158e2 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   15922:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15924:	68e9      	ldr	r1, [r5, #12]
   15926:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1592a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   1592e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   15932:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   15936:	2334      	movs	r3, #52	; 0x34
   15938:	fb03 c30e 	mla	r3, r3, lr, ip
   1593c:	2102      	movs	r1, #2
   1593e:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15940:	2301      	movs	r3, #1
   15942:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   15944:	2300      	movs	r3, #0
   15946:	e77a      	b.n	1583e <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   15948:	4e2d      	ldr	r6, [pc, #180]	; (15a00 <nrfx_twim_xfer+0x2ec>)
   1594a:	2308      	movs	r3, #8
   1594c:	e778      	b.n	15840 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   1594e:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
   15950:	bf44      	itt	mi
   15952:	2300      	movmi	r3, #0
   15954:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   15956:	067b      	lsls	r3, r7, #25
   15958:	d406      	bmi.n	15968 <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   1595a:	2334      	movs	r3, #52	; 0x34
   1595c:	fb03 c30e 	mla	r3, r3, lr, ip
   15960:	689a      	ldr	r2, [r3, #8]
   15962:	f042 0202 	orr.w	r2, r2, #2
   15966:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   15968:	2334      	movs	r3, #52	; 0x34
   1596a:	fb03 cc0e 	mla	ip, r3, lr, ip
   1596e:	f8dc 3008 	ldr.w	r3, [ip, #8]
   15972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   15976:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   1597a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
   1597e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   15982:	e6df      	b.n	15744 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15984:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   15988:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   1598c:	2301      	movs	r3, #1
   1598e:	e774      	b.n	1587a <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   15990:	2b00      	cmp	r3, #0
   15992:	f43f af68 	beq.w	15866 <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   15996:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   15998:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1599c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   159a0:	fb01 c20e 	mla	r2, r1, lr, ip
   159a4:	2000      	movs	r0, #0
   159a6:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   159aa:	b18b      	cbz	r3, 159d0 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   159ac:	4a15      	ldr	r2, [pc, #84]	; (15a04 <nrfx_twim_xfer+0x2f0>)
   159ae:	4e16      	ldr	r6, [pc, #88]	; (15a08 <nrfx_twim_xfer+0x2f4>)
   159b0:	f013 0f01 	tst.w	r3, #1
   159b4:	bf18      	it	ne
   159b6:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   159b8:	f013 0f02 	tst.w	r3, #2
   159bc:	f102 0201 	add.w	r2, r2, #1
   159c0:	bf18      	it	ne
   159c2:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   159c4:	f013 0f04 	tst.w	r3, #4
   159c8:	4b10      	ldr	r3, [pc, #64]	; (15a0c <nrfx_twim_xfer+0x2f8>)
   159ca:	bf18      	it	ne
   159cc:	461e      	movne	r6, r3
   159ce:	e6b9      	b.n	15744 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   159d0:	067b      	lsls	r3, r7, #25
   159d2:	f53f aeb7 	bmi.w	15744 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   159d6:	fb0e c101 	mla	r1, lr, r1, ip
   159da:	4620      	mov	r0, r4
   159dc:	f004 fd36 	bl	1a44c <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   159e0:	4b09      	ldr	r3, [pc, #36]	; (15a08 <nrfx_twim_xfer+0x2f4>)
   159e2:	2800      	cmp	r0, #0
   159e4:	bf08      	it	eq
   159e6:	461e      	moveq	r6, r3
   159e8:	e6ac      	b.n	15744 <nrfx_twim_xfer+0x30>
   159ea:	bf00      	nop
   159ec:	20002624 	.word	0x20002624
   159f0:	0bad000a 	.word	0x0bad000a
   159f4:	019c0202 	.word	0x019c0202
   159f8:	0bad000b 	.word	0x0bad000b
   159fc:	0bad0000 	.word	0x0bad0000
   15a00:	0bad0004 	.word	0x0bad0004
   15a04:	0bae0000 	.word	0x0bae0000
   15a08:	0bad0001 	.word	0x0bad0001
   15a0c:	0bae0002 	.word	0x0bae0002

00015a10 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   15a10:	4901      	ldr	r1, [pc, #4]	; (15a18 <nrfx_twim_0_irq_handler+0x8>)
   15a12:	4802      	ldr	r0, [pc, #8]	; (15a1c <nrfx_twim_0_irq_handler+0xc>)
   15a14:	f7ff bd42 	b.w	1549c <twim_irq_handler>
   15a18:	20002624 	.word	0x20002624
   15a1c:	40003000 	.word	0x40003000

00015a20 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   15a20:	4902      	ldr	r1, [pc, #8]	; (15a2c <nrfx_twim_1_irq_handler+0xc>)
   15a22:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   15a26:	f7ff bd39 	b.w	1549c <twim_irq_handler>
   15a2a:	bf00      	nop
   15a2c:	20002658 	.word	0x20002658

00015a30 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   15a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   15a34:	f000 001f 	and.w	r0, r0, #31
   15a38:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15a3c:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
   15a3e:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15a42:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
   15a46:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   15a4a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   15a4e:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15a52:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
   15a54:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
   15a58:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   15a5c:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
   15a60:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   15a64:	2004      	movs	r0, #4
   15a66:	f004 fcd7 	bl	1a418 <nrfx_busy_wait>
   15a6a:	2709      	movs	r7, #9
    return p_reg->IN;
   15a6c:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   15a70:	421c      	tst	r4, r3
   15a72:	d10d      	bne.n	15a90 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   15a74:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   15a76:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
   15a7a:	f004 fccd 	bl	1a418 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   15a7e:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
   15a80:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   15a84:	2004      	movs	r0, #4
   15a86:	f004 fcc7 	bl	1a418 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   15a8a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   15a8e:	d1ed      	bne.n	15a6c <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
   15a90:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   15a94:	2004      	movs	r0, #4
   15a96:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
   15a9a:	f004 fcbd 	bl	1a418 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   15a9e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   15aa2:	2004      	movs	r0, #4
   15aa4:	f004 fcb8 	bl	1a418 <nrfx_busy_wait>
    return p_reg->IN;
   15aa8:	f8d5 1510 	ldr.w	r1, [r5, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
   15aac:	4803      	ldr	r0, [pc, #12]	; (15abc <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   15aae:	fa21 f606 	lsr.w	r6, r1, r6
   15ab2:	f006 0601 	and.w	r6, r6, #1
   15ab6:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   15ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15abc:	0bad0001 	.word	0x0bad0001

00015ac0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   15ac0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   15ac2:	4c14      	ldr	r4, [pc, #80]	; (15b14 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   15ac4:	4a14      	ldr	r2, [pc, #80]	; (15b18 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   15ac6:	4915      	ldr	r1, [pc, #84]	; (15b1c <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   15ac8:	2303      	movs	r3, #3
   15aca:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   15acc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   15ace:	4b14      	ldr	r3, [pc, #80]	; (15b20 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   15ad0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   15ad2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   15ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15ad8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   15ada:	2300      	movs	r3, #0
   15adc:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   15ade:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   15ae0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   15ae2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   15ae4:	4a0f      	ldr	r2, [pc, #60]	; (15b24 <_DoInit+0x64>)
   15ae6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   15ae8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   15aea:	2210      	movs	r2, #16
   15aec:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   15aee:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   15af0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   15af2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   15af4:	f001 ffb9 	bl	17a6a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   15af8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   15afc:	490a      	ldr	r1, [pc, #40]	; (15b28 <_DoInit+0x68>)
   15afe:	4620      	mov	r0, r4
   15b00:	f001 ffb3 	bl	17a6a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   15b04:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   15b08:	2320      	movs	r3, #32
   15b0a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   15b0c:	f3bf 8f5f 	dmb	sy
}
   15b10:	bd10      	pop	{r4, pc}
   15b12:	bf00      	nop
   15b14:	2000268c 	.word	0x2000268c
   15b18:	0001cab2 	.word	0x0001cab2
   15b1c:	0001cabb 	.word	0x0001cabb
   15b20:	200027d0 	.word	0x200027d0
   15b24:	200027c0 	.word	0x200027c0
   15b28:	0001cabf 	.word	0x0001cabf

00015b2c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   15b2c:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   15b2e:	4b16      	ldr	r3, [pc, #88]	; (15b88 <SEGGER_RTT_WriteNoLock+0x5c>)
   15b30:	2418      	movs	r4, #24
   15b32:	fb00 4504 	mla	r5, r0, r4, r4
   15b36:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   15b38:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   15b3c:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   15b3e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   15b40:	2c01      	cmp	r4, #1
   15b42:	d00e      	beq.n	15b62 <SEGGER_RTT_WriteNoLock+0x36>
   15b44:	2c02      	cmp	r4, #2
   15b46:	d018      	beq.n	15b7a <SEGGER_RTT_WriteNoLock+0x4e>
   15b48:	b9e4      	cbnz	r4, 15b84 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   15b4a:	4628      	mov	r0, r5
   15b4c:	f004 fcae 	bl	1a4ac <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   15b50:	4286      	cmp	r6, r0
   15b52:	d804      	bhi.n	15b5e <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   15b54:	4632      	mov	r2, r6
   15b56:	4628      	mov	r0, r5
   15b58:	f004 fcb1 	bl	1a4be <_WriteNoCheck>
   15b5c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   15b5e:	4620      	mov	r0, r4
   15b60:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   15b62:	4628      	mov	r0, r5
   15b64:	f004 fca2 	bl	1a4ac <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   15b68:	4286      	cmp	r6, r0
   15b6a:	4634      	mov	r4, r6
   15b6c:	bf28      	it	cs
   15b6e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   15b70:	4622      	mov	r2, r4
   15b72:	4628      	mov	r0, r5
   15b74:	f004 fca3 	bl	1a4be <_WriteNoCheck>
    break;
   15b78:	e7f1      	b.n	15b5e <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   15b7a:	4628      	mov	r0, r5
}
   15b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   15b80:	f004 bcbb 	b.w	1a4fa <_WriteBlocking>
  switch (pRing->Flags) {
   15b84:	2400      	movs	r4, #0
  return Status;
   15b86:	e7ea      	b.n	15b5e <SEGGER_RTT_WriteNoLock+0x32>
   15b88:	2000268c 	.word	0x2000268c

00015b8c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15b8c:	4b0e      	ldr	r3, [pc, #56]	; (15bc8 <z_sys_init_run_level+0x3c>)
{
   15b8e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15b90:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   15b94:	3001      	adds	r0, #1
   15b96:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   15b9a:	42a6      	cmp	r6, r4
   15b9c:	d800      	bhi.n	15ba0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   15b9e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   15ba0:	e9d4 3500 	ldrd	r3, r5, [r4]
   15ba4:	4628      	mov	r0, r5
   15ba6:	4798      	blx	r3
		if (dev != NULL) {
   15ba8:	b165      	cbz	r5, 15bc4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   15baa:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   15bac:	b130      	cbz	r0, 15bbc <z_sys_init_run_level+0x30>
				if (rc < 0) {
   15bae:	2800      	cmp	r0, #0
   15bb0:	bfb8      	it	lt
   15bb2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   15bb4:	28ff      	cmp	r0, #255	; 0xff
   15bb6:	bfa8      	it	ge
   15bb8:	20ff      	movge	r0, #255	; 0xff
   15bba:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   15bbc:	785a      	ldrb	r2, [r3, #1]
   15bbe:	f042 0201 	orr.w	r2, r2, #1
   15bc2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   15bc4:	3408      	adds	r4, #8
   15bc6:	e7e8      	b.n	15b9a <z_sys_init_run_level+0xe>
   15bc8:	0001c680 	.word	0x0001c680

00015bcc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   15bcc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   15bce:	4605      	mov	r5, r0
   15bd0:	b910      	cbnz	r0, 15bd8 <z_impl_device_get_binding+0xc>
		return NULL;
   15bd2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   15bd4:	4620      	mov	r0, r4
   15bd6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   15bd8:	7803      	ldrb	r3, [r0, #0]
   15bda:	2b00      	cmp	r3, #0
   15bdc:	d0f9      	beq.n	15bd2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   15bde:	4c0e      	ldr	r4, [pc, #56]	; (15c18 <z_impl_device_get_binding+0x4c>)
   15be0:	4e0e      	ldr	r6, [pc, #56]	; (15c1c <z_impl_device_get_binding+0x50>)
   15be2:	42b4      	cmp	r4, r6
   15be4:	d108      	bne.n	15bf8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   15be6:	4c0c      	ldr	r4, [pc, #48]	; (15c18 <z_impl_device_get_binding+0x4c>)
   15be8:	42b4      	cmp	r4, r6
   15bea:	d0f2      	beq.n	15bd2 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15bec:	4620      	mov	r0, r4
   15bee:	f004 fcb8 	bl	1a562 <z_device_is_ready>
   15bf2:	b950      	cbnz	r0, 15c0a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   15bf4:	3418      	adds	r4, #24
   15bf6:	e7f7      	b.n	15be8 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   15bf8:	4620      	mov	r0, r4
   15bfa:	f004 fcb2 	bl	1a562 <z_device_is_ready>
   15bfe:	b110      	cbz	r0, 15c06 <z_impl_device_get_binding+0x3a>
   15c00:	6823      	ldr	r3, [r4, #0]
   15c02:	42ab      	cmp	r3, r5
   15c04:	d0e6      	beq.n	15bd4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   15c06:	3418      	adds	r4, #24
   15c08:	e7eb      	b.n	15be2 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   15c0a:	6821      	ldr	r1, [r4, #0]
   15c0c:	4628      	mov	r0, r5
   15c0e:	f001 ff58 	bl	17ac2 <strcmp>
   15c12:	2800      	cmp	r0, #0
   15c14:	d1ee      	bne.n	15bf4 <z_impl_device_get_binding+0x28>
   15c16:	e7dd      	b.n	15bd4 <z_impl_device_get_binding+0x8>
   15c18:	0001b0a0 	.word	0x0001b0a0
   15c1c:	0001b1d8 	.word	0x0001b1d8

00015c20 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   15c20:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   15c22:	2300      	movs	r3, #0
{
   15c24:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   15c26:	2201      	movs	r2, #1
   15c28:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15c2c:	220f      	movs	r2, #15
   15c2e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   15c32:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   15c34:	4c0c      	ldr	r4, [pc, #48]	; (15c68 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15c36:	4b0d      	ldr	r3, [pc, #52]	; (15c6c <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   15c38:	490d      	ldr	r1, [pc, #52]	; (15c70 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15c3a:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   15c3c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   15c40:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   15c44:	f44f 75b0 	mov.w	r5, #352	; 0x160
   15c48:	9300      	str	r3, [sp, #0]
   15c4a:	fb05 1100 	mla	r1, r5, r0, r1
   15c4e:	4b09      	ldr	r3, [pc, #36]	; (15c74 <init_idle_thread+0x54>)
   15c50:	f44f 72a0 	mov.w	r2, #320	; 0x140
   15c54:	4620      	mov	r0, r4
   15c56:	f000 f909 	bl	15e6c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15c5a:	7b63      	ldrb	r3, [r4, #13]
   15c5c:	f023 0304 	bic.w	r3, r3, #4
   15c60:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   15c62:	b007      	add	sp, #28
   15c64:	bd30      	pop	{r4, r5, pc}
   15c66:	bf00      	nop
   15c68:	20001210 	.word	0x20001210
   15c6c:	20002734 	.word	0x20002734
   15c70:	200038a0 	.word	0x200038a0
   15c74:	00015fe1 	.word	0x00015fe1

00015c78 <bg_thread_main>:
{
   15c78:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   15c7a:	4b0a      	ldr	r3, [pc, #40]	; (15ca4 <bg_thread_main+0x2c>)
   15c7c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   15c7e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   15c80:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   15c82:	f7ff ff83 	bl	15b8c <z_sys_init_run_level>
	boot_banner();
   15c86:	f001 f923 	bl	16ed0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   15c8a:	2003      	movs	r0, #3
   15c8c:	f7ff ff7e 	bl	15b8c <z_sys_init_run_level>
	z_init_static_threads();
   15c90:	f000 f94a 	bl	15f28 <z_init_static_threads>
	main();
   15c94:	f7eb fbb6 	bl	1404 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   15c98:	4a03      	ldr	r2, [pc, #12]	; (15ca8 <bg_thread_main+0x30>)
   15c9a:	7b13      	ldrb	r3, [r2, #12]
   15c9c:	f023 0301 	bic.w	r3, r3, #1
   15ca0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   15ca2:	bd08      	pop	{r3, pc}
   15ca4:	20002bd0 	.word	0x20002bd0
   15ca8:	20001290 	.word	0x20001290

00015cac <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   15cac:	4802      	ldr	r0, [pc, #8]	; (15cb8 <z_bss_zero+0xc>)
   15cae:	4a03      	ldr	r2, [pc, #12]	; (15cbc <z_bss_zero+0x10>)
   15cb0:	2100      	movs	r1, #0
   15cb2:	1a12      	subs	r2, r2, r0
   15cb4:	f001 bf2d 	b.w	17b12 <memset>
   15cb8:	200009f8 	.word	0x200009f8
   15cbc:	20002bd4 	.word	0x20002bd4

00015cc0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   15cc0:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   15cc2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 15d88 <z_cstart+0xc8>
   15cc6:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   15cc8:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   15ccc:	4d2f      	ldr	r5, [pc, #188]	; (15d8c <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   15cce:	4e30      	ldr	r6, [pc, #192]	; (15d90 <z_cstart+0xd0>)
   15cd0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15cd2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 15d94 <z_cstart+0xd4>
   15cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15cda:	2400      	movs	r4, #0
   15cdc:	616b      	str	r3, [r5, #20]
   15cde:	23e0      	movs	r3, #224	; 0xe0
   15ce0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   15ce4:	77ec      	strb	r4, [r5, #31]
   15ce6:	762c      	strb	r4, [r5, #24]
   15ce8:	766c      	strb	r4, [r5, #25]
   15cea:	76ac      	strb	r4, [r5, #26]
   15cec:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   15cf0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15cf2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   15cf6:	626b      	str	r3, [r5, #36]	; 0x24
   15cf8:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   15cfc:	f7ec fca0 	bl	2640 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   15d00:	f7ec fa4e 	bl	21a0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   15d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15d08:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   15d0a:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   15d0c:	f7ec fd76 	bl	27fc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   15d10:	f7ec fcde 	bl	26d0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   15d14:	f240 1301 	movw	r3, #257	; 0x101
   15d18:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   15d1c:	ab06      	add	r3, sp, #24
   15d1e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   15d20:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   15d24:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   15d26:	f004 fc1b 	bl	1a560 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   15d2a:	4620      	mov	r0, r4
   15d2c:	f7ff ff2e 	bl	15b8c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   15d30:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   15d32:	4d19      	ldr	r5, [pc, #100]	; (15d98 <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   15d34:	f7ff ff2a 	bl	15b8c <z_sys_init_run_level>
	z_sched_init();
   15d38:	f000 fdaa 	bl	16890 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15d3c:	4b17      	ldr	r3, [pc, #92]	; (15d9c <z_cstart+0xdc>)
   15d3e:	9305      	str	r3, [sp, #20]
   15d40:	2301      	movs	r3, #1
   15d42:	4917      	ldr	r1, [pc, #92]	; (15da0 <z_cstart+0xe0>)
   15d44:	9400      	str	r4, [sp, #0]
   15d46:	e9cd 4303 	strd	r4, r3, [sp, #12]
   15d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15d4e:	464b      	mov	r3, r9
   15d50:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15d54:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   15d56:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   15d58:	f000 f888 	bl	15e6c <z_setup_new_thread>
   15d5c:	7b6a      	ldrb	r2, [r5, #13]
   15d5e:	4607      	mov	r7, r0
   15d60:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   15d64:	4628      	mov	r0, r5
   15d66:	736a      	strb	r2, [r5, #13]
   15d68:	f004 fed7 	bl	1ab1a <z_ready_thread>
		init_idle_thread(i);
   15d6c:	4620      	mov	r0, r4
   15d6e:	f7ff ff57 	bl	15c20 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   15d72:	4b0c      	ldr	r3, [pc, #48]	; (15da4 <z_cstart+0xe4>)
   15d74:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15d76:	464a      	mov	r2, r9
   15d78:	4639      	mov	r1, r7
   15d7a:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   15d7c:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   15d7e:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   15d82:	f7ec fb31 	bl	23e8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   15d86:	bf00      	nop
   15d88:	20004220 	.word	0x20004220
   15d8c:	e000ed00 	.word	0xe000ed00
   15d90:	20002734 	.word	0x20002734
   15d94:	00015c79 	.word	0x00015c79
   15d98:	20001290 	.word	0x20001290
   15d9c:	0001cac6 	.word	0x0001cac6
   15da0:	20003480 	.word	0x20003480
   15da4:	20001210 	.word	0x20001210

00015da8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   15da8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   15daa:	4c06      	ldr	r4, [pc, #24]	; (15dc4 <statics_init+0x1c>)
   15dac:	4d06      	ldr	r5, [pc, #24]	; (15dc8 <statics_init+0x20>)
   15dae:	42ac      	cmp	r4, r5
   15db0:	d301      	bcc.n	15db6 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   15db2:	2000      	movs	r0, #0
   15db4:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   15db6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   15dba:	4620      	mov	r0, r4
   15dbc:	f004 fc02 	bl	1a5c4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   15dc0:	3414      	adds	r4, #20
   15dc2:	e7f4      	b.n	15dae <statics_init+0x6>
   15dc4:	200008a8 	.word	0x200008a8
   15dc8:	200008a8 	.word	0x200008a8

00015dcc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   15dcc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15dce:	4b0e      	ldr	r3, [pc, #56]	; (15e08 <init_mem_slab_module+0x3c>)
   15dd0:	4c0e      	ldr	r4, [pc, #56]	; (15e0c <init_mem_slab_module+0x40>)
   15dd2:	42a3      	cmp	r3, r4
   15dd4:	d301      	bcc.n	15dda <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   15dd6:	2000      	movs	r0, #0
	return rc;
}
   15dd8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15dda:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   15dde:	ea41 0200 	orr.w	r2, r1, r0
   15de2:	f012 0203 	ands.w	r2, r2, #3
   15de6:	d10b      	bne.n	15e00 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   15de8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   15dea:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   15dec:	42aa      	cmp	r2, r5
   15dee:	d101      	bne.n	15df4 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15df0:	331c      	adds	r3, #28
   15df2:	e7ee      	b.n	15dd2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   15df4:	695e      	ldr	r6, [r3, #20]
   15df6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   15df8:	3201      	adds	r2, #1
		slab->free_list = p;
   15dfa:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   15dfc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   15dfe:	e7f5      	b.n	15dec <init_mem_slab_module+0x20>
	return rc;
   15e00:	f06f 0015 	mvn.w	r0, #21
   15e04:	e7e8      	b.n	15dd8 <init_mem_slab_module+0xc>
   15e06:	bf00      	nop
   15e08:	20000854 	.word	0x20000854
   15e0c:	200008a8 	.word	0x200008a8

00015e10 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   15e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15e12:	460c      	mov	r4, r1
	__asm__ volatile(
   15e14:	f04f 0520 	mov.w	r5, #32
   15e18:	f3ef 8111 	mrs	r1, BASEPRI
   15e1c:	f385 8812 	msr	BASEPRI_MAX, r5
   15e20:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   15e24:	6945      	ldr	r5, [r0, #20]
   15e26:	b15d      	cbz	r5, 15e40 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   15e28:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   15e2a:	682b      	ldr	r3, [r5, #0]
   15e2c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   15e2e:	6983      	ldr	r3, [r0, #24]
   15e30:	3301      	adds	r3, #1
   15e32:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   15e34:	2000      	movs	r0, #0
	__asm__ volatile(
   15e36:	f381 8811 	msr	BASEPRI, r1
   15e3a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   15e3e:	e011      	b.n	15e64 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   15e40:	ea52 0c03 	orrs.w	ip, r2, r3
   15e44:	d103      	bne.n	15e4e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   15e46:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   15e48:	f06f 000b 	mvn.w	r0, #11
   15e4c:	e7f3      	b.n	15e36 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   15e4e:	e9cd 2300 	strd	r2, r3, [sp]
   15e52:	4602      	mov	r2, r0
   15e54:	3008      	adds	r0, #8
   15e56:	f000 fcb9 	bl	167cc <z_pend_curr>
		if (result == 0) {
   15e5a:	b918      	cbnz	r0, 15e64 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   15e5c:	4b02      	ldr	r3, [pc, #8]	; (15e68 <k_mem_slab_alloc+0x58>)
   15e5e:	689b      	ldr	r3, [r3, #8]
   15e60:	695b      	ldr	r3, [r3, #20]
   15e62:	6023      	str	r3, [r4, #0]
}
   15e64:	b003      	add	sp, #12
   15e66:	bd30      	pop	{r4, r5, pc}
   15e68:	20002734 	.word	0x20002734

00015e6c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   15e6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   15e70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   15e72:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   15e74:	2604      	movs	r6, #4
   15e76:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   15e78:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   15e7a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   15e7c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   15e80:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15e82:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   15e84:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   15e8a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15e8c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   15e90:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   15e92:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   15e96:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   15e9a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   15e9c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   15e9e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15ea0:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15ea4:	9202      	str	r2, [sp, #8]
   15ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15ea8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   15eaa:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15eae:	9200      	str	r2, [sp, #0]
   15eb0:	4642      	mov	r2, r8
{
   15eb2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15eb4:	f7ec fa66 	bl	2384 <arch_new_thread>
	if (!_current) {
   15eb8:	4b04      	ldr	r3, [pc, #16]	; (15ecc <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   15eba:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   15ebc:	689b      	ldr	r3, [r3, #8]
   15ebe:	b103      	cbz	r3, 15ec2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   15ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   15ec2:	6763      	str	r3, [r4, #116]	; 0x74
}
   15ec4:	4640      	mov	r0, r8
   15ec6:	b004      	add	sp, #16
   15ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15ecc:	20002734 	.word	0x20002734

00015ed0 <z_impl_k_thread_create>:
{
   15ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ed2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15ed4:	2700      	movs	r7, #0
   15ed6:	9705      	str	r7, [sp, #20]
   15ed8:	9f10      	ldr	r7, [sp, #64]	; 0x40
   15eda:	9704      	str	r7, [sp, #16]
   15edc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   15ede:	9703      	str	r7, [sp, #12]
   15ee0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   15ee2:	9702      	str	r7, [sp, #8]
{
   15ee4:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15ee8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   15eea:	9701      	str	r7, [sp, #4]
   15eec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   15eee:	9700      	str	r7, [sp, #0]
{
   15ef0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15ef2:	f7ff ffbb 	bl	15e6c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   15ef6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   15efa:	bf08      	it	eq
   15efc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   15f00:	d005      	beq.n	15f0e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15f02:	ea55 0306 	orrs.w	r3, r5, r6
   15f06:	d105      	bne.n	15f14 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   15f08:	4620      	mov	r0, r4
   15f0a:	f000 fc03 	bl	16714 <z_sched_start>
}
   15f0e:	4620      	mov	r0, r4
   15f10:	b007      	add	sp, #28
   15f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   15f14:	4903      	ldr	r1, [pc, #12]	; (15f24 <z_impl_k_thread_create+0x54>)
   15f16:	4632      	mov	r2, r6
   15f18:	462b      	mov	r3, r5
   15f1a:	f104 0018 	add.w	r0, r4, #24
   15f1e:	f000 fe45 	bl	16bac <z_add_timeout>
   15f22:	e7f4      	b.n	15f0e <z_impl_k_thread_create+0x3e>
   15f24:	0001ab3b 	.word	0x0001ab3b

00015f28 <z_init_static_threads>:
{
   15f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15f2c:	4c29      	ldr	r4, [pc, #164]	; (15fd4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   15f2e:	4d2a      	ldr	r5, [pc, #168]	; (15fd8 <z_init_static_threads+0xb0>)
{
   15f30:	b087      	sub	sp, #28
   15f32:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   15f34:	42ae      	cmp	r6, r5
   15f36:	f104 0430 	add.w	r4, r4, #48	; 0x30
   15f3a:	d30f      	bcc.n	15f5c <z_init_static_threads+0x34>
	k_sched_lock();
   15f3c:	f000 fb06 	bl	1654c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   15f40:	4c24      	ldr	r4, [pc, #144]	; (15fd4 <z_init_static_threads+0xac>)
   15f42:	f8df 9098 	ldr.w	r9, [pc, #152]	; 15fdc <z_init_static_threads+0xb4>
   15f46:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   15f4a:	f240 37e7 	movw	r7, #999	; 0x3e7
   15f4e:	42ac      	cmp	r4, r5
   15f50:	d320      	bcc.n	15f94 <z_init_static_threads+0x6c>
}
   15f52:	b007      	add	sp, #28
   15f54:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   15f58:	f000 bc7e 	b.w	16858 <k_sched_unlock>
		z_setup_new_thread(
   15f5c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   15f60:	9305      	str	r3, [sp, #20]
   15f62:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15f66:	9304      	str	r3, [sp, #16]
   15f68:	f854 3c14 	ldr.w	r3, [r4, #-20]
   15f6c:	9303      	str	r3, [sp, #12]
   15f6e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   15f72:	9302      	str	r3, [sp, #8]
   15f74:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   15f78:	9301      	str	r3, [sp, #4]
   15f7a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   15f7e:	9300      	str	r3, [sp, #0]
   15f80:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   15f84:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   15f88:	f7ff ff70 	bl	15e6c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   15f8c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   15f90:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   15f92:	e7ce      	b.n	15f32 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   15f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15f96:	1c5a      	adds	r2, r3, #1
   15f98:	d00d      	beq.n	15fb6 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   15f9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15f9e:	2100      	movs	r1, #0
   15fa0:	4638      	mov	r0, r7
   15fa2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15fa6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   15faa:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15fae:	d104      	bne.n	15fba <z_init_static_threads+0x92>
	z_sched_start(thread);
   15fb0:	4640      	mov	r0, r8
   15fb2:	f000 fbaf 	bl	16714 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   15fb6:	3430      	adds	r4, #48	; 0x30
   15fb8:	e7c9      	b.n	15f4e <z_init_static_threads+0x26>
   15fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15fbe:	2300      	movs	r3, #0
   15fc0:	f7ea f88e 	bl	e0 <__aeabi_uldivmod>
   15fc4:	4602      	mov	r2, r0
   15fc6:	460b      	mov	r3, r1
   15fc8:	f108 0018 	add.w	r0, r8, #24
   15fcc:	4649      	mov	r1, r9
   15fce:	f000 fded 	bl	16bac <z_add_timeout>
   15fd2:	e7f0      	b.n	15fb6 <z_init_static_threads+0x8e>
   15fd4:	20000854 	.word	0x20000854
   15fd8:	20000854 	.word	0x20000854
   15fdc:	0001ab3b 	.word	0x0001ab3b

00015fe0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   15fe0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   15fe2:	4c0b      	ldr	r4, [pc, #44]	; (16010 <idle+0x30>)
	return !z_sys_post_kernel;
   15fe4:	4d0b      	ldr	r5, [pc, #44]	; (16014 <idle+0x34>)
	__asm__ volatile(
   15fe6:	f04f 0220 	mov.w	r2, #32
   15fea:	f3ef 8311 	mrs	r3, BASEPRI
   15fee:	f382 8812 	msr	BASEPRI_MAX, r2
   15ff2:	f3bf 8f6f 	isb	sy
   15ff6:	f004 fe47 	bl	1ac88 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   15ffa:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   15ffc:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   15ffe:	b913      	cbnz	r3, 16006 <idle+0x26>
	arch_cpu_idle();
   16000:	f7ec f8d4 	bl	21ac <arch_cpu_idle>
}
   16004:	e7ef      	b.n	15fe6 <idle+0x6>
   16006:	f7eb ff95 	bl	1f34 <pm_system_suspend>
   1600a:	2800      	cmp	r0, #0
   1600c:	d1eb      	bne.n	15fe6 <idle+0x6>
   1600e:	e7f7      	b.n	16000 <idle+0x20>
   16010:	20002734 	.word	0x20002734
   16014:	20002bd0 	.word	0x20002bd0

00016018 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   16018:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1601a:	4611      	mov	r1, r2
   1601c:	f04f 0220 	mov.w	r2, #32
   16020:	f3ef 8511 	mrs	r5, BASEPRI
   16024:	f382 8812 	msr	BASEPRI_MAX, r2
   16028:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1602c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1602e:	b19c      	cbz	r4, 16058 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16030:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16032:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   16034:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   16038:	4294      	cmp	r4, r2
	list->head = node;
   1603a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1603c:	bf08      	it	eq
   1603e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   16040:	2101      	movs	r1, #1
   16042:	4620      	mov	r0, r4
   16044:	f004 fbc3 	bl	1a7ce <z_queue_node_peek>
   16048:	4604      	mov	r4, r0
	__asm__ volatile(
   1604a:	f385 8811 	msr	BASEPRI, r5
   1604e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   16052:	4620      	mov	r0, r4
   16054:	b003      	add	sp, #12
   16056:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16058:	ea51 0203 	orrs.w	r2, r1, r3
   1605c:	d0f5      	beq.n	1604a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1605e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   16062:	e9cd 1300 	strd	r1, r3, [sp]
   16066:	4610      	mov	r0, r2
   16068:	4629      	mov	r1, r5
   1606a:	f000 fbaf 	bl	167cc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1606e:	2800      	cmp	r0, #0
   16070:	d1ef      	bne.n	16052 <z_impl_k_queue_get+0x3a>
   16072:	4b02      	ldr	r3, [pc, #8]	; (1607c <z_impl_k_queue_get+0x64>)
   16074:	689b      	ldr	r3, [r3, #8]
   16076:	695c      	ldr	r4, [r3, #20]
   16078:	e7eb      	b.n	16052 <z_impl_k_queue_get+0x3a>
   1607a:	bf00      	nop
   1607c:	20002734 	.word	0x20002734

00016080 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   16080:	b538      	push	{r3, r4, r5, lr}
   16082:	4604      	mov	r4, r0
	__asm__ volatile(
   16084:	f04f 0320 	mov.w	r3, #32
   16088:	f3ef 8511 	mrs	r5, BASEPRI
   1608c:	f383 8812 	msr	BASEPRI_MAX, r3
   16090:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   16094:	f004 fd9d 	bl	1abd2 <z_unpend_first_thread>

	if (thread != NULL) {
   16098:	b148      	cbz	r0, 160ae <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1609a:	2200      	movs	r2, #0
   1609c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1609e:	f004 fd3c 	bl	1ab1a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   160a2:	4629      	mov	r1, r5
   160a4:	4808      	ldr	r0, [pc, #32]	; (160c8 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   160a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   160aa:	f000 ba3d 	b.w	16528 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   160ae:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   160b2:	429a      	cmp	r2, r3
   160b4:	bf18      	it	ne
   160b6:	3301      	addne	r3, #1
   160b8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   160ba:	2102      	movs	r1, #2
   160bc:	f104 0010 	add.w	r0, r4, #16
   160c0:	f004 ff7f 	bl	1afc2 <z_handle_obj_poll_events>
}
   160c4:	e7ed      	b.n	160a2 <z_impl_k_sem_give+0x22>
   160c6:	bf00      	nop
   160c8:	20002bd1 	.word	0x20002bd1

000160cc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   160cc:	b513      	push	{r0, r1, r4, lr}
   160ce:	f04f 0420 	mov.w	r4, #32
   160d2:	f3ef 8111 	mrs	r1, BASEPRI
   160d6:	f384 8812 	msr	BASEPRI_MAX, r4
   160da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   160de:	6884      	ldr	r4, [r0, #8]
   160e0:	b144      	cbz	r4, 160f4 <z_impl_k_sem_take+0x28>
		sem->count--;
   160e2:	3c01      	subs	r4, #1
   160e4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   160e6:	f381 8811 	msr	BASEPRI, r1
   160ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   160ee:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   160f0:	b002      	add	sp, #8
   160f2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   160f4:	ea52 0403 	orrs.w	r4, r2, r3
   160f8:	d106      	bne.n	16108 <z_impl_k_sem_take+0x3c>
   160fa:	f381 8811 	msr	BASEPRI, r1
   160fe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   16102:	f06f 000f 	mvn.w	r0, #15
   16106:	e7f3      	b.n	160f0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   16108:	e9cd 2300 	strd	r2, r3, [sp]
   1610c:	4602      	mov	r2, r0
   1610e:	4802      	ldr	r0, [pc, #8]	; (16118 <z_impl_k_sem_take+0x4c>)
   16110:	f000 fb5c 	bl	167cc <z_pend_curr>
	return ret;
   16114:	e7ec      	b.n	160f0 <z_impl_k_sem_take+0x24>
   16116:	bf00      	nop
   16118:	20002bd1 	.word	0x20002bd1

0001611c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1611c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1611e:	4b09      	ldr	r3, [pc, #36]	; (16144 <k_sys_work_q_init+0x28>)
   16120:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   16122:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   16124:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   16126:	9300      	str	r3, [sp, #0]
   16128:	4907      	ldr	r1, [pc, #28]	; (16148 <k_sys_work_q_init+0x2c>)
   1612a:	4808      	ldr	r0, [pc, #32]	; (1614c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1612c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   16130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16134:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16138:	f000 f914 	bl	16364 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1613c:	4620      	mov	r0, r4
   1613e:	b004      	add	sp, #16
   16140:	bd10      	pop	{r4, pc}
   16142:	bf00      	nop
   16144:	0001cacb 	.word	0x0001cacb
   16148:	20004220 	.word	0x20004220
   1614c:	20001310 	.word	0x20001310

00016150 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   16150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   16154:	4e47      	ldr	r6, [pc, #284]	; (16274 <work_queue_main+0x124>)
   16156:	b085      	sub	sp, #20
   16158:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1615a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1615e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   16162:	f04f 0320 	mov.w	r3, #32
   16166:	f3ef 8711 	mrs	r7, BASEPRI
   1616a:	f383 8812 	msr	BASEPRI_MAX, r3
   1616e:	f3bf 8f6f 	isb	sy
   16172:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   16176:	b98d      	cbnz	r5, 1619c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   16178:	2102      	movs	r1, #2
   1617a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1617e:	f004 fb9f 	bl	1a8c0 <flag_test_and_clear>
   16182:	2800      	cmp	r0, #0
   16184:	d135      	bne.n	161f2 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   16186:	2300      	movs	r3, #0
   16188:	e9cd 8900 	strd	r8, r9, [sp]
   1618c:	9302      	str	r3, [sp, #8]
   1618e:	f104 0288 	add.w	r2, r4, #136	; 0x88
   16192:	4639      	mov	r1, r7
   16194:	4838      	ldr	r0, [pc, #224]	; (16278 <work_queue_main+0x128>)
   16196:	f000 fc91 	bl	16abc <z_sched_wait>
			continue;
   1619a:	e7e2      	b.n	16162 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1619c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   161a0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   161a2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   161a6:	4295      	cmp	r5, r2
   161a8:	d101      	bne.n	161ae <work_queue_main+0x5e>
	list->tail = node;
   161aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   161ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   161b2:	f043 0302 	orr.w	r3, r3, #2
   161b6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   161ba:	68eb      	ldr	r3, [r5, #12]
   161bc:	f023 0304 	bic.w	r3, r3, #4
   161c0:	f043 0301 	orr.w	r3, r3, #1
   161c4:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   161c6:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   161c8:	f387 8811 	msr	BASEPRI, r7
   161cc:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   161d0:	4628      	mov	r0, r5
   161d2:	4798      	blx	r3
	__asm__ volatile(
   161d4:	f04f 0320 	mov.w	r3, #32
   161d8:	f3ef 8b11 	mrs	fp, BASEPRI
   161dc:	f383 8812 	msr	BASEPRI_MAX, r3
   161e0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   161e4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   161e6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   161e8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   161ec:	d40b      	bmi.n	16206 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   161ee:	60ea      	str	r2, [r5, #12]
   161f0:	e00e      	b.n	16210 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   161f2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   161f6:	2200      	movs	r2, #0
   161f8:	2101      	movs	r1, #1
   161fa:	4628      	mov	r0, r5
   161fc:	f004 fd11 	bl	1ac22 <z_sched_wake>
   16200:	2800      	cmp	r0, #0
   16202:	d1f8      	bne.n	161f6 <work_queue_main+0xa6>
   16204:	e7bf      	b.n	16186 <work_queue_main+0x36>
	return list->head;
   16206:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   16208:	f023 0303 	bic.w	r3, r3, #3
   1620c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1620e:	b970      	cbnz	r0, 1622e <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   16210:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   16214:	f023 0302 	bic.w	r3, r3, #2
   16218:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1621c:	f38b 8811 	msr	BASEPRI, fp
   16220:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   16224:	05d8      	lsls	r0, r3, #23
   16226:	d49c      	bmi.n	16162 <work_queue_main+0x12>
	z_impl_k_yield();
   16228:	f000 fb3e 	bl	168a8 <z_impl_k_yield>
}
   1622c:	e799      	b.n	16162 <work_queue_main+0x12>
	return node->next;
   1622e:	2700      	movs	r7, #0
   16230:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   16234:	463b      	mov	r3, r7
		if (wc->work == work) {
   16236:	6842      	ldr	r2, [r0, #4]
   16238:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1623a:	4601      	mov	r1, r0
		if (wc->work == work) {
   1623c:	d10c      	bne.n	16258 <work_queue_main+0x108>
	return node->next;
   1623e:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   16240:	b997      	cbnz	r7, 16268 <work_queue_main+0x118>
   16242:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   16244:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   16246:	4282      	cmp	r2, r0
   16248:	d100      	bne.n	1624c <work_queue_main+0xfc>
	list->tail = node;
   1624a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1624c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   16250:	f7ff ff16 	bl	16080 <z_impl_k_sem_give>
}
   16254:	4639      	mov	r1, r7
   16256:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   16258:	f1ba 0f00 	cmp.w	sl, #0
   1625c:	d0d8      	beq.n	16210 <work_queue_main+0xc0>
	return node->next;
   1625e:	4650      	mov	r0, sl
   16260:	460f      	mov	r7, r1
   16262:	f8da a000 	ldr.w	sl, [sl]
   16266:	e7e6      	b.n	16236 <work_queue_main+0xe6>
	return list->tail;
   16268:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1626a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1626c:	4290      	cmp	r0, r2
	list->tail = node;
   1626e:	bf08      	it	eq
   16270:	6077      	streq	r7, [r6, #4]
}
   16272:	e7eb      	b.n	1624c <work_queue_main+0xfc>
   16274:	2000275c 	.word	0x2000275c
   16278:	20002bd1 	.word	0x20002bd1

0001627c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1627c:	68c3      	ldr	r3, [r0, #12]
{
   1627e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   16280:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   16284:	079b      	lsls	r3, r3, #30
{
   16286:	4605      	mov	r5, r0
   16288:	460c      	mov	r4, r1
	if (ret) {
   1628a:	d50d      	bpl.n	162a8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1628c:	2201      	movs	r2, #1
   1628e:	2100      	movs	r1, #0
   16290:	f104 0008 	add.w	r0, r4, #8
   16294:	f004 fb04 	bl	1a8a0 <z_impl_k_sem_init>
	parent->next = child;
   16298:	2300      	movs	r3, #0
   1629a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1629c:	4b05      	ldr	r3, [pc, #20]	; (162b4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1629e:	6065      	str	r5, [r4, #4]
   162a0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   162a2:	b91a      	cbnz	r2, 162ac <cancel_sync_locked+0x30>
	list->head = node;
   162a4:	e9c3 4400 	strd	r4, r4, [r3]
}
   162a8:	4630      	mov	r0, r6
   162aa:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   162ac:	6014      	str	r4, [r2, #0]
	list->tail = node;
   162ae:	605c      	str	r4, [r3, #4]
}
   162b0:	e7fa      	b.n	162a8 <cancel_sync_locked+0x2c>
   162b2:	bf00      	nop
   162b4:	2000275c 	.word	0x2000275c

000162b8 <submit_to_queue_locked>:
{
   162b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   162ba:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   162bc:	079a      	lsls	r2, r3, #30
{
   162be:	4604      	mov	r4, r0
   162c0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   162c2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   162c6:	d41f      	bmi.n	16308 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   162c8:	075f      	lsls	r7, r3, #29
   162ca:	d41f      	bmi.n	1630c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   162cc:	680a      	ldr	r2, [r1, #0]
   162ce:	b90a      	cbnz	r2, 162d4 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   162d0:	6882      	ldr	r2, [r0, #8]
   162d2:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   162d4:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   162d6:	bf44      	itt	mi
   162d8:	68a3      	ldrmi	r3, [r4, #8]
   162da:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   162dc:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   162de:	bf4c      	ite	mi
   162e0:	2502      	movmi	r5, #2
		ret = 1;
   162e2:	2501      	movpl	r5, #1
	if (queue == NULL) {
   162e4:	b37f      	cbz	r7, 16346 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   162e6:	4b1b      	ldr	r3, [pc, #108]	; (16354 <submit_to_queue_locked+0x9c>)
   162e8:	689b      	ldr	r3, [r3, #8]
   162ea:	42bb      	cmp	r3, r7
   162ec:	d111      	bne.n	16312 <submit_to_queue_locked+0x5a>
   162ee:	f004 f9f8 	bl	1a6e2 <k_is_in_isr>
   162f2:	f080 0001 	eor.w	r0, r0, #1
   162f6:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   162f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   162fc:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   162fe:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   16302:	d523      	bpl.n	1634c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   16304:	b13a      	cbz	r2, 16316 <submit_to_queue_locked+0x5e>
   16306:	b940      	cbnz	r0, 1631a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   16308:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1630c:	2300      	movs	r3, #0
   1630e:	6033      	str	r3, [r6, #0]
	return ret;
   16310:	e013      	b.n	1633a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   16312:	2000      	movs	r0, #0
   16314:	e7f0      	b.n	162f8 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   16316:	071b      	lsls	r3, r3, #28
   16318:	d4f6      	bmi.n	16308 <submit_to_queue_locked+0x50>
	parent->next = child;
   1631a:	2300      	movs	r3, #0
   1631c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1631e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   16322:	b963      	cbnz	r3, 1633e <submit_to_queue_locked+0x86>
	list->head = node;
   16324:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   16328:	4638      	mov	r0, r7
   1632a:	f004 fae2 	bl	1a8f2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1632e:	68e3      	ldr	r3, [r4, #12]
   16330:	f043 0304 	orr.w	r3, r3, #4
   16334:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   16336:	6833      	ldr	r3, [r6, #0]
   16338:	60a3      	str	r3, [r4, #8]
}
   1633a:	4628      	mov	r0, r5
   1633c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1633e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   16340:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   16344:	e7f0      	b.n	16328 <submit_to_queue_locked+0x70>
		return -EINVAL;
   16346:	f06f 0515 	mvn.w	r5, #21
   1634a:	e7df      	b.n	1630c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1634c:	f06f 0512 	mvn.w	r5, #18
   16350:	e7dc      	b.n	1630c <submit_to_queue_locked+0x54>
   16352:	bf00      	nop
   16354:	20002734 	.word	0x20002734

00016358 <k_work_submit>:
{
   16358:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1635a:	4801      	ldr	r0, [pc, #4]	; (16360 <k_work_submit+0x8>)
   1635c:	f004 bb29 	b.w	1a9b2 <k_work_submit_to_queue>
   16360:	20001310 	.word	0x20001310

00016364 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   16364:	b5f0      	push	{r4, r5, r6, r7, lr}
   16366:	b089      	sub	sp, #36	; 0x24
   16368:	4604      	mov	r4, r0
	list->head = NULL;
   1636a:	2000      	movs	r0, #0
	list->tail = NULL;
   1636c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   16370:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   16372:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   16376:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1637a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1637e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   16382:	b31d      	cbz	r5, 163cc <k_work_queue_start+0x68>
   16384:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   16386:	2800      	cmp	r0, #0
   16388:	f240 1001 	movw	r0, #257	; 0x101
   1638c:	bf08      	it	eq
   1638e:	2001      	moveq	r0, #1
	*flagp = flags;
   16390:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16394:	2000      	movs	r0, #0
   16396:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1639a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1639e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   163a2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   163a6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   163aa:	4b09      	ldr	r3, [pc, #36]	; (163d0 <k_work_queue_start+0x6c>)
   163ac:	9400      	str	r4, [sp, #0]
   163ae:	4620      	mov	r0, r4
   163b0:	f7ff fd8e 	bl	15ed0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   163b4:	b125      	cbz	r5, 163c0 <k_work_queue_start+0x5c>
   163b6:	6829      	ldr	r1, [r5, #0]
   163b8:	b111      	cbz	r1, 163c0 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   163ba:	4620      	mov	r0, r4
   163bc:	f004 f997 	bl	1a6ee <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   163c0:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   163c2:	b009      	add	sp, #36	; 0x24
   163c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   163c8:	f004 b994 	b.w	1a6f4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   163cc:	2001      	movs	r0, #1
   163ce:	e7df      	b.n	16390 <k_work_queue_start+0x2c>
   163d0:	00016151 	.word	0x00016151

000163d4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   163d4:	b513      	push	{r0, r1, r4, lr}
   163d6:	9001      	str	r0, [sp, #4]
   163d8:	4608      	mov	r0, r1
	__asm__ volatile(
   163da:	f04f 0120 	mov.w	r1, #32
   163de:	f3ef 8411 	mrs	r4, BASEPRI
   163e2:	f381 8812 	msr	BASEPRI_MAX, r1
   163e6:	f3bf 8f6f 	isb	sy
	return *flagp;
   163ea:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   163ec:	f011 0f0e 	tst.w	r1, #14
   163f0:	d116      	bne.n	16420 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   163f2:	ea53 0c02 	orrs.w	ip, r3, r2
   163f6:	d108      	bne.n	1640a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   163f8:	a901      	add	r1, sp, #4
   163fa:	f7ff ff5d 	bl	162b8 <submit_to_queue_locked>
	__asm__ volatile(
   163fe:	f384 8811 	msr	BASEPRI, r4
   16402:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   16406:	b002      	add	sp, #8
   16408:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1640a:	f041 0108 	orr.w	r1, r1, #8
   1640e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   16410:	9901      	ldr	r1, [sp, #4]
   16412:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   16414:	3010      	adds	r0, #16
   16416:	4903      	ldr	r1, [pc, #12]	; (16424 <k_work_schedule_for_queue+0x50>)
   16418:	f000 fbc8 	bl	16bac <z_add_timeout>
	return ret;
   1641c:	2001      	movs	r0, #1
   1641e:	e7ee      	b.n	163fe <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   16420:	2000      	movs	r0, #0
   16422:	e7ec      	b.n	163fe <k_work_schedule_for_queue+0x2a>
   16424:	0001a963 	.word	0x0001a963

00016428 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   16428:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1642a:	4801      	ldr	r0, [pc, #4]	; (16430 <k_work_schedule+0x8>)
   1642c:	f7ff bfd2 	b.w	163d4 <k_work_schedule_for_queue>
   16430:	20001310 	.word	0x20001310

00016434 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   16434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16436:	460c      	mov	r4, r1
   16438:	9001      	str	r0, [sp, #4]
   1643a:	4616      	mov	r6, r2
   1643c:	461d      	mov	r5, r3
	__asm__ volatile(
   1643e:	f04f 0320 	mov.w	r3, #32
   16442:	f3ef 8711 	mrs	r7, BASEPRI
   16446:	f383 8812 	msr	BASEPRI_MAX, r3
   1644a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1644e:	4608      	mov	r0, r1
   16450:	f004 fa41 	bl	1a8d6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   16454:	ea55 0306 	orrs.w	r3, r5, r6
   16458:	d109      	bne.n	1646e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1645a:	a901      	add	r1, sp, #4
   1645c:	4620      	mov	r0, r4
   1645e:	f7ff ff2b 	bl	162b8 <submit_to_queue_locked>
	__asm__ volatile(
   16462:	f387 8811 	msr	BASEPRI, r7
   16466:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1646a:	b003      	add	sp, #12
   1646c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1646e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   16470:	4906      	ldr	r1, [pc, #24]	; (1648c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   16472:	f043 0308 	orr.w	r3, r3, #8
   16476:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   16478:	9b01      	ldr	r3, [sp, #4]
   1647a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1647c:	f104 0010 	add.w	r0, r4, #16
   16480:	4632      	mov	r2, r6
   16482:	462b      	mov	r3, r5
   16484:	f000 fb92 	bl	16bac <z_add_timeout>
	return ret;
   16488:	2001      	movs	r0, #1
   1648a:	e7ea      	b.n	16462 <k_work_reschedule_for_queue+0x2e>
   1648c:	0001a963 	.word	0x0001a963

00016490 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   16490:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   16492:	4801      	ldr	r0, [pc, #4]	; (16498 <k_work_reschedule+0x8>)
   16494:	f7ff bfce 	b.w	16434 <k_work_reschedule_for_queue>
   16498:	20001310 	.word	0x20001310

0001649c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1649c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1649e:	4c08      	ldr	r4, [pc, #32]	; (164c0 <z_reset_time_slice+0x24>)
   164a0:	6823      	ldr	r3, [r4, #0]
   164a2:	b15b      	cbz	r3, 164bc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   164a4:	f7fe fa5a 	bl	1495c <sys_clock_elapsed>
   164a8:	4603      	mov	r3, r0
   164aa:	6820      	ldr	r0, [r4, #0]
   164ac:	4a05      	ldr	r2, [pc, #20]	; (164c4 <z_reset_time_slice+0x28>)
   164ae:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   164b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   164b4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   164b6:	2100      	movs	r1, #0
   164b8:	f004 bbf6 	b.w	1aca8 <z_set_timeout_expiry>
}
   164bc:	bd10      	pop	{r4, pc}
   164be:	bf00      	nop
   164c0:	2000276c 	.word	0x2000276c
   164c4:	20002734 	.word	0x20002734

000164c8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   164c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   164ca:	4604      	mov	r4, r0
   164cc:	460d      	mov	r5, r1
	__asm__ volatile(
   164ce:	f04f 0320 	mov.w	r3, #32
   164d2:	f3ef 8611 	mrs	r6, BASEPRI
   164d6:	f383 8812 	msr	BASEPRI_MAX, r3
   164da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   164de:	4b0f      	ldr	r3, [pc, #60]	; (1651c <k_sched_time_slice_set+0x54>)
   164e0:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   164e2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   164e6:	f240 30e7 	movw	r0, #999	; 0x3e7
   164ea:	6119      	str	r1, [r3, #16]
   164ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   164f0:	2300      	movs	r3, #0
   164f2:	fbe4 0107 	umlal	r0, r1, r4, r7
   164f6:	f7e9 fdf3 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   164fa:	2c00      	cmp	r4, #0
   164fc:	4b08      	ldr	r3, [pc, #32]	; (16520 <k_sched_time_slice_set+0x58>)
   164fe:	dc09      	bgt.n	16514 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   16500:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   16502:	4b08      	ldr	r3, [pc, #32]	; (16524 <k_sched_time_slice_set+0x5c>)
   16504:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   16506:	f7ff ffc9 	bl	1649c <z_reset_time_slice>
	__asm__ volatile(
   1650a:	f386 8811 	msr	BASEPRI, r6
   1650e:	f3bf 8f6f 	isb	sy
	}
}
   16512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   16514:	2802      	cmp	r0, #2
   16516:	bfb8      	it	lt
   16518:	2002      	movlt	r0, #2
   1651a:	e7f1      	b.n	16500 <k_sched_time_slice_set+0x38>
   1651c:	20002734 	.word	0x20002734
   16520:	2000276c 	.word	0x2000276c
   16524:	20002768 	.word	0x20002768

00016528 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   16528:	b949      	cbnz	r1, 1653e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1652a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1652e:	b930      	cbnz	r0, 1653e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   16530:	4b05      	ldr	r3, [pc, #20]	; (16548 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   16532:	69da      	ldr	r2, [r3, #28]
   16534:	689b      	ldr	r3, [r3, #8]
   16536:	429a      	cmp	r2, r3
   16538:	d001      	beq.n	1653e <z_reschedule+0x16>
	ret = arch_swap(key);
   1653a:	f7eb becf 	b.w	22dc <arch_swap>
   1653e:	f381 8811 	msr	BASEPRI, r1
   16542:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   16546:	4770      	bx	lr
   16548:	20002734 	.word	0x20002734

0001654c <k_sched_lock>:
	__asm__ volatile(
   1654c:	f04f 0320 	mov.w	r3, #32
   16550:	f3ef 8111 	mrs	r1, BASEPRI
   16554:	f383 8812 	msr	BASEPRI_MAX, r3
   16558:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1655c:	4b04      	ldr	r3, [pc, #16]	; (16570 <k_sched_lock+0x24>)
   1655e:	689a      	ldr	r2, [r3, #8]
   16560:	7bd3      	ldrb	r3, [r2, #15]
   16562:	3b01      	subs	r3, #1
   16564:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   16566:	f381 8811 	msr	BASEPRI, r1
   1656a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1656e:	4770      	bx	lr
   16570:	20002734 	.word	0x20002734

00016574 <update_cache>:
{
   16574:	b538      	push	{r3, r4, r5, lr}
   16576:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   16578:	480c      	ldr	r0, [pc, #48]	; (165ac <update_cache+0x38>)
   1657a:	4d0d      	ldr	r5, [pc, #52]	; (165b0 <update_cache+0x3c>)
   1657c:	f004 fac7 	bl	1ab0e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   16580:	4604      	mov	r4, r0
   16582:	b900      	cbnz	r0, 16586 <update_cache+0x12>
   16584:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   16586:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   16588:	b94a      	cbnz	r2, 1659e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1658a:	7b5a      	ldrb	r2, [r3, #13]
   1658c:	06d2      	lsls	r2, r2, #27
   1658e:	d106      	bne.n	1659e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   16590:	69a2      	ldr	r2, [r4, #24]
   16592:	b922      	cbnz	r2, 1659e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   16594:	89da      	ldrh	r2, [r3, #14]
   16596:	2a7f      	cmp	r2, #127	; 0x7f
   16598:	d901      	bls.n	1659e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1659a:	61eb      	str	r3, [r5, #28]
}
   1659c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1659e:	429c      	cmp	r4, r3
   165a0:	d001      	beq.n	165a6 <update_cache+0x32>
			z_reset_time_slice();
   165a2:	f7ff ff7b 	bl	1649c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   165a6:	61ec      	str	r4, [r5, #28]
}
   165a8:	e7f8      	b.n	1659c <update_cache+0x28>
   165aa:	bf00      	nop
   165ac:	20002754 	.word	0x20002754
   165b0:	20002734 	.word	0x20002734

000165b4 <move_thread_to_end_of_prio_q>:
{
   165b4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   165b6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   165ba:	7b43      	ldrb	r3, [r0, #13]
   165bc:	2a00      	cmp	r2, #0
{
   165be:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   165c0:	da04      	bge.n	165cc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   165c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   165c6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   165c8:	f004 fa5c 	bl	1aa84 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   165cc:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   165ce:	4a15      	ldr	r2, [pc, #84]	; (16624 <move_thread_to_end_of_prio_q+0x70>)
   165d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   165d4:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   165d6:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   165da:	f102 0520 	add.w	r5, r2, #32
   165de:	42ab      	cmp	r3, r5
   165e0:	d01b      	beq.n	1661a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   165e2:	b1d3      	cbz	r3, 1661a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   165e4:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   165e8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   165ec:	4286      	cmp	r6, r0
   165ee:	d00f      	beq.n	16610 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   165f0:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   165f2:	2800      	cmp	r0, #0
   165f4:	dd0c      	ble.n	16610 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   165f6:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   165f8:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   165fc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   165fe:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   16600:	6890      	ldr	r0, [r2, #8]
   16602:	1a43      	subs	r3, r0, r1
   16604:	4258      	negs	r0, r3
}
   16606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1660a:	4158      	adcs	r0, r3
   1660c:	f7ff bfb2 	b.w	16574 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   16610:	42a3      	cmp	r3, r4
   16612:	d002      	beq.n	1661a <move_thread_to_end_of_prio_q+0x66>
   16614:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16616:	2b00      	cmp	r3, #0
   16618:	d1e6      	bne.n	165e8 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1661a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1661e:	6021      	str	r1, [r4, #0]
	list->tail = node;
   16620:	6251      	str	r1, [r2, #36]	; 0x24
}
   16622:	e7ed      	b.n	16600 <move_thread_to_end_of_prio_q+0x4c>
   16624:	20002734 	.word	0x20002734

00016628 <z_time_slice>:
{
   16628:	b538      	push	{r3, r4, r5, lr}
   1662a:	4601      	mov	r1, r0
	__asm__ volatile(
   1662c:	f04f 0320 	mov.w	r3, #32
   16630:	f3ef 8411 	mrs	r4, BASEPRI
   16634:	f383 8812 	msr	BASEPRI_MAX, r3
   16638:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1663c:	4b15      	ldr	r3, [pc, #84]	; (16694 <z_time_slice+0x6c>)
   1663e:	4a16      	ldr	r2, [pc, #88]	; (16698 <z_time_slice+0x70>)
   16640:	6898      	ldr	r0, [r3, #8]
   16642:	6815      	ldr	r5, [r2, #0]
   16644:	42a8      	cmp	r0, r5
   16646:	d106      	bne.n	16656 <z_time_slice+0x2e>
			z_reset_time_slice();
   16648:	f7ff ff28 	bl	1649c <z_reset_time_slice>
	__asm__ volatile(
   1664c:	f384 8811 	msr	BASEPRI, r4
   16650:	f3bf 8f6f 	isb	sy
}
   16654:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   16656:	2500      	movs	r5, #0
   16658:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1665a:	4a10      	ldr	r2, [pc, #64]	; (1669c <z_time_slice+0x74>)
   1665c:	6812      	ldr	r2, [r2, #0]
   1665e:	b1ba      	cbz	r2, 16690 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   16660:	89c2      	ldrh	r2, [r0, #14]
   16662:	2a7f      	cmp	r2, #127	; 0x7f
   16664:	d814      	bhi.n	16690 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   16666:	7b42      	ldrb	r2, [r0, #13]
   16668:	06d2      	lsls	r2, r2, #27
   1666a:	d111      	bne.n	16690 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1666c:	4a0c      	ldr	r2, [pc, #48]	; (166a0 <z_time_slice+0x78>)
   1666e:	f990 500e 	ldrsb.w	r5, [r0, #14]
   16672:	6812      	ldr	r2, [r2, #0]
   16674:	4295      	cmp	r5, r2
   16676:	db0b      	blt.n	16690 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   16678:	4a0a      	ldr	r2, [pc, #40]	; (166a4 <z_time_slice+0x7c>)
   1667a:	4290      	cmp	r0, r2
   1667c:	d008      	beq.n	16690 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   1667e:	691a      	ldr	r2, [r3, #16]
   16680:	428a      	cmp	r2, r1
   16682:	dc02      	bgt.n	1668a <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   16684:	f7ff ff96 	bl	165b4 <move_thread_to_end_of_prio_q>
   16688:	e7de      	b.n	16648 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1668a:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1668c:	611a      	str	r2, [r3, #16]
   1668e:	e7dd      	b.n	1664c <z_time_slice+0x24>
   16690:	2200      	movs	r2, #0
   16692:	e7fb      	b.n	1668c <z_time_slice+0x64>
   16694:	20002734 	.word	0x20002734
   16698:	20002764 	.word	0x20002764
   1669c:	2000276c 	.word	0x2000276c
   166a0:	20002768 	.word	0x20002768
   166a4:	20001210 	.word	0x20001210

000166a8 <ready_thread>:
{
   166a8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   166aa:	f990 200d 	ldrsb.w	r2, [r0, #13]
   166ae:	7b43      	ldrb	r3, [r0, #13]
   166b0:	2a00      	cmp	r2, #0
   166b2:	db2a      	blt.n	1670a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   166b4:	06da      	lsls	r2, r3, #27
   166b6:	d128      	bne.n	1670a <ready_thread+0x62>
   166b8:	6982      	ldr	r2, [r0, #24]
   166ba:	bb32      	cbnz	r2, 1670a <ready_thread+0x62>
	return list->head == list;
   166bc:	4a14      	ldr	r2, [pc, #80]	; (16710 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   166be:	f063 037f 	orn	r3, r3, #127	; 0x7f
   166c2:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   166c4:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   166c8:	f102 0520 	add.w	r5, r2, #32
   166cc:	42ab      	cmp	r3, r5
   166ce:	d017      	beq.n	16700 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   166d0:	b1b3      	cbz	r3, 16700 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   166d2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   166d6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   166da:	428e      	cmp	r6, r1
   166dc:	d00b      	beq.n	166f6 <ready_thread+0x4e>
		return b2 - b1;
   166de:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   166e0:	2900      	cmp	r1, #0
   166e2:	dd08      	ble.n	166f6 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   166e4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   166e6:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   166ea:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   166ec:	6058      	str	r0, [r3, #4]
}
   166ee:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   166f0:	2000      	movs	r0, #0
   166f2:	f7ff bf3f 	b.w	16574 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   166f6:	42a3      	cmp	r3, r4
   166f8:	d002      	beq.n	16700 <ready_thread+0x58>
   166fa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   166fc:	2b00      	cmp	r3, #0
   166fe:	d1ea      	bne.n	166d6 <ready_thread+0x2e>
	node->prev = tail;
   16700:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   16704:	6020      	str	r0, [r4, #0]
	list->tail = node;
   16706:	6250      	str	r0, [r2, #36]	; 0x24
}
   16708:	e7f1      	b.n	166ee <ready_thread+0x46>
}
   1670a:	bc70      	pop	{r4, r5, r6}
   1670c:	4770      	bx	lr
   1670e:	bf00      	nop
   16710:	20002734 	.word	0x20002734

00016714 <z_sched_start>:
{
   16714:	b510      	push	{r4, lr}
	__asm__ volatile(
   16716:	f04f 0220 	mov.w	r2, #32
   1671a:	f3ef 8411 	mrs	r4, BASEPRI
   1671e:	f382 8812 	msr	BASEPRI_MAX, r2
   16722:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   16726:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   16728:	0751      	lsls	r1, r2, #29
   1672a:	d404      	bmi.n	16736 <z_sched_start+0x22>
	__asm__ volatile(
   1672c:	f384 8811 	msr	BASEPRI, r4
   16730:	f3bf 8f6f 	isb	sy
}
   16734:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16736:	f022 0204 	bic.w	r2, r2, #4
   1673a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1673c:	f7ff ffb4 	bl	166a8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   16740:	4621      	mov	r1, r4
   16742:	4802      	ldr	r0, [pc, #8]	; (1674c <z_sched_start+0x38>)
}
   16744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   16748:	f7ff beee 	b.w	16528 <z_reschedule>
   1674c:	20002bd1 	.word	0x20002bd1

00016750 <unready_thread>:
{
   16750:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   16752:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   16756:	7b43      	ldrb	r3, [r0, #13]
   16758:	2a00      	cmp	r2, #0
{
   1675a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1675c:	da04      	bge.n	16768 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1675e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16762:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   16764:	f004 f98e 	bl	1aa84 <sys_dlist_remove>
	update_cache(thread == _current);
   16768:	4b04      	ldr	r3, [pc, #16]	; (1677c <unready_thread+0x2c>)
   1676a:	6898      	ldr	r0, [r3, #8]
   1676c:	1a43      	subs	r3, r0, r1
   1676e:	4258      	negs	r0, r3
   16770:	4158      	adcs	r0, r3
}
   16772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   16776:	f7ff befd 	b.w	16574 <update_cache>
   1677a:	bf00      	nop
   1677c:	20002734 	.word	0x20002734

00016780 <pend>:
{
   16780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16784:	4606      	mov	r6, r0
   16786:	4615      	mov	r5, r2
   16788:	461c      	mov	r4, r3
	__asm__ volatile(
   1678a:	f04f 0320 	mov.w	r3, #32
   1678e:	f3ef 8711 	mrs	r7, BASEPRI
   16792:	f383 8812 	msr	BASEPRI_MAX, r3
   16796:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1679a:	f004 f9f0 	bl	1ab7e <add_to_waitq_locked>
	__asm__ volatile(
   1679e:	f387 8811 	msr	BASEPRI, r7
   167a2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   167a6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   167aa:	bf08      	it	eq
   167ac:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   167b0:	d008      	beq.n	167c4 <pend+0x44>
   167b2:	462a      	mov	r2, r5
   167b4:	4623      	mov	r3, r4
   167b6:	f106 0018 	add.w	r0, r6, #24
   167ba:	4903      	ldr	r1, [pc, #12]	; (167c8 <pend+0x48>)
}
   167bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   167c0:	f000 b9f4 	b.w	16bac <z_add_timeout>
   167c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   167c8:	0001ab3b 	.word	0x0001ab3b

000167cc <z_pend_curr>:
{
   167cc:	b510      	push	{r4, lr}
	pending_current = _current;
   167ce:	4b07      	ldr	r3, [pc, #28]	; (167ec <z_pend_curr+0x20>)
   167d0:	6898      	ldr	r0, [r3, #8]
   167d2:	4b07      	ldr	r3, [pc, #28]	; (167f0 <z_pend_curr+0x24>)
{
   167d4:	460c      	mov	r4, r1
	pending_current = _current;
   167d6:	6018      	str	r0, [r3, #0]
{
   167d8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   167da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   167de:	f7ff ffcf 	bl	16780 <pend>
   167e2:	4620      	mov	r0, r4
}
   167e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   167e8:	f7eb bd78 	b.w	22dc <arch_swap>
   167ec:	20002734 	.word	0x20002734
   167f0:	20002764 	.word	0x20002764

000167f4 <z_impl_k_thread_suspend>:
{
   167f4:	b570      	push	{r4, r5, r6, lr}
   167f6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   167f8:	3018      	adds	r0, #24
   167fa:	f004 fa2f 	bl	1ac5c <z_abort_timeout>
	__asm__ volatile(
   167fe:	f04f 0320 	mov.w	r3, #32
   16802:	f3ef 8611 	mrs	r6, BASEPRI
   16806:	f383 8812 	msr	BASEPRI_MAX, r3
   1680a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1680e:	f994 200d 	ldrsb.w	r2, [r4, #13]
   16812:	7b63      	ldrb	r3, [r4, #13]
   16814:	2a00      	cmp	r2, #0
   16816:	da05      	bge.n	16824 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1681c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1681e:	4620      	mov	r0, r4
   16820:	f004 f930 	bl	1aa84 <sys_dlist_remove>
		update_cache(thread == _current);
   16824:	4d0b      	ldr	r5, [pc, #44]	; (16854 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   16826:	7b63      	ldrb	r3, [r4, #13]
   16828:	68a8      	ldr	r0, [r5, #8]
   1682a:	f043 0310 	orr.w	r3, r3, #16
   1682e:	7363      	strb	r3, [r4, #13]
   16830:	1b03      	subs	r3, r0, r4
   16832:	4258      	negs	r0, r3
   16834:	4158      	adcs	r0, r3
   16836:	f7ff fe9d 	bl	16574 <update_cache>
	__asm__ volatile(
   1683a:	f386 8811 	msr	BASEPRI, r6
   1683e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   16842:	68ab      	ldr	r3, [r5, #8]
   16844:	42a3      	cmp	r3, r4
   16846:	d103      	bne.n	16850 <z_impl_k_thread_suspend+0x5c>
}
   16848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1684c:	f004 b955 	b.w	1aafa <z_reschedule_unlocked>
}
   16850:	bd70      	pop	{r4, r5, r6, pc}
   16852:	bf00      	nop
   16854:	20002734 	.word	0x20002734

00016858 <k_sched_unlock>:
{
   16858:	b510      	push	{r4, lr}
	__asm__ volatile(
   1685a:	f04f 0320 	mov.w	r3, #32
   1685e:	f3ef 8411 	mrs	r4, BASEPRI
   16862:	f383 8812 	msr	BASEPRI_MAX, r3
   16866:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1686a:	4b08      	ldr	r3, [pc, #32]	; (1688c <k_sched_unlock+0x34>)
   1686c:	689a      	ldr	r2, [r3, #8]
   1686e:	7bd3      	ldrb	r3, [r2, #15]
   16870:	3301      	adds	r3, #1
   16872:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   16874:	2000      	movs	r0, #0
   16876:	f7ff fe7d 	bl	16574 <update_cache>
	__asm__ volatile(
   1687a:	f384 8811 	msr	BASEPRI, r4
   1687e:	f3bf 8f6f 	isb	sy
}
   16882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   16886:	f004 b938 	b.w	1aafa <z_reschedule_unlocked>
   1688a:	bf00      	nop
   1688c:	20002734 	.word	0x20002734

00016890 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   16890:	4b04      	ldr	r3, [pc, #16]	; (168a4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   16892:	2100      	movs	r1, #0
   16894:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   16898:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1689c:	4608      	mov	r0, r1
   1689e:	f7ff be13 	b.w	164c8 <k_sched_time_slice_set>
   168a2:	bf00      	nop
   168a4:	20002734 	.word	0x20002734

000168a8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   168a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   168aa:	f04f 0320 	mov.w	r3, #32
   168ae:	f3ef 8511 	mrs	r5, BASEPRI
   168b2:	f383 8812 	msr	BASEPRI_MAX, r3
   168b6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   168ba:	491a      	ldr	r1, [pc, #104]	; (16924 <z_impl_k_yield+0x7c>)
   168bc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   168be:	7b43      	ldrb	r3, [r0, #13]
   168c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   168c4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   168c6:	f004 f8dd 	bl	1aa84 <sys_dlist_remove>
	}
	queue_thread(_current);
   168ca:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   168cc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   168ce:	4608      	mov	r0, r1
   168d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   168d4:	735a      	strb	r2, [r3, #13]
   168d6:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   168da:	4282      	cmp	r2, r0
   168dc:	d01c      	beq.n	16918 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   168de:	b1da      	cbz	r2, 16918 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   168e0:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   168e2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   168e6:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   168ea:	42a6      	cmp	r6, r4
   168ec:	d00f      	beq.n	1690e <z_impl_k_yield+0x66>
		return b2 - b1;
   168ee:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   168f0:	2c00      	cmp	r4, #0
   168f2:	dd0c      	ble.n	1690e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   168f4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   168f6:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   168fa:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   168fc:	6053      	str	r3, [r2, #4]
	update_cache(1);
   168fe:	2001      	movs	r0, #1
   16900:	f7ff fe38 	bl	16574 <update_cache>
   16904:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   16906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1690a:	f7eb bce7 	b.w	22dc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1690e:	42ba      	cmp	r2, r7
   16910:	d002      	beq.n	16918 <z_impl_k_yield+0x70>
   16912:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   16914:	2a00      	cmp	r2, #0
   16916:	d1e6      	bne.n	168e6 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   16918:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   1691a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1691e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16920:	624b      	str	r3, [r1, #36]	; 0x24
}
   16922:	e7ec      	b.n	168fe <z_impl_k_yield+0x56>
   16924:	20002734 	.word	0x20002734

00016928 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   16928:	ea50 0301 	orrs.w	r3, r0, r1
{
   1692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16930:	4605      	mov	r5, r0
   16932:	460e      	mov	r6, r1
	if (ticks == 0) {
   16934:	d103      	bne.n	1693e <z_tick_sleep+0x16>
	z_impl_k_yield();
   16936:	f7ff ffb7 	bl	168a8 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1693a:	2000      	movs	r0, #0
   1693c:	e033      	b.n	169a6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1693e:	f06f 0401 	mvn.w	r4, #1
   16942:	1a24      	subs	r4, r4, r0
   16944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16948:	eb63 0301 	sbc.w	r3, r3, r1
   1694c:	2c01      	cmp	r4, #1
   1694e:	f173 0300 	sbcs.w	r3, r3, #0
   16952:	da02      	bge.n	1695a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   16954:	f004 f9c2 	bl	1acdc <sys_clock_tick_get_32>
   16958:	1944      	adds	r4, r0, r5
   1695a:	f04f 0320 	mov.w	r3, #32
   1695e:	f3ef 8811 	mrs	r8, BASEPRI
   16962:	f383 8812 	msr	BASEPRI_MAX, r3
   16966:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1696a:	4f10      	ldr	r7, [pc, #64]	; (169ac <z_tick_sleep+0x84>)
   1696c:	4b10      	ldr	r3, [pc, #64]	; (169b0 <z_tick_sleep+0x88>)
   1696e:	68b8      	ldr	r0, [r7, #8]
   16970:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   16972:	f7ff feed 	bl	16750 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   16976:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   16978:	490e      	ldr	r1, [pc, #56]	; (169b4 <z_tick_sleep+0x8c>)
   1697a:	462a      	mov	r2, r5
   1697c:	4633      	mov	r3, r6
   1697e:	3018      	adds	r0, #24
   16980:	f000 f914 	bl	16bac <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   16984:	68ba      	ldr	r2, [r7, #8]
   16986:	7b53      	ldrb	r3, [r2, #13]
   16988:	f043 0310 	orr.w	r3, r3, #16
   1698c:	7353      	strb	r3, [r2, #13]
   1698e:	4640      	mov	r0, r8
   16990:	f7eb fca4 	bl	22dc <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   16994:	f004 f9a2 	bl	1acdc <sys_clock_tick_get_32>
   16998:	1a20      	subs	r0, r4, r0
   1699a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1699e:	2801      	cmp	r0, #1
   169a0:	f173 0300 	sbcs.w	r3, r3, #0
   169a4:	dbc9      	blt.n	1693a <z_tick_sleep+0x12>
}
   169a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   169aa:	bf00      	nop
   169ac:	20002734 	.word	0x20002734
   169b0:	20002764 	.word	0x20002764
   169b4:	0001ab3b 	.word	0x0001ab3b

000169b8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   169b8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   169bc:	bf08      	it	eq
   169be:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   169c2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   169c4:	d106      	bne.n	169d4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   169c6:	4b08      	ldr	r3, [pc, #32]	; (169e8 <z_impl_k_sleep+0x30>)
   169c8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   169ca:	f7ff ff13 	bl	167f4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   169ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   169d2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   169d4:	f7ff ffa8 	bl	16928 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   169d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   169dc:	fb80 0303 	smull	r0, r3, r0, r3
   169e0:	0bc0      	lsrs	r0, r0, #15
   169e2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   169e6:	e7f4      	b.n	169d2 <z_impl_k_sleep+0x1a>
   169e8:	20002734 	.word	0x20002734

000169ec <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   169ec:	4b01      	ldr	r3, [pc, #4]	; (169f4 <z_impl_z_current_get+0x8>)
   169ee:	6898      	ldr	r0, [r3, #8]
   169f0:	4770      	bx	lr
   169f2:	bf00      	nop
   169f4:	20002734 	.word	0x20002734

000169f8 <z_impl_k_is_preempt_thread>:
   169f8:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   169fc:	b93b      	cbnz	r3, 16a0e <z_impl_k_is_preempt_thread+0x16>
   169fe:	4b05      	ldr	r3, [pc, #20]	; (16a14 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16a00:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   16a02:	89d8      	ldrh	r0, [r3, #14]
   16a04:	287f      	cmp	r0, #127	; 0x7f
   16a06:	bf8c      	ite	hi
   16a08:	2000      	movhi	r0, #0
   16a0a:	2001      	movls	r0, #1
   16a0c:	4770      	bx	lr
   16a0e:	2000      	movs	r0, #0
}
   16a10:	4770      	bx	lr
   16a12:	bf00      	nop
   16a14:	20002734 	.word	0x20002734

00016a18 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   16a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a1c:	4604      	mov	r4, r0
   16a1e:	f04f 0320 	mov.w	r3, #32
   16a22:	f3ef 8611 	mrs	r6, BASEPRI
   16a26:	f383 8812 	msr	BASEPRI_MAX, r3
   16a2a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   16a2e:	7b43      	ldrb	r3, [r0, #13]
   16a30:	071a      	lsls	r2, r3, #28
   16a32:	d505      	bpl.n	16a40 <z_thread_abort+0x28>
	__asm__ volatile(
   16a34:	f386 8811 	msr	BASEPRI, r6
   16a38:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   16a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   16a40:	f023 0220 	bic.w	r2, r3, #32
   16a44:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   16a48:	09d2      	lsrs	r2, r2, #7
   16a4a:	d120      	bne.n	16a8e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   16a4c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   16a4e:	68a3      	ldr	r3, [r4, #8]
   16a50:	b113      	cbz	r3, 16a58 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   16a52:	4620      	mov	r0, r4
   16a54:	f004 f81e 	bl	1aa94 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   16a58:	f104 0018 	add.w	r0, r4, #24
   16a5c:	f004 f8fe 	bl	1ac5c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   16a60:	f104 0758 	add.w	r7, r4, #88	; 0x58
   16a64:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   16a68:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16a6a:	42bd      	cmp	r5, r7
   16a6c:	d000      	beq.n	16a70 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16a6e:	b9b5      	cbnz	r5, 16a9e <z_thread_abort+0x86>
		update_cache(1);
   16a70:	2001      	movs	r0, #1
   16a72:	f7ff fd7f 	bl	16574 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   16a76:	4b10      	ldr	r3, [pc, #64]	; (16ab8 <z_thread_abort+0xa0>)
   16a78:	689b      	ldr	r3, [r3, #8]
   16a7a:	42a3      	cmp	r3, r4
   16a7c:	d1da      	bne.n	16a34 <z_thread_abort+0x1c>
   16a7e:	f3ef 8305 	mrs	r3, IPSR
   16a82:	2b00      	cmp	r3, #0
   16a84:	d1d6      	bne.n	16a34 <z_thread_abort+0x1c>
   16a86:	4630      	mov	r0, r6
   16a88:	f7eb fc28 	bl	22dc <arch_swap>
	return ret;
   16a8c:	e7d2      	b.n	16a34 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   16a8e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   16a92:	f043 0308 	orr.w	r3, r3, #8
   16a96:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   16a98:	f003 fff4 	bl	1aa84 <sys_dlist_remove>
}
   16a9c:	e7d7      	b.n	16a4e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   16a9e:	4628      	mov	r0, r5
   16aa0:	f003 fff8 	bl	1aa94 <unpend_thread_no_timeout>
   16aa4:	f105 0018 	add.w	r0, r5, #24
   16aa8:	f004 f8d8 	bl	1ac5c <z_abort_timeout>
   16aac:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   16ab0:	4628      	mov	r0, r5
   16ab2:	f7ff fdf9 	bl	166a8 <ready_thread>
   16ab6:	e7d7      	b.n	16a68 <z_thread_abort+0x50>
   16ab8:	20002734 	.word	0x20002734

00016abc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   16abc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   16abe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   16ac2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   16ac4:	e9cd 6700 	strd	r6, r7, [sp]
   16ac8:	f7ff fe80 	bl	167cc <z_pend_curr>

	if (data != NULL) {
   16acc:	b11c      	cbz	r4, 16ad6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   16ace:	4b03      	ldr	r3, [pc, #12]	; (16adc <z_sched_wait+0x20>)
   16ad0:	689b      	ldr	r3, [r3, #8]
   16ad2:	695b      	ldr	r3, [r3, #20]
   16ad4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   16ad6:	b002      	add	sp, #8
   16ad8:	bdd0      	pop	{r4, r6, r7, pc}
   16ada:	bf00      	nop
   16adc:	20002734 	.word	0x20002734

00016ae0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   16ae0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   16ae2:	4806      	ldr	r0, [pc, #24]	; (16afc <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   16ae4:	4a06      	ldr	r2, [pc, #24]	; (16b00 <z_data_copy+0x20>)
   16ae6:	4907      	ldr	r1, [pc, #28]	; (16b04 <z_data_copy+0x24>)
   16ae8:	1a12      	subs	r2, r2, r0
   16aea:	f001 f807 	bl	17afc <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   16aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   16af2:	4a05      	ldr	r2, [pc, #20]	; (16b08 <z_data_copy+0x28>)
   16af4:	4905      	ldr	r1, [pc, #20]	; (16b0c <z_data_copy+0x2c>)
   16af6:	4806      	ldr	r0, [pc, #24]	; (16b10 <z_data_copy+0x30>)
   16af8:	f001 b800 	b.w	17afc <memcpy>
   16afc:	20000000 	.word	0x20000000
   16b00:	200009f8 	.word	0x200009f8
   16b04:	0001cb18 	.word	0x0001cb18
   16b08:	00000000 	.word	0x00000000
   16b0c:	0001cb18 	.word	0x0001cb18
   16b10:	20000000 	.word	0x20000000

00016b14 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   16b14:	4b03      	ldr	r3, [pc, #12]	; (16b24 <elapsed+0x10>)
   16b16:	681b      	ldr	r3, [r3, #0]
   16b18:	b90b      	cbnz	r3, 16b1e <elapsed+0xa>
   16b1a:	f7fd bf1f 	b.w	1495c <sys_clock_elapsed>
}
   16b1e:	2000      	movs	r0, #0
   16b20:	4770      	bx	lr
   16b22:	bf00      	nop
   16b24:	20002770 	.word	0x20002770

00016b28 <next_timeout>:
	return list->head == list;
   16b28:	4b11      	ldr	r3, [pc, #68]	; (16b70 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   16b2a:	b510      	push	{r4, lr}
   16b2c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16b2e:	429c      	cmp	r4, r3
   16b30:	bf08      	it	eq
   16b32:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   16b34:	f7ff ffee 	bl	16b14 <elapsed>
   16b38:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   16b3a:	b16c      	cbz	r4, 16b58 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   16b3c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   16b40:	1ac0      	subs	r0, r0, r3
   16b42:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   16b46:	2801      	cmp	r0, #1
   16b48:	f173 0200 	sbcs.w	r2, r3, #0
   16b4c:	db0d      	blt.n	16b6a <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   16b4e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   16b52:	f173 0300 	sbcs.w	r3, r3, #0
   16b56:	db01      	blt.n	16b5c <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   16b58:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   16b5c:	4b05      	ldr	r3, [pc, #20]	; (16b74 <next_timeout+0x4c>)
   16b5e:	691b      	ldr	r3, [r3, #16]
   16b60:	b113      	cbz	r3, 16b68 <next_timeout+0x40>
   16b62:	4298      	cmp	r0, r3
   16b64:	bfa8      	it	ge
   16b66:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   16b68:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   16b6a:	2000      	movs	r0, #0
   16b6c:	e7f6      	b.n	16b5c <next_timeout+0x34>
   16b6e:	bf00      	nop
   16b70:	20000778 	.word	0x20000778
   16b74:	20002734 	.word	0x20002734

00016b78 <remove_timeout>:
{
   16b78:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   16b7a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16b7c:	b168      	cbz	r0, 16b9a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   16b7e:	4a0a      	ldr	r2, [pc, #40]	; (16ba8 <remove_timeout+0x30>)
   16b80:	6852      	ldr	r2, [r2, #4]
   16b82:	4290      	cmp	r0, r2
   16b84:	d009      	beq.n	16b9a <remove_timeout+0x22>
	if (next(t) != NULL) {
   16b86:	b143      	cbz	r3, 16b9a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   16b88:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   16b8c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   16b90:	1912      	adds	r2, r2, r4
   16b92:	eb41 0105 	adc.w	r1, r1, r5
   16b96:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   16b9a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   16b9c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16b9e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16ba0:	2300      	movs	r3, #0
	node->prev = NULL;
   16ba2:	e9c0 3300 	strd	r3, r3, [r0]
}
   16ba6:	bd30      	pop	{r4, r5, pc}
   16ba8:	20000778 	.word	0x20000778

00016bac <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   16bb0:	bf08      	it	eq
   16bb2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   16bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bb8:	4604      	mov	r4, r0
   16bba:	461f      	mov	r7, r3
   16bbc:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   16bbe:	d067      	beq.n	16c90 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   16bc0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   16bc2:	f04f 0320 	mov.w	r3, #32
   16bc6:	f3ef 8611 	mrs	r6, BASEPRI
   16bca:	f383 8812 	msr	BASEPRI_MAX, r3
   16bce:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   16bd2:	f06f 0201 	mvn.w	r2, #1
   16bd6:	1b53      	subs	r3, r2, r5
   16bd8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   16bdc:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   16be0:	2b00      	cmp	r3, #0
   16be2:	db1b      	blt.n	16c1c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   16be4:	4b2b      	ldr	r3, [pc, #172]	; (16c94 <z_add_timeout+0xe8>)
   16be6:	e9d3 1300 	ldrd	r1, r3, [r3]
   16bea:	1a52      	subs	r2, r2, r1
   16bec:	eb6c 0303 	sbc.w	r3, ip, r3
   16bf0:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   16bf2:	eb63 0307 	sbc.w	r3, r3, r7
   16bf6:	2d01      	cmp	r5, #1
   16bf8:	f173 0200 	sbcs.w	r2, r3, #0
   16bfc:	bfbc      	itt	lt
   16bfe:	2501      	movlt	r5, #1
   16c00:	2300      	movlt	r3, #0
   16c02:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   16c06:	4824      	ldr	r0, [pc, #144]	; (16c98 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   16c08:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c0c:	4283      	cmp	r3, r0
   16c0e:	d118      	bne.n	16c42 <z_add_timeout+0x96>
	node->prev = tail;
   16c10:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   16c14:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   16c18:	6044      	str	r4, [r0, #4]
}
   16c1a:	e026      	b.n	16c6a <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   16c1c:	f7ff ff7a 	bl	16b14 <elapsed>
   16c20:	3501      	adds	r5, #1
   16c22:	f147 0700 	adc.w	r7, r7, #0
   16c26:	182d      	adds	r5, r5, r0
   16c28:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   16c2c:	e9c4 5704 	strd	r5, r7, [r4, #16]
   16c30:	e7e9      	b.n	16c06 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   16c32:	1a52      	subs	r2, r2, r1
   16c34:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   16c38:	459c      	cmp	ip, r3
   16c3a:	e9c4 2504 	strd	r2, r5, [r4, #16]
   16c3e:	d0e7      	beq.n	16c10 <z_add_timeout+0x64>
   16c40:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   16c42:	2b00      	cmp	r3, #0
   16c44:	d0e4      	beq.n	16c10 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   16c46:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   16c4a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   16c4e:	428a      	cmp	r2, r1
   16c50:	eb75 0e07 	sbcs.w	lr, r5, r7
   16c54:	daed      	bge.n	16c32 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   16c56:	1a8a      	subs	r2, r1, r2
   16c58:	eb67 0505 	sbc.w	r5, r7, r5
   16c5c:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   16c60:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   16c62:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   16c66:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   16c68:	605c      	str	r4, [r3, #4]
	return list->head == list;
   16c6a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c6c:	4283      	cmp	r3, r0
   16c6e:	d00b      	beq.n	16c88 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   16c70:	429c      	cmp	r4, r3
   16c72:	d109      	bne.n	16c88 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   16c74:	f7ff ff58 	bl	16b28 <next_timeout>

			if (next_time == 0 ||
   16c78:	b118      	cbz	r0, 16c82 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   16c7a:	4b08      	ldr	r3, [pc, #32]	; (16c9c <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   16c7c:	691b      	ldr	r3, [r3, #16]
   16c7e:	4283      	cmp	r3, r0
   16c80:	d002      	beq.n	16c88 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   16c82:	2100      	movs	r1, #0
   16c84:	f7fd fe38 	bl	148f8 <sys_clock_set_timeout>
	__asm__ volatile(
   16c88:	f386 8811 	msr	BASEPRI, r6
   16c8c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   16c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c92:	bf00      	nop
   16c94:	200013b0 	.word	0x200013b0
   16c98:	20000778 	.word	0x20000778
   16c9c:	20002734 	.word	0x20002734

00016ca0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   16ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16ca4:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   16ca6:	f7ff fcbf 	bl	16628 <z_time_slice>
	__asm__ volatile(
   16caa:	f04f 0320 	mov.w	r3, #32
   16cae:	f3ef 8411 	mrs	r4, BASEPRI
   16cb2:	f383 8812 	msr	BASEPRI_MAX, r3
   16cb6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   16cba:	4e24      	ldr	r6, [pc, #144]	; (16d4c <sys_clock_announce+0xac>)
	return list->head == list;
   16cbc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 16d50 <sys_clock_announce+0xb0>
   16cc0:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   16cc2:	4d24      	ldr	r5, [pc, #144]	; (16d54 <sys_clock_announce+0xb4>)
   16cc4:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   16cc8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16cca:	4540      	cmp	r0, r8
		curr_tick += dt;
   16ccc:	e9d5 1e00 	ldrd	r1, lr, [r5]
   16cd0:	ea4f 77e2 	mov.w	r7, r2, asr #31
   16cd4:	d00b      	beq.n	16cee <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   16cd6:	b150      	cbz	r0, 16cee <sys_clock_announce+0x4e>
   16cd8:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   16cdc:	429a      	cmp	r2, r3
   16cde:	eb77 090c 	sbcs.w	r9, r7, ip
   16ce2:	da16      	bge.n	16d12 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   16ce4:	1a9b      	subs	r3, r3, r2
   16ce6:	eb6c 0c07 	sbc.w	ip, ip, r7
   16cea:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   16cee:	1852      	adds	r2, r2, r1
   16cf0:	eb4e 0707 	adc.w	r7, lr, r7
   16cf4:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   16cf8:	2500      	movs	r5, #0
   16cfa:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   16cfc:	f7ff ff14 	bl	16b28 <next_timeout>
   16d00:	4629      	mov	r1, r5
   16d02:	f7fd fdf9 	bl	148f8 <sys_clock_set_timeout>
	__asm__ volatile(
   16d06:	f384 8811 	msr	BASEPRI, r4
   16d0a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   16d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   16d12:	1859      	adds	r1, r3, r1
   16d14:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   16d18:	1ad3      	subs	r3, r2, r3
   16d1a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   16d1c:	2200      	movs	r2, #0
   16d1e:	2300      	movs	r3, #0
   16d20:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   16d24:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   16d28:	f7ff ff26 	bl	16b78 <remove_timeout>
   16d2c:	f384 8811 	msr	BASEPRI, r4
   16d30:	f3bf 8f6f 	isb	sy
		t->fn(t);
   16d34:	6883      	ldr	r3, [r0, #8]
   16d36:	4798      	blx	r3
	__asm__ volatile(
   16d38:	f04f 0320 	mov.w	r3, #32
   16d3c:	f3ef 8411 	mrs	r4, BASEPRI
   16d40:	f383 8812 	msr	BASEPRI_MAX, r3
   16d44:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   16d48:	e7bc      	b.n	16cc4 <sys_clock_announce+0x24>
   16d4a:	bf00      	nop
   16d4c:	20002770 	.word	0x20002770
   16d50:	20000778 	.word	0x20000778
   16d54:	200013b0 	.word	0x200013b0

00016d58 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   16d58:	b510      	push	{r4, lr}
   16d5a:	f04f 0320 	mov.w	r3, #32
   16d5e:	f3ef 8411 	mrs	r4, BASEPRI
   16d62:	f383 8812 	msr	BASEPRI_MAX, r3
   16d66:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   16d6a:	f7fd fdf7 	bl	1495c <sys_clock_elapsed>
   16d6e:	4a05      	ldr	r2, [pc, #20]	; (16d84 <sys_clock_tick_get+0x2c>)
   16d70:	e9d2 3100 	ldrd	r3, r1, [r2]
   16d74:	18c0      	adds	r0, r0, r3
   16d76:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   16d7a:	f384 8811 	msr	BASEPRI, r4
   16d7e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   16d82:	bd10      	pop	{r4, pc}
   16d84:	200013b0 	.word	0x200013b0

00016d88 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   16d88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16d8c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   16d8e:	4b29      	ldr	r3, [pc, #164]	; (16e34 <z_impl_k_poll+0xac>)
   16d90:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   16d92:	2301      	movs	r3, #1
   16d94:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   16d98:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   16d9c:	ea52 0305 	orrs.w	r3, r2, r5
{
   16da0:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   16da2:	bf0c      	ite	eq
   16da4:	2301      	moveq	r3, #1
   16da6:	2300      	movne	r3, #0
   16da8:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   16dac:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   16dae:	f003 fff9 	bl	1ada4 <register_events>
   16db2:	4681      	mov	r9, r0
	__asm__ volatile(
   16db4:	f04f 0320 	mov.w	r3, #32
   16db8:	f3ef 8a11 	mrs	sl, BASEPRI
   16dbc:	f383 8812 	msr	BASEPRI_MAX, r3
   16dc0:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   16dc4:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   16dc8:	b964      	cbnz	r4, 16de4 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   16dca:	4601      	mov	r1, r0
   16dcc:	4652      	mov	r2, sl
   16dce:	4640      	mov	r0, r8
   16dd0:	f004 f8b9 	bl	1af46 <clear_event_registrations>
	__asm__ volatile(
   16dd4:	f38a 8811 	msr	BASEPRI, sl
   16dd8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   16ddc:	4620      	mov	r0, r4
   16dde:	b002      	add	sp, #8
   16de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   16de4:	2300      	movs	r3, #0
   16de6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16dea:	ea56 0305 	orrs.w	r3, r6, r5
   16dee:	d106      	bne.n	16dfe <z_impl_k_poll+0x76>
   16df0:	f38a 8811 	msr	BASEPRI, sl
   16df4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   16df8:	f06f 040a 	mvn.w	r4, #10
   16dfc:	e7ee      	b.n	16ddc <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   16dfe:	e9cd 6500 	strd	r6, r5, [sp]
   16e02:	4a0d      	ldr	r2, [pc, #52]	; (16e38 <z_impl_k_poll+0xb0>)
   16e04:	480d      	ldr	r0, [pc, #52]	; (16e3c <z_impl_k_poll+0xb4>)
   16e06:	4651      	mov	r1, sl
   16e08:	f7ff fce0 	bl	167cc <z_pend_curr>
   16e0c:	4604      	mov	r4, r0
	__asm__ volatile(
   16e0e:	f04f 0320 	mov.w	r3, #32
   16e12:	f3ef 8511 	mrs	r5, BASEPRI
   16e16:	f383 8812 	msr	BASEPRI_MAX, r3
   16e1a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   16e1e:	462a      	mov	r2, r5
   16e20:	4649      	mov	r1, r9
   16e22:	4640      	mov	r0, r8
   16e24:	f004 f88f 	bl	1af46 <clear_event_registrations>
	__asm__ volatile(
   16e28:	f385 8811 	msr	BASEPRI, r5
   16e2c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   16e30:	e7d4      	b.n	16ddc <z_impl_k_poll+0x54>
   16e32:	bf00      	nop
   16e34:	20002734 	.word	0x20002734
   16e38:	20000780 	.word	0x20000780
   16e3c:	20002bd1 	.word	0x20002bd1

00016e40 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   16e40:	b538      	push	{r3, r4, r5, lr}
   16e42:	4603      	mov	r3, r0
	__asm__ volatile(
   16e44:	f04f 0220 	mov.w	r2, #32
   16e48:	f3ef 8511 	mrs	r5, BASEPRI
   16e4c:	f382 8812 	msr	BASEPRI_MAX, r2
   16e50:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   16e54:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   16e56:	2101      	movs	r1, #1
   16e58:	6081      	str	r1, [r0, #8]
	return list->head == list;
   16e5a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   16e5c:	4283      	cmp	r3, r0
   16e5e:	d106      	bne.n	16e6e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   16e60:	f385 8811 	msr	BASEPRI, r5
   16e64:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   16e68:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   16e6a:	4620      	mov	r0, r4
   16e6c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   16e6e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   16e72:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16e74:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   16e76:	2300      	movs	r3, #0
	node->prev = NULL;
   16e78:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16e7c:	f004 f809 	bl	1ae92 <signal_poll_event>
	z_reschedule(&lock, key);
   16e80:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   16e82:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   16e84:	4801      	ldr	r0, [pc, #4]	; (16e8c <z_impl_k_poll_signal_raise+0x4c>)
   16e86:	f7ff fb4f 	bl	16528 <z_reschedule>
	return rc;
   16e8a:	e7ee      	b.n	16e6a <z_impl_k_poll_signal_raise+0x2a>
   16e8c:	20002bd1 	.word	0x20002bd1

00016e90 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   16e90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16e92:	4606      	mov	r6, r0
   16e94:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   16e96:	f003 fc24 	bl	1a6e2 <k_is_in_isr>
   16e9a:	b978      	cbnz	r0, 16ebc <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   16e9c:	4b0b      	ldr	r3, [pc, #44]	; (16ecc <z_thread_aligned_alloc+0x3c>)
   16e9e:	689b      	ldr	r3, [r3, #8]
   16ea0:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   16ea2:	b17c      	cbz	r4, 16ec4 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   16ea4:	1d2a      	adds	r2, r5, #4
   16ea6:	d209      	bcs.n	16ebc <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   16ea8:	2000      	movs	r0, #0
   16eaa:	2100      	movs	r1, #0
   16eac:	e9cd 0100 	strd	r0, r1, [sp]
   16eb0:	f046 0104 	orr.w	r1, r6, #4
   16eb4:	4620      	mov	r0, r4
   16eb6:	f003 fb8d 	bl	1a5d4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   16eba:	b908      	cbnz	r0, 16ec0 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   16ebc:	2400      	movs	r4, #0
	}

	return ret;
   16ebe:	e001      	b.n	16ec4 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   16ec0:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   16ec2:	1d04      	adds	r4, r0, #4
}
   16ec4:	4620      	mov	r0, r4
   16ec6:	b002      	add	sp, #8
   16ec8:	bd70      	pop	{r4, r5, r6, pc}
   16eca:	bf00      	nop
   16ecc:	20002734 	.word	0x20002734

00016ed0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   16ed0:	4a02      	ldr	r2, [pc, #8]	; (16edc <boot_banner+0xc>)
   16ed2:	4903      	ldr	r1, [pc, #12]	; (16ee0 <boot_banner+0x10>)
   16ed4:	4803      	ldr	r0, [pc, #12]	; (16ee4 <boot_banner+0x14>)
   16ed6:	f000 b84a 	b.w	16f6e <printk>
   16eda:	bf00      	nop
   16edc:	0001c8d4 	.word	0x0001c8d4
   16ee0:	0001cad4 	.word	0x0001cad4
   16ee4:	0001caf0 	.word	0x0001caf0

00016ee8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   16ee8:	4770      	bx	lr

00016eea <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   16eea:	4603      	mov	r3, r0
   16eec:	b140      	cbz	r0, 16f00 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16eee:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   16ef0:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   16ef4:	2a02      	cmp	r2, #2
   16ef6:	d006      	beq.n	16f06 <sys_notify_validate+0x1c>
   16ef8:	2a03      	cmp	r2, #3
   16efa:	d004      	beq.n	16f06 <sys_notify_validate+0x1c>
   16efc:	2a01      	cmp	r2, #1
   16efe:	d005      	beq.n	16f0c <sys_notify_validate+0x22>
		return -EINVAL;
   16f00:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   16f04:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   16f06:	681a      	ldr	r2, [r3, #0]
   16f08:	2a00      	cmp	r2, #0
   16f0a:	d0f9      	beq.n	16f00 <sys_notify_validate+0x16>
		notify->result = 0;
   16f0c:	2000      	movs	r0, #0
   16f0e:	6098      	str	r0, [r3, #8]
   16f10:	4770      	bx	lr

00016f12 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   16f12:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   16f14:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   16f18:	2a02      	cmp	r2, #2
{
   16f1a:	b510      	push	{r4, lr}
   16f1c:	4603      	mov	r3, r0
	notify->result = res;
   16f1e:	6081      	str	r1, [r0, #8]
	switch (method) {
   16f20:	d00a      	beq.n	16f38 <sys_notify_finalize+0x26>
   16f22:	2a03      	cmp	r2, #3
   16f24:	d10b      	bne.n	16f3e <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   16f26:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   16f28:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   16f2a:	2200      	movs	r2, #0
   16f2c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   16f2e:	b108      	cbz	r0, 16f34 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   16f30:	f7ff ff86 	bl	16e40 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   16f34:	4620      	mov	r0, r4
   16f36:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   16f38:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   16f3a:	2400      	movs	r4, #0
		break;
   16f3c:	e7f5      	b.n	16f2a <sys_notify_finalize+0x18>
	switch (method) {
   16f3e:	2400      	movs	r4, #0
   16f40:	4620      	mov	r0, r4
   16f42:	e7f2      	b.n	16f2a <sys_notify_finalize+0x18>

00016f44 <arch_printk_char_out>:
}
   16f44:	2000      	movs	r0, #0
   16f46:	4770      	bx	lr

00016f48 <str_out>:
{
   16f48:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   16f4a:	688a      	ldr	r2, [r1, #8]
   16f4c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   16f4e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   16f50:	b114      	cbz	r4, 16f58 <str_out+0x10>
   16f52:	684b      	ldr	r3, [r1, #4]
   16f54:	4293      	cmp	r3, r2
   16f56:	dc01      	bgt.n	16f5c <str_out+0x14>
		ctx->count++;
   16f58:	608d      	str	r5, [r1, #8]
}
   16f5a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   16f5c:	3b01      	subs	r3, #1
   16f5e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   16f60:	bf08      	it	eq
   16f62:	2200      	moveq	r2, #0
   16f64:	608d      	str	r5, [r1, #8]
   16f66:	bf0c      	ite	eq
   16f68:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   16f6a:	54a0      	strbne	r0, [r4, r2]
   16f6c:	e7f5      	b.n	16f5a <str_out+0x12>

00016f6e <printk>:
{
   16f6e:	b40f      	push	{r0, r1, r2, r3}
   16f70:	b507      	push	{r0, r1, r2, lr}
   16f72:	a904      	add	r1, sp, #16
   16f74:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   16f78:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   16f7a:	f7ea fa89 	bl	1490 <vprintk>
}
   16f7e:	b003      	add	sp, #12
   16f80:	f85d eb04 	ldr.w	lr, [sp], #4
   16f84:	b004      	add	sp, #16
   16f86:	4770      	bx	lr

00016f88 <snprintk>:
{
   16f88:	b40c      	push	{r2, r3}
   16f8a:	b507      	push	{r0, r1, r2, lr}
   16f8c:	ab04      	add	r3, sp, #16
   16f8e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   16f92:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   16f94:	f7ea fa8a 	bl	14ac <vsnprintk>
}
   16f98:	b003      	add	sp, #12
   16f9a:	f85d eb04 	ldr.w	lr, [sp], #4
   16f9e:	b002      	add	sp, #8
   16fa0:	4770      	bx	lr

00016fa2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   16fa2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   16fa4:	f013 0307 	ands.w	r3, r3, #7
   16fa8:	d105      	bne.n	16fb6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   16faa:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   16fac:	2b00      	cmp	r3, #0
   16fae:	bf0c      	ite	eq
   16fb0:	2000      	moveq	r0, #0
   16fb2:	2003      	movne	r0, #3
   16fb4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   16fb6:	2b02      	cmp	r3, #2
   16fb8:	d105      	bne.n	16fc6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   16fba:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   16fbc:	2b00      	cmp	r3, #0
   16fbe:	bf14      	ite	ne
   16fc0:	2000      	movne	r0, #0
   16fc2:	2004      	moveq	r0, #4
   16fc4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   16fc6:	2b01      	cmp	r3, #1
   16fc8:	d105      	bne.n	16fd6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   16fca:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   16fcc:	2b00      	cmp	r3, #0
   16fce:	bf0c      	ite	eq
   16fd0:	2000      	moveq	r0, #0
   16fd2:	2005      	movne	r0, #5
   16fd4:	4770      	bx	lr
	int evt = EVT_NOP;
   16fd6:	2000      	movs	r0, #0
}
   16fd8:	4770      	bx	lr

00016fda <notify_one>:
{
   16fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16fde:	460d      	mov	r5, r1
   16fe0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   16fe2:	4619      	mov	r1, r3
   16fe4:	1d28      	adds	r0, r5, #4
{
   16fe6:	4690      	mov	r8, r2
   16fe8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   16fea:	f7ff ff92 	bl	16f12 <sys_notify_finalize>
	if (cb) {
   16fee:	4604      	mov	r4, r0
   16ff0:	b138      	cbz	r0, 17002 <notify_one+0x28>
		cb(mgr, cli, state, res);
   16ff2:	4633      	mov	r3, r6
   16ff4:	4642      	mov	r2, r8
   16ff6:	4629      	mov	r1, r5
   16ff8:	4638      	mov	r0, r7
   16ffa:	46a4      	mov	ip, r4
}
   16ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   17000:	4760      	bx	ip
}
   17002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017006 <transition_complete>:
{
   17006:	b410      	push	{r4}
	__asm__ volatile(
   17008:	f04f 0420 	mov.w	r4, #32
   1700c:	f3ef 8211 	mrs	r2, BASEPRI
   17010:	f384 8812 	msr	BASEPRI_MAX, r4
   17014:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   17018:	6141      	str	r1, [r0, #20]
}
   1701a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1701c:	2101      	movs	r1, #1
   1701e:	f7ea ba59 	b.w	14d4 <process_event>

00017022 <validate_args>:
{
   17022:	b510      	push	{r4, lr}
   17024:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   17026:	b140      	cbz	r0, 1703a <validate_args+0x18>
   17028:	b139      	cbz	r1, 1703a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1702a:	1d08      	adds	r0, r1, #4
   1702c:	f7ff ff5d 	bl	16eea <sys_notify_validate>
	if ((rv == 0)
   17030:	b928      	cbnz	r0, 1703e <validate_args+0x1c>
	    && ((cli->notify.flags
   17032:	68a3      	ldr	r3, [r4, #8]
   17034:	f033 0303 	bics.w	r3, r3, #3
   17038:	d001      	beq.n	1703e <validate_args+0x1c>
		rv = -EINVAL;
   1703a:	f06f 0015 	mvn.w	r0, #21
}
   1703e:	bd10      	pop	{r4, pc}

00017040 <onoff_manager_init>:
{
   17040:	b538      	push	{r3, r4, r5, lr}
   17042:	460c      	mov	r4, r1
	if ((mgr == NULL)
   17044:	4605      	mov	r5, r0
   17046:	b158      	cbz	r0, 17060 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   17048:	b151      	cbz	r1, 17060 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1704a:	680b      	ldr	r3, [r1, #0]
   1704c:	b143      	cbz	r3, 17060 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1704e:	684b      	ldr	r3, [r1, #4]
   17050:	b133      	cbz	r3, 17060 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   17052:	221c      	movs	r2, #28
   17054:	2100      	movs	r1, #0
   17056:	f000 fd5c 	bl	17b12 <memset>
   1705a:	612c      	str	r4, [r5, #16]
	return 0;
   1705c:	2000      	movs	r0, #0
}
   1705e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   17060:	f06f 0015 	mvn.w	r0, #21
   17064:	e7fb      	b.n	1705e <onoff_manager_init+0x1e>

00017066 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   17066:	b570      	push	{r4, r5, r6, lr}
   17068:	4604      	mov	r4, r0
   1706a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1706c:	f7ff ffd9 	bl	17022 <validate_args>

	if (rv < 0) {
   17070:	1e05      	subs	r5, r0, #0
   17072:	db31      	blt.n	170d8 <onoff_request+0x72>
   17074:	f04f 0320 	mov.w	r3, #32
   17078:	f3ef 8111 	mrs	r1, BASEPRI
   1707c:	f383 8812 	msr	BASEPRI_MAX, r3
   17080:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   17084:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   17086:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   17088:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1708c:	42ab      	cmp	r3, r5
   1708e:	f000 0207 	and.w	r2, r0, #7
   17092:	d02e      	beq.n	170f2 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   17094:	2a02      	cmp	r2, #2
   17096:	d10e      	bne.n	170b6 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   17098:	3301      	adds	r3, #1
   1709a:	8363      	strh	r3, [r4, #26]
	rv = state;
   1709c:	4615      	mov	r5, r2
		notify = true;
   1709e:	2301      	movs	r3, #1
	__asm__ volatile(
   170a0:	f381 8811 	msr	BASEPRI, r1
   170a4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   170a8:	b1b3      	cbz	r3, 170d8 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   170aa:	2300      	movs	r3, #0
   170ac:	4631      	mov	r1, r6
   170ae:	4620      	mov	r0, r4
   170b0:	f7ff ff93 	bl	16fda <notify_one>
   170b4:	e010      	b.n	170d8 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   170b6:	0783      	lsls	r3, r0, #30
   170b8:	d001      	beq.n	170be <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   170ba:	2a06      	cmp	r2, #6
   170bc:	d10e      	bne.n	170dc <onoff_request+0x76>
	parent->next = child;
   170be:	2300      	movs	r3, #0
   170c0:	6033      	str	r3, [r6, #0]
	return list->tail;
   170c2:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   170c4:	b993      	cbnz	r3, 170ec <onoff_request+0x86>
	list->head = node;
   170c6:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   170ca:	4615      	mov	r5, r2
   170cc:	b962      	cbnz	r2, 170e8 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   170ce:	460a      	mov	r2, r1
   170d0:	4620      	mov	r0, r4
   170d2:	2102      	movs	r1, #2
   170d4:	f7ea f9fe 	bl	14d4 <process_event>
		}
	}

	return rv;
}
   170d8:	4628      	mov	r0, r5
   170da:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   170dc:	2a05      	cmp	r2, #5
   170de:	bf0c      	ite	eq
   170e0:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   170e4:	f06f 0504 	mvnne.w	r5, #4
   170e8:	2300      	movs	r3, #0
   170ea:	e7d9      	b.n	170a0 <onoff_request+0x3a>
	parent->next = child;
   170ec:	601e      	str	r6, [r3, #0]
	list->tail = node;
   170ee:	6066      	str	r6, [r4, #4]
}
   170f0:	e7eb      	b.n	170ca <onoff_request+0x64>
		rv = -EAGAIN;
   170f2:	f06f 050a 	mvn.w	r5, #10
   170f6:	e7f7      	b.n	170e8 <onoff_request+0x82>

000170f8 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   170f8:	b510      	push	{r4, lr}
	__asm__ volatile(
   170fa:	f04f 0320 	mov.w	r3, #32
   170fe:	f3ef 8211 	mrs	r2, BASEPRI
   17102:	f383 8812 	msr	BASEPRI_MAX, r3
   17106:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1710a:	8b04      	ldrh	r4, [r0, #24]
   1710c:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   17110:	2c02      	cmp	r4, #2
   17112:	d00a      	beq.n	1712a <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   17114:	2c01      	cmp	r4, #1
   17116:	bf0c      	ite	eq
   17118:	f06f 0004 	mvneq.w	r0, #4
   1711c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   17120:	f382 8811 	msr	BASEPRI, r2
   17124:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   17128:	e008      	b.n	1713c <onoff_release+0x44>
	mgr->refs -= 1U;
   1712a:	8b43      	ldrh	r3, [r0, #26]
   1712c:	3b01      	subs	r3, #1
   1712e:	b29b      	uxth	r3, r3
   17130:	8343      	strh	r3, [r0, #26]
	if (stop) {
   17132:	b923      	cbnz	r3, 1713e <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   17134:	4621      	mov	r1, r4
   17136:	f7ea f9cd 	bl	14d4 <process_event>
	int rv = state;
   1713a:	4620      	mov	r0, r4
}
   1713c:	bd10      	pop	{r4, pc}
	int rv = state;
   1713e:	4620      	mov	r0, r4
   17140:	e7ee      	b.n	17120 <onoff_release+0x28>

00017142 <onoff_sync_lock>:
	__asm__ volatile(
   17142:	f04f 0220 	mov.w	r2, #32
   17146:	f3ef 8311 	mrs	r3, BASEPRI
   1714a:	f382 8812 	msr	BASEPRI_MAX, r2
   1714e:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
   17152:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
   17154:	600b      	str	r3, [r1, #0]
}
   17156:	4770      	bx	lr

00017158 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
   17158:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
   1715a:	6804      	ldr	r4, [r0, #0]
   1715c:	2c00      	cmp	r4, #0
		srv->count = 0;
   1715e:	bfbc      	itt	lt
   17160:	2400      	movlt	r4, #0
   17162:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
   17164:	2b00      	cmp	r3, #0
{
   17166:	460d      	mov	r5, r1
   17168:	4611      	mov	r1, r2
   1716a:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
   1716e:	da0c      	bge.n	1718a <onoff_sync_finalize+0x32>
		srv->count = res;
   17170:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
   17172:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
   17174:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
   17176:	f385 8811 	msr	BASEPRI, r5
   1717a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
   1717e:	b111      	cbz	r1, 17186 <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
   17180:	2000      	movs	r0, #0
   17182:	f7ff ff2a 	bl	16fda <notify_one>
	}

	return rv;
}
   17186:	4620      	mov	r0, r4
   17188:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
   1718a:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
   1718c:	b11a      	cbz	r2, 17196 <onoff_sync_finalize+0x3e>
		srv->count += 1;
   1718e:	3401      	adds	r4, #1
		srv->count -= 1;
   17190:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
   17192:	2202      	movs	r2, #2
   17194:	e7ee      	b.n	17174 <onoff_sync_finalize+0x1c>
		srv->count -= 1;
   17196:	3c01      	subs	r4, #1
   17198:	e7fa      	b.n	17190 <onoff_sync_finalize+0x38>

0001719a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1719a:	4604      	mov	r4, r0
   1719c:	b508      	push	{r3, lr}
   1719e:	4608      	mov	r0, r1
   171a0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   171a2:	461a      	mov	r2, r3
   171a4:	47a0      	blx	r4
	return z_impl_z_current_get();
   171a6:	f7ff fc21 	bl	169ec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   171aa:	f7eb fa7f 	bl	26ac <z_impl_k_thread_abort>

000171ae <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   171ae:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   171b2:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   171b4:	0840      	lsrs	r0, r0, #1
   171b6:	4770      	bx	lr

000171b8 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   171b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   171ba:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   171bc:	f7ff fff7 	bl	171ae <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   171c0:	fab0 f080 	clz	r0, r0
   171c4:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   171c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   171cc:	00ca      	lsls	r2, r1, #3
   171ce:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   171d2:	1d17      	adds	r7, r2, #4
{
   171d4:	460c      	mov	r4, r1
   171d6:	3206      	adds	r2, #6
   171d8:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   171da:	b956      	cbnz	r6, 171f2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   171dc:	2101      	movs	r1, #1
   171de:	fa01 f000 	lsl.w	r0, r1, r0
   171e2:	68d9      	ldr	r1, [r3, #12]
   171e4:	4301      	orrs	r1, r0
   171e6:	60d9      	str	r1, [r3, #12]
		b->next = c;
   171e8:	f8cc 4010 	str.w	r4, [ip, #16]
   171ec:	53dd      	strh	r5, [r3, r7]
   171ee:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   171f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   171f2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   171f4:	3104      	adds	r1, #4
   171f6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   171f8:	53d8      	strh	r0, [r3, r7]
   171fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   171fe:	529e      	strh	r6, [r3, r2]
   17200:	80c5      	strh	r5, [r0, #6]
   17202:	525d      	strh	r5, [r3, r1]
   17204:	e7f4      	b.n	171f0 <free_list_add+0x38>

00017206 <free_list_remove_bidx>:
{
   17206:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   17208:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1720c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1720e:	4299      	cmp	r1, r3
   17210:	f102 0104 	add.w	r1, r2, #4
   17214:	d10a      	bne.n	1722c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   17216:	2301      	movs	r3, #1
   17218:	fa03 f202 	lsl.w	r2, r3, r2
   1721c:	68c3      	ldr	r3, [r0, #12]
   1721e:	ea23 0302 	bic.w	r3, r3, r2
   17222:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   17224:	2300      	movs	r3, #0
   17226:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1722a:	bd10      	pop	{r4, pc}
   1722c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1722e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   17232:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   17236:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1723a:	80cb      	strh	r3, [r1, #6]
   1723c:	8082      	strh	r2, [r0, #4]
}
   1723e:	e7f4      	b.n	1722a <free_list_remove_bidx+0x24>

00017240 <free_list_remove>:
{
   17240:	b508      	push	{r3, lr}
   17242:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   17244:	f7ff ffb3 	bl	171ae <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   17248:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1724c:	f1c2 021f 	rsb	r2, r2, #31
   17250:	4618      	mov	r0, r3
}
   17252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   17256:	f7ff bfd6 	b.w	17206 <free_list_remove_bidx>

0001725a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1725a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1725e:	fab1 f581 	clz	r5, r1
   17262:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   17266:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   1726a:	4603      	mov	r3, r0
	if (b->next) {
   1726c:	693a      	ldr	r2, [r7, #16]
{
   1726e:	460e      	mov	r6, r1
	if (b->next) {
   17270:	b1c2      	cbz	r2, 172a4 <alloc_chunk+0x4a>
   17272:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   17276:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   17278:	4618      	mov	r0, r3
   1727a:	4621      	mov	r1, r4
   1727c:	f7ff ff97 	bl	171ae <chunk_size>
   17280:	42b0      	cmp	r0, r6
   17282:	d306      	bcc.n	17292 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   17284:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   17286:	4618      	mov	r0, r3
   17288:	f7ff ffbd 	bl	17206 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1728c:	4620      	mov	r0, r4
   1728e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   17292:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   17296:	f1b8 0801 	subs.w	r8, r8, #1
   1729a:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   1729c:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   1729e:	d001      	beq.n	172a4 <alloc_chunk+0x4a>
   172a0:	4282      	cmp	r2, r0
   172a2:	d1e8      	bne.n	17276 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   172a4:	f1c5 0220 	rsb	r2, r5, #32
   172a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   172ac:	4094      	lsls	r4, r2
   172ae:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   172b0:	4014      	ands	r4, r2
   172b2:	d0eb      	beq.n	1728c <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   172b4:	fa94 f2a4 	rbit	r2, r4
   172b8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   172bc:	1d11      	adds	r1, r2, #4
   172be:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   172c2:	4621      	mov	r1, r4
   172c4:	e7df      	b.n	17286 <alloc_chunk+0x2c>

000172c6 <merge_chunks>:
{
   172c6:	b538      	push	{r3, r4, r5, lr}
   172c8:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   172ca:	f7ff ff70 	bl	171ae <chunk_size>
{
   172ce:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   172d0:	4604      	mov	r4, r0
   172d2:	4611      	mov	r1, r2
   172d4:	4618      	mov	r0, r3
   172d6:	f7ff ff6a 	bl	171ae <chunk_size>
		((uint16_t *)cmem)[f] = val;
   172da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   172de:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   172e0:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   172e2:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   172e4:	4618      	mov	r0, r3
   172e6:	f7ff ff62 	bl	171ae <chunk_size>
	void *cmem = &buf[c];
   172ea:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   172ec:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   172f0:	bd38      	pop	{r3, r4, r5, pc}

000172f2 <split_chunks>:
{
   172f2:	b538      	push	{r3, r4, r5, lr}
   172f4:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   172f6:	f7ff ff5a 	bl	171ae <chunk_size>
{
   172fa:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   172fc:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   172fe:	1a51      	subs	r1, r2, r1
   17300:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   17304:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17306:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   17308:	8060      	strh	r0, [r4, #2]
   1730a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1730e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   17310:	8044      	strh	r4, [r0, #2]
   17312:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   17316:	4618      	mov	r0, r3
   17318:	4611      	mov	r1, r2
   1731a:	f7ff ff48 	bl	171ae <chunk_size>
	void *cmem = &buf[c];
   1731e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   17320:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   17324:	bd38      	pop	{r3, r4, r5, pc}

00017326 <free_chunk>:
{
   17326:	b538      	push	{r3, r4, r5, lr}
   17328:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1732a:	f7ff ff40 	bl	171ae <chunk_size>
   1732e:	460c      	mov	r4, r1
   17330:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   17332:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   17336:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   17338:	07da      	lsls	r2, r3, #31
   1733a:	d40a      	bmi.n	17352 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1733c:	4628      	mov	r0, r5
   1733e:	f7ff ff7f 	bl	17240 <free_list_remove>
	return c + chunk_size(h, c);
   17342:	4621      	mov	r1, r4
   17344:	4628      	mov	r0, r5
   17346:	f7ff ff32 	bl	171ae <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1734a:	1822      	adds	r2, r4, r0
   1734c:	4628      	mov	r0, r5
   1734e:	f7ff ffba 	bl	172c6 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   17352:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   17356:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   17358:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1735c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1735e:	07db      	lsls	r3, r3, #31
   17360:	d40c      	bmi.n	1737c <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   17362:	4628      	mov	r0, r5
   17364:	f7ff ff6c 	bl	17240 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   17368:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1736c:	4622      	mov	r2, r4
   1736e:	1a61      	subs	r1, r4, r1
   17370:	4628      	mov	r0, r5
   17372:	f7ff ffa8 	bl	172c6 <merge_chunks>
   17376:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1737a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1737c:	4621      	mov	r1, r4
   1737e:	4628      	mov	r0, r5
}
   17380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   17384:	f7ff bf18 	b.w	171b8 <free_list_add>

00017388 <sys_heap_free>:
	if (mem == NULL) {
   17388:	b161      	cbz	r1, 173a4 <sys_heap_free+0x1c>
   1738a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1738c:	3904      	subs	r1, #4
   1738e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   17390:	f021 0307 	bic.w	r3, r1, #7
   17394:	4403      	add	r3, r0
	free_chunk(h, c);
   17396:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   17398:	885a      	ldrh	r2, [r3, #2]
   1739a:	f022 0201 	bic.w	r2, r2, #1
   1739e:	805a      	strh	r2, [r3, #2]
   173a0:	f7ff bfc1 	b.w	17326 <free_chunk>
}
   173a4:	4770      	bx	lr

000173a6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   173a6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   173a8:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   173aa:	b909      	cbnz	r1, 173b0 <sys_heap_alloc+0xa>
		return NULL;
   173ac:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   173ae:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   173b0:	68ab      	ldr	r3, [r5, #8]
   173b2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   173b6:	d9f9      	bls.n	173ac <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   173b8:	310b      	adds	r1, #11
   173ba:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   173bc:	4621      	mov	r1, r4
   173be:	4628      	mov	r0, r5
   173c0:	f7ff ff4b 	bl	1725a <alloc_chunk>
	if (c == 0U) {
   173c4:	4606      	mov	r6, r0
   173c6:	2800      	cmp	r0, #0
   173c8:	d0f0      	beq.n	173ac <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   173ca:	4601      	mov	r1, r0
   173cc:	4628      	mov	r0, r5
   173ce:	f7ff feee 	bl	171ae <chunk_size>
   173d2:	42a0      	cmp	r0, r4
   173d4:	d907      	bls.n	173e6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   173d6:	1932      	adds	r2, r6, r4
   173d8:	4628      	mov	r0, r5
   173da:	f7ff ff8a 	bl	172f2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   173de:	4611      	mov	r1, r2
   173e0:	4628      	mov	r0, r5
   173e2:	f7ff fee9 	bl	171b8 <free_list_add>
	void *cmem = &buf[c];
   173e6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   173ea:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   173ec:	8853      	ldrh	r3, [r2, #2]
   173ee:	f043 0301 	orr.w	r3, r3, #1
   173f2:	8053      	strh	r3, [r2, #2]
   173f4:	3004      	adds	r0, #4
	return mem;
   173f6:	e7da      	b.n	173ae <sys_heap_alloc+0x8>

000173f8 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   173f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   173fc:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   173fe:	424a      	negs	r2, r1
   17400:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   17404:	ea31 0202 	bics.w	r2, r1, r2
{
   17408:	4603      	mov	r3, r0
	if (align != rew) {
   1740a:	d00a      	beq.n	17422 <sys_heap_aligned_alloc+0x2a>
		return false;
   1740c:	2f04      	cmp	r7, #4
   1740e:	463a      	mov	r2, r7
   17410:	46b9      	mov	r9, r7
   17412:	bf28      	it	cs
   17414:	2204      	movcs	r2, #4
		align -= rew;
   17416:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   17418:	b974      	cbnz	r4, 17438 <sys_heap_aligned_alloc+0x40>
		return NULL;
   1741a:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   1741c:	4628      	mov	r0, r5
   1741e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   17422:	2904      	cmp	r1, #4
   17424:	d804      	bhi.n	17430 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   17426:	4621      	mov	r1, r4
}
   17428:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1742c:	f7ff bfbb 	b.w	173a6 <sys_heap_alloc>
		rew = 0;
   17430:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   17434:	2204      	movs	r2, #4
   17436:	e7ef      	b.n	17418 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   17438:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   1743a:	68b3      	ldr	r3, [r6, #8]
   1743c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   17440:	d9eb      	bls.n	1741a <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   17442:	f104 010b 	add.w	r1, r4, #11
   17446:	4439      	add	r1, r7
   17448:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1744a:	08c9      	lsrs	r1, r1, #3
   1744c:	4630      	mov	r0, r6
   1744e:	f7ff ff04 	bl	1725a <alloc_chunk>
	if (c0 == 0) {
   17452:	4680      	mov	r8, r0
   17454:	2800      	cmp	r0, #0
   17456:	d0e0      	beq.n	1741a <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   17458:	f109 0504 	add.w	r5, r9, #4
   1745c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   17460:	1e7b      	subs	r3, r7, #1
   17462:	4435      	add	r5, r6
   17464:	441d      	add	r5, r3
   17466:	427f      	negs	r7, r7
   17468:	403d      	ands	r5, r7
   1746a:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1746e:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17470:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   17472:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17474:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   17476:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1747a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1747c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   17480:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   17484:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   17488:	d208      	bcs.n	1749c <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   1748a:	4601      	mov	r1, r0
   1748c:	463a      	mov	r2, r7
   1748e:	4630      	mov	r0, r6
   17490:	f7ff ff2f 	bl	172f2 <split_chunks>
		free_list_add(h, c0);
   17494:	4641      	mov	r1, r8
   17496:	4630      	mov	r0, r6
   17498:	f7ff fe8e 	bl	171b8 <free_list_add>
	return c + chunk_size(h, c);
   1749c:	4639      	mov	r1, r7
   1749e:	4630      	mov	r0, r6
   174a0:	f7ff fe85 	bl	171ae <chunk_size>
   174a4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   174a6:	4284      	cmp	r4, r0
   174a8:	d207      	bcs.n	174ba <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   174aa:	4630      	mov	r0, r6
   174ac:	4622      	mov	r2, r4
   174ae:	f7ff ff20 	bl	172f2 <split_chunks>
		free_list_add(h, c_end);
   174b2:	4621      	mov	r1, r4
   174b4:	4630      	mov	r0, r6
   174b6:	f7ff fe7f 	bl	171b8 <free_list_add>
	void *cmem = &buf[c];
   174ba:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   174be:	8873      	ldrh	r3, [r6, #2]
   174c0:	f043 0301 	orr.w	r3, r3, #1
   174c4:	8073      	strh	r3, [r6, #2]
   174c6:	e7a9      	b.n	1741c <sys_heap_aligned_alloc+0x24>

000174c8 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   174c8:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   174ca:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   174cc:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   174ce:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   174d2:	f021 0107 	bic.w	r1, r1, #7
{
   174d6:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   174d8:	1acd      	subs	r5, r1, r3
   174da:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   174dc:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   174de:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   174e2:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   174e6:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   174e8:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   174ea:	2600      	movs	r6, #0
   174ec:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   174ee:	f1c0 0020 	rsb	r0, r0, #32
   174f2:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   174f6:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   174f8:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   174fa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   174fe:	4284      	cmp	r4, r0
   17500:	d118      	bne.n	17534 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17502:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17504:	f040 0001 	orr.w	r0, r0, #1
   17508:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   1750a:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1750e:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   17510:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   17512:	801e      	strh	r6, [r3, #0]
   17514:	8067      	strh	r7, [r4, #2]
   17516:	195c      	adds	r4, r3, r5
   17518:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   1751c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   17520:	8066      	strh	r6, [r4, #2]
   17522:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   17524:	8850      	ldrh	r0, [r2, #2]
   17526:	f040 0001 	orr.w	r0, r0, #1
   1752a:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1752c:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1752e:	4618      	mov	r0, r3
   17530:	f7ff be42 	b.w	171b8 <free_list_add>
		h->buckets[i].next = 0;
   17534:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   17538:	e7e1      	b.n	174fe <sys_heap_init+0x36>

0001753a <encode_uint>:
{
   1753a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1753e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   17540:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   17542:	2b6f      	cmp	r3, #111	; 0x6f
{
   17544:	4680      	mov	r8, r0
   17546:	460f      	mov	r7, r1
   17548:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1754a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1754e:	d029      	beq.n	175a4 <encode_uint+0x6a>
   17550:	d824      	bhi.n	1759c <encode_uint+0x62>
		return 16;
   17552:	2b58      	cmp	r3, #88	; 0x58
   17554:	bf14      	ite	ne
   17556:	260a      	movne	r6, #10
   17558:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1755a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1755e:	4632      	mov	r2, r6
   17560:	2300      	movs	r3, #0
   17562:	4640      	mov	r0, r8
   17564:	4639      	mov	r1, r7
   17566:	f7e8 fdbb 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1756a:	2a09      	cmp	r2, #9
   1756c:	b2d4      	uxtb	r4, r2
   1756e:	d81e      	bhi.n	175ae <encode_uint+0x74>
   17570:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   17572:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   17574:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   17576:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1757a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1757e:	d301      	bcc.n	17584 <encode_uint+0x4a>
   17580:	45d1      	cmp	r9, sl
   17582:	d811      	bhi.n	175a8 <encode_uint+0x6e>
	if (conv->flag_hash) {
   17584:	782b      	ldrb	r3, [r5, #0]
   17586:	069b      	lsls	r3, r3, #26
   17588:	d505      	bpl.n	17596 <encode_uint+0x5c>
		if (radix == 8) {
   1758a:	2e08      	cmp	r6, #8
   1758c:	d115      	bne.n	175ba <encode_uint+0x80>
			conv->altform_0 = true;
   1758e:	78ab      	ldrb	r3, [r5, #2]
   17590:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   17594:	70ab      	strb	r3, [r5, #2]
}
   17596:	4648      	mov	r0, r9
   17598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1759c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   175a0:	2b70      	cmp	r3, #112	; 0x70
   175a2:	e7d7      	b.n	17554 <encode_uint+0x1a>
	switch (specifier) {
   175a4:	2608      	movs	r6, #8
   175a6:	e7d8      	b.n	1755a <encode_uint+0x20>
		value /= radix;
   175a8:	4680      	mov	r8, r0
   175aa:	460f      	mov	r7, r1
   175ac:	e7d7      	b.n	1755e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   175ae:	f1bb 0f19 	cmp.w	fp, #25
   175b2:	bf94      	ite	ls
   175b4:	3437      	addls	r4, #55	; 0x37
   175b6:	3457      	addhi	r4, #87	; 0x57
   175b8:	e7db      	b.n	17572 <encode_uint+0x38>
		} else if (radix == 16) {
   175ba:	2e10      	cmp	r6, #16
   175bc:	d1eb      	bne.n	17596 <encode_uint+0x5c>
			conv->altform_0c = true;
   175be:	78ab      	ldrb	r3, [r5, #2]
   175c0:	f043 0310 	orr.w	r3, r3, #16
   175c4:	e7e6      	b.n	17594 <encode_uint+0x5a>

000175c6 <outs>:
{
   175c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175ca:	4607      	mov	r7, r0
   175cc:	4688      	mov	r8, r1
   175ce:	4615      	mov	r5, r2
   175d0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   175d2:	4614      	mov	r4, r2
   175d4:	42b4      	cmp	r4, r6
   175d6:	eba4 0005 	sub.w	r0, r4, r5
   175da:	d302      	bcc.n	175e2 <outs+0x1c>
   175dc:	b93e      	cbnz	r6, 175ee <outs+0x28>
   175de:	7823      	ldrb	r3, [r4, #0]
   175e0:	b12b      	cbz	r3, 175ee <outs+0x28>
		int rc = out((int)*sp++, ctx);
   175e2:	f814 0b01 	ldrb.w	r0, [r4], #1
   175e6:	4641      	mov	r1, r8
   175e8:	47b8      	blx	r7
		if (rc < 0) {
   175ea:	2800      	cmp	r0, #0
   175ec:	daf2      	bge.n	175d4 <outs+0xe>
}
   175ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000175f2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   175f2:	4770      	bx	lr

000175f4 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   175f4:	b538      	push	{r3, r4, r5, lr}
   175f6:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   175f8:	42ab      	cmp	r3, r5
{
   175fa:	4611      	mov	r1, r2
   175fc:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   175fe:	d804      	bhi.n	1760a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   17600:	461a      	mov	r2, r3
   17602:	f000 fa7b 	bl	17afc <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   17606:	4620      	mov	r0, r4
   17608:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1760a:	2400      	movs	r4, #0
   1760c:	e7fb      	b.n	17606 <_copy+0x12>

0001760e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1760e:	f000 ba80 	b.w	17b12 <memset>

00017612 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   17612:	09c3      	lsrs	r3, r0, #7
   17614:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17618:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1761c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   17620:	b2c0      	uxtb	r0, r0
   17622:	4770      	bx	lr

00017624 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   17624:	78cb      	ldrb	r3, [r1, #3]
   17626:	7802      	ldrb	r2, [r0, #0]
   17628:	4053      	eors	r3, r2
   1762a:	7003      	strb	r3, [r0, #0]
   1762c:	884b      	ldrh	r3, [r1, #2]
   1762e:	7842      	ldrb	r2, [r0, #1]
   17630:	4053      	eors	r3, r2
   17632:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   17634:	680a      	ldr	r2, [r1, #0]
   17636:	7883      	ldrb	r3, [r0, #2]
   17638:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1763c:	7083      	strb	r3, [r0, #2]
   1763e:	680a      	ldr	r2, [r1, #0]
   17640:	78c3      	ldrb	r3, [r0, #3]
   17642:	4053      	eors	r3, r2
   17644:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   17646:	79cb      	ldrb	r3, [r1, #7]
   17648:	7902      	ldrb	r2, [r0, #4]
   1764a:	4053      	eors	r3, r2
   1764c:	7103      	strb	r3, [r0, #4]
   1764e:	88cb      	ldrh	r3, [r1, #6]
   17650:	7942      	ldrb	r2, [r0, #5]
   17652:	4053      	eors	r3, r2
   17654:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   17656:	684a      	ldr	r2, [r1, #4]
   17658:	7983      	ldrb	r3, [r0, #6]
   1765a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1765e:	7183      	strb	r3, [r0, #6]
   17660:	684a      	ldr	r2, [r1, #4]
   17662:	79c3      	ldrb	r3, [r0, #7]
   17664:	4053      	eors	r3, r2
   17666:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   17668:	7acb      	ldrb	r3, [r1, #11]
   1766a:	7a02      	ldrb	r2, [r0, #8]
   1766c:	4053      	eors	r3, r2
   1766e:	7203      	strb	r3, [r0, #8]
   17670:	7a42      	ldrb	r2, [r0, #9]
   17672:	894b      	ldrh	r3, [r1, #10]
   17674:	4053      	eors	r3, r2
   17676:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   17678:	688a      	ldr	r2, [r1, #8]
   1767a:	7a83      	ldrb	r3, [r0, #10]
   1767c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   17680:	7283      	strb	r3, [r0, #10]
   17682:	688a      	ldr	r2, [r1, #8]
   17684:	7ac3      	ldrb	r3, [r0, #11]
   17686:	4053      	eors	r3, r2
   17688:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1768a:	7bcb      	ldrb	r3, [r1, #15]
   1768c:	7b02      	ldrb	r2, [r0, #12]
   1768e:	4053      	eors	r3, r2
   17690:	7303      	strb	r3, [r0, #12]
   17692:	89cb      	ldrh	r3, [r1, #14]
   17694:	7b42      	ldrb	r2, [r0, #13]
   17696:	4053      	eors	r3, r2
   17698:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1769a:	68ca      	ldr	r2, [r1, #12]
   1769c:	7b83      	ldrb	r3, [r0, #14]
   1769e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   176a2:	7383      	strb	r3, [r0, #14]
   176a4:	68ca      	ldr	r2, [r1, #12]
   176a6:	7bc3      	ldrb	r3, [r0, #15]
   176a8:	4053      	eors	r3, r2
   176aa:	73c3      	strb	r3, [r0, #15]
}
   176ac:	4770      	bx	lr

000176ae <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   176ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   176b0:	7802      	ldrb	r2, [r0, #0]
   176b2:	f88d 2000 	strb.w	r2, [sp]
   176b6:	7942      	ldrb	r2, [r0, #5]
   176b8:	f88d 2001 	strb.w	r2, [sp, #1]
   176bc:	7a82      	ldrb	r2, [r0, #10]
   176be:	f88d 2002 	strb.w	r2, [sp, #2]
   176c2:	7bc2      	ldrb	r2, [r0, #15]
   176c4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   176c8:	7902      	ldrb	r2, [r0, #4]
   176ca:	f88d 2004 	strb.w	r2, [sp, #4]
   176ce:	7a42      	ldrb	r2, [r0, #9]
   176d0:	f88d 2005 	strb.w	r2, [sp, #5]
   176d4:	7b82      	ldrb	r2, [r0, #14]
   176d6:	f88d 2006 	strb.w	r2, [sp, #6]
   176da:	78c2      	ldrb	r2, [r0, #3]
   176dc:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   176e0:	7a02      	ldrb	r2, [r0, #8]
   176e2:	f88d 2008 	strb.w	r2, [sp, #8]
   176e6:	7b42      	ldrb	r2, [r0, #13]
   176e8:	f88d 2009 	strb.w	r2, [sp, #9]
   176ec:	7882      	ldrb	r2, [r0, #2]
   176ee:	f88d 200a 	strb.w	r2, [sp, #10]
   176f2:	79c2      	ldrb	r2, [r0, #7]
   176f4:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   176f8:	7b02      	ldrb	r2, [r0, #12]
   176fa:	f88d 200c 	strb.w	r2, [sp, #12]
   176fe:	7842      	ldrb	r2, [r0, #1]
   17700:	7ac3      	ldrb	r3, [r0, #11]
   17702:	f88d 200d 	strb.w	r2, [sp, #13]
   17706:	7982      	ldrb	r2, [r0, #6]
   17708:	f88d 200e 	strb.w	r2, [sp, #14]
   1770c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   17710:	2310      	movs	r3, #16
   17712:	466a      	mov	r2, sp
   17714:	4619      	mov	r1, r3
   17716:	f7ff ff6d 	bl	175f4 <_copy>
}
   1771a:	b005      	add	sp, #20
   1771c:	f85d fb04 	ldr.w	pc, [sp], #4

00017720 <mult_row_column>:
{
   17720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17722:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   17724:	7808      	ldrb	r0, [r1, #0]
{
   17726:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   17728:	f7ff ff73 	bl	17612 <_double_byte>
   1772c:	4605      	mov	r5, r0
   1772e:	7860      	ldrb	r0, [r4, #1]
   17730:	f7ff ff6f 	bl	17612 <_double_byte>
   17734:	78a2      	ldrb	r2, [r4, #2]
   17736:	7863      	ldrb	r3, [r4, #1]
   17738:	4053      	eors	r3, r2
   1773a:	78e2      	ldrb	r2, [r4, #3]
   1773c:	4053      	eors	r3, r2
   1773e:	405d      	eors	r5, r3
   17740:	4045      	eors	r5, r0
   17742:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   17744:	7860      	ldrb	r0, [r4, #1]
   17746:	7827      	ldrb	r7, [r4, #0]
   17748:	f7ff ff63 	bl	17612 <_double_byte>
   1774c:	4605      	mov	r5, r0
   1774e:	78a0      	ldrb	r0, [r4, #2]
   17750:	f7ff ff5f 	bl	17612 <_double_byte>
   17754:	78a3      	ldrb	r3, [r4, #2]
   17756:	405f      	eors	r7, r3
   17758:	78e3      	ldrb	r3, [r4, #3]
   1775a:	405f      	eors	r7, r3
   1775c:	407d      	eors	r5, r7
   1775e:	4045      	eors	r5, r0
   17760:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   17762:	78a0      	ldrb	r0, [r4, #2]
   17764:	7865      	ldrb	r5, [r4, #1]
   17766:	7827      	ldrb	r7, [r4, #0]
   17768:	f7ff ff53 	bl	17612 <_double_byte>
   1776c:	406f      	eors	r7, r5
   1776e:	4605      	mov	r5, r0
   17770:	78e0      	ldrb	r0, [r4, #3]
   17772:	f7ff ff4e 	bl	17612 <_double_byte>
   17776:	78e3      	ldrb	r3, [r4, #3]
   17778:	405f      	eors	r7, r3
   1777a:	407d      	eors	r5, r7
   1777c:	4045      	eors	r5, r0
   1777e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   17780:	7820      	ldrb	r0, [r4, #0]
   17782:	f7ff ff46 	bl	17612 <_double_byte>
   17786:	7863      	ldrb	r3, [r4, #1]
   17788:	7825      	ldrb	r5, [r4, #0]
   1778a:	405d      	eors	r5, r3
   1778c:	78a3      	ldrb	r3, [r4, #2]
   1778e:	405d      	eors	r5, r3
   17790:	4045      	eors	r5, r0
   17792:	78e0      	ldrb	r0, [r4, #3]
   17794:	f7ff ff3d 	bl	17612 <_double_byte>
   17798:	b2ed      	uxtb	r5, r5
   1779a:	4045      	eors	r5, r0
   1779c:	70f5      	strb	r5, [r6, #3]
}
   1779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000177a0 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   177a0:	b570      	push	{r4, r5, r6, lr}
   177a2:	4614      	mov	r4, r2
   177a4:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   177a6:	4605      	mov	r5, r0
   177a8:	2800      	cmp	r0, #0
   177aa:	d049      	beq.n	17840 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   177ac:	2900      	cmp	r1, #0
   177ae:	d049      	beq.n	17844 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   177b0:	2a00      	cmp	r2, #0
   177b2:	d049      	beq.n	17848 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   177b4:	2310      	movs	r3, #16
   177b6:	460a      	mov	r2, r1
   177b8:	4668      	mov	r0, sp
   177ba:	4619      	mov	r1, r3
   177bc:	f7ff ff1a 	bl	175f4 <_copy>
	add_round_key(state, s->words);
   177c0:	4621      	mov	r1, r4
   177c2:	4668      	mov	r0, sp
   177c4:	f7ff ff2e 	bl	17624 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   177c8:	3410      	adds	r4, #16
   177ca:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   177ce:	4668      	mov	r0, sp
   177d0:	f7ea fc88 	bl	20e4 <sub_bytes>
		shift_rows(state);
   177d4:	4668      	mov	r0, sp
   177d6:	f7ff ff6a 	bl	176ae <shift_rows>
	mult_row_column(t, s);
   177da:	4669      	mov	r1, sp
   177dc:	a804      	add	r0, sp, #16
   177de:	f7ff ff9f 	bl	17720 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   177e2:	a901      	add	r1, sp, #4
   177e4:	a805      	add	r0, sp, #20
   177e6:	f7ff ff9b 	bl	17720 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   177ea:	a902      	add	r1, sp, #8
   177ec:	a806      	add	r0, sp, #24
   177ee:	f7ff ff97 	bl	17720 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   177f2:	a903      	add	r1, sp, #12
   177f4:	a807      	add	r0, sp, #28
   177f6:	f7ff ff93 	bl	17720 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   177fa:	2310      	movs	r3, #16
   177fc:	4619      	mov	r1, r3
   177fe:	eb0d 0203 	add.w	r2, sp, r3
   17802:	4668      	mov	r0, sp
   17804:	f7ff fef6 	bl	175f4 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   17808:	4621      	mov	r1, r4
   1780a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1780c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1780e:	f7ff ff09 	bl	17624 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   17812:	42a6      	cmp	r6, r4
   17814:	d1db      	bne.n	177ce <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   17816:	f7ea fc65 	bl	20e4 <sub_bytes>
	shift_rows(state);
   1781a:	4668      	mov	r0, sp
   1781c:	f7ff ff47 	bl	176ae <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   17820:	4631      	mov	r1, r6
   17822:	4668      	mov	r0, sp
   17824:	f7ff fefe 	bl	17624 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   17828:	2310      	movs	r3, #16
   1782a:	4619      	mov	r1, r3
   1782c:	466a      	mov	r2, sp
   1782e:	4628      	mov	r0, r5
   17830:	f7ff fee0 	bl	175f4 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   17834:	4668      	mov	r0, sp
   17836:	2210      	movs	r2, #16
   17838:	2100      	movs	r1, #0
   1783a:	f7ff fee8 	bl	1760e <_set>

	return TC_CRYPTO_SUCCESS;
   1783e:	2001      	movs	r0, #1
}
   17840:	b008      	add	sp, #32
   17842:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   17844:	4608      	mov	r0, r1
   17846:	e7fb      	b.n	17840 <tc_aes_encrypt+0xa0>
   17848:	4610      	mov	r0, r2
   1784a:	e7f9      	b.n	17840 <tc_aes_encrypt+0xa0>

0001784c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1784c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1784e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   17850:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   17852:	f912 3b10 	ldrsb.w	r3, [r2], #16
   17856:	2b00      	cmp	r3, #0
   17858:	bfb4      	ite	lt
   1785a:	2387      	movlt	r3, #135	; 0x87
   1785c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1785e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   17862:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   17866:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   17868:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1786c:	d002      	beq.n	17874 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1786e:	7813      	ldrb	r3, [r2, #0]
   17870:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   17872:	e7f4      	b.n	1785e <gf_double+0x12>
	}
}
   17874:	bd10      	pop	{r4, pc}

00017876 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   17876:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   17878:	b120      	cbz	r0, 17884 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1787a:	2258      	movs	r2, #88	; 0x58
   1787c:	2100      	movs	r1, #0
   1787e:	f7ff fec6 	bl	1760e <_set>
   17882:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   17884:	bd08      	pop	{r3, pc}

00017886 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   17886:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   17888:	4604      	mov	r4, r0
   1788a:	b188      	cbz	r0, 178b0 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1788c:	2210      	movs	r2, #16
   1788e:	2100      	movs	r1, #0
   17890:	f7ff febd 	bl	1760e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   17894:	2210      	movs	r2, #16
   17896:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1789a:	2100      	movs	r1, #0
   1789c:	f7ff feb7 	bl	1760e <_set>
	s->leftover_offset = 0;
   178a0:	2300      	movs	r3, #0
   178a2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   178a4:	2200      	movs	r2, #0
   178a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   178aa:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   178ae:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   178b0:	bd10      	pop	{r4, pc}

000178b2 <tc_cmac_setup>:
{
   178b2:	b570      	push	{r4, r5, r6, lr}
   178b4:	460d      	mov	r5, r1
   178b6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   178b8:	4604      	mov	r4, r0
   178ba:	b310      	cbz	r0, 17902 <tc_cmac_setup+0x50>
   178bc:	b311      	cbz	r1, 17904 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   178be:	2258      	movs	r2, #88	; 0x58
   178c0:	2100      	movs	r1, #0
   178c2:	f7ff fea4 	bl	1760e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   178c6:	4629      	mov	r1, r5
	s->sched = sched;
   178c8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   178ca:	4630      	mov	r0, r6
   178cc:	f7ea fc16 	bl	20fc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   178d0:	2210      	movs	r2, #16
   178d2:	2100      	movs	r1, #0
   178d4:	4620      	mov	r0, r4
   178d6:	f7ff fe9a 	bl	1760e <_set>
	gf_double (s->K1, s->iv);
   178da:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   178de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   178e0:	4621      	mov	r1, r4
   178e2:	4620      	mov	r0, r4
   178e4:	f7ff ff5c 	bl	177a0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   178e8:	4621      	mov	r1, r4
   178ea:	4628      	mov	r0, r5
   178ec:	f7ff ffae 	bl	1784c <gf_double>
	gf_double (s->K2, s->K1);
   178f0:	4629      	mov	r1, r5
   178f2:	f104 0020 	add.w	r0, r4, #32
   178f6:	f7ff ffa9 	bl	1784c <gf_double>
	tc_cmac_init(s);
   178fa:	4620      	mov	r0, r4
   178fc:	f7ff ffc3 	bl	17886 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   17900:	2001      	movs	r0, #1
}
   17902:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   17904:	4608      	mov	r0, r1
   17906:	e7fc      	b.n	17902 <tc_cmac_setup+0x50>

00017908 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   17908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1790c:	460d      	mov	r5, r1
   1790e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   17910:	4604      	mov	r4, r0
   17912:	2800      	cmp	r0, #0
   17914:	d061      	beq.n	179da <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   17916:	b912      	cbnz	r2, 1791e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   17918:	2001      	movs	r0, #1
}
   1791a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1791e:	2900      	cmp	r1, #0
   17920:	d05b      	beq.n	179da <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   17922:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   17926:	ea53 0102 	orrs.w	r1, r3, r2
   1792a:	d056      	beq.n	179da <tc_cmac_update+0xd2>
	s->countdown--;
   1792c:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1792e:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   17932:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   17936:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1793a:	f1b8 0f00 	cmp.w	r8, #0
   1793e:	d02a      	beq.n	17996 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   17940:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   17944:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   17948:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1794a:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1794c:	d208      	bcs.n	17960 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1794e:	462a      	mov	r2, r5
   17950:	4633      	mov	r3, r6
   17952:	4631      	mov	r1, r6
   17954:	f7ff fe4e 	bl	175f4 <_copy>
			s->leftover_offset += data_length;
   17958:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1795a:	4432      	add	r2, r6
   1795c:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1795e:	e7db      	b.n	17918 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   17960:	463b      	mov	r3, r7
   17962:	462a      	mov	r2, r5
   17964:	4639      	mov	r1, r7
   17966:	f7ff fe45 	bl	175f4 <_copy>
		data_length -= remaining_space;
   1796a:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1796c:	2300      	movs	r3, #0
   1796e:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   17970:	4446      	add	r6, r8
		data += remaining_space;
   17972:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17974:	1e63      	subs	r3, r4, #1
   17976:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1797a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1797e:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17982:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   17984:	ea82 0200 	eor.w	r2, r2, r0
   17988:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1798a:	d1f6      	bne.n	1797a <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1798c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1798e:	4621      	mov	r1, r4
   17990:	4620      	mov	r0, r4
   17992:	f7ff ff05 	bl	177a0 <tc_aes_encrypt>
   17996:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1799a:	2e10      	cmp	r6, #16
   1799c:	d80a      	bhi.n	179b4 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1799e:	2e00      	cmp	r6, #0
   179a0:	d0ba      	beq.n	17918 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   179a2:	4633      	mov	r3, r6
   179a4:	462a      	mov	r2, r5
   179a6:	4631      	mov	r1, r6
   179a8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   179ac:	f7ff fe22 	bl	175f4 <_copy>
		s->leftover_offset = data_length;
   179b0:	6466      	str	r6, [r4, #68]	; 0x44
   179b2:	e7b1      	b.n	17918 <tc_cmac_update+0x10>
   179b4:	1e63      	subs	r3, r4, #1
   179b6:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   179b8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   179bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   179c0:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   179c2:	ea82 0200 	eor.w	r2, r2, r0
   179c6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   179c8:	d1f6      	bne.n	179b8 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   179ca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   179cc:	4621      	mov	r1, r4
   179ce:	4620      	mov	r0, r4
   179d0:	f7ff fee6 	bl	177a0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   179d4:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   179d6:	3e10      	subs	r6, #16
   179d8:	e7df      	b.n	1799a <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   179da:	2000      	movs	r0, #0
   179dc:	e79d      	b.n	1791a <tc_cmac_update+0x12>

000179de <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   179de:	b570      	push	{r4, r5, r6, lr}
   179e0:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   179e2:	4605      	mov	r5, r0
   179e4:	b1e8      	cbz	r0, 17a22 <tc_cmac_final+0x44>
   179e6:	b369      	cbz	r1, 17a44 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   179e8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   179ea:	2a10      	cmp	r2, #16
   179ec:	d11a      	bne.n	17a24 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   179ee:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   179f0:	1e63      	subs	r3, r4, #1
   179f2:	3901      	subs	r1, #1
   179f4:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   179f8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   179fc:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   17a00:	4072      	eors	r2, r6
   17a02:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17a06:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   17a08:	ea82 0206 	eor.w	r2, r2, r6
   17a0c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   17a0e:	d1f3      	bne.n	179f8 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   17a10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   17a12:	4621      	mov	r1, r4
   17a14:	4628      	mov	r0, r5
   17a16:	f7ff fec3 	bl	177a0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   17a1a:	4620      	mov	r0, r4
   17a1c:	f7ff ff2b 	bl	17876 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   17a20:	2001      	movs	r0, #1
}
   17a22:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   17a24:	f102 0030 	add.w	r0, r2, #48	; 0x30
   17a28:	2100      	movs	r1, #0
   17a2a:	f1c2 0210 	rsb	r2, r2, #16
   17a2e:	4420      	add	r0, r4
   17a30:	f7ff fded 	bl	1760e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   17a34:	6c63      	ldr	r3, [r4, #68]	; 0x44
   17a36:	4423      	add	r3, r4
   17a38:	2280      	movs	r2, #128	; 0x80
   17a3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   17a3e:	f104 0120 	add.w	r1, r4, #32
   17a42:	e7d5      	b.n	179f0 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   17a44:	4608      	mov	r0, r1
   17a46:	e7ec      	b.n	17a22 <tc_cmac_final+0x44>

00017a48 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   17a48:	f002 bda1 	b.w	1a58e <z_fatal_error>

00017a4c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   17a4c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   17a4e:	6800      	ldr	r0, [r0, #0]
   17a50:	f002 bd9d 	b.w	1a58e <z_fatal_error>

00017a54 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   17a54:	2100      	movs	r1, #0
   17a56:	2001      	movs	r0, #1
   17a58:	f7ff bff6 	b.w	17a48 <z_arm_fatal_error>

00017a5c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   17a5c:	b508      	push	{r3, lr}
	handler();
   17a5e:	f7ea fc15 	bl	228c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   17a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   17a66:	f7ea bcf5 	b.w	2454 <z_arm_exc_exit>

00017a6a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   17a6a:	3901      	subs	r1, #1
   17a6c:	4603      	mov	r3, r0
   17a6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   17a72:	b90a      	cbnz	r2, 17a78 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   17a74:	701a      	strb	r2, [r3, #0]

	return dest;
}
   17a76:	4770      	bx	lr
		*d = *s;
   17a78:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   17a7c:	e7f7      	b.n	17a6e <strcpy+0x4>

00017a7e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   17a7e:	b570      	push	{r4, r5, r6, lr}
   17a80:	4605      	mov	r5, r0
   17a82:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   17a84:	b142      	cbz	r2, 17a98 <strncpy+0x1a>
   17a86:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   17a8a:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   17a8c:	b92c      	cbnz	r4, 17a9a <strncpy+0x1c>
   17a8e:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   17a90:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   17a94:	429a      	cmp	r2, r3
   17a96:	d1fb      	bne.n	17a90 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   17a98:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   17a9a:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   17a9e:	4632      	mov	r2, r6
   17aa0:	e7ef      	b.n	17a82 <strncpy+0x4>

00017aa2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   17aa2:	4603      	mov	r3, r0
	size_t n = 0;
   17aa4:	2000      	movs	r0, #0

	while (*s != '\0') {
   17aa6:	5c1a      	ldrb	r2, [r3, r0]
   17aa8:	b902      	cbnz	r2, 17aac <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   17aaa:	4770      	bx	lr
		n++;
   17aac:	3001      	adds	r0, #1
   17aae:	e7fa      	b.n	17aa6 <strlen+0x4>

00017ab0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   17ab0:	4603      	mov	r3, r0
	size_t n = 0;
   17ab2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   17ab4:	5c1a      	ldrb	r2, [r3, r0]
   17ab6:	b10a      	cbz	r2, 17abc <strnlen+0xc>
   17ab8:	4288      	cmp	r0, r1
   17aba:	d100      	bne.n	17abe <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   17abc:	4770      	bx	lr
		n++;
   17abe:	3001      	adds	r0, #1
   17ac0:	e7f8      	b.n	17ab4 <strnlen+0x4>

00017ac2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   17ac2:	1e43      	subs	r3, r0, #1
   17ac4:	3901      	subs	r1, #1
   17ac6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   17aca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   17ace:	4282      	cmp	r2, r0
   17ad0:	d101      	bne.n	17ad6 <strcmp+0x14>
   17ad2:	2a00      	cmp	r2, #0
   17ad4:	d1f7      	bne.n	17ac6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   17ad6:	1a10      	subs	r0, r2, r0
   17ad8:	4770      	bx	lr

00017ada <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   17ada:	b510      	push	{r4, lr}
   17adc:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   17ade:	b15a      	cbz	r2, 17af8 <memcmp+0x1e>
   17ae0:	3901      	subs	r1, #1
   17ae2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   17ae4:	f813 0b01 	ldrb.w	r0, [r3], #1
   17ae8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   17aec:	42a3      	cmp	r3, r4
   17aee:	d001      	beq.n	17af4 <memcmp+0x1a>
   17af0:	4290      	cmp	r0, r2
   17af2:	d0f7      	beq.n	17ae4 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   17af4:	1a80      	subs	r0, r0, r2
}
   17af6:	bd10      	pop	{r4, pc}
		return 0;
   17af8:	4610      	mov	r0, r2
   17afa:	e7fc      	b.n	17af6 <memcmp+0x1c>

00017afc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   17afc:	b510      	push	{r4, lr}
   17afe:	1e43      	subs	r3, r0, #1
   17b00:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   17b02:	4291      	cmp	r1, r2
   17b04:	d100      	bne.n	17b08 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   17b06:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   17b08:	f811 4b01 	ldrb.w	r4, [r1], #1
   17b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   17b10:	e7f7      	b.n	17b02 <memcpy+0x6>

00017b12 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   17b12:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   17b14:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   17b16:	4603      	mov	r3, r0
	while (n > 0) {
   17b18:	4293      	cmp	r3, r2
   17b1a:	d100      	bne.n	17b1e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   17b1c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   17b1e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   17b22:	e7f9      	b.n	17b18 <memset+0x6>

00017b24 <_stdout_hook_default>:
}
   17b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b28:	4770      	bx	lr

00017b2a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   17b2a:	b084      	sub	sp, #16
   17b2c:	ab04      	add	r3, sp, #16
   17b2e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   17b32:	f89d 3004 	ldrb.w	r3, [sp, #4]
   17b36:	2b06      	cmp	r3, #6
   17b38:	d108      	bne.n	17b4c <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   17b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17b3e:	2201      	movs	r2, #1
   17b40:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   17b44:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   17b48:	bf20      	wfe
    while (true)
   17b4a:	e7fd      	b.n	17b48 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   17b4c:	b004      	add	sp, #16
   17b4e:	4770      	bx	lr

00017b50 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   17b50:	b084      	sub	sp, #16
   17b52:	ab04      	add	r3, sp, #16
   17b54:	e903 0007 	stmdb	r3, {r0, r1, r2}
   17b58:	2300      	movs	r3, #0
   17b5a:	f383 8811 	msr	BASEPRI, r3
   17b5e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   17b62:	b004      	add	sp, #16
   17b64:	4770      	bx	lr

00017b66 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   17b66:	b530      	push	{r4, r5, lr}
   17b68:	b085      	sub	sp, #20
   17b6a:	4604      	mov	r4, r0
   17b6c:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   17b6e:	4668      	mov	r0, sp
   17b70:	2203      	movs	r2, #3
   17b72:	f7ff ffc3 	bl	17afc <memcpy>
	(void)memset(res + 3, 0, 13);
   17b76:	220d      	movs	r2, #13
   17b78:	2100      	movs	r1, #0
   17b7a:	f10d 0003 	add.w	r0, sp, #3
   17b7e:	f7ff ffc8 	bl	17b12 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   17b82:	4620      	mov	r0, r4
   17b84:	466a      	mov	r2, sp
   17b86:	4669      	mov	r1, sp
   17b88:	f7f0 ff18 	bl	89bc <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   17b8c:	4604      	mov	r4, r0
   17b8e:	b920      	cbnz	r0, 17b9a <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   17b90:	2203      	movs	r2, #3
   17b92:	4669      	mov	r1, sp
   17b94:	4628      	mov	r0, r5
   17b96:	f7ff ffb1 	bl	17afc <memcpy>

	return 0;
}
   17b9a:	4620      	mov	r0, r4
   17b9c:	b005      	add	sp, #20
   17b9e:	bd30      	pop	{r4, r5, pc}

00017ba0 <bt_rpa_create>:
}
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   17ba0:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   17ba2:	1cce      	adds	r6, r1, #3
{
   17ba4:	4605      	mov	r5, r0
   17ba6:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   17ba8:	4630      	mov	r0, r6
   17baa:	2103      	movs	r1, #3
   17bac:	f7f0 ff04 	bl	89b8 <bt_rand>
	if (err) {
   17bb0:	b960      	cbnz	r0, 17bcc <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   17bb2:	7963      	ldrb	r3, [r4, #5]
   17bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17bbc:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   17bbe:	4622      	mov	r2, r4
   17bc0:	4631      	mov	r1, r6
   17bc2:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   17bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   17bc8:	f7ff bfcd 	b.w	17b66 <ah>
}
   17bcc:	bd70      	pop	{r4, r5, r6, pc}

00017bce <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   17bce:	b510      	push	{r4, lr}
   17bd0:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   17bd2:	7801      	ldrb	r1, [r0, #0]
   17bd4:	7822      	ldrb	r2, [r4, #0]
   17bd6:	428a      	cmp	r2, r1
{
   17bd8:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   17bda:	d00f      	beq.n	17bfc <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   17bdc:	4669      	mov	r1, sp
   17bde:	f7ea fe85 	bl	28ec <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   17be2:	a905      	add	r1, sp, #20
   17be4:	4620      	mov	r0, r4
   17be6:	f7ea fe81 	bl	28ec <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   17bea:	2210      	movs	r2, #16
   17bec:	f10d 0115 	add.w	r1, sp, #21
   17bf0:	f10d 0001 	add.w	r0, sp, #1
   17bf4:	f7ff ff71 	bl	17ada <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   17bf8:	b00a      	add	sp, #40	; 0x28
   17bfa:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   17bfc:	2a01      	cmp	r2, #1
   17bfe:	d006      	beq.n	17c0e <bt_uuid_cmp+0x40>
   17c00:	2a02      	cmp	r2, #2
   17c02:	d007      	beq.n	17c14 <bt_uuid_cmp+0x46>
   17c04:	b972      	cbnz	r2, 17c24 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   17c06:	8840      	ldrh	r0, [r0, #2]
   17c08:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   17c0a:	1ac0      	subs	r0, r0, r3
   17c0c:	e7f4      	b.n	17bf8 <bt_uuid_cmp+0x2a>
   17c0e:	6840      	ldr	r0, [r0, #4]
   17c10:	6863      	ldr	r3, [r4, #4]
   17c12:	e7fa      	b.n	17c0a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   17c14:	2210      	movs	r2, #16
   17c16:	1c61      	adds	r1, r4, #1
   17c18:	3001      	adds	r0, #1
}
   17c1a:	b00a      	add	sp, #40	; 0x28
   17c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   17c20:	f7ff bf5b 	b.w	17ada <memcmp>
	switch (u1->type) {
   17c24:	f06f 0015 	mvn.w	r0, #21
   17c28:	e7e6      	b.n	17bf8 <bt_uuid_cmp+0x2a>

00017c2a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   17c2a:	2a04      	cmp	r2, #4
{
   17c2c:	b510      	push	{r4, lr}
	switch (data_len) {
   17c2e:	d00a      	beq.n	17c46 <bt_uuid_create+0x1c>
   17c30:	2a10      	cmp	r2, #16
   17c32:	d00d      	beq.n	17c50 <bt_uuid_create+0x26>
   17c34:	2a02      	cmp	r2, #2
   17c36:	f04f 0300 	mov.w	r3, #0
   17c3a:	d10f      	bne.n	17c5c <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   17c3c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   17c3e:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   17c40:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   17c42:	2001      	movs	r0, #1
}
   17c44:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   17c46:	2301      	movs	r3, #1
   17c48:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   17c4a:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   17c4c:	6042      	str	r2, [r0, #4]
		break;
   17c4e:	e7f8      	b.n	17c42 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   17c50:	2302      	movs	r3, #2
   17c52:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   17c56:	f7ff ff51 	bl	17afc <memcpy>
		break;
   17c5a:	e7f2      	b.n	17c42 <bt_uuid_create+0x18>
	switch (data_len) {
   17c5c:	4618      	mov	r0, r3
   17c5e:	e7f1      	b.n	17c44 <bt_uuid_create+0x1a>

00017c60 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   17c60:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   17c62:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   17c64:	2106      	movs	r1, #6
{
   17c66:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   17c68:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   17c6c:	f7f0 fea4 	bl	89b8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   17c70:	b918      	cbnz	r0, 17c7a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   17c72:	79a3      	ldrb	r3, [r4, #6]
   17c74:	f063 033f 	orn	r3, r3, #63	; 0x3f
   17c78:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   17c7a:	bd10      	pop	{r4, pc}

00017c7c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   17c7c:	280f      	cmp	r0, #15
   17c7e:	d806      	bhi.n	17c8e <bt_hci_evt_get_flags+0x12>
   17c80:	280d      	cmp	r0, #13
   17c82:	d80b      	bhi.n	17c9c <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   17c84:	2805      	cmp	r0, #5
   17c86:	bf14      	ite	ne
   17c88:	2002      	movne	r0, #2
   17c8a:	2003      	moveq	r0, #3
   17c8c:	4770      	bx	lr
	switch (evt) {
   17c8e:	2813      	cmp	r0, #19
   17c90:	d004      	beq.n	17c9c <bt_hci_evt_get_flags+0x20>
   17c92:	281a      	cmp	r0, #26
   17c94:	bf14      	ite	ne
   17c96:	2002      	movne	r0, #2
   17c98:	2001      	moveq	r0, #1
   17c9a:	4770      	bx	lr
   17c9c:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   17c9e:	4770      	bx	lr

00017ca0 <handle_event>:
{
   17ca0:	b410      	push	{r4}
   17ca2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   17ca6:	4604      	mov	r4, r0
   17ca8:	4608      	mov	r0, r1
		if (handler->event != event) {
   17caa:	7811      	ldrb	r1, [r2, #0]
   17cac:	42a1      	cmp	r1, r4
   17cae:	d004      	beq.n	17cba <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   17cb0:	3208      	adds	r2, #8
   17cb2:	429a      	cmp	r2, r3
   17cb4:	d1f9      	bne.n	17caa <handle_event+0xa>
}
   17cb6:	bc10      	pop	{r4}
   17cb8:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   17cba:	8981      	ldrh	r1, [r0, #12]
   17cbc:	7853      	ldrb	r3, [r2, #1]
   17cbe:	4299      	cmp	r1, r3
   17cc0:	d3f9      	bcc.n	17cb6 <handle_event+0x16>
		handler->handler(buf);
   17cc2:	6853      	ldr	r3, [r2, #4]
}
   17cc4:	bc10      	pop	{r4}
		handler->handler(buf);
   17cc6:	4718      	bx	r3

00017cc8 <hci_data_buf_overflow>:
}
   17cc8:	4770      	bx	lr

00017cca <atomic_or>:
{
   17cca:	4603      	mov	r3, r0
}
   17ccc:	f3bf 8f5b 	dmb	ish
   17cd0:	e853 0f00 	ldrex	r0, [r3]
   17cd4:	ea40 0201 	orr.w	r2, r0, r1
   17cd8:	e843 2c00 	strex	ip, r2, [r3]
   17cdc:	f1bc 0f00 	cmp.w	ip, #0
   17ce0:	d1f6      	bne.n	17cd0 <atomic_or+0x6>
   17ce2:	f3bf 8f5b 	dmb	ish
   17ce6:	4770      	bx	lr

00017ce8 <hci_disconn_complete>:
{
   17ce8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17cea:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   17cec:	782e      	ldrb	r6, [r5, #0]
   17cee:	b97e      	cbnz	r6, 17d10 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   17cf0:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   17cf4:	f7ec fb22 	bl	433c <bt_conn_lookup_handle>
	if (!conn) {
   17cf8:	4604      	mov	r4, r0
   17cfa:	b148      	cbz	r0, 17d10 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   17cfc:	78eb      	ldrb	r3, [r5, #3]
   17cfe:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17d00:	4631      	mov	r1, r6
   17d02:	f7ec fb23 	bl	434c <bt_conn_set_state>
		bt_conn_unref(conn);
   17d06:	4620      	mov	r0, r4
}
   17d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   17d0c:	f000 bc8b 	b.w	18626 <bt_conn_unref>
}
   17d10:	bd70      	pop	{r4, r5, r6, pc}

00017d12 <le_data_len_change>:
{
   17d12:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17d14:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   17d16:	8818      	ldrh	r0, [r3, #0]
   17d18:	f7ec fb10 	bl	433c <bt_conn_lookup_handle>
	if (!conn) {
   17d1c:	b118      	cbz	r0, 17d26 <le_data_len_change+0x14>
}
   17d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   17d22:	f000 bc80 	b.w	18626 <bt_conn_unref>
}
   17d26:	bd08      	pop	{r3, pc}

00017d28 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   17d28:	2101      	movs	r1, #1
   17d2a:	3008      	adds	r0, #8
   17d2c:	f001 bee8 	b.w	19b00 <net_buf_simple_pull_mem>

00017d30 <le_conn_update_complete>:
{
   17d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17d32:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   17d34:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   17d38:	f7ec fb00 	bl	433c <bt_conn_lookup_handle>
	if (!conn) {
   17d3c:	4604      	mov	r4, r0
   17d3e:	2800      	cmp	r0, #0
   17d40:	d03c      	beq.n	17dbc <le_conn_update_complete+0x8c>
	if (!evt->status) {
   17d42:	782b      	ldrb	r3, [r5, #0]
   17d44:	b9cb      	cbnz	r3, 17d7a <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   17d46:	792a      	ldrb	r2, [r5, #4]
   17d48:	78eb      	ldrb	r3, [r5, #3]
   17d4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17d4e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   17d52:	79aa      	ldrb	r2, [r5, #6]
   17d54:	796b      	ldrb	r3, [r5, #5]
   17d56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17d5a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17d5e:	79eb      	ldrb	r3, [r5, #7]
   17d60:	7a2a      	ldrb	r2, [r5, #8]
   17d62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17d66:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   17d6a:	f7ec fbb5 	bl	44d8 <notify_le_param_updated>
	bt_conn_unref(conn);
   17d6e:	4620      	mov	r0, r4
}
   17d70:	b003      	add	sp, #12
   17d72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   17d76:	f000 bc56 	b.w	18626 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17d7a:	2b1a      	cmp	r3, #26
   17d7c:	d1f7      	bne.n	17d6e <le_conn_update_complete+0x3e>
   17d7e:	78c3      	ldrb	r3, [r0, #3]
   17d80:	2b01      	cmp	r3, #1
   17d82:	d1f4      	bne.n	17d6e <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
   17d88:	3004      	adds	r0, #4
   17d8a:	f7ff ff9e 	bl	17cca <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   17d8e:	0543      	lsls	r3, r0, #21
   17d90:	d4ed      	bmi.n	17d6e <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   17d92:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   17d96:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   17d9a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   17d9e:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   17da2:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   17da6:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   17daa:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   17dac:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   17db0:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   17db4:	4620      	mov	r0, r4
   17db6:	f7ec fe45 	bl	4a44 <bt_l2cap_update_conn_param>
   17dba:	e7d8      	b.n	17d6e <le_conn_update_complete+0x3e>
}
   17dbc:	b003      	add	sp, #12
   17dbe:	bd30      	pop	{r4, r5, pc}

00017dc0 <hci_vendor_event>:
   17dc0:	4770      	bx	lr

00017dc2 <hci_num_completed_packets>:
{
   17dc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   17dc6:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   17dc8:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   17dca:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   17dcc:	783b      	ldrb	r3, [r7, #0]
   17dce:	429d      	cmp	r5, r3
   17dd0:	db01      	blt.n	17dd6 <hci_num_completed_packets+0x14>
}
   17dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   17dd6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   17dda:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   17dde:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   17de2:	f7ec faab 	bl	433c <bt_conn_lookup_handle>
		if (!conn) {
   17de6:	4604      	mov	r4, r0
   17de8:	b350      	cbz	r0, 17e40 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   17dea:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   17dee:	b326      	cbz	r6, 17e3a <hci_num_completed_packets+0x78>
	__asm__ volatile(
   17df0:	f04f 0320 	mov.w	r3, #32
   17df4:	f3ef 8211 	mrs	r2, BASEPRI
   17df8:	f383 8812 	msr	BASEPRI_MAX, r3
   17dfc:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   17e00:	69e3      	ldr	r3, [r4, #28]
   17e02:	b16b      	cbz	r3, 17e20 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   17e04:	3b01      	subs	r3, #1
   17e06:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   17e08:	f382 8811 	msr	BASEPRI, r2
   17e0c:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   17e10:	4620      	mov	r0, r4
   17e12:	f7ec f9e7 	bl	41e4 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   17e16:	3e01      	subs	r6, #1
   17e18:	f7fe f932 	bl	16080 <z_impl_k_sem_give>
   17e1c:	b2b6      	uxth	r6, r6
   17e1e:	e7e6      	b.n	17dee <hci_num_completed_packets+0x2c>
	return list->head;
   17e20:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   17e22:	b12b      	cbz	r3, 17e30 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17e24:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   17e26:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   17e28:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17e2a:	428b      	cmp	r3, r1
	list->tail = node;
   17e2c:	bf08      	it	eq
   17e2e:	61a0      	streq	r0, [r4, #24]
   17e30:	f382 8811 	msr	BASEPRI, r2
   17e34:	f3bf 8f6f 	isb	sy
			if (!node) {
   17e38:	b923      	cbnz	r3, 17e44 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   17e3a:	4620      	mov	r0, r4
   17e3c:	f000 fbf3 	bl	18626 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   17e40:	3501      	adds	r5, #1
   17e42:	e7c3      	b.n	17dcc <hci_num_completed_packets+0xa>
	__asm__ volatile(
   17e44:	f04f 0220 	mov.w	r2, #32
   17e48:	f3ef 8111 	mrs	r1, BASEPRI
   17e4c:	f382 8812 	msr	BASEPRI_MAX, r2
   17e50:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   17e54:	68da      	ldr	r2, [r3, #12]
   17e56:	61e2      	str	r2, [r4, #28]
	return list->tail;
   17e58:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   17e5a:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   17e5e:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   17e62:	b94a      	cbnz	r2, 17e78 <hci_num_completed_packets+0xb6>
	list->head = node;
   17e64:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   17e68:	f381 8811 	msr	BASEPRI, r1
   17e6c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   17e70:	4648      	mov	r0, r9
   17e72:	f7fe fa71 	bl	16358 <k_work_submit>
   17e76:	e7cb      	b.n	17e10 <hci_num_completed_packets+0x4e>
	parent->next = child;
   17e78:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17e7a:	6263      	str	r3, [r4, #36]	; 0x24
}
   17e7c:	e7f4      	b.n	17e68 <hci_num_completed_packets+0xa6>

00017e7e <hci_le_read_max_data_len>:
{
   17e7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17e80:	4606      	mov	r6, r0
   17e82:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   17e84:	aa01      	add	r2, sp, #4
   17e86:	2100      	movs	r1, #0
   17e88:	f242 002f 	movw	r0, #8239	; 0x202f
   17e8c:	f7ea fee6 	bl	2c5c <bt_hci_cmd_send_sync>
	if (err) {
   17e90:	4604      	mov	r4, r0
   17e92:	b948      	cbnz	r0, 17ea8 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   17e94:	9801      	ldr	r0, [sp, #4]
   17e96:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   17e98:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17e9c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17e9e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17ea2:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   17ea4:	f7fb fb0a 	bl	134bc <net_buf_unref>
}
   17ea8:	4620      	mov	r0, r4
   17eaa:	b002      	add	sp, #8
   17eac:	bd70      	pop	{r4, r5, r6, pc}

00017eae <bt_hci_disconnect>:
{
   17eae:	b570      	push	{r4, r5, r6, lr}
   17eb0:	4606      	mov	r6, r0
   17eb2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   17eb4:	f240 4006 	movw	r0, #1030	; 0x406
   17eb8:	2103      	movs	r1, #3
   17eba:	f7ea fe95 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
   17ebe:	4604      	mov	r4, r0
   17ec0:	b168      	cbz	r0, 17ede <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   17ec2:	2103      	movs	r1, #3
   17ec4:	3008      	adds	r0, #8
   17ec6:	f001 fdf4 	bl	19ab2 <net_buf_simple_add>
	disconn->reason = reason;
   17eca:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   17ecc:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   17ece:	4621      	mov	r1, r4
   17ed0:	2200      	movs	r2, #0
}
   17ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   17ed6:	f240 4006 	movw	r0, #1030	; 0x406
   17eda:	f7ea bebf 	b.w	2c5c <bt_hci_cmd_send_sync>
}
   17ede:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17ee2:	bd70      	pop	{r4, r5, r6, pc}

00017ee4 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   17ee4:	8803      	ldrh	r3, [r0, #0]
   17ee6:	8842      	ldrh	r2, [r0, #2]
   17ee8:	4293      	cmp	r3, r2
{
   17eea:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   17eec:	d819      	bhi.n	17f22 <bt_le_conn_params_valid+0x3e>
   17eee:	2b05      	cmp	r3, #5
   17ef0:	d917      	bls.n	17f22 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   17ef2:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   17ef6:	d814      	bhi.n	17f22 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   17ef8:	8883      	ldrh	r3, [r0, #4]
   17efa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17efe:	d210      	bcs.n	17f22 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   17f00:	88c0      	ldrh	r0, [r0, #6]
   17f02:	f1a0 010a 	sub.w	r1, r0, #10
   17f06:	b289      	uxth	r1, r1
   17f08:	f640 4476 	movw	r4, #3190	; 0xc76
   17f0c:	42a1      	cmp	r1, r4
   17f0e:	d808      	bhi.n	17f22 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   17f10:	3301      	adds	r3, #1
   17f12:	b29b      	uxth	r3, r3
   17f14:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   17f16:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   17f1a:	bf34      	ite	cc
   17f1c:	2001      	movcc	r0, #1
   17f1e:	2000      	movcs	r0, #0
}
   17f20:	bd10      	pop	{r4, pc}
		return false;
   17f22:	2000      	movs	r0, #0
   17f24:	e7fc      	b.n	17f20 <bt_le_conn_params_valid+0x3c>

00017f26 <bt_le_set_data_len>:
{
   17f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f28:	4607      	mov	r7, r0
   17f2a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   17f2c:	f242 0022 	movw	r0, #8226	; 0x2022
   17f30:	2106      	movs	r1, #6
{
   17f32:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   17f34:	f7ea fe58 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
   17f38:	4604      	mov	r4, r0
   17f3a:	b170      	cbz	r0, 17f5a <bt_le_set_data_len+0x34>
   17f3c:	2106      	movs	r1, #6
   17f3e:	3008      	adds	r0, #8
   17f40:	f001 fdb7 	bl	19ab2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   17f44:	883b      	ldrh	r3, [r7, #0]
   17f46:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   17f48:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   17f4a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   17f4c:	4621      	mov	r1, r4
   17f4e:	f242 0022 	movw	r0, #8226	; 0x2022
}
   17f52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   17f56:	f7ea beeb 	b.w	2d30 <bt_hci_cmd_send>
}
   17f5a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00017f60 <bt_le_set_phy>:
{
   17f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17f64:	4680      	mov	r8, r0
   17f66:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   17f68:	f242 0032 	movw	r0, #8242	; 0x2032
   17f6c:	2107      	movs	r1, #7
{
   17f6e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   17f72:	4616      	mov	r6, r2
   17f74:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   17f76:	f7ea fe37 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
   17f7a:	4604      	mov	r4, r0
   17f7c:	b190      	cbz	r0, 17fa4 <bt_le_set_phy+0x44>
   17f7e:	2107      	movs	r1, #7
   17f80:	3008      	adds	r0, #8
   17f82:	f001 fd96 	bl	19ab2 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   17f86:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   17f8a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   17f8c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   17f8e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   17f90:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   17f92:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   17f96:	4621      	mov	r1, r4
   17f98:	f242 0032 	movw	r0, #8242	; 0x2032
}
   17f9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   17fa0:	f7ea bec6 	b.w	2d30 <bt_hci_cmd_send>
}
   17fa4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00017fac <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   17fac:	6880      	ldr	r0, [r0, #8]
   17fae:	f7ea bf43 	b.w	2e38 <bt_hci_le_enh_conn_complete>

00017fb2 <le_legacy_conn_complete>:
{
   17fb2:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   17fb4:	6881      	ldr	r1, [r0, #8]
{
   17fb6:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   17fb8:	780b      	ldrb	r3, [r1, #0]
   17fba:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   17fbe:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   17fc2:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   17fc6:	78cb      	ldrb	r3, [r1, #3]
   17fc8:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   17fcc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   17fd0:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   17fd4:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   17fd8:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   17fdc:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   17fe0:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   17fe4:	7c4b      	ldrb	r3, [r1, #17]
   17fe6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   17fea:	2207      	movs	r2, #7
   17fec:	3104      	adds	r1, #4
   17fee:	a803      	add	r0, sp, #12
   17ff0:	f7ff fd84 	bl	17afc <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   17ff4:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   17ff6:	4669      	mov	r1, sp
   17ff8:	2206      	movs	r2, #6
   17ffa:	f10d 0013 	add.w	r0, sp, #19
   17ffe:	9400      	str	r4, [sp, #0]
   18000:	f8ad 4004 	strh.w	r4, [sp, #4]
   18004:	f7ff fd7a 	bl	17afc <memcpy>
   18008:	2206      	movs	r2, #6
   1800a:	4669      	mov	r1, sp
   1800c:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   18010:	9400      	str	r4, [sp, #0]
   18012:	f8ad 4004 	strh.w	r4, [sp, #4]
   18016:	f7ff fd71 	bl	17afc <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1801a:	a802      	add	r0, sp, #8
   1801c:	f7ea ff0c 	bl	2e38 <bt_hci_le_enh_conn_complete>
}
   18020:	b00a      	add	sp, #40	; 0x28
   18022:	bd10      	pop	{r4, pc}

00018024 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18024:	6883      	ldr	r3, [r0, #8]
{
   18026:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   18028:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1802c:	f7ec f986 	bl	433c <bt_conn_lookup_handle>
	if (!conn) {
   18030:	4604      	mov	r4, r0
   18032:	b1d0      	cbz	r0, 1806a <le_phy_update_complete+0x46>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18034:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   18038:	3004      	adds	r0, #4
   1803a:	e850 3f00 	ldrex	r3, [r0]
   1803e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   18042:	e840 2100 	strex	r1, r2, [r0]
   18046:	2900      	cmp	r1, #0
   18048:	d1f7      	bne.n	1803a <le_phy_update_complete+0x16>
   1804a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1804e:	061b      	lsls	r3, r3, #24
   18050:	d506      	bpl.n	18060 <le_phy_update_complete+0x3c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   18052:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   18056:	f7ff fe38 	bl	17cca <atomic_or>
		conn_auto_initiate(conn);
   1805a:	4620      	mov	r0, r4
   1805c:	f7ea fe8a 	bl	2d74 <conn_auto_initiate>
	bt_conn_unref(conn);
   18060:	4620      	mov	r0, r4
}
   18062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   18066:	f000 bade 	b.w	18626 <bt_conn_unref>
}
   1806a:	bd10      	pop	{r4, pc}

0001806c <le_remote_feat_complete>:
{
   1806c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1806e:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   18070:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   18074:	f7ec f962 	bl	433c <bt_conn_lookup_handle>
	if (!conn) {
   18078:	4604      	mov	r4, r0
   1807a:	b198      	cbz	r0, 180a4 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   1807c:	782b      	ldrb	r3, [r5, #0]
   1807e:	b923      	cbnz	r3, 1808a <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   18080:	2208      	movs	r2, #8
   18082:	1ce9      	adds	r1, r5, #3
   18084:	30ac      	adds	r0, #172	; 0xac
   18086:	f7ff fd39 	bl	17afc <memcpy>
   1808a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1808e:	1d20      	adds	r0, r4, #4
   18090:	f7ff fe1b 	bl	17cca <atomic_or>
	conn_auto_initiate(conn);
   18094:	4620      	mov	r0, r4
   18096:	f7ea fe6d 	bl	2d74 <conn_auto_initiate>
	bt_conn_unref(conn);
   1809a:	4620      	mov	r0, r4
}
   1809c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   180a0:	f000 bac1 	b.w	18626 <bt_conn_unref>
}
   180a4:	bd38      	pop	{r3, r4, r5, pc}

000180a6 <le_conn_param_neg_reply>:
{
   180a6:	b570      	push	{r4, r5, r6, lr}
   180a8:	4606      	mov	r6, r0
   180aa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   180ac:	f242 0021 	movw	r0, #8225	; 0x2021
   180b0:	2103      	movs	r1, #3
   180b2:	f7ea fd99 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
   180b6:	4604      	mov	r4, r0
   180b8:	b160      	cbz	r0, 180d4 <le_conn_param_neg_reply+0x2e>
   180ba:	2103      	movs	r1, #3
   180bc:	3008      	adds	r0, #8
   180be:	f001 fcf8 	bl	19ab2 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   180c2:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   180c4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   180c6:	4621      	mov	r1, r4
   180c8:	f242 0021 	movw	r0, #8225	; 0x2021
}
   180cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   180d0:	f7ea be2e 	b.w	2d30 <bt_hci_cmd_send>
}
   180d4:	bd70      	pop	{r4, r5, r6, pc}

000180d6 <le_conn_param_req>:
{
   180d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   180d8:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   180da:	78d9      	ldrb	r1, [r3, #3]
   180dc:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   180de:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   180e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   180e4:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   180e8:	7959      	ldrb	r1, [r3, #5]
   180ea:	791a      	ldrb	r2, [r3, #4]
   180ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   180f0:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   180f4:	799a      	ldrb	r2, [r3, #6]
   180f6:	79d9      	ldrb	r1, [r3, #7]
   180f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   180fc:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18100:	7a1a      	ldrb	r2, [r3, #8]
   18102:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   18104:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18106:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1810a:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1810c:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   18110:	f7ec f914 	bl	433c <bt_conn_lookup_handle>
	if (!conn) {
   18114:	4606      	mov	r6, r0
   18116:	b928      	cbnz	r0, 18124 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   18118:	2102      	movs	r1, #2
   1811a:	4620      	mov	r0, r4
   1811c:	f7ff ffc3 	bl	180a6 <le_conn_param_neg_reply>
}
   18120:	b003      	add	sp, #12
   18122:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   18124:	4669      	mov	r1, sp
   18126:	f7ec fa23 	bl	4570 <le_param_req>
   1812a:	b938      	cbnz	r0, 1813c <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1812c:	211e      	movs	r1, #30
   1812e:	4620      	mov	r0, r4
   18130:	f7ff ffb9 	bl	180a6 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   18134:	4630      	mov	r0, r6
   18136:	f000 fa76 	bl	18626 <bt_conn_unref>
   1813a:	e7f1      	b.n	18120 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1813c:	210e      	movs	r1, #14
   1813e:	f242 0020 	movw	r0, #8224	; 0x2020
   18142:	f7ea fd51 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
   18146:	4605      	mov	r5, r0
   18148:	2800      	cmp	r0, #0
   1814a:	d0f3      	beq.n	18134 <le_conn_param_req+0x5e>
   1814c:	210e      	movs	r1, #14
   1814e:	3008      	adds	r0, #8
   18150:	f001 fcaf 	bl	19ab2 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   18154:	220e      	movs	r2, #14
   18156:	4604      	mov	r4, r0
   18158:	2100      	movs	r1, #0
   1815a:	f7ff fcda 	bl	17b12 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1815e:	f8bd 3000 	ldrh.w	r3, [sp]
   18162:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   18164:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   18168:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1816a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1816e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   18170:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   18174:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   18176:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   18178:	4629      	mov	r1, r5
   1817a:	f242 0020 	movw	r0, #8224	; 0x2020
   1817e:	f7ea fdd7 	bl	2d30 <bt_hci_cmd_send>
   18182:	e7d7      	b.n	18134 <le_conn_param_req+0x5e>

00018184 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   18184:	2000      	movs	r0, #0
   18186:	4770      	bx	lr

00018188 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   18188:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1818a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1818e:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   18190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18194:	2100      	movs	r1, #0
{
   18196:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   18198:	f7ea fc08 	bl	29ac <bt_buf_get_evt>
   1819c:	2102      	movs	r1, #2
   1819e:	4604      	mov	r4, r0
   181a0:	3008      	adds	r0, #8
   181a2:	f001 fc86 	bl	19ab2 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   181a6:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   181a8:	7045      	strb	r5, [r0, #1]

	return buf;
}
   181aa:	4620      	mov	r0, r4
   181ac:	bd70      	pop	{r4, r5, r6, pc}

000181ae <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   181ae:	3103      	adds	r1, #3
{
   181b0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   181b2:	b2c9      	uxtb	r1, r1
{
   181b4:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   181b6:	200e      	movs	r0, #14
   181b8:	f7ff ffe6 	bl	18188 <bt_hci_evt_create>
   181bc:	2103      	movs	r1, #3
   181be:	4604      	mov	r4, r0
   181c0:	3008      	adds	r0, #8
   181c2:	f001 fc76 	bl	19ab2 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   181c6:	2301      	movs	r3, #1
   181c8:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   181ca:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   181ce:	4620      	mov	r0, r4
   181d0:	bd38      	pop	{r3, r4, r5, pc}

000181d2 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   181d2:	b570      	push	{r4, r5, r6, lr}
   181d4:	4605      	mov	r5, r0
   181d6:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   181d8:	200f      	movs	r0, #15
   181da:	2104      	movs	r1, #4
   181dc:	f7ff ffd4 	bl	18188 <bt_hci_evt_create>
   181e0:	2104      	movs	r1, #4
   181e2:	4604      	mov	r4, r0
   181e4:	3008      	adds	r0, #8
   181e6:	f001 fc64 	bl	19ab2 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   181ea:	2201      	movs	r2, #1
	cs->status = status;
   181ec:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   181ee:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   181f0:	8045      	strh	r5, [r0, #2]

	return buf;
}
   181f2:	4620      	mov	r0, r4
   181f4:	bd70      	pop	{r4, r5, r6, pc}

000181f6 <bt_lookup_id_addr>:
}
   181f6:	4608      	mov	r0, r1
   181f8:	4770      	bx	lr

000181fa <bt_id_set_adv_private_addr>:
{
   181fa:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   181fc:	2106      	movs	r1, #6
   181fe:	4668      	mov	r0, sp
   18200:	f7f0 fbda 	bl	89b8 <bt_rand>
	if (err) {
   18204:	b940      	cbnz	r0, 18218 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   18206:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1820a:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1820c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18210:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   18214:	f7eb fafc 	bl	3810 <set_random_address>
}
   18218:	b003      	add	sp, #12
   1821a:	f85d fb04 	ldr.w	pc, [sp], #4

0001821e <bt_id_adv_random_addr_check>:
}
   1821e:	2001      	movs	r0, #1
   18220:	4770      	bx	lr

00018222 <get_adv_channel_map>:
{
   18222:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   18224:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   18228:	bf0c      	ite	eq
   1822a:	2007      	moveq	r0, #7
   1822c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1822e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   18230:	bf48      	it	mi
   18232:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   18236:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   18238:	bf48      	it	mi
   1823a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1823e:	4770      	bx	lr

00018240 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18240:	f3bf 8f5b 	dmb	ish
   18244:	6800      	ldr	r0, [r0, #0]
   18246:	f3bf 8f5b 	dmb	ish
}
   1824a:	4770      	bx	lr

0001824c <atomic_and>:
{
   1824c:	4603      	mov	r3, r0
}
   1824e:	f3bf 8f5b 	dmb	ish
   18252:	e853 0f00 	ldrex	r0, [r3]
   18256:	ea00 0201 	and.w	r2, r0, r1
   1825a:	e843 2c00 	strex	ip, r2, [r3]
   1825e:	f1bc 0f00 	cmp.w	ip, #0
   18262:	d1f6      	bne.n	18252 <atomic_and+0x6>
   18264:	f3bf 8f5b 	dmb	ish
   18268:	4770      	bx	lr

0001826a <hci_set_ad>:
{
   1826a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1826e:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   18270:	2120      	movs	r1, #32
{
   18272:	4682      	mov	sl, r0
   18274:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   18276:	f7ea fcb7 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
   1827a:	4605      	mov	r5, r0
   1827c:	2800      	cmp	r0, #0
   1827e:	d04a      	beq.n	18316 <hci_set_ad+0xac>
   18280:	2120      	movs	r1, #32
   18282:	3008      	adds	r0, #8
   18284:	f001 fc15 	bl	19ab2 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   18288:	2220      	movs	r2, #32
   1828a:	2100      	movs	r1, #0
   1828c:	4681      	mov	r9, r0
   1828e:	f7ff fc40 	bl	17b12 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   18292:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   18296:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1829a:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   1829c:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   1829e:	f8d4 8000 	ldr.w	r8, [r4]
   182a2:	2300      	movs	r3, #0
   182a4:	6862      	ldr	r2, [r4, #4]
   182a6:	4293      	cmp	r3, r2
   182a8:	d30d      	bcc.n	182c6 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   182aa:	9b00      	ldr	r3, [sp, #0]
   182ac:	3408      	adds	r4, #8
   182ae:	42a3      	cmp	r3, r4
   182b0:	d1f5      	bne.n	1829e <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   182b2:	2200      	movs	r2, #0
   182b4:	4629      	mov	r1, r5
   182b6:	4650      	mov	r0, sl
	*data_len = set_data_len;
   182b8:	f889 6000 	strb.w	r6, [r9]
}
   182bc:	b003      	add	sp, #12
   182be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   182c2:	f7ea bccb 	b.w	2c5c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   182c6:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   182ca:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   182ce:	1cb0      	adds	r0, r6, #2
   182d0:	1811      	adds	r1, r2, r0
   182d2:	291f      	cmp	r1, #31
   182d4:	d908      	bls.n	182e8 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   182d6:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   182da:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   182de:	d11f      	bne.n	18320 <hci_set_ad+0xb6>
   182e0:	2a00      	cmp	r2, #0
   182e2:	dd1d      	ble.n	18320 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   182e4:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   182e8:	b2d7      	uxtb	r7, r2
   182ea:	1c79      	adds	r1, r7, #1
   182ec:	f80b 1006 	strb.w	r1, [fp, r6]
   182f0:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   182f2:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   182f4:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   182f8:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   182fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   18300:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   18302:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   18304:	f7ff fbfa 	bl	17afc <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   18308:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1830a:	443e      	add	r6, r7
   1830c:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   1830e:	3301      	adds	r3, #1
   18310:	f108 0808 	add.w	r8, r8, #8
   18314:	e7c6      	b.n	182a4 <hci_set_ad+0x3a>
		return -ENOBUFS;
   18316:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1831a:	b003      	add	sp, #12
   1831c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   18320:	4628      	mov	r0, r5
   18322:	f7fb f8cb 	bl	134bc <net_buf_unref>
		return err;
   18326:	f06f 0015 	mvn.w	r0, #21
   1832a:	e7f6      	b.n	1831a <hci_set_ad+0xb0>

0001832c <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1832c:	2301      	movs	r3, #1
{
   1832e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   18330:	fa03 f101 	lsl.w	r1, r3, r1
{
   18334:	4604      	mov	r4, r0
	if (val) {
   18336:	b162      	cbz	r2, 18352 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18338:	f3bf 8f5b 	dmb	ish
   1833c:	e854 3f00 	ldrex	r3, [r4]
   18340:	430b      	orrs	r3, r1
   18342:	e844 3200 	strex	r2, r3, [r4]
   18346:	2a00      	cmp	r2, #0
   18348:	d1f8      	bne.n	1833c <atomic_set_bit_to+0x10>
   1834a:	f3bf 8f5b 	dmb	ish
	}
}
   1834e:	bc10      	pop	{r4}
   18350:	4770      	bx	lr
   18352:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18354:	43c9      	mvns	r1, r1
   18356:	f7ff bf79 	b.w	1824c <atomic_and>

0001835a <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1835a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1835e:	b087      	sub	sp, #28
   18360:	4605      	mov	r5, r0
   18362:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   18366:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1836a:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1836e:	460c      	mov	r4, r1
   18370:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   18372:	2100      	movs	r1, #0
   18374:	2210      	movs	r2, #16
   18376:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   18378:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1837a:	f7ff fbca 	bl	17b12 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   1837e:	b186      	cbz	r6, 183a2 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   18380:	f7eb fa28 	bl	37d4 <bt_get_name>
   18384:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   18386:	2c00      	cmp	r4, #0
   18388:	d139      	bne.n	183fe <le_adv_update.constprop.0+0xa4>
   1838a:	2f00      	cmp	r7, #0
   1838c:	d142      	bne.n	18414 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   1838e:	4658      	mov	r0, fp
   18390:	f7ff fb87 	bl	17aa2 <strlen>
   18394:	2309      	movs	r3, #9
   18396:	f88d 3000 	strb.w	r3, [sp]
   1839a:	f88d 0001 	strb.w	r0, [sp, #1]
   1839e:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   183a2:	2e01      	cmp	r6, #1
			d_len = 2;
   183a4:	bf0c      	ite	eq
   183a6:	2202      	moveq	r2, #2
		d_len = 1;
   183a8:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   183aa:	a902      	add	r1, sp, #8
   183ac:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   183b0:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   183b4:	bf04      	itt	eq
   183b6:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   183ba:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   183bc:	f7ff ff55 	bl	1826a <hci_set_ad>
		if (err) {
   183c0:	4604      	mov	r4, r0
   183c2:	b978      	cbnz	r0, 183e4 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   183c4:	f1ba 0f00 	cmp.w	sl, #0
   183c8:	d126      	bne.n	18418 <le_adv_update.constprop.0+0xbe>
   183ca:	3510      	adds	r5, #16
   183cc:	f3bf 8f5b 	dmb	ish
   183d0:	e855 3f00 	ldrex	r3, [r5]
   183d4:	f043 0304 	orr.w	r3, r3, #4
   183d8:	e845 3200 	strex	r2, r3, [r5]
   183dc:	2a00      	cmp	r2, #0
   183de:	d1f7      	bne.n	183d0 <le_adv_update.constprop.0+0x76>
   183e0:	f3bf 8f5b 	dmb	ish
}
   183e4:	4620      	mov	r0, r4
   183e6:	b007      	add	sp, #28
   183e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   183ec:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   183f0:	3a08      	subs	r2, #8
   183f2:	2a01      	cmp	r2, #1
   183f4:	d925      	bls.n	18442 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   183f6:	3301      	adds	r3, #1
   183f8:	4598      	cmp	r8, r3
   183fa:	d1f7      	bne.n	183ec <le_adv_update.constprop.0+0x92>
   183fc:	e7c5      	b.n	1838a <le_adv_update.constprop.0+0x30>
   183fe:	2300      	movs	r3, #0
   18400:	e7fa      	b.n	183f8 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   18402:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   18406:	3a08      	subs	r2, #8
   18408:	2a01      	cmp	r2, #1
   1840a:	d91a      	bls.n	18442 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   1840c:	3301      	adds	r3, #1
   1840e:	4599      	cmp	r9, r3
   18410:	d1f7      	bne.n	18402 <le_adv_update.constprop.0+0xa8>
   18412:	e7bc      	b.n	1838e <le_adv_update.constprop.0+0x34>
   18414:	2300      	movs	r3, #0
   18416:	e7fa      	b.n	1840e <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   18418:	2e02      	cmp	r6, #2
   1841a:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   1841e:	bf08      	it	eq
   18420:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   18422:	a902      	add	r1, sp, #8
			d_len = 2;
   18424:	bf08      	it	eq
   18426:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   18428:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   1842c:	bf08      	it	eq
   1842e:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   18432:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   18436:	f7ff ff18 	bl	1826a <hci_set_ad>
		if (err) {
   1843a:	2800      	cmp	r0, #0
   1843c:	d0c5      	beq.n	183ca <le_adv_update.constprop.0+0x70>
   1843e:	4604      	mov	r4, r0
   18440:	e7d0      	b.n	183e4 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   18442:	f06f 0415 	mvn.w	r4, #21
   18446:	e7cd      	b.n	183e4 <le_adv_update.constprop.0+0x8a>

00018448 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   18448:	6843      	ldr	r3, [r0, #4]
   1844a:	f013 0008 	ands.w	r0, r3, #8
   1844e:	d00a      	beq.n	18466 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   18450:	035a      	lsls	r2, r3, #13
   18452:	d407      	bmi.n	18464 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   18454:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   18458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1845c:	bf0c      	ite	eq
   1845e:	2001      	moveq	r0, #1
   18460:	2002      	movne	r0, #2
   18462:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   18464:	2001      	movs	r0, #1
}
   18466:	4770      	bx	lr

00018468 <bt_le_adv_set_enable_legacy>:
{
   18468:	b570      	push	{r4, r5, r6, lr}
   1846a:	4606      	mov	r6, r0
   1846c:	b086      	sub	sp, #24
   1846e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   18470:	f242 000a 	movw	r0, #8202	; 0x200a
   18474:	2101      	movs	r1, #1
   18476:	f7ea fbb7 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
   1847a:	4604      	mov	r4, r0
   1847c:	b1b0      	cbz	r0, 184ac <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   1847e:	3008      	adds	r0, #8
	if (enable) {
   18480:	b195      	cbz	r5, 184a8 <bt_le_adv_set_enable_legacy+0x40>
   18482:	2101      	movs	r1, #1
   18484:	f001 fb24 	bl	19ad0 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   18488:	f106 0210 	add.w	r2, r6, #16
   1848c:	a903      	add	r1, sp, #12
   1848e:	4620      	mov	r0, r4
   18490:	9500      	str	r5, [sp, #0]
   18492:	2306      	movs	r3, #6
   18494:	f7ea fb96 	bl	2bc4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   18498:	2200      	movs	r2, #0
   1849a:	4621      	mov	r1, r4
   1849c:	f242 000a 	movw	r0, #8202	; 0x200a
   184a0:	f7ea fbdc 	bl	2c5c <bt_hci_cmd_send_sync>
}
   184a4:	b006      	add	sp, #24
   184a6:	bd70      	pop	{r4, r5, r6, pc}
   184a8:	4629      	mov	r1, r5
   184aa:	e7eb      	b.n	18484 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   184ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   184b0:	e7f8      	b.n	184a4 <bt_le_adv_set_enable_legacy+0x3c>

000184b2 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   184b2:	3018      	adds	r0, #24
   184b4:	f002 baa6 	b.w	1aa04 <k_work_cancel_delayable>

000184b8 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   184b8:	f7eb bd4e 	b.w	3f58 <bt_le_adv_stop>

000184bc <tx_notify>:
{
   184bc:	b570      	push	{r4, r5, r6, lr}
   184be:	4604      	mov	r4, r0
	__asm__ volatile(
   184c0:	f04f 0220 	mov.w	r2, #32
   184c4:	f3ef 8311 	mrs	r3, BASEPRI
   184c8:	f382 8812 	msr	BASEPRI_MAX, r2
   184cc:	f3bf 8f6f 	isb	sy
	return list->head;
   184d0:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   184d2:	b920      	cbnz	r0, 184de <tx_notify+0x22>
	__asm__ volatile(
   184d4:	f383 8811 	msr	BASEPRI, r3
   184d8:	f3bf 8f6f 	isb	sy
}
   184dc:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   184de:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   184e0:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   184e2:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   184e4:	4288      	cmp	r0, r1
	list->tail = node;
   184e6:	bf08      	it	eq
   184e8:	6262      	streq	r2, [r4, #36]	; 0x24
   184ea:	f383 8811 	msr	BASEPRI, r3
   184ee:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   184f2:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   184f6:	f7eb fdbf 	bl	4078 <tx_free>
		cb(conn, user_data);
   184fa:	4631      	mov	r1, r6
   184fc:	4620      	mov	r0, r4
   184fe:	47a8      	blx	r5
	while (1) {
   18500:	e7de      	b.n	184c0 <tx_notify+0x4>

00018502 <tx_complete_work>:
	tx_notify(conn);
   18502:	3828      	subs	r0, #40	; 0x28
   18504:	f7ff bfda 	b.w	184bc <tx_notify>

00018508 <bt_conn_reset_rx_state>:
{
   18508:	b510      	push	{r4, lr}
   1850a:	4604      	mov	r4, r0
	if (!conn->rx) {
   1850c:	6900      	ldr	r0, [r0, #16]
   1850e:	b118      	cbz	r0, 18518 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   18510:	f7fa ffd4 	bl	134bc <net_buf_unref>
	conn->rx = NULL;
   18514:	2300      	movs	r3, #0
   18516:	6123      	str	r3, [r4, #16]
}
   18518:	bd10      	pop	{r4, pc}

0001851a <conn_cleanup>:
{
   1851a:	b570      	push	{r4, r5, r6, lr}
   1851c:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1851e:	f100 0638 	add.w	r6, r0, #56	; 0x38
   18522:	2200      	movs	r2, #0
   18524:	2300      	movs	r3, #0
   18526:	4630      	mov	r0, r6
   18528:	f001 fa66 	bl	199f8 <net_buf_get>
   1852c:	4605      	mov	r5, r0
   1852e:	b950      	cbnz	r0, 18546 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   18530:	4620      	mov	r0, r4
   18532:	f7ff ffe9 	bl	18508 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18536:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1853a:	2200      	movs	r2, #0
}
   1853c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18540:	2300      	movs	r3, #0
   18542:	f7fd bfa5 	b.w	16490 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   18546:	6968      	ldr	r0, [r5, #20]
   18548:	b108      	cbz	r0, 1854e <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1854a:	f7eb fd95 	bl	4078 <tx_free>
		net_buf_unref(buf);
   1854e:	4628      	mov	r0, r5
   18550:	f7fa ffb4 	bl	134bc <net_buf_unref>
   18554:	e7e5      	b.n	18522 <conn_cleanup+0x8>

00018556 <bt_conn_recv>:
{
   18556:	b570      	push	{r4, r5, r6, lr}
   18558:	4616      	mov	r6, r2
   1855a:	4604      	mov	r4, r0
   1855c:	460d      	mov	r5, r1
	tx_notify(conn);
   1855e:	f7ff ffad 	bl	184bc <tx_notify>
	switch (flags) {
   18562:	2e01      	cmp	r6, #1
   18564:	d017      	beq.n	18596 <bt_conn_recv+0x40>
   18566:	2e02      	cmp	r6, #2
   18568:	d117      	bne.n	1859a <bt_conn_recv+0x44>
		if (conn->rx) {
   1856a:	6923      	ldr	r3, [r4, #16]
   1856c:	b113      	cbz	r3, 18574 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1856e:	4620      	mov	r0, r4
   18570:	f7ff ffca 	bl	18508 <bt_conn_reset_rx_state>
		conn->rx = buf;
   18574:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   18576:	6921      	ldr	r1, [r4, #16]
   18578:	898a      	ldrh	r2, [r1, #12]
   1857a:	2a01      	cmp	r2, #1
   1857c:	d937      	bls.n	185ee <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1857e:	688b      	ldr	r3, [r1, #8]
   18580:	881b      	ldrh	r3, [r3, #0]
   18582:	3304      	adds	r3, #4
   18584:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   18586:	429a      	cmp	r2, r3
   18588:	d331      	bcc.n	185ee <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   1858a:	d928      	bls.n	185de <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   1858c:	4620      	mov	r0, r4
}
   1858e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   18592:	f7ff bfb9 	b.w	18508 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   18596:	6920      	ldr	r0, [r4, #16]
   18598:	b918      	cbnz	r0, 185a2 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   1859a:	4620      	mov	r0, r4
   1859c:	f7ff ffb4 	bl	18508 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   185a0:	e001      	b.n	185a6 <bt_conn_recv+0x50>
		if (!buf->len) {
   185a2:	89ae      	ldrh	r6, [r5, #12]
   185a4:	b926      	cbnz	r6, 185b0 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   185a6:	4628      	mov	r0, r5
}
   185a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   185ac:	f7fa bf86 	b.w	134bc <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   185b0:	3008      	adds	r0, #8
   185b2:	f001 fab9 	bl	19b28 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   185b6:	4286      	cmp	r6, r0
   185b8:	d907      	bls.n	185ca <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   185ba:	6921      	ldr	r1, [r4, #16]
   185bc:	2200      	movs	r2, #0
   185be:	4620      	mov	r0, r4
   185c0:	f000 f998 	bl	188f4 <bt_l2cap_recv>
			conn->rx = NULL;
   185c4:	2300      	movs	r3, #0
   185c6:	6123      	str	r3, [r4, #16]
   185c8:	e7ed      	b.n	185a6 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   185ca:	6920      	ldr	r0, [r4, #16]
   185cc:	89aa      	ldrh	r2, [r5, #12]
   185ce:	68a9      	ldr	r1, [r5, #8]
   185d0:	3008      	adds	r0, #8
   185d2:	f001 fa74 	bl	19abe <net_buf_simple_add_mem>
		net_buf_unref(buf);
   185d6:	4628      	mov	r0, r5
   185d8:	f7fa ff70 	bl	134bc <net_buf_unref>
		break;
   185dc:	e7cb      	b.n	18576 <bt_conn_recv+0x20>
	conn->rx = NULL;
   185de:	2300      	movs	r3, #0
   185e0:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   185e2:	4620      	mov	r0, r4
   185e4:	2201      	movs	r2, #1
}
   185e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   185ea:	f000 b983 	b.w	188f4 <bt_l2cap_recv>
}
   185ee:	bd70      	pop	{r4, r5, r6, pc}

000185f0 <bt_conn_ref>:
{
   185f0:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   185f2:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   185f6:	f3bf 8f5b 	dmb	ish
   185fa:	6813      	ldr	r3, [r2, #0]
   185fc:	f3bf 8f5b 	dmb	ish
		if (!old) {
   18600:	b17b      	cbz	r3, 18622 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18602:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   18606:	1c59      	adds	r1, r3, #1
   18608:	e852 4f00 	ldrex	r4, [r2]
   1860c:	429c      	cmp	r4, r3
   1860e:	d104      	bne.n	1861a <bt_conn_ref+0x2a>
   18610:	e842 1c00 	strex	ip, r1, [r2]
   18614:	f1bc 0f00 	cmp.w	ip, #0
   18618:	d1f6      	bne.n	18608 <bt_conn_ref+0x18>
   1861a:	f3bf 8f5b 	dmb	ish
   1861e:	d1ea      	bne.n	185f6 <bt_conn_ref+0x6>
}
   18620:	bd10      	pop	{r4, pc}
			return NULL;
   18622:	4618      	mov	r0, r3
   18624:	e7fc      	b.n	18620 <bt_conn_ref+0x30>

00018626 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   18626:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1862a:	f3bf 8f5b 	dmb	ish
   1862e:	e853 2f00 	ldrex	r2, [r3]
   18632:	3a01      	subs	r2, #1
   18634:	e843 2100 	strex	r1, r2, [r3]
   18638:	2900      	cmp	r1, #0
   1863a:	d1f8      	bne.n	1862e <bt_conn_unref+0x8>
   1863c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   18640:	7883      	ldrb	r3, [r0, #2]
   18642:	2b01      	cmp	r3, #1
   18644:	d108      	bne.n	18658 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18646:	f3bf 8f5b 	dmb	ish
   1864a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1864e:	f3bf 8f5b 	dmb	ish
   18652:	b90b      	cbnz	r3, 18658 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   18654:	f7eb bcd0 	b.w	3ff8 <bt_le_adv_resume>
}
   18658:	4770      	bx	lr

0001865a <conn_lookup_handle>:
{
   1865a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1865e:	4607      	mov	r7, r0
   18660:	460e      	mov	r6, r1
   18662:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   18664:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   18666:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1866a:	42b4      	cmp	r4, r6
   1866c:	d103      	bne.n	18676 <conn_lookup_handle+0x1c>
	return NULL;
   1866e:	2300      	movs	r3, #0
}
   18670:	4618      	mov	r0, r3
   18672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   18676:	fb09 7004 	mla	r0, r9, r4, r7
   1867a:	f7ff ffb9 	bl	185f0 <bt_conn_ref>
   1867e:	4603      	mov	r3, r0
		if (!conn) {
   18680:	b158      	cbz	r0, 1869a <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   18682:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   18684:	2d01      	cmp	r5, #1
   18686:	d002      	beq.n	1868e <conn_lookup_handle+0x34>
   18688:	3d07      	subs	r5, #7
   1868a:	2d01      	cmp	r5, #1
   1868c:	d803      	bhi.n	18696 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1868e:	881a      	ldrh	r2, [r3, #0]
   18690:	4542      	cmp	r2, r8
   18692:	d0ed      	beq.n	18670 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   18694:	4618      	mov	r0, r3
   18696:	f7ff ffc6 	bl	18626 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1869a:	3401      	adds	r4, #1
   1869c:	e7e5      	b.n	1866a <conn_lookup_handle+0x10>

0001869e <bt_conn_connected>:
{
   1869e:	b510      	push	{r4, lr}
   186a0:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   186a2:	f7ec f973 	bl	498c <bt_l2cap_connected>
	notify_connected(conn);
   186a6:	4620      	mov	r0, r4
}
   186a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   186ac:	f7eb bcee 	b.w	408c <notify_connected>

000186b0 <bt_conn_get_security>:
}
   186b0:	2001      	movs	r0, #1
   186b2:	4770      	bx	lr

000186b4 <bt_conn_is_peer_addr_le>:
{
   186b4:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   186b6:	7a03      	ldrb	r3, [r0, #8]
   186b8:	428b      	cmp	r3, r1
{
   186ba:	4604      	mov	r4, r0
   186bc:	4615      	mov	r5, r2
	if (id != conn->id) {
   186be:	d115      	bne.n	186ec <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   186c0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   186c4:	2207      	movs	r2, #7
   186c6:	4628      	mov	r0, r5
   186c8:	f7ff fa07 	bl	17ada <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   186cc:	b180      	cbz	r0, 186f0 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   186ce:	78e3      	ldrb	r3, [r4, #3]
   186d0:	2207      	movs	r2, #7
   186d2:	b943      	cbnz	r3, 186e6 <bt_conn_is_peer_addr_le+0x32>
   186d4:	f104 0196 	add.w	r1, r4, #150	; 0x96
   186d8:	4628      	mov	r0, r5
   186da:	f7ff f9fe 	bl	17ada <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   186de:	fab0 f080 	clz	r0, r0
   186e2:	0940      	lsrs	r0, r0, #5
}
   186e4:	bd38      	pop	{r3, r4, r5, pc}
   186e6:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   186ea:	e7f5      	b.n	186d8 <bt_conn_is_peer_addr_le+0x24>
		return false;
   186ec:	2000      	movs	r0, #0
   186ee:	e7f9      	b.n	186e4 <bt_conn_is_peer_addr_le+0x30>
		return true;
   186f0:	2001      	movs	r0, #1
   186f2:	e7f7      	b.n	186e4 <bt_conn_is_peer_addr_le+0x30>

000186f4 <bt_conn_exists_le>:
{
   186f4:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   186f6:	f7eb ff97 	bl	4628 <bt_conn_lookup_addr_le>
	if (conn) {
   186fa:	b110      	cbz	r0, 18702 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   186fc:	f7ff ff93 	bl	18626 <bt_conn_unref>
		return true;
   18700:	2001      	movs	r0, #1
}
   18702:	bd08      	pop	{r3, pc}

00018704 <bt_conn_get_dst>:
}
   18704:	3088      	adds	r0, #136	; 0x88
   18706:	4770      	bx	lr

00018708 <bt_conn_le_conn_update>:
{
   18708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1870a:	4607      	mov	r7, r0
   1870c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1870e:	f242 0013 	movw	r0, #8211	; 0x2013
   18712:	210e      	movs	r1, #14
   18714:	f7ea fa68 	bl	2be8 <bt_hci_cmd_create>
	if (!buf) {
   18718:	4606      	mov	r6, r0
   1871a:	b1d0      	cbz	r0, 18752 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1871c:	210e      	movs	r1, #14
   1871e:	3008      	adds	r0, #8
   18720:	f001 f9c7 	bl	19ab2 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   18724:	220e      	movs	r2, #14
   18726:	4604      	mov	r4, r0
   18728:	2100      	movs	r1, #0
   1872a:	f7ff f9f2 	bl	17b12 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1872e:	883b      	ldrh	r3, [r7, #0]
   18730:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   18732:	882b      	ldrh	r3, [r5, #0]
   18734:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   18736:	886b      	ldrh	r3, [r5, #2]
   18738:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1873a:	88ab      	ldrh	r3, [r5, #4]
   1873c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1873e:	88eb      	ldrh	r3, [r5, #6]
   18740:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   18742:	4631      	mov	r1, r6
   18744:	2200      	movs	r2, #0
}
   18746:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1874a:	f242 0013 	movw	r0, #8211	; 0x2013
   1874e:	f7ea ba85 	b.w	2c5c <bt_hci_cmd_send_sync>
}
   18752:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018758 <l2cap_connected>:
}
   18758:	4770      	bx	lr

0001875a <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1875a:	3010      	adds	r0, #16
   1875c:	f002 b952 	b.w	1aa04 <k_work_cancel_delayable>

00018760 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18762:	4607      	mov	r7, r0
   18764:	460e      	mov	r6, r1
   18766:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   18768:	2300      	movs	r3, #0
   1876a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1876e:	2104      	movs	r1, #4
   18770:	2000      	movs	r0, #0
   18772:	f7eb fe9f 	bl	44b4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   18776:	4604      	mov	r4, r0
   18778:	b130      	cbz	r0, 18788 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   1877a:	2104      	movs	r1, #4
   1877c:	3008      	adds	r0, #8
   1877e:	f001 f998 	bl	19ab2 <net_buf_simple_add>
	hdr->code = code;
   18782:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   18784:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   18786:	8045      	strh	r5, [r0, #2]
}
   18788:	4620      	mov	r0, r4
   1878a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001878c <bt_l2cap_chan_remove>:
	return list->head;
   1878c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1878e:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   18790:	b173      	cbz	r3, 187b0 <bt_l2cap_chan_remove+0x24>
   18792:	3b08      	subs	r3, #8
   18794:	2500      	movs	r5, #0
	return node->next;
   18796:	461a      	mov	r2, r3
		if (chan == ch) {
   18798:	4299      	cmp	r1, r3
   1879a:	f852 4f08 	ldr.w	r4, [r2, #8]!
   1879e:	d10d      	bne.n	187bc <bt_l2cap_chan_remove+0x30>
	return list->tail;
   187a0:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   187a2:	b935      	cbnz	r5, 187b2 <bt_l2cap_chan_remove+0x26>
   187a4:	4291      	cmp	r1, r2
	list->head = node;
   187a6:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   187a8:	d100      	bne.n	187ac <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   187aa:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   187ac:	2200      	movs	r2, #0
   187ae:	609a      	str	r2, [r3, #8]
}
   187b0:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   187b2:	4291      	cmp	r1, r2
	parent->next = child;
   187b4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   187b6:	bf08      	it	eq
   187b8:	6545      	streq	r5, [r0, #84]	; 0x54
}
   187ba:	e7f7      	b.n	187ac <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   187bc:	2c00      	cmp	r4, #0
   187be:	d0f7      	beq.n	187b0 <bt_l2cap_chan_remove+0x24>
   187c0:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   187c4:	4615      	mov	r5, r2
   187c6:	e7e6      	b.n	18796 <bt_l2cap_chan_remove+0xa>

000187c8 <bt_l2cap_chan_del>:
{
   187c8:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   187ca:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   187ce:	4604      	mov	r4, r0
	if (!chan->conn) {
   187d0:	b123      	cbz	r3, 187dc <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   187d2:	686b      	ldr	r3, [r5, #4]
   187d4:	b103      	cbz	r3, 187d8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   187d6:	4798      	blx	r3
	chan->conn = NULL;
   187d8:	2300      	movs	r3, #0
   187da:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   187dc:	68e3      	ldr	r3, [r4, #12]
   187de:	b10b      	cbz	r3, 187e4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   187e0:	4620      	mov	r0, r4
   187e2:	4798      	blx	r3
	if (ops->released) {
   187e4:	69eb      	ldr	r3, [r5, #28]
   187e6:	b11b      	cbz	r3, 187f0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   187e8:	4620      	mov	r0, r4
}
   187ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   187ee:	4718      	bx	r3
}
   187f0:	bd70      	pop	{r4, r5, r6, pc}

000187f2 <l2cap_rtx_timeout>:
{
   187f2:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   187f4:	f1a0 0410 	sub.w	r4, r0, #16
   187f8:	4621      	mov	r1, r4
   187fa:	f850 0c10 	ldr.w	r0, [r0, #-16]
   187fe:	f7ff ffc5 	bl	1878c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   18802:	4620      	mov	r0, r4
}
   18804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   18808:	f7ff bfde 	b.w	187c8 <bt_l2cap_chan_del>

0001880c <bt_l2cap_disconnected>:
	return list->head;
   1880c:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   1880e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   18810:	b160      	cbz	r0, 1882c <bt_l2cap_disconnected+0x20>
	return node->next;
   18812:	f850 4908 	ldr.w	r4, [r0], #-8
   18816:	b104      	cbz	r4, 1881a <bt_l2cap_disconnected+0xe>
   18818:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1881a:	f7ff ffd5 	bl	187c8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1881e:	b12c      	cbz	r4, 1882c <bt_l2cap_disconnected+0x20>
   18820:	68a3      	ldr	r3, [r4, #8]
   18822:	b103      	cbz	r3, 18826 <bt_l2cap_disconnected+0x1a>
   18824:	3b08      	subs	r3, #8
{
   18826:	4620      	mov	r0, r4
   18828:	461c      	mov	r4, r3
   1882a:	e7f6      	b.n	1881a <bt_l2cap_disconnected+0xe>
}
   1882c:	bd10      	pop	{r4, pc}

0001882e <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1882e:	3104      	adds	r1, #4
   18830:	f7eb be40 	b.w	44b4 <bt_conn_create_pdu_timeout>

00018834 <bt_l2cap_send_cb>:
{
   18834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18838:	4614      	mov	r4, r2
   1883a:	4605      	mov	r5, r0
   1883c:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1883e:	f102 0008 	add.w	r0, r2, #8
   18842:	2104      	movs	r1, #4
   18844:	461e      	mov	r6, r3
   18846:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1884a:	f001 f949 	bl	19ae0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1884e:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   18850:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18852:	3a04      	subs	r2, #4
   18854:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   18856:	4643      	mov	r3, r8
   18858:	4632      	mov	r2, r6
   1885a:	4621      	mov	r1, r4
   1885c:	4628      	mov	r0, r5
}
   1885e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   18862:	f7eb bcf7 	b.w	4254 <bt_conn_send_cb>

00018866 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   18866:	898b      	ldrh	r3, [r1, #12]
   18868:	2b03      	cmp	r3, #3
{
   1886a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1886c:	4605      	mov	r5, r0
   1886e:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18870:	d927      	bls.n	188c2 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   18872:	2104      	movs	r1, #4
   18874:	f104 0008 	add.w	r0, r4, #8
   18878:	f001 f942 	bl	19b00 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1887c:	89a3      	ldrh	r3, [r4, #12]
   1887e:	8842      	ldrh	r2, [r0, #2]
   18880:	429a      	cmp	r2, r3
   18882:	d11e      	bne.n	188c2 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   18884:	7841      	ldrb	r1, [r0, #1]
   18886:	b1e1      	cbz	r1, 188c2 <l2cap_recv+0x5c>
	switch (hdr->code) {
   18888:	7803      	ldrb	r3, [r0, #0]
   1888a:	2b01      	cmp	r3, #1
   1888c:	d019      	beq.n	188c2 <l2cap_recv+0x5c>
   1888e:	2b13      	cmp	r3, #19
   18890:	d017      	beq.n	188c2 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18892:	2202      	movs	r2, #2
   18894:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   18896:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18898:	f7ff ff62 	bl	18760 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1889c:	4604      	mov	r4, r0
   1889e:	b180      	cbz	r0, 188c2 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   188a0:	2102      	movs	r1, #2
   188a2:	3008      	adds	r0, #8
   188a4:	f001 f905 	bl	19ab2 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   188a8:	2300      	movs	r3, #0
   188aa:	7003      	strb	r3, [r0, #0]
   188ac:	7043      	strb	r3, [r0, #1]
   188ae:	4622      	mov	r2, r4
   188b0:	9300      	str	r3, [sp, #0]
   188b2:	2105      	movs	r1, #5
   188b4:	4628      	mov	r0, r5
   188b6:	f7ff ffbd 	bl	18834 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   188ba:	b110      	cbz	r0, 188c2 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   188bc:	4620      	mov	r0, r4
   188be:	f7fa fdfd 	bl	134bc <net_buf_unref>
}
   188c2:	2000      	movs	r0, #0
   188c4:	b003      	add	sp, #12
   188c6:	bd30      	pop	{r4, r5, pc}

000188c8 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   188c8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   188ca:	b138      	cbz	r0, 188dc <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   188cc:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   188d0:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   188d2:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   188d6:	d001      	beq.n	188dc <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   188d8:	6880      	ldr	r0, [r0, #8]
   188da:	e7f6      	b.n	188ca <bt_l2cap_le_lookup_tx_cid+0x2>
}
   188dc:	4770      	bx	lr

000188de <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   188de:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   188e0:	b138      	cbz	r0, 188f2 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   188e2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   188e6:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   188e8:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   188ec:	d001      	beq.n	188f2 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   188ee:	6880      	ldr	r0, [r0, #8]
   188f0:	e7f6      	b.n	188e0 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   188f2:	4770      	bx	lr

000188f4 <bt_l2cap_recv>:
{
   188f4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   188f6:	898b      	ldrh	r3, [r1, #12]
   188f8:	2b03      	cmp	r3, #3
{
   188fa:	4605      	mov	r5, r0
   188fc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   188fe:	d804      	bhi.n	1890a <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   18900:	4620      	mov	r0, r4
}
   18902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   18906:	f7fa bdd9 	b.w	134bc <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1890a:	2104      	movs	r1, #4
   1890c:	f104 0008 	add.w	r0, r4, #8
   18910:	f001 f8f6 	bl	19b00 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   18914:	8841      	ldrh	r1, [r0, #2]
   18916:	4628      	mov	r0, r5
   18918:	f7ff ffe1 	bl	188de <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1891c:	2800      	cmp	r0, #0
   1891e:	d0ef      	beq.n	18900 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   18920:	6843      	ldr	r3, [r0, #4]
   18922:	4621      	mov	r1, r4
   18924:	691b      	ldr	r3, [r3, #16]
   18926:	4798      	blx	r3
   18928:	e7ea      	b.n	18900 <bt_l2cap_recv+0xc>

0001892a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1892a:	4770      	bx	lr

0001892c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1892c:	4603      	mov	r3, r0
	return list->head;
   1892e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   18930:	b128      	cbz	r0, 1893e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18932:	6859      	ldr	r1, [r3, #4]
	return node->next;
   18934:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   18936:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18938:	4288      	cmp	r0, r1
	list->tail = node;
   1893a:	bf08      	it	eq
   1893c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1893e:	4770      	bx	lr

00018940 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   18940:	4603      	mov	r3, r0
	size_t bytes = 0;
   18942:	2000      	movs	r0, #0

	while (buf) {
   18944:	b903      	cbnz	r3, 18948 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   18946:	4770      	bx	lr
		bytes += buf->len;
   18948:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1894a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1894c:	4410      	add	r0, r2
		buf = buf->frags;
   1894e:	e7f9      	b.n	18944 <net_buf_frags_len+0x4>

00018950 <att_sent>:
	if (chan->ops->sent) {
   18950:	684b      	ldr	r3, [r1, #4]
   18952:	695b      	ldr	r3, [r3, #20]
{
   18954:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   18956:	b103      	cbz	r3, 1895a <att_sent+0xa>
		chan->ops->sent(chan);
   18958:	4718      	bx	r3
}
   1895a:	4770      	bx	lr

0001895c <attr_read_type_cb>:
{
   1895c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1895e:	68d4      	ldr	r4, [r2, #12]
   18960:	7823      	ldrb	r3, [r4, #0]
   18962:	3102      	adds	r1, #2
   18964:	b913      	cbnz	r3, 1896c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   18966:	7021      	strb	r1, [r4, #0]
	return true;
   18968:	2001      	movs	r0, #1
   1896a:	e006      	b.n	1897a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1896c:	428b      	cmp	r3, r1
   1896e:	d0fb      	beq.n	18968 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   18970:	8983      	ldrh	r3, [r0, #12]
   18972:	3b02      	subs	r3, #2
   18974:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   18976:	2000      	movs	r0, #0
   18978:	6110      	str	r0, [r2, #16]
}
   1897a:	bd10      	pop	{r4, pc}

0001897c <att_prepare_write_req>:
}
   1897c:	2006      	movs	r0, #6
   1897e:	4770      	bx	lr

00018980 <att_op_get_type>:
	switch (op) {
   18980:	281e      	cmp	r0, #30
   18982:	d816      	bhi.n	189b2 <att_op_get_type+0x32>
   18984:	b308      	cbz	r0, 189ca <att_op_get_type+0x4a>
   18986:	1e43      	subs	r3, r0, #1
   18988:	2b1d      	cmp	r3, #29
   1898a:	d81e      	bhi.n	189ca <att_op_get_type+0x4a>
   1898c:	e8df f003 	tbb	[pc, r3]
   18990:	23172317 	.word	0x23172317
   18994:	23172317 	.word	0x23172317
   18998:	23172317 	.word	0x23172317
   1899c:	23172317 	.word	0x23172317
   189a0:	1d172317 	.word	0x1d172317
   189a4:	2317231d 	.word	0x2317231d
   189a8:	1d191d17 	.word	0x1d191d17
   189ac:	0f1b      	.short	0x0f1b
   189ae:	2004      	movs	r0, #4
   189b0:	4770      	bx	lr
   189b2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   189b6:	2b52      	cmp	r3, #82	; 0x52
   189b8:	d107      	bne.n	189ca <att_op_get_type+0x4a>
		return ATT_COMMAND;
   189ba:	2000      	movs	r0, #0
}
   189bc:	4770      	bx	lr
		return ATT_RESPONSE;
   189be:	2002      	movs	r0, #2
   189c0:	4770      	bx	lr
		return ATT_NOTIFICATION;
   189c2:	2003      	movs	r0, #3
   189c4:	4770      	bx	lr
		return ATT_INDICATION;
   189c6:	2005      	movs	r0, #5
   189c8:	4770      	bx	lr
		return ATT_COMMAND;
   189ca:	f010 0f40 	tst.w	r0, #64	; 0x40
   189ce:	bf0c      	ite	eq
   189d0:	2006      	moveq	r0, #6
   189d2:	2000      	movne	r0, #0
   189d4:	4770      	bx	lr
		return ATT_REQUEST;
   189d6:	2001      	movs	r0, #1
   189d8:	4770      	bx	lr

000189da <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   189da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   189dc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   189e0:	2300      	movs	r3, #0
   189e2:	9300      	str	r3, [sp, #0]
   189e4:	461a      	mov	r2, r3
   189e6:	f7ec fee7 	bl	57b8 <bt_gatt_foreach_attr_type>
				  user_data);
}
   189ea:	b005      	add	sp, #20
   189ec:	f85d fb04 	ldr.w	pc, [sp], #4

000189f0 <find_type_cb>:
{
   189f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   189f4:	f8d2 9000 	ldr.w	r9, [r2]
{
   189f8:	b091      	sub	sp, #68	; 0x44
   189fa:	4607      	mov	r7, r0
   189fc:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   189fe:	2500      	movs	r5, #0
   18a00:	f642 0301 	movw	r3, #10241	; 0x2801
   18a04:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   18a06:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18a0a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18a0e:	a90b      	add	r1, sp, #44	; 0x2c
{
   18a10:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18a12:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18a16:	f7ff f8da 	bl	17bce <bt_uuid_cmp>
   18a1a:	2800      	cmp	r0, #0
   18a1c:	d079      	beq.n	18b12 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   18a1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18a22:	6838      	ldr	r0, [r7, #0]
   18a24:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   18a28:	a90b      	add	r1, sp, #44	; 0x2c
   18a2a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18a2e:	f7ff f8ce 	bl	17bce <bt_uuid_cmp>
   18a32:	b138      	cbz	r0, 18a44 <find_type_cb+0x54>
		if (data->group &&
   18a34:	68a3      	ldr	r3, [r4, #8]
   18a36:	b11b      	cbz	r3, 18a40 <find_type_cb+0x50>
   18a38:	885a      	ldrh	r2, [r3, #2]
   18a3a:	42b2      	cmp	r2, r6
   18a3c:	d200      	bcs.n	18a40 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18a3e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   18a40:	2001      	movs	r0, #1
   18a42:	e009      	b.n	18a58 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   18a44:	6861      	ldr	r1, [r4, #4]
   18a46:	4608      	mov	r0, r1
   18a48:	f7ff ff7a 	bl	18940 <net_buf_frags_len>
   18a4c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   18a50:	1a1b      	subs	r3, r3, r0
   18a52:	2b03      	cmp	r3, #3
   18a54:	d803      	bhi.n	18a5e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   18a56:	2000      	movs	r0, #0
}
   18a58:	b011      	add	sp, #68	; 0x44
   18a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   18a5e:	4608      	mov	r0, r1
   18a60:	f000 fff9 	bl	19a56 <net_buf_frag_last>
   18a64:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   18a66:	6860      	ldr	r0, [r4, #4]
   18a68:	f7ff ff6a 	bl	18940 <net_buf_frags_len>
   18a6c:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   18a70:	f105 0b08 	add.w	fp, r5, #8
   18a74:	ebaa 0a00 	sub.w	sl, sl, r0
   18a78:	4658      	mov	r0, fp
   18a7a:	f001 f855 	bl	19b28 <net_buf_simple_tailroom>
   18a7e:	4582      	cmp	sl, r0
   18a80:	d23f      	bcs.n	18b02 <find_type_cb+0x112>
   18a82:	6860      	ldr	r0, [r4, #4]
   18a84:	f7ff ff5c 	bl	18940 <net_buf_frags_len>
   18a88:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   18a8c:	1a18      	subs	r0, r3, r0
	if (!len) {
   18a8e:	b970      	cbnz	r0, 18aae <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   18a90:	6863      	ldr	r3, [r4, #4]
   18a92:	7998      	ldrb	r0, [r3, #6]
   18a94:	f7fa fc4e 	bl	13334 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18a98:	2200      	movs	r2, #0
   18a9a:	2300      	movs	r3, #0
   18a9c:	f000 ffa7 	bl	199ee <net_buf_alloc_fixed>
		if (!frag) {
   18aa0:	4605      	mov	r5, r0
   18aa2:	2800      	cmp	r0, #0
   18aa4:	d0d7      	beq.n	18a56 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   18aa6:	4601      	mov	r1, r0
   18aa8:	6860      	ldr	r0, [r4, #4]
   18aaa:	f000 ffe5 	bl	19a78 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   18aae:	2300      	movs	r3, #0
   18ab0:	9300      	str	r3, [sp, #0]
   18ab2:	f8d7 9004 	ldr.w	r9, [r7, #4]
   18ab6:	4639      	mov	r1, r7
   18ab8:	2310      	movs	r3, #16
   18aba:	aa02      	add	r2, sp, #8
   18abc:	4640      	mov	r0, r8
   18abe:	47c8      	blx	r9
	if (read < 0) {
   18ac0:	1e07      	subs	r7, r0, #0
   18ac2:	db26      	blt.n	18b12 <find_type_cb+0x122>
	if (read != data->value_len) {
   18ac4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18ac6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   18ac8:	42ba      	cmp	r2, r7
   18aca:	d01e      	beq.n	18b0a <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   18acc:	4601      	mov	r1, r0
   18ace:	a80b      	add	r0, sp, #44	; 0x2c
   18ad0:	f7ff f8ab 	bl	17c2a <bt_uuid_create>
   18ad4:	b1e8      	cbz	r0, 18b12 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   18ad6:	b2fa      	uxtb	r2, r7
   18ad8:	a902      	add	r1, sp, #8
   18ada:	a806      	add	r0, sp, #24
   18adc:	f7ff f8a5 	bl	17c2a <bt_uuid_create>
   18ae0:	b1b8      	cbz	r0, 18b12 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   18ae2:	a906      	add	r1, sp, #24
   18ae4:	a80b      	add	r0, sp, #44	; 0x2c
   18ae6:	f7ff f872 	bl	17bce <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   18aea:	b990      	cbnz	r0, 18b12 <find_type_cb+0x122>
	data->err = 0x00;
   18aec:	2300      	movs	r3, #0
   18aee:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   18af0:	2104      	movs	r1, #4
   18af2:	f105 0008 	add.w	r0, r5, #8
   18af6:	f000 ffdc 	bl	19ab2 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   18afa:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   18afc:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   18afe:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   18b00:	e79e      	b.n	18a40 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   18b02:	4658      	mov	r0, fp
   18b04:	f001 f810 	bl	19b28 <net_buf_simple_tailroom>
   18b08:	e7c1      	b.n	18a8e <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   18b0a:	a902      	add	r1, sp, #8
   18b0c:	f7fe ffe5 	bl	17ada <memcmp>
   18b10:	e7eb      	b.n	18aea <find_type_cb+0xfa>
	data->group = NULL;
   18b12:	2300      	movs	r3, #0
   18b14:	60a3      	str	r3, [r4, #8]
   18b16:	e793      	b.n	18a40 <find_type_cb+0x50>

00018b18 <find_info_cb>:
{
   18b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   18b1a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   18b1c:	6817      	ldr	r7, [r2, #0]
{
   18b1e:	4605      	mov	r5, r0
   18b20:	460e      	mov	r6, r1
   18b22:	4614      	mov	r4, r2
	if (!data->rsp) {
   18b24:	b963      	cbnz	r3, 18b40 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   18b26:	6850      	ldr	r0, [r2, #4]
   18b28:	2101      	movs	r1, #1
   18b2a:	3008      	adds	r0, #8
   18b2c:	f000 ffc1 	bl	19ab2 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   18b30:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   18b32:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   18b34:	781b      	ldrb	r3, [r3, #0]
   18b36:	2b00      	cmp	r3, #0
   18b38:	bf0c      	ite	eq
   18b3a:	2301      	moveq	r3, #1
   18b3c:	2302      	movne	r3, #2
   18b3e:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   18b40:	68a3      	ldr	r3, [r4, #8]
   18b42:	781b      	ldrb	r3, [r3, #0]
   18b44:	2b01      	cmp	r3, #1
   18b46:	d003      	beq.n	18b50 <find_info_cb+0x38>
   18b48:	2b02      	cmp	r3, #2
   18b4a:	d019      	beq.n	18b80 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   18b4c:	2000      	movs	r0, #0
   18b4e:	e016      	b.n	18b7e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   18b50:	682b      	ldr	r3, [r5, #0]
   18b52:	781b      	ldrb	r3, [r3, #0]
   18b54:	2b00      	cmp	r3, #0
   18b56:	d1f9      	bne.n	18b4c <find_info_cb+0x34>
   18b58:	6860      	ldr	r0, [r4, #4]
   18b5a:	2104      	movs	r1, #4
   18b5c:	3008      	adds	r0, #8
   18b5e:	f000 ffa8 	bl	19ab2 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   18b62:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   18b64:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   18b66:	885b      	ldrh	r3, [r3, #2]
   18b68:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   18b6a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   18b6c:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   18b6e:	899b      	ldrh	r3, [r3, #12]
   18b70:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   18b74:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   18b76:	2804      	cmp	r0, #4
   18b78:	bf94      	ite	ls
   18b7a:	2000      	movls	r0, #0
   18b7c:	2001      	movhi	r0, #1
}
   18b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   18b80:	682b      	ldr	r3, [r5, #0]
   18b82:	781b      	ldrb	r3, [r3, #0]
   18b84:	2b02      	cmp	r3, #2
   18b86:	d1e1      	bne.n	18b4c <find_info_cb+0x34>
   18b88:	6860      	ldr	r0, [r4, #4]
   18b8a:	2112      	movs	r1, #18
   18b8c:	3008      	adds	r0, #8
   18b8e:	f000 ff90 	bl	19ab2 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   18b92:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   18b94:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   18b96:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   18b98:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   18b9c:	3101      	adds	r1, #1
   18b9e:	f7fe ffad 	bl	17afc <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   18ba2:	6863      	ldr	r3, [r4, #4]
   18ba4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   18ba8:	899b      	ldrh	r3, [r3, #12]
   18baa:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   18bac:	2812      	cmp	r0, #18
   18bae:	e7e3      	b.n	18b78 <find_info_cb+0x60>

00018bb0 <att_chan_mtu_updated>:
{
   18bb0:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   18bb2:	6806      	ldr	r6, [r0, #0]
	return list->head;
   18bb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18bb6:	b1e3      	cbz	r3, 18bf2 <att_chan_mtu_updated+0x42>
	return node->next;
   18bb8:	681a      	ldr	r2, [r3, #0]
   18bba:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   18bbe:	b10a      	cbz	r2, 18bc4 <att_chan_mtu_updated+0x14>
   18bc0:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   18bc4:	2300      	movs	r3, #0
   18bc6:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   18bc8:	42a8      	cmp	r0, r5
   18bca:	d009      	beq.n	18be0 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   18bcc:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   18bd0:	42a1      	cmp	r1, r4
   18bd2:	bf38      	it	cc
   18bd4:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   18bd6:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   18bda:	42a3      	cmp	r3, r4
   18bdc:	bf38      	it	cc
   18bde:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18be0:	b142      	cbz	r2, 18bf4 <att_chan_mtu_updated+0x44>
   18be2:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   18be6:	b10c      	cbz	r4, 18bec <att_chan_mtu_updated+0x3c>
   18be8:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   18bec:	4615      	mov	r5, r2
   18bee:	4622      	mov	r2, r4
   18bf0:	e7ea      	b.n	18bc8 <att_chan_mtu_updated+0x18>
   18bf2:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   18bf4:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   18bf8:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   18bfc:	428c      	cmp	r4, r1
   18bfe:	d801      	bhi.n	18c04 <att_chan_mtu_updated+0x54>
   18c00:	429a      	cmp	r2, r3
   18c02:	d909      	bls.n	18c18 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   18c04:	429a      	cmp	r2, r3
   18c06:	bf38      	it	cc
   18c08:	461a      	movcc	r2, r3
   18c0a:	42a1      	cmp	r1, r4
   18c0c:	6830      	ldr	r0, [r6, #0]
   18c0e:	bf38      	it	cc
   18c10:	4621      	movcc	r1, r4
}
   18c12:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   18c14:	f7ec bfcc 	b.w	5bb0 <bt_gatt_att_max_mtu_changed>
}
   18c18:	bc70      	pop	{r4, r5, r6}
   18c1a:	4770      	bx	lr

00018c1c <attr_read_group_cb>:
	if (!data->rsp->len) {
   18c1c:	68d0      	ldr	r0, [r2, #12]
   18c1e:	7803      	ldrb	r3, [r0, #0]
   18c20:	3104      	adds	r1, #4
   18c22:	b913      	cbnz	r3, 18c2a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   18c24:	7001      	strb	r1, [r0, #0]
	return true;
   18c26:	2001      	movs	r0, #1
}
   18c28:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   18c2a:	428b      	cmp	r3, r1
   18c2c:	d0fb      	beq.n	18c26 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   18c2e:	6891      	ldr	r1, [r2, #8]
   18c30:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   18c32:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   18c34:	3b04      	subs	r3, #4
   18c36:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   18c38:	6110      	str	r0, [r2, #16]
		return false;
   18c3a:	4770      	bx	lr

00018c3c <att_get>:
{
   18c3c:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   18c3e:	7a83      	ldrb	r3, [r0, #10]
   18c40:	2b07      	cmp	r3, #7
   18c42:	d001      	beq.n	18c48 <att_get+0xc>
		return NULL;
   18c44:	2000      	movs	r0, #0
}
   18c46:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   18c48:	2104      	movs	r1, #4
   18c4a:	f7ff fe48 	bl	188de <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18c4e:	2800      	cmp	r0, #0
   18c50:	d0f8      	beq.n	18c44 <att_get+0x8>
   18c52:	f3bf 8f5b 	dmb	ish
   18c56:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   18c5a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   18c5e:	075b      	lsls	r3, r3, #29
   18c60:	d4f0      	bmi.n	18c44 <att_get+0x8>
	return att_chan->att;
   18c62:	f850 0c08 	ldr.w	r0, [r0, #-8]
   18c66:	e7ee      	b.n	18c46 <att_get+0xa>

00018c68 <chan_req_sent>:
	if (chan->req) {
   18c68:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   18c6c:	b133      	cbz	r3, 18c7c <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   18c6e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18c72:	2300      	movs	r3, #0
   18c74:	f500 7088 	add.w	r0, r0, #272	; 0x110
   18c78:	f7fd bc0a 	b.w	16490 <k_work_reschedule>
}
   18c7c:	4770      	bx	lr

00018c7e <write_cb>:
{
   18c7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18c80:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   18c82:	4601      	mov	r1, r0
{
   18c84:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   18c86:	222a      	movs	r2, #42	; 0x2a
   18c88:	6820      	ldr	r0, [r4, #0]
   18c8a:	f000 fdfb 	bl	19884 <bt_gatt_check_perm>
   18c8e:	4605      	mov	r5, r0
   18c90:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18c92:	bb20      	cbnz	r0, 18cde <write_cb+0x60>
	if (!data->req) {
   18c94:	7a23      	ldrb	r3, [r4, #8]
   18c96:	b1ab      	cbz	r3, 18cc4 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   18c98:	2b18      	cmp	r3, #24
   18c9a:	bf14      	ite	ne
   18c9c:	2300      	movne	r3, #0
   18c9e:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   18ca0:	9301      	str	r3, [sp, #4]
   18ca2:	8a63      	ldrh	r3, [r4, #18]
   18ca4:	9300      	str	r3, [sp, #0]
   18ca6:	68b7      	ldr	r7, [r6, #8]
   18ca8:	8a23      	ldrh	r3, [r4, #16]
   18caa:	68e2      	ldr	r2, [r4, #12]
   18cac:	6820      	ldr	r0, [r4, #0]
   18cae:	4631      	mov	r1, r6
   18cb0:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   18cb2:	1e03      	subs	r3, r0, #0
   18cb4:	db08      	blt.n	18cc8 <write_cb+0x4a>
   18cb6:	8a22      	ldrh	r2, [r4, #16]
   18cb8:	4293      	cmp	r3, r2
   18cba:	d10e      	bne.n	18cda <write_cb+0x5c>
	data->err = 0U;
   18cbc:	2300      	movs	r3, #0
   18cbe:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   18cc0:	2501      	movs	r5, #1
   18cc2:	e007      	b.n	18cd4 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   18cc4:	2302      	movs	r3, #2
   18cc6:	e7eb      	b.n	18ca0 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   18cc8:	f113 0fff 	cmn.w	r3, #255	; 0xff
   18ccc:	d305      	bcc.n	18cda <write_cb+0x5c>
		return -err;
   18cce:	425b      	negs	r3, r3
   18cd0:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   18cd2:	7523      	strb	r3, [r4, #20]
}
   18cd4:	4628      	mov	r0, r5
   18cd6:	b003      	add	sp, #12
   18cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   18cda:	230e      	movs	r3, #14
   18cdc:	e7f9      	b.n	18cd2 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   18cde:	2500      	movs	r5, #0
   18ce0:	e7f8      	b.n	18cd4 <write_cb+0x56>

00018ce2 <att_chan_read>:
{
   18ce2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ce6:	4680      	mov	r8, r0
   18ce8:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   18cea:	4610      	mov	r0, r2
{
   18cec:	4699      	mov	r9, r3
   18cee:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   18cf0:	f7ff fe26 	bl	18940 <net_buf_frags_len>
   18cf4:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   18cf8:	4283      	cmp	r3, r0
{
   18cfa:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   18cfc:	d97a      	bls.n	18df4 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   18cfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   18d02:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   18d04:	4630      	mov	r0, r6
   18d06:	f000 fea6 	bl	19a56 <net_buf_frag_last>
	size_t len, total = 0;
   18d0a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   18d0e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   18d10:	4630      	mov	r0, r6
   18d12:	f7ff fe15 	bl	18940 <net_buf_frags_len>
   18d16:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   18d1a:	f105 0708 	add.w	r7, r5, #8
   18d1e:	1a24      	subs	r4, r4, r0
   18d20:	4638      	mov	r0, r7
   18d22:	f000 ff01 	bl	19b28 <net_buf_simple_tailroom>
   18d26:	4284      	cmp	r4, r0
   18d28:	d211      	bcs.n	18d4e <att_chan_read+0x6c>
   18d2a:	4630      	mov	r0, r6
   18d2c:	f7ff fe08 	bl	18940 <net_buf_frags_len>
   18d30:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   18d34:	1a24      	subs	r4, r4, r0
		if (!len) {
   18d36:	bb34      	cbnz	r4, 18d86 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   18d38:	79b0      	ldrb	r0, [r6, #6]
   18d3a:	f7fa fafb 	bl	13334 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   18d3e:	2200      	movs	r2, #0
   18d40:	2300      	movs	r3, #0
   18d42:	f000 fe54 	bl	199ee <net_buf_alloc_fixed>
			if (!frag) {
   18d46:	4605      	mov	r5, r0
   18d48:	b930      	cbnz	r0, 18d58 <att_chan_read+0x76>
	return total;
   18d4a:	4657      	mov	r7, sl
   18d4c:	e02c      	b.n	18da8 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   18d4e:	4638      	mov	r0, r7
   18d50:	f000 feea 	bl	19b28 <net_buf_simple_tailroom>
   18d54:	4604      	mov	r4, r0
   18d56:	e7ee      	b.n	18d36 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   18d58:	4601      	mov	r1, r0
   18d5a:	4630      	mov	r0, r6
   18d5c:	f000 fe8c 	bl	19a78 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   18d60:	4630      	mov	r0, r6
   18d62:	f7ff fded 	bl	18940 <net_buf_frags_len>
   18d66:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   18d6a:	f105 0708 	add.w	r7, r5, #8
   18d6e:	1a24      	subs	r4, r4, r0
   18d70:	4638      	mov	r0, r7
   18d72:	f000 fed9 	bl	19b28 <net_buf_simple_tailroom>
   18d76:	4284      	cmp	r4, r0
   18d78:	d21a      	bcs.n	18db0 <att_chan_read+0xce>
   18d7a:	4630      	mov	r0, r6
   18d7c:	f7ff fde0 	bl	18940 <net_buf_frags_len>
   18d80:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   18d84:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   18d86:	68a9      	ldr	r1, [r5, #8]
   18d88:	89aa      	ldrh	r2, [r5, #12]
   18d8a:	f8db 7004 	ldr.w	r7, [fp, #4]
   18d8e:	9803      	ldr	r0, [sp, #12]
   18d90:	f8cd 9000 	str.w	r9, [sp]
   18d94:	440a      	add	r2, r1
   18d96:	b2a3      	uxth	r3, r4
   18d98:	4659      	mov	r1, fp
   18d9a:	47b8      	blx	r7
		if (read < 0) {
   18d9c:	1e07      	subs	r7, r0, #0
   18d9e:	da0c      	bge.n	18dba <att_chan_read+0xd8>
				return total;
   18da0:	f1ba 0f00 	cmp.w	sl, #0
   18da4:	bf18      	it	ne
   18da6:	4657      	movne	r7, sl
}
   18da8:	4638      	mov	r0, r7
   18daa:	b005      	add	sp, #20
   18dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18db0:	4638      	mov	r0, r7
   18db2:	f000 feb9 	bl	19b28 <net_buf_simple_tailroom>
   18db6:	4604      	mov	r4, r0
   18db8:	e7e5      	b.n	18d86 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   18dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18dbc:	b993      	cbnz	r3, 18de4 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   18dbe:	4639      	mov	r1, r7
   18dc0:	f105 0008 	add.w	r0, r5, #8
   18dc4:	f000 fe75 	bl	19ab2 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18dc8:	4630      	mov	r0, r6
   18dca:	f7ff fdb9 	bl	18940 <net_buf_frags_len>
   18dce:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   18dd2:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18dd4:	4283      	cmp	r3, r0
		total += read;
   18dd6:	44ba      	add	sl, r7
		offset += read;
   18dd8:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   18ddc:	d9b5      	bls.n	18d4a <att_chan_read+0x68>
   18dde:	42a7      	cmp	r7, r4
   18de0:	d096      	beq.n	18d10 <att_chan_read+0x2e>
   18de2:	e7b2      	b.n	18d4a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   18de4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   18de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18de8:	4639      	mov	r1, r7
   18dea:	4628      	mov	r0, r5
   18dec:	4798      	blx	r3
   18dee:	2800      	cmp	r0, #0
   18df0:	d1e5      	bne.n	18dbe <att_chan_read+0xdc>
   18df2:	e7aa      	b.n	18d4a <att_chan_read+0x68>
		return 0;
   18df4:	2700      	movs	r7, #0
   18df6:	e7d7      	b.n	18da8 <att_chan_read+0xc6>

00018df8 <chan_req_send>:
{
   18df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   18dfa:	688f      	ldr	r7, [r1, #8]
{
   18dfc:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   18dfe:	4638      	mov	r0, r7
   18e00:	f7ff fd9e 	bl	18940 <net_buf_frags_len>
   18e04:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   18e08:	4283      	cmp	r3, r0
{
   18e0a:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   18e0c:	d30d      	bcc.n	18e2a <chan_req_send+0x32>
	req->buf = NULL;
   18e0e:	2600      	movs	r6, #0
	chan->req = req;
   18e10:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   18e14:	4632      	mov	r2, r6
	req->buf = NULL;
   18e16:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   18e18:	4620      	mov	r0, r4
   18e1a:	4639      	mov	r1, r7
   18e1c:	f7eb ff06 	bl	4c2c <chan_send>
	if (err) {
   18e20:	b110      	cbz	r0, 18e28 <chan_req_send+0x30>
		req->buf = buf;
   18e22:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   18e24:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   18e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   18e2a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   18e2e:	e7fb      	b.n	18e28 <chan_req_send+0x30>

00018e30 <process_queue>:
{
   18e30:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   18e32:	2200      	movs	r2, #0
{
   18e34:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   18e36:	2300      	movs	r3, #0
   18e38:	4608      	mov	r0, r1
{
   18e3a:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   18e3c:	f000 fddc 	bl	199f8 <net_buf_get>
	if (buf) {
   18e40:	4605      	mov	r5, r0
   18e42:	b160      	cbz	r0, 18e5e <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   18e44:	4601      	mov	r1, r0
   18e46:	2200      	movs	r2, #0
   18e48:	4620      	mov	r0, r4
   18e4a:	f7eb feef 	bl	4c2c <chan_send>
		if (err) {
   18e4e:	4604      	mov	r4, r0
   18e50:	b118      	cbz	r0, 18e5a <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   18e52:	4629      	mov	r1, r5
   18e54:	4630      	mov	r0, r6
   18e56:	f001 fcdd 	bl	1a814 <k_queue_prepend>
}
   18e5a:	4620      	mov	r0, r4
   18e5c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   18e5e:	f06f 0401 	mvn.w	r4, #1
   18e62:	e7fa      	b.n	18e5a <process_queue+0x2a>

00018e64 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18e64:	b510      	push	{r4, lr}
	return list->head;
   18e66:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18e68:	2200      	movs	r2, #0
   18e6a:	b153      	cbz	r3, 18e82 <sys_slist_find_and_remove.isra.0+0x1e>
   18e6c:	428b      	cmp	r3, r1
   18e6e:	d10e      	bne.n	18e8e <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   18e70:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   18e72:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   18e74:	b932      	cbnz	r2, 18e84 <sys_slist_find_and_remove.isra.0+0x20>
   18e76:	42a1      	cmp	r1, r4
	list->head = node;
   18e78:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   18e7a:	d100      	bne.n	18e7e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   18e7c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   18e7e:	2300      	movs	r3, #0
   18e80:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18e82:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   18e84:	42a1      	cmp	r1, r4
	parent->next = child;
   18e86:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18e88:	bf08      	it	eq
   18e8a:	6042      	streq	r2, [r0, #4]
}
   18e8c:	e7f7      	b.n	18e7e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   18e8e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18e90:	681b      	ldr	r3, [r3, #0]
   18e92:	e7ea      	b.n	18e6a <sys_slist_find_and_remove.isra.0+0x6>

00018e94 <att_exec_write_req>:
   18e94:	2006      	movs	r0, #6
   18e96:	4770      	bx	lr

00018e98 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18e98:	30f0      	adds	r0, #240	; 0xf0
   18e9a:	f3bf 8f5b 	dmb	ish
   18e9e:	e850 3f00 	ldrex	r3, [r0]
   18ea2:	f023 0301 	bic.w	r3, r3, #1
   18ea6:	e840 3200 	strex	r2, r3, [r0]
   18eaa:	2a00      	cmp	r2, #0
   18eac:	d1f7      	bne.n	18e9e <chan_rsp_sent+0x6>
   18eae:	f3bf 8f5b 	dmb	ish
}
   18eb2:	4770      	bx	lr

00018eb4 <chan_cfm_sent>:
   18eb4:	30f0      	adds	r0, #240	; 0xf0
   18eb6:	f3bf 8f5b 	dmb	ish
   18eba:	e850 3f00 	ldrex	r3, [r0]
   18ebe:	f023 0302 	bic.w	r3, r3, #2
   18ec2:	e840 3200 	strex	r2, r3, [r0]
   18ec6:	2a00      	cmp	r2, #0
   18ec8:	d1f7      	bne.n	18eba <chan_cfm_sent+0x6>
   18eca:	f3bf 8f5b 	dmb	ish
}
   18ece:	4770      	bx	lr

00018ed0 <read_cb>:
{
   18ed0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   18ed4:	f8d2 8000 	ldr.w	r8, [r2]
{
   18ed8:	4606      	mov	r6, r0
	data->err = 0x00;
   18eda:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   18edc:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   18ee0:	7317      	strb	r7, [r2, #12]
{
   18ee2:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18ee4:	4631      	mov	r1, r6
   18ee6:	2215      	movs	r2, #21
   18ee8:	f000 fccc 	bl	19884 <bt_gatt_check_perm>
   18eec:	4604      	mov	r4, r0
   18eee:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   18ef0:	b9a0      	cbnz	r0, 18f1c <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   18ef2:	e9cd 0000 	strd	r0, r0, [sp]
   18ef6:	88ab      	ldrh	r3, [r5, #4]
   18ef8:	68aa      	ldr	r2, [r5, #8]
   18efa:	4631      	mov	r1, r6
   18efc:	4640      	mov	r0, r8
   18efe:	f7ff fef0 	bl	18ce2 <att_chan_read>
	if (ret < 0) {
   18f02:	1e03      	subs	r3, r0, #0
   18f04:	da0c      	bge.n	18f20 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   18f06:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   18f0a:	bf26      	itte	cs
   18f0c:	425b      	negcs	r3, r3
   18f0e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   18f10:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   18f12:	732b      	strb	r3, [r5, #12]
}
   18f14:	4620      	mov	r0, r4
   18f16:	b002      	add	sp, #8
   18f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   18f1c:	463c      	mov	r4, r7
   18f1e:	e7f9      	b.n	18f14 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   18f20:	2401      	movs	r4, #1
   18f22:	e7f7      	b.n	18f14 <read_cb+0x44>

00018f24 <bt_att_sent>:
{
   18f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   18f26:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   18f2a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   18f2e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   18f30:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   18f34:	b10b      	cbz	r3, 18f3a <bt_att_sent+0x16>
		chan->sent(chan);
   18f36:	4638      	mov	r0, r7
   18f38:	4798      	blx	r3
   18f3a:	f3bf 8f5b 	dmb	ish
   18f3e:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   18f42:	e853 2f00 	ldrex	r2, [r3]
   18f46:	f022 0210 	bic.w	r2, r2, #16
   18f4a:	e843 2100 	strex	r1, r2, [r3]
   18f4e:	2900      	cmp	r1, #0
   18f50:	d1f7      	bne.n	18f42 <bt_att_sent+0x1e>
   18f52:	f3bf 8f5b 	dmb	ish
	if (!att) {
   18f56:	b30c      	cbz	r4, 18f9c <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   18f58:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   18f5c:	b98b      	cbnz	r3, 18f82 <bt_att_sent+0x5e>
   18f5e:	6863      	ldr	r3, [r4, #4]
   18f60:	b17b      	cbz	r3, 18f82 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   18f62:	1d20      	adds	r0, r4, #4
   18f64:	f7ff fce2 	bl	1892c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18f68:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   18f6a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18f6c:	4638      	mov	r0, r7
   18f6e:	f7ff ff43 	bl	18df8 <chan_req_send>
   18f72:	2800      	cmp	r0, #0
   18f74:	da12      	bge.n	18f9c <bt_att_sent+0x78>
	parent->next = child;
   18f76:	6863      	ldr	r3, [r4, #4]
   18f78:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   18f7a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   18f7c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   18f7e:	b903      	cbnz	r3, 18f82 <bt_att_sent+0x5e>
	list->tail = node;
   18f80:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   18f82:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   18f86:	4638      	mov	r0, r7
   18f88:	f7ff ff52 	bl	18e30 <process_queue>
	if (!err) {
   18f8c:	b130      	cbz	r0, 18f9c <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   18f8e:	f104 010c 	add.w	r1, r4, #12
   18f92:	4638      	mov	r0, r7
}
   18f94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   18f98:	f7ff bf4a 	b.w	18e30 <process_queue>
}
   18f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018f9e <att_req_send_process>:
{
   18f9e:	b570      	push	{r4, r5, r6, lr}
   18fa0:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   18fa2:	3004      	adds	r0, #4
   18fa4:	f7ff fcc2 	bl	1892c <sys_slist_get>
	if (!node) {
   18fa8:	4605      	mov	r5, r0
   18faa:	b1b8      	cbz	r0, 18fdc <att_req_send_process+0x3e>
	return list->head;
   18fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18fae:	b14b      	cbz	r3, 18fc4 <att_req_send_process+0x26>
	return node->next;
   18fb0:	681e      	ldr	r6, [r3, #0]
   18fb2:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   18fb6:	b10e      	cbz	r6, 18fbc <att_req_send_process+0x1e>
   18fb8:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   18fbc:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   18fc0:	b13b      	cbz	r3, 18fd2 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18fc2:	b966      	cbnz	r6, 18fde <att_req_send_process+0x40>
	parent->next = child;
   18fc4:	6863      	ldr	r3, [r4, #4]
   18fc6:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   18fc8:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   18fca:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   18fcc:	b933      	cbnz	r3, 18fdc <att_req_send_process+0x3e>
	list->tail = node;
   18fce:	60a5      	str	r5, [r4, #8]
}
   18fd0:	e004      	b.n	18fdc <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   18fd2:	4629      	mov	r1, r5
   18fd4:	f7ff ff10 	bl	18df8 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   18fd8:	2800      	cmp	r0, #0
   18fda:	dbf2      	blt.n	18fc2 <att_req_send_process+0x24>
}
   18fdc:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   18fde:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   18fe2:	b10b      	cbz	r3, 18fe8 <att_req_send_process+0x4a>
   18fe4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   18fe8:	4630      	mov	r0, r6
   18fea:	461e      	mov	r6, r3
   18fec:	e7e6      	b.n	18fbc <att_req_send_process+0x1e>

00018fee <bt_att_status>:
{
   18fee:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18ff0:	f3bf 8f5b 	dmb	ish
   18ff4:	680b      	ldr	r3, [r1, #0]
   18ff6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   18ffa:	07db      	lsls	r3, r3, #31
{
   18ffc:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   18ffe:	d519      	bpl.n	19034 <bt_att_status+0x46>
	if (!chan->att) {
   19000:	f850 0c08 	ldr.w	r0, [r0, #-8]
   19004:	b1b0      	cbz	r0, 19034 <bt_att_status+0x46>
	if (chan->req) {
   19006:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1900a:	b99b      	cbnz	r3, 19034 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1900c:	3004      	adds	r0, #4
   1900e:	f7ff fc8d 	bl	1892c <sys_slist_get>
	if (!node) {
   19012:	4604      	mov	r4, r0
   19014:	b170      	cbz	r0, 19034 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   19016:	4601      	mov	r1, r0
   19018:	f1a5 0008 	sub.w	r0, r5, #8
   1901c:	f7ff feec 	bl	18df8 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   19020:	2800      	cmp	r0, #0
   19022:	da07      	bge.n	19034 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   19024:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   19028:	685a      	ldr	r2, [r3, #4]
   1902a:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1902c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1902e:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   19030:	b902      	cbnz	r2, 19034 <bt_att_status+0x46>
	list->tail = node;
   19032:	609c      	str	r4, [r3, #8]
}
   19034:	bd38      	pop	{r3, r4, r5, pc}

00019036 <bt_att_chan_create_pdu>:
{
   19036:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19038:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1903c:	3201      	adds	r2, #1
   1903e:	429a      	cmp	r2, r3
{
   19040:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19042:	d81b      	bhi.n	1907c <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   19044:	4608      	mov	r0, r1
   19046:	f7ff fc9b 	bl	18980 <att_op_get_type>
   1904a:	2802      	cmp	r0, #2
   1904c:	d001      	beq.n	19052 <bt_att_chan_create_pdu+0x1c>
   1904e:	2804      	cmp	r0, #4
   19050:	d10f      	bne.n	19072 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   19052:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   19056:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   19058:	2100      	movs	r1, #0
   1905a:	4608      	mov	r0, r1
   1905c:	f7ff fbe7 	bl	1882e <bt_l2cap_create_pdu_timeout>
   19060:	4604      	mov	r4, r0
	if (!buf) {
   19062:	b120      	cbz	r0, 1906e <bt_att_chan_create_pdu+0x38>
   19064:	2101      	movs	r1, #1
   19066:	3008      	adds	r0, #8
   19068:	f000 fd23 	bl	19ab2 <net_buf_simple_add>
	hdr->code = op;
   1906c:	7005      	strb	r5, [r0, #0]
}
   1906e:	4620      	mov	r0, r4
   19070:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   19072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1907a:	e7ed      	b.n	19058 <bt_att_chan_create_pdu+0x22>
		return NULL;
   1907c:	2400      	movs	r4, #0
   1907e:	e7f6      	b.n	1906e <bt_att_chan_create_pdu+0x38>

00019080 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   19080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19084:	4688      	mov	r8, r1
   19086:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   19088:	2101      	movs	r1, #1
   1908a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1908c:	4605      	mov	r5, r0
   1908e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   19090:	f7ff ffd1 	bl	19036 <bt_att_chan_create_pdu>
	if (!buf) {
   19094:	4604      	mov	r4, r0
   19096:	b170      	cbz	r0, 190b6 <send_err_rsp.part.0+0x36>
   19098:	2104      	movs	r1, #4
   1909a:	3008      	adds	r0, #8
   1909c:	f000 fd09 	bl	19ab2 <net_buf_simple_add>
	rsp->request = req;
   190a0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   190a4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   190a6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   190aa:	4621      	mov	r1, r4
   190ac:	4628      	mov	r0, r5
}
   190ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   190b2:	f7eb be19 	b.w	4ce8 <bt_att_chan_send_rsp.constprop.0>
}
   190b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000190ba <att_write_req>:
{
   190ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   190bc:	460c      	mov	r4, r1
   190be:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   190c0:	f101 0008 	add.w	r0, r1, #8
   190c4:	f000 fd24 	bl	19b10 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   190c8:	89a2      	ldrh	r2, [r4, #12]
   190ca:	9201      	str	r2, [sp, #4]
   190cc:	68a2      	ldr	r2, [r4, #8]
   190ce:	9200      	str	r2, [sp, #0]
   190d0:	4603      	mov	r3, r0
   190d2:	2213      	movs	r2, #19
   190d4:	2112      	movs	r1, #18
   190d6:	4628      	mov	r0, r5
   190d8:	f7eb ff12 	bl	4f00 <att_write_rsp.constprop.0>
}
   190dc:	b003      	add	sp, #12
   190de:	bd30      	pop	{r4, r5, pc}

000190e0 <att_write_cmd>:
{
   190e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   190e2:	460c      	mov	r4, r1
   190e4:	4605      	mov	r5, r0
   190e6:	f101 0008 	add.w	r0, r1, #8
   190ea:	f000 fd11 	bl	19b10 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   190ee:	89a2      	ldrh	r2, [r4, #12]
   190f0:	9201      	str	r2, [sp, #4]
   190f2:	68a2      	ldr	r2, [r4, #8]
   190f4:	9200      	str	r2, [sp, #0]
   190f6:	2200      	movs	r2, #0
   190f8:	4603      	mov	r3, r0
   190fa:	4611      	mov	r1, r2
   190fc:	4628      	mov	r0, r5
   190fe:	f7eb feff 	bl	4f00 <att_write_rsp.constprop.0>
}
   19102:	b003      	add	sp, #12
   19104:	bd30      	pop	{r4, r5, pc}

00019106 <bt_att_create_pdu>:
{
   19106:	b570      	push	{r4, r5, r6, lr}
   19108:	460e      	mov	r6, r1
   1910a:	4615      	mov	r5, r2
	att = att_get(conn);
   1910c:	f7ff fd96 	bl	18c3c <att_get>
	if (!att) {
   19110:	b168      	cbz	r0, 1912e <bt_att_create_pdu+0x28>
	return list->head;
   19112:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19114:	b15b      	cbz	r3, 1912e <bt_att_create_pdu+0x28>
   19116:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   1911a:	681b      	ldr	r3, [r3, #0]
   1911c:	b10b      	cbz	r3, 19122 <bt_att_create_pdu+0x1c>
   1911e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19122:	1c6a      	adds	r2, r5, #1
   19124:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   19128:	428a      	cmp	r2, r1
   1912a:	d902      	bls.n	19132 <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1912c:	b93b      	cbnz	r3, 1913e <bt_att_create_pdu+0x38>
}
   1912e:	2000      	movs	r0, #0
   19130:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   19132:	462a      	mov	r2, r5
   19134:	4631      	mov	r1, r6
}
   19136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1913a:	f7ff bf7c 	b.w	19036 <bt_att_chan_create_pdu>
   1913e:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19142:	b10c      	cbz	r4, 19148 <bt_att_create_pdu+0x42>
   19144:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   19148:	4618      	mov	r0, r3
   1914a:	4623      	mov	r3, r4
   1914c:	e7ea      	b.n	19124 <bt_att_create_pdu+0x1e>

0001914e <att_read_blob_req>:
{
   1914e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   19150:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   19152:	8813      	ldrh	r3, [r2, #0]
   19154:	8852      	ldrh	r2, [r2, #2]
   19156:	9200      	str	r2, [sp, #0]
   19158:	210c      	movs	r1, #12
   1915a:	220d      	movs	r2, #13
   1915c:	f7eb fffe 	bl	515c <att_read_rsp>
}
   19160:	b003      	add	sp, #12
   19162:	f85d fb04 	ldr.w	pc, [sp], #4

00019166 <att_read_req>:
{
   19166:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   19168:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1916a:	2200      	movs	r2, #0
   1916c:	881b      	ldrh	r3, [r3, #0]
   1916e:	9200      	str	r2, [sp, #0]
   19170:	210a      	movs	r1, #10
   19172:	220b      	movs	r2, #11
   19174:	f7eb fff2 	bl	515c <att_read_rsp>
}
   19178:	b003      	add	sp, #12
   1917a:	f85d fb04 	ldr.w	pc, [sp], #4

0001917e <att_mtu_req>:
{
   1917e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   19180:	6803      	ldr	r3, [r0, #0]
{
   19182:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   19184:	6818      	ldr	r0, [r3, #0]
   19186:	f3bf 8f5b 	dmb	ish
   1918a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1918e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   19192:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   19196:	071b      	lsls	r3, r3, #28
   19198:	d41d      	bmi.n	191d6 <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1919a:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1919c:	881b      	ldrh	r3, [r3, #0]
   1919e:	2b16      	cmp	r3, #22
   191a0:	d91b      	bls.n	191da <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   191a2:	2202      	movs	r2, #2
   191a4:	2103      	movs	r1, #3
   191a6:	f7ff ffae 	bl	19106 <bt_att_create_pdu>
	if (!pdu) {
   191aa:	4606      	mov	r6, r0
   191ac:	b1b8      	cbz	r0, 191de <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   191ae:	2102      	movs	r1, #2
   191b0:	3008      	adds	r0, #8
   191b2:	f000 fc7e 	bl	19ab2 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   191b6:	2717      	movs	r7, #23
   191b8:	7007      	strb	r7, [r0, #0]
   191ba:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   191bc:	4631      	mov	r1, r6
   191be:	4620      	mov	r0, r4
   191c0:	f7eb fd92 	bl	4ce8 <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   191c4:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   191c6:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   191ca:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   191ce:	f7ff fcef 	bl	18bb0 <att_chan_mtu_updated>
	return 0;
   191d2:	4628      	mov	r0, r5
}
   191d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   191d6:	2006      	movs	r0, #6
   191d8:	e7fc      	b.n	191d4 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   191da:	2004      	movs	r0, #4
   191dc:	e7fa      	b.n	191d4 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   191de:	200e      	movs	r0, #14
   191e0:	e7f8      	b.n	191d4 <att_mtu_req+0x56>

000191e2 <bt_att_init>:
	bt_gatt_init();
   191e2:	f7ec ba63 	b.w	56ac <bt_gatt_init>

000191e6 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   191e6:	898a      	ldrh	r2, [r1, #12]
   191e8:	6889      	ldr	r1, [r1, #8]
   191ea:	2300      	movs	r3, #0
   191ec:	f7ec b928 	b.w	5440 <att_handle_rsp>

000191f0 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   191f0:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   191f4:	f7ec b956 	b.w	54a4 <bt_att_disconnected>

000191f8 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   191f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   191fc:	4607      	mov	r7, r0
   191fe:	460d      	mov	r5, r1
   19200:	4616      	mov	r6, r2
   19202:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   19204:	f7ff fd1a 	bl	18c3c <att_get>
	if (!att) {
   19208:	4604      	mov	r4, r0
   1920a:	b938      	cbnz	r0, 1921c <bt_att_send+0x24>
		net_buf_unref(buf);
   1920c:	4628      	mov	r0, r5
   1920e:	f7fa f955 	bl	134bc <net_buf_unref>
		return -ENOTCONN;
   19212:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   19216:	b002      	add	sp, #8
   19218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1921c:	b146      	cbz	r6, 19230 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1921e:	f8cd 8000 	str.w	r8, [sp]
   19222:	4633      	mov	r3, r6
   19224:	462a      	mov	r2, r5
   19226:	2104      	movs	r1, #4
   19228:	4638      	mov	r0, r7
   1922a:	f7ff fb03 	bl	18834 <bt_l2cap_send_cb>
   1922e:	e7f2      	b.n	19216 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   19230:	f100 060c 	add.w	r6, r0, #12
   19234:	4629      	mov	r1, r5
   19236:	4630      	mov	r0, r6
   19238:	f000 fbfc 	bl	19a34 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1923c:	2200      	movs	r2, #0
   1923e:	2300      	movs	r3, #0
   19240:	4630      	mov	r0, r6
   19242:	f000 fbd9 	bl	199f8 <net_buf_get>
	if (!buf) {
   19246:	4605      	mov	r5, r0
   19248:	b908      	cbnz	r0, 1924e <bt_att_send+0x56>
	return 0;
   1924a:	2000      	movs	r0, #0
   1924c:	e7e3      	b.n	19216 <bt_att_send+0x1e>
	return list->head;
   1924e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19250:	b1a3      	cbz	r3, 1927c <bt_att_send+0x84>
	return node->next;
   19252:	681c      	ldr	r4, [r3, #0]
   19254:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   19258:	b10c      	cbz	r4, 1925e <bt_att_send+0x66>
   1925a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1925e:	2200      	movs	r2, #0
   19260:	4629      	mov	r1, r5
   19262:	f7eb fce3 	bl	4c2c <chan_send>
		if (err >= 0) {
   19266:	2800      	cmp	r0, #0
   19268:	daef      	bge.n	1924a <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1926a:	b13c      	cbz	r4, 1927c <bt_att_send+0x84>
   1926c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   19270:	b10b      	cbz	r3, 19276 <bt_att_send+0x7e>
   19272:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   19276:	4620      	mov	r0, r4
   19278:	461c      	mov	r4, r3
   1927a:	e7f0      	b.n	1925e <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1927c:	4629      	mov	r1, r5
   1927e:	4630      	mov	r0, r6
   19280:	f001 fac8 	bl	1a814 <k_queue_prepend>
   19284:	e7e1      	b.n	1924a <bt_att_send+0x52>

00019286 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   19286:	b510      	push	{r4, lr}
   19288:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1928a:	f7ff fcd7 	bl	18c3c <att_get>
	if (!att) {
   1928e:	b160      	cbz	r0, 192aa <bt_att_req_send+0x24>
	parent->next = child;
   19290:	2300      	movs	r3, #0
   19292:	6023      	str	r3, [r4, #0]
	return list->tail;
   19294:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   19296:	b92b      	cbnz	r3, 192a4 <bt_att_req_send+0x1e>
	list->head = node;
   19298:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1929c:	f7ff fe7f 	bl	18f9e <att_req_send_process>

	return 0;
   192a0:	2000      	movs	r0, #0
}
   192a2:	bd10      	pop	{r4, pc}
	parent->next = child;
   192a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   192a6:	6084      	str	r4, [r0, #8]
}
   192a8:	e7f8      	b.n	1929c <bt_att_req_send+0x16>
		return -ENOTCONN;
   192aa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   192ae:	e7f8      	b.n	192a2 <bt_att_req_send+0x1c>

000192b0 <gatt_ccc_changed>:
{
   192b0:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   192b2:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   192b4:	895a      	ldrh	r2, [r3, #10]
   192b6:	428a      	cmp	r2, r1
   192b8:	d003      	beq.n	192c2 <gatt_ccc_changed+0x12>
		ccc->value = value;
   192ba:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   192bc:	68db      	ldr	r3, [r3, #12]
   192be:	b103      	cbz	r3, 192c2 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   192c0:	4718      	bx	r3
}
   192c2:	4770      	bx	lr

000192c4 <gatt_indicate_rsp>:
{
   192c4:	b510      	push	{r4, lr}
   192c6:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   192c8:	68a3      	ldr	r3, [r4, #8]
{
   192ca:	460a      	mov	r2, r1
	if (params->func) {
   192cc:	b10b      	cbz	r3, 192d2 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   192ce:	4621      	mov	r1, r4
   192d0:	4798      	blx	r3
	params->_ref--;
   192d2:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   192d4:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   192d6:	3b01      	subs	r3, #1
   192d8:	b2db      	uxtb	r3, r3
   192da:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   192dc:	b122      	cbz	r2, 192e8 <gatt_indicate_rsp+0x24>
   192de:	b91b      	cbnz	r3, 192e8 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   192e0:	4620      	mov	r0, r4
}
   192e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   192e6:	4710      	bx	r2
}
   192e8:	bd10      	pop	{r4, pc}

000192ea <match_uuid>:
	data->attr = attr;
   192ea:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   192ec:	8091      	strh	r1, [r2, #4]
}
   192ee:	2000      	movs	r0, #0
   192f0:	4770      	bx	lr

000192f2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   192f2:	2207      	movs	r2, #7
   192f4:	f7fe bc02 	b.w	17afc <memcpy>

000192f8 <write_name>:
{
   192f8:	b570      	push	{r4, r5, r6, lr}
   192fa:	b088      	sub	sp, #32
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   192fc:	2100      	movs	r1, #0
{
   192fe:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   19302:	9101      	str	r1, [sp, #4]
{
   19304:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   19306:	a802      	add	r0, sp, #8
   19308:	2218      	movs	r2, #24
{
   1930a:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1930c:	f7fe fc01 	bl	17b12 <memset>
	if (offset >= sizeof(value)) {
   19310:	2d1b      	cmp	r5, #27
   19312:	d80d      	bhi.n	19330 <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   19314:	4425      	add	r5, r4
   19316:	2d1b      	cmp	r5, #27
   19318:	dc0d      	bgt.n	19336 <write_name+0x3e>
	memcpy(value, buf, len);
   1931a:	4622      	mov	r2, r4
   1931c:	4631      	mov	r1, r6
   1931e:	a801      	add	r0, sp, #4
   19320:	f7fe fbec 	bl	17afc <memcpy>
	bt_set_name(value);
   19324:	a801      	add	r0, sp, #4
   19326:	f7ea f9e5 	bl	36f4 <bt_set_name>
}
   1932a:	4620      	mov	r0, r4
   1932c:	b008      	add	sp, #32
   1932e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19330:	f06f 0406 	mvn.w	r4, #6
   19334:	e7f9      	b.n	1932a <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19336:	f06f 040c 	mvn.w	r4, #12
   1933a:	e7f6      	b.n	1932a <write_name+0x32>

0001933c <gen_hash_m>:
{
   1933c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1933e:	6807      	ldr	r7, [r0, #0]
   19340:	783d      	ldrb	r5, [r7, #0]
{
   19342:	b089      	sub	sp, #36	; 0x24
   19344:	4606      	mov	r6, r0
   19346:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   19348:	b10d      	cbz	r5, 1934e <gen_hash_m+0x12>
	switch (u16->val) {
   1934a:	2501      	movs	r5, #1
   1934c:	e014      	b.n	19378 <gen_hash_m+0x3c>
   1934e:	887b      	ldrh	r3, [r7, #2]
   19350:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   19354:	d004      	beq.n	19360 <gen_hash_m+0x24>
   19356:	d812      	bhi.n	1937e <gen_hash_m+0x42>
   19358:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1935c:	2b03      	cmp	r3, #3
   1935e:	d8f4      	bhi.n	1934a <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   19360:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   19364:	2202      	movs	r2, #2
   19366:	f10d 010a 	add.w	r1, sp, #10
   1936a:	4620      	mov	r0, r4
   1936c:	f7fe facc 	bl	17908 <tc_cmac_update>
   19370:	b9e0      	cbnz	r0, 193ac <gen_hash_m+0x70>
			state->err = -EINVAL;
   19372:	f06f 0315 	mvn.w	r3, #21
   19376:	65a3      	str	r3, [r4, #88]	; 0x58
}
   19378:	4628      	mov	r0, r5
   1937a:	b009      	add	sp, #36	; 0x24
   1937c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1937e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   19382:	33ff      	adds	r3, #255	; 0xff
   19384:	b29b      	uxth	r3, r3
   19386:	2b04      	cmp	r3, #4
   19388:	d8df      	bhi.n	1934a <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1938a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1938e:	2202      	movs	r2, #2
   19390:	f10d 010a 	add.w	r1, sp, #10
   19394:	4620      	mov	r0, r4
   19396:	f7fe fab7 	bl	17908 <tc_cmac_update>
   1939a:	2800      	cmp	r0, #0
   1939c:	d0e9      	beq.n	19372 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1939e:	887b      	ldrh	r3, [r7, #2]
   193a0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   193a4:	2202      	movs	r2, #2
   193a6:	f10d 010a 	add.w	r1, sp, #10
   193aa:	e016      	b.n	193da <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   193ac:	887b      	ldrh	r3, [r7, #2]
   193ae:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   193b2:	2202      	movs	r2, #2
   193b4:	f10d 010a 	add.w	r1, sp, #10
   193b8:	4620      	mov	r0, r4
   193ba:	f7fe faa5 	bl	17908 <tc_cmac_update>
   193be:	2800      	cmp	r0, #0
   193c0:	d0d7      	beq.n	19372 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   193c2:	2000      	movs	r0, #0
   193c4:	aa03      	add	r2, sp, #12
   193c6:	6877      	ldr	r7, [r6, #4]
   193c8:	9000      	str	r0, [sp, #0]
   193ca:	2313      	movs	r3, #19
   193cc:	4631      	mov	r1, r6
   193ce:	47b8      	blx	r7
		if (len < 0) {
   193d0:	1e02      	subs	r2, r0, #0
   193d2:	da01      	bge.n	193d8 <gen_hash_m+0x9c>
			state->err = len;
   193d4:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   193d6:	e7cf      	b.n	19378 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   193d8:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   193da:	4620      	mov	r0, r4
   193dc:	f7fe fa94 	bl	17908 <tc_cmac_update>
   193e0:	2800      	cmp	r0, #0
   193e2:	d1b2      	bne.n	1934a <gen_hash_m+0xe>
   193e4:	e7c5      	b.n	19372 <gen_hash_m+0x36>

000193e6 <clear_cf_cfg>:
{
   193e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   193e8:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   193ea:	2500      	movs	r5, #0
   193ec:	4669      	mov	r1, sp
   193ee:	3001      	adds	r0, #1
   193f0:	9500      	str	r5, [sp, #0]
   193f2:	f8cd 5003 	str.w	r5, [sp, #3]
   193f6:	f7ff ff7c 	bl	192f2 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   193fa:	f104 0008 	add.w	r0, r4, #8
   193fe:	2201      	movs	r2, #1
   19400:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19402:	340c      	adds	r4, #12
   19404:	f7fe fb85 	bl	17b12 <memset>
   19408:	f3bf 8f5b 	dmb	ish
   1940c:	e854 3f00 	ldrex	r3, [r4]
   19410:	e844 5200 	strex	r2, r5, [r4]
   19414:	2a00      	cmp	r2, #0
   19416:	d1f9      	bne.n	1940c <clear_cf_cfg+0x26>
   19418:	f3bf 8f5b 	dmb	ish
}
   1941c:	b003      	add	sp, #12
   1941e:	bd30      	pop	{r4, r5, pc}

00019420 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   19420:	2301      	movs	r3, #1
   19422:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19424:	f3bf 8f5b 	dmb	ish
   19428:	e850 2f00 	ldrex	r2, [r0]
   1942c:	431a      	orrs	r2, r3
   1942e:	e840 2100 	strex	r1, r2, [r0]
   19432:	2900      	cmp	r1, #0
   19434:	d1f8      	bne.n	19428 <atomic_set_bit+0x8>
   19436:	f3bf 8f5b 	dmb	ish
}
   1943a:	4770      	bx	lr

0001943c <cf_write>:
{
   1943c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19440:	4698      	mov	r8, r3
   19442:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   19446:	2b01      	cmp	r3, #1
{
   19448:	4606      	mov	r6, r0
   1944a:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1944c:	d830      	bhi.n	194b0 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   1944e:	4443      	add	r3, r8
   19450:	2b01      	cmp	r3, #1
   19452:	4645      	mov	r5, r8
   19454:	dc2f      	bgt.n	194b6 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   19456:	f7ec f87f 	bl	5558 <find_cf_cfg>
	if (!cfg) {
   1945a:	4604      	mov	r4, r0
   1945c:	b918      	cbnz	r0, 19466 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1945e:	f7ec f87b 	bl	5558 <find_cf_cfg>
	if (!cfg) {
   19462:	4604      	mov	r4, r0
   19464:	b350      	cbz	r0, 194bc <cf_write+0x80>
{
   19466:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   19468:	f1b8 0f00 	cmp.w	r8, #0
   1946c:	d10e      	bne.n	1948c <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1946e:	f106 0188 	add.w	r1, r6, #136	; 0x88
   19472:	1c60      	adds	r0, r4, #1
   19474:	f7ff ff3d 	bl	192f2 <bt_addr_le_copy>
	cfg->id = conn->id;
   19478:	4620      	mov	r0, r4
   1947a:	7a33      	ldrb	r3, [r6, #8]
   1947c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   19480:	2100      	movs	r1, #0
   19482:	f7ff ffcd 	bl	19420 <atomic_set_bit>
}
   19486:	4628      	mov	r0, r5
   19488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1948c:	7a20      	ldrb	r0, [r4, #8]
   1948e:	fa20 f301 	lsr.w	r3, r0, r1
   19492:	07da      	lsls	r2, r3, #31
   19494:	d503      	bpl.n	1949e <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   19496:	783b      	ldrb	r3, [r7, #0]
   19498:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1949a:	07db      	lsls	r3, r3, #31
   1949c:	d511      	bpl.n	194c2 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1949e:	3101      	adds	r1, #1
   194a0:	2903      	cmp	r1, #3
   194a2:	d1e1      	bne.n	19468 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   194a4:	783b      	ldrb	r3, [r7, #0]
   194a6:	f003 0307 	and.w	r3, r3, #7
   194aa:	4318      	orrs	r0, r3
   194ac:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   194ae:	e7de      	b.n	1946e <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   194b0:	f06f 0506 	mvn.w	r5, #6
   194b4:	e7e7      	b.n	19486 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   194b6:	f06f 050c 	mvn.w	r5, #12
   194ba:	e7e4      	b.n	19486 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   194bc:	f06f 0510 	mvn.w	r5, #16
   194c0:	e7e1      	b.n	19486 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   194c2:	f06f 0512 	mvn.w	r5, #18
   194c6:	e7de      	b.n	19486 <cf_write+0x4a>

000194c8 <read_ppcp>:
{
   194c8:	b513      	push	{r0, r1, r4, lr}
   194ca:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   194cc:	2218      	movs	r2, #24
{
   194ce:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   194d2:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   194d6:	2228      	movs	r2, #40	; 0x28
   194d8:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   194dc:	2200      	movs	r2, #0
   194de:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   194e2:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   194e4:	f04f 022a 	mov.w	r2, #42	; 0x2a
   194e8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   194ec:	d80b      	bhi.n	19506 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   194ee:	f1c1 0408 	rsb	r4, r1, #8
   194f2:	429c      	cmp	r4, r3
   194f4:	bfa8      	it	ge
   194f6:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   194f8:	4622      	mov	r2, r4
   194fa:	4469      	add	r1, sp
   194fc:	f7fe fafe 	bl	17afc <memcpy>
}
   19500:	4620      	mov	r0, r4
   19502:	b002      	add	sp, #8
   19504:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19506:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1950a:	e7f9      	b.n	19500 <read_ppcp+0x38>

0001950c <read_appearance>:
{
   1950c:	b513      	push	{r0, r1, r4, lr}
   1950e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   19512:	4610      	mov	r0, r2
	if (offset > value_len) {
   19514:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   19516:	f04f 0200 	mov.w	r2, #0
   1951a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1951e:	d80d      	bhi.n	1953c <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   19520:	f1c1 0402 	rsb	r4, r1, #2
   19524:	429c      	cmp	r4, r3
   19526:	bfa8      	it	ge
   19528:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1952a:	f10d 0306 	add.w	r3, sp, #6
   1952e:	4622      	mov	r2, r4
   19530:	4419      	add	r1, r3
   19532:	f7fe fae3 	bl	17afc <memcpy>
}
   19536:	4620      	mov	r0, r4
   19538:	b002      	add	sp, #8
   1953a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1953c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   19540:	e7f9      	b.n	19536 <read_appearance+0x2a>

00019542 <read_name>:
{
   19542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19546:	4698      	mov	r8, r3
   19548:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1954c:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1954e:	f7ea f941 	bl	37d4 <bt_get_name>
   19552:	4607      	mov	r7, r0
				 strlen(name));
   19554:	f7fe faa5 	bl	17aa2 <strlen>
	if (offset > value_len) {
   19558:	b283      	uxth	r3, r0
   1955a:	42b3      	cmp	r3, r6
   1955c:	d30c      	bcc.n	19578 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1955e:	1b9c      	subs	r4, r3, r6
   19560:	4544      	cmp	r4, r8
   19562:	bfa8      	it	ge
   19564:	4644      	movge	r4, r8
   19566:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   19568:	4622      	mov	r2, r4
   1956a:	19b9      	adds	r1, r7, r6
   1956c:	4628      	mov	r0, r5
   1956e:	f7fe fac5 	bl	17afc <memcpy>
}
   19572:	4620      	mov	r0, r4
   19574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19578:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1957c:	e7f9      	b.n	19572 <read_name+0x30>

0001957e <cf_read>:
{
   1957e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19580:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   19582:	2300      	movs	r3, #0
{
   19584:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   19588:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1958c:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1958e:	f7eb ffe3 	bl	5558 <find_cf_cfg>
	if (cfg) {
   19592:	b128      	cbz	r0, 195a0 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   19594:	f100 0108 	add.w	r1, r0, #8
   19598:	2201      	movs	r2, #1
   1959a:	a801      	add	r0, sp, #4
   1959c:	f7fe faae 	bl	17afc <memcpy>
	if (offset > value_len) {
   195a0:	2e01      	cmp	r6, #1
   195a2:	d80d      	bhi.n	195c0 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   195a4:	f1c6 0401 	rsb	r4, r6, #1
   195a8:	42bc      	cmp	r4, r7
   195aa:	bfa8      	it	ge
   195ac:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   195ae:	ab01      	add	r3, sp, #4
   195b0:	4622      	mov	r2, r4
   195b2:	1999      	adds	r1, r3, r6
   195b4:	4628      	mov	r0, r5
   195b6:	f7fe faa1 	bl	17afc <memcpy>
}
   195ba:	4620      	mov	r0, r4
   195bc:	b003      	add	sp, #12
   195be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   195c0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   195c4:	e7f9      	b.n	195ba <cf_read+0x3c>

000195c6 <bt_gatt_attr_read_service>:
{
   195c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   195c8:	68c9      	ldr	r1, [r1, #12]
{
   195ca:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   195ce:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   195d0:	780b      	ldrb	r3, [r1, #0]
{
   195d2:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   195d4:	b993      	cbnz	r3, 195fc <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   195d6:	884b      	ldrh	r3, [r1, #2]
   195d8:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   195dc:	2d02      	cmp	r5, #2
   195de:	d819      	bhi.n	19614 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   195e0:	f1c5 0202 	rsb	r2, r5, #2
   195e4:	4294      	cmp	r4, r2
   195e6:	bfa8      	it	ge
   195e8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   195ea:	f10d 0306 	add.w	r3, sp, #6
   195ee:	4622      	mov	r2, r4
   195f0:	1959      	adds	r1, r3, r5
   195f2:	f7fe fa83 	bl	17afc <memcpy>
}
   195f6:	4620      	mov	r0, r4
   195f8:	b003      	add	sp, #12
   195fa:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   195fc:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   195fe:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   19602:	d807      	bhi.n	19614 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   19604:	f1c5 0210 	rsb	r2, r5, #16
   19608:	4294      	cmp	r4, r2
   1960a:	bfa8      	it	ge
   1960c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1960e:	4622      	mov	r2, r4
   19610:	4429      	add	r1, r5
   19612:	e7ee      	b.n	195f2 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19614:	f06f 0406 	mvn.w	r4, #6
   19618:	e7ed      	b.n	195f6 <bt_gatt_attr_read_service+0x30>

0001961a <find_ccc_cfg>:
{
   1961a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1961c:	460c      	mov	r4, r1
						    &cfg->peer)) {
   1961e:	1c4d      	adds	r5, r1, #1
		if (conn) {
   19620:	b148      	cbz	r0, 19636 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   19622:	7809      	ldrb	r1, [r1, #0]
   19624:	462a      	mov	r2, r5
   19626:	f7ff f845 	bl	186b4 <bt_conn_is_peer_addr_le>
	return NULL;
   1962a:	2800      	cmp	r0, #0
   1962c:	bf08      	it	eq
   1962e:	2400      	moveq	r4, #0
}
   19630:	4620      	mov	r0, r4
   19632:	b003      	add	sp, #12
   19634:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   19636:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   19638:	2207      	movs	r2, #7
   1963a:	f8cd 0003 	str.w	r0, [sp, #3]
   1963e:	4669      	mov	r1, sp
   19640:	4628      	mov	r0, r5
   19642:	f7fe fa4a 	bl	17ada <memcmp>
	return NULL;
   19646:	2800      	cmp	r0, #0
   19648:	bf18      	it	ne
   1964a:	2400      	movne	r4, #0
   1964c:	e7f0      	b.n	19630 <find_ccc_cfg+0x16>

0001964e <bt_gatt_attr_write_ccc>:
{
   1964e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19652:	461f      	mov	r7, r3
   19654:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   19658:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1965c:	4606      	mov	r6, r0
   1965e:	4688      	mov	r8, r1
	if (offset) {
   19660:	2b00      	cmp	r3, #0
   19662:	d141      	bne.n	196e8 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   19664:	1e7b      	subs	r3, r7, #1
   19666:	2b01      	cmp	r3, #1
   19668:	d841      	bhi.n	196ee <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   1966a:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1966c:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1966e:	4649      	mov	r1, r9
   19670:	bf14      	ite	ne
   19672:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   19674:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   19676:	f7ff ffd0 	bl	1961a <find_ccc_cfg>
	if (!cfg) {
   1967a:	4604      	mov	r4, r0
   1967c:	b980      	cbnz	r0, 196a0 <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   1967e:	b91d      	cbnz	r5, 19688 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   19680:	4638      	mov	r0, r7
}
   19682:	b003      	add	sp, #12
   19684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   19688:	4649      	mov	r1, r9
   1968a:	f7ff ffc6 	bl	1961a <find_ccc_cfg>
		if (!cfg) {
   1968e:	4604      	mov	r4, r0
   19690:	b380      	cbz	r0, 196f4 <bt_gatt_attr_write_ccc+0xa6>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19692:	f106 0188 	add.w	r1, r6, #136	; 0x88
   19696:	3001      	adds	r0, #1
   19698:	f7ff fe2b 	bl	192f2 <bt_addr_le_copy>
		cfg->id = conn->id;
   1969c:	7a33      	ldrb	r3, [r6, #8]
   1969e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   196a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   196a4:	b9a3      	cbnz	r3, 196d0 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   196a6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   196aa:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   196ac:	42ab      	cmp	r3, r5
   196ae:	d003      	beq.n	196b8 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   196b0:	4649      	mov	r1, r9
   196b2:	4640      	mov	r0, r8
   196b4:	f7ff fdfc 	bl	192b0 <gatt_ccc_changed>
	if (!value) {
   196b8:	2d00      	cmp	r5, #0
   196ba:	d1e1      	bne.n	19680 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   196bc:	4669      	mov	r1, sp
   196be:	1c60      	adds	r0, r4, #1
   196c0:	9500      	str	r5, [sp, #0]
   196c2:	f8cd 5003 	str.w	r5, [sp, #3]
   196c6:	f7ff fe14 	bl	192f2 <bt_addr_le_copy>
	cfg->id = 0U;
   196ca:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   196cc:	8125      	strh	r5, [r4, #8]
}
   196ce:	e7d7      	b.n	19680 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   196d0:	462a      	mov	r2, r5
   196d2:	4641      	mov	r1, r8
   196d4:	4630      	mov	r0, r6
   196d6:	4798      	blx	r3
		if (write < 0) {
   196d8:	2800      	cmp	r0, #0
   196da:	dbd2      	blt.n	19682 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   196dc:	3801      	subs	r0, #1
   196de:	2801      	cmp	r0, #1
   196e0:	d9e1      	bls.n	196a6 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   196e2:	f06f 000d 	mvn.w	r0, #13
   196e6:	e7cc      	b.n	19682 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   196e8:	f06f 0006 	mvn.w	r0, #6
   196ec:	e7c9      	b.n	19682 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   196ee:	f06f 000c 	mvn.w	r0, #12
   196f2:	e7c6      	b.n	19682 <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   196f4:	f06f 0010 	mvn.w	r0, #16
   196f8:	e7c3      	b.n	19682 <bt_gatt_attr_write_ccc+0x34>

000196fa <bt_gatt_attr_read_ccc>:
{
   196fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   196fc:	68c9      	ldr	r1, [r1, #12]
{
   196fe:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   19702:	4615      	mov	r5, r2
   19704:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   19706:	f7ff ff88 	bl	1961a <find_ccc_cfg>
	if (cfg) {
   1970a:	b100      	cbz	r0, 1970e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1970c:	8900      	ldrh	r0, [r0, #8]
   1970e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   19712:	2e02      	cmp	r6, #2
   19714:	d80e      	bhi.n	19734 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   19716:	f1c6 0402 	rsb	r4, r6, #2
   1971a:	42bc      	cmp	r4, r7
   1971c:	bfa8      	it	ge
   1971e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   19720:	f10d 0306 	add.w	r3, sp, #6
   19724:	4622      	mov	r2, r4
   19726:	1999      	adds	r1, r3, r6
   19728:	4628      	mov	r0, r5
   1972a:	f7fe f9e7 	bl	17afc <memcpy>
}
   1972e:	4620      	mov	r0, r4
   19730:	b003      	add	sp, #12
   19732:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19734:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   19738:	e7f9      	b.n	1972e <bt_gatt_attr_read_ccc+0x34>

0001973a <sc_save>:
{
   1973a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1973e:	4680      	mov	r8, r0
   19740:	460f      	mov	r7, r1
   19742:	4616      	mov	r6, r2
   19744:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   19746:	f7eb ff25 	bl	5594 <find_sc_cfg>
	if (!cfg) {
   1974a:	4604      	mov	r4, r0
   1974c:	b960      	cbnz	r0, 19768 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1974e:	4669      	mov	r1, sp
   19750:	9000      	str	r0, [sp, #0]
   19752:	f8cd 0003 	str.w	r0, [sp, #3]
   19756:	f7eb ff1d 	bl	5594 <find_sc_cfg>
		if (!cfg) {
   1975a:	4604      	mov	r4, r0
   1975c:	b178      	cbz	r0, 1977e <sc_save+0x44>
		cfg->id = id;
   1975e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   19762:	4639      	mov	r1, r7
   19764:	f7ff fdc5 	bl	192f2 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   19768:	8922      	ldrh	r2, [r4, #8]
   1976a:	8963      	ldrh	r3, [r4, #10]
   1976c:	b91a      	cbnz	r2, 19776 <sc_save+0x3c>
   1976e:	b923      	cbnz	r3, 1977a <sc_save+0x40>
		cfg->data.start = start;
   19770:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   19772:	8165      	strh	r5, [r4, #10]
   19774:	e003      	b.n	1977e <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   19776:	4296      	cmp	r6, r2
   19778:	d304      	bcc.n	19784 <sc_save+0x4a>
   1977a:	429d      	cmp	r5, r3
   1977c:	d8f9      	bhi.n	19772 <sc_save+0x38>
}
   1977e:	b002      	add	sp, #8
   19780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   19784:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   19786:	e7f8      	b.n	1977a <sc_save+0x40>

00019788 <sc_clear>:
{
   19788:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1978a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1978e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19790:	4631      	mov	r1, r6
   19792:	7a00      	ldrb	r0, [r0, #8]
   19794:	f7fe fcf6 	bl	18184 <bt_addr_le_is_bonded>
   19798:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1979a:	4631      	mov	r1, r6
   1979c:	f7eb fefa 	bl	5594 <find_sc_cfg>
	if (!cfg) {
   197a0:	b128      	cbz	r0, 197ae <sc_clear+0x26>
}
   197a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   197a6:	220c      	movs	r2, #12
   197a8:	2100      	movs	r1, #0
   197aa:	f7fe b9b2 	b.w	17b12 <memset>
}
   197ae:	bd70      	pop	{r4, r5, r6, pc}

000197b0 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   197b0:	2a02      	cmp	r2, #2
{
   197b2:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   197b4:	d108      	bne.n	197c8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   197b6:	2300      	movs	r3, #0
   197b8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   197bc:	461a      	mov	r2, r3
   197be:	7a00      	ldrb	r0, [r0, #8]
   197c0:	f7ff ffbb 	bl	1973a <sc_save>
}
   197c4:	2002      	movs	r0, #2
   197c6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   197c8:	f7ff ffde 	bl	19788 <sc_clear>
   197cc:	e7fa      	b.n	197c4 <sc_ccc_cfg_write+0x14>

000197ce <bt_gatt_attr_value_handle>:
{
   197ce:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   197d0:	4604      	mov	r4, r0
   197d2:	b910      	cbnz	r0, 197da <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   197d4:	2000      	movs	r0, #0
}
   197d6:	b002      	add	sp, #8
   197d8:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   197da:	2300      	movs	r3, #0
   197dc:	f88d 3004 	strb.w	r3, [sp, #4]
   197e0:	6800      	ldr	r0, [r0, #0]
   197e2:	f642 0303 	movw	r3, #10243	; 0x2803
   197e6:	a901      	add	r1, sp, #4
   197e8:	f8ad 3006 	strh.w	r3, [sp, #6]
   197ec:	f7fe f9ef 	bl	17bce <bt_uuid_cmp>
   197f0:	2800      	cmp	r0, #0
   197f2:	d1ef      	bne.n	197d4 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   197f4:	68e3      	ldr	r3, [r4, #12]
   197f6:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   197f8:	2800      	cmp	r0, #0
   197fa:	d1ec      	bne.n	197d6 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   197fc:	4620      	mov	r0, r4
   197fe:	f7eb ffab 	bl	5758 <bt_gatt_attr_get_handle>
   19802:	3001      	adds	r0, #1
   19804:	b280      	uxth	r0, r0
	return handle;
   19806:	e7e6      	b.n	197d6 <bt_gatt_attr_value_handle+0x8>

00019808 <bt_gatt_attr_read_chrc>:
{
   19808:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1980a:	68cf      	ldr	r7, [r1, #12]
{
   1980c:	b087      	sub	sp, #28
   1980e:	4608      	mov	r0, r1
   19810:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   19812:	79bb      	ldrb	r3, [r7, #6]
   19814:	f88d 3004 	strb.w	r3, [sp, #4]
{
   19818:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1981c:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1981e:	f7ff ffd6 	bl	197ce <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   19822:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   19824:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   19828:	780b      	ldrb	r3, [r1, #0]
   1982a:	b99b      	cbnz	r3, 19854 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1982c:	884b      	ldrh	r3, [r1, #2]
   1982e:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   19832:	2105      	movs	r1, #5
	if (offset > value_len) {
   19834:	42b1      	cmp	r1, r6
   19836:	d315      	bcc.n	19864 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   19838:	1b89      	subs	r1, r1, r6
   1983a:	42a1      	cmp	r1, r4
   1983c:	bfa8      	it	ge
   1983e:	4621      	movge	r1, r4
   19840:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   19842:	ab01      	add	r3, sp, #4
   19844:	4622      	mov	r2, r4
   19846:	1999      	adds	r1, r3, r6
   19848:	4628      	mov	r0, r5
   1984a:	f7fe f957 	bl	17afc <memcpy>
}
   1984e:	4620      	mov	r0, r4
   19850:	b007      	add	sp, #28
   19852:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   19854:	3101      	adds	r1, #1
   19856:	2210      	movs	r2, #16
   19858:	f10d 0007 	add.w	r0, sp, #7
   1985c:	f7fe f94e 	bl	17afc <memcpy>
		value_len += 16U;
   19860:	2113      	movs	r1, #19
   19862:	e7e7      	b.n	19834 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19864:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   19868:	e7f1      	b.n	1984e <bt_gatt_attr_read_chrc+0x46>

0001986a <bt_gatt_foreach_attr>:
{
   1986a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1986c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   19870:	2300      	movs	r3, #0
   19872:	9300      	str	r3, [sp, #0]
   19874:	461a      	mov	r2, r3
   19876:	f7eb ff9f 	bl	57b8 <bt_gatt_foreach_attr_type>
}
   1987a:	b005      	add	sp, #20
   1987c:	f85d fb04 	ldr.w	pc, [sp], #4

00019880 <db_hash_process>:
	db_hash_gen(true);
   19880:	f7eb bff4 	b.w	586c <db_hash_gen.constprop.0>

00019884 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   19884:	07d3      	lsls	r3, r2, #31
{
   19886:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   19888:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1988a:	d504      	bpl.n	19896 <bt_gatt_check_perm+0x12>
   1988c:	f014 0f15 	tst.w	r4, #21
   19890:	d017      	beq.n	198c2 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   19892:	684b      	ldr	r3, [r1, #4]
   19894:	b1ab      	cbz	r3, 198c2 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   19896:	0793      	lsls	r3, r2, #30
   19898:	d504      	bpl.n	198a4 <bt_gatt_check_perm+0x20>
   1989a:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1989e:	d012      	beq.n	198c6 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   198a0:	688b      	ldr	r3, [r1, #8]
   198a2:	b183      	cbz	r3, 198c6 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   198a4:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   198a6:	f014 0f30 	tst.w	r4, #48	; 0x30
   198aa:	d104      	bne.n	198b6 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   198ac:	f014 000c 	ands.w	r0, r4, #12
   198b0:	bf18      	it	ne
   198b2:	200f      	movne	r0, #15
}
   198b4:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   198b6:	f7fe fefb 	bl	186b0 <bt_conn_get_security>
   198ba:	2802      	cmp	r0, #2
   198bc:	d8f6      	bhi.n	198ac <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   198be:	2005      	movs	r0, #5
   198c0:	e7f8      	b.n	198b4 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   198c2:	2002      	movs	r0, #2
   198c4:	e7f6      	b.n	198b4 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   198c6:	2003      	movs	r0, #3
   198c8:	e7f4      	b.n	198b4 <bt_gatt_check_perm+0x30>

000198ca <gatt_notify>:
{
   198ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   198ce:	4614      	mov	r4, r2
   198d0:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   198d2:	2214      	movs	r2, #20
   198d4:	6861      	ldr	r1, [r4, #4]
{
   198d6:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   198d8:	f7ff ffd4 	bl	19884 <bt_gatt_check_perm>
   198dc:	bb08      	cbnz	r0, 19922 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   198de:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   198e0:	211b      	movs	r1, #27
   198e2:	3202      	adds	r2, #2
   198e4:	4638      	mov	r0, r7
   198e6:	f7ff fc0e 	bl	19106 <bt_att_create_pdu>
	if (!buf) {
   198ea:	4605      	mov	r5, r0
   198ec:	b1e8      	cbz	r0, 1992a <gatt_notify+0x60>
   198ee:	f100 0908 	add.w	r9, r0, #8
   198f2:	2102      	movs	r1, #2
   198f4:	4648      	mov	r0, r9
   198f6:	f000 f8dc 	bl	19ab2 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   198fa:	4606      	mov	r6, r0
   198fc:	89a1      	ldrh	r1, [r4, #12]
   198fe:	f826 8b02 	strh.w	r8, [r6], #2
   19902:	4648      	mov	r0, r9
   19904:	f000 f8d5 	bl	19ab2 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   19908:	89a2      	ldrh	r2, [r4, #12]
   1990a:	68a1      	ldr	r1, [r4, #8]
   1990c:	4630      	mov	r0, r6
   1990e:	f7fe f8f5 	bl	17afc <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   19912:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   19916:	4629      	mov	r1, r5
   19918:	4638      	mov	r0, r7
}
   1991a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1991e:	f7ff bc6b 	b.w	191f8 <bt_att_send>
		return -EPERM;
   19922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   1992a:	f06f 000b 	mvn.w	r0, #11
   1992e:	e7fa      	b.n	19926 <gatt_notify+0x5c>

00019930 <bt_gatt_connected>:
}
   19930:	4770      	bx	lr

00019932 <bt_gatt_change_aware>:
{
   19932:	b510      	push	{r4, lr}
   19934:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   19936:	f7eb fe0f 	bl	5558 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1993a:	4603      	mov	r3, r0
   1993c:	b910      	cbnz	r0, 19944 <bt_gatt_change_aware+0x12>
		return true;
   1993e:	2401      	movs	r4, #1
}
   19940:	4620      	mov	r0, r4
   19942:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   19944:	7a02      	ldrb	r2, [r0, #8]
   19946:	07d2      	lsls	r2, r2, #31
   19948:	d5f9      	bpl.n	1993e <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1994a:	f3bf 8f5b 	dmb	ish
   1994e:	68d9      	ldr	r1, [r3, #12]
   19950:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   19954:	f011 0101 	ands.w	r1, r1, #1
   19958:	f100 000c 	add.w	r0, r0, #12
   1995c:	d1ef      	bne.n	1993e <bt_gatt_change_aware+0xc>
	if (!req) {
   1995e:	2c00      	cmp	r4, #0
   19960:	d0ee      	beq.n	19940 <bt_gatt_change_aware+0xe>
   19962:	f3bf 8f5b 	dmb	ish
   19966:	68db      	ldr	r3, [r3, #12]
   19968:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1996c:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   19970:	079b      	lsls	r3, r3, #30
   19972:	d50e      	bpl.n	19992 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19974:	f3bf 8f5b 	dmb	ish
   19978:	e850 3f00 	ldrex	r3, [r0]
   1997c:	f023 0302 	bic.w	r3, r3, #2
   19980:	e840 3200 	strex	r2, r3, [r0]
   19984:	2a00      	cmp	r2, #0
   19986:	d1f7      	bne.n	19978 <bt_gatt_change_aware+0x46>
   19988:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1998c:	f7ff fd48 	bl	19420 <atomic_set_bit>
	return false;
   19990:	e7d6      	b.n	19940 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   19992:	2101      	movs	r1, #1
   19994:	e7fa      	b.n	1998c <bt_gatt_change_aware+0x5a>

00019996 <bt_smp_recv>:
{
   19996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   19998:	2100      	movs	r1, #0
   1999a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1999e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   199a2:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   199a4:	4608      	mov	r0, r1
   199a6:	f7fe ff42 	bl	1882e <bt_l2cap_create_pdu_timeout>
   199aa:	f100 0608 	add.w	r6, r0, #8
   199ae:	4604      	mov	r4, r0
   199b0:	2101      	movs	r1, #1
   199b2:	4630      	mov	r0, r6
   199b4:	f000 f87d 	bl	19ab2 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   199b8:	2505      	movs	r5, #5
   199ba:	7005      	strb	r5, [r0, #0]
   199bc:	2101      	movs	r1, #1
   199be:	4630      	mov	r0, r6
   199c0:	f000 f877 	bl	19ab2 <net_buf_simple_add>
   199c4:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   199c6:	7005      	strb	r5, [r0, #0]
   199c8:	4622      	mov	r2, r4
   199ca:	9300      	str	r3, [sp, #0]
   199cc:	2106      	movs	r1, #6
   199ce:	4638      	mov	r0, r7
   199d0:	f7fe ff30 	bl	18834 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   199d4:	b110      	cbz	r0, 199dc <bt_smp_recv+0x46>
		net_buf_unref(buf);
   199d6:	4620      	mov	r0, r4
   199d8:	f7f9 fd70 	bl	134bc <net_buf_unref>
}
   199dc:	2000      	movs	r0, #0
   199de:	b003      	add	sp, #12
   199e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000199e2 <bt_smp_sign>:
   199e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   199e6:	4770      	bx	lr

000199e8 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   199e8:	2000      	movs	r0, #0
   199ea:	4770      	bx	lr

000199ec <fixed_data_unref>:
}
   199ec:	4770      	bx	lr

000199ee <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   199ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   199f0:	6849      	ldr	r1, [r1, #4]
   199f2:	6809      	ldr	r1, [r1, #0]
   199f4:	f7f9 bcce 	b.w	13394 <net_buf_alloc_len>

000199f8 <net_buf_get>:
{
   199f8:	b570      	push	{r4, r5, r6, lr}
   199fa:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   199fc:	f7fc fb0c 	bl	16018 <z_impl_k_queue_get>
	if (!buf) {
   19a00:	4605      	mov	r5, r0
   19a02:	b128      	cbz	r0, 19a10 <net_buf_get+0x18>
   19a04:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   19a06:	7963      	ldrb	r3, [r4, #5]
   19a08:	f013 0301 	ands.w	r3, r3, #1
   19a0c:	d102      	bne.n	19a14 <net_buf_get+0x1c>
	frag->frags = NULL;
   19a0e:	6023      	str	r3, [r4, #0]
}
   19a10:	4628      	mov	r0, r5
   19a12:	bd70      	pop	{r4, r5, r6, pc}
   19a14:	2300      	movs	r3, #0
   19a16:	2200      	movs	r2, #0
   19a18:	4630      	mov	r0, r6
   19a1a:	f7fc fafd 	bl	16018 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   19a1e:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   19a20:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   19a22:	f023 0301 	bic.w	r3, r3, #1
   19a26:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   19a28:	4604      	mov	r4, r0
   19a2a:	e7ec      	b.n	19a06 <net_buf_get+0xe>

00019a2c <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   19a2c:	6883      	ldr	r3, [r0, #8]
   19a2e:	440b      	add	r3, r1
   19a30:	6003      	str	r3, [r0, #0]
}
   19a32:	4770      	bx	lr

00019a34 <net_buf_put>:
{
   19a34:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   19a36:	460a      	mov	r2, r1
   19a38:	6814      	ldr	r4, [r2, #0]
   19a3a:	b914      	cbnz	r4, 19a42 <net_buf_put+0xe>
}
   19a3c:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   19a3e:	f000 bef3 	b.w	1a828 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   19a42:	7953      	ldrb	r3, [r2, #5]
   19a44:	f043 0301 	orr.w	r3, r3, #1
   19a48:	7153      	strb	r3, [r2, #5]
   19a4a:	4622      	mov	r2, r4
   19a4c:	e7f4      	b.n	19a38 <net_buf_put+0x4>

00019a4e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   19a4e:	7902      	ldrb	r2, [r0, #4]
   19a50:	3201      	adds	r2, #1
   19a52:	7102      	strb	r2, [r0, #4]
	return buf;
}
   19a54:	4770      	bx	lr

00019a56 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   19a56:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   19a58:	4618      	mov	r0, r3
   19a5a:	681b      	ldr	r3, [r3, #0]
   19a5c:	2b00      	cmp	r3, #0
   19a5e:	d1fb      	bne.n	19a58 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   19a60:	4770      	bx	lr

00019a62 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   19a62:	6802      	ldr	r2, [r0, #0]
{
   19a64:	b510      	push	{r4, lr}
	if (parent->frags) {
   19a66:	b12a      	cbz	r2, 19a74 <net_buf_frag_insert+0x12>
   19a68:	460b      	mov	r3, r1
	while (buf->frags) {
   19a6a:	461c      	mov	r4, r3
   19a6c:	681b      	ldr	r3, [r3, #0]
   19a6e:	2b00      	cmp	r3, #0
   19a70:	d1fb      	bne.n	19a6a <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   19a72:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   19a74:	6001      	str	r1, [r0, #0]
}
   19a76:	bd10      	pop	{r4, pc}

00019a78 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   19a78:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   19a7a:	4604      	mov	r4, r0
   19a7c:	b920      	cbnz	r0, 19a88 <net_buf_frag_add+0x10>
	buf->ref++;
   19a7e:	790b      	ldrb	r3, [r1, #4]
   19a80:	3301      	adds	r3, #1
   19a82:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   19a84:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   19a86:	bd10      	pop	{r4, pc}
   19a88:	4603      	mov	r3, r0
	while (buf->frags) {
   19a8a:	4618      	mov	r0, r3
   19a8c:	681b      	ldr	r3, [r3, #0]
   19a8e:	2b00      	cmp	r3, #0
   19a90:	d1fb      	bne.n	19a8a <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   19a92:	f7ff ffe6 	bl	19a62 <net_buf_frag_insert>
   19a96:	4620      	mov	r0, r4
   19a98:	e7f5      	b.n	19a86 <net_buf_frag_add+0xe>

00019a9a <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   19a9a:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   19a9c:	b108      	cbz	r0, 19aa2 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   19a9e:	680b      	ldr	r3, [r1, #0]
   19aa0:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   19aa2:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   19aa4:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   19aa6:	4608      	mov	r0, r1
	frag->frags = NULL;
   19aa8:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   19aaa:	f7f9 fd07 	bl	134bc <net_buf_unref>
#endif

	return next_frag;
}
   19aae:	4620      	mov	r0, r4
   19ab0:	bd10      	pop	{r4, pc}

00019ab2 <net_buf_simple_add>:
	return buf->data + buf->len;
   19ab2:	8883      	ldrh	r3, [r0, #4]
   19ab4:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   19ab6:	4419      	add	r1, r3
   19ab8:	8081      	strh	r1, [r0, #4]
	return tail;
}
   19aba:	18d0      	adds	r0, r2, r3
   19abc:	4770      	bx	lr

00019abe <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   19abe:	b430      	push	{r4, r5}
   19ac0:	8884      	ldrh	r4, [r0, #4]
   19ac2:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   19ac4:	18a3      	adds	r3, r4, r2
   19ac6:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   19ac8:	1928      	adds	r0, r5, r4
}
   19aca:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   19acc:	f7fe b816 	b.w	17afc <memcpy>

00019ad0 <net_buf_simple_add_u8>:
   19ad0:	8883      	ldrh	r3, [r0, #4]
   19ad2:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   19ad4:	b510      	push	{r4, lr}
	buf->len += len;
   19ad6:	1c5c      	adds	r4, r3, #1
   19ad8:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   19ada:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   19adc:	18d0      	adds	r0, r2, r3
   19ade:	bd10      	pop	{r4, pc}

00019ae0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   19ae0:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   19ae2:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   19ae4:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   19ae6:	1a40      	subs	r0, r0, r1
	buf->len += len;
   19ae8:	4411      	add	r1, r2
	buf->data -= len;
   19aea:	6018      	str	r0, [r3, #0]
	buf->len += len;
   19aec:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   19aee:	4770      	bx	lr

00019af0 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   19af0:	8882      	ldrh	r2, [r0, #4]
   19af2:	1a52      	subs	r2, r2, r1
{
   19af4:	4603      	mov	r3, r0
	buf->len -= len;
   19af6:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   19af8:	6800      	ldr	r0, [r0, #0]
   19afa:	4408      	add	r0, r1
   19afc:	6018      	str	r0, [r3, #0]
}
   19afe:	4770      	bx	lr

00019b00 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   19b00:	4603      	mov	r3, r0
	void *data = buf->data;
   19b02:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   19b04:	889a      	ldrh	r2, [r3, #4]
   19b06:	1a52      	subs	r2, r2, r1
	buf->data += len;
   19b08:	4401      	add	r1, r0
	buf->len -= len;
   19b0a:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   19b0c:	6019      	str	r1, [r3, #0]

	return data;
}
   19b0e:	4770      	bx	lr

00019b10 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   19b10:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   19b12:	6803      	ldr	r3, [r0, #0]
   19b14:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   19b16:	2102      	movs	r1, #2
   19b18:	f7ff ffea 	bl	19af0 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   19b1c:	4620      	mov	r0, r4
   19b1e:	bd10      	pop	{r4, pc}

00019b20 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   19b20:	6802      	ldr	r2, [r0, #0]
   19b22:	6880      	ldr	r0, [r0, #8]
}
   19b24:	1a10      	subs	r0, r2, r0
   19b26:	4770      	bx	lr

00019b28 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   19b28:	8883      	ldrh	r3, [r0, #4]
   19b2a:	88c2      	ldrh	r2, [r0, #6]
   19b2c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   19b2e:	6803      	ldr	r3, [r0, #0]
   19b30:	6880      	ldr	r0, [r0, #8]
   19b32:	1a18      	subs	r0, r3, r0
}
   19b34:	1a10      	subs	r0, r2, r0
   19b36:	4770      	bx	lr

00019b38 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   19b38:	6903      	ldr	r3, [r0, #16]
   19b3a:	b2c9      	uxtb	r1, r1
   19b3c:	220c      	movs	r2, #12
   19b3e:	fb01 3302 	mla	r3, r1, r2, r3
   19b42:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   19b44:	f000 0007 	and.w	r0, r0, #7
   19b48:	4770      	bx	lr

00019b4a <set_on_state>:
	__asm__ volatile(
   19b4a:	f04f 0320 	mov.w	r3, #32
   19b4e:	f3ef 8211 	mrs	r2, BASEPRI
   19b52:	f383 8812 	msr	BASEPRI_MAX, r3
   19b56:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   19b5a:	6803      	ldr	r3, [r0, #0]
   19b5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19b60:	f043 0302 	orr.w	r3, r3, #2
   19b64:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   19b66:	f382 8811 	msr	BASEPRI, r2
   19b6a:	f3bf 8f6f 	isb	sy
}
   19b6e:	4770      	bx	lr

00019b70 <stop>:
{
   19b70:	4603      	mov	r3, r0
   19b72:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   19b74:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   19b76:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   19b78:	f04f 0420 	mov.w	r4, #32
   19b7c:	f3ef 8611 	mrs	r6, BASEPRI
   19b80:	f384 8812 	msr	BASEPRI_MAX, r4
   19b84:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19b88:	250c      	movs	r5, #12
   19b8a:	fb05 0401 	mla	r4, r5, r1, r0
   19b8e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   19b90:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   19b94:	d001      	beq.n	19b9a <stop+0x2a>
   19b96:	42a2      	cmp	r2, r4
   19b98:	d110      	bne.n	19bbc <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   19b9a:	fb05 0001 	mla	r0, r5, r1, r0
   19b9e:	2201      	movs	r2, #1
   19ba0:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   19ba2:	2000      	movs	r0, #0
	__asm__ volatile(
   19ba4:	f386 8811 	msr	BASEPRI, r6
   19ba8:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   19bac:	b928      	cbnz	r0, 19bba <stop+0x4a>
	get_sub_config(dev, type)->stop();
   19bae:	685b      	ldr	r3, [r3, #4]
   19bb0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   19bb4:	684b      	ldr	r3, [r1, #4]
   19bb6:	4798      	blx	r3
	return 0;
   19bb8:	2000      	movs	r0, #0
}
   19bba:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   19bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19bc0:	e7f0      	b.n	19ba4 <stop+0x34>

00019bc2 <api_stop>:
	return stop(dev, subsys, CTX_API);
   19bc2:	2280      	movs	r2, #128	; 0x80
   19bc4:	f7ff bfd4 	b.w	19b70 <stop>

00019bc8 <async_start>:
{
   19bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19bca:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   19bcc:	6904      	ldr	r4, [r0, #16]
{
   19bce:	4605      	mov	r5, r0
   19bd0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   19bd2:	f04f 0020 	mov.w	r0, #32
   19bd6:	f3ef 8c11 	mrs	ip, BASEPRI
   19bda:	f380 8812 	msr	BASEPRI_MAX, r0
   19bde:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   19be2:	260c      	movs	r6, #12
   19be4:	fb06 4601 	mla	r6, r6, r1, r4
   19be8:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   19bea:	f000 0e07 	and.w	lr, r0, #7
   19bee:	f1be 0f01 	cmp.w	lr, #1
   19bf2:	d111      	bne.n	19c18 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   19bf4:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   19bf6:	2600      	movs	r6, #0
	__asm__ volatile(
   19bf8:	f38c 8811 	msr	BASEPRI, ip
   19bfc:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   19c00:	b946      	cbnz	r6, 19c14 <async_start+0x4c>
	subdata->cb = cb;
   19c02:	200c      	movs	r0, #12
   19c04:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   19c08:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   19c0c:	686b      	ldr	r3, [r5, #4]
   19c0e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   19c12:	4798      	blx	r3
}
   19c14:	4630      	mov	r0, r6
   19c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   19c18:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   19c1c:	4287      	cmp	r7, r0
   19c1e:	bf14      	ite	ne
   19c20:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   19c24:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   19c28:	e7e6      	b.n	19bf8 <async_start+0x30>

00019c2a <api_start>:
{
   19c2a:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   19c2c:	2480      	movs	r4, #128	; 0x80
   19c2e:	9400      	str	r4, [sp, #0]
   19c30:	f7ff ffca 	bl	19bc8 <async_start>
}
   19c34:	b002      	add	sp, #8
   19c36:	bd10      	pop	{r4, pc}

00019c38 <onoff_started_callback>:
	return &data->mgr[type];
   19c38:	6900      	ldr	r0, [r0, #16]
{
   19c3a:	b410      	push	{r4}
	return &data->mgr[type];
   19c3c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   19c3e:	241c      	movs	r4, #28
   19c40:	fb03 0004 	mla	r0, r3, r4, r0
   19c44:	2100      	movs	r1, #0
}
   19c46:	bc10      	pop	{r4}
	notify(mgr, 0);
   19c48:	4710      	bx	r2

00019c4a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   19c4a:	2000      	movs	r0, #0
   19c4c:	f7fb b890 	b.w	14d70 <nrfx_clock_stop>

00019c50 <blocking_start_callback>:
{
   19c50:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   19c52:	f7fc ba15 	b.w	16080 <z_impl_k_sem_give>

00019c56 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19c56:	6843      	ldr	r3, [r0, #4]
   19c58:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   19c5a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   19c5e:	600b      	str	r3, [r1, #0]
}
   19c60:	2000      	movs	r0, #0
   19c62:	4770      	bx	lr

00019c64 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19c64:	6843      	ldr	r3, [r0, #4]
   19c66:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   19c68:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   19c6c:	4042      	eors	r2, r0
   19c6e:	400a      	ands	r2, r1
   19c70:	4042      	eors	r2, r0
    p_reg->OUT = value;
   19c72:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   19c76:	2000      	movs	r0, #0
   19c78:	4770      	bx	lr

00019c7a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19c7a:	6843      	ldr	r3, [r0, #4]
   19c7c:	685b      	ldr	r3, [r3, #4]
}
   19c7e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   19c80:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   19c84:	4770      	bx	lr

00019c86 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19c86:	6843      	ldr	r3, [r0, #4]
   19c88:	685b      	ldr	r3, [r3, #4]
}
   19c8a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   19c8c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   19c90:	4770      	bx	lr

00019c92 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19c92:	6843      	ldr	r3, [r0, #4]
   19c94:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   19c96:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   19c9a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   19c9c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   19ca0:	2000      	movs	r0, #0
   19ca2:	4770      	bx	lr

00019ca4 <gpio_nrfx_manage_callback>:
	return port->data;
   19ca4:	6903      	ldr	r3, [r0, #16]
	return list->head;
   19ca6:	6858      	ldr	r0, [r3, #4]
{
   19ca8:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   19caa:	b158      	cbz	r0, 19cc4 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19cac:	2400      	movs	r4, #0
   19cae:	4281      	cmp	r1, r0
   19cb0:	d112      	bne.n	19cd8 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   19cb2:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   19cb4:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   19cb6:	b954      	cbnz	r4, 19cce <gpio_nrfx_manage_callback+0x2a>
   19cb8:	428d      	cmp	r5, r1
	list->head = node;
   19cba:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   19cbc:	d100      	bne.n	19cc0 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   19cbe:	6098      	str	r0, [r3, #8]
	parent->next = child;
   19cc0:	2000      	movs	r0, #0
   19cc2:	6008      	str	r0, [r1, #0]
	if (set) {
   19cc4:	b96a      	cbnz	r2, 19ce2 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   19cc6:	2000      	movs	r0, #0
}
   19cc8:	bd30      	pop	{r4, r5, pc}
   19cca:	4628      	mov	r0, r5
   19ccc:	e7ef      	b.n	19cae <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   19cce:	428d      	cmp	r5, r1
	parent->next = child;
   19cd0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   19cd2:	bf08      	it	eq
   19cd4:	609c      	streq	r4, [r3, #8]
}
   19cd6:	e7f3      	b.n	19cc0 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   19cd8:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19cda:	4604      	mov	r4, r0
   19cdc:	2d00      	cmp	r5, #0
   19cde:	d1f4      	bne.n	19cca <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   19ce0:	b13a      	cbz	r2, 19cf2 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   19ce2:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   19ce4:	685a      	ldr	r2, [r3, #4]
   19ce6:	600a      	str	r2, [r1, #0]
	list->head = node;
   19ce8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   19cea:	2800      	cmp	r0, #0
   19cec:	d1eb      	bne.n	19cc6 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   19cee:	6099      	str	r1, [r3, #8]
}
   19cf0:	e7ea      	b.n	19cc8 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   19cf2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   19cf6:	e7e7      	b.n	19cc8 <gpio_nrfx_manage_callback+0x24>

00019cf8 <pin_interrupt_configure>:
{
	int rc = 0;

	if (!IS_ENABLED(CONFIG_GPIO_SX1509B_INTERRUPT)
	    && (mode != GPIO_INT_MODE_DISABLED)) {
		return -ENOTSUP;
   19cf8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000

	k_sem_give(&drv_data->lock);
#endif /* CONFIG_GPIO_SX1509B_INTERRUPT */

	return rc;
}
   19cfc:	bf14      	ite	ne
   19cfe:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   19d02:	2000      	moveq	r0, #0
   19d04:	4770      	bx	lr

00019d06 <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   19d06:	f7fc b9e1 	b.w	160cc <z_impl_k_sem_take>

00019d0a <i2c_write>:
 * @retval 0 If successful.
 * @retval -EIO General input / output error.
 */
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
			    uint32_t num_bytes, uint16_t addr)
{
   19d0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
   19d0c:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   19d10:	2202      	movs	r2, #2
   19d12:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   19d16:	6882      	ldr	r2, [r0, #8]
   19d18:	a901      	add	r1, sp, #4
   19d1a:	6894      	ldr	r4, [r2, #8]
   19d1c:	2201      	movs	r2, #1
   19d1e:	47a0      	blx	r4

	return i2c_transfer(dev, &msg, 1, addr);
}
   19d20:	b004      	add	sp, #16
   19d22:	bd10      	pop	{r4, pc}

00019d24 <i2c_reg_write_word_be>:
{
   19d24:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   19d26:	f88d 2004 	strb.w	r2, [sp, #4]
   19d2a:	0a1a      	lsrs	r2, r3, #8
   19d2c:	f88d 2005 	strb.w	r2, [sp, #5]
   19d30:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
   19d34:	2203      	movs	r2, #3
   19d36:	460b      	mov	r3, r1
   19d38:	a901      	add	r1, sp, #4
   19d3a:	f7ff ffe6 	bl	19d0a <i2c_write>
}
   19d3e:	b003      	add	sp, #12
   19d40:	f85d fb04 	ldr.w	pc, [sp], #4

00019d44 <port_write>:
{
   19d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d48:	4605      	mov	r5, r0
   19d4a:	4689      	mov	r9, r1
   19d4c:	4614      	mov	r4, r2
   19d4e:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
   19d50:	f000 fcc7 	bl	1a6e2 <k_is_in_isr>
   19d54:	bb08      	cbnz	r0, 19d9a <port_write+0x56>
	const struct sx1509b_config *cfg = dev->config;
   19d56:	686f      	ldr	r7, [r5, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   19d58:	692d      	ldr	r5, [r5, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
   19d5a:	f105 0620 	add.w	r6, r5, #32
   19d5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19d66:	4630      	mov	r0, r6
   19d68:	f7ff ffcd 	bl	19d06 <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
   19d6c:	8b28      	ldrh	r0, [r5, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   19d6e:	8939      	ldrh	r1, [r7, #8]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
   19d70:	4044      	eors	r4, r0
   19d72:	ea04 0409 	and.w	r4, r4, r9
   19d76:	ea84 0408 	eor.w	r4, r4, r8
   19d7a:	4044      	eors	r4, r0
   19d7c:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   19d7e:	6868      	ldr	r0, [r5, #4]
   19d80:	4623      	mov	r3, r4
   19d82:	2210      	movs	r2, #16
   19d84:	f7ff ffce 	bl	19d24 <i2c_reg_write_word_be>
	if (rc == 0) {
   19d88:	4607      	mov	r7, r0
   19d8a:	b900      	cbnz	r0, 19d8e <port_write+0x4a>
		*outp = out;
   19d8c:	832c      	strh	r4, [r5, #24]
	z_impl_k_sem_give(sem);
   19d8e:	4630      	mov	r0, r6
   19d90:	f7fc f976 	bl	16080 <z_impl_k_sem_give>
}
   19d94:	4638      	mov	r0, r7
   19d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
   19d9a:	f06f 070a 	mvn.w	r7, #10
   19d9e:	e7f9      	b.n	19d94 <port_write+0x50>

00019da0 <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
   19da0:	2200      	movs	r2, #0
{
   19da2:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
   19da4:	4611      	mov	r1, r2
   19da6:	f7ff bfcd 	b.w	19d44 <port_write>

00019daa <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
   19daa:	2300      	movs	r3, #0
   19dac:	461a      	mov	r2, r3
   19dae:	f7ff bfc9 	b.w	19d44 <port_write>

00019db2 <port_set_bits>:
{
   19db2:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
   19db4:	2300      	movs	r3, #0
   19db6:	f7ff bfc5 	b.w	19d44 <port_write>

00019dba <port_set_masked>:
	return port_write(dev, mask, value, 0);
   19dba:	2300      	movs	r3, #0
   19dbc:	f7ff bfc2 	b.w	19d44 <port_write>

00019dc0 <write_pin_state>:
{
   19dc0:	b530      	push	{r4, r5, lr}
   19dc2:	b087      	sub	sp, #28
   19dc4:	460c      	mov	r4, r1
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
   19dc6:	2100      	movs	r1, #0
   19dc8:	f88d 1004 	strb.w	r1, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   19dcc:	8811      	ldrh	r1, [r2, #0]
   19dce:	ba49      	rev16	r1, r1
   19dd0:	f8ad 1005 	strh.w	r1, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
   19dd4:	8851      	ldrh	r1, [r2, #2]
   19dd6:	ba49      	rev16	r1, r1
   19dd8:	f8ad 1007 	strh.w	r1, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
   19ddc:	8891      	ldrh	r1, [r2, #4]
   19dde:	ba49      	rev16	r1, r1
   19de0:	f8ad 1009 	strh.w	r1, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
   19de4:	88d1      	ldrh	r1, [r2, #6]
   19de6:	ba49      	rev16	r1, r1
   19de8:	f8ad 100b 	strh.w	r1, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
   19dec:	8911      	ldrh	r1, [r2, #8]
   19dee:	ba49      	rev16	r1, r1
   19df0:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
   19df4:	8951      	ldrh	r1, [r2, #10]
   19df6:	ba49      	rev16	r1, r1
   19df8:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
   19dfc:	8991      	ldrh	r1, [r2, #12]
   19dfe:	ba49      	rev16	r1, r1
   19e00:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   19e04:	89d1      	ldrh	r1, [r2, #14]
   19e06:	8a12      	ldrh	r2, [r2, #16]
{
   19e08:	4605      	mov	r5, r0
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   19e0a:	ba49      	rev16	r1, r1
   19e0c:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   19e10:	ba51      	rev16	r1, r2
   19e12:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   19e16:	6860      	ldr	r0, [r4, #4]
   19e18:	8929      	ldrh	r1, [r5, #8]
	if (data_first) {
   19e1a:	b163      	cbz	r3, 19e36 <write_pin_state+0x76>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   19e1c:	4613      	mov	r3, r2
   19e1e:	2210      	movs	r2, #16
   19e20:	f7ff ff80 	bl	19d24 <i2c_reg_write_word_be>
		if (rc == 0) {
   19e24:	b928      	cbnz	r0, 19e32 <write_pin_state+0x72>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   19e26:	892b      	ldrh	r3, [r5, #8]
   19e28:	6860      	ldr	r0, [r4, #4]
   19e2a:	2211      	movs	r2, #17
   19e2c:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   19e2e:	f7ff ff6c 	bl	19d0a <i2c_write>
}
   19e32:	b007      	add	sp, #28
   19e34:	bd30      	pop	{r4, r5, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   19e36:	460b      	mov	r3, r1
   19e38:	2213      	movs	r2, #19
   19e3a:	a901      	add	r1, sp, #4
   19e3c:	e7f7      	b.n	19e2e <write_pin_state+0x6e>

00019e3e <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
   19e3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct sx1509b_config *cfg = dev->config;
   19e42:	6846      	ldr	r6, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   19e44:	6905      	ldr	r5, [r0, #16]
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
   19e46:	6870      	ldr	r0, [r6, #4]
   19e48:	f7fb fec0 	bl	15bcc <z_impl_device_get_binding>
   19e4c:	6068      	str	r0, [r5, #4]
	if (!drv_data->i2c_master) {
   19e4e:	2800      	cmp	r0, #0
   19e50:	d061      	beq.n	19f16 <sx1509b_init+0xd8>
	drv_data->irq_state = (struct sx1509b_irq_state) {
		.interrupt_mask = ALL_PINS,
	};
#endif

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   19e52:	8933      	ldrh	r3, [r6, #8]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   19e54:	f04f 087d 	mov.w	r8, #125	; 0x7d
   19e58:	2712      	movs	r7, #18

	return i2c_write(dev, tx_buf, 2, dev_addr);
   19e5a:	2202      	movs	r2, #2
   19e5c:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
   19e5e:	f88d 8004 	strb.w	r8, [sp, #4]
   19e62:	f88d 7005 	strb.w	r7, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   19e66:	f7ff ff50 	bl	19d0a <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
   19e6a:	4604      	mov	r4, r0
   19e6c:	2800      	cmp	r0, #0
   19e6e:	d14a      	bne.n	19f06 <sx1509b_init+0xc8>
	uint8_t tx_buf[2] = {reg_addr, value};
   19e70:	2234      	movs	r2, #52	; 0x34
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
		goto out;
	}
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   19e72:	6868      	ldr	r0, [r5, #4]
   19e74:	8933      	ldrh	r3, [r6, #8]
   19e76:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   19e7a:	a901      	add	r1, sp, #4
   19e7c:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   19e7e:	f88d 8004 	strb.w	r8, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   19e82:	f7ff ff42 	bl	19d0a <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC1);
	if (rc != 0) {
   19e86:	4604      	mov	r4, r0
   19e88:	2800      	cmp	r0, #0
   19e8a:	d13c      	bne.n	19f06 <sx1509b_init+0xc8>
	return z_impl_k_sleep(timeout);
   19e8c:	2100      	movs	r1, #0
   19e8e:	2063      	movs	r0, #99	; 0x63
   19e90:	f7fc fd92 	bl	169b8 <z_impl_k_sleep>
	}

	k_sleep(K_MSEC(RESET_DELAY_MS));

	/* Reset state mediated by initial configuration */
	drv_data->pin_state = (struct sx1509b_pin_state) {
   19e94:	463a      	mov	r2, r7
   19e96:	4621      	mov	r1, r4
   19e98:	f105 0008 	add.w	r0, r5, #8
   19e9c:	f7fd fe39 	bl	17b12 <memset>
   19ea0:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
   19ea4:	221e      	movs	r2, #30
   19ea6:	832b      	strh	r3, [r5, #24]
			& ~(DT_INST_PROP(0, init_out_low)
			    | DT_INST_PROP(0, init_out_high))),
		.data = (ALL_PINS
			 & ~DT_INST_PROP(0, init_out_low)),
	};
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   19ea8:	83ac      	strh	r4, [r5, #28]
   19eaa:	77ac      	strb	r4, [r5, #30]
		.debounce_config = CONFIG_GPIO_SX1509B_DEBOUNCE_TIME,
	};

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   19eac:	6868      	ldr	r0, [r5, #4]
   19eae:	8933      	ldrh	r3, [r6, #8]
   19eb0:	f88d 2004 	strb.w	r2, [sp, #4]
   19eb4:	2240      	movs	r2, #64	; 0x40
   19eb6:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   19eba:	a901      	add	r1, sp, #4
   19ebc:	2202      	movs	r2, #2
   19ebe:	f7ff ff24 	bl	19d0a <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   19ec2:	4627      	mov	r7, r4
				SX1509B_REG_CLOCK,
				SX1509B_REG_CLOCK_FOSC_INT_2MHZ);
	if (rc == 0) {
   19ec4:	4604      	mov	r4, r0
   19ec6:	b9f0      	cbnz	r0, 19f06 <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   19ec8:	8b2b      	ldrh	r3, [r5, #24]
   19eca:	8931      	ldrh	r1, [r6, #8]
   19ecc:	6868      	ldr	r0, [r5, #4]
   19ece:	2210      	movs	r2, #16
   19ed0:	f7ff ff28 	bl	19d24 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DATA,
					   drv_data->pin_state.data);
	}
	if (rc == 0) {
   19ed4:	4604      	mov	r4, r0
   19ed6:	b9b0      	cbnz	r0, 19f06 <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   19ed8:	8aeb      	ldrh	r3, [r5, #22]
   19eda:	8931      	ldrh	r1, [r6, #8]
   19edc:	6868      	ldr	r0, [r5, #4]
   19ede:	220e      	movs	r2, #14
   19ee0:	f7ff ff20 	bl	19d24 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DIR,
					   drv_data->pin_state.dir);
	}
	if (rc == 0) {
   19ee4:	4604      	mov	r4, r0
   19ee6:	b970      	cbnz	r0, 19f06 <sx1509b_init+0xc8>
	uint8_t tx_buf[3] = { reg_addr, value };
   19ee8:	221f      	movs	r2, #31
		rc = i2c_reg_write_byte_be(
   19eea:	6868      	ldr	r0, [r5, #4]
   19eec:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
   19eee:	f88d 2004 	strb.w	r2, [sp, #4]
   19ef2:	2298      	movs	r2, #152	; 0x98
   19ef4:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   19ef8:	a901      	add	r1, sp, #4
   19efa:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
   19efc:	f88d 7006 	strb.w	r7, [sp, #6]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   19f00:	f7ff ff03 	bl	19d0a <i2c_write>
   19f04:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   19f06:	f105 0020 	add.w	r0, r5, #32
   19f0a:	f7fc f8b9 	bl	16080 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
   19f0e:	4620      	mov	r0, r4
   19f10:	b002      	add	sp, #8
   19f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = -EINVAL;
   19f16:	f06f 0415 	mvn.w	r4, #21
   19f1a:	e7f4      	b.n	19f06 <sx1509b_init+0xc8>

00019f1c <sx1509b_config>:
{
   19f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
   19f20:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   19f24:	6904      	ldr	r4, [r0, #16]
{
   19f26:	460d      	mov	r5, r1
   19f28:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
   19f2a:	f000 fbda 	bl	1a6e2 <k_is_in_isr>
   19f2e:	4683      	mov	fp, r0
   19f30:	2800      	cmp	r0, #0
   19f32:	f040 808c 	bne.w	1a04e <sx1509b_config+0x132>
	if ((flags & GPIO_DS_ALT) != 0) {
   19f36:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
   19f3a:	f040 808b 	bne.w	1a054 <sx1509b_config+0x138>
	k_sem_take(&drv_data->lock, K_FOREVER);
   19f3e:	f104 0920 	add.w	r9, r4, #32
   19f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19f4a:	4648      	mov	r0, r9
   19f4c:	f7ff fedb 	bl	19d06 <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
   19f50:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
   19f52:	8b63      	ldrh	r3, [r4, #26]
		drv_data->led_drv_enable &= ~BIT(pin);
   19f54:	40ae      	lsls	r6, r5
   19f56:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   19f58:	fa23 f505 	lsr.w	r5, r3, r5
		drv_data->led_drv_enable &= ~BIT(pin);
   19f5c:	ea6f 0806 	mvn.w	r8, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   19f60:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
   19f62:	fa1f f888 	uxth.w	r8, r8
	if (drv_data->led_drv_enable & BIT(pin)) {
   19f66:	d44f      	bmi.n	1a008 <sx1509b_config+0xec>
	pins->open_drain &= ~BIT(pin);
   19f68:	8a63      	ldrh	r3, [r4, #18]
   19f6a:	ea03 0208 	and.w	r2, r3, r8
   19f6e:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
   19f70:	07ba      	lsls	r2, r7, #30
   19f72:	d45c      	bmi.n	1a02e <sx1509b_config+0x112>
		pins->pull_up |= BIT(pin);
   19f74:	89e3      	ldrh	r3, [r4, #14]
	if ((flags & GPIO_PULL_UP) != 0) {
   19f76:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
   19f78:	bf4c      	ite	mi
   19f7a:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
   19f7c:	ea08 0303 	andpl.w	r3, r8, r3
   19f80:	81e3      	strh	r3, [r4, #14]
		pins->pull_down |= BIT(pin);
   19f82:	8a23      	ldrh	r3, [r4, #16]
	if ((flags & GPIO_PULL_DOWN) != 0) {
   19f84:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
   19f86:	bf4c      	ite	mi
   19f88:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
   19f8a:	ea08 0303 	andpl.w	r3, r8, r3
   19f8e:	8223      	strh	r3, [r4, #16]
		pins->input_disable &= ~BIT(pin);
   19f90:	8923      	ldrh	r3, [r4, #8]
	if ((flags & GPIO_INPUT) != 0) {
   19f92:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
   19f94:	bf4c      	ite	mi
   19f96:	ea08 0303 	andmi.w	r3, r8, r3
		pins->input_disable |= BIT(pin);
   19f9a:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
   19f9c:	05bd      	lsls	r5, r7, #22
   19f9e:	8123      	strh	r3, [r4, #8]
		pins->dir &= ~BIT(pin);
   19fa0:	8ae3      	ldrh	r3, [r4, #22]
	if ((flags & GPIO_OUTPUT) != 0) {
   19fa2:	d54e      	bpl.n	1a042 <sx1509b_config+0x126>
		pins->dir &= ~BIT(pin);
   19fa4:	ea08 0303 	and.w	r3, r8, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   19fa8:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
   19faa:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   19fac:	d544      	bpl.n	1a038 <sx1509b_config+0x11c>
			pins->data &= ~BIT(pin);
   19fae:	8b23      	ldrh	r3, [r4, #24]
   19fb0:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
   19fb4:	8323      	strh	r3, [r4, #24]
			data_first = true;
   19fb6:	f04f 0b01 	mov.w	fp, #1
		debounce->debounce_enable |= BIT(pin);
   19fba:	f8b4 301d 	ldrh.w	r3, [r4, #29]
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
   19fbe:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
   19fc0:	bf4c      	ite	mi
   19fc2:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
   19fc4:	ea08 0603 	andpl.w	r6, r8, r3
   19fc8:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
   19fcc:	465b      	mov	r3, fp
   19fce:	f104 0208 	add.w	r2, r4, #8
   19fd2:	4621      	mov	r1, r4
   19fd4:	4650      	mov	r0, sl
   19fd6:	f7ff fef3 	bl	19dc0 <write_pin_state>
	if (rc == 0) {
   19fda:	4605      	mov	r5, r0
   19fdc:	bb00      	cbnz	r0, 1a020 <sx1509b_config+0x104>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
   19fde:	2322      	movs	r3, #34	; 0x22
   19fe0:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
   19fe4:	7f23      	ldrb	r3, [r4, #28]
   19fe6:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
   19fea:	f8b4 301d 	ldrh.w	r3, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
   19fee:	6860      	ldr	r0, [r4, #4]
			= sys_cpu_to_be16(debounce->debounce_enable);
   19ff0:	ba5b      	rev16	r3, r3
		rc = i2c_write(drv_data->i2c_master,
   19ff2:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
   19ff4:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
   19ff8:	eb0d 0102 	add.w	r1, sp, r2
   19ffc:	f8ba 3008 	ldrh.w	r3, [sl, #8]
   1a000:	f7ff fe83 	bl	19d0a <i2c_write>
   1a004:	4605      	mov	r5, r0
   1a006:	e00b      	b.n	1a020 <sx1509b_config+0x104>
		drv_data->led_drv_enable &= ~BIT(pin);
   1a008:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1a00c:	f8ba 1008 	ldrh.w	r1, [sl, #8]
   1a010:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
   1a012:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1a014:	2220      	movs	r2, #32
   1a016:	f7ff fe85 	bl	19d24 <i2c_reg_write_word_be>
		if (rc) {
   1a01a:	4605      	mov	r5, r0
   1a01c:	2800      	cmp	r0, #0
   1a01e:	d0a3      	beq.n	19f68 <sx1509b_config+0x4c>
   1a020:	4648      	mov	r0, r9
   1a022:	f7fc f82d 	bl	16080 <z_impl_k_sem_give>
}
   1a026:	4628      	mov	r0, r5
   1a028:	b003      	add	sp, #12
   1a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
   1a02e:	077d      	lsls	r5, r7, #29
   1a030:	d50a      	bpl.n	1a048 <sx1509b_config+0x12c>
			pins->open_drain |= BIT(pin);
   1a032:	4333      	orrs	r3, r6
   1a034:	8263      	strh	r3, [r4, #18]
   1a036:	e79d      	b.n	19f74 <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a038:	0539      	lsls	r1, r7, #20
   1a03a:	d5be      	bpl.n	19fba <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
   1a03c:	8b23      	ldrh	r3, [r4, #24]
   1a03e:	4333      	orrs	r3, r6
   1a040:	e7b8      	b.n	19fb4 <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
   1a042:	4333      	orrs	r3, r6
   1a044:	82e3      	strh	r3, [r4, #22]
   1a046:	e7b8      	b.n	19fba <sx1509b_config+0x9e>
			rc = -ENOTSUP;
   1a048:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1a04c:	e7e8      	b.n	1a020 <sx1509b_config+0x104>
		return -EWOULDBLOCK;
   1a04e:	f06f 050a 	mvn.w	r5, #10
   1a052:	e7e8      	b.n	1a026 <sx1509b_config+0x10a>
		return -ENOTSUP;
   1a054:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1a058:	e7e5      	b.n	1a026 <sx1509b_config+0x10a>

0001a05a <port_get>:
{
   1a05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a05e:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
   1a060:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1a064:	6907      	ldr	r7, [r0, #16]
{
   1a066:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
   1a068:	f000 fb3b 	bl	1a6e2 <k_is_in_isr>
   1a06c:	4604      	mov	r4, r0
   1a06e:	bb78      	cbnz	r0, 1a0d0 <port_get+0x76>
	k_sem_take(&drv_data->lock, K_FOREVER);
   1a070:	f107 0620 	add.w	r6, r7, #32
   1a074:	4630      	mov	r0, r6
   1a076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a07a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a07e:	f7ff fe42 	bl	19d06 <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
   1a082:	f10d 0205 	add.w	r2, sp, #5
   1a086:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   1a088:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   1a08a:	6878      	ldr	r0, [r7, #4]
   1a08c:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
   1a08e:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
   1a090:	f10d 0206 	add.w	r2, sp, #6
   1a094:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1a098:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   1a09a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1a09e:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   1a0a0:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   1a0a2:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
   1a0a6:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1a0a8:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1a0ac:	6881      	ldr	r1, [r0, #8]
   1a0ae:	688c      	ldr	r4, [r1, #8]
   1a0b0:	a902      	add	r1, sp, #8
   1a0b2:	47a0      	blx	r4
	if (rc != 0) {
   1a0b4:	4604      	mov	r4, r0
   1a0b6:	b920      	cbnz	r0, 1a0c2 <port_get+0x68>
	*value = sys_be16_to_cpu(pin_data);
   1a0b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1a0bc:	ba5b      	rev16	r3, r3
   1a0be:	b29b      	uxth	r3, r3
   1a0c0:	602b      	str	r3, [r5, #0]
   1a0c2:	4630      	mov	r0, r6
   1a0c4:	f7fb ffdc 	bl	16080 <z_impl_k_sem_give>
}
   1a0c8:	4620      	mov	r0, r4
   1a0ca:	b008      	add	sp, #32
   1a0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
   1a0d0:	f06f 040a 	mvn.w	r4, #10
   1a0d4:	e7f8      	b.n	1a0c8 <port_get+0x6e>

0001a0d6 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1a0d6:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twim_config *config = dev->config;
   1a0d8:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twim_data *data = dev->data;
   1a0da:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
   1a0dc:	d405      	bmi.n	1a0ea <i2c_nrfx_twim_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
   1a0de:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1a0e2:	2a01      	cmp	r2, #1
   1a0e4:	d004      	beq.n	1a0f0 <i2c_nrfx_twim_configure+0x1a>
   1a0e6:	2a02      	cmp	r2, #2
   1a0e8:	d00a      	beq.n	1a100 <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
   1a0ea:	f06f 0015 	mvn.w	r0, #21
}
   1a0ee:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1a0f0:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   1a0f2:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1a0f6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
   1a0fa:	6341      	str	r1, [r0, #52]	; 0x34
	return 0;
   1a0fc:	2000      	movs	r0, #0
   1a0fe:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   1a100:	681b      	ldr	r3, [r3, #0]
   1a102:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1a106:	e7f6      	b.n	1a0f6 <i2c_nrfx_twim_configure+0x20>

0001a108 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
   1a108:	4603      	mov	r3, r0
   1a10a:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   1a10c:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1a10e:	7919      	ldrb	r1, [r3, #4]
   1a110:	2301      	movs	r3, #1
   1a112:	fa03 f101 	lsl.w	r1, r3, r1
   1a116:	6903      	ldr	r3, [r0, #16]
   1a118:	681b      	ldr	r3, [r3, #0]
   1a11a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1a11c:	bf18      	it	ne
   1a11e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1a122:	b112      	cbz	r2, 1a12a <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   1a124:	6883      	ldr	r3, [r0, #8]
   1a126:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1a128:	4718      	bx	r3
   1a12a:	6883      	ldr	r3, [r0, #8]
   1a12c:	691b      	ldr	r3, [r3, #16]
   1a12e:	e7fb      	b.n	1a128 <gpio_pin_set_dt+0x20>

0001a130 <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
   1a130:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
   1a132:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1a134:	6845      	ldr	r5, [r0, #4]
{
   1a136:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
   1a138:	a903      	add	r1, sp, #12
   1a13a:	4620      	mov	r0, r4
   1a13c:	f7fd f801 	bl	17142 <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1a140:	7d29      	ldrb	r1, [r5, #20]
   1a142:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
   1a146:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1a148:	d114      	bne.n	1a174 <disable_sync+0x44>
		rc = 0;
	} else if (rc == 1) {
   1a14a:	2801      	cmp	r0, #1
   1a14c:	d10c      	bne.n	1a168 <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1a14e:	f105 000c 	add.w	r0, r5, #12
   1a152:	f7ff ffd9 	bl	1a108 <gpio_pin_set_dt>
   1a156:	4603      	mov	r3, r0
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   1a158:	2200      	movs	r2, #0
   1a15a:	9903      	ldr	r1, [sp, #12]
   1a15c:	9200      	str	r2, [sp, #0]
   1a15e:	4620      	mov	r0, r4
   1a160:	f7fc fffa 	bl	17158 <onoff_sync_finalize>
}
   1a164:	b005      	add	sp, #20
   1a166:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
   1a168:	2800      	cmp	r0, #0
   1a16a:	bf14      	ite	ne
   1a16c:	4603      	movne	r3, r0
   1a16e:	f06f 0315 	mvneq.w	r3, #21
   1a172:	e7f1      	b.n	1a158 <disable_sync+0x28>
		rc = 0;
   1a174:	2300      	movs	r3, #0
   1a176:	e7ef      	b.n	1a158 <disable_sync+0x28>

0001a178 <enable_sync>:
{
   1a178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   1a17a:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1a17c:	6846      	ldr	r6, [r0, #4]
{
   1a17e:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
   1a180:	4628      	mov	r0, r5
   1a182:	a903      	add	r1, sp, #12
   1a184:	f7fc ffdd 	bl	17142 <onoff_sync_lock>
	if ((rc == 0)
   1a188:	4603      	mov	r3, r0
   1a18a:	b940      	cbnz	r0, 1a19e <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   1a18c:	7d32      	ldrb	r2, [r6, #20]
   1a18e:	07d2      	lsls	r2, r2, #31
   1a190:	d405      	bmi.n	1a19e <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1a192:	2101      	movs	r1, #1
   1a194:	f106 000c 	add.w	r0, r6, #12
   1a198:	f7ff ffb6 	bl	1a108 <gpio_pin_set_dt>
   1a19c:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   1a19e:	2201      	movs	r2, #1
   1a1a0:	9200      	str	r2, [sp, #0]
   1a1a2:	9903      	ldr	r1, [sp, #12]
   1a1a4:	4622      	mov	r2, r4
   1a1a6:	4628      	mov	r0, r5
   1a1a8:	f7fc ffd6 	bl	17158 <onoff_sync_finalize>
}
   1a1ac:	b004      	add	sp, #16
   1a1ae:	bd70      	pop	{r4, r5, r6, pc}

0001a1b0 <disable_onoff>:
	return onoff_release(&data->mgr);
   1a1b0:	6900      	ldr	r0, [r0, #16]
   1a1b2:	3004      	adds	r0, #4
   1a1b4:	f7fc bfa0 	b.w	170f8 <onoff_release>

0001a1b8 <enable_onoff>:
	return onoff_request(&data->mgr, cli);
   1a1b8:	6900      	ldr	r0, [r0, #16]
   1a1ba:	3004      	adds	r0, #4
   1a1bc:	f7fc bf53 	b.w	17066 <onoff_request>

0001a1c0 <common_init.isra.0>:
static int common_init(const struct device *dev)
   1a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1c2:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->enable.port)) {
   1a1c4:	68c0      	ldr	r0, [r0, #12]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1a1c6:	f000 f9cc 	bl	1a562 <z_device_is_ready>
   1a1ca:	b340      	cbz	r0, 1a21e <common_init.isra.0+0x5e>
	if (on) {
   1a1cc:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
   1a1ce:	7c6b      	ldrb	r3, [r5, #17]
	return gpio_pin_configure(spec->port,
   1a1d0:	68e8      	ldr	r0, [r5, #12]
   1a1d2:	7c29      	ldrb	r1, [r5, #16]
   1a1d4:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
   1a1d8:	bf16      	itet	ne
   1a1da:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
		flags = GPIO_OUTPUT_INACTIVE;
   1a1de:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		delay_us = cfg->startup_delay_us;
   1a1e2:	686c      	ldrne	r4, [r5, #4]
   1a1e4:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
   1a1e6:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
   1a1e8:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a1ec:	683d      	ldr	r5, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1a1ee:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1a1f0:	bf48      	it	mi
   1a1f2:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a1f6:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1a1f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a1fc:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1a1fe:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1a200:	bf4c      	ite	mi
   1a202:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1a204:	43b5      	bicpl	r5, r6
   1a206:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
   1a208:	f8dc 3000 	ldr.w	r3, [ip]
   1a20c:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
   1a20e:	4605      	mov	r5, r0
   1a210:	b918      	cbnz	r0, 1a21a <common_init.isra.0+0x5a>
   1a212:	b114      	cbz	r4, 1a21a <common_init.isra.0+0x5a>
	z_impl_k_busy_wait(usec_to_wait);
   1a214:	4620      	mov	r0, r4
   1a216:	f000 fd67 	bl	1ace8 <z_impl_k_busy_wait>
}
   1a21a:	4628      	mov	r0, r5
   1a21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   1a21e:	f06f 0512 	mvn.w	r5, #18
   1a222:	e7fa      	b.n	1a21a <common_init.isra.0+0x5a>

0001a224 <regulator_fixed_init_sync>:
};

static int regulator_fixed_init_sync(const struct device *dev)
{
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
   1a224:	6840      	ldr	r0, [r0, #4]
   1a226:	f7ff bfcb 	b.w	1a1c0 <common_init.isra.0>

0001a22a <onoff_worker>:
{
   1a22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
   1a22e:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
   1a232:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
   1a236:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
   1a238:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
   1a23a:	2901      	cmp	r1, #1
{
   1a23c:	4604      	mov	r4, r0
	struct driver_data_onoff *data
   1a23e:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
   1a242:	d10f      	bne.n	1a264 <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1a244:	f105 000c 	add.w	r0, r5, #12
   1a248:	f7ff ff5e 	bl	1a108 <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
   1a24c:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1a24e:	4603      	mov	r3, r0
	data->notify = NULL;
   1a250:	2100      	movs	r1, #0
   1a252:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
   1a254:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
   1a258:	4630      	mov	r0, r6
   1a25a:	4639      	mov	r1, r7
}
   1a25c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1a260:	f7f9 bdde 	b.w	13e20 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
   1a264:	2902      	cmp	r1, #2
   1a266:	d107      	bne.n	1a278 <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1a268:	2100      	movs	r1, #0
   1a26a:	f105 000c 	add.w	r0, r5, #12
   1a26e:	f7ff ff4b 	bl	1a108 <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
   1a272:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1a274:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
   1a276:	e7eb      	b.n	1a250 <onoff_worker+0x26>
	int rc = 0;
   1a278:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
   1a27a:	461a      	mov	r2, r3
   1a27c:	e7e8      	b.n	1a250 <onoff_worker+0x26>

0001a27e <stop>:
{
   1a27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   1a282:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1a286:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   1a288:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
   1a28a:	6858      	ldr	r0, [r3, #4]
{
   1a28c:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1a28e:	7d01      	ldrb	r1, [r0, #20]
   1a290:	f011 0101 	ands.w	r1, r1, #1
   1a294:	d113      	bne.n	1a2be <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
   1a296:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
   1a298:	300c      	adds	r0, #12
   1a29a:	f7ff ff35 	bl	1a108 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   1a29e:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
   1a2a2:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   1a2a4:	d10d      	bne.n	1a2c2 <stop+0x44>
		data->task = WORK_TASK_DISABLE;
   1a2a6:	2302      	movs	r3, #2
   1a2a8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   1a2ac:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1a2ae:	f104 001c 	add.w	r0, r4, #28
   1a2b2:	2200      	movs	r2, #0
}
   1a2b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1a2b8:	2300      	movs	r3, #0
   1a2ba:	f7fc b8b5 	b.w	16428 <k_work_schedule>
	int rc = 0;
   1a2be:	2300      	movs	r3, #0
		delay_us = 0;
   1a2c0:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
   1a2c2:	463a      	mov	r2, r7
   1a2c4:	4629      	mov	r1, r5
   1a2c6:	4630      	mov	r0, r6
}
   1a2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1a2cc:	f7f9 bda8 	b.w	13e20 <finalize_transition>

0001a2d0 <start>:
{
   1a2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   1a2d4:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1a2d8:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   1a2da:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
   1a2dc:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1a2de:	7d03      	ldrb	r3, [r0, #20]
   1a2e0:	07db      	lsls	r3, r3, #31
{
   1a2e2:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1a2e4:	d414      	bmi.n	1a310 <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
   1a2e6:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
   1a2e8:	2101      	movs	r1, #1
   1a2ea:	300c      	adds	r0, #12
   1a2ec:	f7ff ff0c 	bl	1a108 <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   1a2f0:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
   1a2f4:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   1a2f6:	d10d      	bne.n	1a314 <start+0x44>
		data->task = WORK_TASK_ENABLE;
   1a2f8:	2301      	movs	r3, #1
   1a2fa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   1a2fe:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1a300:	f104 001c 	add.w	r0, r4, #28
   1a304:	2200      	movs	r2, #0
}
   1a306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1a30a:	2300      	movs	r3, #0
   1a30c:	f7fc b88c 	b.w	16428 <k_work_schedule>
	int rc = 0;
   1a310:	2300      	movs	r3, #0
		delay_us = 0;
   1a312:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
   1a314:	4632      	mov	r2, r6
   1a316:	4629      	mov	r1, r5
   1a318:	4638      	mov	r0, r7
}
   1a31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1a31e:	f7f9 bd7f 	b.w	13e20 <finalize_transition>

0001a322 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   1a322:	6902      	ldr	r2, [r0, #16]
{
   1a324:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   1a326:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1a32a:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1a32e:	2000      	movs	r0, #0
   1a330:	4770      	bx	lr

0001a332 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1a332:	6843      	ldr	r3, [r0, #4]
   1a334:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a336:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a33a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1a33e:	4770      	bx	lr

0001a340 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1a340:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1a342:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1a344:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a346:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1a34a:	b148      	cbz	r0, 1a360 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1a34c:	7c52      	ldrb	r2, [r2, #17]
   1a34e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a350:	2000      	movs	r0, #0
   1a352:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1a356:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a35a:	2201      	movs	r2, #1
   1a35c:	601a      	str	r2, [r3, #0]
	return 0;
   1a35e:	4770      	bx	lr
		return -1;
   1a360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a364:	4770      	bx	lr

0001a366 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1a366:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1a368:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a36a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1a36e:	b940      	cbnz	r0, 1a382 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1a370:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1a372:	079b      	lsls	r3, r3, #30
   1a374:	d406      	bmi.n	1a384 <is_tx_ready.isra.0+0x1e>
   1a376:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1a37a:	3800      	subs	r0, #0
   1a37c:	bf18      	it	ne
   1a37e:	2001      	movne	r0, #1
   1a380:	4770      	bx	lr
   1a382:	2001      	movs	r0, #1
}
   1a384:	4770      	bx	lr

0001a386 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1a386:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1a388:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1a38a:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1a38e:	05c9      	lsls	r1, r1, #23
   1a390:	d518      	bpl.n	1a3c4 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a392:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1a396:	b1a9      	cbz	r1, 1a3c4 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1a398:	f04f 0020 	mov.w	r0, #32
   1a39c:	f3ef 8111 	mrs	r1, BASEPRI
   1a3a0:	f380 8812 	msr	BASEPRI_MAX, r0
   1a3a4:	f3bf 8f6f 	isb	sy
   1a3a8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1a3ac:	b130      	cbz	r0, 1a3bc <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a3ae:	2000      	movs	r0, #0
   1a3b0:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1a3b4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a3b8:	2001      	movs	r0, #1
   1a3ba:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1a3bc:	f381 8811 	msr	BASEPRI, r1
   1a3c0:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a3c4:	6852      	ldr	r2, [r2, #4]
   1a3c6:	06d2      	lsls	r2, r2, #27
   1a3c8:	d515      	bpl.n	1a3f6 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1a3ca:	f04f 0120 	mov.w	r1, #32
   1a3ce:	f3ef 8211 	mrs	r2, BASEPRI
   1a3d2:	f381 8812 	msr	BASEPRI_MAX, r1
   1a3d6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a3da:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1a3de:	b111      	cbz	r1, 1a3e6 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a3e0:	2100      	movs	r1, #0
   1a3e2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1a3e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1a3ea:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1a3ee:	f382 8811 	msr	BASEPRI, r2
   1a3f2:	f3bf 8f6f 	isb	sy
}
   1a3f6:	4770      	bx	lr

0001a3f8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1a3f8:	4770      	bx	lr

0001a3fa <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1a3fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1a3fe:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1a402:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1a404:	bf04      	itt	eq
   1a406:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   1a40a:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   1a40e:	1f83      	subs	r3, r0, #6
   1a410:	4258      	negs	r0, r3
   1a412:	4158      	adcs	r0, r3
   1a414:	4770      	bx	lr

0001a416 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1a416:	4700      	bx	r0

0001a418 <nrfx_busy_wait>:
   1a418:	f000 bc66 	b.w	1ace8 <z_impl_k_busy_wait>

0001a41c <nrfx_clock_enable>:
{
   1a41c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1a41e:	2000      	movs	r0, #0
   1a420:	f7e7 ff00 	bl	2224 <arch_irq_is_enabled>
   1a424:	b918      	cbnz	r0, 1a42e <nrfx_clock_enable+0x12>
}
   1a426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1a42a:	f7e7 bed7 	b.w	21dc <arch_irq_enable>
   1a42e:	bd08      	pop	{r3, pc}

0001a430 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1a430:	f000 001f 	and.w	r0, r0, #31
   1a434:	0080      	lsls	r0, r0, #2
   1a436:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1a43a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   1a43e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1a442:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1a446:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1a44a:	4770      	bx	lr

0001a44c <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   1a44c:	7b0a      	ldrb	r2, [r1, #12]
{
   1a44e:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   1a450:	2a03      	cmp	r2, #3
   1a452:	d829      	bhi.n	1a4a8 <xfer_completeness_check+0x5c>
   1a454:	e8df f002 	tbb	[pc, r2]
   1a458:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1a45c:	688a      	ldr	r2, [r1, #8]
   1a45e:	0350      	lsls	r0, r2, #13
   1a460:	d504      	bpl.n	1a46c <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   1a462:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   1a466:	6908      	ldr	r0, [r1, #16]
   1a468:	4290      	cmp	r0, r2
   1a46a:	d107      	bne.n	1a47c <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1a46c:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1a46e:	0352      	lsls	r2, r2, #13
   1a470:	d41a      	bmi.n	1a4a8 <xfer_completeness_check+0x5c>
   1a472:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1a476:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1a478:	4291      	cmp	r1, r2
   1a47a:	d015      	beq.n	1a4a8 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1a47c:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1a47e:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1a480:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1a484:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1a488:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1a48a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1a48e:	6908      	ldr	r0, [r1, #16]
   1a490:	4290      	cmp	r0, r2
   1a492:	d1f3      	bne.n	1a47c <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   1a494:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1a498:	e7ed      	b.n	1a476 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   1a49a:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1a49e:	6909      	ldr	r1, [r1, #16]
   1a4a0:	e7ea      	b.n	1a478 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   1a4a2:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1a4a6:	e7fa      	b.n	1a49e <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   1a4a8:	2001      	movs	r0, #1
}
   1a4aa:	4770      	bx	lr

0001a4ac <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1a4ac:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1a4ae:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1a4b0:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1a4b2:	bf9c      	itt	ls
   1a4b4:	6880      	ldrls	r0, [r0, #8]
   1a4b6:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1a4b8:	3b01      	subs	r3, #1
   1a4ba:	1a98      	subs	r0, r3, r2
}
   1a4bc:	4770      	bx	lr

0001a4be <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a4be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1a4c2:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a4c6:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1a4c8:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a4cc:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1a4ce:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a4d0:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a4d2:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1a4d4:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1a4d6:	d906      	bls.n	1a4e6 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1a4d8:	f7fd fb10 	bl	17afc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   1a4dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   1a4e0:	60ec      	str	r4, [r5, #12]
}
   1a4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1a4e6:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1a4e8:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1a4ec:	f7fd fb06 	bl	17afc <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1a4f0:	6868      	ldr	r0, [r5, #4]
   1a4f2:	4622      	mov	r2, r4
   1a4f4:	eb07 0108 	add.w	r1, r7, r8
   1a4f8:	e7ee      	b.n	1a4d8 <_WriteNoCheck+0x1a>

0001a4fa <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1a4fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1a4fe:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1a500:	4606      	mov	r6, r0
   1a502:	4689      	mov	r9, r1
   1a504:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1a506:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1a50a:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a50c:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a50e:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1a510:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a512:	bf28      	it	cs
   1a514:	18e4      	addcs	r4, r4, r3
   1a516:	3c01      	subs	r4, #1
   1a518:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1a51a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1a51c:	42bc      	cmp	r4, r7
   1a51e:	bf28      	it	cs
   1a520:	463c      	movcs	r4, r7
   1a522:	4294      	cmp	r4, r2
   1a524:	bf28      	it	cs
   1a526:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1a528:	4649      	mov	r1, r9
   1a52a:	4622      	mov	r2, r4
   1a52c:	4428      	add	r0, r5
   1a52e:	f7fd fae5 	bl	17afc <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1a532:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1a534:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
   1a536:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1a538:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   1a53a:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
   1a53c:	42ab      	cmp	r3, r5
   1a53e:	bf08      	it	eq
   1a540:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   1a542:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   1a546:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1a548:	2f00      	cmp	r7, #0
   1a54a:	d1de      	bne.n	1a50a <_WriteBlocking+0x10>
}
   1a54c:	4640      	mov	r0, r8
   1a54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a552 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1a552:	f7fb bab5 	b.w	15ac0 <_DoInit>

0001a556 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1a556:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1a558:	f7ff fffb 	bl	1a552 <SEGGER_RTT_Init>

	return 0;
}
   1a55c:	2000      	movs	r0, #0
   1a55e:	bd08      	pop	{r3, pc}

0001a560 <z_device_state_init>:
}
   1a560:	4770      	bx	lr

0001a562 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1a562:	b138      	cbz	r0, 1a574 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1a564:	68c3      	ldr	r3, [r0, #12]
   1a566:	8818      	ldrh	r0, [r3, #0]
   1a568:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1a56c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1a570:	4258      	negs	r0, r3
   1a572:	4158      	adcs	r0, r3
}
   1a574:	4770      	bx	lr

0001a576 <arch_system_halt>:
	__asm__ volatile(
   1a576:	f04f 0220 	mov.w	r2, #32
   1a57a:	f3ef 8311 	mrs	r3, BASEPRI
   1a57e:	f382 8812 	msr	BASEPRI_MAX, r2
   1a582:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   1a586:	e7fe      	b.n	1a586 <arch_system_halt+0x10>

0001a588 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1a588:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   1a58a:	f7ff fff4 	bl	1a576 <arch_system_halt>

0001a58e <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a590:	4605      	mov	r5, r0
   1a592:	460e      	mov	r6, r1
   1a594:	f04f 0320 	mov.w	r3, #32
   1a598:	f3ef 8711 	mrs	r7, BASEPRI
   1a59c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a5a0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1a5a4:	f7fc fa22 	bl	169ec <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1a5a8:	4631      	mov	r1, r6
   1a5aa:	4604      	mov	r4, r0
   1a5ac:	4628      	mov	r0, r5
   1a5ae:	f7ff ffeb 	bl	1a588 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1a5b2:	f387 8811 	msr	BASEPRI, r7
   1a5b6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1a5ba:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1a5bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a5c0:	f7e8 b874 	b.w	26ac <z_impl_k_thread_abort>

0001a5c4 <k_heap_init>:
{
   1a5c4:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1a5c6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1a5ca:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1a5ce:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1a5d0:	f7fc bf7a 	b.w	174c8 <sys_heap_init>

0001a5d4 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5d8:	b085      	sub	sp, #20
   1a5da:	4606      	mov	r6, r0
   1a5dc:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a5de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   1a5e2:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a5e4:	f000 fb84 	bl	1acf0 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1a5e8:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1a5ec:	4605      	mov	r5, r0
   1a5ee:	460f      	mov	r7, r1
	__asm__ volatile(
   1a5f0:	f04f 0320 	mov.w	r3, #32
   1a5f4:	f3ef 8411 	mrs	r4, BASEPRI
   1a5f8:	f383 8812 	msr	BASEPRI_MAX, r3
   1a5fc:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1a600:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1a604:	464a      	mov	r2, r9
   1a606:	4641      	mov	r1, r8
   1a608:	4630      	mov	r0, r6
   1a60a:	f7fc fef5 	bl	173f8 <sys_heap_aligned_alloc>
   1a60e:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1a610:	f7fc fba2 	bl	16d58 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1a614:	9b03      	ldr	r3, [sp, #12]
   1a616:	b13b      	cbz	r3, 1a628 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1a618:	f384 8811 	msr	BASEPRI, r4
   1a61c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1a620:	4618      	mov	r0, r3
   1a622:	b005      	add	sp, #20
   1a624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1a628:	1a28      	subs	r0, r5, r0
   1a62a:	eb67 0101 	sbc.w	r1, r7, r1
   1a62e:	2801      	cmp	r0, #1
   1a630:	f171 0200 	sbcs.w	r2, r1, #0
   1a634:	dbf0      	blt.n	1a618 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1a636:	e9cd 0100 	strd	r0, r1, [sp]
   1a63a:	465a      	mov	r2, fp
   1a63c:	4621      	mov	r1, r4
   1a63e:	4650      	mov	r0, sl
   1a640:	f7fc f8c4 	bl	167cc <z_pend_curr>
	__asm__ volatile(
   1a644:	f04f 0320 	mov.w	r3, #32
   1a648:	f3ef 8411 	mrs	r4, BASEPRI
   1a64c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a650:	f3bf 8f6f 	isb	sy
   1a654:	e7d6      	b.n	1a604 <k_heap_aligned_alloc+0x30>

0001a656 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1a656:	b538      	push	{r3, r4, r5, lr}
   1a658:	4604      	mov	r4, r0
   1a65a:	f04f 0320 	mov.w	r3, #32
   1a65e:	f3ef 8511 	mrs	r5, BASEPRI
   1a662:	f383 8812 	msr	BASEPRI_MAX, r3
   1a666:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1a66a:	f7fc fe8d 	bl	17388 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1a66e:	f104 000c 	add.w	r0, r4, #12
   1a672:	f000 fac6 	bl	1ac02 <z_unpend_all>
   1a676:	b130      	cbz	r0, 1a686 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1a678:	4629      	mov	r1, r5
   1a67a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1a67e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1a682:	f7fb bf51 	b.w	16528 <z_reschedule>
	__asm__ volatile(
   1a686:	f385 8811 	msr	BASEPRI, r5
   1a68a:	f3bf 8f6f 	isb	sy
}
   1a68e:	bd38      	pop	{r3, r4, r5, pc}

0001a690 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1a690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a692:	4604      	mov	r4, r0
   1a694:	460d      	mov	r5, r1
	__asm__ volatile(
   1a696:	f04f 0320 	mov.w	r3, #32
   1a69a:	f3ef 8611 	mrs	r6, BASEPRI
   1a69e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6a2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1a6a6:	6947      	ldr	r7, [r0, #20]
   1a6a8:	b977      	cbnz	r7, 1a6c8 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1a6aa:	f000 fa92 	bl	1abd2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1a6ae:	b158      	cbz	r0, 1a6c8 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1a6b0:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1a6b2:	6142      	str	r2, [r0, #20]
   1a6b4:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1a6b6:	f000 fa30 	bl	1ab1a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1a6ba:	4631      	mov	r1, r6
   1a6bc:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1a6c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1a6c4:	f7fb bf30 	b.w	16528 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1a6c8:	682b      	ldr	r3, [r5, #0]
   1a6ca:	6962      	ldr	r2, [r4, #20]
   1a6cc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1a6ce:	682b      	ldr	r3, [r5, #0]
   1a6d0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1a6d2:	69a3      	ldr	r3, [r4, #24]
   1a6d4:	3b01      	subs	r3, #1
   1a6d6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1a6d8:	f386 8811 	msr	BASEPRI, r6
   1a6dc:	f3bf 8f6f 	isb	sy
}
   1a6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a6e2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a6e2:	f3ef 8005 	mrs	r0, IPSR
}
   1a6e6:	3800      	subs	r0, #0
   1a6e8:	bf18      	it	ne
   1a6ea:	2001      	movne	r0, #1
   1a6ec:	4770      	bx	lr

0001a6ee <z_impl_k_thread_name_set>:
}
   1a6ee:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1a6f2:	4770      	bx	lr

0001a6f4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   1a6f4:	f7fc b80e 	b.w	16714 <z_sched_start>

0001a6f8 <z_pm_save_idle_exit>:
{
   1a6f8:	b508      	push	{r3, lr}
	pm_system_resume();
   1a6fa:	f7e7 fbd7 	bl	1eac <pm_system_resume>
}
   1a6fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1a702:	f7ff be79 	b.w	1a3f8 <sys_clock_idle_exit>

0001a706 <queue_insert>:
{
   1a706:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a70a:	4699      	mov	r9, r3
   1a70c:	4604      	mov	r4, r0
   1a70e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1a712:	460d      	mov	r5, r1
   1a714:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a716:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1a71a:	f04f 0220 	mov.w	r2, #32
   1a71e:	f3ef 8711 	mrs	r7, BASEPRI
   1a722:	f382 8812 	msr	BASEPRI_MAX, r2
   1a726:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1a72a:	b103      	cbz	r3, 1a72e <queue_insert+0x28>
	return list->tail;
   1a72c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1a72e:	4630      	mov	r0, r6
   1a730:	f000 fa4f 	bl	1abd2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1a734:	b158      	cbz	r0, 1a74e <queue_insert+0x48>
   1a736:	2400      	movs	r4, #0
   1a738:	67c4      	str	r4, [r0, #124]	; 0x7c
   1a73a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1a73e:	f000 f9ec 	bl	1ab1a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1a742:	4630      	mov	r0, r6
   1a744:	4639      	mov	r1, r7
   1a746:	f7fb feef 	bl	16528 <z_reschedule>
	return 0;
   1a74a:	2000      	movs	r0, #0
   1a74c:	e00c      	b.n	1a768 <queue_insert+0x62>
	if (alloc) {
   1a74e:	f1b9 0f00 	cmp.w	r9, #0
   1a752:	d01b      	beq.n	1a78c <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1a754:	2108      	movs	r1, #8
   1a756:	f7fc fb9b 	bl	16e90 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1a75a:	b938      	cbnz	r0, 1a76c <queue_insert+0x66>
	__asm__ volatile(
   1a75c:	f387 8811 	msr	BASEPRI, r7
   1a760:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1a764:	f06f 000b 	mvn.w	r0, #11
}
   1a768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1a76c:	2301      	movs	r3, #1
		anode->data = data;
   1a76e:	f8c0 8004 	str.w	r8, [r0, #4]
   1a772:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a774:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a776:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1a77a:	b95d      	cbnz	r5, 1a794 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a77c:	6823      	ldr	r3, [r4, #0]
   1a77e:	4313      	orrs	r3, r2
   1a780:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a782:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1a784:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1a786:	b973      	cbnz	r3, 1a7a6 <queue_insert+0xa0>
	list->tail = node;
   1a788:	6060      	str	r0, [r4, #4]
}
   1a78a:	e00c      	b.n	1a7a6 <queue_insert+0xa0>
	node->next_and_flags = flags;
   1a78c:	f8c8 9000 	str.w	r9, [r8]
}
   1a790:	4640      	mov	r0, r8
   1a792:	e7ef      	b.n	1a774 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a794:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1a796:	f033 0303 	bics.w	r3, r3, #3
   1a79a:	d110      	bne.n	1a7be <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a79c:	6002      	str	r2, [r0, #0]
	return list->tail;
   1a79e:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1a7a0:	b93a      	cbnz	r2, 1a7b2 <queue_insert+0xac>
	list->head = node;
   1a7a2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a7a6:	2104      	movs	r1, #4
   1a7a8:	f104 0010 	add.w	r0, r4, #16
   1a7ac:	f000 fc09 	bl	1afc2 <z_handle_obj_poll_events>
   1a7b0:	e7c7      	b.n	1a742 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a7b2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a7b4:	f003 0303 	and.w	r3, r3, #3
   1a7b8:	4303      	orrs	r3, r0
   1a7ba:	6013      	str	r3, [r2, #0]
   1a7bc:	e7e4      	b.n	1a788 <queue_insert+0x82>
   1a7be:	4313      	orrs	r3, r2
   1a7c0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a7c2:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a7c4:	f003 0303 	and.w	r3, r3, #3
   1a7c8:	4303      	orrs	r3, r0
   1a7ca:	602b      	str	r3, [r5, #0]
}
   1a7cc:	e7eb      	b.n	1a7a6 <queue_insert+0xa0>

0001a7ce <z_queue_node_peek>:
{
   1a7ce:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1a7d0:	4604      	mov	r4, r0
   1a7d2:	b130      	cbz	r0, 1a7e2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a7d4:	6802      	ldr	r2, [r0, #0]
   1a7d6:	0793      	lsls	r3, r2, #30
   1a7d8:	d003      	beq.n	1a7e2 <z_queue_node_peek+0x14>
		ret = anode->data;
   1a7da:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1a7dc:	b109      	cbz	r1, 1a7e2 <z_queue_node_peek+0x14>
			k_free(anode);
   1a7de:	f000 fbfe 	bl	1afde <k_free>
}
   1a7e2:	4620      	mov	r0, r4
   1a7e4:	bd10      	pop	{r4, pc}

0001a7e6 <z_impl_k_queue_init>:
	list->head = NULL;
   1a7e6:	2300      	movs	r3, #0
	list->tail = NULL;
   1a7e8:	e9c0 3300 	strd	r3, r3, [r0]
   1a7ec:	f100 0308 	add.w	r3, r0, #8
   1a7f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1a7f4:	f100 0310 	add.w	r3, r0, #16
   1a7f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1a7fc:	4770      	bx	lr

0001a7fe <k_queue_append>:
{
   1a7fe:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1a800:	2301      	movs	r3, #1
   1a802:	9300      	str	r3, [sp, #0]
   1a804:	2300      	movs	r3, #0
{
   1a806:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1a808:	4619      	mov	r1, r3
   1a80a:	f7ff ff7c 	bl	1a706 <queue_insert>
}
   1a80e:	b003      	add	sp, #12
   1a810:	f85d fb04 	ldr.w	pc, [sp], #4

0001a814 <k_queue_prepend>:
{
   1a814:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1a816:	2300      	movs	r3, #0
{
   1a818:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1a81a:	9300      	str	r3, [sp, #0]
   1a81c:	4619      	mov	r1, r3
   1a81e:	f7ff ff72 	bl	1a706 <queue_insert>
}
   1a822:	b003      	add	sp, #12
   1a824:	f85d fb04 	ldr.w	pc, [sp], #4

0001a828 <k_queue_append_list>:
{
   1a828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a82c:	4605      	mov	r5, r0
   1a82e:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1a830:	460c      	mov	r4, r1
   1a832:	b391      	cbz	r1, 1a89a <k_queue_append_list+0x72>
   1a834:	b38a      	cbz	r2, 1a89a <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a836:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1a83a:	f04f 0320 	mov.w	r3, #32
   1a83e:	f3ef 8811 	mrs	r8, BASEPRI
   1a842:	f383 8812 	msr	BASEPRI_MAX, r3
   1a846:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1a84a:	4638      	mov	r0, r7
   1a84c:	f000 f9c1 	bl	1abd2 <z_unpend_first_thread>
   1a850:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1a854:	b920      	cbnz	r0, 1a860 <k_queue_append_list+0x38>
	return list->tail;
   1a856:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1a858:	b9ca      	cbnz	r2, 1a88e <k_queue_append_list+0x66>
	list->head = node;
   1a85a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1a85c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1a85e:	e00a      	b.n	1a876 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   1a860:	6144      	str	r4, [r0, #20]
   1a862:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1a866:	f000 f958 	bl	1ab1a <z_ready_thread>
		head = *(void **)head;
   1a86a:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1a86c:	4638      	mov	r0, r7
   1a86e:	f000 f9b0 	bl	1abd2 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1a872:	2c00      	cmp	r4, #0
   1a874:	d1ee      	bne.n	1a854 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1a876:	2104      	movs	r1, #4
   1a878:	f105 0010 	add.w	r0, r5, #16
   1a87c:	f000 fba1 	bl	1afc2 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1a880:	4638      	mov	r0, r7
   1a882:	4641      	mov	r1, r8
   1a884:	f7fb fe50 	bl	16528 <z_reschedule>
	return 0;
   1a888:	2000      	movs	r0, #0
}
   1a88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1a88e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1a890:	f003 0303 	and.w	r3, r3, #3
   1a894:	431c      	orrs	r4, r3
   1a896:	6014      	str	r4, [r2, #0]
}
   1a898:	e7e0      	b.n	1a85c <k_queue_append_list+0x34>
		return -EINVAL;
   1a89a:	f06f 0015 	mvn.w	r0, #21
   1a89e:	e7f4      	b.n	1a88a <k_queue_append_list+0x62>

0001a8a0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1a8a0:	b15a      	cbz	r2, 1a8ba <z_impl_k_sem_init+0x1a>
   1a8a2:	428a      	cmp	r2, r1
   1a8a4:	d309      	bcc.n	1a8ba <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1a8a6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1a8aa:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1a8ae:	e9c0 0000 	strd	r0, r0, [r0]
   1a8b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1a8b6:	2000      	movs	r0, #0
   1a8b8:	4770      	bx	lr
		return -EINVAL;
   1a8ba:	f06f 0015 	mvn.w	r0, #21
}
   1a8be:	4770      	bx	lr

0001a8c0 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1a8c0:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1a8c2:	2301      	movs	r3, #1
   1a8c4:	408b      	lsls	r3, r1
   1a8c6:	ea22 0303 	bic.w	r3, r2, r3
   1a8ca:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1a8cc:	fa22 f001 	lsr.w	r0, r2, r1
}
   1a8d0:	f000 0001 	and.w	r0, r0, #1
   1a8d4:	4770      	bx	lr

0001a8d6 <unschedule_locked>:
{
   1a8d6:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1a8d8:	2103      	movs	r1, #3
{
   1a8da:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1a8dc:	300c      	adds	r0, #12
   1a8de:	f7ff ffef 	bl	1a8c0 <flag_test_and_clear>
   1a8e2:	4604      	mov	r4, r0
   1a8e4:	b118      	cbz	r0, 1a8ee <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1a8e6:	f105 0010 	add.w	r0, r5, #16
   1a8ea:	f000 f9b7 	bl	1ac5c <z_abort_timeout>
}
   1a8ee:	4620      	mov	r0, r4
   1a8f0:	bd38      	pop	{r3, r4, r5, pc}

0001a8f2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1a8f2:	b120      	cbz	r0, 1a8fe <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1a8f4:	2200      	movs	r2, #0
   1a8f6:	4611      	mov	r1, r2
   1a8f8:	3088      	adds	r0, #136	; 0x88
   1a8fa:	f000 b992 	b.w	1ac22 <z_sched_wake>
}
   1a8fe:	4770      	bx	lr

0001a900 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1a900:	68c3      	ldr	r3, [r0, #12]
{
   1a902:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a904:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1a908:	079b      	lsls	r3, r3, #30
{
   1a90a:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a90c:	d416      	bmi.n	1a93c <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1a90e:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1a910:	2102      	movs	r1, #2
   1a912:	300c      	adds	r0, #12
   1a914:	f7ff ffd4 	bl	1a8c0 <flag_test_and_clear>
   1a918:	b180      	cbz	r0, 1a93c <cancel_async_locked+0x3c>
	return list->head;
   1a91a:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a91e:	b16a      	cbz	r2, 1a93c <cancel_async_locked+0x3c>
   1a920:	4294      	cmp	r4, r2
   1a922:	d11b      	bne.n	1a95c <cancel_async_locked+0x5c>
	return node->next;
   1a924:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   1a926:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   1a92a:	b98d      	cbnz	r5, 1a950 <cancel_async_locked+0x50>
   1a92c:	428c      	cmp	r4, r1
	list->head = node;
   1a92e:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1a932:	d101      	bne.n	1a938 <cancel_async_locked+0x38>
	list->tail = node;
   1a934:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   1a938:	2300      	movs	r3, #0
   1a93a:	6023      	str	r3, [r4, #0]
	return *flagp;
   1a93c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1a93e:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1a942:	bf1e      	ittt	ne
   1a944:	f043 0302 	orrne.w	r3, r3, #2
   1a948:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1a94a:	f003 000f 	andne.w	r0, r3, #15
}
   1a94e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   1a950:	428c      	cmp	r4, r1
	parent->next = child;
   1a952:	602a      	str	r2, [r5, #0]
	list->tail = node;
   1a954:	bf08      	it	eq
   1a956:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   1a95a:	e7ed      	b.n	1a938 <cancel_async_locked+0x38>
	return node->next;
   1a95c:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a95e:	6812      	ldr	r2, [r2, #0]
   1a960:	e7dd      	b.n	1a91e <cancel_async_locked+0x1e>

0001a962 <work_timeout>:
{
   1a962:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a964:	4604      	mov	r4, r0
   1a966:	f04f 0320 	mov.w	r3, #32
   1a96a:	f3ef 8511 	mrs	r5, BASEPRI
   1a96e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a972:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1a976:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a978:	f1a0 0610 	sub.w	r6, r0, #16
   1a97c:	2103      	movs	r1, #3
   1a97e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1a980:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1a982:	f7ff ff9d 	bl	1a8c0 <flag_test_and_clear>
   1a986:	b128      	cbz	r0, 1a994 <work_timeout+0x32>
		queue = dw->queue;
   1a988:	69a3      	ldr	r3, [r4, #24]
   1a98a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1a98c:	a901      	add	r1, sp, #4
   1a98e:	4630      	mov	r0, r6
   1a990:	f7fb fc92 	bl	162b8 <submit_to_queue_locked>
	__asm__ volatile(
   1a994:	f385 8811 	msr	BASEPRI, r5
   1a998:	f3bf 8f6f 	isb	sy
}
   1a99c:	b002      	add	sp, #8
   1a99e:	bd70      	pop	{r4, r5, r6, pc}

0001a9a0 <k_work_init>:
{
   1a9a0:	b538      	push	{r3, r4, r5, lr}
   1a9a2:	4604      	mov	r4, r0
   1a9a4:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1a9a6:	2210      	movs	r2, #16
   1a9a8:	2100      	movs	r1, #0
   1a9aa:	f7fd f8b2 	bl	17b12 <memset>
   1a9ae:	6065      	str	r5, [r4, #4]
}
   1a9b0:	bd38      	pop	{r3, r4, r5, pc}

0001a9b2 <k_work_submit_to_queue>:
{
   1a9b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a9b4:	9001      	str	r0, [sp, #4]
   1a9b6:	4608      	mov	r0, r1
	__asm__ volatile(
   1a9b8:	f04f 0320 	mov.w	r3, #32
   1a9bc:	f3ef 8511 	mrs	r5, BASEPRI
   1a9c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9c4:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1a9c8:	a901      	add	r1, sp, #4
   1a9ca:	f7fb fc75 	bl	162b8 <submit_to_queue_locked>
   1a9ce:	4604      	mov	r4, r0
	__asm__ volatile(
   1a9d0:	f385 8811 	msr	BASEPRI, r5
   1a9d4:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1a9d8:	2800      	cmp	r0, #0
   1a9da:	dd04      	ble.n	1a9e6 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1a9dc:	f7fc f80c 	bl	169f8 <z_impl_k_is_preempt_thread>
   1a9e0:	b108      	cbz	r0, 1a9e6 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1a9e2:	f7fb ff61 	bl	168a8 <z_impl_k_yield>
}
   1a9e6:	4620      	mov	r0, r4
   1a9e8:	b003      	add	sp, #12
   1a9ea:	bd30      	pop	{r4, r5, pc}

0001a9ec <k_work_init_delayable>:
{
   1a9ec:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1a9ee:	2230      	movs	r2, #48	; 0x30
{
   1a9f0:	4604      	mov	r4, r0
   1a9f2:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1a9f4:	2100      	movs	r1, #0
   1a9f6:	f7fd f88c 	bl	17b12 <memset>
   1a9fa:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a9fe:	6065      	str	r5, [r4, #4]
   1aa00:	60e3      	str	r3, [r4, #12]
}
   1aa02:	bd38      	pop	{r3, r4, r5, pc}

0001aa04 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1aa04:	b538      	push	{r3, r4, r5, lr}
   1aa06:	4604      	mov	r4, r0
	__asm__ volatile(
   1aa08:	f04f 0320 	mov.w	r3, #32
   1aa0c:	f3ef 8511 	mrs	r5, BASEPRI
   1aa10:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa14:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1aa18:	f7ff ff5d 	bl	1a8d6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1aa1c:	4620      	mov	r0, r4
   1aa1e:	f7ff ff6f 	bl	1a900 <cancel_async_locked>
	__asm__ volatile(
   1aa22:	f385 8811 	msr	BASEPRI, r5
   1aa26:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1aa2a:	bd38      	pop	{r3, r4, r5, pc}

0001aa2c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa2e:	4604      	mov	r4, r0
   1aa30:	460d      	mov	r5, r1
	__asm__ volatile(
   1aa32:	f04f 0320 	mov.w	r3, #32
   1aa36:	f3ef 8711 	mrs	r7, BASEPRI
   1aa3a:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa3e:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   1aa42:	68c3      	ldr	r3, [r0, #12]
   1aa44:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1aa48:	2b00      	cmp	r3, #0
   1aa4a:	bf14      	ite	ne
   1aa4c:	2601      	movne	r6, #1
   1aa4e:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1aa50:	d009      	beq.n	1aa66 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   1aa52:	f7ff ff40 	bl	1a8d6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1aa56:	4620      	mov	r0, r4
   1aa58:	f7ff ff52 	bl	1a900 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1aa5c:	4629      	mov	r1, r5
   1aa5e:	4620      	mov	r0, r4
   1aa60:	f7fb fc0c 	bl	1627c <cancel_sync_locked>
   1aa64:	4603      	mov	r3, r0
	__asm__ volatile(
   1aa66:	f387 8811 	msr	BASEPRI, r7
   1aa6a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1aa6e:	b13b      	cbz	r3, 1aa80 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   1aa70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1aa74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa78:	f105 0008 	add.w	r0, r5, #8
   1aa7c:	f7fb fb26 	bl	160cc <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1aa80:	4630      	mov	r0, r6
   1aa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001aa84 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1aa84:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1aa88:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1aa8a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1aa8c:	2300      	movs	r3, #0
	node->prev = NULL;
   1aa8e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1aa92:	4770      	bx	lr

0001aa94 <unpend_thread_no_timeout>:
{
   1aa94:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1aa96:	f7ff fff5 	bl	1aa84 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1aa9a:	7b43      	ldrb	r3, [r0, #13]
   1aa9c:	f023 0302 	bic.w	r3, r3, #2
   1aaa0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1aaa2:	2300      	movs	r3, #0
   1aaa4:	6083      	str	r3, [r0, #8]
}
   1aaa6:	bd08      	pop	{r3, pc}

0001aaa8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1aaa8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1aaac:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1aab0:	4283      	cmp	r3, r0
		return b2 - b1;
   1aab2:	bf14      	ite	ne
   1aab4:	1ac0      	subne	r0, r0, r3
	return 0;
   1aab6:	2000      	moveq	r0, #0
}
   1aab8:	4770      	bx	lr

0001aaba <z_unpend_thread>:
{
   1aaba:	b510      	push	{r4, lr}
	__asm__ volatile(
   1aabc:	f04f 0320 	mov.w	r3, #32
   1aac0:	f3ef 8411 	mrs	r4, BASEPRI
   1aac4:	f383 8812 	msr	BASEPRI_MAX, r3
   1aac8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1aacc:	f7ff ffe2 	bl	1aa94 <unpend_thread_no_timeout>
	__asm__ volatile(
   1aad0:	f384 8811 	msr	BASEPRI, r4
   1aad4:	f3bf 8f6f 	isb	sy
}
   1aad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1aadc:	3018      	adds	r0, #24
   1aade:	f000 b8bd 	b.w	1ac5c <z_abort_timeout>

0001aae2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1aae2:	4603      	mov	r3, r0
   1aae4:	b920      	cbnz	r0, 1aaf0 <z_reschedule_irqlock+0xe>
   1aae6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1aaea:	b90a      	cbnz	r2, 1aaf0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1aaec:	f7e7 bbf6 	b.w	22dc <arch_swap>
   1aaf0:	f383 8811 	msr	BASEPRI, r3
   1aaf4:	f3bf 8f6f 	isb	sy
}
   1aaf8:	4770      	bx	lr

0001aafa <z_reschedule_unlocked>:
	__asm__ volatile(
   1aafa:	f04f 0320 	mov.w	r3, #32
   1aafe:	f3ef 8011 	mrs	r0, BASEPRI
   1ab02:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab06:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ab0a:	f7ff bfea 	b.w	1aae2 <z_reschedule_irqlock>

0001ab0e <z_priq_dumb_best>:
{
   1ab0e:	4603      	mov	r3, r0
	return list->head == list;
   1ab10:	6800      	ldr	r0, [r0, #0]
}
   1ab12:	4283      	cmp	r3, r0
   1ab14:	bf08      	it	eq
   1ab16:	2000      	moveq	r0, #0
   1ab18:	4770      	bx	lr

0001ab1a <z_ready_thread>:
{
   1ab1a:	b510      	push	{r4, lr}
   1ab1c:	f04f 0320 	mov.w	r3, #32
   1ab20:	f3ef 8411 	mrs	r4, BASEPRI
   1ab24:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab28:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1ab2c:	f7fb fdbc 	bl	166a8 <ready_thread>
	__asm__ volatile(
   1ab30:	f384 8811 	msr	BASEPRI, r4
   1ab34:	f3bf 8f6f 	isb	sy
}
   1ab38:	bd10      	pop	{r4, pc}

0001ab3a <z_thread_timeout>:
{
   1ab3a:	b510      	push	{r4, lr}
   1ab3c:	4601      	mov	r1, r0
	__asm__ volatile(
   1ab3e:	f04f 0320 	mov.w	r3, #32
   1ab42:	f3ef 8411 	mrs	r4, BASEPRI
   1ab46:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab4a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1ab4e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1ab52:	f013 0f28 	tst.w	r3, #40	; 0x28
   1ab56:	d10d      	bne.n	1ab74 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1ab58:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1ab5c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1ab5e:	b10b      	cbz	r3, 1ab64 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1ab60:	f7ff ff98 	bl	1aa94 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1ab64:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1ab68:	f023 0314 	bic.w	r3, r3, #20
   1ab6c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1ab70:	f7fb fd9a 	bl	166a8 <ready_thread>
	__asm__ volatile(
   1ab74:	f384 8811 	msr	BASEPRI, r4
   1ab78:	f3bf 8f6f 	isb	sy
}
   1ab7c:	bd10      	pop	{r4, pc}

0001ab7e <add_to_waitq_locked>:
{
   1ab7e:	b538      	push	{r3, r4, r5, lr}
   1ab80:	4604      	mov	r4, r0
   1ab82:	460d      	mov	r5, r1
	unready_thread(thread);
   1ab84:	f7fb fde4 	bl	16750 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1ab88:	7b63      	ldrb	r3, [r4, #13]
   1ab8a:	f043 0302 	orr.w	r3, r3, #2
   1ab8e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1ab90:	b195      	cbz	r5, 1abb8 <add_to_waitq_locked+0x3a>
   1ab92:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1ab94:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab96:	429d      	cmp	r5, r3
   1ab98:	d015      	beq.n	1abc6 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ab9a:	b1a3      	cbz	r3, 1abc6 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   1ab9c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1aba0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1aba4:	4291      	cmp	r1, r2
   1aba6:	d008      	beq.n	1abba <add_to_waitq_locked+0x3c>
		return b2 - b1;
   1aba8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1abaa:	2a00      	cmp	r2, #0
   1abac:	dd05      	ble.n	1abba <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1abae:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1abb0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1abb4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1abb6:	605c      	str	r4, [r3, #4]
}
   1abb8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1abba:	686a      	ldr	r2, [r5, #4]
   1abbc:	4293      	cmp	r3, r2
   1abbe:	d002      	beq.n	1abc6 <add_to_waitq_locked+0x48>
   1abc0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1abc2:	2b00      	cmp	r3, #0
   1abc4:	d1ec      	bne.n	1aba0 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   1abc6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1abc8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1abcc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1abce:	606c      	str	r4, [r5, #4]
}
   1abd0:	e7f2      	b.n	1abb8 <add_to_waitq_locked+0x3a>

0001abd2 <z_unpend_first_thread>:
{
   1abd2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1abd4:	f04f 0320 	mov.w	r3, #32
   1abd8:	f3ef 8511 	mrs	r5, BASEPRI
   1abdc:	f383 8812 	msr	BASEPRI_MAX, r3
   1abe0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1abe4:	f7ff ff93 	bl	1ab0e <z_priq_dumb_best>
		if (thread != NULL) {
   1abe8:	4604      	mov	r4, r0
   1abea:	b120      	cbz	r0, 1abf6 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1abec:	f7ff ff52 	bl	1aa94 <unpend_thread_no_timeout>
   1abf0:	3018      	adds	r0, #24
   1abf2:	f000 f833 	bl	1ac5c <z_abort_timeout>
	__asm__ volatile(
   1abf6:	f385 8811 	msr	BASEPRI, r5
   1abfa:	f3bf 8f6f 	isb	sy
}
   1abfe:	4620      	mov	r0, r4
   1ac00:	bd38      	pop	{r3, r4, r5, pc}

0001ac02 <z_unpend_all>:
{
   1ac02:	b538      	push	{r3, r4, r5, lr}
   1ac04:	4605      	mov	r5, r0
	int need_sched = 0;
   1ac06:	2000      	movs	r0, #0
	return list->head == list;
   1ac08:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ac0a:	42a5      	cmp	r5, r4
   1ac0c:	d000      	beq.n	1ac10 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ac0e:	b904      	cbnz	r4, 1ac12 <z_unpend_all+0x10>
}
   1ac10:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1ac12:	4620      	mov	r0, r4
   1ac14:	f7ff ff51 	bl	1aaba <z_unpend_thread>
		z_ready_thread(thread);
   1ac18:	4620      	mov	r0, r4
   1ac1a:	f7ff ff7e 	bl	1ab1a <z_ready_thread>
		need_sched = 1;
   1ac1e:	2001      	movs	r0, #1
   1ac20:	e7f2      	b.n	1ac08 <z_unpend_all+0x6>

0001ac22 <z_sched_wake>:
{
   1ac22:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ac24:	f04f 0320 	mov.w	r3, #32
   1ac28:	f3ef 8511 	mrs	r5, BASEPRI
   1ac2c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac30:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1ac34:	f7ff ff6b 	bl	1ab0e <z_priq_dumb_best>
		if (thread != NULL) {
   1ac38:	4604      	mov	r4, r0
   1ac3a:	b150      	cbz	r0, 1ac52 <z_sched_wake+0x30>
   1ac3c:	67c1      	str	r1, [r0, #124]	; 0x7c
   1ac3e:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1ac40:	f7ff ff28 	bl	1aa94 <unpend_thread_no_timeout>
   1ac44:	3018      	adds	r0, #24
   1ac46:	f000 f809 	bl	1ac5c <z_abort_timeout>
			ready_thread(thread);
   1ac4a:	4620      	mov	r0, r4
   1ac4c:	f7fb fd2c 	bl	166a8 <ready_thread>
			ret = true;
   1ac50:	2001      	movs	r0, #1
	__asm__ volatile(
   1ac52:	f385 8811 	msr	BASEPRI, r5
   1ac56:	f3bf 8f6f 	isb	sy
}
   1ac5a:	bd38      	pop	{r3, r4, r5, pc}

0001ac5c <z_abort_timeout>:
{
   1ac5c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ac5e:	f04f 0220 	mov.w	r2, #32
   1ac62:	f3ef 8411 	mrs	r4, BASEPRI
   1ac66:	f382 8812 	msr	BASEPRI_MAX, r2
   1ac6a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1ac6e:	6803      	ldr	r3, [r0, #0]
   1ac70:	b13b      	cbz	r3, 1ac82 <z_abort_timeout+0x26>
			remove_timeout(to);
   1ac72:	f7fb ff81 	bl	16b78 <remove_timeout>
			ret = 0;
   1ac76:	2000      	movs	r0, #0
	__asm__ volatile(
   1ac78:	f384 8811 	msr	BASEPRI, r4
   1ac7c:	f3bf 8f6f 	isb	sy
}
   1ac80:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1ac82:	f06f 0015 	mvn.w	r0, #21
   1ac86:	e7f7      	b.n	1ac78 <z_abort_timeout+0x1c>

0001ac88 <z_get_next_timeout_expiry>:
{
   1ac88:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ac8a:	f04f 0320 	mov.w	r3, #32
   1ac8e:	f3ef 8411 	mrs	r4, BASEPRI
   1ac92:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac96:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1ac9a:	f7fb ff45 	bl	16b28 <next_timeout>
	__asm__ volatile(
   1ac9e:	f384 8811 	msr	BASEPRI, r4
   1aca2:	f3bf 8f6f 	isb	sy
}
   1aca6:	bd10      	pop	{r4, pc}

0001aca8 <z_set_timeout_expiry>:
{
   1aca8:	b570      	push	{r4, r5, r6, lr}
   1acaa:	4604      	mov	r4, r0
   1acac:	460d      	mov	r5, r1
	__asm__ volatile(
   1acae:	f04f 0320 	mov.w	r3, #32
   1acb2:	f3ef 8611 	mrs	r6, BASEPRI
   1acb6:	f383 8812 	msr	BASEPRI_MAX, r3
   1acba:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1acbe:	f7fb ff33 	bl	16b28 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1acc2:	2801      	cmp	r0, #1
   1acc4:	dd05      	ble.n	1acd2 <z_set_timeout_expiry+0x2a>
   1acc6:	42a0      	cmp	r0, r4
   1acc8:	db03      	blt.n	1acd2 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1acca:	4629      	mov	r1, r5
   1accc:	4620      	mov	r0, r4
   1acce:	f7f9 fe13 	bl	148f8 <sys_clock_set_timeout>
	__asm__ volatile(
   1acd2:	f386 8811 	msr	BASEPRI, r6
   1acd6:	f3bf 8f6f 	isb	sy
}
   1acda:	bd70      	pop	{r4, r5, r6, pc}

0001acdc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1acdc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1acde:	f7fc f83b 	bl	16d58 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1ace2:	bd08      	pop	{r3, pc}

0001ace4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1ace4:	f7fc b838 	b.w	16d58 <sys_clock_tick_get>

0001ace8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1ace8:	b108      	cbz	r0, 1acee <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1acea:	f7e7 bdd1 	b.w	2890 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1acee:	4770      	bx	lr

0001acf0 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1acf0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1acf4:	bf08      	it	eq
   1acf6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1acfa:	b538      	push	{r3, r4, r5, lr}
   1acfc:	4605      	mov	r5, r0
   1acfe:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ad00:	d01d      	beq.n	1ad3e <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ad02:	ea51 0300 	orrs.w	r3, r1, r0
   1ad06:	d103      	bne.n	1ad10 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1ad08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1ad0c:	f7fc b824 	b.w	16d58 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1ad10:	f06f 0301 	mvn.w	r3, #1
   1ad14:	1a18      	subs	r0, r3, r0
   1ad16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ad1a:	eb63 0101 	sbc.w	r1, r3, r1
   1ad1e:	2900      	cmp	r1, #0
   1ad20:	da0c      	bge.n	1ad3c <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   1ad22:	f7fc f819 	bl	16d58 <sys_clock_tick_get>
   1ad26:	2d01      	cmp	r5, #1
   1ad28:	4622      	mov	r2, r4
   1ad2a:	f174 0400 	sbcs.w	r4, r4, #0
   1ad2e:	462b      	mov	r3, r5
   1ad30:	bfbc      	itt	lt
   1ad32:	2301      	movlt	r3, #1
   1ad34:	2200      	movlt	r2, #0
   1ad36:	1818      	adds	r0, r3, r0
   1ad38:	eb41 0102 	adc.w	r1, r1, r2
}
   1ad3c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1ad3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ad42:	4601      	mov	r1, r0
   1ad44:	e7fa      	b.n	1ad3c <sys_clock_timeout_end_calc+0x4c>

0001ad46 <add_event>:
{
   1ad46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad48:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ad4a:	e9d0 1300 	ldrd	r1, r3, [r0]
   1ad4e:	4288      	cmp	r0, r1
   1ad50:	4604      	mov	r4, r0
   1ad52:	d00d      	beq.n	1ad70 <add_event+0x2a>
	if ((pending == NULL) ||
   1ad54:	b163      	cbz	r3, 1ad70 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1ad56:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ad58:	b100      	cbz	r0, 1ad5c <add_event+0x16>
   1ad5a:	3860      	subs	r0, #96	; 0x60
   1ad5c:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1ad60:	4639      	mov	r1, r7
   1ad62:	f7ff fea1 	bl	1aaa8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1ad66:	2800      	cmp	r0, #0
   1ad68:	dc02      	bgt.n	1ad70 <add_event+0x2a>
	return list->head == list;
   1ad6a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ad6c:	42b4      	cmp	r4, r6
   1ad6e:	d109      	bne.n	1ad84 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   1ad70:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1ad72:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1ad76:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1ad78:	6065      	str	r5, [r4, #4]
}
   1ad7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1ad7c:	6863      	ldr	r3, [r4, #4]
   1ad7e:	42b3      	cmp	r3, r6
   1ad80:	d0f6      	beq.n	1ad70 <add_event+0x2a>
   1ad82:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ad84:	2e00      	cmp	r6, #0
   1ad86:	d0f3      	beq.n	1ad70 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   1ad88:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1ad8a:	b101      	cbz	r1, 1ad8e <add_event+0x48>
   1ad8c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1ad8e:	4638      	mov	r0, r7
   1ad90:	f7ff fe8a 	bl	1aaa8 <z_sched_prio_cmp>
   1ad94:	2800      	cmp	r0, #0
   1ad96:	ddf1      	ble.n	1ad7c <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   1ad98:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1ad9a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1ad9e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1ada0:	6075      	str	r5, [r6, #4]
			return;
   1ada2:	e7ea      	b.n	1ad7a <add_event+0x34>

0001ada4 <register_events>:
{
   1ada4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1ada8:	2500      	movs	r5, #0
{
   1adaa:	468b      	mov	fp, r1
   1adac:	4614      	mov	r4, r2
   1adae:	461f      	mov	r7, r3
   1adb0:	4682      	mov	sl, r0
	int events_registered = 0;
   1adb2:	462e      	mov	r6, r5
	event->poller = NULL;
   1adb4:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1adb6:	455d      	cmp	r5, fp
   1adb8:	db02      	blt.n	1adc0 <register_events+0x1c>
}
   1adba:	4630      	mov	r0, r6
   1adbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1adc0:	f04f 0320 	mov.w	r3, #32
   1adc4:	f3ef 8911 	mrs	r9, BASEPRI
   1adc8:	f383 8812 	msr	BASEPRI_MAX, r3
   1adcc:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1add0:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1add4:	f003 031f 	and.w	r3, r3, #31
   1add8:	3b01      	subs	r3, #1
   1adda:	2b07      	cmp	r3, #7
   1addc:	d80f      	bhi.n	1adfe <register_events+0x5a>
   1adde:	e8df f003 	tbb	[pc, r3]
   1ade2:	041e      	.short	0x041e
   1ade4:	0e0e0a0e 	.word	0x0e0e0a0e
   1ade8:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   1adea:	f8da 3010 	ldr.w	r3, [sl, #16]
   1adee:	689b      	ldr	r3, [r3, #8]
   1adf0:	b12b      	cbz	r3, 1adfe <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1adf2:	2302      	movs	r3, #2
   1adf4:	e020      	b.n	1ae38 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1adf6:	f8da 3010 	ldr.w	r3, [sl, #16]
   1adfa:	681b      	ldr	r3, [r3, #0]
   1adfc:	bb8b      	cbnz	r3, 1ae62 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1adfe:	bb47      	cbnz	r7, 1ae52 <register_events+0xae>
   1ae00:	7823      	ldrb	r3, [r4, #0]
   1ae02:	b333      	cbz	r3, 1ae52 <register_events+0xae>
	switch (event->type) {
   1ae04:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1ae08:	f003 031f 	and.w	r3, r3, #31
   1ae0c:	3b01      	subs	r3, #1
   1ae0e:	2b07      	cmp	r3, #7
   1ae10:	d830      	bhi.n	1ae74 <register_events+0xd0>
   1ae12:	e8df f003 	tbb	[pc, r3]
   1ae16:	2833      	.short	0x2833
   1ae18:	2f2f282f 	.word	0x2f2f282f
   1ae1c:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   1ae1e:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ae22:	689b      	ldr	r3, [r3, #8]
   1ae24:	2b00      	cmp	r3, #0
   1ae26:	d0ea      	beq.n	1adfe <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1ae28:	2301      	movs	r3, #1
   1ae2a:	e005      	b.n	1ae38 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1ae2c:	f8da 3010 	ldr.w	r3, [sl, #16]
   1ae30:	6a1b      	ldr	r3, [r3, #32]
   1ae32:	2b00      	cmp	r3, #0
   1ae34:	d0e3      	beq.n	1adfe <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1ae36:	2310      	movs	r3, #16
	event->state |= state;
   1ae38:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1ae3c:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1ae40:	f3c2 3145 	ubfx	r1, r2, #13, #6
   1ae44:	430b      	orrs	r3, r1
   1ae46:	f363 3252 	bfi	r2, r3, #13, #6
   1ae4a:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1ae4e:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1ae52:	f389 8811 	msr	BASEPRI, r9
   1ae56:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1ae5a:	3501      	adds	r5, #1
   1ae5c:	f10a 0a14 	add.w	sl, sl, #20
   1ae60:	e7a9      	b.n	1adb6 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1ae62:	2304      	movs	r3, #4
   1ae64:	e7e8      	b.n	1ae38 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1ae66:	f8da 0010 	ldr.w	r0, [sl, #16]
   1ae6a:	4622      	mov	r2, r4
   1ae6c:	4651      	mov	r1, sl
   1ae6e:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1ae70:	f7ff ff69 	bl	1ad46 <add_event>
	event->poller = poller;
   1ae74:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1ae78:	3601      	adds	r6, #1
   1ae7a:	e7ea      	b.n	1ae52 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1ae7c:	f8da 0010 	ldr.w	r0, [sl, #16]
   1ae80:	4622      	mov	r2, r4
   1ae82:	4651      	mov	r1, sl
   1ae84:	e7f4      	b.n	1ae70 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1ae86:	f8da 0010 	ldr.w	r0, [sl, #16]
   1ae8a:	4622      	mov	r2, r4
   1ae8c:	4651      	mov	r1, sl
   1ae8e:	3024      	adds	r0, #36	; 0x24
   1ae90:	e7ee      	b.n	1ae70 <register_events+0xcc>

0001ae92 <signal_poll_event>:
{
   1ae92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1ae96:	6884      	ldr	r4, [r0, #8]
{
   1ae98:	4605      	mov	r5, r0
   1ae9a:	460e      	mov	r6, r1
	if (poller != NULL) {
   1ae9c:	b144      	cbz	r4, 1aeb0 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1ae9e:	7863      	ldrb	r3, [r4, #1]
   1aea0:	2b01      	cmp	r3, #1
   1aea2:	d136      	bne.n	1af12 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   1aea4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1aea8:	f013 0302 	ands.w	r3, r3, #2
   1aeac:	d10a      	bne.n	1aec4 <signal_poll_event+0x32>
		poller->is_polling = false;
   1aeae:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1aeb0:	68eb      	ldr	r3, [r5, #12]
   1aeb2:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1aeb6:	430e      	orrs	r6, r1
	event->poller = NULL;
   1aeb8:	2000      	movs	r0, #0
	event->state |= state;
   1aeba:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1aebe:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1aec0:	60eb      	str	r3, [r5, #12]
	return retcode;
   1aec2:	e00b      	b.n	1aedc <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   1aec4:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1aec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1aecc:	bf08      	it	eq
   1aece:	f112 0f02 	cmneq.w	r2, #2
   1aed2:	d105      	bne.n	1aee0 <signal_poll_event+0x4e>
		poller->is_polling = false;
   1aed4:	2300      	movs	r3, #0
   1aed6:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1aed8:	f06f 000a 	mvn.w	r0, #10
}
   1aedc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1aee0:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1aee4:	4640      	mov	r0, r8
   1aee6:	f7ff fde8 	bl	1aaba <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1aeea:	2e08      	cmp	r6, #8
   1aeec:	bf0c      	ite	eq
   1aeee:	f06f 0303 	mvneq.w	r3, #3
   1aef2:	2300      	movne	r3, #0
   1aef4:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1aef6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1aefa:	06db      	lsls	r3, r3, #27
   1aefc:	d102      	bne.n	1af04 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   1aefe:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1af02:	b10f      	cbz	r7, 1af08 <signal_poll_event+0x76>
		poller->is_polling = false;
   1af04:	2300      	movs	r3, #0
   1af06:	e7d2      	b.n	1aeae <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1af08:	4640      	mov	r0, r8
   1af0a:	f7ff fe06 	bl	1ab1a <z_ready_thread>
		poller->is_polling = false;
   1af0e:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1af10:	e7ce      	b.n	1aeb0 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1af12:	2b02      	cmp	r3, #2
   1af14:	d1f6      	bne.n	1af04 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1af16:	7823      	ldrb	r3, [r4, #0]
   1af18:	2b00      	cmp	r3, #0
   1af1a:	d0c9      	beq.n	1aeb0 <signal_poll_event+0x1e>
   1af1c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1af20:	2f00      	cmp	r7, #0
   1af22:	d0f4      	beq.n	1af0e <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1af24:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1af28:	f1a4 0914 	sub.w	r9, r4, #20
   1af2c:	f104 0014 	add.w	r0, r4, #20
   1af30:	f7ff fe94 	bl	1ac5c <z_abort_timeout>
		twork->poll_result = 0;
   1af34:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1af38:	4649      	mov	r1, r9
   1af3a:	4638      	mov	r0, r7
   1af3c:	f7ff fd39 	bl	1a9b2 <k_work_submit_to_queue>
		poller->is_polling = false;
   1af40:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1af44:	e7b4      	b.n	1aeb0 <signal_poll_event+0x1e>

0001af46 <clear_event_registrations>:
	while (num_events--) {
   1af46:	2314      	movs	r3, #20
{
   1af48:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af4a:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1af4e:	2400      	movs	r4, #0
   1af50:	2601      	movs	r6, #1
	while (num_events--) {
   1af52:	b901      	cbnz	r1, 1af56 <clear_event_registrations+0x10>
}
   1af54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1af56:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1af5a:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1af5e:	f003 031f 	and.w	r3, r3, #31
   1af62:	2b08      	cmp	r3, #8
   1af64:	f1a0 0714 	sub.w	r7, r0, #20
   1af68:	d80d      	bhi.n	1af86 <clear_event_registrations+0x40>
   1af6a:	fa06 f303 	lsl.w	r3, r6, r3
   1af6e:	f413 7f8b 	tst.w	r3, #278	; 0x116
   1af72:	d008      	beq.n	1af86 <clear_event_registrations+0x40>
	return node->next != NULL;
   1af74:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1af78:	b12b      	cbz	r3, 1af86 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1af7a:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1af7e:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1af80:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1af82:	e940 4405 	strd	r4, r4, [r0, #-20]
   1af86:	f382 8811 	msr	BASEPRI, r2
   1af8a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1af8e:	f04f 0320 	mov.w	r3, #32
   1af92:	f3ef 8211 	mrs	r2, BASEPRI
   1af96:	f383 8812 	msr	BASEPRI_MAX, r3
   1af9a:	f3bf 8f6f 	isb	sy
   1af9e:	3901      	subs	r1, #1
   1afa0:	4638      	mov	r0, r7
   1afa2:	e7d6      	b.n	1af52 <clear_event_registrations+0xc>

0001afa4 <k_poll_event_init>:
{
   1afa4:	b510      	push	{r4, lr}
	event->type = type;
   1afa6:	04d2      	lsls	r2, r2, #19
   1afa8:	0209      	lsls	r1, r1, #8
   1afaa:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   1afae:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   1afb2:	430a      	orrs	r2, r1
   1afb4:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1afb6:	2400      	movs	r4, #0
	event->type = type;
   1afb8:	430a      	orrs	r2, r1
	event->obj = obj;
   1afba:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1afbe:	6084      	str	r4, [r0, #8]
}
   1afc0:	bd10      	pop	{r4, pc}

0001afc2 <z_handle_obj_poll_events>:
{
   1afc2:	4603      	mov	r3, r0
	return list->head == list;
   1afc4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1afc6:	4283      	cmp	r3, r0
   1afc8:	d008      	beq.n	1afdc <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1afca:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1afce:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1afd0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1afd2:	2300      	movs	r3, #0
	node->prev = NULL;
   1afd4:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1afd8:	f7ff bf5b 	b.w	1ae92 <signal_poll_event>
}
   1afdc:	4770      	bx	lr

0001afde <k_free>:
	if (ptr != NULL) {
   1afde:	b120      	cbz	r0, 1afea <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1afe0:	1f01      	subs	r1, r0, #4
   1afe2:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1afe6:	f7ff bb36 	b.w	1a656 <k_heap_free>
}
   1afea:	4770      	bx	lr

0001afec <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1afec:	f7f9 bcdc 	b.w	149a8 <SystemInit>
