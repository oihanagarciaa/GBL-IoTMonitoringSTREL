
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 38 00 20 21 35 00 00 61 8d 01 00 f5 34 00 00     .8. !5..a....4..
  10:	f5 34 00 00 f5 34 00 00 f5 34 00 00 00 00 00 00     .4...4...4......
	...
  2c:	09 32 00 00 f5 34 00 00 00 00 00 00 b5 31 00 00     .2...4.......1..
  3c:	f5 34 00 00                                         .4..

00000040 <_irq_vector_table>:
  40:	b9 32 00 00 c9 13 01 00 b9 32 00 00 b9 32 00 00     .2.......2...2..
  50:	b9 32 00 00 b9 32 00 00 b9 32 00 00 b9 32 00 00     .2...2...2...2..
  60:	b9 32 00 00 b9 32 00 00 b9 32 00 00 b9 32 00 00     .2...2...2...2..
  70:	b9 32 00 00 b9 32 00 00 b9 32 00 00 b9 32 00 00     .2...2...2...2..
  80:	b9 32 00 00 b9 32 00 00 b9 32 00 00 b9 32 00 00     .2...2...2...2..
  90:	b9 32 00 00 b9 32 00 00 b9 32 00 00 b9 32 00 00     .2...2...2...2..
  a0:	b9 32 00 00 b9 32 00 00 b9 32 00 00 b9 32 00 00     .2...2...2...2..
  b0:	b9 32 00 00 b9 32 00 00 b9 32 00 00 b9 32 00 00     .2...2...2...2..
  c0:	b9 32 00 00 b9 32 00 00 b9 32 00 00 b9 32 00 00     .2...2...2...2..
  d0:	b9 32 00 00 b9 32 00 00 b9 32 00 00                 .2...2...2..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x31>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x38>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x38>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_BT_HCI_TX_STACK_SIZE+0xba>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_BT_HCI_TX_STACK_SIZE+0x9c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_BT_RX_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_BT_RX_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x12>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_BT_COMPANY_ID+0x43>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_BT_COMPANY_ID+0x9f>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <CONFIG_BT_HCI_ECC_STACK_SIZE+0x148>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x118>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_COMPANY_ID+0x29>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_BT_COMPANY_ID+0x6d>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_BT_COMPANY_ID+0x89>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_BT_COMPANY_ID+0x9b>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__data_size+0x3>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc2>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_BT_COMPANY_ID+0x9b>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_BT_COMPANY_ID+0x5f>
     87a:	e712      	b.n	6a2 <CONFIG_BT_COMPANY_ID+0xb1>

0000087c <__aeabi_uldivmod>:
     87c:	b953      	cbnz	r3, 894 <__aeabi_uldivmod+0x18>
     87e:	b94a      	cbnz	r2, 894 <__aeabi_uldivmod+0x18>
     880:	2900      	cmp	r1, #0
     882:	bf08      	it	eq
     884:	2800      	cmpeq	r0, #0
     886:	bf1c      	itt	ne
     888:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     88c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     890:	f000 b80c 	b.w	8ac <__aeabi_idiv0>
     894:	f1ad 0c08 	sub.w	ip, sp, #8
     898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     89c:	f000 f808 	bl	8b0 <__udivmoddi4>
     8a0:	f8dd e004 	ldr.w	lr, [sp, #4]
     8a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8a8:	b004      	add	sp, #16
     8aa:	4770      	bx	lr

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <__udivmoddi4>:
     8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8b4:	4607      	mov	r7, r0
     8b6:	468c      	mov	ip, r1
     8b8:	4608      	mov	r0, r1
     8ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
     8bc:	4615      	mov	r5, r2
     8be:	463c      	mov	r4, r7
     8c0:	4619      	mov	r1, r3
     8c2:	2b00      	cmp	r3, #0
     8c4:	f040 80c6 	bne.w	a54 <__udivmoddi4+0x1a4>
     8c8:	4282      	cmp	r2, r0
     8ca:	fab2 f782 	clz	r7, r2
     8ce:	d946      	bls.n	95e <__udivmoddi4+0xae>
     8d0:	b14f      	cbz	r7, 8e6 <__udivmoddi4+0x36>
     8d2:	f1c7 0e20 	rsb	lr, r7, #32
     8d6:	fa24 fe0e 	lsr.w	lr, r4, lr
     8da:	fa00 f307 	lsl.w	r3, r0, r7
     8de:	40bd      	lsls	r5, r7
     8e0:	ea4e 0c03 	orr.w	ip, lr, r3
     8e4:	40bc      	lsls	r4, r7
     8e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
     8ea:	fa1f fe85 	uxth.w	lr, r5
     8ee:	fbbc f9f8 	udiv	r9, ip, r8
     8f2:	0c22      	lsrs	r2, r4, #16
     8f4:	fb08 c319 	mls	r3, r8, r9, ip
     8f8:	fb09 fa0e 	mul.w	sl, r9, lr
     8fc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     900:	459a      	cmp	sl, r3
     902:	d928      	bls.n	956 <__udivmoddi4+0xa6>
     904:	18eb      	adds	r3, r5, r3
     906:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     90a:	d204      	bcs.n	916 <__udivmoddi4+0x66>
     90c:	459a      	cmp	sl, r3
     90e:	d902      	bls.n	916 <__udivmoddi4+0x66>
     910:	f1a9 0002 	sub.w	r0, r9, #2
     914:	442b      	add	r3, r5
     916:	eba3 030a 	sub.w	r3, r3, sl
     91a:	b2a4      	uxth	r4, r4
     91c:	fbb3 f2f8 	udiv	r2, r3, r8
     920:	fb08 3312 	mls	r3, r8, r2, r3
     924:	fb02 fe0e 	mul.w	lr, r2, lr
     928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     92c:	45a6      	cmp	lr, r4
     92e:	d914      	bls.n	95a <__udivmoddi4+0xaa>
     930:	192c      	adds	r4, r5, r4
     932:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     936:	d203      	bcs.n	940 <__udivmoddi4+0x90>
     938:	45a6      	cmp	lr, r4
     93a:	d901      	bls.n	940 <__udivmoddi4+0x90>
     93c:	1e93      	subs	r3, r2, #2
     93e:	442c      	add	r4, r5
     940:	eba4 040e 	sub.w	r4, r4, lr
     944:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     948:	b11e      	cbz	r6, 952 <__udivmoddi4+0xa2>
     94a:	40fc      	lsrs	r4, r7
     94c:	2300      	movs	r3, #0
     94e:	6034      	str	r4, [r6, #0]
     950:	6073      	str	r3, [r6, #4]
     952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     956:	4648      	mov	r0, r9
     958:	e7dd      	b.n	916 <__udivmoddi4+0x66>
     95a:	4613      	mov	r3, r2
     95c:	e7f0      	b.n	940 <__udivmoddi4+0x90>
     95e:	b902      	cbnz	r2, 962 <__udivmoddi4+0xb2>
     960:	deff      	udf	#255	; 0xff
     962:	bb87      	cbnz	r7, 9c6 <__udivmoddi4+0x116>
     964:	1a83      	subs	r3, r0, r2
     966:	2101      	movs	r1, #1
     968:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     96c:	b2aa      	uxth	r2, r5
     96e:	fbb3 fcfe 	udiv	ip, r3, lr
     972:	0c20      	lsrs	r0, r4, #16
     974:	fb0e 331c 	mls	r3, lr, ip, r3
     978:	fb0c f802 	mul.w	r8, ip, r2
     97c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     980:	4598      	cmp	r8, r3
     982:	d963      	bls.n	a4c <__udivmoddi4+0x19c>
     984:	18eb      	adds	r3, r5, r3
     986:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     98a:	d204      	bcs.n	996 <__udivmoddi4+0xe6>
     98c:	4598      	cmp	r8, r3
     98e:	d902      	bls.n	996 <__udivmoddi4+0xe6>
     990:	f1ac 0002 	sub.w	r0, ip, #2
     994:	442b      	add	r3, r5
     996:	eba3 0308 	sub.w	r3, r3, r8
     99a:	b2a4      	uxth	r4, r4
     99c:	fbb3 fcfe 	udiv	ip, r3, lr
     9a0:	fb0e 331c 	mls	r3, lr, ip, r3
     9a4:	fb0c f202 	mul.w	r2, ip, r2
     9a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9ac:	42a2      	cmp	r2, r4
     9ae:	d94f      	bls.n	a50 <__udivmoddi4+0x1a0>
     9b0:	192c      	adds	r4, r5, r4
     9b2:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     9b6:	d204      	bcs.n	9c2 <__udivmoddi4+0x112>
     9b8:	42a2      	cmp	r2, r4
     9ba:	d902      	bls.n	9c2 <__udivmoddi4+0x112>
     9bc:	f1ac 0302 	sub.w	r3, ip, #2
     9c0:	442c      	add	r4, r5
     9c2:	1aa4      	subs	r4, r4, r2
     9c4:	e7be      	b.n	944 <__udivmoddi4+0x94>
     9c6:	f1c7 0c20 	rsb	ip, r7, #32
     9ca:	fa20 f80c 	lsr.w	r8, r0, ip
     9ce:	fa00 f307 	lsl.w	r3, r0, r7
     9d2:	fa24 fc0c 	lsr.w	ip, r4, ip
     9d6:	40bd      	lsls	r5, r7
     9d8:	ea4c 0203 	orr.w	r2, ip, r3
     9dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     9e0:	b2ab      	uxth	r3, r5
     9e2:	fbb8 fcfe 	udiv	ip, r8, lr
     9e6:	0c11      	lsrs	r1, r2, #16
     9e8:	fb0e 801c 	mls	r0, lr, ip, r8
     9ec:	fb0c f903 	mul.w	r9, ip, r3
     9f0:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     9f4:	4581      	cmp	r9, r0
     9f6:	fa04 f407 	lsl.w	r4, r4, r7
     9fa:	d923      	bls.n	a44 <__udivmoddi4+0x194>
     9fc:	1828      	adds	r0, r5, r0
     9fe:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     a02:	d204      	bcs.n	a0e <__udivmoddi4+0x15e>
     a04:	4581      	cmp	r9, r0
     a06:	d902      	bls.n	a0e <__udivmoddi4+0x15e>
     a08:	f1ac 0102 	sub.w	r1, ip, #2
     a0c:	4428      	add	r0, r5
     a0e:	eba0 0009 	sub.w	r0, r0, r9
     a12:	b292      	uxth	r2, r2
     a14:	fbb0 fcfe 	udiv	ip, r0, lr
     a18:	fb0e 001c 	mls	r0, lr, ip, r0
     a1c:	fb0c f803 	mul.w	r8, ip, r3
     a20:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     a24:	4598      	cmp	r8, r3
     a26:	d90f      	bls.n	a48 <__udivmoddi4+0x198>
     a28:	18eb      	adds	r3, r5, r3
     a2a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     a2e:	d204      	bcs.n	a3a <__udivmoddi4+0x18a>
     a30:	4598      	cmp	r8, r3
     a32:	d902      	bls.n	a3a <__udivmoddi4+0x18a>
     a34:	f1ac 0202 	sub.w	r2, ip, #2
     a38:	442b      	add	r3, r5
     a3a:	eba3 0308 	sub.w	r3, r3, r8
     a3e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     a42:	e791      	b.n	968 <__udivmoddi4+0xb8>
     a44:	4661      	mov	r1, ip
     a46:	e7e2      	b.n	a0e <__udivmoddi4+0x15e>
     a48:	4662      	mov	r2, ip
     a4a:	e7f6      	b.n	a3a <__udivmoddi4+0x18a>
     a4c:	4660      	mov	r0, ip
     a4e:	e7a2      	b.n	996 <__udivmoddi4+0xe6>
     a50:	4663      	mov	r3, ip
     a52:	e7b6      	b.n	9c2 <__udivmoddi4+0x112>
     a54:	4283      	cmp	r3, r0
     a56:	d905      	bls.n	a64 <__udivmoddi4+0x1b4>
     a58:	b10e      	cbz	r6, a5e <__udivmoddi4+0x1ae>
     a5a:	e9c6 7000 	strd	r7, r0, [r6]
     a5e:	2100      	movs	r1, #0
     a60:	4608      	mov	r0, r1
     a62:	e776      	b.n	952 <__udivmoddi4+0xa2>
     a64:	fab3 f183 	clz	r1, r3
     a68:	b981      	cbnz	r1, a8c <__udivmoddi4+0x1dc>
     a6a:	4283      	cmp	r3, r0
     a6c:	d301      	bcc.n	a72 <__udivmoddi4+0x1c2>
     a6e:	42ba      	cmp	r2, r7
     a70:	d80a      	bhi.n	a88 <__udivmoddi4+0x1d8>
     a72:	1abc      	subs	r4, r7, r2
     a74:	eb60 0303 	sbc.w	r3, r0, r3
     a78:	2001      	movs	r0, #1
     a7a:	469c      	mov	ip, r3
     a7c:	2e00      	cmp	r6, #0
     a7e:	d068      	beq.n	b52 <__udivmoddi4+0x2a2>
     a80:	e9c6 4c00 	strd	r4, ip, [r6]
     a84:	2100      	movs	r1, #0
     a86:	e764      	b.n	952 <__udivmoddi4+0xa2>
     a88:	4608      	mov	r0, r1
     a8a:	e7f7      	b.n	a7c <__udivmoddi4+0x1cc>
     a8c:	f1c1 0c20 	rsb	ip, r1, #32
     a90:	408b      	lsls	r3, r1
     a92:	fa22 f40c 	lsr.w	r4, r2, ip
     a96:	431c      	orrs	r4, r3
     a98:	fa02 f501 	lsl.w	r5, r2, r1
     a9c:	fa00 f301 	lsl.w	r3, r0, r1
     aa0:	fa27 f20c 	lsr.w	r2, r7, ip
     aa4:	fa20 fb0c 	lsr.w	fp, r0, ip
     aa8:	ea4f 4914 	mov.w	r9, r4, lsr #16
     aac:	4313      	orrs	r3, r2
     aae:	fbbb f8f9 	udiv	r8, fp, r9
     ab2:	fa1f fe84 	uxth.w	lr, r4
     ab6:	fb09 bb18 	mls	fp, r9, r8, fp
     aba:	0c1a      	lsrs	r2, r3, #16
     abc:	fb08 fa0e 	mul.w	sl, r8, lr
     ac0:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     ac4:	4592      	cmp	sl, r2
     ac6:	fa07 f701 	lsl.w	r7, r7, r1
     aca:	d93e      	bls.n	b4a <__udivmoddi4+0x29a>
     acc:	18a2      	adds	r2, r4, r2
     ace:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     ad2:	d204      	bcs.n	ade <__udivmoddi4+0x22e>
     ad4:	4592      	cmp	sl, r2
     ad6:	d902      	bls.n	ade <__udivmoddi4+0x22e>
     ad8:	f1a8 0002 	sub.w	r0, r8, #2
     adc:	4422      	add	r2, r4
     ade:	eba2 020a 	sub.w	r2, r2, sl
     ae2:	b29b      	uxth	r3, r3
     ae4:	fbb2 f8f9 	udiv	r8, r2, r9
     ae8:	fb09 2218 	mls	r2, r9, r8, r2
     aec:	fb08 fe0e 	mul.w	lr, r8, lr
     af0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     af4:	4596      	cmp	lr, r2
     af6:	d92a      	bls.n	b4e <__udivmoddi4+0x29e>
     af8:	18a2      	adds	r2, r4, r2
     afa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     afe:	d204      	bcs.n	b0a <__udivmoddi4+0x25a>
     b00:	4596      	cmp	lr, r2
     b02:	d902      	bls.n	b0a <__udivmoddi4+0x25a>
     b04:	f1a8 0302 	sub.w	r3, r8, #2
     b08:	4422      	add	r2, r4
     b0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     b0e:	fba0 9305 	umull	r9, r3, r0, r5
     b12:	eba2 020e 	sub.w	r2, r2, lr
     b16:	429a      	cmp	r2, r3
     b18:	46ce      	mov	lr, r9
     b1a:	4698      	mov	r8, r3
     b1c:	d302      	bcc.n	b24 <__udivmoddi4+0x274>
     b1e:	d106      	bne.n	b2e <__udivmoddi4+0x27e>
     b20:	454f      	cmp	r7, r9
     b22:	d204      	bcs.n	b2e <__udivmoddi4+0x27e>
     b24:	ebb9 0e05 	subs.w	lr, r9, r5
     b28:	eb63 0804 	sbc.w	r8, r3, r4
     b2c:	3801      	subs	r0, #1
     b2e:	b186      	cbz	r6, b52 <__udivmoddi4+0x2a2>
     b30:	ebb7 030e 	subs.w	r3, r7, lr
     b34:	eb62 0708 	sbc.w	r7, r2, r8
     b38:	fa07 fc0c 	lsl.w	ip, r7, ip
     b3c:	40cb      	lsrs	r3, r1
     b3e:	ea4c 0303 	orr.w	r3, ip, r3
     b42:	40cf      	lsrs	r7, r1
     b44:	e9c6 3700 	strd	r3, r7, [r6]
     b48:	e79c      	b.n	a84 <__udivmoddi4+0x1d4>
     b4a:	4640      	mov	r0, r8
     b4c:	e7c7      	b.n	ade <__udivmoddi4+0x22e>
     b4e:	4643      	mov	r3, r8
     b50:	e7db      	b.n	b0a <__udivmoddi4+0x25a>
     b52:	4631      	mov	r1, r6
     b54:	e6fd      	b.n	952 <__udivmoddi4+0xa2>
	...

00000b58 <main>:
}



void main(void)
{
     b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b5c:	b08d      	sub	sp, #52	; 0x34
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     b5e:	4868      	ldr	r0, [pc, #416]	; (d00 <main+0x1a8>)
     b60:	f016 f92e 	bl	16dc0 <z_impl_device_get_binding>
	if (tempHumdev == NULL) {
     b64:	4605      	mov	r5, r0
     b66:	b910      	cbnz	r0, b6e <main+0x16>
		printk("Could not get HTS221 device\n");
     b68:	4866      	ldr	r0, [pc, #408]	; (d04 <main+0x1ac>)
     b6a:	f017 fafd 	bl	18168 <printk>
     b6e:	4866      	ldr	r0, [pc, #408]	; (d08 <main+0x1b0>)
     b70:	f016 f926 	bl	16dc0 <z_impl_device_get_binding>
        if (!dev) {
     b74:	4604      	mov	r4, r0
     b76:	b970      	cbnz	r0, b96 <main+0x3e>
		printk("Failed to get device binding");
     b78:	4864      	ldr	r0, [pc, #400]	; (d0c <main+0x1b4>)
     b7a:	f017 faf5 	bl	18168 <printk>
	setUpAirDev(airDev);
/////////////////////////////////
	int err;

	  /* Initialize the Bluetooth Subsystem, no callback passed here */
	  err = bt_enable(NULL);
     b7e:	2000      	movs	r0, #0
     b80:	f003 fd28 	bl	45d4 <bt_enable>
	  if (err) {
     b84:	4680      	mov	r8, r0
     b86:	b1f0      	cbz	r0, bc6 <main+0x6e>
	    printk("Bluetooth init failed (err %d)\n", err);
     b88:	4601      	mov	r1, r0
     b8a:	4861      	ldr	r0, [pc, #388]	; (d10 <main+0x1b8>)
		//json_obj_encode_buf(values_descr, ARRAY_SIZE(values_descr), &jsonValues, bytes, 125);

		k_sleep(K_MSEC(5000));
	}
	k_sleep(K_FOREVER);
}
     b8c:	b00d      	add	sp, #52	; 0x34
     b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    printk("Bluetooth init failed (err %d)\n", err);
     b92:	f017 bae9 	b.w	18168 <printk>
	printk("device is %p, name is %s\n", dev, dev->name);
     b96:	4601      	mov	r1, r0
     b98:	6802      	ldr	r2, [r0, #0]
     b9a:	485e      	ldr	r0, [pc, #376]	; (d14 <main+0x1bc>)
     b9c:	f017 fae4 	bl	18168 <printk>
	rc = ccs811_configver_fetch(dev, &cfgver);
     ba0:	a907      	add	r1, sp, #28
     ba2:	4620      	mov	r0, r4
     ba4:	f01a fceb 	bl	1b57e <ccs811_configver_fetch>
	if (rc == 0) {
     ba8:	2800      	cmp	r0, #0
     baa:	d1e8      	bne.n	b7e <main+0x26>
		printk("HW %02x; FW Boot %04x App %04x ; mode %02x\n",
     bac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     bb0:	9300      	str	r3, [sp, #0]
     bb2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
     bb6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
     bba:	f89d 1020 	ldrb.w	r1, [sp, #32]
     bbe:	4856      	ldr	r0, [pc, #344]	; (d18 <main+0x1c0>)
     bc0:	f017 fad2 	bl	18168 <printk>
		app_fw_2 = (cfgver.fw_app_version >> 8) > 0x11;
     bc4:	e7db      	b.n	b7e <main+0x26>
	  bt_conn_cb_register(&beacon_connection_callbacks);
     bc6:	4855      	ldr	r0, [pc, #340]	; (d1c <main+0x1c4>)
	  struct bt_le_adv_param adv_param = {
     bc8:	4f55      	ldr	r7, [pc, #340]	; (d20 <main+0x1c8>)
	  bt_conn_cb_register(&beacon_connection_callbacks);
     bca:	f004 fc5d 	bl	5488 <bt_conn_cb_register>
	  printk("Set up advertising.");
     bce:	4855      	ldr	r0, [pc, #340]	; (d24 <main+0x1cc>)
     bd0:	f017 faca 	bl	18168 <printk>
	  struct bt_le_adv_param adv_param = {
     bd4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     bd6:	ae07      	add	r6, sp, #28
     bd8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     bda:	683b      	ldr	r3, [r7, #0]
     bdc:	6033      	str	r3, [r6, #0]
            err = bt_le_adv_start(&adv_param, advertisement, ARRAY_SIZE(advertisement),
     bde:	4952      	ldr	r1, [pc, #328]	; (d28 <main+0x1d0>)
     be0:	f8cd 8000 	str.w	r8, [sp]
     be4:	4643      	mov	r3, r8
     be6:	2202      	movs	r2, #2
     be8:	a807      	add	r0, sp, #28
     bea:	f004 f8d5 	bl	4d98 <bt_le_adv_start>
        if (err) {
     bee:	4601      	mov	r1, r0
     bf0:	b128      	cbz	r0, bfe <main+0xa6>
            printk("Advertising failed to start (err %d)\n", err);
     bf2:	484e      	ldr	r0, [pc, #312]	; (d2c <main+0x1d4>)
     bf4:	f017 fab8 	bl	18168 <printk>
}
     bf8:	b00d      	add	sp, #52	; 0x34
     bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            printk("Started advertising.\n");
     bfe:	484c      	ldr	r0, [pc, #304]	; (d30 <main+0x1d8>)
	jsonValues.temp = sensor_value_to_double(&temp);
     c00:	f8df a130 	ldr.w	sl, [pc, #304]	; d34 <main+0x1dc>
	printk("Temperature:%.1f C\n", sensor_value_to_double(&temp));
     c04:	f8df b130 	ldr.w	fp, [pc, #304]	; d38 <main+0x1e0>
            printk("Started advertising.\n");
     c08:	f017 faae 	bl	18168 <printk>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
     c0c:	f20f 09e8 	addw	r9, pc, #232	; 0xe8
     c10:	e9d9 8900 	ldrd	r8, r9, [r9]
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     c14:	68ab      	ldr	r3, [r5, #8]
     c16:	2139      	movs	r1, #57	; 0x39
     c18:	68db      	ldr	r3, [r3, #12]
     c1a:	4628      	mov	r0, r5
     c1c:	4798      	blx	r3
	if (sensor_sample_fetch(dev) < 0) {
     c1e:	2800      	cmp	r0, #0
     c20:	da25      	bge.n	c6e <main+0x116>
		printk("Sensor sample update error\n");
     c22:	4846      	ldr	r0, [pc, #280]	; (d3c <main+0x1e4>)
		printk("Cannot read HTS221 humidity channel\n");
     c24:	f017 faa0 	bl	18168 <printk>
	rc = ccs811_baseline_fetch(dev);
     c28:	4620      	mov	r0, r4
     c2a:	f01a fce8 	bl	1b5fe <ccs811_baseline_fetch>
	if (rc >= 0) {
     c2e:	2800      	cmp	r0, #0
     c30:	db17      	blt.n	c62 <main+0x10a>
     c32:	68a3      	ldr	r3, [r4, #8]
     c34:	2139      	movs	r1, #57	; 0x39
     c36:	68db      	ldr	r3, [r3, #12]
     c38:	4620      	mov	r0, r4
     c3a:	4798      	blx	r3
	if (rc == 0) {
     c3c:	b988      	cbnz	r0, c62 <main+0x10a>
		const struct ccs811_result_type *rp = ccs811_result(dev);
     c3e:	4620      	mov	r0, r4
     c40:	f01a fc9a 	bl	1b578 <ccs811_result>
		sensor_channel_get(dev, SENSOR_CHAN_CO2, &co2);
     c44:	aa03      	add	r2, sp, #12
     c46:	211b      	movs	r1, #27
     c48:	4620      	mov	r0, r4
     c4a:	f017 fa48 	bl	180de <sensor_channel_get>
		sensor_channel_get(dev, SENSOR_CHAN_VOC, &tvoc);
     c4e:	aa05      	add	r2, sp, #20
     c50:	211c      	movs	r1, #28
     c52:	4620      	mov	r0, r4
     c54:	f017 fa43 	bl	180de <sensor_channel_get>
		printk("CCS811: %u ppm eCO2\n        %u ppb eTVOC\n", co2.val1, tvoc.val1);
     c58:	9a05      	ldr	r2, [sp, #20]
     c5a:	9903      	ldr	r1, [sp, #12]
     c5c:	4838      	ldr	r0, [pc, #224]	; (d40 <main+0x1e8>)
     c5e:	f017 fa83 	bl	18168 <printk>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     c62:	2100      	movs	r1, #0
     c64:	f44f 3020 	mov.w	r0, #163840	; 0x28000
     c68:	f016 ffa0 	bl	17bac <z_impl_k_sleep>
	while (!IS_ENABLED(CONFIG_HTS221_TRIGGER)) {
     c6c:	e7d2      	b.n	c14 <main+0xbc>
	if (sensor_channel_get(dev, SENSOR_CHAN_AMBIENT_TEMP, &temp) < 0) {
     c6e:	aa03      	add	r2, sp, #12
     c70:	210d      	movs	r1, #13
     c72:	4628      	mov	r0, r5
     c74:	f017 fa33 	bl	180de <sensor_channel_get>
     c78:	2800      	cmp	r0, #0
     c7a:	da01      	bge.n	c80 <main+0x128>
		printk("Cannot read HTS221 temperature channel\n");
     c7c:	4831      	ldr	r0, [pc, #196]	; (d44 <main+0x1ec>)
     c7e:	e7d1      	b.n	c24 <main+0xcc>
	if (sensor_channel_get(dev, SENSOR_CHAN_HUMIDITY, &hum) < 0) {
     c80:	aa05      	add	r2, sp, #20
     c82:	2110      	movs	r1, #16
     c84:	4628      	mov	r0, r5
     c86:	f017 fa2a 	bl	180de <sensor_channel_get>
     c8a:	2800      	cmp	r0, #0
     c8c:	da01      	bge.n	c92 <main+0x13a>
		printk("Cannot read HTS221 humidity channel\n");
     c8e:	482e      	ldr	r0, [pc, #184]	; (d48 <main+0x1f0>)
     c90:	e7c8      	b.n	c24 <main+0xcc>
	return (double)val->val1 + (double)val->val2 / 1000000;
     c92:	9804      	ldr	r0, [sp, #16]
     c94:	f7ff fb76 	bl	384 <__aeabi_i2d>
     c98:	4642      	mov	r2, r8
     c9a:	464b      	mov	r3, r9
     c9c:	f7ff fd06 	bl	6ac <__aeabi_ddiv>
     ca0:	4606      	mov	r6, r0
     ca2:	9803      	ldr	r0, [sp, #12]
     ca4:	460f      	mov	r7, r1
     ca6:	f7ff fb6d 	bl	384 <__aeabi_i2d>
     caa:	4602      	mov	r2, r0
     cac:	460b      	mov	r3, r1
     cae:	4630      	mov	r0, r6
     cb0:	4639      	mov	r1, r7
     cb2:	f7ff fa1b 	bl	ec <__adddf3>
     cb6:	4602      	mov	r2, r0
     cb8:	460b      	mov	r3, r1
	printk("Temperature:%.1f C\n", sensor_value_to_double(&temp));
     cba:	4658      	mov	r0, fp
	jsonValues.temp = sensor_value_to_double(&temp);
     cbc:	e9ca 2300 	strd	r2, r3, [sl]
	printk("Temperature:%.1f C\n", sensor_value_to_double(&temp));
     cc0:	f017 fa52 	bl	18168 <printk>
     cc4:	9806      	ldr	r0, [sp, #24]
     cc6:	f7ff fb5d 	bl	384 <__aeabi_i2d>
     cca:	4642      	mov	r2, r8
     ccc:	464b      	mov	r3, r9
     cce:	f7ff fced 	bl	6ac <__aeabi_ddiv>
     cd2:	4606      	mov	r6, r0
     cd4:	9805      	ldr	r0, [sp, #20]
     cd6:	460f      	mov	r7, r1
     cd8:	f7ff fb54 	bl	384 <__aeabi_i2d>
     cdc:	4602      	mov	r2, r0
     cde:	460b      	mov	r3, r1
     ce0:	4630      	mov	r0, r6
     ce2:	4639      	mov	r1, r7
     ce4:	f7ff fa02 	bl	ec <__adddf3>
     ce8:	4602      	mov	r2, r0
     cea:	460b      	mov	r3, r1
	printk("Relative Humidity:%.1f%%\n", sensor_value_to_double(&hum));
     cec:	4817      	ldr	r0, [pc, #92]	; (d4c <main+0x1f4>)
	jsonValues.hum = sensor_value_to_double(&hum);
     cee:	e9ca 2302 	strd	r2, r3, [sl, #8]
	printk("Relative Humidity:%.1f%%\n", sensor_value_to_double(&hum));
     cf2:	f017 fa39 	bl	18168 <printk>
     cf6:	e797      	b.n	c28 <main+0xd0>
     cf8:	00000000 	.word	0x00000000
     cfc:	412e8480 	.word	0x412e8480
     d00:	0001dda4 	.word	0x0001dda4
     d04:	0001ddab 	.word	0x0001ddab
     d08:	0001ddc8 	.word	0x0001ddc8
     d0c:	0001ddcf 	.word	0x0001ddcf
     d10:	0001de32 	.word	0x0001de32
     d14:	0001ddec 	.word	0x0001ddec
     d18:	0001de06 	.word	0x0001de06
     d1c:	20000180 	.word	0x20000180
     d20:	0001ca10 	.word	0x0001ca10
     d24:	0001de52 	.word	0x0001de52
     d28:	0001ca88 	.word	0x0001ca88
     d2c:	0001de66 	.word	0x0001de66
     d30:	0001de8c 	.word	0x0001de8c
     d34:	200009d8 	.word	0x200009d8
     d38:	0001df0b 	.word	0x0001df0b
     d3c:	0001dea2 	.word	0x0001dea2
     d40:	0001df39 	.word	0x0001df39
     d44:	0001debe 	.word	0x0001debe
     d48:	0001dee6 	.word	0x0001dee6
     d4c:	0001df1f 	.word	0x0001df1f

00000d50 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     d54:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     d58:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     d5a:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
     d5c:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     d5e:	42a6      	cmp	r6, r4
{
     d60:	4688      	mov	r8, r1
     d62:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     d64:	d818      	bhi.n	d98 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     d66:	4d1c      	ldr	r5, [pc, #112]	; (dd8 <ull_drift_ticks_get+0x88>)
     d68:	fba3 0105 	umull	r0, r1, r3, r5
     d6c:	a318      	add	r3, pc, #96	; (adr r3, dd0 <ull_drift_ticks_get+0x80>)
     d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
     d72:	f7ff fd83 	bl	87c <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     d76:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     d78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     d7c:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     d80:	a313      	add	r3, pc, #76	; (adr r3, dd0 <ull_drift_ticks_get+0x80>)
     d82:	e9d3 2300 	ldrd	r2, r3, [r3]
     d86:	fba4 0105 	umull	r0, r1, r4, r5
     d8a:	f7ff fd77 	bl	87c <__aeabi_uldivmod>
     d8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     d92:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     d98:	4c0f      	ldr	r4, [pc, #60]	; (dd8 <ull_drift_ticks_get+0x88>)
     d9a:	a30d      	add	r3, pc, #52	; (adr r3, dd0 <ull_drift_ticks_get+0x80>)
     d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
     da0:	fba6 0104 	umull	r0, r1, r6, r4
     da4:	f7ff fd6a 	bl	87c <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     da8:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     dac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     db0:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     db4:	a306      	add	r3, pc, #24	; (adr r3, dd0 <ull_drift_ticks_get+0x80>)
     db6:	e9d3 2300 	ldrd	r2, r3, [r3]
     dba:	fba1 0104 	umull	r0, r1, r1, r4
     dbe:	f7ff fd5d 	bl	87c <__aeabi_uldivmod>
     dc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     dc6:	6038      	str	r0, [r7, #0]
}
     dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     dcc:	f3af 8000 	nop.w
     dd0:	1afd498d 	.word	0x1afd498d
     dd4:	00000007 	.word	0x00000007
     dd8:	3b9aca00 	.word	0x3b9aca00
     ddc:	00000000 	.word	0x00000000

00000de0 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
     de4:	4cab      	ldr	r4, [pc, #684]	; (1094 <ll_adv_enable+0x2b4>)
{
     de6:	b08f      	sub	sp, #60	; 0x3c
	if (!adv || !adv->is_enabled) {
     de8:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
	if (!enable) {
     dec:	2800      	cmp	r0, #0
     dee:	f000 8139 	beq.w	1064 <ll_adv_enable+0x284>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     df2:	f012 0701 	ands.w	r7, r2, #1
     df6:	f040 81b7 	bne.w	1168 <ll_adv_enable+0x388>
	ull_filter_adv_update(lll->filter_policy);
     dfa:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
     dfe:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
     e00:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
     e04:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
     e08:	f00f ff82 	bl	10d10 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     e0c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
     e10:	0741      	lsls	r1, r0, #29
     e12:	d42d      	bmi.n	e70 <ll_adv_enable+0x90>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     e14:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     e18:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     e1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     e20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     e24:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     e28:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
     e2c:	f1b8 0f00 	cmp.w	r8, #0
     e30:	d011      	beq.n	e56 <ll_adv_enable+0x76>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
     e32:	4898      	ldr	r0, [pc, #608]	; (1094 <ll_adv_enable+0x2b4>)
     e34:	4641      	mov	r1, r8
     e36:	f00a fb43 	bl	b4c0 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
     e3a:	f898 3000 	ldrb.w	r3, [r8]
     e3e:	065a      	lsls	r2, r3, #25
     e40:	d505      	bpl.n	e4e <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     e42:	2106      	movs	r1, #6
     e44:	f005 ff02 	bl	6c4c <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     e48:	2800      	cmp	r0, #0
     e4a:	f000 81c9 	beq.w	11e0 <ll_adv_enable+0x400>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     e4e:	4891      	ldr	r0, [pc, #580]	; (1094 <ll_adv_enable+0x2b4>)
     e50:	4649      	mov	r1, r9
     e52:	f00a fb35 	bl	b4c0 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     e56:	f898 3000 	ldrb.w	r3, [r8]
     e5a:	f013 0f0e 	tst.w	r3, #14
     e5e:	f040 80ee 	bne.w	103e <ll_adv_enable+0x25e>
		if (lll->conn) {
     e62:	6a23      	ldr	r3, [r4, #32]
     e64:	b19b      	cbz	r3, e8e <ll_adv_enable+0xae>
	return BT_HCI_ERR_CMD_DISALLOWED;
     e66:	270c      	movs	r7, #12
}
     e68:	4638      	mov	r0, r7
     e6a:	b00f      	add	sp, #60	; 0x3c
     e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
     e70:	463a      	mov	r2, r7
     e72:	f104 016b 	add.w	r1, r4, #107	; 0x6b
     e76:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     e7a:	f010 f8af 	bl	10fdc <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
     e7e:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
     e80:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
     e84:	d0c6      	beq.n	e14 <ll_adv_enable+0x34>
			ull_filter_rpa_update(false);
     e86:	4638      	mov	r0, r7
     e88:	f00f ff5c 	bl	10d44 <ull_filter_rpa_update>
     e8c:	e7c2      	b.n	e14 <ll_adv_enable+0x34>
		link = ll_rx_link_alloc();
     e8e:	f009 fa05 	bl	a29c <ll_rx_link_alloc>
		if (!link) {
     e92:	4682      	mov	sl, r0
     e94:	2800      	cmp	r0, #0
     e96:	f000 81ad 	beq.w	11f4 <ll_adv_enable+0x414>
		node_rx = ll_rx_alloc();
     e9a:	f009 fa0b 	bl	a2b4 <ll_rx_alloc>
		if (!node_rx) {
     e9e:	4683      	mov	fp, r0
     ea0:	2800      	cmp	r0, #0
     ea2:	f000 81ac 	beq.w	11fe <ll_adv_enable+0x41e>
		conn = ll_conn_acquire();
     ea6:	f00b f9f9 	bl	c29c <ll_conn_acquire>
		if (!conn) {
     eaa:	4605      	mov	r5, r0
     eac:	2800      	cmp	r0, #0
     eae:	f000 81a3 	beq.w	11f8 <ll_adv_enable+0x418>
		if (!conn_lll->link_tx_free) {
     eb2:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
     eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
     eb8:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
     eba:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
     ebe:	2800      	cmp	r0, #0
     ec0:	f000 8194 	beq.w	11ec <ll_adv_enable+0x40c>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
     ec8:	f105 0164 	add.w	r1, r5, #100	; 0x64
     ecc:	930b      	str	r3, [sp, #44]	; 0x2c
     ece:	f005 fec9 	bl	6c64 <memq_init>
			conn_lll->phy_tx = PHY_1M;
     ed2:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     ed6:	4b70      	ldr	r3, [pc, #448]	; (1098 <ll_adv_enable+0x2b8>)
			conn_lll->phy_tx = PHY_1M;
     ed8:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
     edc:	f022 0207 	bic.w	r2, r2, #7
     ee0:	f442 7288 	orr.w	r2, r2, #272	; 0x110
     ee4:	f042 0201 	orr.w	r2, r2, #1
     ee8:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
     eec:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
     ef0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     ef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
     ef8:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
     efc:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
     f00:	f022 0207 	bic.w	r2, r2, #7
     f04:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
     f08:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
     f0c:	f022 0207 	bic.w	r2, r2, #7
     f10:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
     f14:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
     f18:	f022 0207 	bic.w	r2, r2, #7
     f1c:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     f20:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
     f24:	2600      	movs	r6, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     f26:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
     f2a:	2206      	movs	r2, #6
     f2c:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
     f30:	e9c5 6612 	strd	r6, r6, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     f34:	676e      	str	r6, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
     f36:	f8a5 6078 	strh.w	r6, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
     f3a:	85ee      	strh	r6, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
     f3c:	632e      	str	r6, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
     f3e:	f885 603b 	strb.w	r6, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
     f42:	652e      	str	r6, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
     f44:	f8a5 60c4 	strh.w	r6, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
     f48:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
     f4c:	f8a5 60d0 	strh.w	r6, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
     f50:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     f54:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
     f58:	f885 60e6 	strb.w	r6, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
     f5c:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     f60:	f8a5 610c 	strh.w	r6, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     f64:	f8a5 6120 	strh.w	r6, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
     f68:	f008 fc80 	bl	986c <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     f6c:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     f70:	f8a5 6138 	strh.w	r6, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     f74:	f022 0203 	bic.w	r2, r2, #3
     f78:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
     f7c:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
     f80:	f8a5 6140 	strh.w	r6, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
     f84:	f022 0218 	bic.w	r2, r2, #24
     f88:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     f8c:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
     f90:	f885 6143 	strb.w	r6, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     f94:	f022 0207 	bic.w	r2, r2, #7
     f98:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
     f9c:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
     fa0:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
     fa4:	f366 1245 	bfi	r2, r6, #5, #1
     fa8:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
     fac:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     fb0:	f8a5 6164 	strh.w	r6, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
     fb4:	f366 02c3 	bfi	r2, r6, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
     fb8:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
     fbc:	2100      	movs	r1, #0
     fbe:	2000      	movs	r0, #0
     fc0:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
     fc4:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->periph.llcp_type = 0U;
     fc8:	f885 60d9 	strb.w	r6, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
     fcc:	f8a5 6184 	strh.w	r6, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
     fd0:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     fd4:	f8a5 61ac 	strh.w	r6, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
     fd8:	f8a5 61b8 	strh.w	r6, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     fdc:	f00b fca4 	bl	c928 <ull_conn_default_tx_octets_get>
     fe0:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
     fe4:	f00b fca6 	bl	c934 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     fe8:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
     fec:	4a2b      	ldr	r2, [pc, #172]	; (109c <ll_adv_enable+0x2bc>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     fee:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     ff2:	400a      	ands	r2, r1
     ff4:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     ff8:	f00b fca2 	bl	c940 <ull_conn_default_phy_tx_get>
     ffc:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
    1000:	f360 0202 	bfi	r2, r0, #0, #3
    1004:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1008:	f00b fca0 	bl	c94c <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    100c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    100e:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1010:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1014:	f8c5 61c4 	str.w	r6, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1018:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
    101c:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
    1020:	e9c5 6674 	strd	r6, r6, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1024:	e9c5 6672 	strd	r6, r6, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1028:	e9c5 6605 	strd	r6, r6, [r5, #20]
	hdr->ref = 0U;
    102c:	702e      	strb	r6, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    102e:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1030:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
    1034:	f010 ff16 	bl	11e64 <lll_clock_wait>
		if (err) {
    1038:	2800      	cmp	r0, #0
    103a:	f040 80d3 	bne.w	11e4 <ll_adv_enable+0x404>
	uint8_t ch_map = lll->chan_map;
    103e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1042:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    1044:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1048:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    104c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1050:	f005 ff88 	bl	6f64 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    1054:	bb20      	cbnz	r0, 10a0 <ll_adv_enable+0x2c0>
	if (adv->lll.conn) {
    1056:	6a23      	ldr	r3, [r4, #32]
    1058:	2b00      	cmp	r3, #0
    105a:	f43f af04 	beq.w	e66 <ll_adv_enable+0x86>
		conn_release(adv);
    105e:	f009 ff05 	bl	ae6c <conn_release.constprop.0>
    1062:	e700      	b.n	e66 <ll_adv_enable+0x86>
	if (!adv || !adv->is_enabled) {
    1064:	f012 0701 	ands.w	r7, r2, #1
    1068:	f43f aefe 	beq.w	e68 <ll_adv_enable+0x88>
	if (adv->lll.conn) {
    106c:	6a23      	ldr	r3, [r4, #32]
    106e:	b15b      	cbz	r3, 1088 <ll_adv_enable+0x2a8>
		adv->lll.conn->periph.cancelled = 1U;
    1070:	f893 2020 	ldrb.w	r2, [r3, #32]
    1074:	f042 0202 	orr.w	r2, r2, #2
    1078:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    107c:	6a23      	ldr	r3, [r4, #32]
    107e:	f893 3020 	ldrb.w	r3, [r3, #32]
    1082:	07d8      	lsls	r0, r3, #31
    1084:	f53f aeef 	bmi.w	e66 <ll_adv_enable+0x86>
}
    1088:	b00f      	add	sp, #60	; 0x3c
    108a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    108e:	f009 bf2f 	b.w	aef0 <disable.part.0>
    1092:	bf00      	nop
    1094:	20001c20 	.word	0x20001c20
    1098:	01480148 	.word	0x01480148
    109c:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
    10a0:	f899 1001 	ldrb.w	r1, [r9, #1]
    10a4:	4602      	mov	r2, r0
    10a6:	4640      	mov	r0, r8
    10a8:	f009 ffc6 	bl	b038 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    10ac:	4958      	ldr	r1, [pc, #352]	; (1210 <ll_adv_enable+0x430>)
	uint16_t interval = adv->interval;
    10ae:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
    10b2:	2331      	movs	r3, #49	; 0x31
    10b4:	2500      	movs	r5, #0
    10b6:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    10b8:	fba0 0101 	umull	r0, r1, r0, r1
    10bc:	a352      	add	r3, pc, #328	; (adr r3, 1208 <ll_adv_enable+0x428>)
    10be:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    10c2:	e9c4 5505 	strd	r5, r5, [r4, #20]
	hdr->ref = 0U;
    10c6:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
    10c8:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
    10ca:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    10cc:	f7ff fbd6 	bl	87c <__aeabi_uldivmod>
    10d0:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
    10d2:	f007 f84b 	bl	816c <ticker_ticks_now_get>
    10d6:	4606      	mov	r6, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    10d8:	f1b9 0f00 	cmp.w	r9, #0
    10dc:	d108      	bne.n	10f0 <ll_adv_enable+0x310>
    10de:	f898 5000 	ldrb.w	r5, [r8]
    10e2:	f005 050f 	and.w	r5, r5, #15
    10e6:	f1a5 0501 	sub.w	r5, r5, #1
    10ea:	fab5 f585 	clz	r5, r5
    10ee:	096d      	lsrs	r5, r5, #5
    10f0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
    10f4:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    10f6:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    10fa:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    10fe:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    1102:	d036      	beq.n	1172 <ll_adv_enable+0x392>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1104:	2000      	movs	r0, #0
    1106:	4a43      	ldr	r2, [pc, #268]	; (1214 <ll_adv_enable+0x434>)
    1108:	f8df 910c 	ldr.w	r9, [pc, #268]	; 1218 <ll_adv_enable+0x438>
    110c:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
    110e:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1110:	f10d 0834 	add.w	r8, sp, #52	; 0x34
    1114:	9301      	str	r3, [sp, #4]
    1116:	9205      	str	r2, [sp, #20]
    1118:	2103      	movs	r1, #3
    111a:	e9cd 0002 	strd	r0, r0, [sp, #8]
    111e:	9406      	str	r4, [sp, #24]
    1120:	4633      	mov	r3, r6
    1122:	9000      	str	r0, [sp, #0]
    1124:	f8cd 8020 	str.w	r8, [sp, #32]
    1128:	f8cd 901c 	str.w	r9, [sp, #28]
    112c:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    112e:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1130:	f006 ff50 	bl	7fd4 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1134:	4641      	mov	r1, r8
    1136:	f009 f941 	bl	a3bc <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    113a:	2800      	cmp	r0, #0
    113c:	d18b      	bne.n	1056 <ll_adv_enable+0x276>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    113e:	4a37      	ldr	r2, [pc, #220]	; (121c <ll_adv_enable+0x43c>)
    1140:	9205      	str	r2, [sp, #20]
    1142:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    1146:	9200      	str	r2, [sp, #0]
    1148:	e9cd 0003 	strd	r0, r0, [sp, #12]
    114c:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1150:	f8cd 901c 	str.w	r9, [sp, #28]
    1154:	f8cd 8020 	str.w	r8, [sp, #32]
    1158:	9406      	str	r4, [sp, #24]
    115a:	4633      	mov	r3, r6
    115c:	2201      	movs	r2, #1
    115e:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1160:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1162:	f006 ff37 	bl	7fd4 <ticker_start>
    1166:	e02e      	b.n	11c6 <ll_adv_enable+0x3e6>
			return 0;
    1168:	2700      	movs	r7, #0
}
    116a:	4638      	mov	r0, r7
    116c:	b00f      	add	sp, #60	; 0x3c
    116e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1172:	4a2b      	ldr	r2, [pc, #172]	; (1220 <ll_adv_enable+0x440>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1174:	482b      	ldr	r0, [pc, #172]	; (1224 <ll_adv_enable+0x444>)
		ret = ticker_start_ext(
    1176:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1178:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    117c:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
    1180:	9406      	str	r4, [sp, #24]
    1182:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1184:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1186:	2391      	movs	r3, #145	; 0x91
    1188:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
    118c:	4b22      	ldr	r3, [pc, #136]	; (1218 <ll_adv_enable+0x438>)
    118e:	9307      	str	r3, [sp, #28]
    1190:	4b20      	ldr	r3, [pc, #128]	; (1214 <ll_adv_enable+0x434>)
    1192:	9305      	str	r3, [sp, #20]
    1194:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1198:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    119a:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    119e:	9303      	str	r3, [sp, #12]
    11a0:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    11a4:	a318      	add	r3, pc, #96	; (adr r3, 1208 <ll_adv_enable+0x428>)
    11a6:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    11aa:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    11ae:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    11b2:	f7ff fb63 	bl	87c <__aeabi_uldivmod>
		ret = ticker_start_ext(
    11b6:	4633      	mov	r3, r6
    11b8:	e9cd 5000 	strd	r5, r0, [sp]
    11bc:	464a      	mov	r2, r9
    11be:	4628      	mov	r0, r5
    11c0:	2103      	movs	r1, #3
    11c2:	f006 feb1 	bl	7f28 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    11c6:	4641      	mov	r1, r8
    11c8:	f009 f8f8 	bl	a3bc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    11cc:	2800      	cmp	r0, #0
    11ce:	f47f af42 	bne.w	1056 <ll_adv_enable+0x276>
	adv->is_enabled = 1;
    11d2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    11d6:	f043 0301 	orr.w	r3, r3, #1
    11da:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	return 0;
    11de:	e643      	b.n	e68 <ll_adv_enable+0x88>
			return BT_HCI_ERR_INVALID_PARAM;
    11e0:	2712      	movs	r7, #18
    11e2:	e641      	b.n	e68 <ll_adv_enable+0x88>
			conn_release(adv);
    11e4:	f009 fe42 	bl	ae6c <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    11e8:	2703      	movs	r7, #3
    11ea:	e63d      	b.n	e68 <ll_adv_enable+0x88>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    11ec:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    11f0:	6768      	str	r0, [r5, #116]	; 0x74
    11f2:	e667      	b.n	ec4 <ll_adv_enable+0xe4>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    11f4:	2707      	movs	r7, #7
    11f6:	e637      	b.n	e68 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    11f8:	4658      	mov	r0, fp
    11fa:	f009 f861 	bl	a2c0 <ll_rx_release>
			ll_rx_link_release(link);
    11fe:	4650      	mov	r0, sl
    1200:	f009 f852 	bl	a2a8 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1204:	2707      	movs	r7, #7
    1206:	e62f      	b.n	e68 <ll_adv_enable+0x88>
    1208:	1afd498d 	.word	0x1afd498d
    120c:	00000007 	.word	0x00000007
    1210:	3b9aca00 	.word	0x3b9aca00
    1214:	0000b0a9 	.word	0x0000b0a9
    1218:	0000990d 	.word	0x0000990d
    121c:	0000abfd 	.word	0x0000abfd
    1220:	20001c94 	.word	0x20001c94
    1224:	84e72a00 	.word	0x84e72a00

00001228 <ull_adv_time_update>:
{
    1228:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    122a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
    122e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    1230:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
    1234:	460d      	mov	r5, r1
    1236:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1238:	2101      	movs	r1, #1
    123a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    123e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    1240:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1244:	f005 fe8e 	bl	6f64 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1248:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    124a:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    124c:	4628      	mov	r0, r5
    124e:	f009 fef3 	bl	b038 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    1252:	491d      	ldr	r1, [pc, #116]	; (12c8 <ull_adv_time_update+0xa0>)
    1254:	a31a      	add	r3, pc, #104	; (adr r3, 12c0 <ull_adv_time_update+0x98>)
    1256:	e9d3 2300 	ldrd	r2, r3, [r3]
    125a:	fba0 0101 	umull	r0, r1, r0, r1
    125e:	f7ff fb0d 	bl	87c <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    1262:	6923      	ldr	r3, [r4, #16]
    1264:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    1266:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    1268:	d220      	bcs.n	12ac <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    126a:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
    126c:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    126e:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1270:	4a16      	ldr	r2, [pc, #88]	; (12cc <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1272:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1274:	4b16      	ldr	r3, [pc, #88]	; (12d0 <ull_adv_time_update+0xa8>)
    1276:	1aa2      	subs	r2, r4, r2
    1278:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
    127c:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    127e:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1280:	2300      	movs	r3, #0
    1282:	440a      	add	r2, r1
    1284:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
    1286:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1288:	4912      	ldr	r1, [pc, #72]	; (12d4 <ull_adv_time_update+0xac>)
    128a:	9105      	str	r1, [sp, #20]
    128c:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1290:	2103      	movs	r1, #3
    1292:	b2d2      	uxtb	r2, r2
    1294:	9606      	str	r6, [sp, #24]
    1296:	9300      	str	r3, [sp, #0]
    1298:	4618      	mov	r0, r3
    129a:	f006 ff0d 	bl	80b8 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    129e:	4631      	mov	r1, r6
    12a0:	f009 f88c 	bl	a3bc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    12a4:	b948      	cbnz	r0, 12ba <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
    12a6:	6125      	str	r5, [r4, #16]
}
    12a8:	b00a      	add	sp, #40	; 0x28
    12aa:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    12ac:	d902      	bls.n	12b4 <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    12ae:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
    12b0:	2300      	movs	r3, #0
    12b2:	e7dc      	b.n	126e <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
    12b4:	2000      	movs	r0, #0
}
    12b6:	b00a      	add	sp, #40	; 0x28
    12b8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    12ba:	200c      	movs	r0, #12
}
    12bc:	b00a      	add	sp, #40	; 0x28
    12be:	bd70      	pop	{r4, r5, r6, pc}
    12c0:	1afd498d 	.word	0x1afd498d
    12c4:	00000007 	.word	0x00000007
    12c8:	3b9aca00 	.word	0x3b9aca00
    12cc:	20001c20 	.word	0x20001c20
    12d0:	8d3dcb09 	.word	0x8d3dcb09
    12d4:	0000990d 	.word	0x0000990d

000012d8 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    12d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    12dc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    12de:	8e46      	ldrh	r6, [r0, #50]	; 0x32
    12e0:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    12e2:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    12e6:	b2b6      	uxth	r6, r6
    12e8:	4431      	add	r1, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    12ea:	f013 0307 	ands.w	r3, r3, #7
{
    12ee:	b08b      	sub	sp, #44	; 0x2c
    12f0:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    12f2:	fa1f f981 	uxth.w	r9, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    12f6:	f040 81a3 	bne.w	1640 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b8>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    12fa:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
    12fe:	eba9 0107 	sub.w	r1, r9, r7
    1302:	fa1f f981 	uxth.w	r9, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1306:	0409      	lsls	r1, r1, #16
    1308:	f100 820c 	bmi.w	1724 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x39c>
    130c:	4690      	mov	r8, r2
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    130e:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
    1312:	2a00      	cmp	r2, #0
    1314:	f2c0 8135 	blt.w	1582 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1fa>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    1318:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    131c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1320:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    1324:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1328:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    132c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1330:	4293      	cmp	r3, r2
    1332:	d006      	beq.n	1342 <event_conn_upd_prep+0x6a>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1334:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1338:	f003 030f 	and.w	r3, r3, #15
    133c:	2b06      	cmp	r3, #6
    133e:	f000 8247 	beq.w	17d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x448>
	if (conn == conn_upd_curr) {
    1342:	4bb1      	ldr	r3, [pc, #708]	; (1608 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x280>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1344:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
    1348:	681a      	ldr	r2, [r3, #0]
    134a:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    134c:	bf04      	itt	eq
    134e:	2200      	moveq	r2, #0
    1350:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    1352:	2d00      	cmp	r5, #0
    1354:	f000 8144 	beq.w	15e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x258>
    1358:	6828      	ldr	r0, [r5, #0]
    135a:	2800      	cmp	r0, #0
    135c:	f000 8140 	beq.w	15e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x258>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1360:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    1364:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    1368:	6842      	ldr	r2, [r0, #4]
    136a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
    136e:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    1370:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1374:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
    1378:	f000 8117 	beq.w	15aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x222>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    137c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1380:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1382:	2318      	movs	r3, #24
    1384:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    1386:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    1388:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
    138c:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    138e:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
    1390:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1392:	4629      	mov	r1, r5
    1394:	f008 ff9a 	bl	a2cc <ll_rx_put>
		ll_rx_sched();
    1398:	f008 ffa2 	bl	a2e0 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    139c:	68a3      	ldr	r3, [r4, #8]
    139e:	2b00      	cmp	r3, #0
    13a0:	f2c0 80f7 	blt.w	1592 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20a>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    13a4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    13a6:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
    13aa:	fb10 f009 	smulbb	r0, r0, r9
    13ae:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    13b0:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    13b4:	fb15 f301 	smulbb	r3, r5, r1
    13b8:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    13ba:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    13bc:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    13c0:	f0c0 80ce 	bcc.w	1560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d8>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    13c4:	fb05 0111 	mls	r1, r5, r1, r0
    13c8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    13cc:	488f      	ldr	r0, [pc, #572]	; (160c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x284>)
    13ce:	b289      	uxth	r1, r1
    13d0:	fb03 f101 	mul.w	r1, r3, r1
    13d4:	fba1 0100 	umull	r0, r1, r1, r0
    13d8:	a389      	add	r3, pc, #548	; (adr r3, 1600 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x278>)
    13da:	e9d3 2300 	ldrd	r2, r3, [r3]
    13de:	f7ff fa4d 	bl	87c <__aeabi_uldivmod>
    13e2:	eba8 0800 	sub.w	r8, r8, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    13e6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    13e8:	441f      	add	r7, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    13ea:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    13ee:	1bbe      	subs	r6, r7, r6
    13f0:	4456      	add	r6, sl
		conn_interval_us = conn->llcp_cu.interval *
    13f2:	f240 47e2 	movw	r7, #1250	; 0x4e2
		} else if (lll->role) {
    13f6:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    13f8:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    13fa:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
    13fe:	f2c0 8196 	blt.w	172e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a6>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    1402:	4a83      	ldr	r2, [pc, #524]	; (1610 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x288>)
    1404:	4983      	ldr	r1, [pc, #524]	; (1614 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x28c>)
    1406:	4884      	ldr	r0, [pc, #528]	; (1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>)
    1408:	f640 438d 	movw	r3, #3213	; 0xc8d
    140c:	f016 feac 	bl	18168 <printk>
    1410:	4040      	eors	r0, r0
    1412:	f380 8811 	msr	BASEPRI, r0
    1416:	f04f 0003 	mov.w	r0, #3
    141a:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    141c:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    141e:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1420:	4a7e      	ldr	r2, [pc, #504]	; (161c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x294>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1422:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1426:	497e      	ldr	r1, [pc, #504]	; (1620 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x298>)
		lll->latency = conn->llcp_cu.latency;
    1428:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112
    142c:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    142e:	4432      	add	r2, r6
    1430:	fbb2 f2f6 	udiv	r2, r2, r6
    1434:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1438:	f242 7210 	movw	r2, #10000	; 0x2710
    143c:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1440:	4431      	add	r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1442:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1444:	fbb1 f1f6 	udiv	r1, r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1448:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
    144c:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    1450:	8563      	strh	r3, [r4, #42]	; 0x2a
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1452:	b28a      	uxth	r2, r1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1454:	1d83      	adds	r3, r0, #6
    1456:	429a      	cmp	r2, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1458:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    145c:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1460:	dd04      	ble.n	146c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe4>
    1462:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    1466:	33fa      	adds	r3, #250	; 0xfa
    1468:	441a      	add	r2, r3
    146a:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    146c:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1470:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
    1474:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    1476:	bf44      	itt	mi
    1478:	2300      	movmi	r3, #0
    147a:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    147e:	2102      	movs	r1, #2
    1480:	2001      	movs	r0, #1
    1482:	f012 fcb1 	bl	13de8 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1486:	2200      	movs	r2, #0
    1488:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    148a:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    148c:	2001      	movs	r0, #1
    148e:	f005 fc39 	bl	6d04 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1492:	4964      	ldr	r1, [pc, #400]	; (1624 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29c>)
    1494:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1498:	4620      	mov	r0, r4
    149a:	f005 fbc3 	bl	6c24 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    149e:	f100 0a03 	add.w	sl, r0, #3
    14a2:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    14a6:	4b60      	ldr	r3, [pc, #384]	; (1628 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a0>)
    14a8:	9400      	str	r4, [sp, #0]
    14aa:	4652      	mov	r2, sl
    14ac:	2101      	movs	r1, #1
    14ae:	2000      	movs	r0, #0
    14b0:	f006 fe1a 	bl	80e8 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    14b4:	f030 0302 	bics.w	r3, r0, #2
    14b8:	d00c      	beq.n	14d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14c>
    14ba:	4a55      	ldr	r2, [pc, #340]	; (1610 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x288>)
    14bc:	495b      	ldr	r1, [pc, #364]	; (162c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a4>)
    14be:	4856      	ldr	r0, [pc, #344]	; (1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>)
    14c0:	f640 43bc 	movw	r3, #3260	; 0xcbc
    14c4:	f016 fe50 	bl	18168 <printk>
    14c8:	4040      	eors	r0, r0
    14ca:	f380 8811 	msr	BASEPRI, r0
    14ce:	f04f 0003 	mov.w	r0, #3
    14d2:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    14d4:	4e4d      	ldr	r6, [pc, #308]	; (160c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x284>)
    14d6:	fbab 6b06 	umull	r6, fp, fp, r6
    14da:	a349      	add	r3, pc, #292	; (adr r3, 1600 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x278>)
    14dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    14e0:	4630      	mov	r0, r6
    14e2:	4659      	mov	r1, fp
    14e4:	f7ff f9ca 	bl	87c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    14e8:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    14ea:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    14ee:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    14f0:	484f      	ldr	r0, [pc, #316]	; (1630 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a8>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    14f2:	6923      	ldr	r3, [r4, #16]
    14f4:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    14f6:	fba5 0100 	umull	r0, r1, r5, r0
    14fa:	2307      	movs	r3, #7
    14fc:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1500:	4b4c      	ldr	r3, [pc, #304]	; (1634 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ac>)
    1502:	9307      	str	r3, [sp, #28]
    1504:	4b4c      	ldr	r3, [pc, #304]	; (1638 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b0>)
    1506:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
    1508:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    150a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
    150e:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1512:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1518:	2300      	movs	r3, #0
    151a:	f7ff f9af 	bl	87c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    151e:	4643      	mov	r3, r8
    1520:	e9cd 5001 	strd	r5, r0, [sp, #4]
    1524:	9700      	str	r7, [sp, #0]
    1526:	4652      	mov	r2, sl
    1528:	2101      	movs	r1, #1
    152a:	2000      	movs	r0, #0
    152c:	f006 fd52 	bl	7fd4 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1530:	f030 0302 	bics.w	r3, r0, #2
    1534:	d00c      	beq.n	1550 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c8>
    1536:	4a36      	ldr	r2, [pc, #216]	; (1610 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x288>)
    1538:	493c      	ldr	r1, [pc, #240]	; (162c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a4>)
    153a:	4837      	ldr	r0, [pc, #220]	; (1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>)
    153c:	f640 43d6 	movw	r3, #3286	; 0xcd6
    1540:	f016 fe12 	bl	18168 <printk>
    1544:	4040      	eors	r0, r0
    1546:	f380 8811 	msr	BASEPRI, r0
    154a:	f04f 0003 	mov.w	r0, #3
    154e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1550:	f1b9 0f00 	cmp.w	r9, #0
    1554:	f040 8136 	bne.w	17c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x43c>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    1558:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    155a:	b00b      	add	sp, #44	; 0x2c
    155c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1560:	1a1b      	subs	r3, r3, r0
    1562:	492a      	ldr	r1, [pc, #168]	; (160c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x284>)
    1564:	f240 40e2 	movw	r0, #1250	; 0x4e2
    1568:	fb03 f000 	mul.w	r0, r3, r0
    156c:	fba0 0101 	umull	r0, r1, r0, r1
    1570:	a323      	add	r3, pc, #140	; (adr r3, 1600 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x278>)
    1572:	e9d3 2300 	ldrd	r2, r3, [r3]
    1576:	f7ff f981 	bl	87c <__aeabi_uldivmod>
    157a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    157e:	4480      	add	r8, r0
    1580:	e731      	b.n	13e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5e>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    1582:	f890 20d9 	ldrb.w	r2, [r0, #217]	; 0xd9
    1586:	2a00      	cmp	r2, #0
    1588:	f43f aec6 	beq.w	1318 <event_conn_upd_prep+0x40>
			conn->periph.llcp_type = LLCP_NONE;
    158c:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
    1590:	e6c6      	b.n	1320 <event_conn_upd_prep+0x48>
			uint32_t ticks_prepare_to_start =
    1592:	68e1      	ldr	r1, [r4, #12]
    1594:	6862      	ldr	r2, [r4, #4]
			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1596:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    159a:	4291      	cmp	r1, r2
    159c:	bf2c      	ite	cs
    159e:	4488      	addcs	r8, r1
    15a0:	4490      	addcc	r8, r2
    15a2:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    15a4:	eba8 0803 	sub.w	r8, r8, r3
    15a8:	e6fc      	b.n	13a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c>
		if ((conn->llcp_cu.interval != lll->interval) ||
    15aa:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    15ae:	4594      	cmp	ip, r2
    15b0:	f47f aee4 	bne.w	137c <event_conn_upd_prep+0xa4>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    15b4:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    15b8:	fb0c fe03 	mul.w	lr, ip, r3
    15bc:	f242 7c10 	movw	ip, #10000	; 0x2710
    15c0:	fb0c ec01 	mla	ip, ip, r1, lr
    15c4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    15c8:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    15cc:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
    15d0:	fa1f fc8c 	uxth.w	ip, ip
    15d4:	45e6      	cmp	lr, ip
    15d6:	f47f aed1 	bne.w	137c <event_conn_upd_prep+0xa4>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    15da:	2301      	movs	r3, #1
    15dc:	712b      	strb	r3, [r5, #4]
    15de:	e6d8      	b.n	1392 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa>
		LL_ASSERT(rx && rx->hdr.link);
    15e0:	4a0b      	ldr	r2, [pc, #44]	; (1610 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x288>)
    15e2:	4916      	ldr	r1, [pc, #88]	; (163c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2b4>)
    15e4:	480c      	ldr	r0, [pc, #48]	; (1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>)
    15e6:	f640 4311 	movw	r3, #3089	; 0xc11
    15ea:	f016 fdbd 	bl	18168 <printk>
    15ee:	4040      	eors	r0, r0
    15f0:	f380 8811 	msr	BASEPRI, r0
    15f4:	f04f 0003 	mov.w	r0, #3
    15f8:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    15fa:	6828      	ldr	r0, [r5, #0]
    15fc:	e6b0      	b.n	1360 <event_conn_upd_prep+0x88>
    15fe:	bf00      	nop
    1600:	1afd498d 	.word	0x1afd498d
    1604:	00000007 	.word	0x00000007
    1608:	20001cb4 	.word	0x20001cb4
    160c:	3b9aca00 	.word	0x3b9aca00
    1610:	0001d244 	.word	0x0001d244
    1614:	0001ce44 	.word	0x0001ce44
    1618:	0001cde4 	.word	0x0001cde4
    161c:	026259ff 	.word	0x026259ff
    1620:	01c9c37f 	.word	0x01c9c37f
    1624:	20000ec8 	.word	0x20000ec8
    1628:	0000bb0d 	.word	0x0000bb0d
    162c:	0001d324 	.word	0x0001d324
    1630:	1afd498d 	.word	0x1afd498d
    1634:	0000bab5 	.word	0x0000bab5
    1638:	0001010d 	.word	0x0001010d
    163c:	0001d310 	.word	0x0001d310
		rx = ll_pdu_rx_alloc_peek(1);
    1640:	2001      	movs	r0, #1
    1642:	f008 fe53 	bl	a2ec <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1646:	4606      	mov	r6, r0
    1648:	2800      	cmp	r0, #0
    164a:	f000 80cf 	beq.w	17ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x464>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    164e:	4874      	ldr	r0, [pc, #464]	; (1820 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x498>)
    1650:	f005 fab2 	bl	6bb8 <mem_acquire>
		if (!tx) {
    1654:	4605      	mov	r5, r0
    1656:	2800      	cmp	r0, #0
    1658:	f000 80c8 	beq.w	17ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x464>
	if (!conn_upd_curr) {
    165c:	4b71      	ldr	r3, [pc, #452]	; (1824 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x49c>)
    165e:	681a      	ldr	r2, [r3, #0]
    1660:	2a00      	cmp	r2, #0
    1662:	f000 80bb 	beq.w	17dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x454>
		(void)ll_pdu_rx_alloc();
    1666:	f008 fe5f 	bl	a328 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    166a:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    166c:	6832      	ldr	r2, [r6, #0]
    166e:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    1672:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1674:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
    1678:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    167c:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    167e:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1680:	230c      	movs	r3, #12
    1682:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1684:	71e8      	strb	r0, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1686:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    168a:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    168c:	4a66      	ldr	r2, [pc, #408]	; (1828 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a0>)
    168e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
					      conn->lll.latency + 6;
    1692:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1694:	fba2 2303 	umull	r2, r3, r2, r3
    1698:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    169a:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    169e:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    16a2:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    16a6:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    16aa:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    16ae:	f8a5 300d 	strh.w	r3, [r5, #13]
					      conn->lll.latency + 6;
    16b2:	3106      	adds	r1, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    16b4:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    16b8:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
    16bc:	4449      	add	r1, r9
	    conn->tx_head &&
    16be:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
					      conn->lll.latency + 6;
    16c2:	b289      	uxth	r1, r1
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    16c4:	f360 0202 	bfi	r2, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    16c8:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    16cc:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    16d0:	f8a5 1011 	strh.w	r1, [r5, #17]
	if (
    16d4:	b1bb      	cbz	r3, 1706 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37e>
	    !conn->llcp_enc.pause_tx &&
    16d6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    16da:	0796      	lsls	r6, r2, #30
    16dc:	d413      	bmi.n	1706 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37e>
	    !conn->llcp_phy.pause_tx &&
    16de:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    16e2:	07d0      	lsls	r0, r2, #31
    16e4:	d40f      	bmi.n	1706 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x37e>
		if (conn->tx_head == conn->tx_data) {
    16e6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    16ea:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    16ec:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    16f0:	d07f      	beq.n	17f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x46a>
		} else if (!conn->tx_ctrl) {
    16f2:	b962      	cbnz	r2, 170e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x386>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    16f4:	791a      	ldrb	r2, [r3, #4]
    16f6:	f002 0203 	and.w	r2, r2, #3
    16fa:	2a03      	cmp	r2, #3
    16fc:	f000 8085 	beq.w	180a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x482>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1700:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    1704:	e005      	b.n	1712 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38a>
		if (!conn->tx_ctrl) {
    1706:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    170a:	2a00      	cmp	r2, #0
    170c:	d068      	beq.n	17e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x458>
	tx->next = conn->tx_ctrl_last->next;
    170e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    1712:	681a      	ldr	r2, [r3, #0]
    1714:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1716:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    1718:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    171a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    171e:	b90b      	cbnz	r3, 1724 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x39c>
		conn->tx_data_last = tx;
    1720:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
    1724:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    1728:	b00b      	add	sp, #44	; 0x2c
    172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				lll->periph.window_widening_periodic_us *
    172e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    1730:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1732:	fb02 3319 	mls	r3, r2, r9, r3
    1736:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1738:	f010 fbe6 	bl	11f08 <lll_clock_ppm_local_get>
    173c:	4605      	mov	r5, r0
    173e:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    1742:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1746:	f010 fbe1 	bl	11f0c <lll_clock_ppm_get>
    174a:	4405      	add	r5, r0
    174c:	fb06 f505 	mul.w	r5, r6, r5
    1750:	4b36      	ldr	r3, [pc, #216]	; (182c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a4>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1752:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1756:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    175a:	f205 253f 	addw	r5, r5, #575	; 0x23f
    175e:	fba3 3505 	umull	r3, r5, r3, r5
    1762:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1764:	fb07 f202 	mul.w	r2, r7, r2
			lll->periph.window_widening_prepare_us +=
    1768:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_size_prepare_us =
    176a:	6522      	str	r2, [r4, #80]	; 0x50
				lll->periph.window_widening_periodic_us *
    176c:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1770:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
    1772:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1774:	3a96      	subs	r2, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    1776:	4293      	cmp	r3, r2
    1778:	bf28      	it	cs
    177a:	4613      	movcs	r3, r2
			lll->periph.window_widening_periodic_us =
    177c:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->periph.window_widening_periodic_us;
    177e:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1782:	4d2b      	ldr	r5, [pc, #172]	; (1830 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a8>)
			lll->periph.window_widening_prepare_us +=
    1784:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
    1788:	2300      	movs	r3, #0
    178a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    178e:	fba0 0105 	umull	r0, r1, r0, r5
    1792:	a321      	add	r3, pc, #132	; (adr r3, 1818 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x490>)
    1794:	e9d3 2300 	ldrd	r2, r3, [r3]
    1798:	f7ff f870 	bl	87c <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    179c:	4922      	ldr	r1, [pc, #136]	; (1828 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a0>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    179e:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    17a2:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    17a6:	fba1 3000 	umull	r3, r0, r1, r0
    17aa:	0a80      	lsrs	r0, r0, #10
    17ac:	fb07 f000 	mul.w	r0, r7, r0
    17b0:	a319      	add	r3, pc, #100	; (adr r3, 1818 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x490>)
    17b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    17b6:	fba0 0105 	umull	r0, r1, r0, r5
    17ba:	f7ff f85f 	bl	87c <__aeabi_uldivmod>
    17be:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
    17c2:	e62d      	b.n	1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    17c4:	2201      	movs	r2, #1
    17c6:	2102      	movs	r1, #2
    17c8:	4610      	mov	r0, r2
    17ca:	f005 fa9b 	bl	6d04 <mayfly_enable>
    17ce:	e6c3      	b.n	1558 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d0>
			conn->procedure_expire = 0U;
    17d0:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    17d2:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    17d6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    17da:	e5b2      	b.n	1342 <event_conn_upd_prep+0x6a>
		conn_upd_curr = conn;
    17dc:	601c      	str	r4, [r3, #0]
    17de:	e742      	b.n	1666 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2de>
			tx->next = conn->tx_head;
    17e0:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    17e2:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    17e6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    17ea:	e798      	b.n	171e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x396>
			return -ENOBUFS;
    17ec:	f06f 0068 	mvn.w	r0, #104	; 0x68
    17f0:	e6b3      	b.n	155a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d2>
			conn->tx_data = conn->tx_data->next;
    17f2:	6819      	ldr	r1, [r3, #0]
    17f4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    17f8:	2a00      	cmp	r2, #0
    17fa:	d188      	bne.n	170e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x386>
			tx->next = conn->tx_head->next;
    17fc:	681a      	ldr	r2, [r3, #0]
    17fe:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    1800:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    1802:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    1804:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    1808:	e789      	b.n	171e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x396>
	    ((pdu_data_tx->llctrl.opcode !=
    180a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    180c:	2a03      	cmp	r2, #3
    180e:	d0f5      	beq.n	17fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x474>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1810:	2a0a      	cmp	r2, #10
    1812:	f47f af75 	bne.w	1700 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x378>
    1816:	e7f1      	b.n	17fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x474>
    1818:	1afd498d 	.word	0x1afd498d
    181c:	00000007 	.word	0x00000007
    1820:	20001d48 	.word	0x20001d48
    1824:	20001cb4 	.word	0x20001cb4
    1828:	d1b71759 	.word	0xd1b71759
    182c:	431bde83 	.word	0x431bde83
    1830:	3b9aca00 	.word	0x3b9aca00
    1834:	00000000 	.word	0x00000000

00001838 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    1838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    183c:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
    183e:	f8d2 8000 	ldr.w	r8, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1842:	681b      	ldr	r3, [r3, #0]
{
    1844:	b097      	sub	sp, #92	; 0x5c
    1846:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1848:	930a      	str	r3, [sp, #40]	; 0x28

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    184a:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    184c:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
    1850:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
    1854:	4605      	mov	r5, r0
    1856:	4617      	mov	r7, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1858:	a814      	add	r0, sp, #80	; 0x50
    185a:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
    185c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    1860:	f017 face 	bl	18e00 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    1864:	f894 9011 	ldrb.w	r9, [r4, #17]

	if (rl_idx != FILTER_IDX_NONE) {
    1868:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    186c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
    1870:	d05b      	beq.n	192a <ull_periph_setup+0xf2>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    1872:	465a      	mov	r2, fp
    1874:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    1878:	4648      	mov	r0, r9
    187a:	f00e ff59 	bl	10730 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
    187e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    1882:	3302      	adds	r3, #2
    1884:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    1888:	4629      	mov	r1, r5
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    188a:	2203      	movs	r2, #3
	link = rx->link;
    188c:	f851 6b2e 	ldr.w	r6, [r1], #46
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1890:	f107 0008 	add.w	r0, r7, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1894:	f107 0a04 	add.w	sl, r7, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    1898:	f017 fab2 	bl	18e00 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    189c:	f107 0318 	add.w	r3, r7, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    18a0:	2204      	movs	r2, #4
    18a2:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    18a6:	4650      	mov	r0, sl
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    18a8:	930b      	str	r3, [sp, #44]	; 0x2c
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    18aa:	f017 faa9 	bl	18e00 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    18ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18b0:	2205      	movs	r2, #5
    18b2:	f105 013a 	add.w	r1, r5, #58	; 0x3a
    18b6:	4618      	mov	r0, r3
    18b8:	f017 faa2 	bl	18e00 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    18bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18be:	2105      	movs	r1, #5
    18c0:	4618      	mov	r0, r3
    18c2:	f005 fb4f 	bl	6f64 <util_ones_count_get>
    18c6:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    18c8:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    18cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    18d0:	f360 0305 	bfi	r3, r0, #0, #6
    18d4:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    18d6:	f3c2 0304 	ubfx	r3, r2, #0, #5
    18da:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    18dc:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    18de:	81fb      	strh	r3, [r7, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    18e0:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    18e2:	b299      	uxth	r1, r3
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    18e4:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    18e8:	d905      	bls.n	18f6 <ull_periph_setup+0xbe>
    18ea:	331b      	adds	r3, #27
    18ec:	f003 031f 	and.w	r3, r3, #31
    18f0:	2b0b      	cmp	r3, #11
    18f2:	d800      	bhi.n	18f6 <ull_periph_setup+0xbe>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    18f4:	b9f9      	cbnz	r1, 1936 <ull_periph_setup+0xfe>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
    18f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
    18f8:	68ec      	ldr	r4, [r5, #12]
	hdr->disabled_cb = NULL;
    18fa:	2200      	movs	r2, #0
    18fc:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
    18fe:	f897 3020 	ldrb.w	r3, [r7, #32]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
    1902:	4630      	mov	r0, r6
	lll->periph.initiated = 0U;
    1904:	f362 0300 	bfi	r3, r2, #0, #1
	rx->type = NODE_RX_TYPE_RELEASE;
    1908:	2601      	movs	r6, #1
	lll->periph.initiated = 0U;
    190a:	f887 3020 	strb.w	r3, [r7, #32]
		ll_rx_put(link, rx);
    190e:	4629      	mov	r1, r5
	rx->type = NODE_RX_TYPE_RELEASE;
    1910:	712e      	strb	r6, [r5, #4]
		ll_rx_put(link, rx);
    1912:	f008 fcdb 	bl	a2cc <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    1916:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
    1918:	7126      	strb	r6, [r4, #4]
	ll_rx_put(link, rx);
    191a:	4621      	mov	r1, r4
    191c:	f008 fcd6 	bl	a2cc <ll_rx_put>
	ll_rx_sched();
    1920:	f008 fcde 	bl	a2e0 <ll_rx_sched>
}
    1924:	b017      	add	sp, #92	; 0x5c
    1926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    192a:	2206      	movs	r2, #6
    192c:	a914      	add	r1, sp, #80	; 0x50
    192e:	4658      	mov	r0, fp
    1930:	f017 fa66 	bl	18e00 <memcpy>
    1934:	e7a8      	b.n	1888 <ull_periph_setup+0x50>
	((struct lll_adv *)ftr->param)->conn = NULL;
    1936:	6823      	ldr	r3, [r4, #0]
    1938:	2000      	movs	r0, #0
    193a:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    193c:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    1940:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    1944:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    1948:	823b      	strh	r3, [r7, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    194a:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
    194e:	0952      	lsrs	r2, r2, #5
    1950:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    1954:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
    1956:	920d      	str	r2, [sp, #52]	; 0x34
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1958:	f240 42e2 	movw	r2, #1250	; 0x4e2
    195c:	fb02 f001 	mul.w	r0, r2, r1
	conn->periph.sca = pdu_adv->connect_ind.sca;
    1960:	f888 30d8 	strb.w	r3, [r8, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    1964:	900b      	str	r0, [sp, #44]	; 0x2c
		ceiling_fraction(((lll_clock_ppm_local_get() +
    1966:	f010 facf 	bl	11f08 <lll_clock_ppm_local_get>
    196a:	900c      	str	r0, [sp, #48]	; 0x30
    196c:	f898 00d8 	ldrb.w	r0, [r8, #216]	; 0xd8
    1970:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1974:	f010 faca 	bl	11f0c <lll_clock_ppm_get>
    1978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    197a:	49c5      	ldr	r1, [pc, #788]	; (1c90 <ull_periph_setup+0x458>)
    197c:	4403      	add	r3, r0
    197e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1980:	fb00 f303 	mul.w	r3, r0, r3
    1984:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1988:	f203 233f 	addw	r3, r3, #575	; 0x23f
    198c:	fba1 2303 	umull	r2, r3, r1, r3
    1990:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
    1992:	627b      	str	r3, [r7, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    1994:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1998:	8a39      	ldrh	r1, [r7, #16]
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    199a:	f240 42e2 	movw	r2, #1250	; 0x4e2
    199e:	fb03 f202 	mul.w	r2, r3, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    19a2:	0843      	lsrs	r3, r0, #1
    19a4:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    19a6:	63ba      	str	r2, [r7, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    19a8:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    19aa:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19ac:	4ab9      	ldr	r2, [pc, #740]	; (1c94 <ull_periph_setup+0x45c>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    19ae:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    19b2:	469e      	mov	lr, r3
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19b4:	4bb8      	ldr	r3, [pc, #736]	; (1c98 <ull_periph_setup+0x460>)
    19b6:	4684      	mov	ip, r0
    19b8:	4403      	add	r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19ba:	4402      	add	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19bc:	fbb3 f3f0 	udiv	r3, r3, r0
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19c0:	fbb2 f2f0 	udiv	r2, r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    19c4:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19c8:	f8a8 20c6 	strh.w	r2, [r8, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    19cc:	fa1f f28e 	uxth.w	r2, lr
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    19d0:	fb00 c202 	mla	r2, r0, r2, ip
    19d4:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19d6:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    19d8:	fbb2 f2fc 	udiv	r2, r2, ip
    19dc:	f8a8 20c2 	strh.w	r2, [r8, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19e0:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19e2:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19e4:	f8a8 20ce 	strh.w	r2, [r8, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19e8:	dd04      	ble.n	19f4 <ull_periph_setup+0x1bc>
    19ea:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    19ee:	31fa      	adds	r1, #250	; 0xfa
    19f0:	440a      	add	r2, r1
    19f2:	b292      	uxth	r2, r2
    19f4:	f8a8 20ca 	strh.w	r2, [r8, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
    19f8:	4651      	mov	r1, sl
    19fa:	2204      	movs	r2, #4
    19fc:	f108 00dc 	add.w	r0, r8, #220	; 0xdc
    1a00:	f017 f9fe 	bl	18e00 <memcpy>
		chan_sel = pdu_adv->chan_sel;
    1a04:	462b      	mov	r3, r5
    1a06:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    1a0a:	f3c2 1140 	ubfx	r1, r2, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1a0e:	07da      	lsls	r2, r3, #31
		chan_sel = pdu_adv->chan_sel;
    1a10:	910f      	str	r1, [sp, #60]	; 0x3c
    1a12:	910c      	str	r1, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1a14:	f100 8115 	bmi.w	1c42 <ull_periph_setup+0x40a>
	cc->status = 0U;
    1a18:	f44f 7380 	mov.w	r3, #256	; 0x100
    1a1c:	83ab      	strh	r3, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    1a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a20:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    1a24:	f00f fbf4 	bl	11210 <ull_filter_lll_lrpa_used>
    1a28:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    1a2a:	2206      	movs	r2, #6
    1a2c:	f105 002b 	add.w	r0, r5, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    1a30:	2900      	cmp	r1, #0
    1a32:	f000 80eb 	beq.w	1c0c <ull_periph_setup+0x3d4>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    1a36:	f105 0124 	add.w	r1, r5, #36	; 0x24
    1a3a:	f017 f9e1 	bl	18e00 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    1a3e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    1a42:	f105 0025 	add.w	r0, r5, #37	; 0x25
	if (rl_idx != FILTER_IDX_NONE) {
    1a46:	f000 80e4 	beq.w	1c12 <ull_periph_setup+0x3da>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    1a4a:	a914      	add	r1, sp, #80	; 0x50
    1a4c:	2206      	movs	r2, #6
    1a4e:	f017 f9d7 	bl	18e00 <memcpy>
	cc->peer_addr_type = peer_addr_type;
    1a52:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    1a56:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    1a58:	4659      	mov	r1, fp
    1a5a:	2206      	movs	r2, #6
    1a5c:	f105 001f 	add.w	r0, r5, #31
    1a60:	f017 f9ce 	bl	18e00 <memcpy>
	cc->sca = conn->periph.sca;
    1a64:	f898 30d8 	ldrb.w	r3, [r8, #216]	; 0xd8
	cc->interval = lll->interval;
    1a68:	89fa      	ldrh	r2, [r7, #14]
    1a6a:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
    1a6c:	8a3a      	ldrh	r2, [r7, #16]
    1a6e:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->periph.sca;
    1a70:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    1a74:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->periph.sca;
    1a78:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    1a7c:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    1a7e:	4640      	mov	r0, r8
    1a80:	f00a fc18 	bl	c2b4 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    1a84:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    1a86:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
    1a88:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    1a8a:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    1a8c:	4630      	mov	r0, r6
    1a8e:	f008 fc1d 	bl	a2cc <ll_rx_put>
		rx->handle = lll->handle;
    1a92:	89bb      	ldrh	r3, [r7, #12]
    1a94:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    1a96:	231b      	movs	r3, #27
    1a98:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    1a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    1a9c:	682e      	ldr	r6, [r5, #0]
		if (chan_sel) {
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	f040 80bc 	bne.w	1c1c <ull_periph_setup+0x3e4>
			cs->csa = 0x00;
    1aa4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    1aa8:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    1aaa:	4629      	mov	r1, r5
    1aac:	4630      	mov	r0, r6
    1aae:	f008 fc0d 	bl	a2cc <ll_rx_put>
	ll_rx_sched();
    1ab2:	f008 fc15 	bl	a2e0 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1ab6:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
    1aba:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
    1abe:	f8b7 6042 	ldrh.w	r6, [r7, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1ac2:	2101      	movs	r1, #1
    1ac4:	f000 0007 	and.w	r0, r0, #7
    1ac8:	f010 f82e 	bl	11b28 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1acc:	442e      	add	r6, r5
    1ace:	f506 76e1 	add.w	r6, r6, #450	; 0x1c2
    1ad2:	1831      	adds	r1, r6, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1ad4:	4682      	mov	sl, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1ad6:	4871      	ldr	r0, [pc, #452]	; (1c9c <ull_periph_setup+0x464>)
	conn->ull.ticks_active_to_start = 0U;
    1ad8:	f04f 0900 	mov.w	r9, #0
	conn->ull.ticks_prepare_to_start =
    1adc:	2331      	movs	r3, #49	; 0x31
    1ade:	f8c8 3008 	str.w	r3, [r8, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1ae2:	fba1 0100 	umull	r0, r1, r1, r0
    1ae6:	a368      	add	r3, pc, #416	; (adr r3, 1c88 <ull_periph_setup+0x450>)
    1ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
    1aec:	f8c8 9004 	str.w	r9, [r8, #4]
	conn->ull.ticks_preempt_to_start =
    1af0:	f8c8 900c 	str.w	r9, [r8, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1af4:	f7fe fec2 	bl	87c <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1afa:	6a7e      	ldr	r6, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1afc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
    1afe:	68e5      	ldr	r5, [r4, #12]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    1b00:	1b9e      	subs	r6, r3, r6
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1b02:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1b06:	fb03 5502 	mla	r5, r3, r2, r5
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1b0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    1b0e:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
	conn_offset_us -= ready_delay_us;
    1b12:	eba5 030a 	sub.w	r3, r5, sl
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1b16:	464a      	mov	r2, r9
    1b18:	2102      	movs	r1, #2
	conn->ull.ticks_slot =
    1b1a:	f8c8 0010 	str.w	r0, [r8, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1b1e:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    1b20:	930b      	str	r3, [sp, #44]	; 0x2c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1b22:	f005 f8ef 	bl	6d04 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    1b26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    1b28:	4628      	mov	r0, r5
    1b2a:	f009 fc85 	bl	b438 <ull_adv_handle_get>
    1b2e:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1b30:	4b5b      	ldr	r3, [pc, #364]	; (1ca0 <ull_periph_setup+0x468>)
    1b32:	9500      	str	r5, [sp, #0]
    1b34:	b2d2      	uxtb	r2, r2
    1b36:	4648      	mov	r0, r9
    1b38:	2101      	movs	r1, #1
    1b3a:	f006 fad5 	bl	80e8 <ticker_stop>
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    1b3e:	2801      	cmp	r0, #1
    1b40:	f000 808c 	beq.w	1c5c <ull_periph_setup+0x424>
	if (adv->lll.is_hdcd) {
    1b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    1b4a:	07db      	lsls	r3, r3, #31
    1b4c:	d471      	bmi.n	1c32 <ull_periph_setup+0x3fa>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1b4e:	4640      	mov	r0, r8
    1b50:	f00a fbb0 	bl	c2b4 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1b54:	f8df 9144 	ldr.w	r9, [pc, #324]	; 1c9c <ull_periph_setup+0x464>
    1b58:	fba6 5609 	umull	r5, r6, r6, r9
    1b5c:	a34a      	add	r3, pc, #296	; (adr r3, 1c88 <ull_periph_setup+0x450>)
    1b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1b62:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1b64:	4631      	mov	r1, r6
    1b66:	4628      	mov	r0, r5
    1b68:	f7fe fe88 	bl	87c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b6c:	68a3      	ldr	r3, [r4, #8]
    1b6e:	f8cd 8018 	str.w	r8, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1b72:	f10b 0403 	add.w	r4, fp, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b76:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
    1b7a:	4b4a      	ldr	r3, [pc, #296]	; (1ca4 <ull_periph_setup+0x46c>)
    1b7c:	9307      	str	r3, [sp, #28]
    1b7e:	4b4a      	ldr	r3, [pc, #296]	; (1ca8 <ull_periph_setup+0x470>)
    1b80:	9305      	str	r3, [sp, #20]
    1b82:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    1b86:	9308      	str	r3, [sp, #32]
    1b88:	f8d8 3010 	ldr.w	r3, [r8, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1b8c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    1b90:	4846      	ldr	r0, [pc, #280]	; (1cac <ull_periph_setup+0x474>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b92:	f04f 0a00 	mov.w	sl, #0
    1b96:	e9cd a303 	strd	sl, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1b9a:	fba7 0100 	umull	r0, r1, r7, r0
    1b9e:	2307      	movs	r3, #7
    1ba0:	1a28      	subs	r0, r5, r0
    1ba2:	fb03 1107 	mla	r1, r3, r7, r1
    1ba6:	eb66 0101 	sbc.w	r1, r6, r1
    1baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1bae:	2300      	movs	r3, #0
    1bb0:	f7fe fe64 	bl	87c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1bb6:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1bba:	fba3 0109 	umull	r0, r1, r3, r9
    1bbe:	a332      	add	r3, pc, #200	; (adr r3, 1c88 <ull_periph_setup+0x450>)
    1bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bc4:	f7fe fe5a 	bl	87c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1bc8:	b2e4      	uxtb	r4, r4
    1bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bce:	9000      	str	r0, [sp, #0]
    1bd0:	465b      	mov	r3, fp
    1bd2:	4622      	mov	r2, r4
    1bd4:	2101      	movs	r1, #1
    1bd6:	4650      	mov	r0, sl
    1bd8:	f006 f9fc 	bl	7fd4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1bdc:	f030 0302 	bics.w	r3, r0, #2
    1be0:	d00c      	beq.n	1bfc <ull_periph_setup+0x3c4>
    1be2:	4a33      	ldr	r2, [pc, #204]	; (1cb0 <ull_periph_setup+0x478>)
    1be4:	4933      	ldr	r1, [pc, #204]	; (1cb4 <ull_periph_setup+0x47c>)
    1be6:	4834      	ldr	r0, [pc, #208]	; (1cb8 <ull_periph_setup+0x480>)
    1be8:	f240 13c9 	movw	r3, #457	; 0x1c9
    1bec:	f016 fabc 	bl	18168 <printk>
    1bf0:	4040      	eors	r0, r0
    1bf2:	f380 8811 	msr	BASEPRI, r0
    1bf6:	f04f 0003 	mov.w	r0, #3
    1bfa:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    1bfc:	2201      	movs	r2, #1
    1bfe:	2102      	movs	r1, #2
    1c00:	4610      	mov	r0, r2
    1c02:	f005 f87f 	bl	6d04 <mayfly_enable>
}
    1c06:	b017      	add	sp, #92	; 0x5c
    1c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    1c0c:	f017 f903 	bl	18e16 <memset>
    1c10:	e715      	b.n	1a3e <ull_periph_setup+0x206>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
    1c12:	2206      	movs	r2, #6
    1c14:	2100      	movs	r1, #0
    1c16:	f017 f8fe 	bl	18e16 <memset>
    1c1a:	e71a      	b.n	1a52 <ull_periph_setup+0x21a>
			lll->data_chan_sel = 1;
    1c1c:	7f7b      	ldrb	r3, [r7, #29]
    1c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c22:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    1c24:	4650      	mov	r0, sl
    1c26:	f00e fb8f 	bl	10348 <lll_chan_id>
			cs->csa = 0x01;
    1c2a:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    1c2c:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
    1c2e:	772b      	strb	r3, [r5, #28]
    1c30:	e73b      	b.n	1aaa <ull_periph_setup+0x272>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1c32:	2300      	movs	r3, #0
    1c34:	2201      	movs	r2, #1
    1c36:	9300      	str	r3, [sp, #0]
    1c38:	4618      	mov	r0, r3
    1c3a:	4611      	mov	r1, r2
    1c3c:	f006 fa54 	bl	80e8 <ticker_stop>
    1c40:	e785      	b.n	1b4e <ull_periph_setup+0x316>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    1c42:	4a1b      	ldr	r2, [pc, #108]	; (1cb0 <ull_periph_setup+0x478>)
    1c44:	491d      	ldr	r1, [pc, #116]	; (1cbc <ull_periph_setup+0x484>)
    1c46:	481c      	ldr	r0, [pc, #112]	; (1cb8 <ull_periph_setup+0x480>)
    1c48:	23f1      	movs	r3, #241	; 0xf1
    1c4a:	f016 fa8d 	bl	18168 <printk>
    1c4e:	4040      	eors	r0, r0
    1c50:	f380 8811 	msr	BASEPRI, r0
    1c54:	f04f 0003 	mov.w	r0, #3
    1c58:	df02      	svc	2
    1c5a:	e6dd      	b.n	1a18 <ull_periph_setup+0x1e0>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    1c5c:	f008 fbec 	bl	a438 <ull_disable_mark_get>
    1c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c62:	4283      	cmp	r3, r0
    1c64:	f43f af6e 	beq.w	1b44 <ull_periph_setup+0x30c>
    1c68:	4a11      	ldr	r2, [pc, #68]	; (1cb0 <ull_periph_setup+0x478>)
    1c6a:	4915      	ldr	r1, [pc, #84]	; (1cc0 <ull_periph_setup+0x488>)
    1c6c:	4812      	ldr	r0, [pc, #72]	; (1cb8 <ull_periph_setup+0x480>)
    1c6e:	f240 239f 	movw	r3, #671	; 0x29f
    1c72:	f016 fa79 	bl	18168 <printk>
    1c76:	4040      	eors	r0, r0
    1c78:	f380 8811 	msr	BASEPRI, r0
    1c7c:	f04f 0003 	mov.w	r0, #3
    1c80:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    1c82:	e75f      	b.n	1b44 <ull_periph_setup+0x30c>
    1c84:	f3af 8000 	nop.w
    1c88:	1afd498d 	.word	0x1afd498d
    1c8c:	00000007 	.word	0x00000007
    1c90:	431bde83 	.word	0x431bde83
    1c94:	026259ff 	.word	0x026259ff
    1c98:	01c9c37f 	.word	0x01c9c37f
    1c9c:	3b9aca00 	.word	0x3b9aca00
    1ca0:	000100d1 	.word	0x000100d1
    1ca4:	000100a1 	.word	0x000100a1
    1ca8:	0001010d 	.word	0x0001010d
    1cac:	1afd498d 	.word	0x1afd498d
    1cb0:	0001d438 	.word	0x0001d438
    1cb4:	0001d324 	.word	0x0001d324
    1cb8:	0001cde4 	.word	0x0001cde4
    1cbc:	0001ced0 	.word	0x0001ced0
    1cc0:	0001d494 	.word	0x0001d494

00001cc4 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1cc4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    1cc6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1cc8:	b08a      	sub	sp, #40	; 0x28
    1cca:	4604      	mov	r4, r0
    1ccc:	460e      	mov	r6, r1
    1cce:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    1cd0:	2b03      	cmp	r3, #3
    1cd2:	d820      	bhi.n	1d16 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    1cd4:	e8df f003 	tbb	[pc, r3]
    1cd8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    1cdc:	4911      	ldr	r1, [pc, #68]	; (1d24 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    1cde:	4628      	mov	r0, r5
    1ce0:	f017 f845 	bl	18d6e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1ce4:	7863      	ldrb	r3, [r4, #1]
    1ce6:	9304      	str	r3, [sp, #16]
    1ce8:	78a3      	ldrb	r3, [r4, #2]
    1cea:	9303      	str	r3, [sp, #12]
    1cec:	78e3      	ldrb	r3, [r4, #3]
    1cee:	9302      	str	r3, [sp, #8]
    1cf0:	7923      	ldrb	r3, [r4, #4]
    1cf2:	9301      	str	r3, [sp, #4]
    1cf4:	7963      	ldrb	r3, [r4, #5]
    1cf6:	9300      	str	r3, [sp, #0]
    1cf8:	4a0b      	ldr	r2, [pc, #44]	; (1d28 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    1cfa:	79a3      	ldrb	r3, [r4, #6]
    1cfc:	9505      	str	r5, [sp, #20]
    1cfe:	211e      	movs	r1, #30
    1d00:	4630      	mov	r0, r6
    1d02:	f016 fa3e 	bl	18182 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    1d06:	b00a      	add	sp, #40	; 0x28
    1d08:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1d0a:	4908      	ldr	r1, [pc, #32]	; (1d2c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    1d0c:	e7e7      	b.n	1cde <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    1d0e:	4908      	ldr	r1, [pc, #32]	; (1d30 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    1d10:	e7e5      	b.n	1cde <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    1d12:	4908      	ldr	r1, [pc, #32]	; (1d34 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    1d14:	e7e3      	b.n	1cde <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1d16:	4a08      	ldr	r2, [pc, #32]	; (1d38 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    1d18:	210a      	movs	r1, #10
    1d1a:	4628      	mov	r0, r5
    1d1c:	f016 fa31 	bl	18182 <snprintk>
		break;
    1d20:	e7e0      	b.n	1ce4 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    1d22:	bf00      	nop
    1d24:	0001dd08 	.word	0x0001dd08
    1d28:	0001dd31 	.word	0x0001dd31
    1d2c:	0001dd0f 	.word	0x0001dd0f
    1d30:	0001dd16 	.word	0x0001dd16
    1d34:	0001dd20 	.word	0x0001dd20
    1d38:	0001dd2a 	.word	0x0001dd2a

00001d3c <disconnecting>:
static void disconnecting(struct bt_conn *conn, uint8_t reason) {
    1d3c:	b510      	push	{r4, lr}
    1d3e:	b088      	sub	sp, #32
    1d40:	460c      	mov	r4, r1
  bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    1d42:	f017 fe61 	bl	19a08 <bt_conn_get_dst>
    1d46:	4669      	mov	r1, sp
    1d48:	f7ff ffbc 	bl	1cc4 <bt_addr_le_to_str.constprop.0.isra.0>
  printk("Disconnected %s (reason 0x%02x)\n", addr, reason);
    1d4c:	4803      	ldr	r0, [pc, #12]	; (1d5c <disconnecting+0x20>)
    1d4e:	4622      	mov	r2, r4
    1d50:	4669      	mov	r1, sp
    1d52:	f016 fa09 	bl	18168 <printk>
}
    1d56:	b008      	add	sp, #32
    1d58:	bd10      	pop	{r4, pc}
    1d5a:	bf00      	nop
    1d5c:	0001dd54 	.word	0x0001dd54

00001d60 <connection_established>:
static void connection_established(struct bt_conn *conn, uint8_t err) {
    1d60:	b500      	push	{lr}
    1d62:	b089      	sub	sp, #36	; 0x24
  if (err) {
    1d64:	b129      	cbz	r1, 1d72 <connection_established+0x12>
    printk("Connection failed (err 0x%02x)\n", err);
    1d66:	4809      	ldr	r0, [pc, #36]	; (1d8c <connection_established+0x2c>)
}
    1d68:	b009      	add	sp, #36	; 0x24
    1d6a:	f85d eb04 	ldr.w	lr, [sp], #4
    printk("Connection failed (err 0x%02x)\n", err);
    1d6e:	f016 b9fb 	b.w	18168 <printk>
  bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    1d72:	f017 fe49 	bl	19a08 <bt_conn_get_dst>
    1d76:	4669      	mov	r1, sp
    1d78:	f7ff ffa4 	bl	1cc4 <bt_addr_le_to_str.constprop.0.isra.0>
  printk("Connected: %s\n", addr);
    1d7c:	4804      	ldr	r0, [pc, #16]	; (1d90 <connection_established+0x30>)
    1d7e:	4669      	mov	r1, sp
    1d80:	f016 f9f2 	bl	18168 <printk>
}
    1d84:	b009      	add	sp, #36	; 0x24
    1d86:	f85d fb04 	ldr.w	pc, [sp], #4
    1d8a:	bf00      	nop
    1d8c:	0001dd75 	.word	0x0001dd75
    1d90:	0001dd95 	.word	0x0001dd95

00001d94 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1d94:	680b      	ldr	r3, [r1, #0]
    1d96:	3301      	adds	r3, #1
    1d98:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1d9a:	4b01      	ldr	r3, [pc, #4]	; (1da0 <char_out+0xc>)
    1d9c:	681b      	ldr	r3, [r3, #0]
    1d9e:	4718      	bx	r3
    1da0:	20000194 	.word	0x20000194

00001da4 <__printk_hook_install>:
	_char_out = fn;
    1da4:	4b01      	ldr	r3, [pc, #4]	; (1dac <__printk_hook_install+0x8>)
    1da6:	6018      	str	r0, [r3, #0]
}
    1da8:	4770      	bx	lr
    1daa:	bf00      	nop
    1dac:	20000194 	.word	0x20000194

00001db0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    1db0:	b507      	push	{r0, r1, r2, lr}
    1db2:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    1db4:	2100      	movs	r1, #0
{
    1db6:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
    1db8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    1dba:	4803      	ldr	r0, [pc, #12]	; (1dc8 <vprintk+0x18>)
    1dbc:	a901      	add	r1, sp, #4
    1dbe:	f000 f8f9 	bl	1fb4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    1dc2:	b003      	add	sp, #12
    1dc4:	f85d fb04 	ldr.w	pc, [sp], #4
    1dc8:	00001d95 	.word	0x00001d95

00001dcc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1dcc:	b530      	push	{r4, r5, lr}
    1dce:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1dd0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1dd4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1dd6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    1dd8:	a901      	add	r1, sp, #4
    1dda:	4805      	ldr	r0, [pc, #20]	; (1df0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1ddc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    1dde:	f000 f8e9 	bl	1fb4 <cbvprintf>

	if (ctx.count < ctx.max) {
    1de2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1de6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1de8:	bfb8      	it	lt
    1dea:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1dec:	b005      	add	sp, #20
    1dee:	bd30      	pop	{r4, r5, pc}
    1df0:	00018143 	.word	0x00018143

00001df4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1df8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1dfc:	f019 0808 	ands.w	r8, r9, #8
{
    1e00:	4604      	mov	r4, r0
    1e02:	4693      	mov	fp, r2
	if (processing) {
    1e04:	d00d      	beq.n	1e22 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1e06:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1e08:	bf0c      	ite	eq
    1e0a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1e0e:	f049 0920 	orrne.w	r9, r9, #32
    1e12:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1e16:	f38b 8811 	msr	BASEPRI, fp
    1e1a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1e1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1e22:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1e26:	2902      	cmp	r1, #2
    1e28:	d107      	bne.n	1e3a <process_event+0x46>
			evt = process_recheck(mgr);
    1e2a:	4620      	mov	r0, r4
    1e2c:	f016 f9b6 	bl	1819c <process_recheck>
		if (evt == EVT_NOP) {
    1e30:	2800      	cmp	r0, #0
    1e32:	d0f0      	beq.n	1e16 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1e34:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e36:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    1e38:	d14e      	bne.n	1ed8 <process_event+0xe4>
			res = mgr->last_res;
    1e3a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1e3c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1e3e:	2f00      	cmp	r7, #0
    1e40:	da15      	bge.n	1e6e <process_event+0x7a>
		*clients = mgr->clients;
    1e42:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e44:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1e48:	e9c4 8800 	strd	r8, r8, [r4]
    1e4c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e50:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1e52:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1e54:	8b21      	ldrh	r1, [r4, #24]
    1e56:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1e5a:	45ca      	cmp	sl, r9
    1e5c:	d002      	beq.n	1e64 <process_event+0x70>
		if (do_monitors
    1e5e:	68a3      	ldr	r3, [r4, #8]
    1e60:	2b00      	cmp	r3, #0
    1e62:	d15a      	bne.n	1f1a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    1e64:	b90d      	cbnz	r5, 1e6a <process_event+0x76>
		    || (transit != NULL)) {
    1e66:	2e00      	cmp	r6, #0
    1e68:	d071      	beq.n	1f4e <process_event+0x15a>
    1e6a:	2300      	movs	r3, #0
    1e6c:	e056      	b.n	1f1c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1e6e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1e72:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1e74:	2a01      	cmp	r2, #1
    1e76:	d81e      	bhi.n	1eb6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e78:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1e7c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1e7e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e80:	b289      	uxth	r1, r1
    1e82:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1e86:	d10a      	bne.n	1e9e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1e88:	b13d      	cbz	r5, 1e9a <process_event+0xa6>
    1e8a:	8b63      	ldrh	r3, [r4, #26]
    1e8c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1e8e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1e90:	3301      	adds	r3, #1
    1e92:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1e94:	2a00      	cmp	r2, #0
    1e96:	d1fa      	bne.n	1e8e <process_event+0x9a>
    1e98:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1e9a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1e9e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1ea0:	4620      	mov	r0, r4
    1ea2:	f016 f97b 	bl	1819c <process_recheck>
    1ea6:	4606      	mov	r6, r0
    1ea8:	2800      	cmp	r0, #0
    1eaa:	d0d3      	beq.n	1e54 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1eac:	8b23      	ldrh	r3, [r4, #24]
    1eae:	f043 0320 	orr.w	r3, r3, #32
    1eb2:	8323      	strh	r3, [r4, #24]
    1eb4:	e7cd      	b.n	1e52 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1eb6:	2b04      	cmp	r3, #4
    1eb8:	d10c      	bne.n	1ed4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1eba:	f021 0107 	bic.w	r1, r1, #7
    1ebe:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ec0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1ec2:	4620      	mov	r0, r4
    1ec4:	f016 f96a 	bl	1819c <process_recheck>
    1ec8:	4605      	mov	r5, r0
    1eca:	2800      	cmp	r0, #0
    1ecc:	d0c1      	beq.n	1e52 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1ece:	f041 0120 	orr.w	r1, r1, #32
    1ed2:	8321      	strh	r1, [r4, #24]
    1ed4:	2500      	movs	r5, #0
    1ed6:	e7bc      	b.n	1e52 <process_event+0x5e>
		} else if (evt == EVT_START) {
    1ed8:	2803      	cmp	r0, #3
    1eda:	d109      	bne.n	1ef0 <process_event+0xfc>
			transit = mgr->transitions->start;
    1edc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ede:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1ee2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ee4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ee8:	8323      	strh	r3, [r4, #24]
}
    1eea:	2500      	movs	r5, #0
		res = 0;
    1eec:	462f      	mov	r7, r5
    1eee:	e7b1      	b.n	1e54 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1ef0:	2804      	cmp	r0, #4
    1ef2:	d106      	bne.n	1f02 <process_event+0x10e>
			transit = mgr->transitions->stop;
    1ef4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ef6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1efa:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1efc:	f043 0304 	orr.w	r3, r3, #4
    1f00:	e7f2      	b.n	1ee8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    1f02:	2805      	cmp	r0, #5
    1f04:	d106      	bne.n	1f14 <process_event+0x120>
			transit = mgr->transitions->reset;
    1f06:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f08:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1f0c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f0e:	f043 0305 	orr.w	r3, r3, #5
    1f12:	e7e9      	b.n	1ee8 <process_event+0xf4>
    1f14:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1f16:	462e      	mov	r6, r5
    1f18:	e7e8      	b.n	1eec <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    1f1a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1f1c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1f20:	8321      	strh	r1, [r4, #24]
    1f22:	f38b 8811 	msr	BASEPRI, fp
    1f26:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1f2a:	b9fb      	cbnz	r3, 1f6c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    1f2c:	bb85      	cbnz	r5, 1f90 <process_event+0x19c>
			if (transit != NULL) {
    1f2e:	b116      	cbz	r6, 1f36 <process_event+0x142>
				transit(mgr, transition_complete);
    1f30:	491f      	ldr	r1, [pc, #124]	; (1fb0 <process_event+0x1bc>)
    1f32:	4620      	mov	r0, r4
    1f34:	47b0      	blx	r6
	__asm__ volatile(
    1f36:	f04f 0320 	mov.w	r3, #32
    1f3a:	f3ef 8b11 	mrs	fp, BASEPRI
    1f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    1f42:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1f46:	8b23      	ldrh	r3, [r4, #24]
    1f48:	f023 0308 	bic.w	r3, r3, #8
    1f4c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1f4e:	8b23      	ldrh	r3, [r4, #24]
    1f50:	06da      	lsls	r2, r3, #27
    1f52:	d525      	bpl.n	1fa0 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1f54:	f023 0310 	bic.w	r3, r3, #16
    1f58:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1f5a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1f5c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1f60:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1f64:	2900      	cmp	r1, #0
    1f66:	f47f af5e 	bne.w	1e26 <process_event+0x32>
out:
    1f6a:	e754      	b.n	1e16 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1f6c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1f6e:	2900      	cmp	r1, #0
    1f70:	d0dc      	beq.n	1f2c <process_event+0x138>
	return node->next;
    1f72:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    1f76:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1f7a:	463b      	mov	r3, r7
    1f7c:	4652      	mov	r2, sl
    1f7e:	4620      	mov	r0, r4
    1f80:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1f82:	f1b9 0f00 	cmp.w	r9, #0
    1f86:	d0d1      	beq.n	1f2c <process_event+0x138>
    1f88:	4649      	mov	r1, r9
    1f8a:	f8d9 9000 	ldr.w	r9, [r9]
    1f8e:	e7f2      	b.n	1f76 <process_event+0x182>
    1f90:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1f92:	463b      	mov	r3, r7
    1f94:	4652      	mov	r2, sl
    1f96:	4620      	mov	r0, r4
    1f98:	682d      	ldr	r5, [r5, #0]
    1f9a:	f016 f91b 	bl	181d4 <notify_one>
    1f9e:	e7c5      	b.n	1f2c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1fa0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1fa4:	bf1e      	ittt	ne
    1fa6:	f023 0320 	bicne.w	r3, r3, #32
    1faa:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1fac:	2102      	movne	r1, #2
    1fae:	e7d5      	b.n	1f5c <process_event+0x168>
    1fb0:	00018201 	.word	0x00018201

00001fb4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fb8:	4681      	mov	r9, r0
    1fba:	b09b      	sub	sp, #108	; 0x6c
    1fbc:	468a      	mov	sl, r1
    1fbe:	4615      	mov	r5, r2
    1fc0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1fc2:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1fc4:	7828      	ldrb	r0, [r5, #0]
    1fc6:	b910      	cbnz	r0, 1fce <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1fc8:	4630      	mov	r0, r6
    1fca:	f000 bdee 	b.w	2baa <cbvprintf+0xbf6>
			OUTC(*fp++);
    1fce:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    1fd0:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1fd2:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    1fd4:	d006      	beq.n	1fe4 <cbvprintf+0x30>
			OUTC(*fp++);
    1fd6:	4651      	mov	r1, sl
			OUTC('%');
    1fd8:	47c8      	blx	r9
    1fda:	2800      	cmp	r0, #0
    1fdc:	f2c0 85e5 	blt.w	2baa <cbvprintf+0xbf6>
    1fe0:	3601      	adds	r6, #1
		if (bps == NULL) {
    1fe2:	e24c      	b.n	247e <cbvprintf+0x4ca>
		} state = {
    1fe4:	2218      	movs	r2, #24
    1fe6:	2100      	movs	r1, #0
    1fe8:	a80c      	add	r0, sp, #48	; 0x30
    1fea:	f016 ff14 	bl	18e16 <memset>
	if (*sp == '%') {
    1fee:	786b      	ldrb	r3, [r5, #1]
    1ff0:	2b25      	cmp	r3, #37	; 0x25
    1ff2:	d07c      	beq.n	20ee <cbvprintf+0x13a>
    1ff4:	2200      	movs	r2, #0
    1ff6:	1c68      	adds	r0, r5, #1
    1ff8:	4696      	mov	lr, r2
    1ffa:	4690      	mov	r8, r2
    1ffc:	4694      	mov	ip, r2
    1ffe:	4617      	mov	r7, r2
    2000:	4601      	mov	r1, r0
		switch (*sp) {
    2002:	f810 3b01 	ldrb.w	r3, [r0], #1
    2006:	2b2b      	cmp	r3, #43	; 0x2b
    2008:	f000 80a0 	beq.w	214c <cbvprintf+0x198>
    200c:	f200 8097 	bhi.w	213e <cbvprintf+0x18a>
    2010:	2b20      	cmp	r3, #32
    2012:	f000 809e 	beq.w	2152 <cbvprintf+0x19e>
    2016:	2b23      	cmp	r3, #35	; 0x23
    2018:	f000 809e 	beq.w	2158 <cbvprintf+0x1a4>
    201c:	b12f      	cbz	r7, 202a <cbvprintf+0x76>
    201e:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    2022:	f040 0004 	orr.w	r0, r0, #4
    2026:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    202a:	f1bc 0f00 	cmp.w	ip, #0
    202e:	d005      	beq.n	203c <cbvprintf+0x88>
    2030:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    2034:	f040 0008 	orr.w	r0, r0, #8
    2038:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    203c:	f1b8 0f00 	cmp.w	r8, #0
    2040:	d005      	beq.n	204e <cbvprintf+0x9a>
    2042:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    2046:	f040 0010 	orr.w	r0, r0, #16
    204a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    204e:	f1be 0f00 	cmp.w	lr, #0
    2052:	d005      	beq.n	2060 <cbvprintf+0xac>
    2054:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    2058:	f040 0020 	orr.w	r0, r0, #32
    205c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    2060:	b12a      	cbz	r2, 206e <cbvprintf+0xba>
    2062:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    206a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    206e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2072:	f002 0044 	and.w	r0, r2, #68	; 0x44
    2076:	2844      	cmp	r0, #68	; 0x44
    2078:	d103      	bne.n	2082 <cbvprintf+0xce>
		conv->flag_zero = false;
    207a:	f36f 1286 	bfc	r2, #6, #1
    207e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    2082:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    2086:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    2088:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    208c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    2090:	d17e      	bne.n	2190 <cbvprintf+0x1dc>
		conv->width_star = true;
    2092:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2096:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    209a:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    209c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    20a0:	781a      	ldrb	r2, [r3, #0]
    20a2:	2a2e      	cmp	r2, #46	; 0x2e
    20a4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    20a8:	bf0c      	ite	eq
    20aa:	2101      	moveq	r1, #1
    20ac:	2100      	movne	r1, #0
    20ae:	f361 0241 	bfi	r2, r1, #1, #1
    20b2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    20b6:	d177      	bne.n	21a8 <cbvprintf+0x1f4>
	if (*sp == '*') {
    20b8:	785a      	ldrb	r2, [r3, #1]
    20ba:	2a2a      	cmp	r2, #42	; 0x2a
    20bc:	d06d      	beq.n	219a <cbvprintf+0x1e6>
	++sp;
    20be:	3301      	adds	r3, #1
	size_t val = 0;
    20c0:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    20c2:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    20c6:	4618      	mov	r0, r3
    20c8:	f810 2b01 	ldrb.w	r2, [r0], #1
    20cc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    20d0:	2f09      	cmp	r7, #9
    20d2:	f240 80ab 	bls.w	222c <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    20d6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    20da:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    20dc:	f3c2 0040 	ubfx	r0, r2, #1, #1
    20e0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    20e4:	f361 0241 	bfi	r2, r1, #1, #1
    20e8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    20ec:	e05c      	b.n	21a8 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    20ee:	1caa      	adds	r2, r5, #2
    20f0:	9202      	str	r2, [sp, #8]
    20f2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    20f6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    20fa:	07df      	lsls	r7, r3, #31
    20fc:	f140 8173 	bpl.w	23e6 <cbvprintf+0x432>
			width = va_arg(ap, int);
    2100:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    2104:	f1bb 0f00 	cmp.w	fp, #0
    2108:	da07      	bge.n	211a <cbvprintf+0x166>
				conv->flag_dash = true;
    210a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    210e:	f042 0204 	orr.w	r2, r2, #4
    2112:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    2116:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    211a:	0758      	lsls	r0, r3, #29
    211c:	f140 816c 	bpl.w	23f8 <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    2120:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    2124:	f1b8 0f00 	cmp.w	r8, #0
    2128:	f280 816b 	bge.w	2402 <cbvprintf+0x44e>
				conv->prec_present = false;
    212c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2130:	f36f 0341 	bfc	r3, #1, #1
    2134:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    2138:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    213c:	e161      	b.n	2402 <cbvprintf+0x44e>
		switch (*sp) {
    213e:	2b2d      	cmp	r3, #45	; 0x2d
    2140:	d00d      	beq.n	215e <cbvprintf+0x1aa>
    2142:	2b30      	cmp	r3, #48	; 0x30
    2144:	f47f af6a 	bne.w	201c <cbvprintf+0x68>
			conv->flag_zero = true;
    2148:	2201      	movs	r2, #1
	} while (loop);
    214a:	e759      	b.n	2000 <cbvprintf+0x4c>
			conv->flag_plus = true;
    214c:	f04f 0c01 	mov.w	ip, #1
    2150:	e756      	b.n	2000 <cbvprintf+0x4c>
			conv->flag_space = true;
    2152:	f04f 0801 	mov.w	r8, #1
    2156:	e753      	b.n	2000 <cbvprintf+0x4c>
			conv->flag_hash = true;
    2158:	f04f 0e01 	mov.w	lr, #1
    215c:	e750      	b.n	2000 <cbvprintf+0x4c>
		switch (*sp) {
    215e:	2701      	movs	r7, #1
    2160:	e74e      	b.n	2000 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    2162:	fb0c 7202 	mla	r2, ip, r2, r7
    2166:	3a30      	subs	r2, #48	; 0x30
    2168:	4603      	mov	r3, r0
    216a:	4618      	mov	r0, r3
    216c:	f810 7b01 	ldrb.w	r7, [r0], #1
    2170:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    2174:	f1be 0f09 	cmp.w	lr, #9
    2178:	d9f3      	bls.n	2162 <cbvprintf+0x1ae>
	if (sp != wp) {
    217a:	4299      	cmp	r1, r3
    217c:	d090      	beq.n	20a0 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    217e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    2182:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    2184:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    2186:	f362 0141 	bfi	r1, r2, #1, #1
    218a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    218e:	e787      	b.n	20a0 <cbvprintf+0xec>
    2190:	460b      	mov	r3, r1
	size_t val = 0;
    2192:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    2194:	f04f 0c0a 	mov.w	ip, #10
    2198:	e7e7      	b.n	216a <cbvprintf+0x1b6>
		conv->prec_star = true;
    219a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    219e:	f042 0204 	orr.w	r2, r2, #4
    21a2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    21a6:	3302      	adds	r3, #2
	switch (*sp) {
    21a8:	4619      	mov	r1, r3
    21aa:	f811 2b01 	ldrb.w	r2, [r1], #1
    21ae:	2a6c      	cmp	r2, #108	; 0x6c
    21b0:	d05c      	beq.n	226c <cbvprintf+0x2b8>
    21b2:	d840      	bhi.n	2236 <cbvprintf+0x282>
    21b4:	2a68      	cmp	r2, #104	; 0x68
    21b6:	d046      	beq.n	2246 <cbvprintf+0x292>
    21b8:	2a6a      	cmp	r2, #106	; 0x6a
    21ba:	d061      	beq.n	2280 <cbvprintf+0x2cc>
    21bc:	2a4c      	cmp	r2, #76	; 0x4c
    21be:	d067      	beq.n	2290 <cbvprintf+0x2dc>
    21c0:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    21c2:	460b      	mov	r3, r1
    21c4:	f813 2b01 	ldrb.w	r2, [r3], #1
    21c8:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    21ca:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    21cc:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    21d0:	f200 80df 	bhi.w	2392 <cbvprintf+0x3de>
    21d4:	2a57      	cmp	r2, #87	; 0x57
    21d6:	d868      	bhi.n	22aa <cbvprintf+0x2f6>
    21d8:	2a41      	cmp	r2, #65	; 0x41
    21da:	d004      	beq.n	21e6 <cbvprintf+0x232>
    21dc:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    21e0:	2b02      	cmp	r3, #2
    21e2:	f200 80d6 	bhi.w	2392 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    21e6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    21ea:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    21ee:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    21f0:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    21f4:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    21f8:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    21fc:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    2200:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    2204:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    2208:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    220c:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    220e:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    2212:	b2cb      	uxtb	r3, r1
    2214:	f100 80e5 	bmi.w	23e2 <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    2218:	f003 0278 	and.w	r2, r3, #120	; 0x78
    221c:	2a18      	cmp	r2, #24
    221e:	f040 80b5 	bne.w	238c <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    2222:	f36f 03c6 	bfc	r3, #3, #4
    2226:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    222a:	e09c      	b.n	2366 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    222c:	fb0c 2101 	mla	r1, ip, r1, r2
    2230:	3930      	subs	r1, #48	; 0x30
    2232:	4603      	mov	r3, r0
    2234:	e747      	b.n	20c6 <cbvprintf+0x112>
	switch (*sp) {
    2236:	2a74      	cmp	r2, #116	; 0x74
    2238:	d026      	beq.n	2288 <cbvprintf+0x2d4>
    223a:	2a7a      	cmp	r2, #122	; 0x7a
    223c:	d1c0      	bne.n	21c0 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    223e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2242:	2206      	movs	r2, #6
    2244:	e00d      	b.n	2262 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    2246:	785a      	ldrb	r2, [r3, #1]
    2248:	2a68      	cmp	r2, #104	; 0x68
    224a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    224e:	d106      	bne.n	225e <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    2250:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2252:	f361 02c6 	bfi	r2, r1, #3, #4
    2256:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    225a:	1c99      	adds	r1, r3, #2
    225c:	e7b1      	b.n	21c2 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    225e:	4613      	mov	r3, r2
    2260:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    2262:	f362 03c6 	bfi	r3, r2, #3, #4
    2266:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    226a:	e7aa      	b.n	21c2 <cbvprintf+0x20e>
		if (*++sp == 'l') {
    226c:	785a      	ldrb	r2, [r3, #1]
    226e:	2a6c      	cmp	r2, #108	; 0x6c
    2270:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2274:	d101      	bne.n	227a <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    2276:	2104      	movs	r1, #4
    2278:	e7eb      	b.n	2252 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    227a:	4613      	mov	r3, r2
    227c:	2203      	movs	r2, #3
    227e:	e7f0      	b.n	2262 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    2280:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2284:	2205      	movs	r2, #5
    2286:	e7ec      	b.n	2262 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    2288:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    228c:	2207      	movs	r2, #7
    228e:	e7e8      	b.n	2262 <cbvprintf+0x2ae>
		conv->unsupported = true;
    2290:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    2294:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    2298:	f023 0302 	bic.w	r3, r3, #2
    229c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    22a0:	f043 0302 	orr.w	r3, r3, #2
    22a4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    22a8:	e78b      	b.n	21c2 <cbvprintf+0x20e>
	switch (conv->specifier) {
    22aa:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    22ae:	2b20      	cmp	r3, #32
    22b0:	d86f      	bhi.n	2392 <cbvprintf+0x3de>
    22b2:	a101      	add	r1, pc, #4	; (adr r1, 22b8 <cbvprintf+0x304>)
    22b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    22b8:	0000236b 	.word	0x0000236b
    22bc:	00002393 	.word	0x00002393
    22c0:	00002393 	.word	0x00002393
    22c4:	00002393 	.word	0x00002393
    22c8:	00002393 	.word	0x00002393
    22cc:	00002393 	.word	0x00002393
    22d0:	00002393 	.word	0x00002393
    22d4:	00002393 	.word	0x00002393
    22d8:	00002393 	.word	0x00002393
    22dc:	000021e7 	.word	0x000021e7
    22e0:	00002393 	.word	0x00002393
    22e4:	0000236b 	.word	0x0000236b
    22e8:	0000233d 	.word	0x0000233d
    22ec:	000021e7 	.word	0x000021e7
    22f0:	000021e7 	.word	0x000021e7
    22f4:	000021e7 	.word	0x000021e7
    22f8:	00002393 	.word	0x00002393
    22fc:	0000233d 	.word	0x0000233d
    2300:	00002393 	.word	0x00002393
    2304:	00002393 	.word	0x00002393
    2308:	00002393 	.word	0x00002393
    230c:	00002393 	.word	0x00002393
    2310:	000023a1 	.word	0x000023a1
    2314:	0000236b 	.word	0x0000236b
    2318:	000023c5 	.word	0x000023c5
    231c:	00002393 	.word	0x00002393
    2320:	00002393 	.word	0x00002393
    2324:	000023c5 	.word	0x000023c5
    2328:	00002393 	.word	0x00002393
    232c:	0000236b 	.word	0x0000236b
    2330:	00002393 	.word	0x00002393
    2334:	00002393 	.word	0x00002393
    2338:	0000236b 	.word	0x0000236b
		conv->specifier_cat = SPECIFIER_SINT;
    233c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2340:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    2342:	f361 0302 	bfi	r3, r1, #0, #3
    2346:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    234a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    234e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2352:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    2354:	bf02      	ittt	eq
    2356:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    235a:	f041 0101 	orreq.w	r1, r1, #1
    235e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    2362:	2a63      	cmp	r2, #99	; 0x63
    2364:	d005      	beq.n	2372 <cbvprintf+0x3be>
	bool unsupported = false;
    2366:	2300      	movs	r3, #0
    2368:	e006      	b.n	2378 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    236a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    236e:	2102      	movs	r1, #2
    2370:	e7e7      	b.n	2342 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2372:	3b00      	subs	r3, #0
    2374:	bf18      	it	ne
    2376:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2378:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    237c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2380:	430b      	orrs	r3, r1
    2382:	f363 0241 	bfi	r2, r3, #1, #1
    2386:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    238a:	e6b4      	b.n	20f6 <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    238c:	f013 0f38 	tst.w	r3, #56	; 0x38
    2390:	d0e9      	beq.n	2366 <cbvprintf+0x3b2>
			conv->invalid = true;
    2392:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2396:	f043 0301 	orr.w	r3, r3, #1
    239a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    239e:	e7e2      	b.n	2366 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    23a0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    23a4:	2203      	movs	r2, #3
    23a6:	f362 0302 	bfi	r3, r2, #0, #3
    23aa:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    23ae:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    23b2:	f003 0378 	and.w	r3, r3, #120	; 0x78
    23b6:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    23ba:	f1dc 0300 	rsbs	r3, ip, #0
    23be:	eb43 030c 	adc.w	r3, r3, ip
    23c2:	e7d9      	b.n	2378 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    23c4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    23c8:	2203      	movs	r2, #3
    23ca:	f362 0302 	bfi	r3, r2, #0, #3
    23ce:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    23d2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    23d6:	f013 0f78 	tst.w	r3, #120	; 0x78
    23da:	bf14      	ite	ne
    23dc:	2301      	movne	r3, #1
    23de:	2300      	moveq	r3, #0
    23e0:	e7ca      	b.n	2378 <cbvprintf+0x3c4>
			unsupported = true;
    23e2:	2301      	movs	r3, #1
    23e4:	e7c8      	b.n	2378 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    23e6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    23ea:	2a00      	cmp	r2, #0
			width = conv->width_value;
    23ec:	bfb4      	ite	lt
    23ee:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    23f2:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    23f6:	e690      	b.n	211a <cbvprintf+0x166>
		} else if (conv->prec_present) {
    23f8:	0799      	lsls	r1, r3, #30
    23fa:	f57f ae9d 	bpl.w	2138 <cbvprintf+0x184>
			precision = conv->prec_value;
    23fe:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    2402:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    2406:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2408:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    240c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    2410:	f003 0207 	and.w	r2, r3, #7
    2414:	2a04      	cmp	r2, #4
    2416:	d109      	bne.n	242c <cbvprintf+0x478>
		    && !conv->prec_present) {
    2418:	078a      	lsls	r2, r1, #30
    241a:	d407      	bmi.n	242c <cbvprintf+0x478>
			if (conv->specifier_a) {
    241c:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    2420:	2a00      	cmp	r2, #0
    2422:	bfb4      	ite	lt
    2424:	f04f 080d 	movlt.w	r8, #13
    2428:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    242c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2430:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2432:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2436:	d137      	bne.n	24a8 <cbvprintf+0x4f4>
			switch (length_mod) {
    2438:	1ecb      	subs	r3, r1, #3
    243a:	2b04      	cmp	r3, #4
    243c:	d821      	bhi.n	2482 <cbvprintf+0x4ce>
    243e:	e8df f003 	tbb	[pc, r3]
    2442:	0903      	.short	0x0903
    2444:	2009      	.short	0x2009
    2446:	20          	.byte	0x20
    2447:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    2448:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    244c:	17da      	asrs	r2, r3, #31
    244e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    2452:	e006      	b.n	2462 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    2454:	3407      	adds	r4, #7
    2456:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    245a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    245e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    2462:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    2466:	07bb      	lsls	r3, r7, #30
    2468:	d056      	beq.n	2518 <cbvprintf+0x564>
			OUTS(sp, fp);
    246a:	9b02      	ldr	r3, [sp, #8]
    246c:	462a      	mov	r2, r5
    246e:	4651      	mov	r1, sl
    2470:	4648      	mov	r0, r9
    2472:	f016 f9d4 	bl	1881e <outs>
    2476:	2800      	cmp	r0, #0
    2478:	f2c0 8397 	blt.w	2baa <cbvprintf+0xbf6>
    247c:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    247e:	9d02      	ldr	r5, [sp, #8]
    2480:	e5a0      	b.n	1fc4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2482:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    2486:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2488:	ea4f 72e3 	mov.w	r2, r3, asr #31
    248c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    2490:	d105      	bne.n	249e <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    2492:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    2496:	930c      	str	r3, [sp, #48]	; 0x30
    2498:	2300      	movs	r3, #0
    249a:	930d      	str	r3, [sp, #52]	; 0x34
    249c:	e7e1      	b.n	2462 <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    249e:	2902      	cmp	r1, #2
    24a0:	d1df      	bne.n	2462 <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    24a2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    24a6:	e7d1      	b.n	244c <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    24a8:	2b02      	cmp	r3, #2
    24aa:	d123      	bne.n	24f4 <cbvprintf+0x540>
			switch (length_mod) {
    24ac:	1ecb      	subs	r3, r1, #3
    24ae:	2b04      	cmp	r3, #4
    24b0:	d813      	bhi.n	24da <cbvprintf+0x526>
    24b2:	e8df f003 	tbb	[pc, r3]
    24b6:	0a03      	.short	0x0a03
    24b8:	120a      	.short	0x120a
    24ba:	12          	.byte	0x12
    24bb:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    24bc:	6822      	ldr	r2, [r4, #0]
    24be:	920c      	str	r2, [sp, #48]	; 0x30
    24c0:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    24c2:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    24c4:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    24c6:	4604      	mov	r4, r0
    24c8:	e7cb      	b.n	2462 <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    24ca:	1de0      	adds	r0, r4, #7
    24cc:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    24d0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    24d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    24d8:	e7f5      	b.n	24c6 <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    24da:	f854 3b04 	ldr.w	r3, [r4], #4
    24de:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    24e0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    24e2:	f04f 0300 	mov.w	r3, #0
    24e6:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    24e8:	d0d3      	beq.n	2492 <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    24ea:	2902      	cmp	r1, #2
    24ec:	d1b9      	bne.n	2462 <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    24ee:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    24f2:	e7d0      	b.n	2496 <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    24f4:	2b04      	cmp	r3, #4
    24f6:	d109      	bne.n	250c <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    24f8:	1de3      	adds	r3, r4, #7
    24fa:	f023 0307 	bic.w	r3, r3, #7
    24fe:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    2502:	e9d3 2300 	ldrd	r2, r3, [r3]
    2506:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    250a:	e7aa      	b.n	2462 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    250c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    250e:	bf04      	itt	eq
    2510:	f854 3b04 	ldreq.w	r3, [r4], #4
    2514:	930c      	streq	r3, [sp, #48]	; 0x30
    2516:	e7a4      	b.n	2462 <cbvprintf+0x4ae>
		switch (conv->specifier) {
    2518:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    251c:	2a78      	cmp	r2, #120	; 0x78
    251e:	d8ae      	bhi.n	247e <cbvprintf+0x4ca>
    2520:	2a57      	cmp	r2, #87	; 0x57
    2522:	f200 808c 	bhi.w	263e <cbvprintf+0x68a>
    2526:	2a25      	cmp	r2, #37	; 0x25
    2528:	f000 80d4 	beq.w	26d4 <cbvprintf+0x720>
    252c:	2a24      	cmp	r2, #36	; 0x24
    252e:	d9a6      	bls.n	247e <cbvprintf+0x4ca>
    2530:	2a41      	cmp	r2, #65	; 0x41
    2532:	d003      	beq.n	253c <cbvprintf+0x588>
    2534:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    2538:	2b02      	cmp	r3, #2
    253a:	d8a0      	bhi.n	247e <cbvprintf+0x4ca>
	} u = {
    253c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    2540:	2b00      	cmp	r3, #0
    2542:	f2c0 81be 	blt.w	28c2 <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    2546:	0738      	lsls	r0, r7, #28
    2548:	f100 81bd 	bmi.w	28c6 <cbvprintf+0x912>
		*sign = ' ';
    254c:	f017 0710 	ands.w	r7, r7, #16
    2550:	bf18      	it	ne
    2552:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2554:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    2558:	f3c3 0313 	ubfx	r3, r3, #0, #20
    255c:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    2560:	2d00      	cmp	r5, #0
    2562:	f040 81b2 	bne.w	28ca <cbvprintf+0x916>
    2566:	ea51 0003 	orrs.w	r0, r1, r3
    256a:	bf14      	ite	ne
    256c:	2001      	movne	r0, #1
    256e:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    2570:	02db      	lsls	r3, r3, #11
    2572:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    2576:	02c9      	lsls	r1, r1, #11
		c = 'f';
    2578:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    257a:	ea45 0e01 	orr.w	lr, r5, r1
    257e:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    2582:	bf08      	it	eq
    2584:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    2586:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    258a:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    258e:	f000 8206 	beq.w	299e <cbvprintf+0x9ea>
		if (is_subnormal) {
    2592:	2800      	cmp	r0, #0
    2594:	f040 81ce 	bne.w	2934 <cbvprintf+0x980>
		fract |= BIT_63;
    2598:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    259c:	f04f 0c00 	mov.w	ip, #0
    25a0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    25a4:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    25a8:	9109      	str	r1, [sp, #36]	; 0x24
    25aa:	4663      	mov	r3, ip
		fract *= 5U;
    25ac:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    25b0:	f115 0f02 	cmn.w	r5, #2
    25b4:	f2c0 81c5 	blt.w	2942 <cbvprintf+0x98e>
    25b8:	f1bc 0f00 	cmp.w	ip, #0
    25bc:	d001      	beq.n	25c2 <cbvprintf+0x60e>
    25be:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    25c2:	2d00      	cmp	r5, #0
		fract += 2;
    25c4:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    25c8:	f300 81d0 	bgt.w	296c <cbvprintf+0x9b8>
	fract >>= (4 - expo);
    25cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    25ce:	9908      	ldr	r1, [sp, #32]
    25d0:	f1c5 0c04 	rsb	ip, r5, #4
    25d4:	351c      	adds	r5, #28
    25d6:	fa00 f505 	lsl.w	r5, r0, r5
    25da:	f1ac 0e20 	sub.w	lr, ip, #32
    25de:	fa21 f10c 	lsr.w	r1, r1, ip
    25e2:	fa20 fe0e 	lsr.w	lr, r0, lr
    25e6:	4329      	orrs	r1, r5
    25e8:	ea41 010e 	orr.w	r1, r1, lr
    25ec:	fa20 f00c 	lsr.w	r0, r0, ip
    25f0:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    25f4:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    25f8:	2947      	cmp	r1, #71	; 0x47
    25fa:	f040 81d7 	bne.w	29ac <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    25fe:	1cdd      	adds	r5, r3, #3
    2600:	db02      	blt.n	2608 <cbvprintf+0x654>
    2602:	4598      	cmp	r8, r3
    2604:	f280 81ce 	bge.w	29a4 <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    2608:	3a02      	subs	r2, #2
			if (precision > 0) {
    260a:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    260e:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    2610:	dd01      	ble.n	2616 <cbvprintf+0x662>
				precision--;
    2612:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    2616:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    261a:	0688      	lsls	r0, r1, #26
    261c:	f100 81c6 	bmi.w	29ac <cbvprintf+0x9f8>
    2620:	f1b8 0f00 	cmp.w	r8, #0
    2624:	bfd4      	ite	le
    2626:	2100      	movle	r1, #0
    2628:	2101      	movgt	r1, #1
	if (c == 'f') {
    262a:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    262c:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    262e:	f040 81bf 	bne.w	29b0 <cbvprintf+0x9fc>
		if (decimals < 0) {
    2632:	eb18 0503 	adds.w	r5, r8, r3
    2636:	f140 81bd 	bpl.w	29b4 <cbvprintf+0xa00>
			decimals = 0;
    263a:	2500      	movs	r5, #0
    263c:	e1bd      	b.n	29ba <cbvprintf+0xa06>
		switch (conv->specifier) {
    263e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    2642:	2b20      	cmp	r3, #32
    2644:	f63f af1b 	bhi.w	247e <cbvprintf+0x4ca>
    2648:	a001      	add	r0, pc, #4	; (adr r0, 2650 <cbvprintf+0x69c>)
    264a:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    264e:	bf00      	nop
    2650:	00002865 	.word	0x00002865
    2654:	0000247f 	.word	0x0000247f
    2658:	0000247f 	.word	0x0000247f
    265c:	0000247f 	.word	0x0000247f
    2660:	0000247f 	.word	0x0000247f
    2664:	0000247f 	.word	0x0000247f
    2668:	0000247f 	.word	0x0000247f
    266c:	0000247f 	.word	0x0000247f
    2670:	0000247f 	.word	0x0000247f
    2674:	0000253d 	.word	0x0000253d
    2678:	0000247f 	.word	0x0000247f
    267c:	00002701 	.word	0x00002701
    2680:	00002805 	.word	0x00002805
    2684:	0000253d 	.word	0x0000253d
    2688:	0000253d 	.word	0x0000253d
    268c:	0000253d 	.word	0x0000253d
    2690:	0000247f 	.word	0x0000247f
    2694:	00002805 	.word	0x00002805
    2698:	0000247f 	.word	0x0000247f
    269c:	0000247f 	.word	0x0000247f
    26a0:	0000247f 	.word	0x0000247f
    26a4:	0000247f 	.word	0x0000247f
    26a8:	0000289b 	.word	0x0000289b
    26ac:	00002865 	.word	0x00002865
    26b0:	00002869 	.word	0x00002869
    26b4:	0000247f 	.word	0x0000247f
    26b8:	0000247f 	.word	0x0000247f
    26bc:	000026db 	.word	0x000026db
    26c0:	0000247f 	.word	0x0000247f
    26c4:	00002865 	.word	0x00002865
    26c8:	0000247f 	.word	0x0000247f
    26cc:	0000247f 	.word	0x0000247f
    26d0:	00002865 	.word	0x00002865
			OUTC('%');
    26d4:	4651      	mov	r1, sl
    26d6:	4610      	mov	r0, r2
    26d8:	e47e      	b.n	1fd8 <cbvprintf+0x24>
			if (precision >= 0) {
    26da:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    26de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    26e0:	db09      	blt.n	26f6 <cbvprintf+0x742>
				len = strnlen(bps, precision);
    26e2:	4641      	mov	r1, r8
    26e4:	4610      	mov	r0, r2
    26e6:	9203      	str	r2, [sp, #12]
    26e8:	f016 fb64 	bl	18db4 <strnlen>
				len = strlen(bps);
    26ec:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    26ee:	2700      	movs	r7, #0
			bpe = bps + len;
    26f0:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    26f2:	b962      	cbnz	r2, 270e <cbvprintf+0x75a>
    26f4:	e6c3      	b.n	247e <cbvprintf+0x4ca>
				len = strlen(bps);
    26f6:	4610      	mov	r0, r2
    26f8:	9203      	str	r2, [sp, #12]
    26fa:	f016 fb54 	bl	18da6 <strlen>
    26fe:	e7f5      	b.n	26ec <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2702:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    2706:	2700      	movs	r7, #0
			bpe = buf + 1;
    2708:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    270c:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    270e:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    2710:	b107      	cbz	r7, 2714 <cbvprintf+0x760>
			nj_len += 1U;
    2712:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    2714:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    2718:	06c1      	lsls	r1, r0, #27
    271a:	f140 823a 	bpl.w	2b92 <cbvprintf+0xbde>
			nj_len += 2U;
    271e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    2720:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    2722:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    2724:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    2726:	bf44      	itt	mi
    2728:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    272a:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    272c:	f1bb 0f00 	cmp.w	fp, #0
    2730:	dd23      	ble.n	277a <cbvprintf+0x7c6>
			width -= (int)nj_len;
    2732:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    2736:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    273a:	0759      	lsls	r1, r3, #29
    273c:	f3c3 0880 	ubfx	r8, r3, #2, #1
    2740:	d41b      	bmi.n	277a <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    2742:	0658      	lsls	r0, r3, #25
    2744:	f140 8234 	bpl.w	2bb0 <cbvprintf+0xbfc>
					if (sign != 0) {
    2748:	2f00      	cmp	r7, #0
    274a:	f000 8234 	beq.w	2bb6 <cbvprintf+0xc02>
						OUTC(sign);
    274e:	4651      	mov	r1, sl
    2750:	4638      	mov	r0, r7
    2752:	9203      	str	r2, [sp, #12]
    2754:	47c8      	blx	r9
    2756:	2800      	cmp	r0, #0
    2758:	f2c0 8227 	blt.w	2baa <cbvprintf+0xbf6>
    275c:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    275e:	4647      	mov	r7, r8
						OUTC(sign);
    2760:	3601      	adds	r6, #1
					pad = '0';
    2762:	f04f 0830 	mov.w	r8, #48	; 0x30
    2766:	445e      	add	r6, fp
    2768:	465b      	mov	r3, fp
				while (width-- > 0) {
    276a:	2b00      	cmp	r3, #0
    276c:	eba6 000b 	sub.w	r0, r6, fp
    2770:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    2774:	f300 8211 	bgt.w	2b9a <cbvprintf+0xbe6>
    2778:	4606      	mov	r6, r0
		if (sign != 0) {
    277a:	b147      	cbz	r7, 278e <cbvprintf+0x7da>
			OUTC(sign);
    277c:	4651      	mov	r1, sl
    277e:	4638      	mov	r0, r7
    2780:	9203      	str	r2, [sp, #12]
    2782:	47c8      	blx	r9
    2784:	2800      	cmp	r0, #0
    2786:	f2c0 8210 	blt.w	2baa <cbvprintf+0xbf6>
    278a:	9a03      	ldr	r2, [sp, #12]
    278c:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    278e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2792:	0659      	lsls	r1, r3, #25
    2794:	f140 8265 	bpl.w	2c62 <cbvprintf+0xcae>
			if (conv->specifier_a) {
    2798:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    279c:	2b00      	cmp	r3, #0
    279e:	eba6 0302 	sub.w	r3, r6, r2
    27a2:	9303      	str	r3, [sp, #12]
    27a4:	f2c0 820a 	blt.w	2bbc <cbvprintf+0xc08>
    27a8:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    27aa:	7838      	ldrb	r0, [r7, #0]
    27ac:	9b03      	ldr	r3, [sp, #12]
    27ae:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    27b2:	2a09      	cmp	r2, #9
    27b4:	46b8      	mov	r8, r7
    27b6:	eb03 0607 	add.w	r6, r3, r7
    27ba:	f107 0701 	add.w	r7, r7, #1
    27be:	f240 8229 	bls.w	2c14 <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    27c2:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    27c6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    27c8:	0693      	lsls	r3, r2, #26
    27ca:	d408      	bmi.n	27de <cbvprintf+0x82a>
    27cc:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    27ce:	2f00      	cmp	r7, #0
    27d0:	eba6 0307 	sub.w	r3, r6, r7
    27d4:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    27d8:	f300 8222 	bgt.w	2c20 <cbvprintf+0xc6c>
    27dc:	461e      	mov	r6, r3
				if (*cp == '.') {
    27de:	f898 0000 	ldrb.w	r0, [r8]
    27e2:	282e      	cmp	r0, #46	; 0x2e
    27e4:	d10b      	bne.n	27fe <cbvprintf+0x84a>
					OUTC(*cp++);
    27e6:	4651      	mov	r1, sl
    27e8:	47c8      	blx	r9
						OUTC('0');
    27ea:	2800      	cmp	r0, #0
    27ec:	f2c0 81dd 	blt.w	2baa <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    27f0:	2f00      	cmp	r7, #0
						OUTC('0');
    27f2:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    27f6:	f300 821a 	bgt.w	2c2e <cbvprintf+0xc7a>
					OUTC(*cp++);
    27fa:	f108 0801 	add.w	r8, r8, #1
    27fe:	eba6 0608 	sub.w	r6, r6, r8
    2802:	e21d      	b.n	2c40 <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    2804:	073d      	lsls	r5, r7, #28
    2806:	d42b      	bmi.n	2860 <cbvprintf+0x8ac>
				sign = ' ';
    2808:	f017 0710 	ands.w	r7, r7, #16
    280c:	bf18      	it	ne
    280e:	2720      	movne	r7, #32
			sint = value->sint;
    2810:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    2814:	2b00      	cmp	r3, #0
    2816:	da05      	bge.n	2824 <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    2818:	4252      	negs	r2, r2
    281a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    281e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    2822:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    2824:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    2828:	9300      	str	r3, [sp, #0]
    282a:	aa0e      	add	r2, sp, #56	; 0x38
    282c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2830:	ab13      	add	r3, sp, #76	; 0x4c
    2832:	f015 ffae 	bl	18792 <encode_uint>
    2836:	4602      	mov	r2, r0
			if (precision >= 0) {
    2838:	f1b8 0f00 	cmp.w	r8, #0
    283c:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    2840:	f6ff af57 	blt.w	26f2 <cbvprintf+0x73e>
				conv->flag_zero = false;
    2844:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    2848:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    284a:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    284e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    2850:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    2854:	f67f af4d 	bls.w	26f2 <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    2858:	eba8 0303 	sub.w	r3, r8, r3
    285c:	930f      	str	r3, [sp, #60]	; 0x3c
    285e:	e748      	b.n	26f2 <cbvprintf+0x73e>
				sign = '+';
    2860:	272b      	movs	r7, #43	; 0x2b
    2862:	e7d5      	b.n	2810 <cbvprintf+0x85c>
		switch (conv->specifier) {
    2864:	2700      	movs	r7, #0
    2866:	e7dd      	b.n	2824 <cbvprintf+0x870>
			if (value->ptr != NULL) {
    2868:	980c      	ldr	r0, [sp, #48]	; 0x30
    286a:	2800      	cmp	r0, #0
    286c:	f000 818d 	beq.w	2b8a <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2870:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    2874:	9300      	str	r3, [sp, #0]
    2876:	aa0e      	add	r2, sp, #56	; 0x38
    2878:	ab13      	add	r3, sp, #76	; 0x4c
    287a:	2100      	movs	r1, #0
    287c:	f015 ff89 	bl	18792 <encode_uint>
				conv->altform_0c = true;
    2880:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    2884:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2888:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    288c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2890:	4602      	mov	r2, r0
				conv->altform_0c = true;
    2892:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    2896:	2700      	movs	r7, #0
				goto prec_int_pad0;
    2898:	e7ce      	b.n	2838 <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    289a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    289c:	2907      	cmp	r1, #7
    289e:	f63f adee 	bhi.w	247e <cbvprintf+0x4ca>
    28a2:	e8df f001 	tbb	[pc, r1]
    28a6:	040c      	.short	0x040c
    28a8:	08080c06 	.word	0x08080c06
    28ac:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    28ae:	701e      	strb	r6, [r3, #0]
		break;
    28b0:	e5e5      	b.n	247e <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    28b2:	801e      	strh	r6, [r3, #0]
		break;
    28b4:	e5e3      	b.n	247e <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    28b6:	17f2      	asrs	r2, r6, #31
    28b8:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    28bc:	e5df      	b.n	247e <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    28be:	601e      	str	r6, [r3, #0]
		break;
    28c0:	e5dd      	b.n	247e <cbvprintf+0x4ca>
		*sign = '-';
    28c2:	272d      	movs	r7, #45	; 0x2d
    28c4:	e646      	b.n	2554 <cbvprintf+0x5a0>
		*sign = '+';
    28c6:	272b      	movs	r7, #43	; 0x2b
    28c8:	e644      	b.n	2554 <cbvprintf+0x5a0>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    28ca:	f240 70ff 	movw	r0, #2047	; 0x7ff
    28ce:	4285      	cmp	r5, r0
    28d0:	d12d      	bne.n	292e <cbvprintf+0x97a>
		if (fract == 0) {
    28d2:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    28d4:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    28d8:	d11b      	bne.n	2912 <cbvprintf+0x95e>
			if (isupper((int)c)) {
    28da:	2a19      	cmp	r2, #25
    28dc:	d811      	bhi.n	2902 <cbvprintf+0x94e>
				*buf++ = 'I';
    28de:	2349      	movs	r3, #73	; 0x49
    28e0:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    28e4:	234e      	movs	r3, #78	; 0x4e
    28e6:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    28ea:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    28ec:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    28f0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    28f4:	f36f 1386 	bfc	r3, #6, #1
    28f8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    28fc:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    2900:	e704      	b.n	270c <cbvprintf+0x758>
				*buf++ = 'i';
    2902:	2369      	movs	r3, #105	; 0x69
    2904:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    2908:	236e      	movs	r3, #110	; 0x6e
    290a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    290e:	2366      	movs	r3, #102	; 0x66
    2910:	e7ec      	b.n	28ec <cbvprintf+0x938>
			if (isupper((int)c)) {
    2912:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    2914:	bf99      	ittee	ls
    2916:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    2918:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    291a:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    291c:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    291e:	bf94      	ite	ls
    2920:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    2924:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    2928:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    292c:	e7de      	b.n	28ec <cbvprintf+0x938>
	bool is_subnormal = (expo == 0) && (fract != 0);
    292e:	2000      	movs	r0, #0
    2930:	e61e      	b.n	2570 <cbvprintf+0x5bc>
				expo--;
    2932:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    2934:	1849      	adds	r1, r1, r1
    2936:	415b      	adcs	r3, r3
    2938:	2b00      	cmp	r3, #0
    293a:	dafa      	bge.n	2932 <cbvprintf+0x97e>
    293c:	e9cd 1308 	strd	r1, r3, [sp, #32]
    2940:	e62a      	b.n	2598 <cbvprintf+0x5e4>
			fract >>= 1;
    2942:	0840      	lsrs	r0, r0, #1
    2944:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    2948:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    294a:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    294e:	46ac      	mov	ip, r5
			expo++;
    2950:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2954:	d2f5      	bcs.n	2942 <cbvprintf+0x98e>
		fract *= 5U;
    2956:	fb0e f501 	mul.w	r5, lr, r1
    295a:	fba0 010e 	umull	r0, r1, r0, lr
    295e:	4429      	add	r1, r5
		decexp--;
    2960:	3b01      	subs	r3, #1
		expo++;
    2962:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    2966:	f04f 0c01 	mov.w	ip, #1
    296a:	e621      	b.n	25b0 <cbvprintf+0x5fc>
		fract += 2;
    296c:	3102      	adds	r1, #2
    296e:	f140 0000 	adc.w	r0, r0, #0
    2972:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    2976:	a808      	add	r0, sp, #32
    2978:	e9cd 2303 	strd	r2, r3, [sp, #12]
    297c:	f015 feda 	bl	18734 <_ldiv5>
		decexp++;
    2980:	9b04      	ldr	r3, [sp, #16]
    2982:	9a03      	ldr	r2, [sp, #12]
    2984:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    2988:	3d01      	subs	r5, #1
		decexp++;
    298a:	3301      	adds	r3, #1
			fract <<= 1;
    298c:	1849      	adds	r1, r1, r1
    298e:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    2990:	2800      	cmp	r0, #0
			expo--;
    2992:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    2996:	daf9      	bge.n	298c <cbvprintf+0x9d8>
    2998:	e9cd 1008 	strd	r1, r0, [sp, #32]
    299c:	e611      	b.n	25c2 <cbvprintf+0x60e>
    299e:	2300      	movs	r3, #0
    29a0:	461d      	mov	r5, r3
    29a2:	e613      	b.n	25cc <cbvprintf+0x618>
			precision -= decexp;
    29a4:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    29a8:	2266      	movs	r2, #102	; 0x66
    29aa:	e634      	b.n	2616 <cbvprintf+0x662>
	bool prune_zero = false;
    29ac:	2100      	movs	r1, #0
    29ae:	e63c      	b.n	262a <cbvprintf+0x676>
		decimals = precision + 1;
    29b0:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    29b4:	2d10      	cmp	r5, #16
    29b6:	bfa8      	it	ge
    29b8:	2510      	movge	r5, #16
    29ba:	2110      	movs	r1, #16
    29bc:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    29be:	2000      	movs	r0, #0
    29c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    29c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    29c8:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    29cc:	b9a5      	cbnz	r5, 29f8 <cbvprintf+0xa44>
	fract += round;
    29ce:	9d08      	ldr	r5, [sp, #32]
    29d0:	1949      	adds	r1, r1, r5
    29d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    29d4:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    29d8:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    29dc:	d21b      	bcs.n	2a16 <cbvprintf+0xa62>
	fract += round;
    29de:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    29e2:	2a66      	cmp	r2, #102	; 0x66
    29e4:	f040 8099 	bne.w	2b1a <cbvprintf+0xb66>
		if (decexp > 0) {
    29e8:	2b00      	cmp	r3, #0
    29ea:	dc23      	bgt.n	2a34 <cbvprintf+0xa80>
			*buf++ = '0';
    29ec:	2130      	movs	r1, #48	; 0x30
    29ee:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    29f2:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    29f6:	e02f      	b.n	2a58 <cbvprintf+0xaa4>
	*v >>= 1;
    29f8:	0849      	lsrs	r1, r1, #1
    29fa:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    29fe:	0840      	lsrs	r0, r0, #1
    2a00:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    2a04:	a80a      	add	r0, sp, #40	; 0x28
    2a06:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2a0a:	3d01      	subs	r5, #1
    2a0c:	f015 fe92 	bl	18734 <_ldiv5>
    2a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    2a14:	e7d8      	b.n	29c8 <cbvprintf+0xa14>
	*v >>= 1;
    2a16:	0849      	lsrs	r1, r1, #1
    2a18:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    2a1c:	a808      	add	r0, sp, #32
	*v >>= 1;
    2a1e:	086d      	lsrs	r5, r5, #1
    2a20:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2a24:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    2a28:	f015 fe84 	bl	18734 <_ldiv5>
		decexp++;
    2a2c:	9b05      	ldr	r3, [sp, #20]
    2a2e:	9a04      	ldr	r2, [sp, #16]
    2a30:	3301      	adds	r3, #1
    2a32:	e7d6      	b.n	29e2 <cbvprintf+0xa2e>
	char *buf = bps;
    2a34:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    2a36:	9907      	ldr	r1, [sp, #28]
    2a38:	2900      	cmp	r1, #0
    2a3a:	dd0b      	ble.n	2a54 <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    2a3c:	a907      	add	r1, sp, #28
    2a3e:	a808      	add	r0, sp, #32
    2a40:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2a44:	f015 fe8e 	bl	18764 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2a48:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    2a4a:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    2a4e:	3b01      	subs	r3, #1
    2a50:	9a04      	ldr	r2, [sp, #16]
    2a52:	d1f0      	bne.n	2a36 <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    2a54:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    2a56:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    2a58:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    2a5c:	0689      	lsls	r1, r1, #26
    2a5e:	d402      	bmi.n	2a66 <cbvprintf+0xab2>
    2a60:	f1b8 0f00 	cmp.w	r8, #0
    2a64:	dd1d      	ble.n	2aa2 <cbvprintf+0xaee>
			*buf++ = '.';
    2a66:	212e      	movs	r1, #46	; 0x2e
    2a68:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    2a6c:	b19b      	cbz	r3, 2a96 <cbvprintf+0xae2>
    2a6e:	f1b8 0f00 	cmp.w	r8, #0
    2a72:	dd16      	ble.n	2aa2 <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    2a74:	4259      	negs	r1, r3
    2a76:	4541      	cmp	r1, r8
    2a78:	bfa8      	it	ge
    2a7a:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    2a7c:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    2a80:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    2a82:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    2a84:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    2a88:	bfd4      	ite	le
    2a8a:	2100      	movle	r1, #0
    2a8c:	2101      	movgt	r1, #1
    2a8e:	f361 1045 	bfi	r0, r1, #5, #1
    2a92:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    2a96:	f1b8 0f00 	cmp.w	r8, #0
    2a9a:	dd02      	ble.n	2aa2 <cbvprintf+0xaee>
    2a9c:	9907      	ldr	r1, [sp, #28]
    2a9e:	2900      	cmp	r1, #0
    2aa0:	dc56      	bgt.n	2b50 <cbvprintf+0xb9c>
	if (prune_zero) {
    2aa2:	9903      	ldr	r1, [sp, #12]
    2aa4:	2900      	cmp	r1, #0
    2aa6:	d163      	bne.n	2b70 <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    2aa8:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    2aac:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    2ab0:	2945      	cmp	r1, #69	; 0x45
    2ab2:	d121      	bne.n	2af8 <cbvprintf+0xb44>
		if (decexp < 0) {
    2ab4:	2b00      	cmp	r3, #0
		*buf++ = c;
    2ab6:	4629      	mov	r1, r5
			decexp = -decexp;
    2ab8:	bfb8      	it	lt
    2aba:	425b      	neglt	r3, r3
		*buf++ = c;
    2abc:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    2ac0:	bfb4      	ite	lt
    2ac2:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    2ac4:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    2ac6:	2b63      	cmp	r3, #99	; 0x63
    2ac8:	706a      	strb	r2, [r5, #1]
    2aca:	dd09      	ble.n	2ae0 <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    2acc:	2064      	movs	r0, #100	; 0x64
    2ace:	fbb3 f2f0 	udiv	r2, r3, r0
    2ad2:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    2ad6:	1ce9      	adds	r1, r5, #3
    2ad8:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    2adc:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    2ae0:	200a      	movs	r0, #10
    2ae2:	460d      	mov	r5, r1
    2ae4:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    2ae8:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    2aec:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    2af0:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2af2:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    2af6:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    2af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2afa:	2b00      	cmp	r3, #0
    2afc:	dc43      	bgt.n	2b86 <cbvprintf+0xbd2>
    2afe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2b00:	2b00      	cmp	r3, #0
    2b02:	bfd4      	ite	le
    2b04:	2300      	movle	r3, #0
    2b06:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    2b08:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    2b0c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    2b10:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    2b12:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    2b16:	702b      	strb	r3, [r5, #0]
	return bps;
    2b18:	e5f8      	b.n	270c <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    2b1a:	a907      	add	r1, sp, #28
    2b1c:	a808      	add	r0, sp, #32
    2b1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2b22:	f015 fe1f 	bl	18764 <_get_digit>
		if (*buf++ != '0') {
    2b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    2b2a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    2b2e:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    2b32:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    2b34:	bf18      	it	ne
    2b36:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    2b3a:	0688      	lsls	r0, r1, #26
    2b3c:	d402      	bmi.n	2b44 <cbvprintf+0xb90>
    2b3e:	f1b8 0f00 	cmp.w	r8, #0
    2b42:	dd12      	ble.n	2b6a <cbvprintf+0xbb6>
			*buf++ = '.';
    2b44:	212e      	movs	r1, #46	; 0x2e
    2b46:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    2b4a:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    2b4e:	e7a2      	b.n	2a96 <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    2b50:	a907      	add	r1, sp, #28
    2b52:	a808      	add	r0, sp, #32
    2b54:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2b58:	f015 fe04 	bl	18764 <_get_digit>
		precision--;
    2b5c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    2b64:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    2b68:	e795      	b.n	2a96 <cbvprintf+0xae2>
		if (*buf++ != '0') {
    2b6a:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    2b6e:	e798      	b.n	2aa2 <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    2b70:	2100      	movs	r1, #0
    2b72:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    2b74:	4628      	mov	r0, r5
    2b76:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    2b7a:	2930      	cmp	r1, #48	; 0x30
    2b7c:	d0fa      	beq.n	2b74 <cbvprintf+0xbc0>
		if (*buf != '.') {
    2b7e:	292e      	cmp	r1, #46	; 0x2e
    2b80:	bf18      	it	ne
    2b82:	4605      	movne	r5, r0
    2b84:	e792      	b.n	2aac <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    2b86:	2301      	movs	r3, #1
    2b88:	e7be      	b.n	2b08 <cbvprintf+0xb54>
			bpe = bps + 5;
    2b8a:	4d4b      	ldr	r5, [pc, #300]	; (2cb8 <cbvprintf+0xd04>)
		char sign = 0;
    2b8c:	4607      	mov	r7, r0
			bps = "(nil)";
    2b8e:	1f6a      	subs	r2, r5, #5
    2b90:	e5bd      	b.n	270e <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    2b92:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    2b94:	bf48      	it	mi
    2b96:	3301      	addmi	r3, #1
    2b98:	e5c2      	b.n	2720 <cbvprintf+0x76c>
					OUTC(pad);
    2b9a:	4651      	mov	r1, sl
    2b9c:	4640      	mov	r0, r8
    2b9e:	9203      	str	r2, [sp, #12]
    2ba0:	47c8      	blx	r9
    2ba2:	2800      	cmp	r0, #0
    2ba4:	9a03      	ldr	r2, [sp, #12]
    2ba6:	f6bf addf 	bge.w	2768 <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    2baa:	b01b      	add	sp, #108	; 0x6c
    2bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2bb0:	f04f 0820 	mov.w	r8, #32
    2bb4:	e5d7      	b.n	2766 <cbvprintf+0x7b2>
					pad = '0';
    2bb6:	f04f 0830 	mov.w	r8, #48	; 0x30
    2bba:	e5d4      	b.n	2766 <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    2bbc:	4690      	mov	r8, r2
    2bbe:	9b03      	ldr	r3, [sp, #12]
    2bc0:	4647      	mov	r7, r8
    2bc2:	4443      	add	r3, r8
				while (*cp != 'p') {
    2bc4:	f818 0b01 	ldrb.w	r0, [r8], #1
    2bc8:	2870      	cmp	r0, #112	; 0x70
    2bca:	d11e      	bne.n	2c0a <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    2bcc:	461e      	mov	r6, r3
    2bce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2bd0:	eb03 0806 	add.w	r8, r3, r6
    2bd4:	eba8 0306 	sub.w	r3, r8, r6
    2bd8:	2b00      	cmp	r3, #0
    2bda:	dc3b      	bgt.n	2c54 <cbvprintf+0xca0>
			OUTS(cp, bpe);
    2bdc:	462b      	mov	r3, r5
    2bde:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    2be0:	4651      	mov	r1, sl
    2be2:	4648      	mov	r0, r9
    2be4:	f015 fe1b 	bl	1881e <outs>
    2be8:	2800      	cmp	r0, #0
    2bea:	dbde      	blt.n	2baa <cbvprintf+0xbf6>
    2bec:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    2bee:	4606      	mov	r6, r0
    2bf0:	4483      	add	fp, r0
		while (width > 0) {
    2bf2:	ebab 0306 	sub.w	r3, fp, r6
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	f77f ac41 	ble.w	247e <cbvprintf+0x4ca>
			OUTC(' ');
    2bfc:	4651      	mov	r1, sl
    2bfe:	2020      	movs	r0, #32
    2c00:	47c8      	blx	r9
    2c02:	2800      	cmp	r0, #0
    2c04:	dbd1      	blt.n	2baa <cbvprintf+0xbf6>
    2c06:	3601      	adds	r6, #1
			--width;
    2c08:	e7f3      	b.n	2bf2 <cbvprintf+0xc3e>
					OUTC(*cp++);
    2c0a:	4651      	mov	r1, sl
    2c0c:	47c8      	blx	r9
    2c0e:	2800      	cmp	r0, #0
    2c10:	dad5      	bge.n	2bbe <cbvprintf+0xc0a>
    2c12:	e7ca      	b.n	2baa <cbvprintf+0xbf6>
					OUTC(*cp++);
    2c14:	4651      	mov	r1, sl
    2c16:	47c8      	blx	r9
    2c18:	2800      	cmp	r0, #0
    2c1a:	f6bf adc6 	bge.w	27aa <cbvprintf+0x7f6>
    2c1e:	e7c4      	b.n	2baa <cbvprintf+0xbf6>
						OUTC('0');
    2c20:	4651      	mov	r1, sl
    2c22:	2030      	movs	r0, #48	; 0x30
    2c24:	47c8      	blx	r9
    2c26:	2800      	cmp	r0, #0
    2c28:	f6bf add1 	bge.w	27ce <cbvprintf+0x81a>
    2c2c:	e7bd      	b.n	2baa <cbvprintf+0xbf6>
						OUTC('0');
    2c2e:	4651      	mov	r1, sl
    2c30:	2030      	movs	r0, #48	; 0x30
    2c32:	47c8      	blx	r9
    2c34:	3f01      	subs	r7, #1
    2c36:	e5d8      	b.n	27ea <cbvprintf+0x836>
					OUTC(*cp++);
    2c38:	4651      	mov	r1, sl
    2c3a:	47c8      	blx	r9
    2c3c:	2800      	cmp	r0, #0
    2c3e:	dbb4      	blt.n	2baa <cbvprintf+0xbf6>
    2c40:	4647      	mov	r7, r8
    2c42:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    2c46:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    2c4a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    2c4e:	2a09      	cmp	r2, #9
    2c50:	d9f2      	bls.n	2c38 <cbvprintf+0xc84>
    2c52:	e7bb      	b.n	2bcc <cbvprintf+0xc18>
				OUTC('0');
    2c54:	4651      	mov	r1, sl
    2c56:	2030      	movs	r0, #48	; 0x30
    2c58:	47c8      	blx	r9
    2c5a:	2800      	cmp	r0, #0
    2c5c:	dba5      	blt.n	2baa <cbvprintf+0xbf6>
    2c5e:	3601      	adds	r6, #1
    2c60:	e7b8      	b.n	2bd4 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    2c62:	06d8      	lsls	r0, r3, #27
    2c64:	d401      	bmi.n	2c6a <cbvprintf+0xcb6>
    2c66:	0719      	lsls	r1, r3, #28
    2c68:	d507      	bpl.n	2c7a <cbvprintf+0xcc6>
				OUTC('0');
    2c6a:	4651      	mov	r1, sl
    2c6c:	2030      	movs	r0, #48	; 0x30
    2c6e:	9203      	str	r2, [sp, #12]
    2c70:	47c8      	blx	r9
    2c72:	2800      	cmp	r0, #0
    2c74:	db99      	blt.n	2baa <cbvprintf+0xbf6>
    2c76:	9a03      	ldr	r2, [sp, #12]
    2c78:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    2c7a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2c7e:	06db      	lsls	r3, r3, #27
    2c80:	d508      	bpl.n	2c94 <cbvprintf+0xce0>
				OUTC(conv->specifier);
    2c82:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    2c86:	9203      	str	r2, [sp, #12]
    2c88:	4651      	mov	r1, sl
    2c8a:	47c8      	blx	r9
    2c8c:	2800      	cmp	r0, #0
    2c8e:	db8c      	blt.n	2baa <cbvprintf+0xbf6>
    2c90:	9a03      	ldr	r2, [sp, #12]
    2c92:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    2c94:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    2c96:	4437      	add	r7, r6
    2c98:	1bbb      	subs	r3, r7, r6
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	dc01      	bgt.n	2ca2 <cbvprintf+0xcee>
			OUTS(bps, bpe);
    2c9e:	462b      	mov	r3, r5
    2ca0:	e79e      	b.n	2be0 <cbvprintf+0xc2c>
				OUTC('0');
    2ca2:	4651      	mov	r1, sl
    2ca4:	2030      	movs	r0, #48	; 0x30
    2ca6:	9203      	str	r2, [sp, #12]
    2ca8:	47c8      	blx	r9
    2caa:	2800      	cmp	r0, #0
    2cac:	f6ff af7d 	blt.w	2baa <cbvprintf+0xbf6>
    2cb0:	9a03      	ldr	r2, [sp, #12]
    2cb2:	3601      	adds	r6, #1
    2cb4:	e7f0      	b.n	2c98 <cbvprintf+0xce4>
    2cb6:	bf00      	nop
    2cb8:	0001df68 	.word	0x0001df68

00002cbc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2cc0:	4605      	mov	r5, r0
    2cc2:	f04f 0320 	mov.w	r3, #32
    2cc6:	f3ef 8611 	mrs	r6, BASEPRI
    2cca:	f383 8812 	msr	BASEPRI_MAX, r3
    2cce:	f3bf 8f6f 	isb	sy
	return list->head;
    2cd2:	4b0e      	ldr	r3, [pc, #56]	; (2d0c <pm_state_notify+0x50>)
    2cd4:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2cd6:	b19c      	cbz	r4, 2d00 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2cd8:	4f0d      	ldr	r7, [pc, #52]	; (2d10 <pm_state_notify+0x54>)
    2cda:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2d14 <pm_state_notify+0x58>
    2cde:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2ce2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2ce6:	2d00      	cmp	r5, #0
    2ce8:	bf08      	it	eq
    2cea:	4613      	moveq	r3, r2
		if (callback) {
    2cec:	b12b      	cbz	r3, 2cfa <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2cee:	f898 2014 	ldrb.w	r2, [r8, #20]
    2cf2:	fb09 f202 	mul.w	r2, r9, r2
    2cf6:	5cb8      	ldrb	r0, [r7, r2]
    2cf8:	4798      	blx	r3
	return node->next;
    2cfa:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2cfc:	2c00      	cmp	r4, #0
    2cfe:	d1f0      	bne.n	2ce2 <pm_state_notify+0x26>
	__asm__ volatile(
    2d00:	f386 8811 	msr	BASEPRI, r6
    2d04:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d0c:	200013b0 	.word	0x200013b0
    2d10:	200013b8 	.word	0x200013b8
    2d14:	20002748 	.word	0x20002748

00002d18 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2d18:	f000 031f 	and.w	r3, r0, #31
    2d1c:	2201      	movs	r2, #1
    2d1e:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2d20:	4b0a      	ldr	r3, [pc, #40]	; (2d4c <atomic_test_and_set_bit.constprop.0+0x34>)
    2d22:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2d26:	0940      	lsrs	r0, r0, #5
    2d28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2d2c:	e850 3f00 	ldrex	r3, [r0]
    2d30:	ea43 0102 	orr.w	r1, r3, r2
    2d34:	e840 1c00 	strex	ip, r1, [r0]
    2d38:	f1bc 0f00 	cmp.w	ip, #0
    2d3c:	d1f6      	bne.n	2d2c <atomic_test_and_set_bit.constprop.0+0x14>
    2d3e:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    2d42:	421a      	tst	r2, r3
}
    2d44:	bf14      	ite	ne
    2d46:	2001      	movne	r0, #1
    2d48:	2000      	moveq	r0, #0
    2d4a:	4770      	bx	lr
    2d4c:	200013c4 	.word	0x200013c4

00002d50 <pm_system_resume>:

void pm_system_resume(void)
{
    2d50:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    2d52:	4b1d      	ldr	r3, [pc, #116]	; (2dc8 <pm_system_resume+0x78>)
    2d54:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2d56:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2d5a:	f004 031f 	and.w	r3, r4, #31
    2d5e:	2201      	movs	r2, #1
    2d60:	409a      	lsls	r2, r3
    2d62:	4b1a      	ldr	r3, [pc, #104]	; (2dcc <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2d64:	0961      	lsrs	r1, r4, #5
{
    2d66:	b085      	sub	sp, #20
    2d68:	43d0      	mvns	r0, r2
    2d6a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2d6e:	e853 1f00 	ldrex	r1, [r3]
    2d72:	ea01 0500 	and.w	r5, r1, r0
    2d76:	e843 5c00 	strex	ip, r5, [r3]
    2d7a:	f1bc 0f00 	cmp.w	ip, #0
    2d7e:	d1f6      	bne.n	2d6e <pm_system_resume+0x1e>
    2d80:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2d84:	4211      	tst	r1, r2
    2d86:	d017      	beq.n	2db8 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    2d88:	4d11      	ldr	r5, [pc, #68]	; (2dd0 <pm_system_resume+0x80>)
    2d8a:	220c      	movs	r2, #12
    2d8c:	fb02 5204 	mla	r2, r2, r4, r5
    2d90:	ca07      	ldmia	r2, {r0, r1, r2}
    2d92:	ab01      	add	r3, sp, #4
    2d94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    2d98:	4a0e      	ldr	r2, [pc, #56]	; (2dd4 <pm_system_resume+0x84>)
    2d9a:	b17a      	cbz	r2, 2dbc <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    2d9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2da0:	f016 f858 	bl	18e54 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2da4:	2000      	movs	r0, #0
    2da6:	f7ff ff89 	bl	2cbc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2daa:	230c      	movs	r3, #12
    2dac:	435c      	muls	r4, r3
    2dae:	192a      	adds	r2, r5, r4
    2db0:	2300      	movs	r3, #0
    2db2:	512b      	str	r3, [r5, r4]
    2db4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2db8:	b005      	add	sp, #20
    2dba:	bd30      	pop	{r4, r5, pc}
    2dbc:	f382 8811 	msr	BASEPRI, r2
    2dc0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2dc4:	e7ee      	b.n	2da4 <pm_system_resume+0x54>
    2dc6:	bf00      	nop
    2dc8:	20002748 	.word	0x20002748
    2dcc:	200013c8 	.word	0x200013c8
    2dd0:	200013b8 	.word	0x200013b8
    2dd4:	00018e55 	.word	0x00018e55

00002dd8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2dd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2ddc:	4b35      	ldr	r3, [pc, #212]	; (2eb4 <pm_system_suspend+0xdc>)
    2dde:	4c36      	ldr	r4, [pc, #216]	; (2eb8 <pm_system_suspend+0xe0>)
    2de0:	7d1d      	ldrb	r5, [r3, #20]
{
    2de2:	4680      	mov	r8, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_cpus_pm_state_forced, id)) {
    2de4:	4628      	mov	r0, r5
    2de6:	f7ff ff97 	bl	2d18 <atomic_test_and_set_bit.constprop.0>
    2dea:	b950      	cbnz	r0, 2e02 <pm_system_suspend+0x2a>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    2dec:	4641      	mov	r1, r8
    2dee:	4628      	mov	r0, r5
    2df0:	f000 f884 	bl	2efc <pm_policy_next_state>
		if (info != NULL) {
    2df4:	b128      	cbz	r0, 2e02 <pm_system_suspend+0x2a>
			z_cpus_pm_state[id] = *info;
    2df6:	c807      	ldmia	r0, {r0, r1, r2}
    2df8:	230c      	movs	r3, #12
    2dfa:	fb03 4305 	mla	r3, r3, r5, r4
    2dfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2e02:	230c      	movs	r3, #12
    2e04:	436b      	muls	r3, r5
    2e06:	18e2      	adds	r2, r4, r3
    2e08:	5ce0      	ldrb	r0, [r4, r3]
    2e0a:	096e      	lsrs	r6, r5, #5
    2e0c:	f005 071f 	and.w	r7, r5, #31
    2e10:	2800      	cmp	r0, #0
    2e12:	d03b      	beq.n	2e8c <pm_system_suspend+0xb4>
				   z_cpus_pm_state[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2e14:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    2e18:	d010      	beq.n	2e3c <pm_system_suspend+0x64>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2e1a:	f8d2 e008 	ldr.w	lr, [r2, #8]
    2e1e:	4827      	ldr	r0, [pc, #156]	; (2ebc <pm_system_suspend+0xe4>)
    2e20:	4a27      	ldr	r2, [pc, #156]	; (2ec0 <pm_system_suspend+0xe8>)
    2e22:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    2e26:	2100      	movs	r1, #0
    2e28:	2300      	movs	r3, #0
    2e2a:	fbee 010c 	umlal	r0, r1, lr, ip
    2e2e:	f7fd fd25 	bl	87c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    2e32:	2101      	movs	r1, #1
    2e34:	eba8 0000 	sub.w	r0, r8, r0
    2e38:	f019 fa19 	bl	1c26e <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2e3c:	f014 fc80 	bl	17740 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    2e40:	2001      	movs	r0, #1
    2e42:	f7ff ff3b 	bl	2cbc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2e46:	f3bf 8f5b 	dmb	ish
    2e4a:	4b1e      	ldr	r3, [pc, #120]	; (2ec4 <pm_system_suspend+0xec>)
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2e4c:	2201      	movs	r2, #1
    2e4e:	40ba      	lsls	r2, r7
    2e50:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    2e54:	e853 1f00 	ldrex	r1, [r3]
    2e58:	4311      	orrs	r1, r2
    2e5a:	e843 1000 	strex	r0, r1, [r3]
    2e5e:	2800      	cmp	r0, #0
    2e60:	d1f8      	bne.n	2e54 <pm_system_suspend+0x7c>
    2e62:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_cpus_pm_state[id]);
    2e66:	230c      	movs	r3, #12
    2e68:	fb03 4405 	mla	r4, r3, r5, r4
    2e6c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    2e70:	ab01      	add	r3, sp, #4
    2e72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2e76:	4a14      	ldr	r2, [pc, #80]	; (2ec8 <pm_system_suspend+0xf0>)
    2e78:	b11a      	cbz	r2, 2e82 <pm_system_suspend+0xaa>
		pm_power_state_set(info);
    2e7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2e7e:	f015 ffd6 	bl	18e2e <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2e82:	f7ff ff65 	bl	2d50 <pm_system_resume>
	k_sched_unlock();
    2e86:	f014 fde1 	bl	17a4c <k_sched_unlock>
	bool ret = true;
    2e8a:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2e8c:	4a0f      	ldr	r2, [pc, #60]	; (2ecc <pm_system_suspend+0xf4>)
    2e8e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2e92:	2301      	movs	r3, #1
    2e94:	40bb      	lsls	r3, r7
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2e96:	43db      	mvns	r3, r3
    2e98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    2e9c:	e856 2f00 	ldrex	r2, [r6]
    2ea0:	401a      	ands	r2, r3
    2ea2:	e846 2100 	strex	r1, r2, [r6]
    2ea6:	2900      	cmp	r1, #0
    2ea8:	d1f8      	bne.n	2e9c <pm_system_suspend+0xc4>
    2eaa:	f3bf 8f5b 	dmb	ish
				   z_cpus_pm_state[id].state);

end:
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	return ret;
}
    2eae:	b004      	add	sp, #16
    2eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2eb4:	20002748 	.word	0x20002748
    2eb8:	200013b8 	.word	0x200013b8
    2ebc:	000f423f 	.word	0x000f423f
    2ec0:	000f4240 	.word	0x000f4240
    2ec4:	200013c8 	.word	0x200013c8
    2ec8:	00018e2f 	.word	0x00018e2f
    2ecc:	200013c4 	.word	0x200013c4

00002ed0 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2ed0:	4b05      	ldr	r3, [pc, #20]	; (2ee8 <pm_constraint_get+0x18>)
    2ed2:	f3bf 8f5b 	dmb	ish
    2ed6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2eda:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    2ede:	fab0 f080 	clz	r0, r0
    2ee2:	0940      	lsrs	r0, r0, #5
    2ee4:	4770      	bx	lr
    2ee6:	bf00      	nop
    2ee8:	200013cc 	.word	0x200013cc

00002eec <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2eec:	b908      	cbnz	r0, 2ef2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2eee:	4b02      	ldr	r3, [pc, #8]	; (2ef8 <pm_state_cpu_get_all+0xc>)
    2ef0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2ef2:	2000      	movs	r0, #0
    2ef4:	4770      	bx	lr
    2ef6:	bf00      	nop
    2ef8:	200013e8 	.word	0x200013e8

00002efc <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f00:	b085      	sub	sp, #20
    2f02:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2f04:	a903      	add	r1, sp, #12
    2f06:	f7ff fff1 	bl	2eec <pm_state_cpu_get_all>
    2f0a:	f8df a074 	ldr.w	sl, [pc, #116]	; 2f80 <pm_policy_next_state+0x84>
    2f0e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2f84 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2f12:	1e44      	subs	r4, r0, #1
    2f14:	b224      	sxth	r4, r4
    2f16:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2f1a:	f04f 0900 	mov.w	r9, #0
    2f1e:	1c63      	adds	r3, r4, #1
    2f20:	d104      	bne.n	2f2c <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    2f22:	2500      	movs	r5, #0
}
    2f24:	4628      	mov	r0, r5
    2f26:	b005      	add	sp, #20
    2f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2f2c:	9a03      	ldr	r2, [sp, #12]
    2f2e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2f32:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    2f36:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    2f3a:	f7ff ffc9 	bl	2ed0 <pm_constraint_get>
    2f3e:	b1e0      	cbz	r0, 2f7a <pm_policy_next_state+0x7e>
    2f40:	6868      	ldr	r0, [r5, #4]
    2f42:	f04f 0b00 	mov.w	fp, #0
    2f46:	46d4      	mov	ip, sl
    2f48:	4659      	mov	r1, fp
    2f4a:	fbe0 c107 	umlal	ip, r1, r0, r7
    2f4e:	4642      	mov	r2, r8
    2f50:	464b      	mov	r3, r9
    2f52:	4660      	mov	r0, ip
    2f54:	f7fd fc92 	bl	87c <__aeabi_uldivmod>
    2f58:	9001      	str	r0, [sp, #4]
    2f5a:	68a8      	ldr	r0, [r5, #8]
    2f5c:	46d4      	mov	ip, sl
    2f5e:	4659      	mov	r1, fp
    2f60:	fbe0 c107 	umlal	ip, r1, r0, r7
    2f64:	4642      	mov	r2, r8
    2f66:	464b      	mov	r3, r9
    2f68:	4660      	mov	r0, ip
    2f6a:	f7fd fc87 	bl	87c <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    2f6e:	1c72      	adds	r2, r6, #1
    2f70:	d0d8      	beq.n	2f24 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    2f72:	9b01      	ldr	r3, [sp, #4]
    2f74:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2f76:	42b0      	cmp	r0, r6
    2f78:	d9d4      	bls.n	2f24 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2f7a:	3c01      	subs	r4, #1
    2f7c:	b224      	sxth	r4, r4
    2f7e:	e7ce      	b.n	2f1e <pm_policy_next_state+0x22>
    2f80:	000f423f 	.word	0x000f423f
    2f84:	000f4240 	.word	0x000f4240

00002f88 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    2f88:	4904      	ldr	r1, [pc, #16]	; (2f9c <sub_bytes+0x14>)
    2f8a:	1e43      	subs	r3, r0, #1
    2f8c:	300f      	adds	r0, #15
    2f8e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    2f92:	5c8a      	ldrb	r2, [r1, r2]
    2f94:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    2f96:	4283      	cmp	r3, r0
    2f98:	d1f9      	bne.n	2f8e <sub_bytes+0x6>
	}
}
    2f9a:	4770      	bx	lr
    2f9c:	0001df69 	.word	0x0001df69

00002fa0 <tc_aes128_set_encrypt_key>:
{
    2fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    2fa2:	4e26      	ldr	r6, [pc, #152]	; (303c <tc_aes128_set_encrypt_key+0x9c>)
{
    2fa4:	4607      	mov	r7, r0
    2fa6:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    2fa8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    2faa:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    2fac:	ad01      	add	r5, sp, #4
    2fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2fb0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2fb4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2fb8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    2fbc:	4638      	mov	r0, r7
    2fbe:	2f00      	cmp	r7, #0
    2fc0:	d038      	beq.n	3034 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    2fc2:	2c00      	cmp	r4, #0
    2fc4:	d038      	beq.n	3038 <tc_aes128_set_encrypt_key+0x98>
    2fc6:	1f38      	subs	r0, r7, #4
    2fc8:	4621      	mov	r1, r4
    2fca:	4602      	mov	r2, r0
    2fcc:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2fce:	784b      	ldrb	r3, [r1, #1]
    2fd0:	780d      	ldrb	r5, [r1, #0]
    2fd2:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2fd4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    2fd8:	78cd      	ldrb	r5, [r1, #3]
    2fda:	432b      	orrs	r3, r5
    2fdc:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    2fde:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    2fe0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    2fe4:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2fe6:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    2fea:	d1f0      	bne.n	2fce <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2fec:	4c14      	ldr	r4, [pc, #80]	; (3040 <tc_aes128_set_encrypt_key+0xa0>)
    2fee:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    2ff0:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    2ff2:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    2ff4:	d116      	bne.n	3024 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    2ff6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    2ffa:	5ca5      	ldrb	r5, [r4, r2]
    2ffc:	0e1a      	lsrs	r2, r3, #24
    2ffe:	5ca2      	ldrb	r2, [r4, r2]
    3000:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    3004:	f3c3 2507 	ubfx	r5, r3, #8, #8
    3008:	b2db      	uxtb	r3, r3
    300a:	5d65      	ldrb	r5, [r4, r5]
    300c:	5ce3      	ldrb	r3, [r4, r3]
    300e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    3012:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    3016:	ad0c      	add	r5, sp, #48	; 0x30
    3018:	f021 0303 	bic.w	r3, r1, #3
    301c:	442b      	add	r3, r5
    301e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3022:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    3024:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    3028:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    302a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    302c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    302e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    3030:	d1de      	bne.n	2ff0 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    3032:	2001      	movs	r0, #1
}
    3034:	b00d      	add	sp, #52	; 0x34
    3036:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3038:	4620      	mov	r0, r4
    303a:	e7fb      	b.n	3034 <tc_aes128_set_encrypt_key+0x94>
    303c:	0001ca24 	.word	0x0001ca24
    3040:	0001df69 	.word	0x0001df69

00003044 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3044:	4901      	ldr	r1, [pc, #4]	; (304c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3046:	2210      	movs	r2, #16
	str	r2, [r1]
    3048:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    304a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    304c:	e000ed10 	.word	0xe000ed10

00003050 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3050:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3052:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3054:	f380 8811 	msr	BASEPRI, r0
	isb
    3058:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    305c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3060:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3062:	b662      	cpsie	i
	isb
    3064:	f3bf 8f6f 	isb	sy

	bx	lr
    3068:	4770      	bx	lr
    306a:	bf00      	nop

0000306c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    306c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    306e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3070:	f381 8811 	msr	BASEPRI, r1

	wfe
    3074:	bf20      	wfe

	msr	BASEPRI, r0
    3076:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    307a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    307c:	4770      	bx	lr
    307e:	bf00      	nop

00003080 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3080:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3082:	2b00      	cmp	r3, #0
    3084:	db08      	blt.n	3098 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3086:	2201      	movs	r2, #1
    3088:	f000 001f 	and.w	r0, r0, #31
    308c:	fa02 f000 	lsl.w	r0, r2, r0
    3090:	095b      	lsrs	r3, r3, #5
    3092:	4a02      	ldr	r2, [pc, #8]	; (309c <arch_irq_enable+0x1c>)
    3094:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3098:	4770      	bx	lr
    309a:	bf00      	nop
    309c:	e000e100 	.word	0xe000e100

000030a0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    30a0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    30a2:	2b00      	cmp	r3, #0
    30a4:	db0d      	blt.n	30c2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30a6:	2201      	movs	r2, #1
    30a8:	095b      	lsrs	r3, r3, #5
    30aa:	f000 001f 	and.w	r0, r0, #31
    30ae:	fa02 f000 	lsl.w	r0, r2, r0
    30b2:	3320      	adds	r3, #32
    30b4:	4a03      	ldr	r2, [pc, #12]	; (30c4 <arch_irq_disable+0x24>)
    30b6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    30ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30be:	f3bf 8f6f 	isb	sy
}
    30c2:	4770      	bx	lr
    30c4:	e000e100 	.word	0xe000e100

000030c8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    30c8:	4b05      	ldr	r3, [pc, #20]	; (30e0 <arch_irq_is_enabled+0x18>)
    30ca:	0942      	lsrs	r2, r0, #5
    30cc:	f000 001f 	and.w	r0, r0, #31
    30d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30d4:	2301      	movs	r3, #1
    30d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    30da:	4010      	ands	r0, r2
    30dc:	4770      	bx	lr
    30de:	bf00      	nop
    30e0:	e000e100 	.word	0xe000e100

000030e4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    30e4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    30e6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30e8:	bfa8      	it	ge
    30ea:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    30ee:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30f2:	bfb8      	it	lt
    30f4:	4b06      	ldrlt	r3, [pc, #24]	; (3110 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30f6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    30fa:	bfac      	ite	ge
    30fc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3100:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3104:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3106:	bfb4      	ite	lt
    3108:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    310a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    310e:	4770      	bx	lr
    3110:	e000ed14 	.word	0xe000ed14

00003114 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    3114:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    3116:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    3118:	4b04      	ldr	r3, [pc, #16]	; (312c <_arch_isr_direct_pm+0x18>)
    311a:	699a      	ldr	r2, [r3, #24]
    311c:	b11a      	cbz	r2, 3126 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    311e:	2200      	movs	r2, #0
    3120:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    3122:	f018 fdcc 	bl	1bcbe <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    3126:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    3128:	bd08      	pop	{r3, pc}
    312a:	bf00      	nop
    312c:	20002748 	.word	0x20002748

00003130 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3130:	bf30      	wfi
    b z_SysNmiOnReset
    3132:	f7ff bffd 	b.w	3130 <z_SysNmiOnReset>
    3136:	bf00      	nop

00003138 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3138:	4a0f      	ldr	r2, [pc, #60]	; (3178 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    313a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    313c:	4b0f      	ldr	r3, [pc, #60]	; (317c <z_arm_prep_c+0x44>)
    313e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3142:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3148:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    314c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3150:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3158:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    315c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3160:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    3164:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3168:	f013 fe9a 	bl	16ea0 <z_bss_zero>
	z_data_copy();
    316c:	f014 fdb2 	bl	17cd4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3170:	f000 f9ca 	bl	3508 <z_arm_interrupt_init>
	z_cstart();
    3174:	f013 fe9e 	bl	16eb4 <z_cstart>
    3178:	00000000 	.word	0x00000000
    317c:	e000ed00 	.word	0xe000ed00

00003180 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3180:	4a09      	ldr	r2, [pc, #36]	; (31a8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3182:	490a      	ldr	r1, [pc, #40]	; (31ac <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3184:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3186:	6809      	ldr	r1, [r1, #0]
    3188:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    318a:	4909      	ldr	r1, [pc, #36]	; (31b0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    318c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    318e:	684b      	ldr	r3, [r1, #4]
    3190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3194:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    3196:	2300      	movs	r3, #0
    3198:	f383 8811 	msr	BASEPRI, r3
    319c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    31a0:	6893      	ldr	r3, [r2, #8]
}
    31a2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    31a4:	4770      	bx	lr
    31a6:	bf00      	nop
    31a8:	20002748 	.word	0x20002748
    31ac:	0001dd04 	.word	0x0001dd04
    31b0:	e000ed00 	.word	0xe000ed00

000031b4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    31b4:	4912      	ldr	r1, [pc, #72]	; (3200 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    31b6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    31b8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    31bc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    31be:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    31c2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    31c6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    31c8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    31cc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    31d0:	4f0c      	ldr	r7, [pc, #48]	; (3204 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    31d2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    31d6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    31d8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    31da:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    31dc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    31de:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    31e0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    31e2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    31e6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    31e8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    31ea:	f000 f9cf 	bl	358c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    31ee:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    31f2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    31f6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    31fa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    31fe:	4770      	bx	lr
    ldr r1, =_kernel
    3200:	20002748 	.word	0x20002748
    ldr v4, =_SCS_ICSR
    3204:	e000ed04 	.word	0xe000ed04

00003208 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3208:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    320c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    320e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3212:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3216:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3218:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    321c:	2902      	cmp	r1, #2
    beq _oops
    321e:	d0ff      	beq.n	3220 <_oops>

00003220 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3220:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3222:	f015 fd95 	bl	18d50 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3226:	bd01      	pop	{r0, pc}

00003228 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3228:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    322c:	9b00      	ldr	r3, [sp, #0]
    322e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3232:	490a      	ldr	r1, [pc, #40]	; (325c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3234:	9b01      	ldr	r3, [sp, #4]
    3236:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    323a:	9b02      	ldr	r3, [sp, #8]
    323c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3240:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3248:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    324c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3250:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3252:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3254:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3256:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3258:	4770      	bx	lr
    325a:	bf00      	nop
    325c:	00018395 	.word	0x00018395

00003260 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3260:	4a09      	ldr	r2, [pc, #36]	; (3288 <z_check_thread_stack_fail+0x28>)
{
    3262:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3264:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3266:	b170      	cbz	r0, 3286 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3268:	f113 0f16 	cmn.w	r3, #22
    326c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    326e:	d005      	beq.n	327c <z_check_thread_stack_fail+0x1c>
    3270:	f1a0 0220 	sub.w	r2, r0, #32
    3274:	429a      	cmp	r2, r3
    3276:	d805      	bhi.n	3284 <z_check_thread_stack_fail+0x24>
    3278:	4283      	cmp	r3, r0
    327a:	d203      	bcs.n	3284 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    327c:	4281      	cmp	r1, r0
    327e:	bf28      	it	cs
    3280:	2000      	movcs	r0, #0
    3282:	4770      	bx	lr
    3284:	2000      	movs	r0, #0
}
    3286:	4770      	bx	lr
    3288:	20002748 	.word	0x20002748

0000328c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    328c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    328e:	4b09      	ldr	r3, [pc, #36]	; (32b4 <arch_switch_to_main_thread+0x28>)
    3290:	6098      	str	r0, [r3, #8]
{
    3292:	460d      	mov	r5, r1
    3294:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3296:	f000 f979 	bl	358c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    329a:	4620      	mov	r0, r4
    329c:	f385 8809 	msr	PSP, r5
    32a0:	2100      	movs	r1, #0
    32a2:	b663      	cpsie	if
    32a4:	f381 8811 	msr	BASEPRI, r1
    32a8:	f3bf 8f6f 	isb	sy
    32ac:	2200      	movs	r2, #0
    32ae:	2300      	movs	r3, #0
    32b0:	f015 f870 	bl	18394 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    32b4:	20002748 	.word	0x20002748

000032b8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    32b8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    32ba:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    32bc:	4a0b      	ldr	r2, [pc, #44]	; (32ec <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    32be:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    32c0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    32c2:	bf1e      	ittt	ne
	movne	r1, #0
    32c4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    32c6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    32c8:	f018 fcf9 	blne	1bcbe <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    32cc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    32ce:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    32d2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    32d6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    32da:	4905      	ldr	r1, [pc, #20]	; (32f0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    32dc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    32de:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    32e0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    32e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    32e6:	4903      	ldr	r1, [pc, #12]	; (32f4 <_isr_wrapper+0x3c>)
	bx r1
    32e8:	4708      	bx	r1
    32ea:	0000      	.short	0x0000
	ldr r2, =_kernel
    32ec:	20002748 	.word	0x20002748
	ldr r1, =_sw_isr_table
    32f0:	0001c800 	.word	0x0001c800
	ldr r1, =z_arm_int_exit
    32f4:	000032f9 	.word	0x000032f9

000032f8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    32f8:	4b04      	ldr	r3, [pc, #16]	; (330c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    32fa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    32fc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    32fe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3300:	d003      	beq.n	330a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3302:	4903      	ldr	r1, [pc, #12]	; (3310 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3308:	600a      	str	r2, [r1, #0]

0000330a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    330a:	4770      	bx	lr
	ldr r3, =_kernel
    330c:	20002748 	.word	0x20002748
	ldr r1, =_SCS_ICSR
    3310:	e000ed04 	.word	0xe000ed04

00003314 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3314:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3316:	4b19      	ldr	r3, [pc, #100]	; (337c <mem_manage_fault+0x68>)
{
    3318:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    331a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    331c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    331e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    3320:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3322:	0790      	lsls	r0, r2, #30
    3324:	d519      	bpl.n	335a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3326:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    332a:	0612      	lsls	r2, r2, #24
    332c:	d515      	bpl.n	335a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    332e:	b119      	cbz	r1, 3338 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    3336:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    333a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    333c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    333e:	06d1      	lsls	r1, r2, #27
    3340:	d40e      	bmi.n	3360 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3344:	079a      	lsls	r2, r3, #30
    3346:	d40b      	bmi.n	3360 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3348:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    334a:	4a0c      	ldr	r2, [pc, #48]	; (337c <mem_manage_fault+0x68>)
    334c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    334e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3352:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3354:	2300      	movs	r3, #0
    3356:	7023      	strb	r3, [r4, #0]

	return reason;
}
    3358:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    335a:	f06f 0015 	mvn.w	r0, #21
    335e:	e7eb      	b.n	3338 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3360:	4b06      	ldr	r3, [pc, #24]	; (337c <mem_manage_fault+0x68>)
    3362:	685b      	ldr	r3, [r3, #4]
    3364:	051b      	lsls	r3, r3, #20
    3366:	d5ef      	bpl.n	3348 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3368:	4629      	mov	r1, r5
    336a:	f7ff ff79 	bl	3260 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    336e:	2800      	cmp	r0, #0
    3370:	d0ea      	beq.n	3348 <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3372:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3376:	2002      	movs	r0, #2
    3378:	e7e7      	b.n	334a <mem_manage_fault+0x36>
    337a:	bf00      	nop
    337c:	e000ed00 	.word	0xe000ed00

00003380 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3380:	4b0d      	ldr	r3, [pc, #52]	; (33b8 <bus_fault.constprop.0+0x38>)
    3382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3388:	0592      	lsls	r2, r2, #22
    338a:	d508      	bpl.n	339e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    338c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    338e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3390:	0412      	lsls	r2, r2, #16
    3392:	d504      	bpl.n	339e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    3394:	b118      	cbz	r0, 339e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3396:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    339c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    339e:	4b06      	ldr	r3, [pc, #24]	; (33b8 <bus_fault.constprop.0+0x38>)
    33a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    33a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    33a4:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    33a6:	bf58      	it	pl
    33a8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    33aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    33ac:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    33ae:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    33b2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    33b4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    33b6:	4770      	bx	lr
    33b8:	e000ed00 	.word	0xe000ed00

000033bc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    33bc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    33be:	4b48      	ldr	r3, [pc, #288]	; (34e0 <z_arm_fault+0x124>)
    33c0:	685b      	ldr	r3, [r3, #4]
{
    33c2:	b08a      	sub	sp, #40	; 0x28
    33c4:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    33c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    33ca:	2600      	movs	r6, #0
    33cc:	f386 8811 	msr	BASEPRI, r6
    33d0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    33d4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    33d8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    33dc:	d111      	bne.n	3402 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    33de:	f002 010c 	and.w	r1, r2, #12
    33e2:	2908      	cmp	r1, #8
    33e4:	d00d      	beq.n	3402 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    33e6:	0711      	lsls	r1, r2, #28
    33e8:	d401      	bmi.n	33ee <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    33ea:	4605      	mov	r5, r0
			*nested_exc = true;
    33ec:	2601      	movs	r6, #1
	*recoverable = false;
    33ee:	2200      	movs	r2, #0
	switch (fault) {
    33f0:	3b03      	subs	r3, #3
	*recoverable = false;
    33f2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    33f6:	2b03      	cmp	r3, #3
    33f8:	d86b      	bhi.n	34d2 <z_arm_fault+0x116>
    33fa:	e8df f003 	tbb	[pc, r3]
    33fe:	5504      	.short	0x5504
    3400:	5d59      	.short	0x5d59
		return NULL;
    3402:	4635      	mov	r5, r6
    3404:	e7f3      	b.n	33ee <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3406:	4b36      	ldr	r3, [pc, #216]	; (34e0 <z_arm_fault+0x124>)
    3408:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    340a:	f014 0402 	ands.w	r4, r4, #2
    340e:	d160      	bne.n	34d2 <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3412:	2a00      	cmp	r2, #0
    3414:	db15      	blt.n	3442 <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3418:	0052      	lsls	r2, r2, #1
    341a:	d512      	bpl.n	3442 <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    341c:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    341e:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    3422:	f64d 7202 	movw	r2, #57090	; 0xdf02
    3426:	4291      	cmp	r1, r2
    3428:	d00a      	beq.n	3440 <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    342a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    342e:	b30a      	cbz	r2, 3474 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    3430:	f10d 0207 	add.w	r2, sp, #7
    3434:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3436:	4628      	mov	r0, r5
    3438:	f7ff ff6c 	bl	3314 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    343c:	4604      	mov	r4, r0
		break;
    343e:	e000      	b.n	3442 <z_arm_fault+0x86>
			reason = esf->basic.r0;
    3440:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3442:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3446:	b99b      	cbnz	r3, 3470 <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3448:	2220      	movs	r2, #32
    344a:	4629      	mov	r1, r5
    344c:	a802      	add	r0, sp, #8
    344e:	f015 fcd7 	bl	18e00 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3452:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3454:	2e00      	cmp	r6, #0
    3456:	d03e      	beq.n	34d6 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3458:	f3c3 0208 	ubfx	r2, r3, #0, #9
    345c:	b922      	cbnz	r2, 3468 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    345e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3462:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3466:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3468:	a902      	add	r1, sp, #8
    346a:	4620      	mov	r0, r4
    346c:	f015 fc6e 	bl	18d4c <z_arm_fatal_error>
}
    3470:	b00a      	add	sp, #40	; 0x28
    3472:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    3474:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    3478:	b12a      	cbz	r2, 3486 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    347a:	f10d 0107 	add.w	r1, sp, #7
    347e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3480:	f7ff ff7e 	bl	3380 <bus_fault.constprop.0>
    3484:	e7da      	b.n	343c <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    3486:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    3488:	b292      	uxth	r2, r2
    348a:	2a00      	cmp	r2, #0
    348c:	d0d9      	beq.n	3442 <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    348e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    349a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    349c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    34a0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    34a4:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    34a6:	e7cc      	b.n	3442 <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    34a8:	f10d 0207 	add.w	r2, sp, #7
    34ac:	2100      	movs	r1, #0
    34ae:	e7c2      	b.n	3436 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    34b0:	f10d 0107 	add.w	r1, sp, #7
    34b4:	2000      	movs	r0, #0
    34b6:	e7e3      	b.n	3480 <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    34b8:	4b09      	ldr	r3, [pc, #36]	; (34e0 <z_arm_fault+0x124>)
    34ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    34bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    34be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    34c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    34c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    34c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    34c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    34c8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    34cc:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    34d0:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    34d2:	2400      	movs	r4, #0
    34d4:	e7b5      	b.n	3442 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    34d6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    34da:	f023 0301 	bic.w	r3, r3, #1
    34de:	e7c2      	b.n	3466 <z_arm_fault+0xaa>
    34e0:	e000ed00 	.word	0xe000ed00

000034e4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    34e4:	4a02      	ldr	r2, [pc, #8]	; (34f0 <z_arm_fault_init+0xc>)
    34e6:	6953      	ldr	r3, [r2, #20]
    34e8:	f043 0310 	orr.w	r3, r3, #16
    34ec:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    34ee:	4770      	bx	lr
    34f0:	e000ed00 	.word	0xe000ed00

000034f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    34f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    34f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    34fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    34fe:	4672      	mov	r2, lr
	bl z_arm_fault
    3500:	f7ff ff5c 	bl	33bc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3504:	bd01      	pop	{r0, pc}
    3506:	bf00      	nop

00003508 <z_arm_interrupt_init>:
    3508:	4804      	ldr	r0, [pc, #16]	; (351c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    350a:	2300      	movs	r3, #0
    350c:	2120      	movs	r1, #32
    350e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3510:	3301      	adds	r3, #1
    3512:	2b27      	cmp	r3, #39	; 0x27
    3514:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3518:	d1f9      	bne.n	350e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    351a:	4770      	bx	lr
    351c:	e000e100 	.word	0xe000e100

00003520 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3520:	f019 f848 	bl	1c5b4 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3524:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3526:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    352a:	4808      	ldr	r0, [pc, #32]	; (354c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    352c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3530:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3532:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3536:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    353a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    353c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    353e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3542:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3546:	f7ff fdf7 	bl	3138 <z_arm_prep_c>
    354a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    354c:	20003a20 	.word	0x20003a20

00003550 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3550:	4b06      	ldr	r3, [pc, #24]	; (356c <z_impl_k_thread_abort+0x1c>)
    3552:	689b      	ldr	r3, [r3, #8]
    3554:	4283      	cmp	r3, r0
    3556:	d107      	bne.n	3568 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3558:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    355c:	b123      	cbz	r3, 3568 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    355e:	4a04      	ldr	r2, [pc, #16]	; (3570 <z_impl_k_thread_abort+0x20>)
    3560:	6853      	ldr	r3, [r2, #4]
    3562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3566:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    3568:	f014 bb50 	b.w	17c0c <z_thread_abort>
    356c:	20002748 	.word	0x20002748
    3570:	e000ed00 	.word	0xe000ed00

00003574 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3574:	4b02      	ldr	r3, [pc, #8]	; (3580 <z_arm_configure_static_mpu_regions+0xc>)
    3576:	4a03      	ldr	r2, [pc, #12]	; (3584 <z_arm_configure_static_mpu_regions+0x10>)
    3578:	4803      	ldr	r0, [pc, #12]	; (3588 <z_arm_configure_static_mpu_regions+0x14>)
    357a:	2101      	movs	r1, #1
    357c:	f000 b86e 	b.w	365c <arm_core_mpu_configure_static_mpu_regions>
    3580:	20010000 	.word	0x20010000
    3584:	20000000 	.word	0x20000000
    3588:	0001ca98 	.word	0x0001ca98

0000358c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    358c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    358e:	4b05      	ldr	r3, [pc, #20]	; (35a4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3590:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    3592:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3594:	4a04      	ldr	r2, [pc, #16]	; (35a8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3596:	2120      	movs	r1, #32
    3598:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    359c:	4618      	mov	r0, r3
    359e:	2101      	movs	r1, #1
    35a0:	f000 b866 	b.w	3670 <arm_core_mpu_configure_dynamic_mpu_regions>
    35a4:	200013e8 	.word	0x200013e8
    35a8:	150b0000 	.word	0x150b0000

000035ac <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    35ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    35ae:	4f1f      	ldr	r7, [pc, #124]	; (362c <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    35b0:	2600      	movs	r6, #0
    35b2:	428e      	cmp	r6, r1
    35b4:	db01      	blt.n	35ba <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    35b6:	4610      	mov	r0, r2
    35b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    35ba:	6844      	ldr	r4, [r0, #4]
    35bc:	b39c      	cbz	r4, 3626 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    35be:	b153      	cbz	r3, 35d6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    35c0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    35c4:	ea14 0f0c 	tst.w	r4, ip
    35c8:	d118      	bne.n	35fc <mpu_configure_regions+0x50>
		&&
    35ca:	2c1f      	cmp	r4, #31
    35cc:	d916      	bls.n	35fc <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    35ce:	6805      	ldr	r5, [r0, #0]
		&&
    35d0:	ea1c 0f05 	tst.w	ip, r5
    35d4:	d112      	bne.n	35fc <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    35d6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    35d8:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    35da:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    35de:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    35e0:	d90f      	bls.n	3602 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    35e2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    35e6:	d80e      	bhi.n	3606 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    35e8:	3c01      	subs	r4, #1
    35ea:	fab4 f484 	clz	r4, r4
    35ee:	f1c4 041f 	rsb	r4, r4, #31
    35f2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    35f4:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    35f6:	ea4c 0404 	orr.w	r4, ip, r4
    35fa:	d906      	bls.n	360a <mpu_configure_regions+0x5e>
			return -EINVAL;
    35fc:	f06f 0215 	mvn.w	r2, #21
    3600:	e7d9      	b.n	35b6 <mpu_configure_regions+0xa>
		return REGION_32B;
    3602:	2408      	movs	r4, #8
    3604:	e7f6      	b.n	35f4 <mpu_configure_regions+0x48>
		return REGION_4G;
    3606:	243e      	movs	r4, #62	; 0x3e
    3608:	e7f4      	b.n	35f4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    360a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    360e:	4315      	orrs	r5, r2
    3610:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3614:	f044 0401 	orr.w	r4, r4, #1
    3618:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    361c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    3620:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3622:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    3626:	3601      	adds	r6, #1
    3628:	300c      	adds	r0, #12
    362a:	e7c2      	b.n	35b2 <mpu_configure_regions+0x6>
    362c:	e000ed00 	.word	0xe000ed00

00003630 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3630:	4b04      	ldr	r3, [pc, #16]	; (3644 <arm_core_mpu_enable+0x14>)
    3632:	2205      	movs	r2, #5
    3634:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3638:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    363c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3640:	4770      	bx	lr
    3642:	bf00      	nop
    3644:	e000ed00 	.word	0xe000ed00

00003648 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3648:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    364c:	4b02      	ldr	r3, [pc, #8]	; (3658 <arm_core_mpu_disable+0x10>)
    364e:	2200      	movs	r2, #0
    3650:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3654:	4770      	bx	lr
    3656:	bf00      	nop
    3658:	e000ed00 	.word	0xe000ed00

0000365c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    365c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    365e:	4c03      	ldr	r4, [pc, #12]	; (366c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3660:	2301      	movs	r3, #1
    3662:	7822      	ldrb	r2, [r4, #0]
    3664:	f7ff ffa2 	bl	35ac <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3668:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    366a:	bd10      	pop	{r4, pc}
    366c:	200027b2 	.word	0x200027b2

00003670 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3670:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3672:	4a09      	ldr	r2, [pc, #36]	; (3698 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3674:	2300      	movs	r3, #0
    3676:	7812      	ldrb	r2, [r2, #0]
    3678:	f7ff ff98 	bl	35ac <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    367c:	f110 0f16 	cmn.w	r0, #22
    3680:	d002      	beq.n	3688 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    3682:	4a06      	ldr	r2, [pc, #24]	; (369c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3684:	2807      	cmp	r0, #7
    3686:	dd00      	ble.n	368a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3688:	bd08      	pop	{r3, pc}
    368a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    368e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    3692:	3001      	adds	r0, #1
    3694:	e7f6      	b.n	3684 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    3696:	bf00      	nop
    3698:	200027b2 	.word	0x200027b2
    369c:	e000ed00 	.word	0xe000ed00

000036a0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    36a0:	4914      	ldr	r1, [pc, #80]	; (36f4 <z_arm_mpu_init+0x54>)
    36a2:	6808      	ldr	r0, [r1, #0]
    36a4:	2808      	cmp	r0, #8
{
    36a6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    36a8:	d821      	bhi.n	36ee <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    36aa:	f7ff ffcd 	bl	3648 <arm_core_mpu_disable>
    36ae:	4c12      	ldr	r4, [pc, #72]	; (36f8 <z_arm_mpu_init+0x58>)
    36b0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    36b2:	2200      	movs	r2, #0
    36b4:	4290      	cmp	r0, r2
    36b6:	f101 010c 	add.w	r1, r1, #12
    36ba:	d105      	bne.n	36c8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    36bc:	4b0f      	ldr	r3, [pc, #60]	; (36fc <z_arm_mpu_init+0x5c>)
    36be:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    36c0:	f7ff ffb6 	bl	3630 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    36c4:	2000      	movs	r0, #0
}
    36c6:	bd10      	pop	{r4, pc}
    36c8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36cc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    36d0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    36d4:	4313      	orrs	r3, r2
    36d6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36da:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36de:	f851 3c04 	ldr.w	r3, [r1, #-4]
    36e2:	f043 0301 	orr.w	r3, r3, #1
    36e6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    36ea:	3201      	adds	r2, #1
    36ec:	e7e2      	b.n	36b4 <z_arm_mpu_init+0x14>
		return -1;
    36ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36f2:	e7e8      	b.n	36c6 <z_arm_mpu_init+0x26>
    36f4:	0001caa4 	.word	0x0001caa4
    36f8:	e000ed00 	.word	0xe000ed00
    36fc:	200027b2 	.word	0x200027b2

00003700 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3700:	4b01      	ldr	r3, [pc, #4]	; (3708 <__stdout_hook_install+0x8>)
    3702:	6018      	str	r0, [r3, #0]
}
    3704:	4770      	bx	lr
    3706:	bf00      	nop
    3708:	20000198 	.word	0x20000198

0000370c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    370c:	f04f 0220 	mov.w	r2, #32
    3710:	f3ef 8311 	mrs	r3, BASEPRI
    3714:	f382 8812 	msr	BASEPRI_MAX, r2
    3718:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    371c:	4a04      	ldr	r2, [pc, #16]	; (3730 <nordicsemi_nrf52_init+0x24>)
    371e:	2101      	movs	r1, #1
    3720:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    3724:	f383 8811 	msr	BASEPRI, r3
    3728:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    372c:	2000      	movs	r0, #0
    372e:	4770      	bx	lr
    3730:	4001e000 	.word	0x4001e000

00003734 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3734:	b120      	cbz	r0, 3740 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3736:	4b03      	ldr	r3, [pc, #12]	; (3744 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3738:	0180      	lsls	r0, r0, #6
    373a:	f043 0301 	orr.w	r3, r3, #1
    373e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3740:	4770      	bx	lr
    3742:	bf00      	nop
    3744:	0001ca80 	.word	0x0001ca80

00003748 <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
    3748:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
    374a:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
    374c:	6820      	ldr	r0, [r4, #0]
    374e:	f013 fb37 	bl	16dc0 <z_impl_device_get_binding>
	if (!gpio) {
    3752:	b930      	cbnz	r0, 3762 <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
    3754:	480d      	ldr	r0, [pc, #52]	; (378c <pwr_ctrl_init+0x44>)
    3756:	6821      	ldr	r1, [r4, #0]
    3758:	f014 fd06 	bl	18168 <printk>
		return -ENODEV;
    375c:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
    3760:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
    3762:	6861      	ldr	r1, [r4, #4]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    3764:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    3766:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3768:	b2c9      	uxtb	r1, r1
    376a:	2301      	movs	r3, #1
    376c:	fa03 f201 	lsl.w	r2, r3, r1
    3770:	6823      	ldr	r3, [r4, #0]
    3772:	ea23 0302 	bic.w	r3, r3, r2
    3776:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
    3778:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    377c:	682b      	ldr	r3, [r5, #0]
    377e:	4798      	blx	r3
    3780:	2021      	movs	r0, #33	; 0x21
    3782:	2100      	movs	r1, #0
    3784:	f014 fa12 	bl	17bac <z_impl_k_sleep>
	return 0;
    3788:	2000      	movs	r0, #0
    378a:	e7e9      	b.n	3760 <pwr_ctrl_init+0x18>
    378c:	0001e078 	.word	0x0001e078

00003790 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3790:	b430      	push	{r4, r5}
    3792:	4603      	mov	r3, r0
    3794:	4608      	mov	r0, r1
	switch (src->type) {
    3796:	781a      	ldrb	r2, [r3, #0]
    3798:	2a01      	cmp	r2, #1
    379a:	d013      	beq.n	37c4 <uuid_to_uuid128+0x34>
    379c:	2a02      	cmp	r2, #2
    379e:	d026      	beq.n	37ee <uuid_to_uuid128+0x5e>
    37a0:	b972      	cbnz	r2, 37c0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    37a2:	4a15      	ldr	r2, [pc, #84]	; (37f8 <uuid_to_uuid128+0x68>)
    37a4:	f102 0410 	add.w	r4, r2, #16
    37a8:	f852 5b04 	ldr.w	r5, [r2], #4
    37ac:	f841 5b04 	str.w	r5, [r1], #4
    37b0:	42a2      	cmp	r2, r4
    37b2:	d1f9      	bne.n	37a8 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    37b4:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    37b6:	7812      	ldrb	r2, [r2, #0]
    37b8:	700a      	strb	r2, [r1, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    37ba:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    37bc:	0a1b      	lsrs	r3, r3, #8
    37be:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    37c0:	bc30      	pop	{r4, r5}
    37c2:	4770      	bx	lr
		*dst = uuid128_base;
    37c4:	4a0c      	ldr	r2, [pc, #48]	; (37f8 <uuid_to_uuid128+0x68>)
    37c6:	f102 0410 	add.w	r4, r2, #16
    37ca:	f852 5b04 	ldr.w	r5, [r2], #4
    37ce:	f841 5b04 	str.w	r5, [r1], #4
    37d2:	42a2      	cmp	r2, r4
    37d4:	d1f9      	bne.n	37ca <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    37d6:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    37d8:	7812      	ldrb	r2, [r2, #0]
    37da:	700a      	strb	r2, [r1, #0]
    37dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    37e0:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    37e2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    37e4:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    37e6:	0a1b      	lsrs	r3, r3, #8
    37e8:	7382      	strb	r2, [r0, #14]
    37ea:	7403      	strb	r3, [r0, #16]
}
    37ec:	e7e8      	b.n	37c0 <uuid_to_uuid128+0x30>
}
    37ee:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    37f0:	2211      	movs	r2, #17
    37f2:	4619      	mov	r1, r3
    37f4:	f015 bb04 	b.w	18e00 <memcpy>
    37f8:	0001e0a3 	.word	0x0001e0a3

000037fc <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    37fc:	b538      	push	{r3, r4, r5, lr}
    37fe:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    3800:	4805      	ldr	r0, [pc, #20]	; (3818 <bt_buf_get_rx+0x1c>)
    3802:	f017 fa76 	bl	1acf2 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    3806:	4604      	mov	r4, r0
    3808:	b120      	cbz	r0, 3814 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    380a:	2100      	movs	r1, #0
    380c:	3008      	adds	r0, #8
    380e:	f017 fa8f 	bl	1ad30 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    3812:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3814:	4620      	mov	r0, r4
    3816:	bd38      	pop	{r3, r4, r5, pc}
    3818:	2000097c 	.word	0x2000097c

0000381c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    381c:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    381e:	490b      	ldr	r1, [pc, #44]	; (384c <bt_buf_get_cmd_complete+0x30>)
{
    3820:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    3822:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
    3826:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    3828:	b920      	cbnz	r0, 3834 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    382a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    382e:	2001      	movs	r0, #1
    3830:	f7ff bfe4 	b.w	37fc <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    3834:	f017 fa8d 	bl	1ad52 <net_buf_ref>
    3838:	2301      	movs	r3, #1
		buf->len = 0U;
    383a:	2100      	movs	r1, #0
    383c:	7503      	strb	r3, [r0, #20]
    383e:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    3840:	4604      	mov	r4, r0
    3842:	3008      	adds	r0, #8
    3844:	f017 fa74 	bl	1ad30 <net_buf_simple_reserve>
}
    3848:	4620      	mov	r0, r4
    384a:	bd10      	pop	{r4, pc}
    384c:	20000000 	.word	0x20000000

00003850 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    3850:	b570      	push	{r4, r5, r6, lr}
    3852:	4604      	mov	r4, r0
	switch (evt) {
    3854:	2c0f      	cmp	r4, #15
{
    3856:	460d      	mov	r5, r1
    3858:	4610      	mov	r0, r2
    385a:	4619      	mov	r1, r3
	switch (evt) {
    385c:	d805      	bhi.n	386a <bt_buf_get_evt+0x1a>
    385e:	2c0d      	cmp	r4, #13
    3860:	d912      	bls.n	3888 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    3862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    3866:	f7ff bfd9 	b.w	381c <bt_buf_get_cmd_complete>
	switch (evt) {
    386a:	2c13      	cmp	r4, #19
    386c:	d10c      	bne.n	3888 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    386e:	480b      	ldr	r0, [pc, #44]	; (389c <bt_buf_get_evt+0x4c>)
    3870:	f017 fa3f 	bl	1acf2 <net_buf_alloc_fixed>
			if (buf) {
    3874:	4604      	mov	r4, r0
    3876:	b128      	cbz	r0, 3884 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    3878:	2100      	movs	r1, #0
    387a:	3008      	adds	r0, #8
    387c:	f017 fa58 	bl	1ad30 <net_buf_simple_reserve>
    3880:	2301      	movs	r3, #1
    3882:	7523      	strb	r3, [r4, #20]
}
    3884:	4620      	mov	r0, r4
    3886:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    3888:	4602      	mov	r2, r0
    388a:	460b      	mov	r3, r1
		if (discardable) {
    388c:	b10d      	cbz	r5, 3892 <bt_buf_get_evt+0x42>
    388e:	4804      	ldr	r0, [pc, #16]	; (38a0 <bt_buf_get_evt+0x50>)
    3890:	e7ee      	b.n	3870 <bt_buf_get_evt+0x20>
}
    3892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3896:	2001      	movs	r0, #1
    3898:	f7ff bfb0 	b.w	37fc <bt_buf_get_rx>
    389c:	200009a8 	.word	0x200009a8
    38a0:	200008f8 	.word	0x200008f8

000038a4 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
    38a4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    38a6:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
    38a8:	781a      	ldrb	r2, [r3, #0]
    38aa:	b972      	cbnz	r2, 38ca <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    38ac:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
    38b0:	4620      	mov	r0, r4
    38b2:	f001 fc95 	bl	51e0 <bt_conn_lookup_handle>
	if (!conn) {
    38b6:	4605      	mov	r5, r0
    38b8:	b940      	cbnz	r0, 38cc <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    38ba:	4b08      	ldr	r3, [pc, #32]	; (38dc <hci_disconn_complete_prio+0x38>)
    38bc:	881a      	ldrh	r2, [r3, #0]
    38be:	b922      	cbnz	r2, 38ca <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    38c0:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    38c4:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    38c8:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
    38ca:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    38cc:	2101      	movs	r1, #1
    38ce:	f001 fc8f 	bl	51f0 <bt_conn_set_state>
	bt_conn_unref(conn);
    38d2:	4628      	mov	r0, r5
}
    38d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    38d8:	f016 b827 	b.w	1992a <bt_conn_unref>
    38dc:	20002788 	.word	0x20002788

000038e0 <hci_le_meta_event>:
#endif /* CONFIG_BT_DF_CONNECTION_CTE_REQ */

};

static void hci_le_meta_event(struct net_buf *buf)
{
    38e0:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    38e2:	2101      	movs	r1, #1
    38e4:	4604      	mov	r4, r0
    38e6:	3008      	adds	r0, #8
    38e8:	f017 fa8c 	bl	1ae04 <net_buf_simple_pull_mem>

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    38ec:	4621      	mov	r1, r4
    38ee:	4a03      	ldr	r2, [pc, #12]	; (38fc <hci_le_meta_event+0x1c>)
    38f0:	7800      	ldrb	r0, [r0, #0]
}
    38f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    38f6:	2307      	movs	r3, #7
    38f8:	f015 bb54 	b.w	18fa4 <handle_event>
    38fc:	0001cb04 	.word	0x0001cb04

00003900 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    3900:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    3902:	4c0c      	ldr	r4, [pc, #48]	; (3934 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    3904:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    3906:	2205      	movs	r2, #5
    3908:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    390c:	f001 fdfc 	bl	5508 <bt_conn_lookup_state_le>
		if (!conn) {
    3910:	b970      	cbnz	r0, 3930 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    3912:	4b09      	ldr	r3, [pc, #36]	; (3938 <find_pending_connect.part.0+0x38>)
    3914:	6818      	ldr	r0, [r3, #0]
    3916:	889a      	ldrh	r2, [r3, #4]
    3918:	9000      	str	r0, [sp, #0]
    391a:	799b      	ldrb	r3, [r3, #6]
    391c:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    3920:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
    3924:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    3928:	2204      	movs	r2, #4
    392a:	4669      	mov	r1, sp
    392c:	f001 fdec 	bl	5508 <bt_conn_lookup_state_le>
}
    3930:	b002      	add	sp, #8
    3932:	bd10      	pop	{r4, pc}
    3934:	20000000 	.word	0x20000000
    3938:	0001ca5e 	.word	0x0001ca5e

0000393c <hci_cmd_done>:
{
    393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    393e:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3940:	7990      	ldrb	r0, [r2, #6]
{
    3942:	460e      	mov	r6, r1
    3944:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3946:	f010 fc47 	bl	141d8 <net_buf_pool_get>
    394a:	4b2d      	ldr	r3, [pc, #180]	; (3a00 <hci_cmd_done+0xc4>)
    394c:	4283      	cmp	r3, r0
    394e:	d155      	bne.n	39fc <hci_cmd_done+0xc0>
	if (cmd(buf)->opcode != opcode) {
    3950:	4620      	mov	r0, r4
    3952:	f010 fc49 	bl	141e8 <net_buf_id>
    3956:	4d2b      	ldr	r5, [pc, #172]	; (3a04 <hci_cmd_done+0xc8>)
    3958:	230c      	movs	r3, #12
    395a:	fb03 5000 	mla	r0, r3, r0, r5
    395e:	8843      	ldrh	r3, [r0, #2]
    3960:	42bb      	cmp	r3, r7
    3962:	d14b      	bne.n	39fc <hci_cmd_done+0xc0>
	if (bt_dev.sent_cmd) {
    3964:	4f28      	ldr	r7, [pc, #160]	; (3a08 <hci_cmd_done+0xcc>)
    3966:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    396a:	b120      	cbz	r0, 3976 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
    396c:	f010 fcf8 	bl	14360 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3970:	2300      	movs	r3, #0
    3972:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	if (cmd(buf)->state && !status) {
    3976:	4620      	mov	r0, r4
    3978:	f010 fc36 	bl	141e8 <net_buf_id>
    397c:	270c      	movs	r7, #12
    397e:	fb07 5000 	mla	r0, r7, r0, r5
    3982:	6843      	ldr	r3, [r0, #4]
    3984:	b1a3      	cbz	r3, 39b0 <hci_cmd_done+0x74>
    3986:	b99e      	cbnz	r6, 39b0 <hci_cmd_done+0x74>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    3988:	4620      	mov	r0, r4
    398a:	f010 fc2d 	bl	141e8 <net_buf_id>
    398e:	fb07 5000 	mla	r0, r7, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3992:	2301      	movs	r3, #1
    3994:	6847      	ldr	r7, [r0, #4]
    3996:	e9d7 2000 	ldrd	r2, r0, [r7]
    399a:	f000 011f 	and.w	r1, r0, #31
    399e:	fa03 f101 	lsl.w	r1, r3, r1

	if (val) {
    39a2:	7a3b      	ldrb	r3, [r7, #8]
    39a4:	0940      	lsrs	r0, r0, #5
    39a6:	b1d3      	cbz	r3, 39de <hci_cmd_done+0xa2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    39a8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    39ac:	f015 fb0f 	bl	18fce <atomic_or>
	if (cmd(buf)->sync) {
    39b0:	4620      	mov	r0, r4
    39b2:	f010 fc19 	bl	141e8 <net_buf_id>
    39b6:	270c      	movs	r7, #12
    39b8:	fb07 5000 	mla	r0, r7, r0, r5
    39bc:	6883      	ldr	r3, [r0, #8]
    39be:	b1eb      	cbz	r3, 39fc <hci_cmd_done+0xc0>
		cmd(buf)->status = status;
    39c0:	4620      	mov	r0, r4
    39c2:	f010 fc11 	bl	141e8 <net_buf_id>
    39c6:	4378      	muls	r0, r7
    39c8:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    39ca:	4620      	mov	r0, r4
    39cc:	f010 fc0c 	bl	141e8 <net_buf_id>
    39d0:	fb07 5500 	mla	r5, r7, r0, r5
    39d4:	68a8      	ldr	r0, [r5, #8]
}
    39d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    39da:	f013 bc4b 	b.w	17274 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    39de:	43cb      	mvns	r3, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    39e0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    39e4:	f3bf 8f5b 	dmb	ish
    39e8:	e852 1f00 	ldrex	r1, [r2]
    39ec:	4019      	ands	r1, r3
    39ee:	e842 1000 	strex	r0, r1, [r2]
    39f2:	2800      	cmp	r0, #0
    39f4:	d1f8      	bne.n	39e8 <hci_cmd_done+0xac>
    39f6:	f3bf 8f5b 	dmb	ish
    39fa:	e7d9      	b.n	39b0 <hci_cmd_done+0x74>
    39fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39fe:	bf00      	nop
    3a00:	20000950 	.word	0x20000950
    3a04:	200013f4 	.word	0x200013f4
    3a08:	20000000 	.word	0x20000000

00003a0c <hci_cmd_status>:
{
    3a0c:	b538      	push	{r3, r4, r5, lr}
    3a0e:	2104      	movs	r1, #4
    3a10:	4604      	mov	r4, r0
    3a12:	3008      	adds	r0, #8
    3a14:	f017 f9f6 	bl	1ae04 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    3a18:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    3a1a:	7801      	ldrb	r1, [r0, #0]
    3a1c:	8840      	ldrh	r0, [r0, #2]
    3a1e:	4622      	mov	r2, r4
    3a20:	f7ff ff8c 	bl	393c <hci_cmd_done>
	if (ncmd) {
    3a24:	b125      	cbz	r5, 3a30 <hci_cmd_status+0x24>
    3a26:	4803      	ldr	r0, [pc, #12]	; (3a34 <hci_cmd_status+0x28>)
}
    3a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3a2c:	f013 bc22 	b.w	17274 <z_impl_k_sem_give>
    3a30:	bd38      	pop	{r3, r4, r5, pc}
    3a32:	bf00      	nop
    3a34:	20000118 	.word	0x20000118

00003a38 <hci_cmd_complete>:
{
    3a38:	b538      	push	{r3, r4, r5, lr}
    3a3a:	2103      	movs	r1, #3
    3a3c:	4604      	mov	r4, r0
    3a3e:	3008      	adds	r0, #8
    3a40:	f017 f9e0 	bl	1ae04 <net_buf_simple_pull_mem>
	status = buf->data[0];
    3a44:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    3a46:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    3a48:	7819      	ldrb	r1, [r3, #0]
    3a4a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    3a4e:	4622      	mov	r2, r4
    3a50:	f7ff ff74 	bl	393c <hci_cmd_done>
	if (ncmd) {
    3a54:	b125      	cbz	r5, 3a60 <hci_cmd_complete+0x28>
    3a56:	4803      	ldr	r0, [pc, #12]	; (3a64 <hci_cmd_complete+0x2c>)
}
    3a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3a5c:	f013 bc0a 	b.w	17274 <z_impl_k_sem_give>
    3a60:	bd38      	pop	{r3, r4, r5, pc}
    3a62:	bf00      	nop
    3a64:	20000118 	.word	0x20000118

00003a68 <bt_hci_cmd_state_set_init>:
{
    3a68:	b510      	push	{r4, lr}
	state->bit = bit;
    3a6a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    3a6e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3a72:	720b      	strb	r3, [r1, #8]
{
    3a74:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    3a76:	f010 fbb7 	bl	141e8 <net_buf_id>
    3a7a:	4b03      	ldr	r3, [pc, #12]	; (3a88 <bt_hci_cmd_state_set_init+0x20>)
    3a7c:	220c      	movs	r2, #12
    3a7e:	fb02 3300 	mla	r3, r2, r0, r3
    3a82:	605c      	str	r4, [r3, #4]
}
    3a84:	bd10      	pop	{r4, pc}
    3a86:	bf00      	nop
    3a88:	200013f4 	.word	0x200013f4

00003a8c <bt_hci_cmd_create>:
{
    3a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    3a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a98:	4606      	mov	r6, r0
    3a9a:	4817      	ldr	r0, [pc, #92]	; (3af8 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    3a9c:	4d17      	ldr	r5, [pc, #92]	; (3afc <bt_hci_cmd_create+0x70>)
{
    3a9e:	460f      	mov	r7, r1
    3aa0:	f017 f927 	bl	1acf2 <net_buf_alloc_fixed>
    3aa4:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    3aa6:	f100 0a08 	add.w	sl, r0, #8
    3aaa:	2100      	movs	r1, #0
    3aac:	f04f 0800 	mov.w	r8, #0
    3ab0:	4650      	mov	r0, sl
    3ab2:	f017 f93d 	bl	1ad30 <net_buf_simple_reserve>
    3ab6:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    3aba:	4620      	mov	r0, r4
    3abc:	f010 fb94 	bl	141e8 <net_buf_id>
    3ac0:	f04f 090c 	mov.w	r9, #12
    3ac4:	fb09 5000 	mla	r0, r9, r0, r5
    3ac8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    3aca:	4620      	mov	r0, r4
    3acc:	f010 fb8c 	bl	141e8 <net_buf_id>
    3ad0:	fb09 5000 	mla	r0, r9, r0, r5
    3ad4:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    3ad8:	4620      	mov	r0, r4
    3ada:	f010 fb85 	bl	141e8 <net_buf_id>
    3ade:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    3ae2:	2103      	movs	r1, #3
    3ae4:	f8c5 8004 	str.w	r8, [r5, #4]
    3ae8:	4650      	mov	r0, sl
    3aea:	f017 f964 	bl	1adb6 <net_buf_simple_add>
	hdr->param_len = param_len;
    3aee:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    3af0:	8006      	strh	r6, [r0, #0]
}
    3af2:	4620      	mov	r0, r4
    3af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3af8:	20000950 	.word	0x20000950
    3afc:	200013f4 	.word	0x200013f4

00003b00 <bt_hci_cmd_send_sync>:
{
    3b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b02:	4615      	mov	r5, r2
    3b04:	b087      	sub	sp, #28
	if (!buf) {
    3b06:	460c      	mov	r4, r1
    3b08:	b921      	cbnz	r1, 3b14 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    3b0a:	f7ff ffbf 	bl	3a8c <bt_hci_cmd_create>
		if (!buf) {
    3b0e:	4604      	mov	r4, r0
    3b10:	2800      	cmp	r0, #0
    3b12:	d048      	beq.n	3ba6 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    3b14:	2201      	movs	r2, #1
    3b16:	2100      	movs	r1, #0
    3b18:	4668      	mov	r0, sp
    3b1a:	f018 f9a4 	bl	1be66 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    3b1e:	4620      	mov	r0, r4
    3b20:	f010 fb62 	bl	141e8 <net_buf_id>
    3b24:	4f21      	ldr	r7, [pc, #132]	; (3bac <bt_hci_cmd_send_sync+0xac>)
    3b26:	230c      	movs	r3, #12
    3b28:	fb03 7000 	mla	r0, r3, r0, r7
    3b2c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    3b30:	4620      	mov	r0, r4
    3b32:	f017 f90e 	bl	1ad52 <net_buf_ref>
    3b36:	4601      	mov	r1, r0
    3b38:	481d      	ldr	r0, [pc, #116]	; (3bb0 <bt_hci_cmd_send_sync+0xb0>)
    3b3a:	f017 f8fd 	bl	1ad38 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    3b3e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    3b42:	2300      	movs	r3, #0
    3b44:	4668      	mov	r0, sp
    3b46:	f013 fbbb 	bl	172c0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    3b4a:	4606      	mov	r6, r0
    3b4c:	b180      	cbz	r0, 3b70 <bt_hci_cmd_send_sync+0x70>
    3b4e:	4a19      	ldr	r2, [pc, #100]	; (3bb4 <bt_hci_cmd_send_sync+0xb4>)
    3b50:	4919      	ldr	r1, [pc, #100]	; (3bb8 <bt_hci_cmd_send_sync+0xb8>)
    3b52:	481a      	ldr	r0, [pc, #104]	; (3bbc <bt_hci_cmd_send_sync+0xbc>)
    3b54:	f240 1331 	movw	r3, #305	; 0x131
    3b58:	f014 fb06 	bl	18168 <printk>
    3b5c:	4818      	ldr	r0, [pc, #96]	; (3bc0 <bt_hci_cmd_send_sync+0xc0>)
    3b5e:	4631      	mov	r1, r6
    3b60:	f014 fb02 	bl	18168 <printk>
    3b64:	4040      	eors	r0, r0
    3b66:	f380 8811 	msr	BASEPRI, r0
    3b6a:	f04f 0003 	mov.w	r0, #3
    3b6e:	df02      	svc	2
	status = cmd(buf)->status;
    3b70:	4620      	mov	r0, r4
    3b72:	f010 fb39 	bl	141e8 <net_buf_id>
    3b76:	230c      	movs	r3, #12
    3b78:	4358      	muls	r0, r3
    3b7a:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
    3b7c:	b156      	cbz	r6, 3b94 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    3b7e:	4620      	mov	r0, r4
    3b80:	f010 fbee 	bl	14360 <net_buf_unref>
			return -EIO;
    3b84:	2e09      	cmp	r6, #9
    3b86:	bf0c      	ite	eq
    3b88:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    3b8c:	f06f 0004 	mvnne.w	r0, #4
}
    3b90:	b007      	add	sp, #28
    3b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    3b94:	b115      	cbz	r5, 3b9c <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    3b96:	602c      	str	r4, [r5, #0]
	return 0;
    3b98:	4630      	mov	r0, r6
    3b9a:	e7f9      	b.n	3b90 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    3b9c:	4620      	mov	r0, r4
    3b9e:	f010 fbdf 	bl	14360 <net_buf_unref>
	return 0;
    3ba2:	4628      	mov	r0, r5
    3ba4:	e7f4      	b.n	3b90 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    3ba6:	f06f 0068 	mvn.w	r0, #104	; 0x68
    3baa:	e7f1      	b.n	3b90 <bt_hci_cmd_send_sync+0x90>
    3bac:	200013f4 	.word	0x200013f4
    3bb0:	20000134 	.word	0x20000134
    3bb4:	0001e0b4 	.word	0x0001e0b4
    3bb8:	0001e0e8 	.word	0x0001e0e8
    3bbc:	0001e0f1 	.word	0x0001e0f1
    3bc0:	0001e10e 	.word	0x0001e10e

00003bc4 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    3bc4:	4b02      	ldr	r3, [pc, #8]	; (3bd0 <bt_send+0xc>)
    3bc6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
    3bca:	691b      	ldr	r3, [r3, #16]
    3bcc:	4718      	bx	r3
    3bce:	bf00      	nop
    3bd0:	20000000 	.word	0x20000000

00003bd4 <bt_hci_cmd_send>:
{
    3bd4:	b538      	push	{r3, r4, r5, lr}
    3bd6:	4605      	mov	r5, r0
	if (!buf) {
    3bd8:	460c      	mov	r4, r1
    3bda:	b919      	cbnz	r1, 3be4 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    3bdc:	f7ff ff56 	bl	3a8c <bt_hci_cmd_create>
		if (!buf) {
    3be0:	4604      	mov	r4, r0
    3be2:	b198      	cbz	r0, 3c0c <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    3be4:	f640 4335 	movw	r3, #3125	; 0xc35
    3be8:	429d      	cmp	r5, r3
    3bea:	d109      	bne.n	3c00 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    3bec:	4620      	mov	r0, r4
    3bee:	f7ff ffe9 	bl	3bc4 <bt_send>
		if (err) {
    3bf2:	4605      	mov	r5, r0
    3bf4:	b110      	cbz	r0, 3bfc <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    3bf6:	4620      	mov	r0, r4
    3bf8:	f010 fbb2 	bl	14360 <net_buf_unref>
}
    3bfc:	4628      	mov	r0, r5
    3bfe:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    3c00:	4804      	ldr	r0, [pc, #16]	; (3c14 <bt_hci_cmd_send+0x40>)
    3c02:	4621      	mov	r1, r4
    3c04:	f017 f898 	bl	1ad38 <net_buf_put>
	return 0;
    3c08:	2500      	movs	r5, #0
    3c0a:	e7f7      	b.n	3bfc <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    3c0c:	f06f 0568 	mvn.w	r5, #104	; 0x68
    3c10:	e7f4      	b.n	3bfc <bt_hci_cmd_send+0x28>
    3c12:	bf00      	nop
    3c14:	20000134 	.word	0x20000134

00003c18 <conn_auto_initiate>:
{
    3c18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    3c1a:	7a83      	ldrb	r3, [r0, #10]
    3c1c:	2b07      	cmp	r3, #7
{
    3c1e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    3c20:	d157      	bne.n	3cd2 <conn_auto_initiate+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3c22:	f3bf 8f5b 	dmb	ish
    3c26:	6843      	ldr	r3, [r0, #4]
    3c28:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    3c2c:	049b      	lsls	r3, r3, #18
    3c2e:	f100 0604 	add.w	r6, r0, #4
    3c32:	d41b      	bmi.n	3c6c <conn_auto_initiate+0x54>
    3c34:	78c3      	ldrb	r3, [r0, #3]
    3c36:	b123      	cbz	r3, 3c42 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    3c38:	4b27      	ldr	r3, [pc, #156]	; (3cd8 <conn_auto_initiate+0xc0>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    3c3a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    3c3e:	071d      	lsls	r5, r3, #28
    3c40:	d514      	bpl.n	3c6c <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    3c42:	2102      	movs	r1, #2
    3c44:	f242 0016 	movw	r0, #8214	; 0x2016
    3c48:	f7ff ff20 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
    3c4c:	4605      	mov	r5, r0
    3c4e:	b168      	cbz	r0, 3c6c <conn_auto_initiate+0x54>
    3c50:	2102      	movs	r1, #2
    3c52:	3008      	adds	r0, #8
    3c54:	f017 f8af 	bl	1adb6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3c58:	8823      	ldrh	r3, [r4, #0]
    3c5a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    3c5c:	4629      	mov	r1, r5
    3c5e:	f242 0016 	movw	r0, #8214	; 0x2016
}
    3c62:	b004      	add	sp, #16
    3c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    3c68:	f7ff bfb4 	b.w	3bd4 <bt_hci_cmd_send>
    3c6c:	f3bf 8f5b 	dmb	ish
    3c70:	6863      	ldr	r3, [r4, #4]
    3c72:	4d19      	ldr	r5, [pc, #100]	; (3cd8 <conn_auto_initiate+0xc0>)
    3c74:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    3c78:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    3c7c:	f3c3 3100 	ubfx	r1, r3, #12, #1
    3c80:	d111      	bne.n	3ca6 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    3c82:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    3c86:	07d8      	lsls	r0, r3, #31
    3c88:	d50d      	bpl.n	3ca6 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    3c8a:	2302      	movs	r3, #2
    3c8c:	9100      	str	r1, [sp, #0]
    3c8e:	461a      	mov	r2, r3
    3c90:	4620      	mov	r0, r4
    3c92:	f015 fae7 	bl	19264 <bt_le_set_phy>
		if (!err) {
    3c96:	b930      	cbnz	r0, 3ca6 <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3c98:	2180      	movs	r1, #128	; 0x80
    3c9a:	4630      	mov	r0, r6
}
    3c9c:	b004      	add	sp, #16
    3c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ca2:	f015 b994 	b.w	18fce <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    3ca6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    3caa:	069a      	lsls	r2, r3, #26
    3cac:	d511      	bpl.n	3cd2 <conn_auto_initiate+0xba>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    3cae:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    3cb2:	689b      	ldr	r3, [r3, #8]
    3cb4:	079b      	lsls	r3, r3, #30
    3cb6:	d50c      	bpl.n	3cd2 <conn_auto_initiate+0xba>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    3cb8:	f10d 010e 	add.w	r1, sp, #14
    3cbc:	a803      	add	r0, sp, #12
    3cbe:	f015 fa60 	bl	19182 <hci_le_read_max_data_len>
			if (!err) {
    3cc2:	b930      	cbnz	r0, 3cd2 <conn_auto_initiate+0xba>
				err = bt_le_set_data_len(conn,
    3cc4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    3cc8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    3ccc:	4620      	mov	r0, r4
    3cce:	f015 faac 	bl	1922a <bt_le_set_data_len>
}
    3cd2:	b004      	add	sp, #16
    3cd4:	bd70      	pop	{r4, r5, r6, pc}
    3cd6:	bf00      	nop
    3cd8:	20000000 	.word	0x20000000

00003cdc <bt_hci_le_enh_conn_complete>:
{
    3cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    3ce0:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    3ce4:	4a68      	ldr	r2, [pc, #416]	; (3e88 <bt_hci_le_enh_conn_complete+0x1ac>)
	if (evt->status) {
    3ce6:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
    3ce8:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    3cea:	ea6f 5307 	mvn.w	r3, r7, lsl #20
    3cee:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    3cf2:	b29b      	uxth	r3, r3
    3cf4:	4299      	cmp	r1, r3
    3cf6:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    3cfa:	bf08      	it	eq
    3cfc:	8016      	strheq	r6, [r2, #0]
{
    3cfe:	b085      	sub	sp, #20
    3d00:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    3d02:	fa1f f887 	uxth.w	r8, r7
			return true;
    3d06:	bf08      	it	eq
    3d08:	2601      	moveq	r6, #1
	if (evt->status) {
    3d0a:	b304      	cbz	r4, 3d4e <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3d0c:	2c3c      	cmp	r4, #60	; 0x3c
    3d0e:	d159      	bne.n	3dc4 <bt_hci_le_enh_conn_complete+0xe8>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    3d10:	f000 ff18 	bl	4b44 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3d14:	f3bf 8f5b 	dmb	ish
    3d18:	3010      	adds	r0, #16
    3d1a:	e850 3f00 	ldrex	r3, [r0]
    3d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    3d22:	e840 3200 	strex	r2, r3, [r0]
    3d26:	2a00      	cmp	r2, #0
    3d28:	d1f7      	bne.n	3d1a <bt_hci_le_enh_conn_complete+0x3e>
    3d2a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    3d2e:	2000      	movs	r0, #0
    3d30:	f7ff fde6 	bl	3900 <find_pending_connect.part.0>
		if (!conn) {
    3d34:	4605      	mov	r5, r0
    3d36:	2800      	cmp	r0, #0
    3d38:	d044      	beq.n	3dc4 <bt_hci_le_enh_conn_complete+0xe8>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    3d3a:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3d3c:	2100      	movs	r1, #0
    3d3e:	f001 fa57 	bl	51f0 <bt_conn_set_state>
		bt_conn_unref(conn);
    3d42:	4628      	mov	r0, r5
}
    3d44:	b005      	add	sp, #20
    3d46:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    3d4a:	f015 bdee 	b.w	1992a <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3d4e:	7903      	ldrb	r3, [r0, #4]
    3d50:	3b02      	subs	r3, #2
    3d52:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    3d54:	f100 0904 	add.w	r9, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3d58:	d837      	bhi.n	3dca <bt_hci_le_enh_conn_complete+0xee>
	memcpy(dst, src, sizeof(*dst));
    3d5a:	2207      	movs	r2, #7
    3d5c:	4649      	mov	r1, r9
    3d5e:	a802      	add	r0, sp, #8
    3d60:	f015 f84e 	bl	18e00 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3d64:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    3d68:	2206      	movs	r2, #6
    3d6a:	3b02      	subs	r3, #2
    3d6c:	f105 0111 	add.w	r1, r5, #17
    3d70:	f10d 0001 	add.w	r0, sp, #1
    3d74:	f88d 3008 	strb.w	r3, [sp, #8]
    3d78:	f015 f842 	bl	18e00 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    3d7c:	2301      	movs	r3, #1
    3d7e:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    3d82:	78eb      	ldrb	r3, [r5, #3]
    3d84:	2b01      	cmp	r3, #1
    3d86:	d119      	bne.n	3dbc <bt_hci_le_enh_conn_complete+0xe0>
    3d88:	a802      	add	r0, sp, #8
    3d8a:	f7ff fdb9 	bl	3900 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3d8e:	78eb      	ldrb	r3, [r5, #3]
    3d90:	2b01      	cmp	r3, #1
    3d92:	4604      	mov	r4, r0
    3d94:	d111      	bne.n	3dba <bt_hci_le_enh_conn_complete+0xde>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    3d96:	f000 fed5 	bl	4b44 <bt_le_adv_lookup_legacy>
    3d9a:	f3bf 8f5b 	dmb	ish
    3d9e:	f100 0310 	add.w	r3, r0, #16
    3da2:	e853 2f00 	ldrex	r2, [r3]
    3da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    3daa:	e843 2100 	strex	r1, r2, [r3]
    3dae:	2900      	cmp	r1, #0
    3db0:	d1f7      	bne.n	3da2 <bt_hci_le_enh_conn_complete+0xc6>
    3db2:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
    3db6:	f015 fcfe 	bl	197b6 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
    3dba:	b9dc      	cbnz	r4, 3df4 <bt_hci_le_enh_conn_complete+0x118>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    3dbc:	211f      	movs	r1, #31
    3dbe:	4640      	mov	r0, r8
    3dc0:	f015 f9f7 	bl	191b2 <bt_hci_disconnect>
}
    3dc4:	b005      	add	sp, #20
    3dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    3dca:	78c3      	ldrb	r3, [r0, #3]
    3dcc:	2b01      	cmp	r3, #1
    3dce:	bf04      	itt	eq
    3dd0:	4b2e      	ldreq	r3, [pc, #184]	; (3e8c <bt_hci_le_enh_conn_complete+0x1b0>)
    3dd2:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    3dd6:	4649      	mov	r1, r9
    3dd8:	4620      	mov	r0, r4
    3dda:	f015 fb8e 	bl	194fa <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    3dde:	2207      	movs	r2, #7
    3de0:	4601      	mov	r1, r0
    3de2:	a802      	add	r0, sp, #8
    3de4:	f015 f80c 	bl	18e00 <memcpy>
    3de8:	2207      	movs	r2, #7
    3dea:	4649      	mov	r1, r9
    3dec:	4668      	mov	r0, sp
    3dee:	f015 f807 	bl	18e00 <memcpy>
}
    3df2:	e7c6      	b.n	3d82 <bt_hci_le_enh_conn_complete+0xa6>
	conn->handle = handle;
    3df4:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    3df6:	2207      	movs	r2, #7
    3df8:	f820 7b88 	strh.w	r7, [r0], #136
    3dfc:	a902      	add	r1, sp, #8
    3dfe:	f014 ffff 	bl	18e00 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    3e02:	7e2a      	ldrb	r2, [r5, #24]
    3e04:	7deb      	ldrb	r3, [r5, #23]
    3e06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3e0a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    3e0e:	7eaa      	ldrb	r2, [r5, #26]
    3e10:	7e6b      	ldrb	r3, [r5, #25]
    3e12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3e16:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3e1a:	7f2a      	ldrb	r2, [r5, #28]
    3e1c:	7eeb      	ldrb	r3, [r5, #27]
    3e1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3e22:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    3e26:	78eb      	ldrb	r3, [r5, #3]
    3e28:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    3e2a:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3e2c:	2b01      	cmp	r3, #1
	conn->err = 0U;
    3e2e:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    3e30:	d117      	bne.n	3e62 <bt_hci_le_enh_conn_complete+0x186>
    3e32:	2207      	movs	r2, #7
    3e34:	4669      	mov	r1, sp
    3e36:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    3e3a:	f014 ffe1 	bl	18e00 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    3e3e:	f000 fe81 	bl	4b44 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    3e42:	7a21      	ldrb	r1, [r4, #8]
    3e44:	4d11      	ldr	r5, [pc, #68]	; (3e8c <bt_hci_le_enh_conn_complete+0x1b0>)
    3e46:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3e4a:	2207      	movs	r2, #7
    3e4c:	4429      	add	r1, r5
    3e4e:	f104 0096 	add.w	r0, r4, #150	; 0x96
    3e52:	f014 ffd5 	bl	18e00 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    3e56:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
    3e5a:	065b      	lsls	r3, r3, #25
    3e5c:	d501      	bpl.n	3e62 <bt_hci_le_enh_conn_complete+0x186>
			bt_le_adv_resume();
    3e5e:	f001 f81d 	bl	4e9c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    3e62:	2107      	movs	r1, #7
    3e64:	4620      	mov	r0, r4
    3e66:	f001 f9c3 	bl	51f0 <bt_conn_set_state>
	if (is_disconnected) {
    3e6a:	b11e      	cbz	r6, 3e74 <bt_hci_le_enh_conn_complete+0x198>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    3e6c:	2101      	movs	r1, #1
    3e6e:	4620      	mov	r0, r4
    3e70:	f001 f9be 	bl	51f0 <bt_conn_set_state>
	bt_conn_connected(conn);
    3e74:	4620      	mov	r0, r4
    3e76:	f015 fd94 	bl	199a2 <bt_conn_connected>
	conn_auto_initiate(conn);
    3e7a:	4620      	mov	r0, r4
    3e7c:	f7ff fecc 	bl	3c18 <conn_auto_initiate>
	bt_conn_unref(conn);
    3e80:	4620      	mov	r0, r4
    3e82:	f015 fd52 	bl	1992a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    3e86:	e79d      	b.n	3dc4 <bt_hci_le_enh_conn_complete+0xe8>
    3e88:	20002788 	.word	0x20002788
    3e8c:	20000000 	.word	0x20000000

00003e90 <hci_tx_thread>:
{
    3e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    3e94:	f8df 8108 	ldr.w	r8, [pc, #264]	; 3fa0 <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
    3e98:	f8df a108 	ldr.w	sl, [pc, #264]	; 3fa4 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
    3e9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    3ea0:	4841      	ldr	r0, [pc, #260]	; (3fa8 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    3ea2:	f36f 3352 	bfc	r3, #13, #6
    3ea6:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    3eaa:	f001 f95b 	bl	5164 <bt_conn_prepare_events>
    3eae:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    3eb0:	483b      	ldr	r0, [pc, #236]	; (3fa0 <hci_tx_thread+0x110>)
    3eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3eba:	4629      	mov	r1, r5
    3ebc:	f014 f85e 	bl	17f7c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    3ec0:	b160      	cbz	r0, 3edc <hci_tx_thread+0x4c>
    3ec2:	493a      	ldr	r1, [pc, #232]	; (3fac <hci_tx_thread+0x11c>)
    3ec4:	483a      	ldr	r0, [pc, #232]	; (3fb0 <hci_tx_thread+0x120>)
    3ec6:	f640 1393 	movw	r3, #2451	; 0x993
    3eca:	4652      	mov	r2, sl
    3ecc:	f014 f94c 	bl	18168 <printk>
    3ed0:	4040      	eors	r0, r0
    3ed2:	f380 8811 	msr	BASEPRI, r0
    3ed6:	f04f 0003 	mov.w	r0, #3
    3eda:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3edc:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 3fb4 <hci_tx_thread+0x124>
{
    3ee0:	4e2f      	ldr	r6, [pc, #188]	; (3fa0 <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
    3ee2:	f5a9 779a 	sub.w	r7, r9, #308	; 0x134
    3ee6:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    3eea:	b915      	cbnz	r5, 3ef2 <hci_tx_thread+0x62>
	z_impl_k_yield();
    3eec:	f013 fdd6 	bl	17a9c <z_impl_k_yield>
	while (1) {
    3ef0:	e7d4      	b.n	3e9c <hci_tx_thread+0xc>
		switch (ev->state) {
    3ef2:	68f3      	ldr	r3, [r6, #12]
    3ef4:	f3c3 3345 	ubfx	r3, r3, #13, #6
    3ef8:	2b04      	cmp	r3, #4
    3efa:	d147      	bne.n	3f8c <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    3efc:	7b33      	ldrb	r3, [r6, #12]
    3efe:	2b00      	cmp	r3, #0
    3f00:	d147      	bne.n	3f92 <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3f02:	2200      	movs	r2, #0
    3f04:	2300      	movs	r3, #0
    3f06:	4648      	mov	r0, r9
    3f08:	f016 fef8 	bl	1acfc <net_buf_get>
	BT_ASSERT(buf);
    3f0c:	4604      	mov	r4, r0
    3f0e:	b960      	cbnz	r0, 3f2a <hci_tx_thread+0x9a>
    3f10:	4929      	ldr	r1, [pc, #164]	; (3fb8 <hci_tx_thread+0x128>)
    3f12:	4827      	ldr	r0, [pc, #156]	; (3fb0 <hci_tx_thread+0x120>)
    3f14:	f640 132a 	movw	r3, #2346	; 0x92a
    3f18:	4652      	mov	r2, sl
    3f1a:	f014 f925 	bl	18168 <printk>
    3f1e:	4040      	eors	r0, r0
    3f20:	f380 8811 	msr	BASEPRI, r0
    3f24:	f04f 0003 	mov.w	r0, #3
    3f28:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    3f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3f32:	4658      	mov	r0, fp
    3f34:	f013 f9c4 	bl	172c0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3f38:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    3f3c:	b120      	cbz	r0, 3f48 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    3f3e:	f010 fa0f 	bl	14360 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3f42:	2300      	movs	r3, #0
    3f44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
    3f48:	4620      	mov	r0, r4
    3f4a:	f016 ff02 	bl	1ad52 <net_buf_ref>
    3f4e:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
    3f52:	4620      	mov	r0, r4
    3f54:	f7ff fe36 	bl	3bc4 <bt_send>
	if (err) {
    3f58:	b1c0      	cbz	r0, 3f8c <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
    3f5a:	4818      	ldr	r0, [pc, #96]	; (3fbc <hci_tx_thread+0x12c>)
    3f5c:	f013 f98a 	bl	17274 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    3f60:	4620      	mov	r0, r4
    3f62:	f010 f941 	bl	141e8 <net_buf_id>
    3f66:	4b16      	ldr	r3, [pc, #88]	; (3fc0 <hci_tx_thread+0x130>)
    3f68:	220c      	movs	r2, #12
    3f6a:	fb02 3000 	mla	r0, r2, r0, r3
    3f6e:	211f      	movs	r1, #31
    3f70:	8840      	ldrh	r0, [r0, #2]
    3f72:	4622      	mov	r2, r4
    3f74:	f7ff fce2 	bl	393c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    3f78:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
    3f7c:	f010 f9f0 	bl	14360 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3f80:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3f82:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    3f84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		net_buf_unref(buf);
    3f88:	f010 f9ea 	bl	14360 <net_buf_unref>
	for (; count; ev++, count--) {
    3f8c:	3614      	adds	r6, #20
    3f8e:	3d01      	subs	r5, #1
    3f90:	e7ab      	b.n	3eea <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3f92:	2b01      	cmp	r3, #1
    3f94:	d1fa      	bne.n	3f8c <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
    3f96:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    3f98:	3838      	subs	r0, #56	; 0x38
    3f9a:	f001 fbb5 	bl	5708 <bt_conn_process_tx>
    3f9e:	e7f5      	b.n	3f8c <hci_tx_thread+0xfc>
    3fa0:	2000019c 	.word	0x2000019c
    3fa4:	0001e0b4 	.word	0x0001e0b4
    3fa8:	200001b0 	.word	0x200001b0
    3fac:	0001e0e8 	.word	0x0001e0e8
    3fb0:	0001e0f1 	.word	0x0001e0f1
    3fb4:	20000134 	.word	0x20000134
    3fb8:	0001e12e 	.word	0x0001e12e
    3fbc:	20000118 	.word	0x20000118
    3fc0:	200013f4 	.word	0x200013f4

00003fc4 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    3fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fc8:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    3fca:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    3fce:	4630      	mov	r0, r6
    3fd0:	f016 ff28 	bl	1ae24 <net_buf_simple_headroom>
	state->len = buf->len;
    3fd4:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    3fd8:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    3fdc:	4605      	mov	r5, r0
    3fde:	d80c      	bhi.n	3ffa <hci_event_prio+0x36>
    3fe0:	4a1c      	ldr	r2, [pc, #112]	; (4054 <hci_event_prio+0x90>)
    3fe2:	491d      	ldr	r1, [pc, #116]	; (4058 <hci_event_prio+0x94>)
    3fe4:	481d      	ldr	r0, [pc, #116]	; (405c <hci_event_prio+0x98>)
    3fe6:	f640 532f 	movw	r3, #3375	; 0xd2f
    3fea:	f014 f8bd 	bl	18168 <printk>
    3fee:	4040      	eors	r0, r0
    3ff0:	f380 8811 	msr	BASEPRI, r0
    3ff4:	f04f 0003 	mov.w	r0, #3
    3ff8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    3ffa:	4630      	mov	r0, r6
    3ffc:	2102      	movs	r1, #2
    3ffe:	f016 ff01 	bl	1ae04 <net_buf_simple_pull_mem>
    4002:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    4004:	7800      	ldrb	r0, [r0, #0]
    4006:	f014 ffbb 	bl	18f80 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    400a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    400c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    400e:	d40c      	bmi.n	402a <hci_event_prio+0x66>
    4010:	4a10      	ldr	r2, [pc, #64]	; (4054 <hci_event_prio+0x90>)
    4012:	4913      	ldr	r1, [pc, #76]	; (4060 <hci_event_prio+0x9c>)
    4014:	4811      	ldr	r0, [pc, #68]	; (405c <hci_event_prio+0x98>)
    4016:	f640 5333 	movw	r3, #3379	; 0xd33
    401a:	f014 f8a5 	bl	18168 <printk>
    401e:	4040      	eors	r0, r0
    4020:	f380 8811 	msr	BASEPRI, r0
    4024:	f04f 0003 	mov.w	r0, #3
    4028:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    402a:	2305      	movs	r3, #5
    402c:	4a0d      	ldr	r2, [pc, #52]	; (4064 <hci_event_prio+0xa0>)
    402e:	7838      	ldrb	r0, [r7, #0]
    4030:	4621      	mov	r1, r4
    4032:	f014 ffb7 	bl	18fa4 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    4036:	07b3      	lsls	r3, r6, #30
    4038:	d507      	bpl.n	404a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    403a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    403c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    4040:	fa10 f585 	uxtah	r5, r0, r5
    4044:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    4046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    404a:	4620      	mov	r0, r4
}
    404c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    4050:	f010 b986 	b.w	14360 <net_buf_unref>
    4054:	0001e0b4 	.word	0x0001e0b4
    4058:	0001e132 	.word	0x0001e132
    405c:	0001e0f1 	.word	0x0001e0f1
    4060:	0001e14b 	.word	0x0001e14b
    4064:	0001cb6c 	.word	0x0001cb6c

00004068 <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    4068:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    406a:	7d03      	ldrb	r3, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
    406c:	2b01      	cmp	r3, #1
{
    406e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    4070:	d036      	beq.n	40e0 <bt_recv+0x78>
    4072:	2b03      	cmp	r3, #3
    4074:	d163      	bne.n	413e <bt_recv+0xd6>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    4076:	8983      	ldrh	r3, [r0, #12]
    4078:	2b03      	cmp	r3, #3
    407a:	d80c      	bhi.n	4096 <bt_recv+0x2e>
    407c:	4a32      	ldr	r2, [pc, #200]	; (4148 <bt_recv+0xe0>)
    407e:	4933      	ldr	r1, [pc, #204]	; (414c <bt_recv+0xe4>)
    4080:	4833      	ldr	r0, [pc, #204]	; (4150 <bt_recv+0xe8>)
    4082:	f240 13b5 	movw	r3, #437	; 0x1b5
    4086:	f014 f86f 	bl	18168 <printk>
    408a:	4040      	eors	r0, r0
    408c:	f380 8811 	msr	BASEPRI, r0
    4090:	f04f 0003 	mov.w	r0, #3
    4094:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    4096:	2104      	movs	r1, #4
    4098:	f104 0008 	add.w	r0, r4, #8
    409c:	f016 feb2 	bl	1ae04 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    40a0:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    40a2:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    40a4:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    40a6:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    40a8:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    40aa:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    40ae:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    40b0:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    40b2:	d003      	beq.n	40bc <bt_recv+0x54>
	net_buf_unref(buf);
    40b4:	4620      	mov	r0, r4
    40b6:	f010 f953 	bl	14360 <net_buf_unref>
    40ba:	e00f      	b.n	40dc <bt_recv+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    40bc:	f001 f890 	bl	51e0 <bt_conn_lookup_handle>
	if (!conn) {
    40c0:	4605      	mov	r5, r0
    40c2:	2800      	cmp	r0, #0
    40c4:	d0f6      	beq.n	40b4 <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
    40c6:	f001 f93b 	bl	5340 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    40ca:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    40cc:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    40ce:	4621      	mov	r1, r4
    40d0:	4628      	mov	r0, r5
    40d2:	f015 fbc2 	bl	1985a <bt_conn_recv>
	bt_conn_unref(conn);
    40d6:	4628      	mov	r0, r5
    40d8:	f015 fc27 	bl	1992a <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
    40dc:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    40de:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    40e0:	8983      	ldrh	r3, [r0, #12]
    40e2:	2b01      	cmp	r3, #1
    40e4:	d80c      	bhi.n	4100 <bt_recv+0x98>
    40e6:	4a18      	ldr	r2, [pc, #96]	; (4148 <bt_recv+0xe0>)
    40e8:	4918      	ldr	r1, [pc, #96]	; (414c <bt_recv+0xe4>)
    40ea:	4819      	ldr	r0, [pc, #100]	; (4150 <bt_recv+0xe8>)
    40ec:	f640 1317 	movw	r3, #2327	; 0x917
    40f0:	f014 f83a 	bl	18168 <printk>
    40f4:	4040      	eors	r0, r0
    40f6:	f380 8811 	msr	BASEPRI, r0
    40fa:	f04f 0003 	mov.w	r0, #3
    40fe:	df02      	svc	2
    4100:	2102      	movs	r1, #2
    4102:	f104 0008 	add.w	r0, r4, #8
    4106:	f016 fe7d 	bl	1ae04 <net_buf_simple_pull_mem>
    410a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    410c:	7800      	ldrb	r0, [r0, #0]
    410e:	f014 ff37 	bl	18f80 <bt_hci_evt_get_flags>
    4112:	0783      	lsls	r3, r0, #30
    4114:	d40c      	bmi.n	4130 <bt_recv+0xc8>
    4116:	4a0c      	ldr	r2, [pc, #48]	; (4148 <bt_recv+0xe0>)
    4118:	490e      	ldr	r1, [pc, #56]	; (4154 <bt_recv+0xec>)
    411a:	480d      	ldr	r0, [pc, #52]	; (4150 <bt_recv+0xe8>)
    411c:	f640 131b 	movw	r3, #2331	; 0x91b
    4120:	f014 f822 	bl	18168 <printk>
    4124:	4040      	eors	r0, r0
    4126:	f380 8811 	msr	BASEPRI, r0
    412a:	f04f 0003 	mov.w	r0, #3
    412e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    4130:	4a09      	ldr	r2, [pc, #36]	; (4158 <bt_recv+0xf0>)
    4132:	7828      	ldrb	r0, [r5, #0]
    4134:	2304      	movs	r3, #4
    4136:	4621      	mov	r1, r4
    4138:	f014 ff34 	bl	18fa4 <handle_event>
    413c:	e7ba      	b.n	40b4 <bt_recv+0x4c>
		net_buf_unref(buf);
    413e:	f010 f90f 	bl	14360 <net_buf_unref>
		return -EINVAL;
    4142:	f06f 0015 	mvn.w	r0, #21
    4146:	e7ca      	b.n	40de <bt_recv+0x76>
    4148:	0001e0b4 	.word	0x0001e0b4
    414c:	0001e132 	.word	0x0001e132
    4150:	0001e0f1 	.word	0x0001e0f1
    4154:	0001e164 	.word	0x0001e164
    4158:	0001cb4c 	.word	0x0001cb4c

0000415c <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
    415c:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    415e:	7d03      	ldrb	r3, [r0, #20]
    4160:	2b01      	cmp	r3, #1
{
    4162:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    4164:	d00c      	beq.n	4180 <bt_recv_prio+0x24>
    4166:	4a09      	ldr	r2, [pc, #36]	; (418c <bt_recv_prio+0x30>)
    4168:	4909      	ldr	r1, [pc, #36]	; (4190 <bt_recv_prio+0x34>)
    416a:	480a      	ldr	r0, [pc, #40]	; (4194 <bt_recv_prio+0x38>)
    416c:	f640 5376 	movw	r3, #3446	; 0xd76
    4170:	f013 fffa 	bl	18168 <printk>
    4174:	4040      	eors	r0, r0
    4176:	f380 8811 	msr	BASEPRI, r0
    417a:	f04f 0003 	mov.w	r0, #3
    417e:	df02      	svc	2

	hci_event_prio(buf);
    4180:	4620      	mov	r0, r4
    4182:	f7ff ff1f 	bl	3fc4 <hci_event_prio>

	return 0;
}
    4186:	2000      	movs	r0, #0
    4188:	bd10      	pop	{r4, pc}
    418a:	bf00      	nop
    418c:	0001e0b4 	.word	0x0001e0b4
    4190:	0001e192 	.word	0x0001e192
    4194:	0001e0f1 	.word	0x0001e0f1

00004198 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    4198:	4a08      	ldr	r2, [pc, #32]	; (41bc <bt_hci_driver_register+0x24>)
{
    419a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    419c:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
    41a0:	b930      	cbnz	r0, 41b0 <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    41a2:	68d9      	ldr	r1, [r3, #12]
    41a4:	b139      	cbz	r1, 41b6 <bt_hci_driver_register+0x1e>
    41a6:	6919      	ldr	r1, [r3, #16]
    41a8:	b129      	cbz	r1, 41b6 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    41aa:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    41ae:	4770      	bx	lr
		return -EALREADY;
    41b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    41b4:	4770      	bx	lr
		return -EINVAL;
    41b6:	f06f 0015 	mvn.w	r0, #21
}
    41ba:	4770      	bx	lr
    41bc:	20000000 	.word	0x20000000

000041c0 <bt_finalize_init>:
    41c0:	4801      	ldr	r0, [pc, #4]	; (41c8 <bt_finalize_init+0x8>)
    41c2:	2102      	movs	r1, #2
    41c4:	f014 bf03 	b.w	18fce <atomic_or>
    41c8:	200000cc 	.word	0x200000cc

000041cc <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    41cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    41ce:	4d3e      	ldr	r5, [pc, #248]	; (42c8 <bt_init+0xfc>)
    41d0:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    41d4:	6899      	ldr	r1, [r3, #8]
    41d6:	f011 0101 	ands.w	r1, r1, #1
    41da:	d121      	bne.n	4220 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    41dc:	aa01      	add	r2, sp, #4
    41de:	f640 4003 	movw	r0, #3075	; 0xc03
    41e2:	f7ff fc8d 	bl	3b00 <bt_hci_cmd_send_sync>
		if (err) {
    41e6:	4604      	mov	r4, r0
    41e8:	2800      	cmp	r0, #0
    41ea:	d169      	bne.n	42c0 <bt_init+0xf4>
	uint8_t status = buf->data[0];
    41ec:	9b01      	ldr	r3, [sp, #4]
    41ee:	689b      	ldr	r3, [r3, #8]
	if (status) {
    41f0:	781b      	ldrb	r3, [r3, #0]
    41f2:	b993      	cbnz	r3, 421a <bt_init+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    41f4:	f3bf 8f5b 	dmb	ish
    41f8:	462b      	mov	r3, r5
    41fa:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    41fe:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    4202:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4206:	f3bf 8f5b 	dmb	ish
    420a:	e853 1f00 	ldrex	r1, [r3]
    420e:	e843 2000 	strex	r0, r2, [r3]
    4212:	2800      	cmp	r0, #0
    4214:	d1f9      	bne.n	420a <bt_init+0x3e>
    4216:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    421a:	9801      	ldr	r0, [sp, #4]
    421c:	f010 f8a0 	bl	14360 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4220:	aa01      	add	r2, sp, #4
    4222:	2100      	movs	r1, #0
    4224:	f241 0003 	movw	r0, #4099	; 0x1003
    4228:	f7ff fc6a 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    422c:	4604      	mov	r4, r0
    422e:	2800      	cmp	r0, #0
    4230:	d146      	bne.n	42c0 <bt_init+0xf4>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    4232:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    4234:	4825      	ldr	r0, [pc, #148]	; (42cc <bt_init+0x100>)
    4236:	6899      	ldr	r1, [r3, #8]
    4238:	2208      	movs	r2, #8
    423a:	3101      	adds	r1, #1
    423c:	f014 fde0 	bl	18e00 <memcpy>
	net_buf_unref(rsp);
    4240:	9801      	ldr	r0, [sp, #4]
    4242:	f010 f88d 	bl	14360 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4246:	4621      	mov	r1, r4
    4248:	aa01      	add	r2, sp, #4
    424a:	f241 0001 	movw	r0, #4097	; 0x1001
    424e:	f7ff fc57 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    4252:	4604      	mov	r4, r0
    4254:	2800      	cmp	r0, #0
    4256:	d133      	bne.n	42c0 <bt_init+0xf4>
	read_local_ver_complete(rsp);
    4258:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    425a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    425c:	785a      	ldrb	r2, [r3, #1]
    425e:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    4262:	78d9      	ldrb	r1, [r3, #3]
    4264:	789a      	ldrb	r2, [r3, #2]
    4266:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    426a:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    426e:	791a      	ldrb	r2, [r3, #4]
    4270:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    4274:	7a19      	ldrb	r1, [r3, #8]
    4276:	79da      	ldrb	r2, [r3, #7]
    4278:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    427c:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    4280:	795a      	ldrb	r2, [r3, #5]
    4282:	799b      	ldrb	r3, [r3, #6]
    4284:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    4288:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    428c:	f010 f868 	bl	14360 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4290:	4621      	mov	r1, r4
    4292:	aa01      	add	r2, sp, #4
    4294:	f241 0002 	movw	r0, #4098	; 0x1002
    4298:	f7ff fc32 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    429c:	4604      	mov	r4, r0
    429e:	b978      	cbnz	r0, 42c0 <bt_init+0xf4>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    42a0:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
    42a2:	480b      	ldr	r0, [pc, #44]	; (42d0 <bt_init+0x104>)
    42a4:	6899      	ldr	r1, [r3, #8]
    42a6:	2240      	movs	r2, #64	; 0x40
    42a8:	3101      	adds	r1, #1
    42aa:	f014 fda9 	bl	18e00 <memcpy>
	net_buf_unref(rsp);
    42ae:	9801      	ldr	r0, [sp, #4]
    42b0:	f010 f856 	bl	14360 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    42b4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    42b8:	065e      	lsls	r6, r3, #25
    42ba:	d40b      	bmi.n	42d4 <bt_init+0x108>
		return -ENODEV;
    42bc:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    42c0:	4620      	mov	r0, r4
    42c2:	b002      	add	sp, #8
    42c4:	bd70      	pop	{r4, r5, r6, pc}
    42c6:	bf00      	nop
    42c8:	20000000 	.word	0x20000000
    42cc:	20000070 	.word	0x20000070
    42d0:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    42d4:	4621      	mov	r1, r4
    42d6:	aa01      	add	r2, sp, #4
    42d8:	f242 0003 	movw	r0, #8195	; 0x2003
    42dc:	f7ff fc10 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    42e0:	4604      	mov	r4, r0
    42e2:	2800      	cmp	r0, #0
    42e4:	d1ec      	bne.n	42c0 <bt_init+0xf4>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    42e6:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    42e8:	48a1      	ldr	r0, [pc, #644]	; (4570 <bt_init+0x3a4>)
    42ea:	6899      	ldr	r1, [r3, #8]
    42ec:	2208      	movs	r2, #8
    42ee:	3101      	adds	r1, #1
    42f0:	f014 fd86 	bl	18e00 <memcpy>
	net_buf_unref(rsp);
    42f4:	9801      	ldr	r0, [sp, #4]
    42f6:	f010 f833 	bl	14360 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    42fa:	4621      	mov	r1, r4
    42fc:	aa01      	add	r2, sp, #4
    42fe:	f242 0002 	movw	r0, #8194	; 0x2002
    4302:	f7ff fbfd 	bl	3b00 <bt_hci_cmd_send_sync>
		if (err) {
    4306:	4604      	mov	r4, r0
    4308:	2800      	cmp	r0, #0
    430a:	d1d9      	bne.n	42c0 <bt_init+0xf4>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    430c:	9b01      	ldr	r3, [sp, #4]
    430e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    4310:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    4314:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    4318:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    431a:	b121      	cbz	r1, 4326 <bt_init+0x15a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    431c:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    431e:	4895      	ldr	r0, [pc, #596]	; (4574 <bt_init+0x3a8>)
    4320:	4611      	mov	r1, r2
    4322:	f017 fda0 	bl	1be66 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    4326:	9801      	ldr	r0, [sp, #4]
    4328:	f010 f81a 	bl	14360 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    432c:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    4330:	f016 0620 	ands.w	r6, r6, #32
    4334:	f000 80f9 	beq.w	452a <bt_init+0x35e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    4338:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    433c:	071c      	lsls	r4, r3, #28
    433e:	d512      	bpl.n	4366 <bt_init+0x19a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    4340:	aa01      	add	r2, sp, #4
    4342:	2100      	movs	r1, #0
    4344:	f242 001c 	movw	r0, #8220	; 0x201c
    4348:	f7ff fbda 	bl	3b00 <bt_hci_cmd_send_sync>
		if (err) {
    434c:	4604      	mov	r4, r0
    434e:	2800      	cmp	r0, #0
    4350:	d1b6      	bne.n	42c0 <bt_init+0xf4>
		le_read_supp_states_complete(rsp);
    4352:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4354:	6883      	ldr	r3, [r0, #8]
    4356:	f8d3 2001 	ldr.w	r2, [r3, #1]
    435a:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    435e:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    4362:	f00f fffd 	bl	14360 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    4366:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    436a:	0698      	lsls	r0, r3, #26
    436c:	d523      	bpl.n	43b6 <bt_init+0x1ea>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    436e:	f10d 0102 	add.w	r1, sp, #2
    4372:	4668      	mov	r0, sp
    4374:	f014 ff05 	bl	19182 <hci_le_read_max_data_len>
		if (err) {
    4378:	4604      	mov	r4, r0
    437a:	2800      	cmp	r0, #0
    437c:	d1a0      	bne.n	42c0 <bt_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    437e:	2104      	movs	r1, #4
    4380:	f242 0024 	movw	r0, #8228	; 0x2024
    4384:	f7ff fb82 	bl	3a8c <bt_hci_cmd_create>
		if (!buf) {
    4388:	4606      	mov	r6, r0
    438a:	2800      	cmp	r0, #0
    438c:	f000 80d4 	beq.w	4538 <bt_init+0x36c>
	return net_buf_simple_add(&buf->b, len);
    4390:	2104      	movs	r1, #4
    4392:	3008      	adds	r0, #8
    4394:	f016 fd0f 	bl	1adb6 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    4398:	f8bd 3000 	ldrh.w	r3, [sp]
    439c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    439e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    43a2:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    43a4:	4622      	mov	r2, r4
    43a6:	4631      	mov	r1, r6
    43a8:	f242 0024 	movw	r0, #8228	; 0x2024
    43ac:	f7ff fba8 	bl	3b00 <bt_hci_cmd_send_sync>
		if (err) {
    43b0:	4604      	mov	r4, r0
    43b2:	2800      	cmp	r0, #0
    43b4:	d184      	bne.n	42c0 <bt_init+0xf4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    43b6:	2108      	movs	r1, #8
    43b8:	f242 0001 	movw	r0, #8193	; 0x2001
    43bc:	f7ff fb66 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
    43c0:	4604      	mov	r4, r0
    43c2:	2800      	cmp	r0, #0
    43c4:	f000 80b8 	beq.w	4538 <bt_init+0x36c>
    43c8:	2108      	movs	r1, #8
    43ca:	4408      	add	r0, r1
    43cc:	f016 fcf3 	bl	1adb6 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    43d0:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    43d4:	f012 0f02 	tst.w	r2, #2
    43d8:	bf14      	ite	ne
    43da:	232f      	movne	r3, #47	; 0x2f
    43dc:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    43de:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    43e0:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    43e4:	bf48      	it	mi
    43e6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    43ea:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    43ee:	bf18      	it	ne
    43f0:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    43f4:	2200      	movs	r2, #0
    43f6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    43f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
    43fc:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    43fe:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4400:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4402:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    4404:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    4406:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    4408:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    440a:	4621      	mov	r1, r4
    440c:	f242 0001 	movw	r0, #8193	; 0x2001
    4410:	f7ff fb76 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    4414:	4604      	mov	r4, r0
    4416:	2800      	cmp	r0, #0
    4418:	f47f af52 	bne.w	42c0 <bt_init+0xf4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    441c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    4420:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4424:	069a      	lsls	r2, r3, #26
    4426:	f100 809c 	bmi.w	4562 <bt_init+0x396>
	if (bt_dev.le.acl_mtu) {
    442a:	b9d9      	cbnz	r1, 4464 <bt_init+0x298>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    442c:	aa01      	add	r2, sp, #4
    442e:	f241 0005 	movw	r0, #4101	; 0x1005
    4432:	f7ff fb65 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    4436:	4604      	mov	r4, r0
    4438:	2800      	cmp	r0, #0
    443a:	f47f af41 	bne.w	42c0 <bt_init+0xf4>
	if (bt_dev.le.acl_mtu) {
    443e:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    4442:	b963      	cbnz	r3, 445e <bt_init+0x292>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    4444:	9b01      	ldr	r3, [sp, #4]
    4446:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    4448:	785a      	ldrb	r2, [r3, #1]
    444a:	7899      	ldrb	r1, [r3, #2]
    444c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4450:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    4454:	889a      	ldrh	r2, [r3, #4]
    4456:	4847      	ldr	r0, [pc, #284]	; (4574 <bt_init+0x3a8>)
    4458:	4611      	mov	r1, r2
    445a:	f017 fd04 	bl	1be66 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    445e:	9801      	ldr	r0, [sp, #4]
    4460:	f00f ff7e 	bl	14360 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    4464:	2108      	movs	r1, #8
    4466:	f640 4001 	movw	r0, #3073	; 0xc01
    446a:	f7ff fb0f 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
    446e:	4604      	mov	r4, r0
    4470:	2800      	cmp	r0, #0
    4472:	d061      	beq.n	4538 <bt_init+0x36c>
    4474:	2108      	movs	r1, #8
    4476:	4408      	add	r0, r1
    4478:	f016 fc9d 	bl	1adb6 <net_buf_simple_add>
	dst[0] = val;
    447c:	2310      	movs	r3, #16
    447e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    4480:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    4482:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    4484:	7043      	strb	r3, [r0, #1]
    4486:	2602      	movs	r6, #2
    4488:	2320      	movs	r3, #32
	dst[0] = val;
    448a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    448c:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    448e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    4490:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    4492:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    4494:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    4496:	4621      	mov	r1, r4
    4498:	f640 4001 	movw	r0, #3073	; 0xc01
    449c:	f7ff fb30 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    44a0:	4604      	mov	r4, r0
    44a2:	2800      	cmp	r0, #0
    44a4:	f47f af0c 	bne.w	42c0 <bt_init+0xf4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    44a8:	4601      	mov	r1, r0
    44aa:	aa01      	add	r2, sp, #4
    44ac:	f64f 4001 	movw	r0, #64513	; 0xfc01
    44b0:	f7ff fb26 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    44b4:	4604      	mov	r4, r0
    44b6:	bb48      	cbnz	r0, 450c <bt_init+0x340>
	net_buf_unref(rsp);
    44b8:	9801      	ldr	r0, [sp, #4]
    44ba:	f00f ff51 	bl	14360 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    44be:	4621      	mov	r1, r4
    44c0:	aa01      	add	r2, sp, #4
    44c2:	f64f 4002 	movw	r0, #64514	; 0xfc02
    44c6:	f7ff fb1b 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    44ca:	4604      	mov	r4, r0
    44cc:	b9f0      	cbnz	r0, 450c <bt_init+0x340>
	rp.cmds = (void *)rsp->data;
    44ce:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    44d0:	4829      	ldr	r0, [pc, #164]	; (4578 <bt_init+0x3ac>)
    44d2:	6899      	ldr	r1, [r3, #8]
    44d4:	4632      	mov	r2, r6
    44d6:	3101      	adds	r1, #1
    44d8:	f014 fc92 	bl	18e00 <memcpy>
	net_buf_unref(rsp);
    44dc:	9801      	ldr	r0, [sp, #4]
    44de:	f00f ff3f 	bl	14360 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    44e2:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    44e6:	075b      	lsls	r3, r3, #29
    44e8:	d510      	bpl.n	450c <bt_init+0x340>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    44ea:	aa01      	add	r2, sp, #4
    44ec:	4621      	mov	r1, r4
    44ee:	f64f 4003 	movw	r0, #64515	; 0xfc03
    44f2:	f7ff fb05 	bl	3b00 <bt_hci_cmd_send_sync>
		if (err) {
    44f6:	b948      	cbnz	r0, 450c <bt_init+0x340>
		rp.feat = (void *)rsp->data;
    44f8:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    44fa:	4820      	ldr	r0, [pc, #128]	; (457c <bt_init+0x3b0>)
    44fc:	6899      	ldr	r1, [r3, #8]
    44fe:	2201      	movs	r2, #1
    4500:	4411      	add	r1, r2
    4502:	f014 fc7d 	bl	18e00 <memcpy>
		net_buf_unref(rsp);
    4506:	9801      	ldr	r0, [sp, #4]
    4508:	f00f ff2a 	bl	14360 <net_buf_unref>
	err = bt_id_init();
    450c:	f000 fa7a 	bl	4a04 <bt_id_init>
	if (err) {
    4510:	4604      	mov	r4, r0
    4512:	2800      	cmp	r0, #0
    4514:	f47f aed4 	bne.w	42c0 <bt_init+0xf4>
		err = bt_conn_init();
    4518:	f001 f95c 	bl	57d4 <bt_conn_init>
		if (err) {
    451c:	4604      	mov	r4, r0
    451e:	2800      	cmp	r0, #0
    4520:	f47f aece 	bne.w	42c0 <bt_init+0xf4>
	bt_finalize_init();
    4524:	f7ff fe4c 	bl	41c0 <bt_finalize_init>
	return 0;
    4528:	e6ca      	b.n	42c0 <bt_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    452a:	2102      	movs	r1, #2
    452c:	f640 406d 	movw	r0, #3181	; 0xc6d
    4530:	f7ff faac 	bl	3a8c <bt_hci_cmd_create>
		if (!buf) {
    4534:	4604      	mov	r4, r0
    4536:	b910      	cbnz	r0, 453e <bt_init+0x372>
		return -ENOBUFS;
    4538:	f06f 0468 	mvn.w	r4, #104	; 0x68
    453c:	e6c0      	b.n	42c0 <bt_init+0xf4>
    453e:	2102      	movs	r1, #2
    4540:	3008      	adds	r0, #8
    4542:	f016 fc38 	bl	1adb6 <net_buf_simple_add>
		cp_le->le = 0x01;
    4546:	2301      	movs	r3, #1
    4548:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    454a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    454c:	4621      	mov	r1, r4
    454e:	4632      	mov	r2, r6
    4550:	f640 406d 	movw	r0, #3181	; 0xc6d
    4554:	f7ff fad4 	bl	3b00 <bt_hci_cmd_send_sync>
		if (err) {
    4558:	4604      	mov	r4, r0
    455a:	2800      	cmp	r0, #0
    455c:	f43f aeec 	beq.w	4338 <bt_init+0x16c>
    4560:	e6ae      	b.n	42c0 <bt_init+0xf4>
	else if (!bt_dev.le.acl_mtu) {
    4562:	2900      	cmp	r1, #0
    4564:	f47f af7e 	bne.w	4464 <bt_init+0x298>
		return -EIO;
    4568:	f06f 0404 	mvn.w	r4, #4
    456c:	e6a8      	b.n	42c0 <bt_init+0xf4>
    456e:	bf00      	nop
    4570:	200000d0 	.word	0x200000d0
    4574:	20000100 	.word	0x20000100
    4578:	200000b9 	.word	0x200000b9
    457c:	200000b8 	.word	0x200000b8

00004580 <init_work>:

static void init_work(struct k_work *work)
{
    4580:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    4582:	f7ff fe23 	bl	41cc <bt_init>
	if (ready_cb) {
    4586:	4b03      	ldr	r3, [pc, #12]	; (4594 <init_work+0x14>)
    4588:	681b      	ldr	r3, [r3, #0]
    458a:	b113      	cbz	r3, 4592 <init_work+0x12>
		ready_cb(err);
	}
}
    458c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    4590:	4718      	bx	r3
}
    4592:	bd10      	pop	{r4, pc}
    4594:	2000140c 	.word	0x2000140c

00004598 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
    4598:	b570      	push	{r4, r5, r6, lr}
    459a:	4606      	mov	r6, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
    459c:	f014 fc03 	bl	18da6 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    45a0:	281c      	cmp	r0, #28
	size_t len = strlen(name);
    45a2:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    45a4:	d811      	bhi.n	45ca <bt_set_name+0x32>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
    45a6:	4c0a      	ldr	r4, [pc, #40]	; (45d0 <bt_set_name+0x38>)
    45a8:	4631      	mov	r1, r6
    45aa:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    45ae:	f014 fc0a 	bl	18dc6 <strcmp>
    45b2:	b148      	cbz	r0, 45c8 <bt_set_name+0x30>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
    45b4:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    45b8:	462a      	mov	r2, r5
    45ba:	4631      	mov	r1, r6
	bt_dev.name[len] = '\0';
    45bc:	442c      	add	r4, r5
	strncpy(bt_dev.name, name, len);
    45be:	f014 fbe0 	bl	18d82 <strncpy>
	bt_dev.name[len] = '\0';
    45c2:	2000      	movs	r0, #0
    45c4:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150

	return 0;
#else
	return -ENOMEM;
#endif
}
    45c8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    45ca:	f06f 000b 	mvn.w	r0, #11
    45ce:	e7fb      	b.n	45c8 <bt_set_name+0x30>
    45d0:	20000000 	.word	0x20000000

000045d4 <bt_enable>:
{
    45d4:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    45d6:	4d21      	ldr	r5, [pc, #132]	; (465c <bt_enable+0x88>)
    45d8:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
{
    45dc:	b088      	sub	sp, #32
    45de:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    45e0:	2b00      	cmp	r3, #0
    45e2:	d035      	beq.n	4650 <bt_enable+0x7c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    45e4:	2101      	movs	r1, #1
    45e6:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    45ea:	f014 fcf0 	bl	18fce <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    45ee:	ea10 0401 	ands.w	r4, r0, r1
    45f2:	d130      	bne.n	4656 <bt_enable+0x82>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
    45f4:	481a      	ldr	r0, [pc, #104]	; (4660 <bt_enable+0x8c>)
    45f6:	f7ff ffcf 	bl	4598 <bt_set_name>
	ready_cb = cb;
    45fa:	4b1a      	ldr	r3, [pc, #104]	; (4664 <bt_enable+0x90>)
    45fc:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    45fe:	2200      	movs	r2, #0
    4600:	2300      	movs	r3, #0
    4602:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4606:	f06f 0308 	mvn.w	r3, #8
    460a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    460e:	e9cd 4400 	strd	r4, r4, [sp]
    4612:	4b15      	ldr	r3, [pc, #84]	; (4668 <bt_enable+0x94>)
    4614:	4915      	ldr	r1, [pc, #84]	; (466c <bt_enable+0x98>)
    4616:	9404      	str	r4, [sp, #16]
    4618:	f44f 7220 	mov.w	r2, #640	; 0x280
    461c:	4814      	ldr	r0, [pc, #80]	; (4670 <bt_enable+0x9c>)
    461e:	f012 fd51 	bl	170c4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    4622:	4914      	ldr	r1, [pc, #80]	; (4674 <bt_enable+0xa0>)
    4624:	4812      	ldr	r0, [pc, #72]	; (4670 <bt_enable+0x9c>)
    4626:	f017 fb45 	bl	1bcb4 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    462a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    462e:	68db      	ldr	r3, [r3, #12]
    4630:	4798      	blx	r3
	if (err) {
    4632:	4604      	mov	r4, r0
    4634:	b948      	cbnz	r0, 464a <bt_enable+0x76>
	if (!cb) {
    4636:	b926      	cbnz	r6, 4642 <bt_enable+0x6e>
}
    4638:	b008      	add	sp, #32
    463a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    463e:	f7ff bdc5 	b.w	41cc <bt_init>
	k_work_submit(&bt_dev.init);
    4642:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    4646:	f012 ff81 	bl	1754c <k_work_submit>
}
    464a:	4620      	mov	r0, r4
    464c:	b008      	add	sp, #32
    464e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    4650:	f06f 0412 	mvn.w	r4, #18
    4654:	e7f9      	b.n	464a <bt_enable+0x76>
		return -EALREADY;
    4656:	f06f 0477 	mvn.w	r4, #119	; 0x77
    465a:	e7f6      	b.n	464a <bt_enable+0x76>
    465c:	20000000 	.word	0x20000000
    4660:	0001e1b5 	.word	0x0001e1b5
    4664:	2000140c 	.word	0x2000140c
    4668:	00003e91 	.word	0x00003e91
    466c:	20002c00 	.word	0x20002c00
    4670:	200009f0 	.word	0x200009f0
    4674:	0001e1be 	.word	0x0001e1be

00004678 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    4678:	4800      	ldr	r0, [pc, #0]	; (467c <bt_get_name+0x4>)
    467a:	4770      	bx	lr
    467c:	20000150 	.word	0x20000150

00004680 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    4680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    4682:	4f0b      	ldr	r7, [pc, #44]	; (46b0 <id_find+0x30>)
{
    4684:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    4686:	2500      	movs	r5, #0
    4688:	79fb      	ldrb	r3, [r7, #7]
    468a:	b2ec      	uxtb	r4, r5
    468c:	42a3      	cmp	r3, r4
    468e:	d802      	bhi.n	4696 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    4690:	f06f 0401 	mvn.w	r4, #1
    4694:	e009      	b.n	46aa <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    4696:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    469a:	2207      	movs	r2, #7
    469c:	4439      	add	r1, r7
    469e:	4630      	mov	r0, r6
    46a0:	f014 fb9d 	bl	18dde <memcmp>
    46a4:	3501      	adds	r5, #1
    46a6:	2800      	cmp	r0, #0
    46a8:	d1ee      	bne.n	4688 <id_find+0x8>
}
    46aa:	4620      	mov	r0, r4
    46ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46ae:	bf00      	nop
    46b0:	20000000 	.word	0x20000000

000046b4 <set_random_address>:
{
    46b4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    46b6:	4914      	ldr	r1, [pc, #80]	; (4708 <set_random_address+0x54>)
    46b8:	2206      	movs	r2, #6
    46ba:	4605      	mov	r5, r0
    46bc:	f014 fb8f 	bl	18dde <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    46c0:	4604      	mov	r4, r0
    46c2:	b1e0      	cbz	r0, 46fe <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    46c4:	2106      	movs	r1, #6
    46c6:	f242 0005 	movw	r0, #8197	; 0x2005
    46ca:	f7ff f9df 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
    46ce:	4604      	mov	r4, r0
    46d0:	b1b8      	cbz	r0, 4702 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    46d2:	2206      	movs	r2, #6
    46d4:	4629      	mov	r1, r5
    46d6:	3008      	adds	r0, #8
    46d8:	f016 fb73 	bl	1adc2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    46dc:	4621      	mov	r1, r4
    46de:	2200      	movs	r2, #0
    46e0:	f242 0005 	movw	r0, #8197	; 0x2005
    46e4:	f7ff fa0c 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    46e8:	4604      	mov	r4, r0
    46ea:	b940      	cbnz	r0, 46fe <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    46ec:	2206      	movs	r2, #6
    46ee:	4806      	ldr	r0, [pc, #24]	; (4708 <set_random_address+0x54>)
    46f0:	4629      	mov	r1, r5
    46f2:	f014 fb85 	bl	18e00 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    46f6:	4b05      	ldr	r3, [pc, #20]	; (470c <set_random_address+0x58>)
    46f8:	2201      	movs	r2, #1
    46fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
    46fe:	4620      	mov	r0, r4
    4700:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    4702:	f06f 0468 	mvn.w	r4, #104	; 0x68
    4706:	e7fa      	b.n	46fe <set_random_address+0x4a>
    4708:	20000061 	.word	0x20000061
    470c:	20000000 	.word	0x20000000

00004710 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    4710:	b530      	push	{r4, r5, lr}
    4712:	4604      	mov	r4, r0
    4714:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    4716:	460d      	mov	r5, r1
    4718:	b1a1      	cbz	r1, 4744 <id_create.constprop.0+0x34>
    471a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    471c:	2207      	movs	r2, #7
    471e:	a902      	add	r1, sp, #8
    4720:	4628      	mov	r0, r5
    4722:	9302      	str	r3, [sp, #8]
    4724:	f8cd 300b 	str.w	r3, [sp, #11]
    4728:	f014 fb59 	bl	18dde <memcmp>
    472c:	b150      	cbz	r0, 4744 <id_create.constprop.0+0x34>
	memcpy(dst, src, sizeof(*dst));
    472e:	4812      	ldr	r0, [pc, #72]	; (4778 <id_create.constprop.0+0x68>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    4730:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    4734:	2207      	movs	r2, #7
    4736:	4629      	mov	r1, r5
    4738:	4420      	add	r0, r4
    473a:	f014 fb61 	bl	18e00 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    473e:	2000      	movs	r0, #0
}
    4740:	b005      	add	sp, #20
    4742:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    4744:	4668      	mov	r0, sp
    4746:	f014 fc0d 	bl	18f64 <bt_addr_le_create_static>
			if (err) {
    474a:	2800      	cmp	r0, #0
    474c:	d1f8      	bne.n	4740 <id_create.constprop.0+0x30>
		} while (id_find(&new_addr) >= 0);
    474e:	4668      	mov	r0, sp
    4750:	f7ff ff96 	bl	4680 <id_find>
    4754:	2800      	cmp	r0, #0
    4756:	daf5      	bge.n	4744 <id_create.constprop.0+0x34>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    4758:	4807      	ldr	r0, [pc, #28]	; (4778 <id_create.constprop.0+0x68>)
    475a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    475e:	4404      	add	r4, r0
    4760:	2207      	movs	r2, #7
    4762:	4669      	mov	r1, sp
    4764:	4620      	mov	r0, r4
    4766:	f014 fb4b 	bl	18e00 <memcpy>
		if (addr) {
    476a:	2d00      	cmp	r5, #0
    476c:	d0e7      	beq.n	473e <id_create.constprop.0+0x2e>
    476e:	2207      	movs	r2, #7
    4770:	4621      	mov	r1, r4
    4772:	4628      	mov	r0, r5
    4774:	e7e1      	b.n	473a <id_create.constprop.0+0x2a>
    4776:	bf00      	nop
    4778:	20000000 	.word	0x20000000

0000477c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    477c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    477e:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    4780:	4605      	mov	r5, r0
    4782:	b918      	cbnz	r0, 478c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    4784:	b1ec      	cbz	r4, 47c2 <bt_id_create+0x46>
		return -EINVAL;
    4786:	f06f 0015 	mvn.w	r0, #21
    478a:	e018      	b.n	47be <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    478c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    478e:	2207      	movs	r2, #7
    4790:	4669      	mov	r1, sp
    4792:	9300      	str	r3, [sp, #0]
    4794:	f8cd 3003 	str.w	r3, [sp, #3]
    4798:	f014 fb21 	bl	18dde <memcmp>
    479c:	2800      	cmp	r0, #0
    479e:	d0f1      	beq.n	4784 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    47a0:	782b      	ldrb	r3, [r5, #0]
    47a2:	2b01      	cmp	r3, #1
    47a4:	d1ef      	bne.n	4786 <bt_id_create+0xa>
    47a6:	79ab      	ldrb	r3, [r5, #6]
    47a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    47ac:	2bc0      	cmp	r3, #192	; 0xc0
    47ae:	d1ea      	bne.n	4786 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    47b0:	4628      	mov	r0, r5
    47b2:	f7ff ff65 	bl	4680 <id_find>
    47b6:	2800      	cmp	r0, #0
    47b8:	dbe4      	blt.n	4784 <bt_id_create+0x8>
			return -EALREADY;
    47ba:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    47be:	b002      	add	sp, #8
    47c0:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    47c2:	4e13      	ldr	r6, [pc, #76]	; (4810 <bt_id_create+0x94>)
    47c4:	79f3      	ldrb	r3, [r6, #7]
    47c6:	2b01      	cmp	r3, #1
    47c8:	d01e      	beq.n	4808 <bt_id_create+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    47ca:	f3bf 8f5b 	dmb	ish
    47ce:	f8d6 30cc 	ldr.w	r3, [r6, #204]	; 0xcc
    47d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    47d6:	07db      	lsls	r3, r3, #31
    47d8:	d40b      	bmi.n	47f2 <bt_id_create+0x76>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    47da:	2d00      	cmp	r5, #0
    47dc:	d0d3      	beq.n	4786 <bt_id_create+0xa>
    47de:	2207      	movs	r2, #7
    47e0:	4669      	mov	r1, sp
    47e2:	4628      	mov	r0, r5
    47e4:	9400      	str	r4, [sp, #0]
    47e6:	f8cd 4003 	str.w	r4, [sp, #3]
    47ea:	f014 faf8 	bl	18dde <memcmp>
    47ee:	2800      	cmp	r0, #0
    47f0:	d0c9      	beq.n	4786 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    47f2:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    47f4:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    47f6:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    47f8:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    47fa:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    47fc:	f7ff ff88 	bl	4710 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    4800:	2800      	cmp	r0, #0
    4802:	bf08      	it	eq
    4804:	4620      	moveq	r0, r4
    4806:	e7da      	b.n	47be <bt_id_create+0x42>
		return -ENOMEM;
    4808:	f06f 000b 	mvn.w	r0, #11
    480c:	e7d7      	b.n	47be <bt_id_create+0x42>
    480e:	bf00      	nop
    4810:	20000000 	.word	0x20000000

00004814 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    4814:	b570      	push	{r4, r5, r6, lr}
    4816:	b086      	sub	sp, #24
    4818:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    481a:	aa01      	add	r2, sp, #4
    481c:	2100      	movs	r1, #0
    481e:	f241 0009 	movw	r0, #4105	; 0x1009
    4822:	f7ff f96d 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    4826:	4604      	mov	r4, r0
    4828:	b970      	cbnz	r0, 4848 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
    482a:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    482c:	9002      	str	r0, [sp, #8]
    482e:	689d      	ldr	r5, [r3, #8]
    4830:	f8ad 000c 	strh.w	r0, [sp, #12]
    4834:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    4836:	2206      	movs	r2, #6
    4838:	a902      	add	r1, sp, #8
    483a:	4628      	mov	r0, r5
    483c:	f014 facf 	bl	18dde <memcmp>
    4840:	b920      	cbnz	r0, 484c <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
    4842:	9801      	ldr	r0, [sp, #4]
    4844:	f00f fd8c 	bl	14360 <net_buf_unref>
		return 0U;
    4848:	2000      	movs	r0, #0
    484a:	e016      	b.n	487a <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    484c:	4b0c      	ldr	r3, [pc, #48]	; (4880 <bt_id_read_public_addr+0x6c>)
    484e:	6818      	ldr	r0, [r3, #0]
    4850:	9004      	str	r0, [sp, #16]
    4852:	889b      	ldrh	r3, [r3, #4]
    4854:	f8ad 3014 	strh.w	r3, [sp, #20]
    4858:	2206      	movs	r2, #6
    485a:	a904      	add	r1, sp, #16
    485c:	4628      	mov	r0, r5
    485e:	f014 fabe 	bl	18dde <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    4862:	2800      	cmp	r0, #0
    4864:	d0ed      	beq.n	4842 <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
    4866:	2206      	movs	r2, #6
    4868:	4629      	mov	r1, r5
    486a:	1c70      	adds	r0, r6, #1
    486c:	f014 fac8 	bl	18e00 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
    4870:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    4872:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    4874:	f00f fd74 	bl	14360 <net_buf_unref>
	return 1U;
    4878:	2001      	movs	r0, #1
}
    487a:	b006      	add	sp, #24
    487c:	bd70      	pop	{r4, r5, r6, pc}
    487e:	bf00      	nop
    4880:	0001ca65 	.word	0x0001ca65

00004884 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    4884:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    4886:	4668      	mov	r0, sp
    4888:	f7ff ffc4 	bl	4814 <bt_id_read_public_addr>
    488c:	4b04      	ldr	r3, [pc, #16]	; (48a0 <bt_setup_public_id_addr+0x1c>)
    488e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    4890:	b118      	cbz	r0, 489a <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    4892:	4669      	mov	r1, sp
    4894:	2000      	movs	r0, #0
    4896:	f7ff ff3b 	bl	4710 <id_create.constprop.0>
}
    489a:	b003      	add	sp, #12
    489c:	f85d fb04 	ldr.w	pc, [sp], #4
    48a0:	20000000 	.word	0x20000000

000048a4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    48a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    48a8:	4b15      	ldr	r3, [pc, #84]	; (4900 <bt_read_static_addr+0x5c>)
    48aa:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    48ae:	f014 0401 	ands.w	r4, r4, #1
{
    48b2:	4607      	mov	r7, r0
    48b4:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    48b6:	d015      	beq.n	48e4 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    48b8:	aa01      	add	r2, sp, #4
    48ba:	2100      	movs	r1, #0
    48bc:	f64f 4009 	movw	r0, #64521	; 0xfc09
    48c0:	f7ff f91e 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    48c4:	4605      	mov	r5, r0
    48c6:	b9c8      	cbnz	r0, 48fc <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
    48c8:	9b01      	ldr	r3, [sp, #4]
    48ca:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    48cc:	785c      	ldrb	r4, [r3, #1]
    48ce:	42b4      	cmp	r4, r6
    48d0:	bf28      	it	cs
    48d2:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    48d4:	f04f 0816 	mov.w	r8, #22
    48d8:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    48da:	42a5      	cmp	r5, r4
    48dc:	db06      	blt.n	48ec <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
    48de:	9801      	ldr	r0, [sp, #4]
    48e0:	f00f fd3e 	bl	14360 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    48e4:	4620      	mov	r0, r4
    48e6:	b002      	add	sp, #8
    48e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    48ec:	fb08 7005 	mla	r0, r8, r5, r7
    48f0:	2216      	movs	r2, #22
    48f2:	4631      	mov	r1, r6
    48f4:	f014 fa84 	bl	18e00 <memcpy>
	for (i = 0; i < cnt; i++) {
    48f8:	3501      	adds	r5, #1
    48fa:	e7ee      	b.n	48da <bt_read_static_addr+0x36>
		return 0;
    48fc:	2400      	movs	r4, #0
    48fe:	e7f1      	b.n	48e4 <bt_read_static_addr+0x40>
    4900:	20000000 	.word	0x20000000

00004904 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    4904:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    4906:	4e15      	ldr	r6, [pc, #84]	; (495c <bt_setup_random_id_addr+0x58>)
    4908:	79f4      	ldrb	r4, [r6, #7]
{
    490a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    490c:	b9f4      	cbnz	r4, 494c <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    490e:	2101      	movs	r1, #1
    4910:	a802      	add	r0, sp, #8
    4912:	f7ff ffc7 	bl	48a4 <bt_read_static_addr>
    4916:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
    4918:	b1c0      	cbz	r0, 494c <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    491a:	2716      	movs	r7, #22
    491c:	ab02      	add	r3, sp, #8
    491e:	b2e5      	uxtb	r5, r4
    4920:	fb07 3105 	mla	r1, r7, r5, r3
    4924:	2206      	movs	r2, #6
    4926:	f10d 0001 	add.w	r0, sp, #1
    492a:	f014 fa69 	bl	18e00 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    492e:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    4930:	4669      	mov	r1, sp
    4932:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    4934:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    4938:	f7ff feea 	bl	4710 <id_create.constprop.0>
				if (err) {
    493c:	b920      	cbnz	r0, 4948 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    493e:	79f2      	ldrb	r2, [r6, #7]
    4940:	3401      	adds	r4, #1
    4942:	b2e3      	uxtb	r3, r4
    4944:	429a      	cmp	r2, r3
    4946:	d8e9      	bhi.n	491c <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    4948:	b009      	add	sp, #36	; 0x24
    494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    494c:	2100      	movs	r1, #0
    494e:	4608      	mov	r0, r1
}
    4950:	b009      	add	sp, #36	; 0x24
    4952:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    4956:	f7ff bf11 	b.w	477c <bt_id_create>
    495a:	bf00      	nop
    495c:	20000000 	.word	0x20000000

00004960 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    4960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    4964:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    4968:	7805      	ldrb	r5, [r0, #0]
{
    496a:	460e      	mov	r6, r1
    496c:	4690      	mov	r8, r2
    496e:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    4970:	d026      	beq.n	49c0 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    4972:	4c23      	ldr	r4, [pc, #140]	; (4a00 <bt_id_set_adv_own_addr+0xa0>)
    4974:	b12a      	cbz	r2, 4982 <bt_id_set_adv_own_addr+0x22>
    4976:	0688      	lsls	r0, r1, #26
    4978:	d503      	bpl.n	4982 <bt_id_set_adv_own_addr+0x22>
    497a:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
    497e:	0659      	lsls	r1, r3, #25
    4980:	d53a      	bpl.n	49f8 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    4982:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    4986:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    498a:	5ce3      	ldrb	r3, [r4, r3]
    498c:	2b01      	cmp	r3, #1
    498e:	d008      	beq.n	49a2 <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    4990:	eba9 0505 	sub.w	r5, r9, r5
    4994:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    4996:	f1b8 0f00 	cmp.w	r8, #0
    499a:	d10c      	bne.n	49b6 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    499c:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    499e:	2000      	movs	r0, #0
    49a0:	e007      	b.n	49b2 <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    49a2:	2007      	movs	r0, #7
    49a4:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    49a8:	4420      	add	r0, r4
    49aa:	f7ff fe83 	bl	46b4 <set_random_address>
				if (err) {
    49ae:	2800      	cmp	r0, #0
    49b0:	d0ee      	beq.n	4990 <bt_id_set_adv_own_addr+0x30>
}
    49b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    49b6:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    49b8:	bf48      	it	mi
    49ba:	f043 0302 	orrmi.w	r3, r3, #2
    49be:	e7ed      	b.n	499c <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    49c0:	074b      	lsls	r3, r1, #29
    49c2:	d515      	bpl.n	49f0 <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    49c4:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4a00 <bt_id_set_adv_own_addr+0xa0>
    49c8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    49cc:	00ee      	lsls	r6, r5, #3
    49ce:	f818 3003 	ldrb.w	r3, [r8, r3]
    49d2:	2b01      	cmp	r3, #1
    49d4:	d10a      	bne.n	49ec <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    49d6:	2007      	movs	r0, #7
    49d8:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    49dc:	4440      	add	r0, r8
    49de:	f7ff fe69 	bl	46b4 <set_random_address>
			*own_addr_type = id_addr->type;
    49e2:	1b75      	subs	r5, r6, r5
    49e4:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    49e8:	703b      	strb	r3, [r7, #0]
		if (err) {
    49ea:	e7e2      	b.n	49b2 <bt_id_set_adv_own_addr+0x52>
	int err = 0;
    49ec:	4620      	mov	r0, r4
    49ee:	e7f8      	b.n	49e2 <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
    49f0:	f014 fd85 	bl	194fe <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    49f4:	2301      	movs	r3, #1
    49f6:	e7f7      	b.n	49e8 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
    49f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    49fc:	e7d9      	b.n	49b2 <bt_id_set_adv_own_addr+0x52>
    49fe:	bf00      	nop
    4a00:	20000000 	.word	0x20000000

00004a04 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    4a04:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    4a06:	4c0a      	ldr	r4, [pc, #40]	; (4a30 <bt_id_init+0x2c>)
    4a08:	79e3      	ldrb	r3, [r4, #7]
    4a0a:	b10b      	cbz	r3, 4a10 <bt_id_init+0xc>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    4a0c:	2000      	movs	r0, #0
}
    4a0e:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
    4a10:	f7ff ff38 	bl	4884 <bt_setup_public_id_addr>
		if (err) {
    4a14:	2800      	cmp	r0, #0
    4a16:	d1fa      	bne.n	4a0e <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    4a18:	79e3      	ldrb	r3, [r4, #7]
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d1f6      	bne.n	4a0c <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    4a1e:	f7ff ff71 	bl	4904 <bt_setup_random_id_addr>
		if (err) {
    4a22:	2800      	cmp	r0, #0
    4a24:	d1f3      	bne.n	4a0e <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    4a26:	1c60      	adds	r0, r4, #1
}
    4a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = set_random_address(&bt_dev.id_addr[0].a);
    4a2c:	f7ff be42 	b.w	46b4 <set_random_address>
    4a30:	20000000 	.word	0x20000000

00004a34 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    4a34:	6843      	ldr	r3, [r0, #4]
{
    4a36:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4a38:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    4a3a:	0558      	lsls	r0, r3, #21
    4a3c:	d502      	bpl.n	4a44 <valid_adv_param+0x10>
		return false;
    4a3e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    4a40:	b003      	add	sp, #12
    4a42:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    4a44:	6922      	ldr	r2, [r4, #16]
    4a46:	b10a      	cbz	r2, 4a4c <valid_adv_param+0x18>
    4a48:	07d9      	lsls	r1, r3, #31
    4a4a:	d5f8      	bpl.n	4a3e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    4a4c:	4d1a      	ldr	r5, [pc, #104]	; (4ab8 <valid_adv_param+0x84>)
    4a4e:	7820      	ldrb	r0, [r4, #0]
    4a50:	79eb      	ldrb	r3, [r5, #7]
    4a52:	4283      	cmp	r3, r0
    4a54:	d9f3      	bls.n	4a3e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    4a56:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    4a5a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    4a5c:	2207      	movs	r2, #7
    4a5e:	4669      	mov	r1, sp
    4a60:	4428      	add	r0, r5
    4a62:	9300      	str	r3, [sp, #0]
    4a64:	f8cd 3003 	str.w	r3, [sp, #3]
    4a68:	f014 f9b9 	bl	18dde <memcmp>
	if (param->id >= bt_dev.id_count ||
    4a6c:	2800      	cmp	r0, #0
    4a6e:	d0e6      	beq.n	4a3e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    4a70:	6860      	ldr	r0, [r4, #4]
    4a72:	07c2      	lsls	r2, r0, #31
    4a74:	d406      	bmi.n	4a84 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    4a76:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    4a7a:	2b08      	cmp	r3, #8
    4a7c:	d802      	bhi.n	4a84 <valid_adv_param+0x50>
    4a7e:	68a3      	ldr	r3, [r4, #8]
    4a80:	2b9f      	cmp	r3, #159	; 0x9f
    4a82:	d9dc      	bls.n	4a3e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    4a84:	f010 0f30 	tst.w	r0, #48	; 0x30
    4a88:	d002      	beq.n	4a90 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    4a8a:	6923      	ldr	r3, [r4, #16]
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d0d6      	beq.n	4a3e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    4a90:	06c3      	lsls	r3, r0, #27
    4a92:	d401      	bmi.n	4a98 <valid_adv_param+0x64>
    4a94:	6923      	ldr	r3, [r4, #16]
    4a96:	b943      	cbnz	r3, 4aaa <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    4a98:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    4a9c:	429a      	cmp	r2, r3
    4a9e:	d8ce      	bhi.n	4a3e <valid_adv_param+0xa>
    4aa0:	2a1f      	cmp	r2, #31
    4aa2:	d9cc      	bls.n	4a3e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    4aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    4aa8:	d8c9      	bhi.n	4a3e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    4aaa:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    4aae:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    4ab2:	bf18      	it	ne
    4ab4:	2001      	movne	r0, #1
    4ab6:	e7c3      	b.n	4a40 <valid_adv_param+0xc>
    4ab8:	20000000 	.word	0x20000000

00004abc <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    4abc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    4abe:	4606      	mov	r6, r0
    4ac0:	4b1e      	ldr	r3, [pc, #120]	; (4b3c <le_adv_start_add_conn+0x80>)
    4ac2:	f816 2b09 	ldrb.w	r2, [r6], #9
    4ac6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    4aca:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    4acc:	2300      	movs	r3, #0
{
    4ace:	4605      	mov	r5, r0
    4ad0:	2207      	movs	r2, #7
    4ad2:	460f      	mov	r7, r1
    4ad4:	4630      	mov	r0, r6
    4ad6:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    4ad8:	9300      	str	r3, [sp, #0]
    4ada:	f8cd 3003 	str.w	r3, [sp, #3]
    4ade:	f014 f97e 	bl	18dde <memcmp>
    4ae2:	782a      	ldrb	r2, [r5, #0]
    4ae4:	4604      	mov	r4, r0
    4ae6:	b9a8      	cbnz	r0, 4b14 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    4ae8:	4b15      	ldr	r3, [pc, #84]	; (4b40 <le_adv_start_add_conn+0x84>)
    4aea:	6818      	ldr	r0, [r3, #0]
    4aec:	8899      	ldrh	r1, [r3, #4]
    4aee:	9002      	str	r0, [sp, #8]
    4af0:	799b      	ldrb	r3, [r3, #6]
    4af2:	f8ad 100c 	strh.w	r1, [sp, #12]
    4af6:	4610      	mov	r0, r2
    4af8:	a902      	add	r1, sp, #8
    4afa:	f88d 300e 	strb.w	r3, [sp, #14]
    4afe:	f000 fccb 	bl	5498 <bt_conn_add_le>
		if (!conn) {
    4b02:	4605      	mov	r5, r0
    4b04:	b1b8      	cbz	r0, 4b36 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    4b06:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    4b08:	f000 fb72 	bl	51f0 <bt_conn_set_state>
	*out_conn = conn;
    4b0c:	603d      	str	r5, [r7, #0]
	return 0;
}
    4b0e:	4620      	mov	r0, r4
    4b10:	b005      	add	sp, #20
    4b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    4b14:	4631      	mov	r1, r6
    4b16:	4610      	mov	r0, r2
    4b18:	f014 ff6e 	bl	199f8 <bt_conn_exists_le>
    4b1c:	4604      	mov	r4, r0
    4b1e:	b938      	cbnz	r0, 4b30 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    4b20:	7828      	ldrb	r0, [r5, #0]
    4b22:	4631      	mov	r1, r6
    4b24:	f000 fcb8 	bl	5498 <bt_conn_add_le>
	if (!conn) {
    4b28:	4605      	mov	r5, r0
    4b2a:	b120      	cbz	r0, 4b36 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    4b2c:	2105      	movs	r1, #5
    4b2e:	e7eb      	b.n	4b08 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    4b30:	f06f 0415 	mvn.w	r4, #21
    4b34:	e7eb      	b.n	4b0e <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    4b36:	f06f 040b 	mvn.w	r4, #11
    4b3a:	e7e8      	b.n	4b0e <le_adv_start_add_conn+0x52>
    4b3c:	20000000 	.word	0x20000000
    4b40:	0001ca6b 	.word	0x0001ca6b

00004b44 <bt_le_adv_lookup_legacy>:
}
    4b44:	4800      	ldr	r0, [pc, #0]	; (4b48 <bt_le_adv_lookup_legacy+0x4>)
    4b46:	4770      	bx	lr
    4b48:	20000018 	.word	0x20000018

00004b4c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    4b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    4b50:	690e      	ldr	r6, [r1, #16]
{
    4b52:	b08f      	sub	sp, #60	; 0x3c
    4b54:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    4b56:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    4b58:	ebb6 0903 	subs.w	r9, r6, r3
{
    4b5c:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4b5e:	488c      	ldr	r0, [pc, #560]	; (4d90 <bt_le_adv_start_legacy+0x244>)
    4b60:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
    4b62:	bf18      	it	ne
    4b64:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
    4b68:	9307      	str	r3, [sp, #28]
    4b6a:	f014 fceb 	bl	19544 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    4b6e:	0787      	lsls	r7, r0, #30
{
    4b70:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    4b72:	f140 8102 	bpl.w	4d7a <bt_le_adv_start_legacy+0x22e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    4b76:	4608      	mov	r0, r1
    4b78:	f7ff ff5c 	bl	4a34 <valid_adv_param>
    4b7c:	b928      	cbnz	r0, 4b8a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    4b7e:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    4b82:	4658      	mov	r0, fp
    4b84:	b00f      	add	sp, #60	; 0x3c
    4b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    4b8a:	4620      	mov	r0, r4
    4b8c:	f014 fcc9 	bl	19522 <bt_id_adv_random_addr_check>
    4b90:	4680      	mov	r8, r0
    4b92:	2800      	cmp	r0, #0
    4b94:	d0f3      	beq.n	4b7e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    4b96:	f105 0710 	add.w	r7, r5, #16
    4b9a:	4638      	mov	r0, r7
    4b9c:	f014 fcd2 	bl	19544 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    4ba0:	f3c0 1b80 	ubfx	fp, r0, #6, #1
    4ba4:	0640      	lsls	r0, r0, #25
    4ba6:	f100 80eb 	bmi.w	4d80 <bt_le_adv_start_legacy+0x234>
	(void)memset(&set_param, 0, sizeof(set_param));
    4baa:	220f      	movs	r2, #15
    4bac:	4659      	mov	r1, fp
    4bae:	a80a      	add	r0, sp, #40	; 0x28
    4bb0:	f014 f931 	bl	18e16 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    4bb4:	68a3      	ldr	r3, [r4, #8]
    4bb6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
    4bba:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    4bbc:	68e3      	ldr	r3, [r4, #12]
    4bbe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    4bc2:	f014 fcb0 	bl	19526 <get_adv_channel_map>
	if (adv->id != param->id) {
    4bc6:	782a      	ldrb	r2, [r5, #0]
    4bc8:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    4bca:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    4bce:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    4bd0:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    4bd4:	d004      	beq.n	4be0 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4bd6:	486e      	ldr	r0, [pc, #440]	; (4d90 <bt_le_adv_start_legacy+0x244>)
    4bd8:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    4bdc:	f014 fcb8 	bl	19550 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    4be0:	4a6c      	ldr	r2, [pc, #432]	; (4d94 <bt_le_adv_start_legacy+0x248>)
	adv->id = param->id;
    4be2:	7823      	ldrb	r3, [r4, #0]
    4be4:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    4be6:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    4bea:	6861      	ldr	r1, [r4, #4]
    4bec:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    4bf0:	464a      	mov	r2, r9
    4bf2:	4628      	mov	r0, r5
    4bf4:	f7ff feb4 	bl	4960 <bt_id_set_adv_own_addr>
	if (err) {
    4bf8:	4683      	mov	fp, r0
    4bfa:	2800      	cmp	r0, #0
    4bfc:	d1c1      	bne.n	4b82 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    4bfe:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    4c02:	2e00      	cmp	r6, #0
    4c04:	d049      	beq.n	4c9a <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
    4c06:	6921      	ldr	r1, [r4, #16]
    4c08:	2207      	movs	r2, #7
    4c0a:	f014 f8f9 	bl	18e00 <memcpy>
	name_type = get_adv_name_type_param(param);
    4c0e:	4620      	mov	r0, r4
    4c10:	f014 fd9c 	bl	1974c <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    4c14:	6863      	ldr	r3, [r4, #4]
    4c16:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
    4c18:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    4c1a:	d547      	bpl.n	4cac <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
    4c1c:	2e00      	cmp	r6, #0
    4c1e:	d042      	beq.n	4ca6 <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    4c20:	f013 0f10 	tst.w	r3, #16
    4c24:	bf14      	ite	ne
    4c26:	2304      	movne	r3, #4
    4c28:	2301      	moveq	r3, #1
    4c2a:	6921      	ldr	r1, [r4, #16]
    4c2c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    4c30:	2207      	movs	r2, #7
    4c32:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    4c36:	f014 f8e3 	bl	18e00 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    4c3a:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    4c3e:	210f      	movs	r1, #15
    4c40:	f242 0006 	movw	r0, #8198	; 0x2006
    4c44:	f7fe ff22 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
    4c48:	4683      	mov	fp, r0
    4c4a:	2800      	cmp	r0, #0
    4c4c:	f000 809b 	beq.w	4d86 <bt_le_adv_start_legacy+0x23a>
    4c50:	220f      	movs	r2, #15
    4c52:	a90a      	add	r1, sp, #40	; 0x28
    4c54:	3008      	adds	r0, #8
    4c56:	f016 f8b4 	bl	1adc2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    4c5a:	2200      	movs	r2, #0
    4c5c:	4659      	mov	r1, fp
    4c5e:	f242 0006 	movw	r0, #8198	; 0x2006
    4c62:	f7fe ff4d 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
    4c66:	2800      	cmp	r0, #0
    4c68:	f040 8090 	bne.w	4d8c <bt_le_adv_start_legacy+0x240>
	if (!dir_adv) {
    4c6c:	b376      	cbz	r6, 4ccc <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    4c6e:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4c70:	07db      	lsls	r3, r3, #31
    4c72:	d439      	bmi.n	4ce8 <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
    4c74:	2101      	movs	r1, #1
    4c76:	4628      	mov	r0, r5
    4c78:	f014 fd78 	bl	1976c <bt_le_adv_set_enable_legacy>
	if (err) {
    4c7c:	4683      	mov	fp, r0
    4c7e:	9807      	ldr	r0, [sp, #28]
    4c80:	f1bb 0f00 	cmp.w	fp, #0
    4c84:	d073      	beq.n	4d6e <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    4c86:	2800      	cmp	r0, #0
    4c88:	f43f af7b 	beq.w	4b82 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4c8c:	2100      	movs	r1, #0
    4c8e:	f000 faaf 	bl	51f0 <bt_conn_set_state>
			bt_conn_unref(conn);
    4c92:	9807      	ldr	r0, [sp, #28]
    4c94:	f014 fe49 	bl	1992a <bt_conn_unref>
    4c98:	e773      	b.n	4b82 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    4c9a:	9608      	str	r6, [sp, #32]
    4c9c:	2207      	movs	r2, #7
    4c9e:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    4ca2:	a908      	add	r1, sp, #32
    4ca4:	e7b1      	b.n	4c0a <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
    4ca6:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    4caa:	e7c8      	b.n	4c3e <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    4cac:	059a      	lsls	r2, r3, #22
    4cae:	d403      	bmi.n	4cb8 <bt_le_adv_start_legacy+0x16c>
    4cb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4cb2:	b90b      	cbnz	r3, 4cb8 <bt_le_adv_start_legacy+0x16c>
    4cb4:	2802      	cmp	r0, #2
    4cb6:	d103      	bne.n	4cc0 <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    4cb8:	2302      	movs	r3, #2
    4cba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    4cbe:	e7be      	b.n	4c3e <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    4cc0:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    4cc2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    4cc6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    4cca:	e7b8      	b.n	4c3e <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    4ccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4cce:	9300      	str	r3, [sp, #0]
    4cd0:	e9cd 8901 	strd	r8, r9, [sp, #4]
    4cd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4cd6:	9905      	ldr	r1, [sp, #20]
    4cd8:	4652      	mov	r2, sl
    4cda:	4628      	mov	r0, r5
    4cdc:	f014 fcbf 	bl	1965e <le_adv_update.constprop.0>
		if (err) {
    4ce0:	4683      	mov	fp, r0
    4ce2:	2800      	cmp	r0, #0
    4ce4:	d0c3      	beq.n	4c6e <bt_le_adv_start_legacy+0x122>
    4ce6:	e74c      	b.n	4b82 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    4ce8:	a907      	add	r1, sp, #28
    4cea:	4628      	mov	r0, r5
    4cec:	f7ff fee6 	bl	4abc <le_adv_start_add_conn>
		if (err) {
    4cf0:	4683      	mov	fp, r0
    4cf2:	2800      	cmp	r0, #0
    4cf4:	d0be      	beq.n	4c74 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
    4cf6:	f110 0f0c 	cmn.w	r0, #12
    4cfa:	f47f af42 	bne.w	4b82 <bt_le_adv_start_legacy+0x36>
    4cfe:	2e00      	cmp	r6, #0
    4d00:	f47f af3f 	bne.w	4b82 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    4d04:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    4d06:	0798      	lsls	r0, r3, #30
    4d08:	f53f af3b 	bmi.w	4b82 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    4d0c:	6862      	ldr	r2, [r4, #4]
    4d0e:	f082 0202 	eor.w	r2, r2, #2
    4d12:	f3c2 0b40 	ubfx	fp, r2, #1, #1
    4d16:	f00b 0201 	and.w	r2, fp, #1
    4d1a:	210d      	movs	r1, #13
    4d1c:	4638      	mov	r0, r7
    4d1e:	f014 fc87 	bl	19630 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    4d22:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    4d26:	425a      	negs	r2, r3
    4d28:	415a      	adcs	r2, r3
    4d2a:	2107      	movs	r1, #7
    4d2c:	4638      	mov	r0, r7
    4d2e:	f014 fc7f 	bl	19630 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    4d32:	f1a9 0102 	sub.w	r1, r9, #2
    4d36:	424a      	negs	r2, r1
    4d38:	414a      	adcs	r2, r1
    4d3a:	4638      	mov	r0, r7
    4d3c:	2108      	movs	r1, #8
    4d3e:	f014 fc77 	bl	19630 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    4d42:	6862      	ldr	r2, [r4, #4]
    4d44:	2109      	movs	r1, #9
    4d46:	f002 0201 	and.w	r2, r2, #1
    4d4a:	4638      	mov	r0, r7
    4d4c:	f014 fc70 	bl	19630 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    4d50:	4642      	mov	r2, r8
    4d52:	210a      	movs	r1, #10
    4d54:	4638      	mov	r0, r7
    4d56:	f014 fc6b 	bl	19630 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    4d5a:	6862      	ldr	r2, [r4, #4]
    4d5c:	210c      	movs	r1, #12
    4d5e:	f3c2 0280 	ubfx	r2, r2, #2, #1
    4d62:	4638      	mov	r0, r7
    4d64:	f014 fc64 	bl	19630 <atomic_set_bit_to>
	return 0;
    4d68:	f04f 0b00 	mov.w	fp, #0
    4d6c:	e709      	b.n	4b82 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    4d6e:	b108      	cbz	r0, 4d74 <bt_le_adv_start_legacy+0x228>
		bt_conn_unref(conn);
    4d70:	f014 fddb 	bl	1992a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    4d74:	2e00      	cmp	r6, #0
    4d76:	d1ce      	bne.n	4d16 <bt_le_adv_start_legacy+0x1ca>
    4d78:	e7c8      	b.n	4d0c <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
    4d7a:	f06f 0b0a 	mvn.w	fp, #10
    4d7e:	e700      	b.n	4b82 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    4d80:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    4d84:	e6fd      	b.n	4b82 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    4d86:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    4d8a:	e6fa      	b.n	4b82 <bt_le_adv_start_legacy+0x36>
    4d8c:	4683      	mov	fp, r0
    4d8e:	e6f8      	b.n	4b82 <bt_le_adv_start_legacy+0x36>
    4d90:	200000cc 	.word	0x200000cc
    4d94:	20000000 	.word	0x20000000

00004d98 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    4d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4d9a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    4d9c:	9a06      	ldr	r2, [sp, #24]
{
    4d9e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    4da0:	e9cd 3200 	strd	r3, r2, [sp]
    4da4:	462b      	mov	r3, r5
    4da6:	460a      	mov	r2, r1
    4da8:	4601      	mov	r1, r0
    4daa:	4811      	ldr	r0, [pc, #68]	; (4df0 <bt_le_adv_start+0x58>)
    4dac:	f7ff fece 	bl	4b4c <bt_le_adv_start_legacy>
    4db0:	4621      	mov	r1, r4
    4db2:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    4db4:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    4db6:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    4dba:	429d      	cmp	r5, r3
    4dbc:	d102      	bne.n	4dc4 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    4dbe:	4630      	mov	r0, r6
    4dc0:	b002      	add	sp, #8
    4dc2:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    4dc4:	880a      	ldrh	r2, [r1, #0]
    4dc6:	4282      	cmp	r2, r0
    4dc8:	d104      	bne.n	4dd4 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    4dca:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    4dcc:	b112      	cbz	r2, 4dd4 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    4dce:	7812      	ldrb	r2, [r2, #0]
    4dd0:	07d2      	lsls	r2, r2, #31
    4dd2:	d402      	bmi.n	4dda <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    4dd4:	3301      	adds	r3, #1
    4dd6:	3108      	adds	r1, #8
    4dd8:	e7ef      	b.n	4dba <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    4dda:	4906      	ldr	r1, [pc, #24]	; (4df4 <bt_le_adv_start+0x5c>)
    4ddc:	4806      	ldr	r0, [pc, #24]	; (4df8 <bt_le_adv_start+0x60>)
    4dde:	f017 f8e8 	bl	1bfb2 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    4de2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    4de6:	2300      	movs	r3, #0
    4de8:	4803      	ldr	r0, [pc, #12]	; (4df8 <bt_le_adv_start+0x60>)
    4dea:	f012 fc4b 	bl	17684 <k_work_reschedule>
    4dee:	e7e6      	b.n	4dbe <bt_le_adv_start+0x26>
    4df0:	20000018 	.word	0x20000018
    4df4:	000197bd 	.word	0x000197bd
    4df8:	20000030 	.word	0x20000030

00004dfc <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    4dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
    4dfe:	4822      	ldr	r0, [pc, #136]	; (4e88 <bt_le_adv_stop+0x8c>)
    4e00:	f014 fcd9 	bl	197b6 <bt_le_lim_adv_cancel_timeout>
    4e04:	4821      	ldr	r0, [pc, #132]	; (4e8c <bt_le_adv_stop+0x90>)
    4e06:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    4e0a:	f014 fba1 	bl	19550 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4e0e:	481f      	ldr	r0, [pc, #124]	; (4e8c <bt_le_adv_stop+0x90>)
    4e10:	f014 fb98 	bl	19544 <atomic_get>
    4e14:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    4e16:	065a      	lsls	r2, r3, #25
    4e18:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4e1c:	d531      	bpl.n	4e82 <bt_le_adv_stop+0x86>
    4e1e:	481b      	ldr	r0, [pc, #108]	; (4e8c <bt_le_adv_stop+0x90>)
    4e20:	f014 fb90 	bl	19544 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    4e24:	0583      	lsls	r3, r0, #22
    4e26:	d521      	bpl.n	4e6c <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    4e28:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    4e2a:	4819      	ldr	r0, [pc, #100]	; (4e90 <bt_le_adv_stop+0x94>)
    4e2c:	9300      	str	r3, [sp, #0]
    4e2e:	2207      	movs	r2, #7
    4e30:	4669      	mov	r1, sp
    4e32:	f8cd 3003 	str.w	r3, [sp, #3]
    4e36:	f013 ffd2 	bl	18dde <memcmp>
    4e3a:	4b16      	ldr	r3, [pc, #88]	; (4e94 <bt_le_adv_stop+0x98>)
    4e3c:	b9e8      	cbnz	r0, 4e7a <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    4e3e:	4a16      	ldr	r2, [pc, #88]	; (4e98 <bt_le_adv_stop+0x9c>)
    4e40:	8891      	ldrh	r1, [r2, #4]
    4e42:	6810      	ldr	r0, [r2, #0]
    4e44:	7992      	ldrb	r2, [r2, #6]
    4e46:	f8ad 100c 	strh.w	r1, [sp, #12]
    4e4a:	f88d 200e 	strb.w	r2, [sp, #14]
    4e4e:	9002      	str	r0, [sp, #8]
    4e50:	2204      	movs	r2, #4
    4e52:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    4e54:	7e18      	ldrb	r0, [r3, #24]
    4e56:	f000 fb57 	bl	5508 <bt_conn_lookup_state_le>
    4e5a:	4604      	mov	r4, r0
	if (conn) {
    4e5c:	b130      	cbz	r0, 4e6c <bt_le_adv_stop+0x70>
		conn->err = status;
    4e5e:	2100      	movs	r1, #0
    4e60:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4e62:	f000 f9c5 	bl	51f0 <bt_conn_set_state>
		bt_conn_unref(conn);
    4e66:	4620      	mov	r0, r4
    4e68:	f014 fd5f 	bl	1992a <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
    4e6c:	4806      	ldr	r0, [pc, #24]	; (4e88 <bt_le_adv_stop+0x8c>)
    4e6e:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    4e70:	b004      	add	sp, #16
    4e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
    4e76:	f014 bc79 	b.w	1976c <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    4e7a:	2205      	movs	r2, #5
    4e7c:	f103 0121 	add.w	r1, r3, #33	; 0x21
    4e80:	e7e8      	b.n	4e54 <bt_le_adv_stop+0x58>
}
    4e82:	b004      	add	sp, #16
    4e84:	bd10      	pop	{r4, pc}
    4e86:	bf00      	nop
    4e88:	20000018 	.word	0x20000018
    4e8c:	20000028 	.word	0x20000028
    4e90:	20000021 	.word	0x20000021
    4e94:	20000000 	.word	0x20000000
    4e98:	0001ca6b 	.word	0x0001ca6b

00004e9c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    4e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4e9e:	481e      	ldr	r0, [pc, #120]	; (4f18 <bt_le_adv_resume+0x7c>)
    4ea0:	4c1d      	ldr	r4, [pc, #116]	; (4f18 <bt_le_adv_resume+0x7c>)
    4ea2:	f014 fb4f 	bl	19544 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    4ea6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    4eaa:	d032      	beq.n	4f12 <bt_le_adv_resume+0x76>
    4eac:	4620      	mov	r0, r4
    4eae:	f014 fb49 	bl	19544 <atomic_get>
    4eb2:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    4eb4:	f3c0 1580 	ubfx	r5, r0, #6, #1
    4eb8:	d42b      	bmi.n	4f12 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4eba:	4620      	mov	r0, r4
    4ebc:	f014 fb42 	bl	19544 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    4ec0:	0583      	lsls	r3, r0, #22
    4ec2:	d526      	bpl.n	4f12 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    4ec4:	a901      	add	r1, sp, #4
    4ec6:	f1a4 0010 	sub.w	r0, r4, #16
    4eca:	f7ff fdf7 	bl	4abc <le_adv_start_add_conn>
	if (err) {
    4ece:	bb00      	cbnz	r0, 4f12 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    4ed0:	2101      	movs	r1, #1
    4ed2:	f1a4 0010 	sub.w	r0, r4, #16
    4ed6:	f014 fc49 	bl	1976c <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    4eda:	b150      	cbz	r0, 4ef2 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4edc:	4629      	mov	r1, r5
    4ede:	9801      	ldr	r0, [sp, #4]
    4ee0:	f000 f986 	bl	51f0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4ee4:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    4ee8:	4620      	mov	r0, r4
    4eea:	f014 fb31 	bl	19550 <atomic_and>
	return (old & mask) != 0;
    4eee:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    4ef2:	9801      	ldr	r0, [sp, #4]
    4ef4:	f014 fd19 	bl	1992a <bt_conn_unref>
	if (persist_paused) {
    4ef8:	b15d      	cbz	r5, 4f12 <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4efa:	f3bf 8f5b 	dmb	ish
    4efe:	e854 3f00 	ldrex	r3, [r4]
    4f02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4f06:	e844 3200 	strex	r2, r3, [r4]
    4f0a:	2a00      	cmp	r2, #0
    4f0c:	d1f7      	bne.n	4efe <bt_le_adv_resume+0x62>
    4f0e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    4f12:	b003      	add	sp, #12
    4f14:	bd30      	pop	{r4, r5, pc}
    4f16:	bf00      	nop
    4f18:	20000028 	.word	0x20000028

00004f1c <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    4f1c:	2300      	movs	r3, #0
	tx->user_data = NULL;
    4f1e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    4f22:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    4f24:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    4f26:	4801      	ldr	r0, [pc, #4]	; (4f2c <tx_free+0x10>)
    4f28:	f016 bf4c 	b.w	1bdc4 <k_queue_append>
    4f2c:	2000089c 	.word	0x2000089c

00004f30 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4f30:	4b0e      	ldr	r3, [pc, #56]	; (4f6c <notify_connected+0x3c>)
{
    4f32:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    4f34:	681d      	ldr	r5, [r3, #0]
{
    4f36:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4f38:	b955      	cbnz	r5, 4f50 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4f3a:	4d0d      	ldr	r5, [pc, #52]	; (4f70 <notify_connected+0x40>)
    4f3c:	4e0d      	ldr	r6, [pc, #52]	; (4f74 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    4f3e:	7a61      	ldrb	r1, [r4, #9]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4f40:	42b5      	cmp	r5, r6
    4f42:	d30c      	bcc.n	4f5e <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    4f44:	b989      	cbnz	r1, 4f6a <notify_connected+0x3a>
		bt_gatt_connected(conn);
    4f46:	4620      	mov	r0, r4
	}
}
    4f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    4f4c:	f015 be72 	b.w	1ac34 <bt_gatt_connected>
		if (cb->connected) {
    4f50:	682b      	ldr	r3, [r5, #0]
    4f52:	b113      	cbz	r3, 4f5a <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    4f54:	7a61      	ldrb	r1, [r4, #9]
    4f56:	4620      	mov	r0, r4
    4f58:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4f5a:	692d      	ldr	r5, [r5, #16]
    4f5c:	e7ec      	b.n	4f38 <notify_connected+0x8>
		if (cb->connected) {
    4f5e:	682b      	ldr	r3, [r5, #0]
    4f60:	b10b      	cbz	r3, 4f66 <notify_connected+0x36>
			cb->connected(conn, conn->err);
    4f62:	4620      	mov	r0, r4
    4f64:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    4f66:	3514      	adds	r5, #20
    4f68:	e7e9      	b.n	4f3e <notify_connected+0xe>
}
    4f6a:	bd70      	pop	{r4, r5, r6, pc}
    4f6c:	20001410 	.word	0x20001410
    4f70:	0001c95c 	.word	0x0001c95c
    4f74:	0001c95c 	.word	0x0001c95c

00004f78 <send_frag>:
{
    4f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    4f7c:	694d      	ldr	r5, [r1, #20]
{
    4f7e:	4604      	mov	r4, r0
    4f80:	460e      	mov	r6, r1
    4f82:	4690      	mov	r8, r2
    4f84:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    4f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4f8a:	483e      	ldr	r0, [pc, #248]	; (5084 <send_frag+0x10c>)
    4f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f90:	f012 f996 	bl	172c0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    4f94:	7aa3      	ldrb	r3, [r4, #10]
    4f96:	2b07      	cmp	r3, #7
    4f98:	d146      	bne.n	5028 <send_frag+0xb0>
	__asm__ volatile(
    4f9a:	f04f 0320 	mov.w	r3, #32
    4f9e:	f3ef 8211 	mrs	r2, BASEPRI
    4fa2:	f383 8812 	msr	BASEPRI_MAX, r3
    4fa6:	f3bf 8f6f 	isb	sy
	if (tx) {
    4faa:	69a3      	ldr	r3, [r4, #24]
    4fac:	2d00      	cmp	r5, #0
    4fae:	d04d      	beq.n	504c <send_frag+0xd4>
	parent->next = child;
    4fb0:	2100      	movs	r1, #0
    4fb2:	6029      	str	r1, [r5, #0]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4fb4:	2b00      	cmp	r3, #0
    4fb6:	d146      	bne.n	5046 <send_frag+0xce>
	list->head = node;
    4fb8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    4fbc:	f382 8811 	msr	BASEPRI, r2
    4fc0:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    4fc4:	2104      	movs	r1, #4
    4fc6:	f106 0008 	add.w	r0, r6, #8
    4fca:	f015 ff0b 	bl	1ade4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4fce:	8823      	ldrh	r3, [r4, #0]
    4fd0:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    4fd4:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4fd8:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    4fda:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    4fde:	3b04      	subs	r3, #4
    4fe0:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    4fe2:	2302      	movs	r3, #2
    4fe4:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    4fe6:	4630      	mov	r0, r6
    4fe8:	f7fe fdec 	bl	3bc4 <bt_send>
	if (err) {
    4fec:	2800      	cmp	r0, #0
    4fee:	d047      	beq.n	5080 <send_frag+0x108>
	__asm__ volatile(
    4ff0:	f04f 0320 	mov.w	r3, #32
    4ff4:	f3ef 8011 	mrs	r0, BASEPRI
    4ff8:	f383 8812 	msr	BASEPRI_MAX, r3
    4ffc:	f3bf 8f6f 	isb	sy
		if (tx) {
    5000:	2d00      	cmp	r5, #0
    5002:	d037      	beq.n	5074 <send_frag+0xfc>
	return list->head;
    5004:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5006:	2200      	movs	r2, #0
    5008:	b153      	cbz	r3, 5020 <send_frag+0xa8>
    500a:	429d      	cmp	r5, r3
    500c:	d12f      	bne.n	506e <send_frag+0xf6>
	return node->next;
    500e:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    5010:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    5012:	bb3a      	cbnz	r2, 5064 <send_frag+0xec>
    5014:	42a9      	cmp	r1, r5
	list->head = node;
    5016:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    5018:	d100      	bne.n	501c <send_frag+0xa4>
	list->tail = node;
    501a:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    501c:	2300      	movs	r3, #0
    501e:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    5020:	f380 8811 	msr	BASEPRI, r0
    5024:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    5028:	4816      	ldr	r0, [pc, #88]	; (5084 <send_frag+0x10c>)
    502a:	f012 f923 	bl	17274 <z_impl_k_sem_give>
	if (tx) {
    502e:	b115      	cbz	r5, 5036 <send_frag+0xbe>
		tx_free(tx);
    5030:	4628      	mov	r0, r5
    5032:	f7ff ff73 	bl	4f1c <tx_free>
	if (always_consume) {
    5036:	b11f      	cbz	r7, 5040 <send_frag+0xc8>
		net_buf_unref(buf);
    5038:	4630      	mov	r0, r6
    503a:	f00f f991 	bl	14360 <net_buf_unref>
	return false;
    503e:	2700      	movs	r7, #0
}
    5040:	4638      	mov	r0, r7
    5042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5046:	601d      	str	r5, [r3, #0]
	list->tail = node;
    5048:	61a5      	str	r5, [r4, #24]
}
    504a:	e7b7      	b.n	4fbc <send_frag+0x44>
		if (tail_tx) {
    504c:	b133      	cbz	r3, 505c <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
    504e:	f103 090c 	add.w	r9, r3, #12
    5052:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    5054:	3301      	adds	r3, #1
    5056:	f8c9 3000 	str.w	r3, [r9]
    505a:	e7af      	b.n	4fbc <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    505c:	69e3      	ldr	r3, [r4, #28]
    505e:	f104 091c 	add.w	r9, r4, #28
    5062:	e7f7      	b.n	5054 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
    5064:	42a9      	cmp	r1, r5
	parent->next = child;
    5066:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5068:	bf08      	it	eq
    506a:	61a2      	streq	r2, [r4, #24]
}
    506c:	e7d6      	b.n	501c <send_frag+0xa4>
	return node->next;
    506e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5070:	681b      	ldr	r3, [r3, #0]
    5072:	e7c9      	b.n	5008 <send_frag+0x90>
			(*pending_no_cb)--;
    5074:	f8d9 3000 	ldr.w	r3, [r9]
    5078:	3b01      	subs	r3, #1
    507a:	f8c9 3000 	str.w	r3, [r9]
    507e:	e7cf      	b.n	5020 <send_frag+0xa8>
	return true;
    5080:	2701      	movs	r7, #1
    5082:	e7dd      	b.n	5040 <send_frag+0xc8>
    5084:	20000100 	.word	0x20000100

00005088 <bt_conn_get_pkts>:
}
    5088:	4800      	ldr	r0, [pc, #0]	; (508c <bt_conn_get_pkts+0x4>)
    508a:	4770      	bx	lr
    508c:	20000100 	.word	0x20000100

00005090 <bt_conn_new>:
{
    5090:	b538      	push	{r3, r4, r5, lr}
    5092:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    5094:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5096:	2501      	movs	r5, #1
    5098:	428b      	cmp	r3, r1
    509a:	d102      	bne.n	50a2 <bt_conn_new+0x12>
		return NULL;
    509c:	2400      	movs	r4, #0
}
    509e:	4620      	mov	r0, r4
    50a0:	bd38      	pop	{r3, r4, r5, pc}
    50a2:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    50a6:	f3bf 8f5b 	dmb	ish
    50aa:	e852 0f00 	ldrex	r0, [r2]
    50ae:	2800      	cmp	r0, #0
    50b0:	d104      	bne.n	50bc <bt_conn_new+0x2c>
    50b2:	e842 5c00 	strex	ip, r5, [r2]
    50b6:	f1bc 0f00 	cmp.w	ip, #0
    50ba:	d1f6      	bne.n	50aa <bt_conn_new+0x1a>
    50bc:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    50c0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    50c4:	d002      	beq.n	50cc <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    50c6:	3301      	adds	r3, #1
    50c8:	4604      	mov	r4, r0
    50ca:	e7e5      	b.n	5098 <bt_conn_new+0x8>
	if (!conn) {
    50cc:	2c00      	cmp	r4, #0
    50ce:	d0e6      	beq.n	509e <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    50d0:	22b8      	movs	r2, #184	; 0xb8
    50d2:	2100      	movs	r1, #0
    50d4:	4620      	mov	r0, r4
    50d6:	f013 fe9e 	bl	18e16 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    50da:	f104 0058 	add.w	r0, r4, #88	; 0x58
    50de:	4904      	ldr	r1, [pc, #16]	; (50f0 <bt_conn_new+0x60>)
    50e0:	f016 ff67 	bl	1bfb2 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    50e4:	4903      	ldr	r1, [pc, #12]	; (50f4 <bt_conn_new+0x64>)
    50e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    50ea:	f016 ff3c 	bl	1bf66 <k_work_init>
	return conn;
    50ee:	e7d6      	b.n	509e <bt_conn_new+0xe>
    50f0:	000055b9 	.word	0x000055b9
    50f4:	00019807 	.word	0x00019807

000050f8 <bt_conn_send_cb>:
{
    50f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50fa:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
    50fc:	7a83      	ldrb	r3, [r0, #10]
    50fe:	2b07      	cmp	r3, #7
{
    5100:	4604      	mov	r4, r0
    5102:	460d      	mov	r5, r1
    5104:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
    5106:	d114      	bne.n	5132 <bt_conn_send_cb+0x3a>
	if (cb) {
    5108:	b312      	cbz	r2, 5150 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
    510a:	f012 fd69 	bl	17be0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    510e:	4b13      	ldr	r3, [pc, #76]	; (515c <bt_conn_send_cb+0x64>)
    5110:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    5112:	4813      	ldr	r0, [pc, #76]	; (5160 <bt_conn_send_cb+0x68>)
    5114:	bf07      	ittee	eq
    5116:	2200      	moveq	r2, #0
    5118:	2300      	moveq	r3, #0
    511a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    511e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    5122:	f012 f873 	bl	1720c <z_impl_k_queue_get>
		if (!tx) {
    5126:	b1a8      	cbz	r0, 5154 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
    5128:	7aa3      	ldrb	r3, [r4, #10]
    512a:	2b07      	cmp	r3, #7
    512c:	d004      	beq.n	5138 <bt_conn_send_cb+0x40>
			tx_free(tx);
    512e:	f7ff fef5 	bl	4f1c <tx_free>
		return -ENOTCONN;
    5132:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    5136:	e00a      	b.n	514e <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
    5138:	2300      	movs	r3, #0
		tx->user_data = user_data;
    513a:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
    513e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    5140:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    5142:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5146:	4629      	mov	r1, r5
    5148:	f015 fdf6 	bl	1ad38 <net_buf_put>
	return 0;
    514c:	2000      	movs	r0, #0
}
    514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
    5150:	614a      	str	r2, [r1, #20]
    5152:	e7f6      	b.n	5142 <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
    5154:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5158:	e7f9      	b.n	514e <bt_conn_send_cb+0x56>
    515a:	bf00      	nop
    515c:	20001308 	.word	0x20001308
    5160:	2000089c 	.word	0x2000089c

00005164 <bt_conn_prepare_events>:
	conn_change.signaled = 0U;
    5164:	4b1b      	ldr	r3, [pc, #108]	; (51d4 <bt_conn_prepare_events+0x70>)
{
    5166:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
    5168:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    516a:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    516c:	609a      	str	r2, [r3, #8]
{
    516e:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    5170:	f017 f9fb 	bl	1c56a <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5174:	f3bf 8f5b 	dmb	ish
    5178:	4b17      	ldr	r3, [pc, #92]	; (51d8 <bt_conn_prepare_events+0x74>)
    517a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    517e:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    5182:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
    5186:	b90a      	cbnz	r2, 518c <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    5188:	2001      	movs	r0, #1
}
    518a:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    518c:	7a9a      	ldrb	r2, [r3, #10]
    518e:	b99a      	cbnz	r2, 51b8 <bt_conn_prepare_events+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5190:	f3bf 8f5b 	dmb	ish
    5194:	1d1a      	adds	r2, r3, #4
    5196:	e852 1f00 	ldrex	r1, [r2]
    519a:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
    519e:	e842 ce00 	strex	lr, ip, [r2]
    51a2:	f1be 0f00 	cmp.w	lr, #0
    51a6:	d1f6      	bne.n	5196 <bt_conn_prepare_events+0x32>
    51a8:	f3bf 8f5b 	dmb	ish
    51ac:	064a      	lsls	r2, r1, #25
    51ae:	d503      	bpl.n	51b8 <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
    51b0:	4618      	mov	r0, r3
    51b2:	f014 fb34 	bl	1981e <conn_cleanup>
    51b6:	e7e7      	b.n	5188 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    51b8:	7a9b      	ldrb	r3, [r3, #10]
    51ba:	2b07      	cmp	r3, #7
    51bc:	d1e4      	bne.n	5188 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    51be:	4b07      	ldr	r3, [pc, #28]	; (51dc <bt_conn_prepare_events+0x78>)
    51c0:	2200      	movs	r2, #0
    51c2:	2104      	movs	r1, #4
    51c4:	f017 f9d1 	bl	1c56a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    51c8:	2301      	movs	r3, #1
    51ca:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    51ce:	2002      	movs	r0, #2
	return ev_count;
    51d0:	e7db      	b.n	518a <bt_conn_prepare_events+0x26>
    51d2:	bf00      	nop
    51d4:	200001d8 	.word	0x200001d8
    51d8:	20000a70 	.word	0x20000a70
    51dc:	20000aa8 	.word	0x20000aa8

000051e0 <bt_conn_lookup_handle>:
{
    51e0:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    51e2:	2101      	movs	r1, #1
    51e4:	4801      	ldr	r0, [pc, #4]	; (51ec <bt_conn_lookup_handle+0xc>)
    51e6:	f014 bbba 	b.w	1995e <conn_lookup_handle>
    51ea:	bf00      	nop
    51ec:	20000a70 	.word	0x20000a70

000051f0 <bt_conn_set_state>:
{
    51f0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    51f2:	7a85      	ldrb	r5, [r0, #10]
    51f4:	428d      	cmp	r5, r1
{
    51f6:	4604      	mov	r4, r0
	if (conn->state == state) {
    51f8:	f000 809d 	beq.w	5336 <bt_conn_set_state+0x146>
	conn->state = state;
    51fc:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    51fe:	b925      	cbnz	r5, 520a <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
    5200:	7883      	ldrb	r3, [r0, #2]
    5202:	2b08      	cmp	r3, #8
    5204:	d001      	beq.n	520a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
    5206:	f014 fb75 	bl	198f4 <bt_conn_ref>
	switch (conn->state) {
    520a:	7aa3      	ldrb	r3, [r4, #10]
    520c:	2b01      	cmp	r3, #1
    520e:	d116      	bne.n	523e <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
    5210:	4d49      	ldr	r5, [pc, #292]	; (5338 <bt_conn_set_state+0x148>)
		tx->pending_no_cb = 0U;
    5212:	2600      	movs	r6, #0
	__asm__ volatile(
    5214:	f04f 0320 	mov.w	r3, #32
    5218:	f3ef 8211 	mrs	r2, BASEPRI
    521c:	f383 8812 	msr	BASEPRI_MAX, r3
    5220:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    5224:	69e3      	ldr	r3, [r4, #28]
    5226:	2b00      	cmp	r3, #0
    5228:	d066      	beq.n	52f8 <bt_conn_set_state+0x108>
			conn->pending_no_cb--;
    522a:	3b01      	subs	r3, #1
    522c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    522e:	f382 8811 	msr	BASEPRI, r2
    5232:	f3bf 8f6f 	isb	sy
    5236:	4628      	mov	r0, r5
    5238:	f012 f81c 	bl	17274 <z_impl_k_sem_give>
}
    523c:	e7ea      	b.n	5214 <bt_conn_set_state+0x24>
	switch (conn->state) {
    523e:	2b07      	cmp	r3, #7
    5240:	d009      	beq.n	5256 <bt_conn_set_state+0x66>
    5242:	2b00      	cmp	r3, #0
    5244:	d177      	bne.n	5336 <bt_conn_set_state+0x146>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5246:	78a3      	ldrb	r3, [r4, #2]
    5248:	2b04      	cmp	r3, #4
    524a:	d11e      	bne.n	528a <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
    524c:	4620      	mov	r0, r4
}
    524e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    5252:	f014 bb6a 	b.w	1992a <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5256:	78a3      	ldrb	r3, [r4, #2]
    5258:	2b04      	cmp	r3, #4
    525a:	d06c      	beq.n	5336 <bt_conn_set_state+0x146>
	z_impl_k_queue_init(queue);
    525c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5260:	f016 fda4 	bl	1bdac <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    5264:	4835      	ldr	r0, [pc, #212]	; (533c <bt_conn_set_state+0x14c>)
    5266:	2100      	movs	r1, #0
    5268:	f012 fee4 	bl	18034 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    526c:	2300      	movs	r3, #0
	list->tail = NULL;
    526e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5272:	78e3      	ldrb	r3, [r4, #3]
    5274:	2b01      	cmp	r3, #1
    5276:	d15e      	bne.n	5336 <bt_conn_set_state+0x146>
			k_work_schedule(&conn->deferred_work,
    5278:	f104 0058 	add.w	r0, r4, #88	; 0x58
    527c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    5280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    5284:	2300      	movs	r3, #0
    5286:	f012 b9c9 	b.w	1761c <k_work_schedule>
		switch (old_state) {
    528a:	3d01      	subs	r5, #1
    528c:	2d05      	cmp	r5, #5
    528e:	d852      	bhi.n	5336 <bt_conn_set_state+0x146>
    5290:	a301      	add	r3, pc, #4	; (adr r3, 5298 <bt_conn_set_state+0xa8>)
    5292:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    5296:	bf00      	nop
    5298:	000052b1 	.word	0x000052b1
    529c:	000052eb 	.word	0x000052eb
    52a0:	0000524d 	.word	0x0000524d
    52a4:	0000524d 	.word	0x0000524d
    52a8:	000052eb 	.word	0x000052eb
    52ac:	000052eb 	.word	0x000052eb
			tx_notify(conn);
    52b0:	4620      	mov	r0, r4
    52b2:	f014 fa85 	bl	197c0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    52b6:	78a3      	ldrb	r3, [r4, #2]
    52b8:	2b01      	cmp	r3, #1
    52ba:	d103      	bne.n	52c4 <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
    52bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
    52c0:	f016 fe83 	bl	1bfca <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    52c4:	f3bf 8f5b 	dmb	ish
    52c8:	3404      	adds	r4, #4
    52ca:	e854 3f00 	ldrex	r3, [r4]
    52ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    52d2:	e844 3200 	strex	r2, r3, [r4]
    52d6:	2a00      	cmp	r2, #0
    52d8:	d1f7      	bne.n	52ca <bt_conn_set_state+0xda>
    52da:	f3bf 8f5b 	dmb	ish
    52de:	4817      	ldr	r0, [pc, #92]	; (533c <bt_conn_set_state+0x14c>)
}
    52e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52e4:	2100      	movs	r1, #0
    52e6:	f012 bea5 	b.w	18034 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    52ea:	7a63      	ldrb	r3, [r4, #9]
    52ec:	2b00      	cmp	r3, #0
    52ee:	d0ad      	beq.n	524c <bt_conn_set_state+0x5c>
				notify_connected(conn);
    52f0:	4620      	mov	r0, r4
    52f2:	f7ff fe1d 	bl	4f30 <notify_connected>
    52f6:	e7a9      	b.n	524c <bt_conn_set_state+0x5c>
	return list->head;
    52f8:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    52fa:	b128      	cbz	r0, 5308 <bt_conn_set_state+0x118>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    52fc:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    52fe:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    5300:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5302:	4288      	cmp	r0, r1
	list->tail = node;
    5304:	bf08      	it	eq
    5306:	61a3      	streq	r3, [r4, #24]
    5308:	f382 8811 	msr	BASEPRI, r2
    530c:	f3bf 8f6f 	isb	sy
		if (!node) {
    5310:	b188      	cbz	r0, 5336 <bt_conn_set_state+0x146>
	__asm__ volatile(
    5312:	f04f 0220 	mov.w	r2, #32
    5316:	f3ef 8311 	mrs	r3, BASEPRI
    531a:	f382 8812 	msr	BASEPRI_MAX, r2
    531e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    5322:	68c2      	ldr	r2, [r0, #12]
    5324:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    5326:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    5328:	f383 8811 	msr	BASEPRI, r3
    532c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    5330:	f7ff fdf4 	bl	4f1c <tx_free>
    5334:	e77f      	b.n	5236 <bt_conn_set_state+0x46>
}
    5336:	bd70      	pop	{r4, r5, r6, pc}
    5338:	20000100 	.word	0x20000100
    533c:	200001d8 	.word	0x200001d8

00005340 <bt_conn_index>:
		index = conn - acl_conns;
    5340:	4b03      	ldr	r3, [pc, #12]	; (5350 <bt_conn_index+0x10>)
    5342:	1ac0      	subs	r0, r0, r3
    5344:	4b03      	ldr	r3, [pc, #12]	; (5354 <bt_conn_index+0x14>)
    5346:	1180      	asrs	r0, r0, #6
    5348:	4358      	muls	r0, r3
}
    534a:	b2c0      	uxtb	r0, r0
    534c:	4770      	bx	lr
    534e:	bf00      	nop
    5350:	20000a70 	.word	0x20000a70
    5354:	aaaaaaab 	.word	0xaaaaaaab

00005358 <bt_conn_create_pdu_timeout>:
{
    5358:	b538      	push	{r3, r4, r5, lr}
    535a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    535c:	4906      	ldr	r1, [pc, #24]	; (5378 <bt_conn_create_pdu_timeout+0x20>)
    535e:	2800      	cmp	r0, #0
    5360:	bf08      	it	eq
    5362:	4608      	moveq	r0, r1
    5364:	f015 fcc5 	bl	1acf2 <net_buf_alloc_fixed>
	if (!buf) {
    5368:	4604      	mov	r4, r0
    536a:	b118      	cbz	r0, 5374 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
    536c:	1d29      	adds	r1, r5, #4
    536e:	3008      	adds	r0, #8
    5370:	f015 fcde 	bl	1ad30 <net_buf_simple_reserve>
}
    5374:	4620      	mov	r0, r4
    5376:	bd38      	pop	{r3, r4, r5, pc}
    5378:	200008cc 	.word	0x200008cc

0000537c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    537e:	f3bf 8f5b 	dmb	ish
    5382:	6842      	ldr	r2, [r0, #4]
    5384:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    5388:	0592      	lsls	r2, r2, #22
{
    538a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    538c:	f100 0304 	add.w	r3, r0, #4
    5390:	d519      	bpl.n	53c6 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    5392:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    5396:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    539a:	4291      	cmp	r1, r2
    539c:	d813      	bhi.n	53c6 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    539e:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    53a2:	4291      	cmp	r1, r2
    53a4:	d30f      	bcc.n	53c6 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    53a6:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    53aa:	4291      	cmp	r1, r2
    53ac:	d10b      	bne.n	53c6 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53ae:	f3bf 8f5b 	dmb	ish
    53b2:	e853 2f00 	ldrex	r2, [r3]
    53b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    53ba:	e843 2100 	strex	r1, r2, [r3]
    53be:	2900      	cmp	r1, #0
    53c0:	d1f7      	bne.n	53b2 <notify_le_param_updated+0x36>
    53c2:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    53c6:	4b10      	ldr	r3, [pc, #64]	; (5408 <notify_le_param_updated+0x8c>)
    53c8:	681d      	ldr	r5, [r3, #0]
    53ca:	b925      	cbnz	r5, 53d6 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    53cc:	4d0f      	ldr	r5, [pc, #60]	; (540c <notify_le_param_updated+0x90>)
    53ce:	4f10      	ldr	r7, [pc, #64]	; (5410 <notify_le_param_updated+0x94>)
    53d0:	42bd      	cmp	r5, r7
    53d2:	d30c      	bcc.n	53ee <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    53d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    53d6:	68ee      	ldr	r6, [r5, #12]
    53d8:	b13e      	cbz	r6, 53ea <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
    53da:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    53de:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    53e2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    53e6:	4620      	mov	r0, r4
    53e8:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    53ea:	692d      	ldr	r5, [r5, #16]
    53ec:	e7ed      	b.n	53ca <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
    53ee:	68ee      	ldr	r6, [r5, #12]
    53f0:	b13e      	cbz	r6, 5402 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
    53f2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    53f6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    53fa:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    53fe:	4620      	mov	r0, r4
    5400:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5402:	3514      	adds	r5, #20
    5404:	e7e4      	b.n	53d0 <notify_le_param_updated+0x54>
    5406:	bf00      	nop
    5408:	20001410 	.word	0x20001410
    540c:	0001c95c 	.word	0x0001c95c
    5410:	0001c95c 	.word	0x0001c95c

00005414 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    5414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5418:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    541a:	4608      	mov	r0, r1
{
    541c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    541e:	f013 fee3 	bl	191e8 <bt_le_conn_params_valid>
    5422:	4605      	mov	r5, r0
    5424:	b918      	cbnz	r0, 542e <le_param_req+0x1a>
		return false;
    5426:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    5428:	4628      	mov	r0, r5
    542a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    542e:	4b13      	ldr	r3, [pc, #76]	; (547c <le_param_req+0x68>)
    5430:	681e      	ldr	r6, [r3, #0]
    5432:	b946      	cbnz	r6, 5446 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5434:	4e12      	ldr	r6, [pc, #72]	; (5480 <le_param_req+0x6c>)
    5436:	f8df 804c 	ldr.w	r8, [pc, #76]	; 5484 <le_param_req+0x70>
    543a:	4546      	cmp	r6, r8
    543c:	d2f4      	bcs.n	5428 <le_param_req+0x14>
		if (!cb->le_param_req) {
    543e:	68b3      	ldr	r3, [r6, #8]
    5440:	b983      	cbnz	r3, 5464 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5442:	3614      	adds	r6, #20
    5444:	e7f9      	b.n	543a <le_param_req+0x26>
		if (!cb->le_param_req) {
    5446:	68b3      	ldr	r3, [r6, #8]
    5448:	b90b      	cbnz	r3, 544e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    544a:	6936      	ldr	r6, [r6, #16]
    544c:	e7f1      	b.n	5432 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    544e:	4621      	mov	r1, r4
    5450:	4638      	mov	r0, r7
    5452:	4798      	blx	r3
    5454:	2800      	cmp	r0, #0
    5456:	d0e6      	beq.n	5426 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    5458:	4620      	mov	r0, r4
    545a:	f013 fec5 	bl	191e8 <bt_le_conn_params_valid>
    545e:	2800      	cmp	r0, #0
    5460:	d1f3      	bne.n	544a <le_param_req+0x36>
    5462:	e7e0      	b.n	5426 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    5464:	4621      	mov	r1, r4
    5466:	4638      	mov	r0, r7
    5468:	4798      	blx	r3
    546a:	2800      	cmp	r0, #0
    546c:	d0db      	beq.n	5426 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    546e:	4620      	mov	r0, r4
    5470:	f013 feba 	bl	191e8 <bt_le_conn_params_valid>
    5474:	2800      	cmp	r0, #0
    5476:	d1e4      	bne.n	5442 <le_param_req+0x2e>
    5478:	e7d5      	b.n	5426 <le_param_req+0x12>
    547a:	bf00      	nop
    547c:	20001410 	.word	0x20001410
    5480:	0001c95c 	.word	0x0001c95c
    5484:	0001c95c 	.word	0x0001c95c

00005488 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    5488:	4b02      	ldr	r3, [pc, #8]	; (5494 <bt_conn_cb_register+0xc>)
    548a:	681a      	ldr	r2, [r3, #0]
    548c:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    548e:	6018      	str	r0, [r3, #0]
}
    5490:	4770      	bx	lr
    5492:	bf00      	nop
    5494:	20001410 	.word	0x20001410

00005498 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    5498:	b570      	push	{r4, r5, r6, lr}
    549a:	4606      	mov	r6, r0
    549c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    549e:	4809      	ldr	r0, [pc, #36]	; (54c4 <bt_conn_add_le+0x2c>)
    54a0:	2101      	movs	r1, #1
    54a2:	f7ff fdf5 	bl	5090 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    54a6:	4604      	mov	r4, r0
    54a8:	b150      	cbz	r0, 54c0 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
    54aa:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
    54ac:	2207      	movs	r2, #7
    54ae:	4629      	mov	r1, r5
    54b0:	3088      	adds	r0, #136	; 0x88
    54b2:	f013 fca5 	bl	18e00 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    54b6:	2301      	movs	r3, #1
    54b8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    54ba:	4b03      	ldr	r3, [pc, #12]	; (54c8 <bt_conn_add_le+0x30>)
    54bc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    54c0:	4620      	mov	r0, r4
    54c2:	bd70      	pop	{r4, r5, r6, pc}
    54c4:	20000a70 	.word	0x20000a70
    54c8:	00280018 	.word	0x00280018

000054cc <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    54cc:	b570      	push	{r4, r5, r6, lr}
    54ce:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    54d0:	480c      	ldr	r0, [pc, #48]	; (5504 <bt_conn_lookup_addr_le+0x38>)
{
    54d2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    54d4:	f014 fa0e 	bl	198f4 <bt_conn_ref>

		if (!conn) {
    54d8:	4604      	mov	r4, r0
    54da:	b128      	cbz	r0, 54e8 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    54dc:	7883      	ldrb	r3, [r0, #2]
    54de:	2b01      	cmp	r3, #1
    54e0:	d004      	beq.n	54ec <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    54e2:	f014 fa22 	bl	1992a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    54e6:	2400      	movs	r4, #0
}
    54e8:	4620      	mov	r0, r4
    54ea:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    54ec:	4629      	mov	r1, r5
    54ee:	4632      	mov	r2, r6
    54f0:	f014 fa62 	bl	199b8 <bt_conn_is_peer_addr_le>
    54f4:	4605      	mov	r5, r0
    54f6:	2800      	cmp	r0, #0
    54f8:	d1f6      	bne.n	54e8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    54fa:	4620      	mov	r0, r4
    54fc:	f014 fa15 	bl	1992a <bt_conn_unref>
	return NULL;
    5500:	462c      	mov	r4, r5
			continue;
    5502:	e7f1      	b.n	54e8 <bt_conn_lookup_addr_le+0x1c>
    5504:	20000a70 	.word	0x20000a70

00005508 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    5508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    550a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    550c:	480e      	ldr	r0, [pc, #56]	; (5548 <bt_conn_lookup_state_le+0x40>)
{
    550e:	460e      	mov	r6, r1
    5510:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    5512:	f014 f9ef 	bl	198f4 <bt_conn_ref>

		if (!conn) {
    5516:	4604      	mov	r4, r0
    5518:	b1a0      	cbz	r0, 5544 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    551a:	7883      	ldrb	r3, [r0, #2]
    551c:	2b01      	cmp	r3, #1
    551e:	d003      	beq.n	5528 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    5520:	f014 fa03 	bl	1992a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    5524:	2400      	movs	r4, #0
			continue;
    5526:	e00d      	b.n	5544 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    5528:	b136      	cbz	r6, 5538 <bt_conn_lookup_state_le+0x30>
    552a:	4632      	mov	r2, r6
    552c:	4629      	mov	r1, r5
    552e:	f014 fa43 	bl	199b8 <bt_conn_is_peer_addr_le>
    5532:	b908      	cbnz	r0, 5538 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    5534:	4620      	mov	r0, r4
    5536:	e7f3      	b.n	5520 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    5538:	7aa3      	ldrb	r3, [r4, #10]
    553a:	42bb      	cmp	r3, r7
    553c:	d1fa      	bne.n	5534 <bt_conn_lookup_state_le+0x2c>
    553e:	7a23      	ldrb	r3, [r4, #8]
    5540:	42ab      	cmp	r3, r5
    5542:	d1f7      	bne.n	5534 <bt_conn_lookup_state_le+0x2c>
}
    5544:	4620      	mov	r0, r4
    5546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5548:	20000a70 	.word	0x20000a70

0000554c <send_conn_le_param_update>:
{
    554c:	b538      	push	{r3, r4, r5, lr}
    554e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    5550:	4608      	mov	r0, r1
{
    5552:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    5554:	f013 fe48 	bl	191e8 <bt_le_conn_params_valid>
    5558:	b348      	cbz	r0, 55ae <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    555a:	4b16      	ldr	r3, [pc, #88]	; (55b4 <send_conn_le_param_update+0x68>)
    555c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    5560:	0799      	lsls	r1, r3, #30
    5562:	d407      	bmi.n	5574 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    5564:	78e3      	ldrb	r3, [r4, #3]
    5566:	b183      	cbz	r3, 558a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    5568:	4629      	mov	r1, r5
    556a:	4620      	mov	r0, r4
}
    556c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    5570:	f000 b9ba 	b.w	58e8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    5574:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    5578:	079a      	lsls	r2, r3, #30
    557a:	d5f3      	bpl.n	5564 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    557c:	f3bf 8f5b 	dmb	ish
    5580:	6863      	ldr	r3, [r4, #4]
    5582:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    5586:	055b      	lsls	r3, r3, #21
    5588:	d4ec      	bmi.n	5564 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    558a:	4629      	mov	r1, r5
    558c:	4620      	mov	r0, r4
    558e:	f014 fa3d 	bl	19a0c <bt_conn_le_conn_update>
		if (rc == 0) {
    5592:	b958      	cbnz	r0, 55ac <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
    5594:	882b      	ldrh	r3, [r5, #0]
    5596:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    559a:	886b      	ldrh	r3, [r5, #2]
    559c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    55a0:	88ab      	ldrh	r3, [r5, #4]
    55a2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    55a6:	88eb      	ldrh	r3, [r5, #6]
    55a8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    55ac:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    55ae:	f06f 0015 	mvn.w	r0, #21
    55b2:	e7fb      	b.n	55ac <send_conn_le_param_update+0x60>
    55b4:	20000000 	.word	0x20000000

000055b8 <deferred_work>:
{
    55b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    55ba:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    55be:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    55c0:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    55c4:	b9fb      	cbnz	r3, 5606 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    55c6:	4628      	mov	r0, r5
    55c8:	f014 faa2 	bl	19b10 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    55cc:	4b2c      	ldr	r3, [pc, #176]	; (5680 <deferred_work+0xc8>)
    55ce:	681e      	ldr	r6, [r3, #0]
    55d0:	b94e      	cbnz	r6, 55e6 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    55d2:	4e2c      	ldr	r6, [pc, #176]	; (5684 <deferred_work+0xcc>)
    55d4:	4f2c      	ldr	r7, [pc, #176]	; (5688 <deferred_work+0xd0>)
    55d6:	42be      	cmp	r6, r7
    55d8:	d30d      	bcc.n	55f6 <deferred_work+0x3e>
		bt_conn_unref(conn);
    55da:	4628      	mov	r0, r5
}
    55dc:	b003      	add	sp, #12
    55de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    55e2:	f014 b9a2 	b.w	1992a <bt_conn_unref>
		if (cb->disconnected) {
    55e6:	6873      	ldr	r3, [r6, #4]
    55e8:	b11b      	cbz	r3, 55f2 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    55ea:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    55ee:	4628      	mov	r0, r5
    55f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    55f2:	6936      	ldr	r6, [r6, #16]
    55f4:	e7ec      	b.n	55d0 <deferred_work+0x18>
		if (cb->disconnected) {
    55f6:	6873      	ldr	r3, [r6, #4]
    55f8:	b11b      	cbz	r3, 5602 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    55fa:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    55fe:	4628      	mov	r0, r5
    5600:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    5602:	3614      	adds	r6, #20
    5604:	e7e7      	b.n	55d6 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    5606:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    560a:	2b01      	cmp	r3, #1
    560c:	d12f      	bne.n	566e <deferred_work+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    560e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    5612:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
    5616:	e856 3f00 	ldrex	r3, [r6]
    561a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    561e:	e846 2100 	strex	r1, r2, [r6]
    5622:	2900      	cmp	r1, #0
    5624:	d1f7      	bne.n	5616 <deferred_work+0x5e>
    5626:	f3bf 8f5b 	dmb	ish
    562a:	059b      	lsls	r3, r3, #22
    562c:	d521      	bpl.n	5672 <deferred_work+0xba>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    562e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    5632:	f8ad 3000 	strh.w	r3, [sp]
    5636:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    563a:	f8ad 3002 	strh.w	r3, [sp, #2]
    563e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    5642:	f8ad 3004 	strh.w	r3, [sp, #4]
    5646:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    564a:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    564e:	4669      	mov	r1, sp
    5650:	4628      	mov	r0, r5
    5652:	f7ff ff7b 	bl	554c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5656:	f3bf 8f5b 	dmb	ish
    565a:	e856 3f00 	ldrex	r3, [r6]
    565e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5662:	e846 3200 	strex	r2, r3, [r6]
    5666:	2a00      	cmp	r2, #0
    5668:	d1f7      	bne.n	565a <deferred_work+0xa2>
    566a:	f3bf 8f5b 	dmb	ish
}
    566e:	b003      	add	sp, #12
    5670:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
    5672:	4a06      	ldr	r2, [pc, #24]	; (568c <deferred_work+0xd4>)
    5674:	6810      	ldr	r0, [r2, #0]
    5676:	6851      	ldr	r1, [r2, #4]
    5678:	466b      	mov	r3, sp
    567a:	c303      	stmia	r3!, {r0, r1}
    567c:	e7e7      	b.n	564e <deferred_work+0x96>
    567e:	bf00      	nop
    5680:	20001410 	.word	0x20001410
    5684:	0001c95c 	.word	0x0001c95c
    5688:	0001c95c 	.word	0x0001c95c
    568c:	0001ca56 	.word	0x0001ca56

00005690 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    5690:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    5692:	4801      	ldr	r0, [pc, #4]	; (5698 <bt_conn_create_frag_timeout+0x8>)
    5694:	f7ff be60 	b.w	5358 <bt_conn_create_pdu_timeout>
    5698:	20000924 	.word	0x20000924

0000569c <create_frag>:
{
    569c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56a0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    56a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    56a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    56aa:	2000      	movs	r0, #0
{
    56ac:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    56ae:	f7ff ffef 	bl	5690 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    56b2:	7ab3      	ldrb	r3, [r6, #10]
    56b4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    56b6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    56b8:	f04f 0600 	mov.w	r6, #0
    56bc:	d005      	beq.n	56ca <create_frag+0x2e>
		net_buf_unref(frag);
    56be:	f00e fe4f 	bl	14360 <net_buf_unref>
		return NULL;
    56c2:	4635      	mov	r5, r6
}
    56c4:	4628      	mov	r0, r5
    56c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    56ca:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    56cc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    56d0:	4e0c      	ldr	r6, [pc, #48]	; (5704 <create_frag+0x68>)
    56d2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    56d4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    56d8:	f015 fba8 	bl	1ae2c <net_buf_simple_tailroom>
    56dc:	4580      	cmp	r8, r0
    56de:	d20c      	bcs.n	56fa <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    56e0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    56e4:	f854 1f08 	ldr.w	r1, [r4, #8]!
    56e8:	4632      	mov	r2, r6
    56ea:	4638      	mov	r0, r7
    56ec:	f015 fb69 	bl	1adc2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    56f0:	4631      	mov	r1, r6
    56f2:	4620      	mov	r0, r4
    56f4:	f015 fb7e 	bl	1adf4 <net_buf_simple_pull>
    56f8:	e7e4      	b.n	56c4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    56fa:	4638      	mov	r0, r7
    56fc:	f015 fb96 	bl	1ae2c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    5700:	b286      	uxth	r6, r0
    5702:	e7ef      	b.n	56e4 <create_frag+0x48>
    5704:	20000000 	.word	0x20000000

00005708 <bt_conn_process_tx>:
{
    5708:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    570a:	7a83      	ldrb	r3, [r0, #10]
{
    570c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    570e:	b993      	cbnz	r3, 5736 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5710:	f3bf 8f5b 	dmb	ish
    5714:	1d03      	adds	r3, r0, #4
    5716:	e853 2f00 	ldrex	r2, [r3]
    571a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    571e:	e843 1500 	strex	r5, r1, [r3]
    5722:	2d00      	cmp	r5, #0
    5724:	d1f7      	bne.n	5716 <bt_conn_process_tx+0xe>
    5726:	f3bf 8f5b 	dmb	ish
    572a:	0653      	lsls	r3, r2, #25
    572c:	d503      	bpl.n	5736 <bt_conn_process_tx+0x2e>
}
    572e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    5732:	f014 b874 	b.w	1981e <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    5736:	2200      	movs	r2, #0
    5738:	2300      	movs	r3, #0
    573a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    573e:	f015 fadd 	bl	1acfc <net_buf_get>
	BT_ASSERT(buf);
    5742:	4605      	mov	r5, r0
    5744:	b960      	cbnz	r0, 5760 <bt_conn_process_tx+0x58>
    5746:	4a1f      	ldr	r2, [pc, #124]	; (57c4 <bt_conn_process_tx+0xbc>)
    5748:	491f      	ldr	r1, [pc, #124]	; (57c8 <bt_conn_process_tx+0xc0>)
    574a:	4820      	ldr	r0, [pc, #128]	; (57cc <bt_conn_process_tx+0xc4>)
    574c:	f240 23e7 	movw	r3, #743	; 0x2e7
    5750:	f012 fd0a 	bl	18168 <printk>
    5754:	4040      	eors	r0, r0
    5756:	f380 8811 	msr	BASEPRI, r0
    575a:	f04f 0003 	mov.w	r0, #3
    575e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    5760:	4e1b      	ldr	r6, [pc, #108]	; (57d0 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
    5762:	89aa      	ldrh	r2, [r5, #12]
    5764:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    5768:	429a      	cmp	r2, r3
    576a:	d807      	bhi.n	577c <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    576c:	2300      	movs	r3, #0
    576e:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    5770:	4629      	mov	r1, r5
    5772:	4620      	mov	r0, r4
    5774:	f7ff fc00 	bl	4f78 <send_frag>
	if (!send_buf(conn, buf)) {
    5778:	b130      	cbz	r0, 5788 <bt_conn_process_tx+0x80>
}
    577a:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    577c:	4629      	mov	r1, r5
    577e:	4620      	mov	r0, r4
    5780:	f7ff ff8c 	bl	569c <create_frag>
	if (!frag) {
    5784:	4601      	mov	r1, r0
    5786:	b920      	cbnz	r0, 5792 <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
    5788:	4628      	mov	r0, r5
}
    578a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    578e:	f00e bde7 	b.w	14360 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    5792:	2301      	movs	r3, #1
    5794:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    5796:	4620      	mov	r0, r4
    5798:	f7ff fbee 	bl	4f78 <send_frag>
    579c:	2800      	cmp	r0, #0
    579e:	d0f3      	beq.n	5788 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
    57a0:	89aa      	ldrh	r2, [r5, #12]
    57a2:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    57a6:	429a      	cmp	r2, r3
    57a8:	d802      	bhi.n	57b0 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
    57aa:	2300      	movs	r3, #0
    57ac:	2203      	movs	r2, #3
    57ae:	e7df      	b.n	5770 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    57b0:	4629      	mov	r1, r5
    57b2:	4620      	mov	r0, r4
    57b4:	f7ff ff72 	bl	569c <create_frag>
		if (!frag) {
    57b8:	4601      	mov	r1, r0
    57ba:	2800      	cmp	r0, #0
    57bc:	d0e4      	beq.n	5788 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    57be:	2301      	movs	r3, #1
    57c0:	461a      	mov	r2, r3
    57c2:	e7e8      	b.n	5796 <bt_conn_process_tx+0x8e>
    57c4:	0001e1c4 	.word	0x0001e1c4
    57c8:	0001e12e 	.word	0x0001e12e
    57cc:	0001e0f1 	.word	0x0001e0f1
    57d0:	20000000 	.word	0x20000000

000057d4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    57d4:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    57d6:	490b      	ldr	r1, [pc, #44]	; (5804 <bt_conn_init+0x30>)
    57d8:	480b      	ldr	r0, [pc, #44]	; (5808 <bt_conn_init+0x34>)
    57da:	f016 faf3 	bl	1bdc4 <k_queue_append>
    57de:	490b      	ldr	r1, [pc, #44]	; (580c <bt_conn_init+0x38>)
    57e0:	4809      	ldr	r0, [pc, #36]	; (5808 <bt_conn_init+0x34>)
    57e2:	f016 faef 	bl	1bdc4 <k_queue_append>
    57e6:	490a      	ldr	r1, [pc, #40]	; (5810 <bt_conn_init+0x3c>)
    57e8:	4807      	ldr	r0, [pc, #28]	; (5808 <bt_conn_init+0x34>)
    57ea:	f016 faeb 	bl	1bdc4 <k_queue_append>
	}

	bt_att_init();
    57ee:	f014 fe7a 	bl	1a4e6 <bt_att_init>

	err = bt_smp_init();
    57f2:	f015 fa7b 	bl	1acec <bt_smp_init>
	if (err) {
    57f6:	4604      	mov	r4, r0
    57f8:	b908      	cbnz	r0, 57fe <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    57fa:	f014 fa18 	bl	19c2e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    57fe:	4620      	mov	r0, r4
    5800:	bd10      	pop	{r4, pc}
    5802:	bf00      	nop
    5804:	20001414 	.word	0x20001414
    5808:	2000089c 	.word	0x2000089c
    580c:	20001424 	.word	0x20001424
    5810:	20001434 	.word	0x20001434

00005814 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    5814:	4b04      	ldr	r3, [pc, #16]	; (5828 <l2cap_accept+0x14>)
    5816:	6818      	ldr	r0, [r3, #0]
    5818:	b918      	cbnz	r0, 5822 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    581a:	4a04      	ldr	r2, [pc, #16]	; (582c <l2cap_accept+0x18>)
    581c:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    581e:	600b      	str	r3, [r1, #0]

		return 0;
    5820:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    5822:	f06f 000b 	mvn.w	r0, #11
}
    5826:	4770      	bx	lr
    5828:	20000b30 	.word	0x20000b30
    582c:	0001cbb4 	.word	0x0001cbb4

00005830 <bt_l2cap_connected>:
{
    5830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    5834:	4e29      	ldr	r6, [pc, #164]	; (58dc <bt_l2cap_connected+0xac>)
    5836:	4f2a      	ldr	r7, [pc, #168]	; (58e0 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    5838:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 58e4 <bt_l2cap_connected+0xb4>
{
    583c:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    583e:	42be      	cmp	r6, r7
    5840:	d302      	bcc.n	5848 <bt_l2cap_connected+0x18>
}
    5842:	b003      	add	sp, #12
    5844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    5848:	6873      	ldr	r3, [r6, #4]
    584a:	a901      	add	r1, sp, #4
    584c:	4620      	mov	r0, r4
    584e:	4798      	blx	r3
    5850:	2800      	cmp	r0, #0
    5852:	db3d      	blt.n	58d0 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    5854:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    5856:	8833      	ldrh	r3, [r6, #0]
    5858:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    585c:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    5860:	4641      	mov	r1, r8
    5862:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    5866:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    586a:	f016 fba2 	bl	1bfb2 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    586e:	f3bf 8f5b 	dmb	ish
    5872:	f105 0368 	add.w	r3, r5, #104	; 0x68
    5876:	2200      	movs	r2, #0
    5878:	e853 1f00 	ldrex	r1, [r3]
    587c:	e843 2000 	strex	r0, r2, [r3]
    5880:	2800      	cmp	r0, #0
    5882:	d1f9      	bne.n	5878 <bt_l2cap_connected+0x48>
    5884:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    5888:	60aa      	str	r2, [r5, #8]
	return list->tail;
    588a:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    588c:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    5890:	bb02      	cbnz	r2, 58d4 <bt_l2cap_connected+0xa4>
	list->head = node;
    5892:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    5896:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    5898:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    589a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    589c:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    58a0:	681b      	ldr	r3, [r3, #0]
    58a2:	b103      	cbz	r3, 58a6 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    58a4:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    58a6:	9b01      	ldr	r3, [sp, #4]
    58a8:	f3bf 8f5b 	dmb	ish
    58ac:	3368      	adds	r3, #104	; 0x68
    58ae:	e853 2f00 	ldrex	r2, [r3]
    58b2:	f042 0201 	orr.w	r2, r2, #1
    58b6:	e843 2100 	strex	r1, r2, [r3]
    58ba:	2900      	cmp	r1, #0
    58bc:	d1f7      	bne.n	58ae <bt_l2cap_connected+0x7e>
    58be:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    58c2:	9801      	ldr	r0, [sp, #4]
    58c4:	6843      	ldr	r3, [r0, #4]
    58c6:	699b      	ldr	r3, [r3, #24]
    58c8:	b113      	cbz	r3, 58d0 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    58ca:	f100 0168 	add.w	r1, r0, #104	; 0x68
    58ce:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    58d0:	360c      	adds	r6, #12
    58d2:	e7b4      	b.n	583e <bt_l2cap_connected+0xe>
	parent->next = child;
    58d4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    58d6:	6563      	str	r3, [r4, #84]	; 0x54
}
    58d8:	e7dd      	b.n	5896 <bt_l2cap_connected+0x66>
    58da:	bf00      	nop
    58dc:	0001c938 	.word	0x0001c938
    58e0:	0001c95c 	.word	0x0001c95c
    58e4:	00019af7 	.word	0x00019af7

000058e8 <bt_l2cap_update_conn_param>:
{
    58e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    58ea:	460d      	mov	r5, r1
	ident++;
    58ec:	4916      	ldr	r1, [pc, #88]	; (5948 <bt_l2cap_update_conn_param+0x60>)
    58ee:	780b      	ldrb	r3, [r1, #0]
    58f0:	3301      	adds	r3, #1
	if (!ident) {
    58f2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    58f6:	bf08      	it	eq
    58f8:	2301      	moveq	r3, #1
    58fa:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    58fc:	7809      	ldrb	r1, [r1, #0]
{
    58fe:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    5900:	2208      	movs	r2, #8
    5902:	2012      	movs	r0, #18
    5904:	f014 f8ae 	bl	19a64 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    5908:	4604      	mov	r4, r0
    590a:	b1d0      	cbz	r0, 5942 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    590c:	2108      	movs	r1, #8
    590e:	4408      	add	r0, r1
    5910:	f015 fa51 	bl	1adb6 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    5914:	882b      	ldrh	r3, [r5, #0]
    5916:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    5918:	886b      	ldrh	r3, [r5, #2]
    591a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    591c:	88ab      	ldrh	r3, [r5, #4]
    591e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    5920:	88eb      	ldrh	r3, [r5, #6]
    5922:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    5924:	2300      	movs	r3, #0
    5926:	9300      	str	r3, [sp, #0]
    5928:	4622      	mov	r2, r4
    592a:	2105      	movs	r1, #5
    592c:	4630      	mov	r0, r6
    592e:	f014 f903 	bl	19b38 <bt_l2cap_send_cb>
	if (err) {
    5932:	4605      	mov	r5, r0
    5934:	b110      	cbz	r0, 593c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    5936:	4620      	mov	r0, r4
    5938:	f00e fd12 	bl	14360 <net_buf_unref>
}
    593c:	4628      	mov	r0, r5
    593e:	b002      	add	sp, #8
    5940:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    5942:	f06f 050b 	mvn.w	r5, #11
    5946:	e7f9      	b.n	593c <bt_l2cap_update_conn_param+0x54>
    5948:	200027b3 	.word	0x200027b3

0000594c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    594c:	4b02      	ldr	r3, [pc, #8]	; (5958 <att_cfm_sent+0xc>)
    594e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    5952:	f014 b97f 	b.w	19c54 <att_sent>
    5956:	bf00      	nop
    5958:	0001a1b9 	.word	0x0001a1b9

0000595c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    595c:	4b02      	ldr	r3, [pc, #8]	; (5968 <att_rsp_sent+0xc>)
    595e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    5962:	f014 b977 	b.w	19c54 <att_sent>
    5966:	bf00      	nop
    5968:	0001a19d 	.word	0x0001a19d

0000596c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    596c:	4b02      	ldr	r3, [pc, #8]	; (5978 <att_req_sent+0xc>)
    596e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    5972:	f014 b96f 	b.w	19c54 <att_sent>
    5976:	bf00      	nop
    5978:	00019f6d 	.word	0x00019f6d

0000597c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    597c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    597e:	3808      	subs	r0, #8
    5980:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    5982:	a901      	add	r1, sp, #4
    5984:	4802      	ldr	r0, [pc, #8]	; (5990 <bt_att_released+0x14>)
    5986:	f016 f966 	bl	1bc56 <k_mem_slab_free>
}
    598a:	b003      	add	sp, #12
    598c:	f85d fb04 	ldr.w	pc, [sp], #4
    5990:	2000084c 	.word	0x2000084c

00005994 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    5994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    5996:	2300      	movs	r3, #0
{
    5998:	4607      	mov	r7, r0
    599a:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    599c:	481e      	ldr	r0, [pc, #120]	; (5a18 <bt_att_accept+0x84>)
    599e:	2200      	movs	r2, #0
    59a0:	4669      	mov	r1, sp
    59a2:	f011 fb2f 	bl	17004 <k_mem_slab_alloc>
    59a6:	4604      	mov	r4, r0
    59a8:	b120      	cbz	r0, 59b4 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    59aa:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    59ae:	4620      	mov	r0, r4
    59b0:	b003      	add	sp, #12
    59b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    59b4:	4601      	mov	r1, r0
    59b6:	222c      	movs	r2, #44	; 0x2c
    59b8:	9800      	ldr	r0, [sp, #0]
    59ba:	f013 fa2c 	bl	18e16 <memset>
	att->conn = conn;
    59be:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    59c0:	4816      	ldr	r0, [pc, #88]	; (5a1c <bt_att_accept+0x88>)
	list->tail = NULL;
    59c2:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    59c4:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    59c8:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    59cc:	2200      	movs	r2, #0
    59ce:	2300      	movs	r3, #0
    59d0:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    59d2:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    59d4:	f011 fb16 	bl	17004 <k_mem_slab_alloc>
    59d8:	4604      	mov	r4, r0
    59da:	2800      	cmp	r0, #0
    59dc:	d1e5      	bne.n	59aa <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    59de:	4601      	mov	r1, r0
    59e0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    59e4:	9801      	ldr	r0, [sp, #4]
    59e6:	f013 fa16 	bl	18e16 <memset>
	chan->chan.chan.ops = &ops;
    59ea:	9801      	ldr	r0, [sp, #4]
    59ec:	4b0c      	ldr	r3, [pc, #48]	; (5a20 <bt_att_accept+0x8c>)
    59ee:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    59f0:	30f8      	adds	r0, #248	; 0xf8
    59f2:	f016 f9db 	bl	1bdac <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    59f6:	9b01      	ldr	r3, [sp, #4]
    59f8:	f3bf 8f5b 	dmb	ish
    59fc:	33f0      	adds	r3, #240	; 0xf0
    59fe:	e853 2f00 	ldrex	r2, [r3]
    5a02:	e843 4100 	strex	r1, r4, [r3]
    5a06:	2900      	cmp	r1, #0
    5a08:	d1f9      	bne.n	59fe <bt_att_accept+0x6a>
    5a0a:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    5a0e:	9b01      	ldr	r3, [sp, #4]
    5a10:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    5a14:	6033      	str	r3, [r6, #0]
	return 0;
    5a16:	e7ca      	b.n	59ae <bt_att_accept+0x1a>
    5a18:	20000830 	.word	0x20000830
    5a1c:	2000084c 	.word	0x2000084c
    5a20:	200001e8 	.word	0x200001e8

00005a24 <read_group_cb>:
{
    5a24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    5a28:	4605      	mov	r5, r0
    5a2a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5a2c:	f04f 0800 	mov.w	r8, #0
    5a30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5a34:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    5a36:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5a38:	f88d 8008 	strb.w	r8, [sp, #8]
    5a3c:	a902      	add	r1, sp, #8
{
    5a3e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5a40:	f8ad 300a 	strh.w	r3, [sp, #10]
    5a44:	f013 fa45 	bl	18ed2 <bt_uuid_cmp>
    5a48:	b1a0      	cbz	r0, 5a74 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    5a4a:	f642 0301 	movw	r3, #10241	; 0x2801
    5a4e:	6828      	ldr	r0, [r5, #0]
    5a50:	f88d 800c 	strb.w	r8, [sp, #12]
    5a54:	a903      	add	r1, sp, #12
    5a56:	f8ad 300e 	strh.w	r3, [sp, #14]
    5a5a:	f013 fa3a 	bl	18ed2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    5a5e:	b148      	cbz	r0, 5a74 <read_group_cb+0x50>
		if (data->group &&
    5a60:	6923      	ldr	r3, [r4, #16]
    5a62:	b11b      	cbz	r3, 5a6c <read_group_cb+0x48>
    5a64:	885a      	ldrh	r2, [r3, #2]
    5a66:	42b2      	cmp	r2, r6
    5a68:	d200      	bcs.n	5a6c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    5a6a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    5a6c:	2001      	movs	r0, #1
}
    5a6e:	b004      	add	sp, #16
    5a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5a74:	6861      	ldr	r1, [r4, #4]
    5a76:	6828      	ldr	r0, [r5, #0]
    5a78:	f013 fa2b 	bl	18ed2 <bt_uuid_cmp>
    5a7c:	b110      	cbz	r0, 5a84 <read_group_cb+0x60>
		data->group = NULL;
    5a7e:	2300      	movs	r3, #0
    5a80:	6123      	str	r3, [r4, #16]
    5a82:	e7f3      	b.n	5a6c <read_group_cb+0x48>
	if (data->rsp->len &&
    5a84:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    5a86:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    5a88:	781a      	ldrb	r2, [r3, #0]
    5a8a:	b13a      	cbz	r2, 5a9c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    5a8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    5a90:	8981      	ldrh	r1, [r0, #12]
    5a92:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    5a94:	4293      	cmp	r3, r2
    5a96:	da01      	bge.n	5a9c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    5a98:	2000      	movs	r0, #0
    5a9a:	e7e8      	b.n	5a6e <read_group_cb+0x4a>
    5a9c:	2104      	movs	r1, #4
    5a9e:	3008      	adds	r0, #8
    5aa0:	f015 f989 	bl	1adb6 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    5aa4:	4b09      	ldr	r3, [pc, #36]	; (5acc <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    5aa6:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    5aa8:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    5aaa:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    5aac:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    5aae:	4629      	mov	r1, r5
    5ab0:	9300      	str	r3, [sp, #0]
    5ab2:	9401      	str	r4, [sp, #4]
    5ab4:	2300      	movs	r3, #0
    5ab6:	4638      	mov	r0, r7
    5ab8:	f014 fa95 	bl	19fe6 <att_chan_read>
	if (read < 0) {
    5abc:	2800      	cmp	r0, #0
    5abe:	dbeb      	blt.n	5a98 <read_group_cb+0x74>
	if (!data->group) {
    5ac0:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    5ac2:	3800      	subs	r0, #0
    5ac4:	bf18      	it	ne
    5ac6:	2001      	movne	r0, #1
    5ac8:	e7d1      	b.n	5a6e <read_group_cb+0x4a>
    5aca:	bf00      	nop
    5acc:	00019f21 	.word	0x00019f21

00005ad0 <chan_send>:
{
    5ad0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    5ad4:	688b      	ldr	r3, [r1, #8]
    5ad6:	781b      	ldrb	r3, [r3, #0]
    5ad8:	2bd2      	cmp	r3, #210	; 0xd2
{
    5ada:	4606      	mov	r6, r0
    5adc:	460c      	mov	r4, r1
    5ade:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    5ae0:	d10c      	bne.n	5afc <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
    5ae2:	6803      	ldr	r3, [r0, #0]
    5ae4:	6818      	ldr	r0, [r3, #0]
    5ae6:	f015 f8fe 	bl	1ace6 <bt_smp_sign>
		if (err) {
    5aea:	4605      	mov	r5, r0
    5aec:	b130      	cbz	r0, 5afc <chan_send+0x2c>
			net_buf_unref(buf);
    5aee:	4620      	mov	r0, r4
    5af0:	f00e fc36 	bl	14360 <net_buf_unref>
}
    5af4:	4628      	mov	r0, r5
    5af6:	b003      	add	sp, #12
    5af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    5afc:	f104 0008 	add.w	r0, r4, #8
    5b00:	f015 f990 	bl	1ae24 <net_buf_simple_headroom>
	state->len = buf->len;
    5b04:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    5b08:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    5b0a:	b957      	cbnz	r7, 5b22 <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
    5b0c:	68a3      	ldr	r3, [r4, #8]
    5b0e:	7818      	ldrb	r0, [r3, #0]
    5b10:	f014 f8b8 	bl	19c84 <att_op_get_type>
    5b14:	3801      	subs	r0, #1
    5b16:	b2c0      	uxtb	r0, r0
    5b18:	2804      	cmp	r0, #4
    5b1a:	bf9c      	itt	ls
    5b1c:	4b13      	ldrls	r3, [pc, #76]	; (5b6c <chan_send+0x9c>)
    5b1e:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    5b22:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    5b24:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    5b28:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    5b2a:	4b11      	ldr	r3, [pc, #68]	; (5b70 <chan_send+0xa0>)
    5b2c:	429f      	cmp	r7, r3
    5b2e:	d018      	beq.n	5b62 <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
    5b30:	4b10      	ldr	r3, [pc, #64]	; (5b74 <chan_send+0xa4>)
    5b32:	429f      	cmp	r7, r3
    5b34:	d017      	beq.n	5b66 <chan_send+0x96>
		return att_sent;
    5b36:	4910      	ldr	r1, [pc, #64]	; (5b78 <chan_send+0xa8>)
    5b38:	4b10      	ldr	r3, [pc, #64]	; (5b7c <chan_send+0xac>)
    5b3a:	4a11      	ldr	r2, [pc, #68]	; (5b80 <chan_send+0xb0>)
    5b3c:	428f      	cmp	r7, r1
    5b3e:	bf18      	it	ne
    5b40:	4613      	movne	r3, r2
			       &chan->chan.chan);
    5b42:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    5b44:	9600      	str	r6, [sp, #0]
    5b46:	4622      	mov	r2, r4
    5b48:	2104      	movs	r1, #4
    5b4a:	f013 fff5 	bl	19b38 <bt_l2cap_send_cb>
	if (err) {
    5b4e:	4605      	mov	r5, r0
    5b50:	2800      	cmp	r0, #0
    5b52:	d0cf      	beq.n	5af4 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
    5b54:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5b56:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5b5a:	fa10 f088 	uxtah	r0, r0, r8
    5b5e:	60a0      	str	r0, [r4, #8]
}
    5b60:	e7c8      	b.n	5af4 <chan_send+0x24>
		return att_rsp_sent;
    5b62:	4b08      	ldr	r3, [pc, #32]	; (5b84 <chan_send+0xb4>)
    5b64:	e7ed      	b.n	5b42 <chan_send+0x72>
		return att_cfm_sent;
    5b66:	4b08      	ldr	r3, [pc, #32]	; (5b88 <chan_send+0xb8>)
    5b68:	e7eb      	b.n	5b42 <chan_send+0x72>
    5b6a:	bf00      	nop
    5b6c:	0001cbd8 	.word	0x0001cbd8
    5b70:	0001a19d 	.word	0x0001a19d
    5b74:	0001a1b9 	.word	0x0001a1b9
    5b78:	00019f6d 	.word	0x00019f6d
    5b7c:	0000596d 	.word	0x0000596d
    5b80:	00019c55 	.word	0x00019c55
    5b84:	0000595d 	.word	0x0000595d
    5b88:	0000594d 	.word	0x0000594d

00005b8c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    5b8c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    5b8e:	4a07      	ldr	r2, [pc, #28]	; (5bac <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    5b90:	4604      	mov	r4, r0
    5b92:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    5b94:	f7ff ff9c 	bl	5ad0 <chan_send>
	if (err) {
    5b98:	b130      	cbz	r0, 5ba8 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    5b9a:	4629      	mov	r1, r5
    5b9c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
    5ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    5ba4:	f015 b8c8 	b.w	1ad38 <net_buf_put>
}
    5ba8:	bd38      	pop	{r3, r4, r5, pc}
    5baa:	bf00      	nop
    5bac:	0001a19d 	.word	0x0001a19d

00005bb0 <read_type_cb>:
{
    5bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    5bb4:	f8d2 8000 	ldr.w	r8, [r2]
{
    5bb8:	4606      	mov	r6, r0
    5bba:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5bbc:	6800      	ldr	r0, [r0, #0]
    5bbe:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    5bc0:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    5bc4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    5bc6:	f013 f984 	bl	18ed2 <bt_uuid_cmp>
    5bca:	4607      	mov	r7, r0
    5bcc:	2800      	cmp	r0, #0
    5bce:	d13e      	bne.n	5c4e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    5bd0:	4628      	mov	r0, r5
    5bd2:	2215      	movs	r2, #21
    5bd4:	4631      	mov	r1, r6
    5bd6:	f014 ffd7 	bl	1ab88 <bt_gatt_check_perm>
    5bda:	4605      	mov	r5, r0
    5bdc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    5bde:	b148      	cbz	r0, 5bf4 <read_type_cb+0x44>
		if (data->rsp->len) {
    5be0:	68e3      	ldr	r3, [r4, #12]
    5be2:	781b      	ldrb	r3, [r3, #0]
    5be4:	b923      	cbnz	r3, 5bf0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    5be6:	2500      	movs	r5, #0
}
    5be8:	4628      	mov	r0, r5
    5bea:	b003      	add	sp, #12
    5bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    5bf0:	7527      	strb	r7, [r4, #20]
    5bf2:	e7f8      	b.n	5be6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    5bf4:	68a0      	ldr	r0, [r4, #8]
    5bf6:	f015 f8b0 	bl	1ad5a <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    5bfa:	2102      	movs	r1, #2
    5bfc:	3008      	adds	r0, #8
    5bfe:	f015 f8da 	bl	1adb6 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    5c02:	4b14      	ldr	r3, [pc, #80]	; (5c54 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    5c04:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    5c06:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    5c08:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    5c0c:	4631      	mov	r1, r6
    5c0e:	9300      	str	r3, [sp, #0]
    5c10:	9401      	str	r4, [sp, #4]
    5c12:	462b      	mov	r3, r5
    5c14:	4640      	mov	r0, r8
    5c16:	f014 f9e6 	bl	19fe6 <att_chan_read>
	if (read < 0) {
    5c1a:	2800      	cmp	r0, #0
    5c1c:	da07      	bge.n	5c2e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    5c1e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    5c22:	bf26      	itte	cs
    5c24:	4240      	negcs	r0, r0
    5c26:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    5c28:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    5c2a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    5c2c:	e7dc      	b.n	5be8 <read_type_cb+0x38>
	if (!data->item) {
    5c2e:	6923      	ldr	r3, [r4, #16]
    5c30:	2b00      	cmp	r3, #0
    5c32:	d0d8      	beq.n	5be6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    5c34:	68a0      	ldr	r0, [r4, #8]
    5c36:	f014 f805 	bl	19c44 <net_buf_frags_len>
    5c3a:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5c3e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    5c40:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    5c42:	7818      	ldrb	r0, [r3, #0]
    5c44:	4285      	cmp	r5, r0
    5c46:	bf94      	ite	ls
    5c48:	2500      	movls	r5, #0
    5c4a:	2501      	movhi	r5, #1
    5c4c:	e7cc      	b.n	5be8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    5c4e:	2501      	movs	r5, #1
    5c50:	e7ca      	b.n	5be8 <read_type_cb+0x38>
    5c52:	bf00      	nop
    5c54:	00019c61 	.word	0x00019c61

00005c58 <bt_att_connected>:
{
    5c58:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5c5a:	4606      	mov	r6, r0
{
    5c5c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    5c5e:	2104      	movs	r1, #4
    5c60:	f856 0908 	ldr.w	r0, [r6], #-8
    5c64:	f013 ffb2 	bl	19bcc <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    5c68:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    5c6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5c6e:	b91b      	cbnz	r3, 5c78 <bt_att_connected+0x20>
    5c70:	f105 000c 	add.w	r0, r5, #12
    5c74:	f016 f89a 	bl	1bdac <z_impl_k_queue_init>
	parent->next = child;
    5c78:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5c7a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    5c7e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    5c80:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    5c84:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    5c86:	b902      	cbnz	r2, 5c8a <bt_att_connected+0x32>
	list->tail = node;
    5c88:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5c8a:	f3bf 8f5b 	dmb	ish
    5c8e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5c92:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    5c96:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5c98:	bf58      	it	pl
    5c9a:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    5c9c:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5c9e:	bf5c      	itt	pl
    5ca0:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    5ca4:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    5ca8:	f014 f904 	bl	19eb4 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    5cac:	f504 7084 	add.w	r0, r4, #264	; 0x108
    5cb0:	4902      	ldr	r1, [pc, #8]	; (5cbc <bt_att_connected+0x64>)
}
    5cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    5cb6:	f016 b97c 	b.w	1bfb2 <k_work_init_delayable>
    5cba:	bf00      	nop
    5cbc:	0001a4f5 	.word	0x0001a4f5

00005cc0 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    5cc0:	898b      	ldrh	r3, [r1, #12]
{
    5cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cc6:	4604      	mov	r4, r0
    5cc8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    5cca:	2b00      	cmp	r3, #0
    5ccc:	d060      	beq.n	5d90 <bt_att_recv+0xd0>
	return net_buf_simple_pull_mem(&buf->b, len);
    5cce:	2101      	movs	r1, #1
    5cd0:	f105 0008 	add.w	r0, r5, #8
    5cd4:	f015 f896 	bl	1ae04 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    5cd8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5cdc:	4607      	mov	r7, r0
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d056      	beq.n	5d90 <bt_att_recv+0xd0>
		if (hdr->code == handlers[i].op) {
    5ce2:	7801      	ldrb	r1, [r0, #0]
    5ce4:	4a2e      	ldr	r2, [pc, #184]	; (5da0 <bt_att_recv+0xe0>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    5ce6:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5cea:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    5cec:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    5cf0:	4288      	cmp	r0, r1
    5cf2:	d11b      	bne.n	5d2c <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
    5cf4:	00d9      	lsls	r1, r3, #3
    5cf6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5cfa:	f893 8002 	ldrb.w	r8, [r3, #2]
    5cfe:	f1b8 0f01 	cmp.w	r8, #1
    5d02:	d023      	beq.n	5d4c <bt_att_recv+0x8c>
		} else if (handler->type == ATT_INDICATION &&
    5d04:	f1b8 0f05 	cmp.w	r8, #5
    5d08:	d131      	bne.n	5d6e <bt_att_recv+0xae>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5d0a:	f3bf 8f5b 	dmb	ish
    5d0e:	34e8      	adds	r4, #232	; 0xe8
    5d10:	e854 3f00 	ldrex	r3, [r4]
    5d14:	f043 0002 	orr.w	r0, r3, #2
    5d18:	e844 0c00 	strex	ip, r0, [r4]
    5d1c:	f1bc 0f00 	cmp.w	ip, #0
    5d20:	d1f6      	bne.n	5d10 <bt_att_recv+0x50>
    5d22:	f3bf 8f5b 	dmb	ish
    5d26:	f013 0f02 	tst.w	r3, #2
    5d2a:	e01f      	b.n	5d6c <bt_att_recv+0xac>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5d2c:	3301      	adds	r3, #1
    5d2e:	2b0d      	cmp	r3, #13
    5d30:	d1dc      	bne.n	5cec <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    5d32:	4608      	mov	r0, r1
    5d34:	f013 ffa6 	bl	19c84 <att_op_get_type>
    5d38:	b350      	cbz	r0, 5d90 <bt_att_recv+0xd0>
    5d3a:	2805      	cmp	r0, #5
    5d3c:	d028      	beq.n	5d90 <bt_att_recv+0xd0>
	if (!req) {
    5d3e:	b339      	cbz	r1, 5d90 <bt_att_recv+0xd0>
    5d40:	2306      	movs	r3, #6
    5d42:	2200      	movs	r2, #0
    5d44:	4630      	mov	r0, r6
    5d46:	f014 fb1d 	bl	1a384 <send_err_rsp.part.0>
    5d4a:	e021      	b.n	5d90 <bt_att_recv+0xd0>
    5d4c:	34e8      	adds	r4, #232	; 0xe8
    5d4e:	f3bf 8f5b 	dmb	ish
    5d52:	e854 3f00 	ldrex	r3, [r4]
    5d56:	f043 0001 	orr.w	r0, r3, #1
    5d5a:	e844 0c00 	strex	ip, r0, [r4]
    5d5e:	f1bc 0f00 	cmp.w	ip, #0
    5d62:	d1f6      	bne.n	5d52 <bt_att_recv+0x92>
    5d64:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    5d68:	f013 0f01 	tst.w	r3, #1
    5d6c:	d110      	bne.n	5d90 <bt_att_recv+0xd0>
	if (buf->len < handler->expect_len) {
    5d6e:	440a      	add	r2, r1
    5d70:	89a9      	ldrh	r1, [r5, #12]
    5d72:	7853      	ldrb	r3, [r2, #1]
    5d74:	4299      	cmp	r1, r3
    5d76:	d30e      	bcc.n	5d96 <bt_att_recv+0xd6>
		err = handler->func(att_chan, buf);
    5d78:	6853      	ldr	r3, [r2, #4]
    5d7a:	4629      	mov	r1, r5
    5d7c:	4630      	mov	r0, r6
    5d7e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    5d80:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    5d84:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    5d86:	d103      	bne.n	5d90 <bt_att_recv+0xd0>
    5d88:	b110      	cbz	r0, 5d90 <bt_att_recv+0xd0>
		send_err_rsp(att_chan, hdr->code, 0, err);
    5d8a:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    5d8c:	2900      	cmp	r1, #0
    5d8e:	d1d8      	bne.n	5d42 <bt_att_recv+0x82>
}
    5d90:	2000      	movs	r0, #0
    5d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
    5d96:	f1b8 0f01 	cmp.w	r8, #1
    5d9a:	d1f9      	bne.n	5d90 <bt_att_recv+0xd0>
		err = BT_ATT_ERR_INVALID_PDU;
    5d9c:	2304      	movs	r3, #4
    5d9e:	e7f4      	b.n	5d8a <bt_att_recv+0xca>
    5da0:	0001cbec 	.word	0x0001cbec

00005da4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    5da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5da8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    5daa:	6803      	ldr	r3, [r0, #0]
    5dac:	460e      	mov	r6, r1
    5dae:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    5db0:	b087      	sub	sp, #28
    5db2:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    5db4:	bf18      	it	ne
    5db6:	2101      	movne	r1, #1
    5db8:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    5dba:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    5dbc:	f014 ff3b 	bl	1ac36 <bt_gatt_change_aware>
    5dc0:	2800      	cmp	r0, #0
    5dc2:	d04a      	beq.n	5e5a <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
    5dc4:	2f00      	cmp	r7, #0
    5dc6:	d04a      	beq.n	5e5e <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
    5dc8:	2218      	movs	r2, #24
    5dca:	2100      	movs	r1, #0
    5dcc:	4668      	mov	r0, sp
    5dce:	f013 f822 	bl	18e16 <memset>
	if (rsp) {
    5dd2:	f1b8 0f00 	cmp.w	r8, #0
    5dd6:	d122      	bne.n	5e1e <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    5dd8:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5dda:	4a22      	ldr	r2, [pc, #136]	; (5e64 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    5ddc:	681b      	ldr	r3, [r3, #0]
    5dde:	9300      	str	r3, [sp, #0]
	data.value = value;
    5de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5de2:	9303      	str	r3, [sp, #12]
	data.len = len;
    5de4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    5de8:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    5dec:	2301      	movs	r3, #1
    5dee:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    5df2:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5df6:	466b      	mov	r3, sp
    5df8:	4639      	mov	r1, r7
    5dfa:	4638      	mov	r0, r7
	data.req = req;
    5dfc:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    5e00:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    5e04:	f013 ff6b 	bl	19cde <bt_gatt_foreach_attr>
	if (data.err) {
    5e08:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5e0c:	b1f4      	cbz	r4, 5e4c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    5e0e:	f1b8 0f00 	cmp.w	r8, #0
    5e12:	d10e      	bne.n	5e32 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5e14:	2400      	movs	r4, #0
}
    5e16:	4620      	mov	r0, r4
    5e18:	b007      	add	sp, #28
    5e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    5e1e:	2200      	movs	r2, #0
    5e20:	4641      	mov	r1, r8
    5e22:	4628      	mov	r0, r5
    5e24:	f014 fa89 	bl	1a33a <bt_att_chan_create_pdu>
    5e28:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    5e2a:	2800      	cmp	r0, #0
    5e2c:	d1d4      	bne.n	5dd8 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    5e2e:	240e      	movs	r4, #14
    5e30:	e7f1      	b.n	5e16 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    5e32:	9801      	ldr	r0, [sp, #4]
    5e34:	f00e fa94 	bl	14360 <net_buf_unref>
	if (!req) {
    5e38:	2e00      	cmp	r6, #0
    5e3a:	d0eb      	beq.n	5e14 <att_write_rsp.constprop.0+0x70>
    5e3c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5e40:	463a      	mov	r2, r7
    5e42:	4631      	mov	r1, r6
    5e44:	4628      	mov	r0, r5
    5e46:	f014 fa9d 	bl	1a384 <send_err_rsp.part.0>
    5e4a:	e7e3      	b.n	5e14 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    5e4c:	9901      	ldr	r1, [sp, #4]
    5e4e:	2900      	cmp	r1, #0
    5e50:	d0e0      	beq.n	5e14 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    5e52:	4628      	mov	r0, r5
    5e54:	f7ff fe9a 	bl	5b8c <bt_att_chan_send_rsp.constprop.0>
    5e58:	e7dd      	b.n	5e16 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    5e5a:	2412      	movs	r4, #18
    5e5c:	e7db      	b.n	5e16 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    5e5e:	2401      	movs	r4, #1
    5e60:	e7d9      	b.n	5e16 <att_write_rsp.constprop.0+0x72>
    5e62:	bf00      	nop
    5e64:	00019f83 	.word	0x00019f83

00005e68 <att_read_group_req>:
{
    5e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    5e6c:	898c      	ldrh	r4, [r1, #12]
    5e6e:	3c04      	subs	r4, #4
    5e70:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    5e72:	2c02      	cmp	r4, #2
{
    5e74:	4605      	mov	r5, r0
    5e76:	b08c      	sub	sp, #48	; 0x30
    5e78:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    5e7a:	d001      	beq.n	5e80 <att_read_group_req+0x18>
    5e7c:	2c10      	cmp	r4, #16
    5e7e:	d16e      	bne.n	5f5e <att_read_group_req+0xf6>
    5e80:	2104      	movs	r1, #4
    5e82:	3008      	adds	r0, #8
    5e84:	f014 ffbe 	bl	1ae04 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    5e88:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    5e8c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5e8e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    5e90:	1d01      	adds	r1, r0, #4
    5e92:	4622      	mov	r2, r4
    5e94:	4640      	mov	r0, r8
    5e96:	f013 f84a 	bl	18f2e <bt_uuid_create>
    5e9a:	2800      	cmp	r0, #0
    5e9c:	d061      	beq.n	5f62 <att_read_group_req+0xfa>
	if (!start || !end) {
    5e9e:	2e00      	cmp	r6, #0
    5ea0:	d03a      	beq.n	5f18 <att_read_group_req+0xb0>
    5ea2:	2400      	movs	r4, #0
    5ea4:	2f00      	cmp	r7, #0
    5ea6:	d036      	beq.n	5f16 <att_read_group_req+0xae>
	if (start > end) {
    5ea8:	42be      	cmp	r6, r7
    5eaa:	d835      	bhi.n	5f18 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5eac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5eb0:	a901      	add	r1, sp, #4
    5eb2:	4640      	mov	r0, r8
    5eb4:	f88d 4004 	strb.w	r4, [sp, #4]
    5eb8:	f8ad 3006 	strh.w	r3, [sp, #6]
    5ebc:	f013 f809 	bl	18ed2 <bt_uuid_cmp>
    5ec0:	2800      	cmp	r0, #0
    5ec2:	d134      	bne.n	5f2e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    5ec4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    5ec6:	2214      	movs	r2, #20
    5ec8:	2100      	movs	r1, #0
    5eca:	a807      	add	r0, sp, #28
    5ecc:	f012 ffa3 	bl	18e16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5ed0:	2201      	movs	r2, #1
    5ed2:	2111      	movs	r1, #17
    5ed4:	4620      	mov	r0, r4
    5ed6:	f014 fa98 	bl	1a40a <bt_att_create_pdu>
    5eda:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    5edc:	2800      	cmp	r0, #0
    5ede:	d040      	beq.n	5f62 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    5ee0:	2101      	movs	r1, #1
    5ee2:	3008      	adds	r0, #8
	data.uuid = uuid;
    5ee4:	e9cd 5807 	strd	r5, r8, [sp, #28]
    5ee8:	f014 ff65 	bl	1adb6 <net_buf_simple_add>
	data.rsp->len = 0U;
    5eec:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5ef0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5ef2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    5ef4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5ef8:	4a1b      	ldr	r2, [pc, #108]	; (5f68 <att_read_group_req+0x100>)
	data.group = NULL;
    5efa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5efe:	4639      	mov	r1, r7
    5f00:	4630      	mov	r0, r6
    5f02:	f013 feec 	bl	19cde <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    5f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5f08:	781c      	ldrb	r4, [r3, #0]
    5f0a:	bb1c      	cbnz	r4, 5f54 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    5f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    5f0e:	f00e fa27 	bl	14360 <net_buf_unref>
	if (!req) {
    5f12:	230a      	movs	r3, #10
    5f14:	e018      	b.n	5f48 <att_read_group_req+0xe0>
			*err = 0U;
    5f16:	463e      	mov	r6, r7
	if (!req) {
    5f18:	2301      	movs	r3, #1
    5f1a:	4632      	mov	r2, r6
    5f1c:	2110      	movs	r1, #16
    5f1e:	4628      	mov	r0, r5
    5f20:	f014 fa30 	bl	1a384 <send_err_rsp.part.0>
		return 0;
    5f24:	2400      	movs	r4, #0
}
    5f26:	4620      	mov	r0, r4
    5f28:	b00c      	add	sp, #48	; 0x30
    5f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    5f2e:	f642 0301 	movw	r3, #10241	; 0x2801
    5f32:	a907      	add	r1, sp, #28
    5f34:	4640      	mov	r0, r8
    5f36:	f88d 401c 	strb.w	r4, [sp, #28]
    5f3a:	f8ad 301e 	strh.w	r3, [sp, #30]
    5f3e:	f012 ffc8 	bl	18ed2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    5f42:	2800      	cmp	r0, #0
    5f44:	d0be      	beq.n	5ec4 <att_read_group_req+0x5c>
	if (!req) {
    5f46:	2310      	movs	r3, #16
    5f48:	4632      	mov	r2, r6
    5f4a:	2110      	movs	r1, #16
    5f4c:	4628      	mov	r0, r5
    5f4e:	f014 fa19 	bl	1a384 <send_err_rsp.part.0>
		return 0;
    5f52:	e7e8      	b.n	5f26 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    5f54:	9909      	ldr	r1, [sp, #36]	; 0x24
    5f56:	4628      	mov	r0, r5
    5f58:	f7ff fe18 	bl	5b8c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    5f5c:	e7e2      	b.n	5f24 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    5f5e:	2404      	movs	r4, #4
    5f60:	e7e1      	b.n	5f26 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    5f62:	240e      	movs	r4, #14
    5f64:	e7df      	b.n	5f26 <att_read_group_req+0xbe>
    5f66:	bf00      	nop
    5f68:	00005a25 	.word	0x00005a25

00005f6c <att_read_mult_req>:
{
    5f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    5f70:	6886      	ldr	r6, [r0, #8]
{
    5f72:	b085      	sub	sp, #20
    5f74:	4604      	mov	r4, r0
    5f76:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    5f78:	4630      	mov	r0, r6
    5f7a:	2101      	movs	r1, #1
    5f7c:	f014 fe5b 	bl	1ac36 <bt_gatt_change_aware>
    5f80:	b3b8      	cbz	r0, 5ff2 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
    5f82:	2210      	movs	r2, #16
    5f84:	2100      	movs	r1, #0
    5f86:	4668      	mov	r0, sp
    5f88:	f012 ff45 	bl	18e16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    5f8c:	2200      	movs	r2, #0
    5f8e:	210f      	movs	r1, #15
    5f90:	4630      	mov	r0, r6
    5f92:	f014 fa3a 	bl	1a40a <bt_att_create_pdu>
    5f96:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    5f98:	b368      	cbz	r0, 5ff6 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5f9a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 5ffc <att_read_mult_req+0x90>
	data.chan = chan;
    5f9e:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    5fa0:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5fa4:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    5fa8:	89ab      	ldrh	r3, [r5, #12]
    5faa:	2b01      	cmp	r3, #1
    5fac:	d804      	bhi.n	5fb8 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    5fae:	9902      	ldr	r1, [sp, #8]
    5fb0:	4620      	mov	r0, r4
    5fb2:	f7ff fdeb 	bl	5b8c <bt_att_chan_send_rsp.constprop.0>
    5fb6:	e018      	b.n	5fea <att_read_mult_req+0x7e>
    5fb8:	4638      	mov	r0, r7
    5fba:	f014 ff2b 	bl	1ae14 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5fbe:	466b      	mov	r3, sp
    5fc0:	464a      	mov	r2, r9
    5fc2:	4601      	mov	r1, r0
    5fc4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5fc6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5fca:	f013 fe88 	bl	19cde <bt_gatt_foreach_attr>
		if (data.err) {
    5fce:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d0e8      	beq.n	5fa8 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
    5fd6:	9802      	ldr	r0, [sp, #8]
    5fd8:	f00e f9c2 	bl	14360 <net_buf_unref>
	if (!req) {
    5fdc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5fe0:	4632      	mov	r2, r6
    5fe2:	210e      	movs	r1, #14
    5fe4:	4620      	mov	r0, r4
    5fe6:	f014 f9cd 	bl	1a384 <send_err_rsp.part.0>
	return 0;
    5fea:	2000      	movs	r0, #0
}
    5fec:	b005      	add	sp, #20
    5fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    5ff2:	2012      	movs	r0, #18
    5ff4:	e7fa      	b.n	5fec <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
    5ff6:	200e      	movs	r0, #14
    5ff8:	e7f8      	b.n	5fec <att_read_mult_req+0x80>
    5ffa:	bf00      	nop
    5ffc:	0001a1d5 	.word	0x0001a1d5

00006000 <att_read_rsp>:
{
    6000:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    6004:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    6008:	4605      	mov	r5, r0
    600a:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    600c:	4640      	mov	r0, r8
    600e:	2101      	movs	r1, #1
{
    6010:	4614      	mov	r4, r2
    6012:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    6014:	f014 fe0f 	bl	1ac36 <bt_gatt_change_aware>
    6018:	b388      	cbz	r0, 607e <att_read_rsp+0x7e>
	if (!handle) {
    601a:	b396      	cbz	r6, 6082 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    601c:	2210      	movs	r2, #16
    601e:	2100      	movs	r1, #0
    6020:	4668      	mov	r0, sp
    6022:	f012 fef8 	bl	18e16 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    6026:	2200      	movs	r2, #0
    6028:	4621      	mov	r1, r4
    602a:	4640      	mov	r0, r8
    602c:	f014 f9ed 	bl	1a40a <bt_att_create_pdu>
    6030:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    6032:	b340      	cbz	r0, 6086 <att_read_rsp+0x86>
	data.offset = offset;
    6034:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    6038:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    603c:	2301      	movs	r3, #1
    603e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6042:	4a12      	ldr	r2, [pc, #72]	; (608c <att_read_rsp+0x8c>)
	data.chan = chan;
    6044:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    6046:	466b      	mov	r3, sp
    6048:	4631      	mov	r1, r6
    604a:	4630      	mov	r0, r6
    604c:	f013 fe47 	bl	19cde <bt_gatt_foreach_attr>
	if (data.err) {
    6050:	f89d 400c 	ldrb.w	r4, [sp, #12]
    6054:	b174      	cbz	r4, 6074 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    6056:	9802      	ldr	r0, [sp, #8]
    6058:	f00e f982 	bl	14360 <net_buf_unref>
	if (!req) {
    605c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6060:	4632      	mov	r2, r6
    6062:	4639      	mov	r1, r7
    6064:	4628      	mov	r0, r5
    6066:	f014 f98d 	bl	1a384 <send_err_rsp.part.0>
		return 0;
    606a:	2400      	movs	r4, #0
}
    606c:	4620      	mov	r0, r4
    606e:	b004      	add	sp, #16
    6070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    6074:	9902      	ldr	r1, [sp, #8]
    6076:	4628      	mov	r0, r5
    6078:	f7ff fd88 	bl	5b8c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    607c:	e7f6      	b.n	606c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    607e:	2412      	movs	r4, #18
    6080:	e7f4      	b.n	606c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    6082:	2401      	movs	r4, #1
    6084:	e7f2      	b.n	606c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    6086:	240e      	movs	r4, #14
    6088:	e7f0      	b.n	606c <att_read_rsp+0x6c>
    608a:	bf00      	nop
    608c:	0001a1d5 	.word	0x0001a1d5

00006090 <att_read_type_req>:
{
    6090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    6094:	898c      	ldrh	r4, [r1, #12]
    6096:	3c04      	subs	r4, #4
    6098:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    609a:	2c02      	cmp	r4, #2
{
    609c:	4605      	mov	r5, r0
    609e:	b08c      	sub	sp, #48	; 0x30
    60a0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    60a2:	d001      	beq.n	60a8 <att_read_type_req+0x18>
    60a4:	2c10      	cmp	r4, #16
    60a6:	d14f      	bne.n	6148 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    60a8:	2104      	movs	r1, #4
    60aa:	3008      	adds	r0, #8
    60ac:	f014 feaa 	bl	1ae04 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    60b0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    60b4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    60b6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    60b8:	1d01      	adds	r1, r0, #4
    60ba:	4622      	mov	r2, r4
    60bc:	4640      	mov	r0, r8
    60be:	f012 ff36 	bl	18f2e <bt_uuid_create>
    60c2:	b188      	cbz	r0, 60e8 <att_read_type_req+0x58>
	if (!start || !end) {
    60c4:	b19e      	cbz	r6, 60ee <att_read_type_req+0x5e>
    60c6:	b18f      	cbz	r7, 60ec <att_read_type_req+0x5c>
	if (start > end) {
    60c8:	42b7      	cmp	r7, r6
    60ca:	d310      	bcc.n	60ee <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    60cc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    60ce:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    60d0:	2100      	movs	r1, #0
    60d2:	eb0d 0002 	add.w	r0, sp, r2
    60d6:	f012 fe9e 	bl	18e16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    60da:	2201      	movs	r2, #1
    60dc:	2109      	movs	r1, #9
    60de:	4620      	mov	r0, r4
    60e0:	f014 f993 	bl	1a40a <bt_att_create_pdu>
    60e4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    60e6:	b968      	cbnz	r0, 6104 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    60e8:	240e      	movs	r4, #14
    60ea:	e007      	b.n	60fc <att_read_type_req+0x6c>
			*err = 0U;
    60ec:	463e      	mov	r6, r7
	if (!req) {
    60ee:	2301      	movs	r3, #1
    60f0:	4632      	mov	r2, r6
    60f2:	2108      	movs	r1, #8
    60f4:	4628      	mov	r0, r5
    60f6:	f014 f945 	bl	1a384 <send_err_rsp.part.0>
		return 0;
    60fa:	2400      	movs	r4, #0
}
    60fc:	4620      	mov	r0, r4
    60fe:	b00c      	add	sp, #48	; 0x30
    6100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    6104:	2101      	movs	r1, #1
    6106:	3008      	adds	r0, #8
	data.uuid = uuid;
    6108:	e9cd 5806 	strd	r5, r8, [sp, #24]
    610c:	f014 fe53 	bl	1adb6 <net_buf_simple_add>
	data.rsp->len = 0U;
    6110:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6114:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6116:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6118:	4a0c      	ldr	r2, [pc, #48]	; (614c <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    611a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    611e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    6120:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    6124:	4630      	mov	r0, r6
    6126:	ab06      	add	r3, sp, #24
    6128:	f013 fdd9 	bl	19cde <bt_gatt_foreach_attr>
	if (data.err) {
    612c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    6130:	b12c      	cbz	r4, 613e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    6132:	9808      	ldr	r0, [sp, #32]
    6134:	f00e f914 	bl	14360 <net_buf_unref>
	if (!req) {
    6138:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    613c:	e7d8      	b.n	60f0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    613e:	9908      	ldr	r1, [sp, #32]
    6140:	4628      	mov	r0, r5
    6142:	f7ff fd23 	bl	5b8c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    6146:	e7d9      	b.n	60fc <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    6148:	2404      	movs	r4, #4
    614a:	e7d7      	b.n	60fc <att_read_type_req+0x6c>
    614c:	00005bb1 	.word	0x00005bb1

00006150 <att_find_type_req>:
{
    6150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6154:	4688      	mov	r8, r1
    6156:	b086      	sub	sp, #24
    6158:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    615a:	2106      	movs	r1, #6
    615c:	f108 0008 	add.w	r0, r8, #8
    6160:	f014 fe50 	bl	1ae04 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    6164:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    6166:	b317      	cbz	r7, 61ae <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    6168:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    616c:	f1b9 0f00 	cmp.w	r9, #0
    6170:	d01c      	beq.n	61ac <att_find_type_req+0x5c>
	if (start > end) {
    6172:	454f      	cmp	r7, r9
    6174:	d81b      	bhi.n	61ae <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    6176:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    6178:	f8ad 3002 	strh.w	r3, [sp, #2]
    617c:	2400      	movs	r4, #0
    617e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6182:	a901      	add	r1, sp, #4
    6184:	4668      	mov	r0, sp
	value = buf->data;
    6186:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    618a:	f88d 4000 	strb.w	r4, [sp]
    618e:	f88d 4004 	strb.w	r4, [sp, #4]
    6192:	f8ad 3006 	strh.w	r3, [sp, #6]
    6196:	f012 fe9c 	bl	18ed2 <bt_uuid_cmp>
    619a:	4606      	mov	r6, r0
    619c:	b190      	cbz	r0, 61c4 <att_find_type_req+0x74>
	if (!req) {
    619e:	230a      	movs	r3, #10
    61a0:	463a      	mov	r2, r7
    61a2:	2106      	movs	r1, #6
    61a4:	4628      	mov	r0, r5
    61a6:	f014 f8ed 	bl	1a384 <send_err_rsp.part.0>
		return 0;
    61aa:	e007      	b.n	61bc <att_find_type_req+0x6c>
			*err = 0U;
    61ac:	464f      	mov	r7, r9
	if (!req) {
    61ae:	2301      	movs	r3, #1
    61b0:	463a      	mov	r2, r7
    61b2:	2106      	movs	r1, #6
    61b4:	4628      	mov	r0, r5
    61b6:	f014 f8e5 	bl	1a384 <send_err_rsp.part.0>
		return 0;
    61ba:	2400      	movs	r4, #0
}
    61bc:	4620      	mov	r0, r4
    61be:	b006      	add	sp, #24
    61c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    61c4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    61c8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    61cc:	4601      	mov	r1, r0
    61ce:	2214      	movs	r2, #20
    61d0:	a801      	add	r0, sp, #4
    61d2:	f012 fe20 	bl	18e16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    61d6:	4632      	mov	r2, r6
    61d8:	2107      	movs	r1, #7
    61da:	4640      	mov	r0, r8
    61dc:	f014 f915 	bl	1a40a <bt_att_create_pdu>
    61e0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    61e2:	b1d8      	cbz	r0, 621c <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    61e4:	230a      	movs	r3, #10
    61e6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    61ea:	4a0d      	ldr	r2, [pc, #52]	; (6220 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    61ec:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    61f0:	ab01      	add	r3, sp, #4
    61f2:	4649      	mov	r1, r9
    61f4:	4638      	mov	r0, r7
	data.value = value;
    61f6:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    61fa:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    61fc:	f013 fd6f 	bl	19cde <bt_gatt_foreach_attr>
	if (data.err) {
    6200:	f89d 4015 	ldrb.w	r4, [sp, #21]
    6204:	b12c      	cbz	r4, 6212 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    6206:	9802      	ldr	r0, [sp, #8]
    6208:	f00e f8aa 	bl	14360 <net_buf_unref>
	if (!req) {
    620c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    6210:	e7ce      	b.n	61b0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    6212:	9902      	ldr	r1, [sp, #8]
    6214:	4628      	mov	r0, r5
    6216:	f7ff fcb9 	bl	5b8c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    621a:	e7cf      	b.n	61bc <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    621c:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    621e:	e7cd      	b.n	61bc <att_find_type_req+0x6c>
    6220:	00019cf5 	.word	0x00019cf5

00006224 <att_find_info_req>:
{
    6224:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    6226:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6228:	881e      	ldrh	r6, [r3, #0]
{
    622a:	b085      	sub	sp, #20
    622c:	4605      	mov	r5, r0
	if (!start || !end) {
    622e:	b19e      	cbz	r6, 6258 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    6230:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    6232:	b184      	cbz	r4, 6256 <att_find_info_req+0x32>
	if (start > end) {
    6234:	42b4      	cmp	r4, r6
    6236:	d30f      	bcc.n	6258 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    6238:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    623a:	2210      	movs	r2, #16
    623c:	2100      	movs	r1, #0
    623e:	4668      	mov	r0, sp
    6240:	f012 fde9 	bl	18e16 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    6244:	2200      	movs	r2, #0
    6246:	2105      	movs	r1, #5
    6248:	4638      	mov	r0, r7
    624a:	f014 f8de 	bl	1a40a <bt_att_create_pdu>
    624e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    6250:	b958      	cbnz	r0, 626a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    6252:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    6254:	e007      	b.n	6266 <att_find_info_req+0x42>
			*err = 0U;
    6256:	4626      	mov	r6, r4
	if (!req) {
    6258:	2301      	movs	r3, #1
    625a:	4632      	mov	r2, r6
    625c:	2104      	movs	r1, #4
    625e:	4628      	mov	r0, r5
    6260:	f014 f890 	bl	1a384 <send_err_rsp.part.0>
	return 0;
    6264:	2000      	movs	r0, #0
}
    6266:	b005      	add	sp, #20
    6268:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    626a:	4621      	mov	r1, r4
    626c:	4a08      	ldr	r2, [pc, #32]	; (6290 <att_find_info_req+0x6c>)
	data.chan = chan;
    626e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    6270:	466b      	mov	r3, sp
    6272:	4630      	mov	r0, r6
    6274:	f013 fd33 	bl	19cde <bt_gatt_foreach_attr>
	if (!data.rsp) {
    6278:	9c02      	ldr	r4, [sp, #8]
    627a:	b924      	cbnz	r4, 6286 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    627c:	9801      	ldr	r0, [sp, #4]
    627e:	f00e f86f 	bl	14360 <net_buf_unref>
	if (!req) {
    6282:	230a      	movs	r3, #10
    6284:	e7e9      	b.n	625a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    6286:	9901      	ldr	r1, [sp, #4]
    6288:	4628      	mov	r0, r5
    628a:	f7ff fc7f 	bl	5b8c <bt_att_chan_send_rsp.constprop.0>
    628e:	e7e9      	b.n	6264 <att_find_info_req+0x40>
    6290:	00019e1d 	.word	0x00019e1d

00006294 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    6294:	b513      	push	{r0, r1, r4, lr}
    6296:	4602      	mov	r2, r0
    6298:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    629a:	4808      	ldr	r0, [pc, #32]	; (62bc <bt_att_req_alloc+0x28>)
    629c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    629e:	2400      	movs	r4, #0
    62a0:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    62a2:	f010 feaf 	bl	17004 <k_mem_slab_alloc>
    62a6:	4601      	mov	r1, r0
    62a8:	b930      	cbnz	r0, 62b8 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    62aa:	9801      	ldr	r0, [sp, #4]
    62ac:	2210      	movs	r2, #16
    62ae:	f012 fdb2 	bl	18e16 <memset>

	return req;
    62b2:	9801      	ldr	r0, [sp, #4]
}
    62b4:	b002      	add	sp, #8
    62b6:	bd10      	pop	{r4, pc}
		return NULL;
    62b8:	4620      	mov	r0, r4
    62ba:	e7fb      	b.n	62b4 <bt_att_req_alloc+0x20>
    62bc:	20000868 	.word	0x20000868

000062c0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    62c0:	b507      	push	{r0, r1, r2, lr}
    62c2:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    62c4:	6880      	ldr	r0, [r0, #8]
    62c6:	b120      	cbz	r0, 62d2 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    62c8:	f00e f84a 	bl	14360 <net_buf_unref>
		req->buf = NULL;
    62cc:	9b01      	ldr	r3, [sp, #4]
    62ce:	2200      	movs	r2, #0
    62d0:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    62d2:	4803      	ldr	r0, [pc, #12]	; (62e0 <bt_att_req_free+0x20>)
    62d4:	a901      	add	r1, sp, #4
    62d6:	f015 fcbe 	bl	1bc56 <k_mem_slab_free>
}
    62da:	b003      	add	sp, #12
    62dc:	f85d fb04 	ldr.w	pc, [sp], #4
    62e0:	20000868 	.word	0x20000868

000062e4 <att_handle_rsp>:
{
    62e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    62e8:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    62ea:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    62ee:	4688      	mov	r8, r1
    62f0:	4691      	mov	r9, r2
    62f2:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
    62f4:	f015 fe69 	bl	1bfca <k_work_cancel_delayable>
	if (!chan->req) {
    62f8:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
    62fc:	2600      	movs	r6, #0
    62fe:	b1f0      	cbz	r0, 633e <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
    6300:	4b10      	ldr	r3, [pc, #64]	; (6344 <att_handle_rsp+0x60>)
    6302:	4298      	cmp	r0, r3
    6304:	d112      	bne.n	632c <att_handle_rsp+0x48>
		chan->req = NULL;
    6306:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    630a:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
    630c:	6820      	ldr	r0, [r4, #0]
    630e:	f013 ffc8 	bl	1a2a2 <att_req_send_process>
	if (func) {
    6312:	b13d      	cbz	r5, 6324 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
    6314:	6820      	ldr	r0, [r4, #0]
    6316:	f8cd a000 	str.w	sl, [sp]
    631a:	6800      	ldr	r0, [r0, #0]
    631c:	464b      	mov	r3, r9
    631e:	4642      	mov	r2, r8
    6320:	4639      	mov	r1, r7
    6322:	47a8      	blx	r5
}
    6324:	2000      	movs	r0, #0
    6326:	b002      	add	sp, #8
    6328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
    632c:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
    632e:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    6330:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
    6334:	f7ff ffc4 	bl	62c0 <bt_att_req_free>
	chan->req = NULL;
    6338:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
    633c:	e7e6      	b.n	630c <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
    633e:	4605      	mov	r5, r0
    6340:	e7e4      	b.n	630c <att_handle_rsp+0x28>
    6342:	bf00      	nop
    6344:	20001444 	.word	0x20001444

00006348 <bt_att_disconnected>:
{
    6348:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    634a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    634e:	b085      	sub	sp, #20
    6350:	4604      	mov	r4, r0
	if (!att_chan->att) {
    6352:	2d00      	cmp	r5, #0
    6354:	d04e      	beq.n	63f4 <bt_att_disconnected+0xac>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    6356:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    635a:	f105 0024 	add.w	r0, r5, #36	; 0x24
    635e:	f013 ff03 	bl	1a168 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    6362:	f1a4 0608 	sub.w	r6, r4, #8
    6366:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    636a:	2200      	movs	r2, #0
    636c:	2300      	movs	r3, #0
    636e:	4638      	mov	r0, r7
    6370:	f014 fcc4 	bl	1acfc <net_buf_get>
    6374:	4602      	mov	r2, r0
    6376:	bb20      	cbnz	r0, 63c2 <bt_att_disconnected+0x7a>
	if (chan->req) {
    6378:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    637c:	b123      	cbz	r3, 6388 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    637e:	4601      	mov	r1, r0
    6380:	230e      	movs	r3, #14
    6382:	4630      	mov	r0, r6
    6384:	f7ff ffae 	bl	62e4 <att_handle_rsp>
	chan->att = NULL;
    6388:	2300      	movs	r3, #0
    638a:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    638e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6390:	2b00      	cmp	r3, #0
    6392:	d12f      	bne.n	63f4 <bt_att_disconnected+0xac>
	att_reset(att);
    6394:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    6396:	9803      	ldr	r0, [sp, #12]
    6398:	2200      	movs	r2, #0
    639a:	2300      	movs	r3, #0
    639c:	300c      	adds	r0, #12
    639e:	f014 fcad 	bl	1acfc <net_buf_get>
    63a2:	b988      	cbnz	r0, 63c8 <bt_att_disconnected+0x80>
	att->conn = NULL;
    63a4:	9a03      	ldr	r2, [sp, #12]
    63a6:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
    63a8:	9b03      	ldr	r3, [sp, #12]
	return list->head;
    63aa:	685d      	ldr	r5, [r3, #4]
    63ac:	b97d      	cbnz	r5, 63ce <bt_att_disconnected+0x86>
	k_mem_slab_free(&att_slab, (void **)&att);
    63ae:	4812      	ldr	r0, [pc, #72]	; (63f8 <bt_att_disconnected+0xb0>)
    63b0:	a903      	add	r1, sp, #12
    63b2:	f015 fc50 	bl	1bc56 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    63b6:	6820      	ldr	r0, [r4, #0]
}
    63b8:	b005      	add	sp, #20
    63ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    63be:	f000 bb8f 	b.w	6ae0 <bt_gatt_disconnected>
		net_buf_unref(buf);
    63c2:	f00d ffcd 	bl	14360 <net_buf_unref>
    63c6:	e7d0      	b.n	636a <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    63c8:	f00d ffca 	bl	14360 <net_buf_unref>
    63cc:	e7e3      	b.n	6396 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    63ce:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
    63d0:	686e      	ldr	r6, [r5, #4]
	return node->next;
    63d2:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    63d4:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    63d6:	428d      	cmp	r5, r1
	list->tail = node;
    63d8:	bf08      	it	eq
    63da:	609a      	streq	r2, [r3, #8]
    63dc:	b136      	cbz	r6, 63ec <bt_att_disconnected+0xa4>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    63de:	68eb      	ldr	r3, [r5, #12]
    63e0:	9300      	str	r3, [sp, #0]
    63e2:	2300      	movs	r3, #0
    63e4:	461a      	mov	r2, r3
    63e6:	210e      	movs	r1, #14
    63e8:	4618      	mov	r0, r3
    63ea:	47b0      	blx	r6
		bt_att_req_free(req);
    63ec:	4628      	mov	r0, r5
    63ee:	f7ff ff67 	bl	62c0 <bt_att_req_free>
    63f2:	e7d9      	b.n	63a8 <bt_att_disconnected+0x60>
}
    63f4:	b005      	add	sp, #20
    63f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63f8:	20000830 	.word	0x20000830

000063fc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    63fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    63fe:	4d0d      	ldr	r5, [pc, #52]	; (6434 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    6400:	4604      	mov	r4, r0
    6402:	b968      	cbnz	r0, 6420 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    6404:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
    6406:	2207      	movs	r2, #7
    6408:	f8cd 0003 	str.w	r0, [sp, #3]
    640c:	4669      	mov	r1, sp
    640e:	1c68      	adds	r0, r5, #1
    6410:	f012 fce5 	bl	18dde <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    6414:	2800      	cmp	r0, #0
    6416:	bf08      	it	eq
    6418:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
    641a:	4620      	mov	r0, r4
    641c:	b003      	add	sp, #12
    641e:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    6420:	462a      	mov	r2, r5
    6422:	f812 1b01 	ldrb.w	r1, [r2], #1
    6426:	f013 fac7 	bl	199b8 <bt_conn_is_peer_addr_le>
	return NULL;
    642a:	2800      	cmp	r0, #0
    642c:	bf14      	ite	ne
    642e:	462c      	movne	r4, r5
    6430:	2400      	moveq	r4, #0
    6432:	e7f2      	b.n	641a <find_cf_cfg+0x1e>
    6434:	2000145c 	.word	0x2000145c

00006438 <find_sc_cfg>:
{
    6438:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    643a:	4c06      	ldr	r4, [pc, #24]	; (6454 <find_sc_cfg+0x1c>)
    643c:	7823      	ldrb	r3, [r4, #0]
    643e:	4283      	cmp	r3, r0
    6440:	d104      	bne.n	644c <find_sc_cfg+0x14>
    6442:	2207      	movs	r2, #7
    6444:	1c60      	adds	r0, r4, #1
    6446:	f012 fcca 	bl	18dde <memcmp>
    644a:	b108      	cbz	r0, 6450 <find_sc_cfg+0x18>
	return NULL;
    644c:	2000      	movs	r0, #0
}
    644e:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    6450:	4620      	mov	r0, r4
    6452:	e7fc      	b.n	644e <find_sc_cfg+0x16>
    6454:	2000278c 	.word	0x2000278c

00006458 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    6458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    645c:	4b23      	ldr	r3, [pc, #140]	; (64ec <disconnected_cb+0x94>)
{
    645e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    6460:	6882      	ldr	r2, [r0, #8]
    6462:	429a      	cmp	r2, r3
{
    6464:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    6466:	d102      	bne.n	646e <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    6468:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    646a:	8963      	ldrh	r3, [r4, #10]
    646c:	bb03      	cbnz	r3, 64b0 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    646e:	2001      	movs	r0, #1
    6470:	b002      	add	sp, #8
    6472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    6476:	f105 0888 	add.w	r8, r5, #136	; 0x88
    647a:	7a28      	ldrb	r0, [r5, #8]
    647c:	4641      	mov	r1, r8
    647e:	f013 f803 	bl	19488 <bt_addr_le_is_bonded>
    6482:	b980      	cbnz	r0, 64a6 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
    6484:	4b1a      	ldr	r3, [pc, #104]	; (64f0 <disconnected_cb+0x98>)
    6486:	429c      	cmp	r4, r3
    6488:	d102      	bne.n	6490 <disconnected_cb+0x38>
					sc_clear(conn);
    648a:	4628      	mov	r0, r5
    648c:	f014 fafe 	bl	1aa8c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    6490:	2500      	movs	r5, #0
    6492:	4669      	mov	r1, sp
    6494:	4630      	mov	r0, r6
    6496:	9500      	str	r5, [sp, #0]
    6498:	f8cd 5003 	str.w	r5, [sp, #3]
    649c:	f014 f8ab 	bl	1a5f6 <bt_addr_le_copy>
	cfg->id = 0U;
    64a0:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    64a2:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
    64a4:	e019      	b.n	64da <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    64a6:	4641      	mov	r1, r8
    64a8:	4630      	mov	r0, r6
    64aa:	f014 f8a4 	bl	1a5f6 <bt_addr_le_copy>
	if (!value_used) {
    64ae:	e014      	b.n	64da <disconnected_cb+0x82>
		if (!cfg->value) {
    64b0:	8923      	ldrh	r3, [r4, #8]
    64b2:	b193      	cbz	r3, 64da <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    64b4:	4626      	mov	r6, r4
    64b6:	4628      	mov	r0, r5
    64b8:	f816 1b01 	ldrb.w	r1, [r6], #1
    64bc:	4632      	mov	r2, r6
    64be:	f013 fa7b 	bl	199b8 <bt_conn_is_peer_addr_le>
    64c2:	2800      	cmp	r0, #0
    64c4:	d1d7      	bne.n	6476 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    64c6:	7820      	ldrb	r0, [r4, #0]
    64c8:	4631      	mov	r1, r6
    64ca:	f7fe ffff 	bl	54cc <bt_conn_lookup_addr_le>
			if (tmp) {
    64ce:	b120      	cbz	r0, 64da <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
    64d0:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    64d2:	f013 fa2a 	bl	1992a <bt_conn_unref>
	if (!value_used) {
    64d6:	2d07      	cmp	r5, #7
    64d8:	d0c9      	beq.n	646e <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    64da:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    64dc:	2100      	movs	r1, #0
    64de:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    64e0:	2b00      	cmp	r3, #0
    64e2:	d0c4      	beq.n	646e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    64e4:	4638      	mov	r0, r7
    64e6:	4798      	blx	r3
    64e8:	e7c1      	b.n	646e <disconnected_cb+0x16>
    64ea:	bf00      	nop
    64ec:	0001a953 	.word	0x0001a953
    64f0:	2000023c 	.word	0x2000023c

000064f4 <sc_indicate_rsp>:
{
    64f4:	b510      	push	{r4, lr}
    64f6:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    64f8:	4814      	ldr	r0, [pc, #80]	; (654c <sc_indicate_rsp+0x58>)
    64fa:	f3bf 8f5b 	dmb	ish
    64fe:	f100 0350 	add.w	r3, r0, #80	; 0x50
    6502:	e853 2f00 	ldrex	r2, [r3]
    6506:	f022 0202 	bic.w	r2, r2, #2
    650a:	e843 2100 	strex	r1, r2, [r3]
    650e:	2900      	cmp	r1, #0
    6510:	d1f7      	bne.n	6502 <sc_indicate_rsp+0xe>
    6512:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6516:	f3bf 8f5b 	dmb	ish
    651a:	6d03      	ldr	r3, [r0, #80]	; 0x50
    651c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    6520:	07da      	lsls	r2, r3, #31
    6522:	d504      	bpl.n	652e <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
    6524:	2200      	movs	r2, #0
    6526:	2300      	movs	r3, #0
    6528:	3020      	adds	r0, #32
    652a:	f011 f8ab 	bl	17684 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    652e:	4620      	mov	r0, r4
    6530:	f7ff ff64 	bl	63fc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    6534:	b140      	cbz	r0, 6548 <sc_indicate_rsp+0x54>
    6536:	7a03      	ldrb	r3, [r0, #8]
    6538:	07db      	lsls	r3, r3, #31
    653a:	d505      	bpl.n	6548 <sc_indicate_rsp+0x54>
}
    653c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    6540:	2100      	movs	r1, #0
    6542:	300c      	adds	r0, #12
    6544:	f014 b8ee 	b.w	1a724 <atomic_set_bit>
}
    6548:	bd10      	pop	{r4, pc}
    654a:	bf00      	nop
    654c:	20000c80 	.word	0x20000c80

00006550 <bt_gatt_init>:
{
    6550:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6552:	4b20      	ldr	r3, [pc, #128]	; (65d4 <bt_gatt_init+0x84>)
    6554:	f3bf 8f5b 	dmb	ish
    6558:	2201      	movs	r2, #1
    655a:	e853 1f00 	ldrex	r1, [r3]
    655e:	2900      	cmp	r1, #0
    6560:	d103      	bne.n	656a <bt_gatt_init+0x1a>
    6562:	e843 2000 	strex	r0, r2, [r3]
    6566:	2800      	cmp	r0, #0
    6568:	d1f7      	bne.n	655a <bt_gatt_init+0xa>
    656a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    656e:	d130      	bne.n	65d2 <bt_gatt_init+0x82>
    6570:	f3bf 8f5b 	dmb	ish
    6574:	4b18      	ldr	r3, [pc, #96]	; (65d8 <bt_gatt_init+0x88>)
    6576:	e853 1f00 	ldrex	r1, [r3]
    657a:	2900      	cmp	r1, #0
    657c:	d103      	bne.n	6586 <bt_gatt_init+0x36>
    657e:	e843 2000 	strex	r0, r2, [r3]
    6582:	2800      	cmp	r0, #0
    6584:	d1f7      	bne.n	6576 <bt_gatt_init+0x26>
    6586:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    658a:	d108      	bne.n	659e <bt_gatt_init+0x4e>
    658c:	4913      	ldr	r1, [pc, #76]	; (65dc <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    658e:	4a14      	ldr	r2, [pc, #80]	; (65e0 <bt_gatt_init+0x90>)
    6590:	880b      	ldrh	r3, [r1, #0]
    6592:	4c14      	ldr	r4, [pc, #80]	; (65e4 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    6594:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    6596:	42a2      	cmp	r2, r4
    6598:	d315      	bcc.n	65c6 <bt_gatt_init+0x76>
    659a:	b100      	cbz	r0, 659e <bt_gatt_init+0x4e>
    659c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    659e:	4b12      	ldr	r3, [pc, #72]	; (65e8 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    65a0:	4912      	ldr	r1, [pc, #72]	; (65ec <bt_gatt_init+0x9c>)
    65a2:	4813      	ldr	r0, [pc, #76]	; (65f0 <bt_gatt_init+0xa0>)
    65a4:	2200      	movs	r2, #0
	list->tail = NULL;
    65a6:	e9c3 2200 	strd	r2, r2, [r3]
    65aa:	f015 fd02 	bl	1bfb2 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    65ae:	4810      	ldr	r0, [pc, #64]	; (65f0 <bt_gatt_init+0xa0>)
    65b0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    65b4:	2300      	movs	r3, #0
    65b6:	f011 f831 	bl	1761c <k_work_schedule>
}
    65ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    65be:	490d      	ldr	r1, [pc, #52]	; (65f4 <bt_gatt_init+0xa4>)
    65c0:	480d      	ldr	r0, [pc, #52]	; (65f8 <bt_gatt_init+0xa8>)
    65c2:	f015 bcf6 	b.w	1bfb2 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    65c6:	6850      	ldr	r0, [r2, #4]
    65c8:	4403      	add	r3, r0
    65ca:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    65cc:	3208      	adds	r2, #8
    65ce:	2001      	movs	r0, #1
    65d0:	e7e1      	b.n	6596 <bt_gatt_init+0x46>
}
    65d2:	bd10      	pop	{r4, pc}
    65d4:	2000146c 	.word	0x2000146c
    65d8:	20001470 	.word	0x20001470
    65dc:	2000278a 	.word	0x2000278a
    65e0:	0001c95c 	.word	0x0001c95c
    65e4:	0001c96c 	.word	0x0001c96c
    65e8:	20001454 	.word	0x20001454
    65ec:	0001ab85 	.word	0x0001ab85
    65f0:	20000c28 	.word	0x20000c28
    65f4:	0000690d 	.word	0x0000690d
    65f8:	20000ca0 	.word	0x20000ca0

000065fc <bt_gatt_attr_get_handle>:
{
    65fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    6600:	4603      	mov	r3, r0
    6602:	b148      	cbz	r0, 6618 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    6604:	8a00      	ldrh	r0, [r0, #16]
    6606:	b938      	cbnz	r0, 6618 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    6608:	4912      	ldr	r1, [pc, #72]	; (6654 <bt_gatt_attr_get_handle+0x58>)
    660a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 6658 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    660e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    6610:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    6614:	4571      	cmp	r1, lr
    6616:	d301      	bcc.n	661c <bt_gatt_attr_get_handle+0x20>
}
    6618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    661c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    6620:	42bb      	cmp	r3, r7
    6622:	d304      	bcc.n	662e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    6624:	fb0c 7206 	mla	r2, ip, r6, r7
    6628:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    662a:	4293      	cmp	r3, r2
    662c:	d90e      	bls.n	664c <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    662e:	19a2      	adds	r2, r4, r6
    6630:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    6632:	3108      	adds	r1, #8
    6634:	4614      	mov	r4, r2
    6636:	e7ed      	b.n	6614 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    6638:	fb0c 7805 	mla	r8, ip, r5, r7
    663c:	4543      	cmp	r3, r8
    663e:	d007      	beq.n	6650 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    6640:	3501      	adds	r5, #1
    6642:	1962      	adds	r2, r4, r5
    6644:	42b5      	cmp	r5, r6
    6646:	b292      	uxth	r2, r2
    6648:	d1f6      	bne.n	6638 <bt_gatt_attr_get_handle+0x3c>
    664a:	e7f2      	b.n	6632 <bt_gatt_attr_get_handle+0x36>
    664c:	2500      	movs	r5, #0
    664e:	e7f8      	b.n	6642 <bt_gatt_attr_get_handle+0x46>
    6650:	4610      	mov	r0, r2
    6652:	e7e1      	b.n	6618 <bt_gatt_attr_get_handle+0x1c>
    6654:	0001c95c 	.word	0x0001c95c
    6658:	0001c96c 	.word	0x0001c96c

0000665c <bt_gatt_foreach_attr_type>:
{
    665c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6660:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    6664:	9100      	str	r1, [sp, #0]
    6666:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    6668:	f64f 73ff 	movw	r3, #65535	; 0xffff
    666c:	2d00      	cmp	r5, #0
    666e:	bf08      	it	eq
    6670:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    6672:	4b24      	ldr	r3, [pc, #144]	; (6704 <bt_gatt_foreach_attr_type+0xa8>)
    6674:	881b      	ldrh	r3, [r3, #0]
    6676:	4283      	cmp	r3, r0
{
    6678:	4607      	mov	r7, r0
    667a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    667c:	d23c      	bcs.n	66f8 <bt_gatt_foreach_attr_type+0x9c>
}
    667e:	b003      	add	sp, #12
    6680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    6684:	6873      	ldr	r3, [r6, #4]
    6686:	4423      	add	r3, r4
    6688:	42bb      	cmp	r3, r7
    668a:	d232      	bcs.n	66f2 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    668c:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    668e:	3608      	adds	r6, #8
    6690:	4b1d      	ldr	r3, [pc, #116]	; (6708 <bt_gatt_foreach_attr_type+0xac>)
    6692:	429e      	cmp	r6, r3
    6694:	d3f6      	bcc.n	6684 <bt_gatt_foreach_attr_type+0x28>
    6696:	e7f2      	b.n	667e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    6698:	5889      	ldr	r1, [r1, r2]
    669a:	9301      	str	r3, [sp, #4]
    669c:	4640      	mov	r0, r8
    669e:	f012 fc18 	bl	18ed2 <bt_uuid_cmp>
    66a2:	9b01      	ldr	r3, [sp, #4]
    66a4:	b190      	cbz	r0, 66cc <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    66a6:	3401      	adds	r4, #1
    66a8:	f10a 0a01 	add.w	sl, sl, #1
    66ac:	b2a4      	uxth	r4, r4
    66ae:	6873      	ldr	r3, [r6, #4]
    66b0:	4553      	cmp	r3, sl
    66b2:	d9ec      	bls.n	668e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    66b4:	9b00      	ldr	r3, [sp, #0]
    66b6:	429c      	cmp	r4, r3
    66b8:	d8e1      	bhi.n	667e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    66ba:	42bc      	cmp	r4, r7
    66bc:	d3f3      	bcc.n	66a6 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    66be:	6831      	ldr	r1, [r6, #0]
    66c0:	fb0b f20a 	mul.w	r2, fp, sl
    66c4:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    66c6:	f1b8 0f00 	cmp.w	r8, #0
    66ca:	d1e5      	bne.n	6698 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    66cc:	f1b9 0f00 	cmp.w	r9, #0
    66d0:	d10b      	bne.n	66ea <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    66d2:	3d01      	subs	r5, #1
    66d4:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    66d6:	4618      	mov	r0, r3
    66d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    66da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    66dc:	4621      	mov	r1, r4
    66de:	4798      	blx	r3
	if (!*num_matches) {
    66e0:	2d00      	cmp	r5, #0
    66e2:	d0cc      	beq.n	667e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    66e4:	2800      	cmp	r0, #0
    66e6:	d1de      	bne.n	66a6 <bt_gatt_foreach_attr_type+0x4a>
    66e8:	e7c9      	b.n	667e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    66ea:	68da      	ldr	r2, [r3, #12]
    66ec:	4591      	cmp	r9, r2
    66ee:	d1da      	bne.n	66a6 <bt_gatt_foreach_attr_type+0x4a>
    66f0:	e7ef      	b.n	66d2 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    66f2:	f04f 0a00 	mov.w	sl, #0
    66f6:	e7da      	b.n	66ae <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    66f8:	4e04      	ldr	r6, [pc, #16]	; (670c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    66fa:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    66fc:	f04f 0b14 	mov.w	fp, #20
    6700:	e7c6      	b.n	6690 <bt_gatt_foreach_attr_type+0x34>
    6702:	bf00      	nop
    6704:	2000278a 	.word	0x2000278a
    6708:	0001c96c 	.word	0x0001c96c
    670c:	0001c95c 	.word	0x0001c95c

00006710 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    6710:	b510      	push	{r4, lr}
    6712:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    6714:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    6716:	aa1c      	add	r2, sp, #112	; 0x70
    6718:	4669      	mov	r1, sp
    671a:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    671c:	e9cd 3300 	strd	r3, r3, [sp]
    6720:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    6724:	f012 fa47 	bl	18bb6 <tc_cmac_setup>
    6728:	b320      	cbz	r0, 6774 <db_hash_gen.constprop.0+0x64>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    672a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    672e:	2001      	movs	r0, #1
    6730:	4a11      	ldr	r2, [pc, #68]	; (6778 <db_hash_gen.constprop.0+0x68>)
    6732:	ab04      	add	r3, sp, #16
    6734:	f014 fa1b 	bl	1ab6e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    6738:	4810      	ldr	r0, [pc, #64]	; (677c <db_hash_gen.constprop.0+0x6c>)
    673a:	a904      	add	r1, sp, #16
    673c:	f012 fad1 	bl	18ce2 <tc_cmac_final>
    6740:	b1c0      	cbz	r0, 6774 <db_hash_gen.constprop.0+0x64>
    6742:	4b0e      	ldr	r3, [pc, #56]	; (677c <db_hash_gen.constprop.0+0x6c>)
    6744:	2208      	movs	r2, #8
    6746:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    674a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    674c:	780c      	ldrb	r4, [r1, #0]
    674e:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
    6752:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    6754:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
    6758:	d1f7      	bne.n	674a <db_hash_gen.constprop.0+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    675a:	f3bf 8f5b 	dmb	ish
    675e:	4b08      	ldr	r3, [pc, #32]	; (6780 <db_hash_gen.constprop.0+0x70>)
    6760:	e853 2f00 	ldrex	r2, [r3]
    6764:	f042 0204 	orr.w	r2, r2, #4
    6768:	e843 2100 	strex	r1, r2, [r3]
    676c:	2900      	cmp	r1, #0
    676e:	d1f7      	bne.n	6760 <db_hash_gen.constprop.0+0x50>
    6770:	f3bf 8f5b 	dmb	ish
}
    6774:	b048      	add	sp, #288	; 0x120
    6776:	bd10      	pop	{r4, pc}
    6778:	0001a641 	.word	0x0001a641
    677c:	20000c18 	.word	0x20000c18
    6780:	20000cd0 	.word	0x20000cd0

00006784 <gatt_indicate>:
{
    6784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6788:	4615      	mov	r5, r2
    678a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    678c:	2214      	movs	r2, #20
    678e:	6869      	ldr	r1, [r5, #4]
{
    6790:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    6792:	f014 f9f9 	bl	1ab88 <bt_gatt_check_perm>
    6796:	2800      	cmp	r0, #0
    6798:	d139      	bne.n	680e <gatt_indicate+0x8a>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    679a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    679e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    67a0:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    67a2:	f7ff fd77 	bl	6294 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    67a6:	3602      	adds	r6, #2
	if (!req) {
    67a8:	4604      	mov	r4, r0
    67aa:	b920      	cbnz	r0, 67b6 <gatt_indicate+0x32>
		return -ENOMEM;
    67ac:	f06f 050b 	mvn.w	r5, #11
}
    67b0:	4628      	mov	r0, r5
    67b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
    67b6:	4b17      	ldr	r3, [pc, #92]	; (6814 <gatt_indicate+0x90>)
    67b8:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    67ba:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    67bc:	4632      	mov	r2, r6
    67be:	211d      	movs	r1, #29
    67c0:	4640      	mov	r0, r8
    67c2:	f013 fe22 	bl	1a40a <bt_att_create_pdu>
	if (!buf) {
    67c6:	4606      	mov	r6, r0
    67c8:	b918      	cbnz	r0, 67d2 <gatt_indicate+0x4e>
		bt_att_req_free(req);
    67ca:	4620      	mov	r0, r4
    67cc:	f7ff fd78 	bl	62c0 <bt_att_req_free>
    67d0:	e7ec      	b.n	67ac <gatt_indicate+0x28>
	return net_buf_simple_add(&buf->b, len);
    67d2:	f100 0a08 	add.w	sl, r0, #8
    67d6:	2102      	movs	r1, #2
    67d8:	4650      	mov	r0, sl
    67da:	f014 faec 	bl	1adb6 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    67de:	4607      	mov	r7, r0
    67e0:	8aa9      	ldrh	r1, [r5, #20]
    67e2:	f827 9b02 	strh.w	r9, [r7], #2
    67e6:	4650      	mov	r0, sl
    67e8:	f014 fae5 	bl	1adb6 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    67ec:	8aaa      	ldrh	r2, [r5, #20]
    67ee:	6929      	ldr	r1, [r5, #16]
    67f0:	4638      	mov	r0, r7
    67f2:	f012 fb05 	bl	18e00 <memcpy>
	req->buf = buf;
    67f6:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    67f8:	4621      	mov	r1, r4
    67fa:	4640      	mov	r0, r8
    67fc:	f013 fec5 	bl	1a58a <bt_att_req_send>
	if (err) {
    6800:	4605      	mov	r5, r0
    6802:	2800      	cmp	r0, #0
    6804:	d0d4      	beq.n	67b0 <gatt_indicate+0x2c>
		bt_att_req_free(req);
    6806:	4620      	mov	r0, r4
    6808:	f7ff fd5a 	bl	62c0 <bt_att_req_free>
    680c:	e7d0      	b.n	67b0 <gatt_indicate+0x2c>
		return -EPERM;
    680e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    6812:	e7cd      	b.n	67b0 <gatt_indicate+0x2c>
    6814:	0001a5c9 	.word	0x0001a5c9

00006818 <bt_gatt_indicate>:
{
    6818:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    681a:	4b39      	ldr	r3, [pc, #228]	; (6900 <bt_gatt_indicate+0xe8>)
    681c:	f3bf 8f5b 	dmb	ish
    6820:	681b      	ldr	r3, [r3, #0]
    6822:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6826:	079a      	lsls	r2, r3, #30
{
    6828:	b08b      	sub	sp, #44	; 0x2c
    682a:	4604      	mov	r4, r0
    682c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    682e:	d561      	bpl.n	68f4 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    6830:	b110      	cbz	r0, 6838 <bt_gatt_indicate+0x20>
    6832:	7a83      	ldrb	r3, [r0, #10]
    6834:	2b07      	cmp	r3, #7
    6836:	d160      	bne.n	68fa <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
    6838:	6868      	ldr	r0, [r5, #4]
    683a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    683c:	f7ff fede 	bl	65fc <bt_gatt_attr_get_handle>
	if (params->uuid) {
    6840:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    6842:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    6846:	b33a      	cbz	r2, 6898 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    6848:	a905      	add	r1, sp, #20
    684a:	9102      	str	r1, [sp, #8]
    684c:	492d      	ldr	r1, [pc, #180]	; (6904 <bt_gatt_indicate+0xec>)
    684e:	9101      	str	r1, [sp, #4]
    6850:	2101      	movs	r1, #1
	found->attr = NULL;
    6852:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    6854:	9100      	str	r1, [sp, #0]
    6856:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    685a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    685c:	f7ff fefe 	bl	665c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    6860:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    6862:	b91b      	cbnz	r3, 686c <bt_gatt_indicate+0x54>
			return -ENOENT;
    6864:	f06f 0001 	mvn.w	r0, #1
}
    6868:	b00b      	add	sp, #44	; 0x2c
    686a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    686c:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    686e:	9b05      	ldr	r3, [sp, #20]
    6870:	6818      	ldr	r0, [r3, #0]
    6872:	2300      	movs	r3, #0
    6874:	f88d 3010 	strb.w	r3, [sp, #16]
    6878:	a904      	add	r1, sp, #16
    687a:	f642 0303 	movw	r3, #10243	; 0x2803
    687e:	f8ad 3012 	strh.w	r3, [sp, #18]
    6882:	f012 fb26 	bl	18ed2 <bt_uuid_cmp>
    6886:	b970      	cbnz	r0, 68a6 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    6888:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    688a:	68c3      	ldr	r3, [r0, #12]
    688c:	799b      	ldrb	r3, [r3, #6]
    688e:	069b      	lsls	r3, r3, #26
    6890:	d405      	bmi.n	689e <bt_gatt_indicate+0x86>
			return -EINVAL;
    6892:	f06f 0015 	mvn.w	r0, #21
    6896:	e7e7      	b.n	6868 <bt_gatt_indicate+0x50>
		if (!data.handle) {
    6898:	2800      	cmp	r0, #0
    689a:	d1e8      	bne.n	686e <bt_gatt_indicate+0x56>
    689c:	e7e2      	b.n	6864 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    689e:	f014 f918 	bl	1aad2 <bt_gatt_attr_value_handle>
    68a2:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    68a6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    68aa:	b13c      	cbz	r4, 68bc <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    68ac:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    68ae:	4601      	mov	r1, r0
		params->_ref = 1;
    68b0:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    68b2:	462a      	mov	r2, r5
    68b4:	4620      	mov	r0, r4
    68b6:	f7ff ff65 	bl	6784 <gatt_indicate>
    68ba:	e7d5      	b.n	6868 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
    68bc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    68c0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    68c2:	2302      	movs	r3, #2
    68c4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    68c8:	f642 1302 	movw	r3, #10498	; 0x2902
    68cc:	f8ad 3012 	strh.w	r3, [sp, #18]
    68d0:	ab05      	add	r3, sp, #20
    68d2:	9302      	str	r3, [sp, #8]
    68d4:	4b0c      	ldr	r3, [pc, #48]	; (6908 <bt_gatt_indicate+0xf0>)
    68d6:	9301      	str	r3, [sp, #4]
    68d8:	2301      	movs	r3, #1
    68da:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    68dc:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    68de:	4623      	mov	r3, r4
    68e0:	aa04      	add	r2, sp, #16
    68e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    68e6:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    68e8:	f88d 4010 	strb.w	r4, [sp, #16]
    68ec:	f7ff feb6 	bl	665c <bt_gatt_foreach_attr_type>
	return data.err;
    68f0:	9807      	ldr	r0, [sp, #28]
    68f2:	e7b9      	b.n	6868 <bt_gatt_indicate+0x50>
		return -EAGAIN;
    68f4:	f06f 000a 	mvn.w	r0, #10
    68f8:	e7b6      	b.n	6868 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
    68fa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    68fe:	e7b3      	b.n	6868 <bt_gatt_indicate+0x50>
    6900:	200000cc 	.word	0x200000cc
    6904:	0001a5ef 	.word	0x0001a5ef
    6908:	0000697d 	.word	0x0000697d

0000690c <sc_process>:
{
    690c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    690e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    6912:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    6916:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    691a:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    691e:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    6920:	f1a0 0120 	sub.w	r1, r0, #32
    6924:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6928:	f3bf 8f5b 	dmb	ish
    692c:	e854 2f00 	ldrex	r2, [r4]
    6930:	f022 0201 	bic.w	r2, r2, #1
    6934:	e844 2000 	strex	r0, r2, [r4]
    6938:	2800      	cmp	r0, #0
    693a:	d1f7      	bne.n	692c <sc_process+0x20>
    693c:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    6940:	4a0c      	ldr	r2, [pc, #48]	; (6974 <sc_process+0x68>)
    6942:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    6946:	4a0c      	ldr	r2, [pc, #48]	; (6978 <sc_process+0x6c>)
    6948:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    694c:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    694e:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    6950:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    6954:	2204      	movs	r2, #4
	sc->start = 0U;
    6956:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    695a:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    695e:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6962:	f7ff ff59 	bl	6818 <bt_gatt_indicate>
    6966:	b918      	cbnz	r0, 6970 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    6968:	2101      	movs	r1, #1
    696a:	4620      	mov	r0, r4
    696c:	f013 feda 	bl	1a724 <atomic_set_bit>
}
    6970:	b002      	add	sp, #8
    6972:	bd10      	pop	{r4, pc}
    6974:	0001cc7c 	.word	0x0001cc7c
    6978:	000064f5 	.word	0x000064f5

0000697c <notify_cb>:
{
    697c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    697e:	4b32      	ldr	r3, [pc, #200]	; (6a48 <notify_cb+0xcc>)
{
    6980:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    6982:	6882      	ldr	r2, [r0, #8]
    6984:	429a      	cmp	r2, r3
{
    6986:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    6988:	d12e      	bne.n	69e8 <notify_cb+0x6c>
	ccc = attr->user_data;
    698a:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    698c:	4b2f      	ldr	r3, [pc, #188]	; (6a4c <notify_cb+0xd0>)
    698e:	429f      	cmp	r7, r3
    6990:	d11a      	bne.n	69c8 <notify_cb+0x4c>
    6992:	4d2f      	ldr	r5, [pc, #188]	; (6a50 <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    6994:	2300      	movs	r3, #0
    6996:	2207      	movs	r2, #7
    6998:	4669      	mov	r1, sp
    699a:	1c68      	adds	r0, r5, #1
    699c:	9300      	str	r3, [sp, #0]
    699e:	f8cd 3003 	str.w	r3, [sp, #3]
    69a2:	f012 fa1c 	bl	18dde <memcmp>
    69a6:	b178      	cbz	r0, 69c8 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    69a8:	4629      	mov	r1, r5
    69aa:	2207      	movs	r2, #7
    69ac:	f811 0b01 	ldrb.w	r0, [r1], #1
    69b0:	f7fe fdaa 	bl	5508 <bt_conn_lookup_state_le>
			if (!conn) {
    69b4:	b9e0      	cbnz	r0, 69f0 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
    69b6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    69b8:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    69ba:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    69bc:	f811 0b01 	ldrb.w	r0, [r1], #1
    69c0:	8853      	ldrh	r3, [r2, #2]
    69c2:	8812      	ldrh	r2, [r2, #0]
    69c4:	f014 f83b 	bl	1aa3e <sc_save>
		if (cfg->value != data->type) {
    69c8:	893a      	ldrh	r2, [r7, #8]
    69ca:	89a3      	ldrh	r3, [r4, #12]
    69cc:	429a      	cmp	r2, r3
    69ce:	d10b      	bne.n	69e8 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    69d0:	4639      	mov	r1, r7
    69d2:	f811 0b01 	ldrb.w	r0, [r1], #1
    69d6:	f7fe fd79 	bl	54cc <bt_conn_lookup_addr_le>
		if (!conn) {
    69da:	4605      	mov	r5, r0
    69dc:	b120      	cbz	r0, 69e8 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
    69de:	7a83      	ldrb	r3, [r0, #10]
    69e0:	2b07      	cmp	r3, #7
    69e2:	d008      	beq.n	69f6 <notify_cb+0x7a>
			bt_conn_unref(conn);
    69e4:	f012 ffa1 	bl	1992a <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    69e8:	2701      	movs	r7, #1
}
    69ea:	4638      	mov	r0, r7
    69ec:	b003      	add	sp, #12
    69ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    69f0:	f012 ff9b 	bl	1992a <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    69f4:	e7e8      	b.n	69c8 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    69f6:	697b      	ldr	r3, [r7, #20]
    69f8:	b123      	cbz	r3, 6a04 <notify_cb+0x88>
    69fa:	4631      	mov	r1, r6
    69fc:	4798      	blx	r3
    69fe:	b908      	cbnz	r0, 6a04 <notify_cb+0x88>
			bt_conn_unref(conn);
    6a00:	4628      	mov	r0, r5
    6a02:	e7ef      	b.n	69e4 <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
    6a04:	2214      	movs	r2, #20
    6a06:	4631      	mov	r1, r6
    6a08:	4628      	mov	r0, r5
    6a0a:	f014 f8bd 	bl	1ab88 <bt_gatt_check_perm>
    6a0e:	4607      	mov	r7, r0
    6a10:	2800      	cmp	r0, #0
    6a12:	d1e9      	bne.n	69e8 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
    6a14:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    6a16:	88a1      	ldrh	r1, [r4, #4]
    6a18:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    6a1a:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    6a1c:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    6a1e:	d10f      	bne.n	6a40 <notify_cb+0xc4>
			err = gatt_indicate(conn, data->handle,
    6a20:	f7ff feb0 	bl	6784 <gatt_indicate>
			if (err == 0) {
    6a24:	4606      	mov	r6, r0
    6a26:	b918      	cbnz	r0, 6a30 <notify_cb+0xb4>
				data->ind_params->_ref++;
    6a28:	6922      	ldr	r2, [r4, #16]
    6a2a:	7d93      	ldrb	r3, [r2, #22]
    6a2c:	3301      	adds	r3, #1
    6a2e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    6a30:	4628      	mov	r0, r5
    6a32:	f012 ff7a 	bl	1992a <bt_conn_unref>
		if (err < 0) {
    6a36:	2e00      	cmp	r6, #0
    6a38:	dbd7      	blt.n	69ea <notify_cb+0x6e>
		data->err = 0;
    6a3a:	2300      	movs	r3, #0
    6a3c:	60a3      	str	r3, [r4, #8]
    6a3e:	e7d3      	b.n	69e8 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    6a40:	f014 f8c5 	bl	1abce <gatt_notify>
    6a44:	4606      	mov	r6, r0
    6a46:	e7f3      	b.n	6a30 <notify_cb+0xb4>
    6a48:	0001a953 	.word	0x0001a953
    6a4c:	2000023c 	.word	0x2000023c
    6a50:	2000278c 	.word	0x2000278c

00006a54 <bt_gatt_att_max_mtu_changed>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    6a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    6a56:	4b08      	ldr	r3, [pc, #32]	; (6a78 <bt_gatt_att_max_mtu_changed+0x24>)
    6a58:	681c      	ldr	r4, [r3, #0]
    6a5a:	4605      	mov	r5, r0
    6a5c:	460e      	mov	r6, r1
    6a5e:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    6a60:	b14c      	cbz	r4, 6a76 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    6a62:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    6a66:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    6a68:	b11b      	cbz	r3, 6a72 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    6a6a:	463a      	mov	r2, r7
    6a6c:	4631      	mov	r1, r6
    6a6e:	4628      	mov	r0, r5
    6a70:	4798      	blx	r3
	return node->next;
    6a72:	6864      	ldr	r4, [r4, #4]
    6a74:	e7f4      	b.n	6a60 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    6a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a78:	20001454 	.word	0x20001454

00006a7c <db_hash_read>:
{
    6a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    6a7e:	4915      	ldr	r1, [pc, #84]	; (6ad4 <db_hash_read+0x58>)
{
    6a80:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    6a84:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    6a86:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    6a8a:	461f      	mov	r7, r3
    6a8c:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    6a8e:	f015 fab0 	bl	1bff2 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6a92:	f3bf 8f5b 	dmb	ish
    6a96:	4b10      	ldr	r3, [pc, #64]	; (6ad8 <db_hash_read+0x5c>)
    6a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6a9a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    6a9e:	075b      	lsls	r3, r3, #29
    6aa0:	d401      	bmi.n	6aa6 <db_hash_read+0x2a>
		db_hash_gen(true);
    6aa2:	f7ff fe35 	bl	6710 <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
    6aa6:	2101      	movs	r1, #1
    6aa8:	4620      	mov	r0, r4
    6aaa:	f014 f8c4 	bl	1ac36 <bt_gatt_change_aware>
	if (offset > value_len) {
    6aae:	2e10      	cmp	r6, #16
    6ab0:	d80c      	bhi.n	6acc <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
    6ab2:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    6ab6:	4909      	ldr	r1, [pc, #36]	; (6adc <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
    6ab8:	42bc      	cmp	r4, r7
    6aba:	bfa8      	it	ge
    6abc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    6abe:	4622      	mov	r2, r4
    6ac0:	4431      	add	r1, r6
    6ac2:	4628      	mov	r0, r5
    6ac4:	f012 f99c 	bl	18e00 <memcpy>
}
    6ac8:	4620      	mov	r0, r4
    6aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    6acc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    6ad0:	e7fa      	b.n	6ac8 <db_hash_read+0x4c>
    6ad2:	bf00      	nop
    6ad4:	20000c58 	.word	0x20000c58
    6ad8:	20000c80 	.word	0x20000c80
    6adc:	20000c18 	.word	0x20000c18

00006ae0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    6ae0:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6ae2:	4603      	mov	r3, r0
    6ae4:	4a14      	ldr	r2, [pc, #80]	; (6b38 <bt_gatt_disconnected+0x58>)
{
    6ae6:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6ae8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6aec:	2001      	movs	r0, #1
    6aee:	f014 f83e 	bl	1ab6e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    6af2:	4628      	mov	r0, r5
    6af4:	f7ff fc82 	bl	63fc <find_cf_cfg>
	if (!cfg) {
    6af8:	4604      	mov	r4, r0
    6afa:	b1e0      	cbz	r0, 6b36 <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    6afc:	f105 0688 	add.w	r6, r5, #136	; 0x88
    6b00:	7a28      	ldrb	r0, [r5, #8]
    6b02:	4631      	mov	r1, r6
    6b04:	f012 fcc0 	bl	19488 <bt_addr_le_is_bonded>
    6b08:	b920      	cbnz	r0, 6b14 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    6b0a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    6b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    6b10:	f013 bdeb 	b.w	1a6ea <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    6b14:	1c60      	adds	r0, r4, #1
    6b16:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6b18:	340c      	adds	r4, #12
    6b1a:	f013 fd6c 	bl	1a5f6 <bt_addr_le_copy>
    6b1e:	f3bf 8f5b 	dmb	ish
    6b22:	e854 3f00 	ldrex	r3, [r4]
    6b26:	f023 0302 	bic.w	r3, r3, #2
    6b2a:	e844 3200 	strex	r2, r3, [r4]
    6b2e:	2a00      	cmp	r2, #0
    6b30:	d1f7      	bne.n	6b22 <bt_gatt_disconnected+0x42>
    6b32:	f3bf 8f5b 	dmb	ish
}
    6b36:	bd70      	pop	{r4, r5, r6, pc}
    6b38:	00006459 	.word	0x00006459

00006b3c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    6b3c:	4b04      	ldr	r3, [pc, #16]	; (6b50 <bt_smp_accept+0x14>)
    6b3e:	6818      	ldr	r0, [r3, #0]
    6b40:	b918      	cbnz	r0, 6b4a <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.ops = &ops;
    6b42:	4a04      	ldr	r2, [pc, #16]	; (6b54 <bt_smp_accept+0x18>)
    6b44:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan;
    6b46:	600b      	str	r3, [r1, #0]

		return 0;
    6b48:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    6b4a:	f06f 000b 	mvn.w	r0, #11
}
    6b4e:	4770      	bx	lr
    6b50:	20000cd8 	.word	0x20000cd8
    6b54:	0001cd80 	.word	0x0001cd80

00006b58 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    6b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b5c:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6b5e:	1dc2      	adds	r2, r0, #7
    6b60:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6b64:	1e75      	subs	r5, r6, #1
{
    6b66:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6b68:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    6b6a:	6018      	str	r0, [r3, #0]
{
    6b6c:	b082      	sub	sp, #8
    6b6e:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    6b70:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    6b72:	2100      	movs	r1, #0
    6b74:	2204      	movs	r2, #4
    6b76:	fb07 0005 	mla	r0, r7, r5, r0
    6b7a:	f012 f94c 	bl	18e16 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    6b7e:	b1bd      	cbz	r5, 6bb0 <mem_init+0x58>
    6b80:	3e02      	subs	r6, #2
    6b82:	b2b6      	uxth	r6, r6
    6b84:	fb06 7307 	mla	r3, r6, r7, r7
    6b88:	fb06 f807 	mul.w	r8, r6, r7
    6b8c:	441c      	add	r4, r3
    6b8e:	eba8 0803 	sub.w	r8, r8, r3
    6b92:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    6b94:	2204      	movs	r2, #4
    6b96:	eb04 0008 	add.w	r0, r4, r8
    6b9a:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    6b9e:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    6ba0:	f012 f92e 	bl	18e00 <memcpy>
	while (mem_count--) {
    6ba4:	42b5      	cmp	r5, r6
    6ba6:	eba4 0407 	sub.w	r4, r4, r7
    6baa:	f105 0501 	add.w	r5, r5, #1
    6bae:	d1f1      	bne.n	6b94 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    6bb0:	b002      	add	sp, #8
    6bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bb6:	bf00      	nop

00006bb8 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    6bb8:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    6bba:	6805      	ldr	r5, [r0, #0]
{
    6bbc:	b082      	sub	sp, #8
	if (*mem_head) {
    6bbe:	b195      	cbz	r5, 6be6 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    6bc0:	1deb      	adds	r3, r5, #7
    6bc2:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    6bc6:	2204      	movs	r2, #4
    6bc8:	4604      	mov	r4, r0
    6bca:	4629      	mov	r1, r5
    6bcc:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    6bd0:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    6bd2:	f012 f915 	bl	18e00 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    6bd6:	9b01      	ldr	r3, [sp, #4]
    6bd8:	b123      	cbz	r3, 6be4 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    6bda:	1dda      	adds	r2, r3, #7
    6bdc:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    6be0:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    6be2:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    6be4:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    6be6:	4628      	mov	r0, r5
    6be8:	b002      	add	sp, #8
    6bea:	bd70      	pop	{r4, r5, r6, pc}

00006bec <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    6bec:	680b      	ldr	r3, [r1, #0]
{
    6bee:	b570      	push	{r4, r5, r6, lr}
    6bf0:	460c      	mov	r4, r1
    6bf2:	4605      	mov	r5, r0
	if (*mem_head) {
    6bf4:	b183      	cbz	r3, 6c18 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    6bf6:	3307      	adds	r3, #7
    6bf8:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    6bfc:	881e      	ldrh	r6, [r3, #0]
    6bfe:	3601      	adds	r6, #1
    6c00:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    6c02:	2204      	movs	r2, #4
    6c04:	4621      	mov	r1, r4
    6c06:	4628      	mov	r0, r5
    6c08:	f012 f8fa 	bl	18e00 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    6c0c:	1deb      	adds	r3, r5, #7
    6c0e:	f023 0303 	bic.w	r3, r3, #3
    6c12:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    6c14:	6025      	str	r5, [r4, #0]
}
    6c16:	bd70      	pop	{r4, r5, r6, pc}
    6c18:	2601      	movs	r6, #1
    6c1a:	e7f2      	b.n	6c02 <mem_release+0x16>

00006c1c <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    6c1c:	fb02 0001 	mla	r0, r2, r1, r0
    6c20:	4770      	bx	lr
    6c22:	bf00      	nop

00006c24 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    6c24:	1a40      	subs	r0, r0, r1
    6c26:	b280      	uxth	r0, r0
}
    6c28:	fbb0 f0f2 	udiv	r0, r0, r2
    6c2c:	4770      	bx	lr
    6c2e:	bf00      	nop

00006c30 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    6c30:	1e53      	subs	r3, r2, #1
	src += len;
    6c32:	4411      	add	r1, r2
	while (len--) {
    6c34:	b29b      	uxth	r3, r3
    6c36:	b142      	cbz	r2, 6c4a <mem_rcopy+0x1a>
    6c38:	43db      	mvns	r3, r3
    6c3a:	3801      	subs	r0, #1
    6c3c:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    6c3e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    6c42:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    6c46:	4291      	cmp	r1, r2
    6c48:	d1f9      	bne.n	6c3e <mem_rcopy+0xe>
	}
}
    6c4a:	4770      	bx	lr

00006c4c <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    6c4c:	4401      	add	r1, r0
    6c4e:	e002      	b.n	6c56 <mem_nz+0xa>
		if (*src++) {
    6c50:	f810 3b01 	ldrb.w	r3, [r0], #1
    6c54:	b91b      	cbnz	r3, 6c5e <mem_nz+0x12>
	while (len--) {
    6c56:	4288      	cmp	r0, r1
    6c58:	d1fa      	bne.n	6c50 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    6c5a:	2000      	movs	r0, #0
    6c5c:	4770      	bx	lr
			return 1;
    6c5e:	2001      	movs	r0, #1
}
    6c60:	4770      	bx	lr
    6c62:	bf00      	nop

00006c64 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    6c64:	6010      	str	r0, [r2, #0]
    6c66:	6008      	str	r0, [r1, #0]

	return link;
}
    6c68:	4770      	bx	lr
    6c6a:	bf00      	nop

00006c6c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    6c6c:	680a      	ldr	r2, [r1, #0]
{
    6c6e:	4603      	mov	r3, r0
	if (*head != *tail) {
    6c70:	6800      	ldr	r0, [r0, #0]
    6c72:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    6c74:	bf05      	ittet	eq
    6c76:	2200      	moveq	r2, #0
    6c78:	600a      	streq	r2, [r1, #0]
		return NULL;
    6c7a:	2000      	movne	r0, #0
	*head = *tail = NULL;
    6c7c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    6c7e:	4770      	bx	lr

00006c80 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    6c80:	f8d2 c000 	ldr.w	ip, [r2]
    6c84:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    6c88:	f8d2 c000 	ldr.w	ip, [r2]
    6c8c:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    6c90:	6010      	str	r0, [r2, #0]

	return link;
}
    6c92:	4770      	bx	lr

00006c94 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    6c94:	4288      	cmp	r0, r1
    6c96:	d003      	beq.n	6ca0 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    6c98:	b11a      	cbz	r2, 6ca2 <memq_peek+0xe>
		*mem = head->mem;
    6c9a:	6843      	ldr	r3, [r0, #4]
    6c9c:	6013      	str	r3, [r2, #0]
    6c9e:	4770      	bx	lr
		return NULL;
    6ca0:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    6ca2:	4770      	bx	lr

00006ca4 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    6ca4:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    6ca6:	4283      	cmp	r3, r0
    6ca8:	d009      	beq.n	6cbe <memq_dequeue+0x1a>
	if (mem) {
    6caa:	b12a      	cbz	r2, 6cb8 <memq_dequeue+0x14>
		*mem = head->mem;
    6cac:	6858      	ldr	r0, [r3, #4]
    6cae:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    6cb0:	681a      	ldr	r2, [r3, #0]
    6cb2:	600a      	str	r2, [r1, #0]

	return old_head;
}
    6cb4:	4618      	mov	r0, r3
    6cb6:	4770      	bx	lr
	if (old_head == NULL) {
    6cb8:	2b00      	cmp	r3, #0
    6cba:	d1f9      	bne.n	6cb0 <memq_dequeue+0xc>
    6cbc:	e7fa      	b.n	6cb4 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    6cbe:	2300      	movs	r3, #0
    6cc0:	e7f8      	b.n	6cb4 <memq_dequeue+0x10>
    6cc2:	bf00      	nop

00006cc4 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    6cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cc8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 6cfc <mayfly_init+0x38>
    6ccc:	4e0c      	ldr	r6, [pc, #48]	; (6d00 <mayfly_init+0x3c>)
    6cce:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    6cd0:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    6cd4:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    6cd6:	1d22      	adds	r2, r4, #4
    6cd8:	4621      	mov	r1, r4
    6cda:	4628      	mov	r0, r5
		while (caller_id--) {
    6cdc:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    6cde:	f7ff ffc1 	bl	6c64 <memq_init>
		while (caller_id--) {
    6ce2:	42b4      	cmp	r4, r6
    6ce4:	f1a5 0508 	sub.w	r5, r5, #8
    6ce8:	d1f5      	bne.n	6cd6 <mayfly_init+0x12>
	while (callee_id--) {
    6cea:	3f04      	subs	r7, #4
    6cec:	1d3b      	adds	r3, r7, #4
    6cee:	f1a8 0820 	sub.w	r8, r8, #32
    6cf2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    6cf6:	d1eb      	bne.n	6cd0 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    6cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cfc:	200014ec 	.word	0x200014ec
    6d00:	2000157c 	.word	0x2000157c

00006d04 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    6d04:	b410      	push	{r4}
    6d06:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    6d08:	4c15      	ldr	r4, [pc, #84]	; (6d60 <mayfly_enable+0x5c>)
{
    6d0a:	468c      	mov	ip, r1
	if (enable) {
    6d0c:	b192      	cbz	r2, 6d34 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    6d0e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    6d12:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    6d16:	0100      	lsls	r0, r0, #4
    6d18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    6d1c:	4421      	add	r1, r4
    6d1e:	7a48      	ldrb	r0, [r1, #9]
    6d20:	7a0c      	ldrb	r4, [r1, #8]
    6d22:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    6d24:	bf04      	itt	eq
    6d26:	3001      	addeq	r0, #1
    6d28:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    6d2a:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    6d2c:	4661      	mov	r1, ip
    6d2e:	4618      	mov	r0, r3
    6d30:	f00d b83a 	b.w	13da8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    6d34:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    6d38:	0112      	lsls	r2, r2, #4
    6d3a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6d3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6d42:	4423      	add	r3, r4
    6d44:	7a9c      	ldrb	r4, [r3, #10]
    6d46:	7ada      	ldrb	r2, [r3, #11]
    6d48:	42a2      	cmp	r2, r4
    6d4a:	d001      	beq.n	6d50 <mayfly_enable+0x4c>
}
    6d4c:	bc10      	pop	{r4}
    6d4e:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    6d50:	3201      	adds	r2, #1
    6d52:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    6d54:	4b03      	ldr	r3, [pc, #12]	; (6d64 <mayfly_enable+0x60>)
    6d56:	2201      	movs	r2, #1
    6d58:	545a      	strb	r2, [r3, r1]
}
    6d5a:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    6d5c:	f00d b87a 	b.w	13e54 <mayfly_pend>
    6d60:	200014f8 	.word	0x200014f8
    6d64:	200014f4 	.word	0x200014f4

00006d68 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    6d68:	b570      	push	{r4, r5, r6, lr}
    6d6a:	b082      	sub	sp, #8
    6d6c:	4606      	mov	r6, r0
    6d6e:	9101      	str	r1, [sp, #4]
    6d70:	461c      	mov	r4, r3
    6d72:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    6d74:	b32a      	cbz	r2, 6dc2 <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    6d76:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    6d78:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    6d7a:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    6d7c:	f012 0203 	ands.w	r2, r2, #3
    6d80:	d005      	beq.n	6d8e <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
    6d82:	2a01      	cmp	r2, #1
    6d84:	d042      	beq.n	6e0c <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
    6d86:	3301      	adds	r3, #1
    6d88:	b2db      	uxtb	r3, r3
    6d8a:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    6d8c:	e00f      	b.n	6dae <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    6d8e:	3301      	adds	r3, #1
    6d90:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    6d92:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
    6d94:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    6d96:	2304      	movs	r3, #4
    6d98:	fb11 3105 	smlabb	r1, r1, r5, r3
    6d9c:	4a1c      	ldr	r2, [pc, #112]	; (6e10 <mayfly_enqueue+0xa8>)
    6d9e:	6860      	ldr	r0, [r4, #4]
    6da0:	230c      	movs	r3, #12
    6da2:	fb13 1306 	smlabb	r3, r3, r6, r1
    6da6:	441a      	add	r2, r3
    6da8:	4621      	mov	r1, r4
    6daa:	f7ff ff69 	bl	6c80 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    6dae:	4b19      	ldr	r3, [pc, #100]	; (6e14 <mayfly_enqueue+0xac>)
    6db0:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    6db2:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    6db4:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    6db6:	4629      	mov	r1, r5
    6db8:	f00d f84c 	bl	13e54 <mayfly_pend>

	return 0;
    6dbc:	2000      	movs	r0, #0
}
    6dbe:	b002      	add	sp, #8
    6dc0:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6dc2:	f00d f831 	bl	13e28 <mayfly_prio_is_equal>
    6dc6:	2800      	cmp	r0, #0
    6dc8:	d0d5      	beq.n	6d76 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
    6dca:	4629      	mov	r1, r5
    6dcc:	4630      	mov	r0, r6
    6dce:	f00d f80b 	bl	13de8 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6dd2:	2800      	cmp	r0, #0
    6dd4:	d0cf      	beq.n	6d76 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
    6dd6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6dda:	0112      	lsls	r2, r2, #4
    6ddc:	490c      	ldr	r1, [pc, #48]	; (6e10 <mayfly_enqueue+0xa8>)
    6dde:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    6de2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6de6:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    6de8:	7a9a      	ldrb	r2, [r3, #10]
    6dea:	7adb      	ldrb	r3, [r3, #11]
    6dec:	429a      	cmp	r2, r3
    6dee:	d1c2      	bne.n	6d76 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
    6df0:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    6df2:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    6df4:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    6df6:	0792      	lsls	r2, r2, #30
    6df8:	d002      	beq.n	6e00 <mayfly_enqueue+0x98>
		m->_req = ack + 2;
    6dfa:	3302      	adds	r3, #2
    6dfc:	b2db      	uxtb	r3, r3
    6dfe:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    6e00:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    6e04:	4798      	blx	r3
		return 0;
    6e06:	2000      	movs	r0, #0
}
    6e08:	b002      	add	sp, #8
    6e0a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    6e0c:	4610      	mov	r0, r2
    6e0e:	e7d6      	b.n	6dbe <mayfly_enqueue+0x56>
    6e10:	200014f8 	.word	0x200014f8
    6e14:	200014f4 	.word	0x200014f4

00006e18 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    6e18:	4a50      	ldr	r2, [pc, #320]	; (6f5c <mayfly_run+0x144>)
    6e1a:	5c13      	ldrb	r3, [r2, r0]
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	f000 809b 	beq.w	6f58 <mayfly_run+0x140>
{
    6e22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
    6e26:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    6e28:	4f4d      	ldr	r7, [pc, #308]	; (6f60 <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
    6e2a:	5413      	strb	r3, [r2, r0]
{
    6e2c:	b087      	sub	sp, #28
	uint8_t enable = 0U;
    6e2e:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    6e30:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
    6e34:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    6e38:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
    6e3c:	9303      	str	r3, [sp, #12]
    6e3e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    6e42:	f10b 0804 	add.w	r8, fp, #4
    6e46:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
    6e4a:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
    6e4e:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    6e50:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    6e54:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    6e56:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    6e58:	f7ff ff1c 	bl	6c94 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    6e5c:	f107 0624 	add.w	r6, r7, #36	; 0x24
    6e60:	4683      	mov	fp, r0
    6e62:	2800      	cmp	r0, #0
    6e64:	d034      	beq.n	6ed0 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    6e66:	9c05      	ldr	r4, [sp, #20]
    6e68:	7863      	ldrb	r3, [r4, #1]
    6e6a:	7825      	ldrb	r5, [r4, #0]
    6e6c:	1aed      	subs	r5, r5, r3
    6e6e:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    6e72:	2d01      	cmp	r5, #1
    6e74:	d106      	bne.n	6e84 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    6e76:	3b01      	subs	r3, #1
    6e78:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    6e7a:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
    6e7e:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    6e80:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    6e82:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    6e84:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    6e86:	1ac3      	subs	r3, r0, r3
    6e88:	f003 0303 	and.w	r3, r3, #3
    6e8c:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    6e8e:	f04f 0200 	mov.w	r2, #0
    6e92:	4631      	mov	r1, r6
	req = m->_req;
    6e94:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    6e98:	d00f      	beq.n	6eba <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
    6e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    6e9c:	f7ff ff02 	bl	6ca4 <memq_dequeue>
		ack = m->_ack;
    6ea0:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    6ea4:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    6ea6:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    6eaa:	eba3 030c 	sub.w	r3, r3, ip
    6eae:	f003 0303 	and.w	r3, r3, #3
    6eb2:	2b01      	cmp	r3, #1
		m->_ack = req;
    6eb4:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    6eb8:	d046      	beq.n	6f48 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    6eba:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    6ebe:	aa05      	add	r2, sp, #20
    6ec0:	f7ff fee8 	bl	6c94 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    6ec4:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    6ec6:	9000      	str	r0, [sp, #0]
    6ec8:	4683      	mov	fp, r0
			if (state == 1U) {
    6eca:	d02b      	beq.n	6f24 <mayfly_run+0x10c>
		while (link) {
    6ecc:	2800      	cmp	r0, #0
    6ece:	d1ca      	bne.n	6e66 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    6ed0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    6ed4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    6ed8:	429a      	cmp	r2, r3
    6eda:	d003      	beq.n	6ee4 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    6edc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    6ee0:	2301      	movs	r3, #1
    6ee2:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    6ee4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    6ee8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    6eec:	429a      	cmp	r2, r3
    6eee:	d003      	beq.n	6ef8 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    6ef0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    6ef4:	2301      	movs	r3, #1
    6ef6:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    6ef8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    6efc:	fa5f f989 	uxtb.w	r9, r9
    6f00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    6f04:	f1a7 070c 	sub.w	r7, r7, #12
    6f08:	d1a1      	bne.n	6e4e <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    6f0a:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    6f0e:	b1c3      	cbz	r3, 6f42 <mayfly_run+0x12a>
    6f10:	9b03      	ldr	r3, [sp, #12]
    6f12:	b9b3      	cbnz	r3, 6f42 <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
    6f14:	461a      	mov	r2, r3
    6f16:	4651      	mov	r1, sl
    6f18:	4650      	mov	r0, sl
	}
}
    6f1a:	b007      	add	sp, #28
    6f1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    6f20:	f00c bf42 	b.w	13da8 <mayfly_enable_cb>
				if (caller_id || link) {
    6f24:	f1b9 0f00 	cmp.w	r9, #0
    6f28:	d101      	bne.n	6f2e <mayfly_run+0x116>
    6f2a:	2800      	cmp	r0, #0
    6f2c:	d0d0      	beq.n	6ed0 <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
    6f2e:	f8dd a008 	ldr.w	sl, [sp, #8]
    6f32:	4a0a      	ldr	r2, [pc, #40]	; (6f5c <mayfly_run+0x144>)
    6f34:	2301      	movs	r3, #1
    6f36:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    6f3a:	4651      	mov	r1, sl
    6f3c:	4650      	mov	r0, sl
    6f3e:	f00c ff89 	bl	13e54 <mayfly_pend>
}
    6f42:	b007      	add	sp, #28
    6f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    6f48:	4642      	mov	r2, r8
    6f4a:	4621      	mov	r1, r4
    6f4c:	4658      	mov	r0, fp
			m->_ack = ack;
    6f4e:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    6f52:	f7ff fe95 	bl	6c80 <memq_enqueue>
    6f56:	e7b0      	b.n	6eba <mayfly_run+0xa2>
    6f58:	4770      	bx	lr
    6f5a:	bf00      	nop
    6f5c:	200014f4 	.word	0x200014f4
    6f60:	200014f8 	.word	0x200014f8

00006f64 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    6f64:	1e4b      	subs	r3, r1, #1
    6f66:	b2db      	uxtb	r3, r3
    6f68:	b171      	cbz	r1, 6f88 <util_ones_count_get+0x24>
    6f6a:	1e41      	subs	r1, r0, #1
    6f6c:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    6f70:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    6f72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    6f76:	b123      	cbz	r3, 6f82 <util_ones_count_get+0x1e>
			bite &= (bite - 1);
    6f78:	1e5a      	subs	r2, r3, #1
			one_count++;
    6f7a:	3001      	adds	r0, #1
		while (bite) {
    6f7c:	4013      	ands	r3, r2
			one_count++;
    6f7e:	b2c0      	uxtb	r0, r0
		while (bite) {
    6f80:	d1fa      	bne.n	6f78 <util_ones_count_get+0x14>
	while (octets_len--) {
    6f82:	4561      	cmp	r1, ip
    6f84:	d1f5      	bne.n	6f72 <util_ones_count_get+0xe>
    6f86:	4770      	bx	lr
	uint8_t one_count = 0U;
    6f88:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    6f8a:	4770      	bx	lr

00006f8c <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
    6f8c:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    6f8e:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
    6f90:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    6f92:	2bff      	cmp	r3, #255	; 0xff
    6f94:	d014      	beq.n	6fc0 <ticker_dequeue+0x34>
		ticker_current = &node[current];
    6f96:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
    6f9a:	428b      	cmp	r3, r1
		ticker_current = &node[current];
    6f9c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
    6fa0:	d028      	beq.n	6ff4 <ticker_dequeue+0x68>
	total = 0U;
    6fa2:	f04f 0c00 	mov.w	ip, #0
    6fa6:	e001      	b.n	6fac <ticker_dequeue+0x20>
		if (current == id) {
    6fa8:	4299      	cmp	r1, r3
    6faa:	d00b      	beq.n	6fc4 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
    6fac:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
    6fae:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
    6fb0:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
    6fb2:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    6fb4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    6fb8:	44a4      	add	ip, r4
		ticker_current = &node[current];
    6fba:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
    6fbe:	d1f3      	bne.n	6fa8 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    6fc0:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    6fc2:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
    6fc4:	4571      	cmp	r1, lr
    6fc6:	d018      	beq.n	6ffa <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
    6fc8:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
    6fca:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
    6fcc:	fa0f fe8e 	sxth.w	lr, lr
    6fd0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    6fd4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    6fd8:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
    6fdc:	7813      	ldrb	r3, [r2, #0]
    6fde:	2bff      	cmp	r3, #255	; 0xff
    6fe0:	d006      	beq.n	6ff0 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
    6fe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6fe6:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    6fea:	68ab      	ldr	r3, [r5, #8]
    6fec:	4403      	add	r3, r0
    6fee:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
    6ff0:	4460      	add	r0, ip
}
    6ff2:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
    6ff4:	469e      	mov	lr, r3
	total = 0U;
    6ff6:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
    6ffa:	7813      	ldrb	r3, [r2, #0]
    6ffc:	7743      	strb	r3, [r0, #29]
    6ffe:	e7e4      	b.n	6fca <ticker_dequeue+0x3e>

00007000 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    7000:	eba2 0c01 	sub.w	ip, r2, r1
    7004:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    7008:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    700a:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    700c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    700e:	d10a      	bne.n	7026 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7010:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    7014:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    7016:	42a3      	cmp	r3, r4
    7018:	d914      	bls.n	7044 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
    701a:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    701c:	2100      	movs	r1, #0
}
    701e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    7020:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7022:	6141      	str	r1, [r0, #20]
}
    7024:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7026:	1a89      	subs	r1, r1, r2
    7028:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    702c:	428b      	cmp	r3, r1
    702e:	d806      	bhi.n	703e <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
    7030:	4421      	add	r1, r4
    7032:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    7034:	2300      	movs	r3, #0
}
    7036:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    7038:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    703a:	6141      	str	r1, [r0, #20]
}
    703c:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
    703e:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    7040:	42a3      	cmp	r3, r4
    7042:	d8ea      	bhi.n	701a <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
    7044:	1ae1      	subs	r1, r4, r3
    7046:	e7f5      	b.n	7034 <ticks_to_expire_prep+0x34>

00007048 <ticker_job_list_insert>:
{
    7048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    704c:	b087      	sub	sp, #28
    704e:	4603      	mov	r3, r0
	count_user = instance->count_user;
    7050:	7a42      	ldrb	r2, [r0, #9]
{
    7052:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
    7054:	6800      	ldr	r0, [r0, #0]
    7056:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
    7058:	6858      	ldr	r0, [r3, #4]
    705a:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    705c:	2a00      	cmp	r2, #0
    705e:	f000 80f4 	beq.w	724a <ticker_job_list_insert+0x202>
    7062:	1e53      	subs	r3, r2, #1
    7064:	b2db      	uxtb	r3, r3
    7066:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    706a:	460f      	mov	r7, r1
    706c:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    706e:	9b03      	ldr	r3, [sp, #12]
    7070:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    7072:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    7074:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    7076:	2fff      	cmp	r7, #255	; 0xff
    7078:	d05e      	beq.n	7138 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
    707a:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    707e:	9b02      	ldr	r3, [sp, #8]
    7080:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    7084:	46b8      	mov	r8, r7
				insert_head = ticker->next;
    7086:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
    708a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    708e:	2500      	movs	r5, #0
	node = &instance->nodes[0];
    7090:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
    7092:	f04f 09ff 	mov.w	r9, #255	; 0xff
    7096:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
    709a:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
    709e:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
    70a0:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    70a4:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
    70a6:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    70aa:	d10f      	bne.n	70cc <ticker_job_list_insert+0x84>
    70ac:	e0c8      	b.n	7240 <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    70ae:	1a09      	subs	r1, r1, r0
    70b0:	d106      	bne.n	70c0 <ticker_job_list_insert+0x78>
    70b2:	f8bb a01e 	ldrh.w	sl, [fp, #30]
    70b6:	f8bc c01e 	ldrh.w	ip, [ip, #30]
    70ba:	45e2      	cmp	sl, ip
    70bc:	f200 8086 	bhi.w	71cc <ticker_job_list_insert+0x184>
		current = ticker_current->next;
    70c0:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    70c4:	2bff      	cmp	r3, #255	; 0xff
    70c6:	4691      	mov	r9, r2
    70c8:	d072      	beq.n	71b0 <ticker_job_list_insert+0x168>
    70ca:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
    70cc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    70d0:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
    70d4:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    70d6:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    70da:	4288      	cmp	r0, r1
    70dc:	d9e7      	bls.n	70ae <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
    70de:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    70e2:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    70e6:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
    70ea:	d166      	bne.n	71ba <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
    70ec:	9b01      	ldr	r3, [sp, #4]
    70ee:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    70f2:	2aff      	cmp	r2, #255	; 0xff
    70f4:	d008      	beq.n	7108 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
    70f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    70fa:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
    70fe:	f8de 3008 	ldr.w	r3, [lr, #8]
    7102:	1a5b      	subs	r3, r3, r1
    7104:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
    7108:	78a3      	ldrb	r3, [r4, #2]
    710a:	3301      	adds	r3, #1
    710c:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    710e:	2d00      	cmp	r5, #0
    7110:	d0b1      	beq.n	7076 <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7112:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    7116:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7118:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    711a:	2200      	movs	r2, #0
    711c:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    711e:	b113      	cbz	r3, 7126 <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7120:	6b29      	ldr	r1, [r5, #48]	; 0x30
    7122:	4610      	mov	r0, r2
    7124:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    7126:	6863      	ldr	r3, [r4, #4]
    7128:	2b00      	cmp	r3, #0
    712a:	d1a4      	bne.n	7076 <ticker_job_list_insert+0x2e>
					ticker->op_context =
    712c:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
    7130:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
    7132:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    7136:	d1a0      	bne.n	707a <ticker_job_list_insert+0x32>
    7138:	9b03      	ldr	r3, [sp, #12]
    713a:	7898      	ldrb	r0, [r3, #2]
    713c:	42b0      	cmp	r0, r6
    713e:	d02f      	beq.n	71a0 <ticker_job_list_insert+0x158>
    7140:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
    7144:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    7148:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
    714c:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7150:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
    7154:	3601      	adds	r6, #1
    7156:	b2f6      	uxtb	r6, r6
					first = 0U;
    7158:	42b1      	cmp	r1, r6
    715a:	bf08      	it	eq
    715c:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    715e:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
    7160:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    7164:	d11a      	bne.n	719c <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
    7166:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    716a:	9902      	ldr	r1, [sp, #8]
    716c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
    7170:	eb01 1403 	add.w	r4, r1, r3, lsl #4
    7174:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
    7178:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
    717a:	7863      	ldrb	r3, [r4, #1]
    717c:	1a5b      	subs	r3, r3, r1
    717e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7182:	d025      	beq.n	71d0 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7184:	f04f 0300 	mov.w	r3, #0
    7188:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
    718c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
    718e:	2001      	movs	r0, #1
	user_op->status = status;
    7190:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    7192:	b10b      	cbz	r3, 7198 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7194:	6b29      	ldr	r1, [r5, #48]	; 0x30
    7196:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    7198:	f89b 0002 	ldrb.w	r0, [fp, #2]
    719c:	42b0      	cmp	r0, r6
    719e:	d1d1      	bne.n	7144 <ticker_job_list_insert+0xfc>
	while (count_user--) {
    71a0:	9a03      	ldr	r2, [sp, #12]
    71a2:	9905      	ldr	r1, [sp, #20]
    71a4:	4291      	cmp	r1, r2
    71a6:	f1a2 0308 	sub.w	r3, r2, #8
    71aa:	d04e      	beq.n	724a <ticker_job_list_insert+0x202>
    71ac:	9303      	str	r3, [sp, #12]
    71ae:	e75e      	b.n	706e <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
    71b0:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    71b4:	f88b 3000 	strb.w	r3, [fp]
    71b8:	461a      	mov	r2, r3
		node[previous].next = id;
    71ba:	fa0f f989 	sxth.w	r9, r9
    71be:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    71c2:	ea4f 1909 	mov.w	r9, r9, lsl #4
    71c6:	f80e 8009 	strb.w	r8, [lr, r9]
    71ca:	e792      	b.n	70f2 <ticker_job_list_insert+0xaa>
    71cc:	4601      	mov	r1, r0
    71ce:	e786      	b.n	70de <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    71d0:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    71d2:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
    71d4:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
    71d8:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
    71da:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    71de:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    71e2:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
    71e4:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    71e8:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    71ec:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    71f0:	d024      	beq.n	723c <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
    71f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    71f6:	1ad3      	subs	r3, r2, r3
    71f8:	fab3 f383 	clz	r3, r3
    71fc:	095b      	lsrs	r3, r3, #5
    71fe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    7202:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    7206:	429a      	cmp	r2, r3
    7208:	bf88      	it	hi
    720a:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
    720c:	69ab      	ldr	r3, [r5, #24]
    720e:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    7210:	69eb      	ldr	r3, [r5, #28]
    7212:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    7214:	6a2b      	ldr	r3, [r5, #32]
    7216:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    7218:	68ab      	ldr	r3, [r5, #8]
    721a:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    721c:	2300      	movs	r3, #0
	ticker->lazy_periodic =
    721e:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
    7220:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    7222:	686a      	ldr	r2, [r5, #4]
    7224:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    7226:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    7228:	f7ff feea 	bl	7000 <ticks_to_expire_prep>
	ticker->force = 1U;
    722c:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    7230:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    7234:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
    7238:	70e3      	strb	r3, [r4, #3]
}
    723a:	e729      	b.n	7090 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
    723c:	461a      	mov	r2, r3
    723e:	e7e5      	b.n	720c <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
    7240:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
    7244:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    7248:	e75e      	b.n	7108 <ticker_job_list_insert+0xc0>
}
    724a:	b007      	add	sp, #28
    724c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007250 <ticker_worker>:
{
    7250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    7254:	7f82      	ldrb	r2, [r0, #30]
{
    7256:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    7258:	2301      	movs	r3, #1
	if (instance->job_guard) {
    725a:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    725c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    725e:	2a00      	cmp	r2, #0
    7260:	d15b      	bne.n	731a <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
    7262:	7f43      	ldrb	r3, [r0, #29]
    7264:	2bff      	cmp	r3, #255	; 0xff
    7266:	4681      	mov	r9, r0
    7268:	d056      	beq.n	7318 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    726a:	f00c f8ef 	bl	1344c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    726e:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    7272:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    7276:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    727a:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    727c:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    727e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    7282:	f000 813c 	beq.w	74fe <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    7286:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    728a:	42bb      	cmp	r3, r7
    728c:	bf94      	ite	ls
    728e:	2300      	movls	r3, #0
    7290:	2301      	movhi	r3, #1
    7292:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    7294:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
    7298:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
    729c:	f000 8145 	beq.w	752a <ticker_worker+0x2da>
	ticks_expired = 0U;
    72a0:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
    72a4:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    72a8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    72ac:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
    72b0:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    72b4:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    72b6:	42bb      	cmp	r3, r7
    72b8:	d837      	bhi.n	732a <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    72ba:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
    72bc:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
    72c0:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    72c2:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    72c4:	7863      	ldrb	r3, [r4, #1]
    72c6:	1a5b      	subs	r3, r3, r1
    72c8:	b2db      	uxtb	r3, r3
    72ca:	2b01      	cmp	r3, #1
    72cc:	d12a      	bne.n	7324 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
    72ce:	69a6      	ldr	r6, [r4, #24]
    72d0:	2e00      	cmp	r6, #0
    72d2:	d054      	beq.n	737e <ticker_worker+0x12e>
    72d4:	9b03      	ldr	r3, [sp, #12]
    72d6:	2b00      	cmp	r3, #0
    72d8:	d04c      	beq.n	7374 <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
    72da:	8be3      	ldrh	r3, [r4, #30]
    72dc:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    72de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    72e0:	b13b      	cbz	r3, 72f2 <ticker_worker+0xa2>
    72e2:	681a      	ldr	r2, [r3, #0]
    72e4:	b11a      	cbz	r2, 72ee <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    72e6:	7a1a      	ldrb	r2, [r3, #8]
    72e8:	2a00      	cmp	r2, #0
    72ea:	f000 80ef 	beq.w	74cc <ticker_worker+0x27c>
				ext_data->reschedule_state =
    72ee:	2200      	movs	r2, #0
    72f0:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    72f2:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    72f4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    72f8:	3201      	adds	r2, #1
    72fa:	b292      	uxth	r2, r2
    72fc:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    72fe:	b178      	cbz	r0, 7320 <ticker_worker+0xd0>
    7300:	8ba0      	ldrh	r0, [r4, #28]
    7302:	4290      	cmp	r0, r2
    7304:	d20c      	bcs.n	7320 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    7306:	2b00      	cmp	r3, #0
    7308:	f000 80fc 	beq.w	7504 <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    730c:	7a1a      	ldrb	r2, [r3, #8]
    730e:	2a01      	cmp	r2, #1
    7310:	d006      	beq.n	7320 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    7312:	f04f 0c01 	mov.w	ip, #1
    7316:	e036      	b.n	7386 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    7318:	77c2      	strb	r2, [r0, #31]
}
    731a:	b00f      	add	sp, #60	; 0x3c
    731c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    7320:	3901      	subs	r1, #1
    7322:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    7324:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7328:	d1be      	bne.n	72a8 <ticker_worker+0x58>
    732a:	f8dd 9010 	ldr.w	r9, [sp, #16]
    732e:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    7330:	f899 300b 	ldrb.w	r3, [r9, #11]
    7334:	f899 200a 	ldrb.w	r2, [r9, #10]
    7338:	429a      	cmp	r2, r3
    733a:	d10a      	bne.n	7352 <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
    733c:	3201      	adds	r2, #1
    733e:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    7340:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7342:	bf1c      	itt	ne
    7344:	4613      	movne	r3, r2
    7346:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    7348:	9a06      	ldr	r2, [sp, #24]
    734a:	f889 200b 	strb.w	r2, [r9, #11]
    734e:	bf08      	it	eq
    7350:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7352:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7356:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    735a:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
    735c:	2200      	movs	r2, #0
    735e:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7362:	464b      	mov	r3, r9
    7364:	2201      	movs	r2, #1
    7366:	2104      	movs	r1, #4
    7368:	2003      	movs	r0, #3
    736a:	46a4      	mov	ip, r4
}
    736c:	b00f      	add	sp, #60	; 0x3c
    736e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7372:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    7374:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    7378:	9307      	str	r3, [sp, #28]
    737a:	3380      	adds	r3, #128	; 0x80
    737c:	d141      	bne.n	7402 <ticker_worker+0x1b2>
		if (ticker->ext_data) {
    737e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7380:	b1f3      	cbz	r3, 73c0 <ticker_worker+0x170>
    7382:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
    7386:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
    7388:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
    738a:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    738c:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
    738e:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
    7390:	605a      	str	r2, [r3, #4]
		ticker->ack--;
    7392:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
    7394:	2d00      	cmp	r5, #0
    7396:	d0c5      	beq.n	7324 <ticker_worker+0xd4>
					   ticks_expired -
    7398:	9b04      	ldr	r3, [sp, #16]
    739a:	6960      	ldr	r0, [r4, #20]
    739c:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    739e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    73a0:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    73a2:	ebaa 0000 	sub.w	r0, sl, r0
    73a6:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    73a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
    73ac:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
    73ae:	f1bc 0f00 	cmp.w	ip, #0
    73b2:	d016      	beq.n	73e2 <ticker_worker+0x192>
    73b4:	e9cd 3600 	strd	r3, r6, [sp]
    73b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    73bc:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    73be:	e7b1      	b.n	7324 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
    73c0:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    73c2:	3901      	subs	r1, #1
    73c4:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
    73c6:	2d00      	cmp	r5, #0
    73c8:	d0ac      	beq.n	7324 <ticker_worker+0xd4>
			ticks_drift = 0U;
    73ca:	4619      	mov	r1, r3
					   ticks_expired -
    73cc:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    73ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
    73d0:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    73d2:	ebaa 0003 	sub.w	r0, sl, r3
    73d6:	9b04      	ldr	r3, [sp, #16]
    73d8:	695b      	ldr	r3, [r3, #20]
    73da:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
    73dc:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
    73de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    73e2:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    73e6:	e9cd 3600 	strd	r3, r6, [sp]
    73ea:	4663      	mov	r3, ip
    73ec:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    73ee:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
    73f0:	2b00      	cmp	r3, #0
    73f2:	9b03      	ldr	r3, [sp, #12]
    73f4:	bf18      	it	ne
    73f6:	2301      	movne	r3, #1
    73f8:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
    73fa:	2300      	movs	r3, #0
    73fc:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
    73fe:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    7400:	e790      	b.n	7324 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    7402:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    7406:	d0ba      	beq.n	737e <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
    7408:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    740a:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    740c:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
    740e:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    7410:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
    7412:	bf28      	it	cs
    7414:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
    7416:	fb02 5005 	mla	r0, r2, r5, r5
    741a:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
    741c:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
    741e:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
    7422:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
    7424:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
    7428:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
    742a:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
    742c:	46a0      	mov	r8, r4
    742e:	f04f 0c00 	mov.w	ip, #0
    7432:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
    7434:	b21b      	sxth	r3, r3
    7436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    743a:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
    743e:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    7440:	f8d2 e008 	ldr.w	lr, [r2, #8]
    7444:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    7446:	4566      	cmp	r6, ip
    7448:	d339      	bcc.n	74be <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
    744a:	6991      	ldr	r1, [r2, #24]
    744c:	b399      	cbz	r1, 74b6 <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
    744e:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    7450:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    7452:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
    7456:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    745a:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
    745c:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
    745e:	bf28      	it	cs
    7460:	1a0d      	subcs	r5, r1, r0
					  0U :
    7462:	f1b9 0f00 	cmp.w	r9, #0
    7466:	d03e      	beq.n	74e6 <ticker_worker+0x296>
    7468:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
    746c:	b3bc      	cbz	r4, 74de <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    746e:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
    7472:	f8dd 9020 	ldr.w	r9, [sp, #32]
    7476:	45f1      	cmp	r9, lr
    7478:	bf8c      	ite	hi
    747a:	f04f 0e01 	movhi.w	lr, #1
    747e:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
    7482:	bf34      	ite	cc
    7484:	f04f 0901 	movcc.w	r9, #1
    7488:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
    748c:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
    748e:	f892 a003 	ldrb.w	sl, [r2, #3]
    7492:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
    7496:	d30e      	bcc.n	74b6 <ticker_worker+0x266>
    7498:	4592      	cmp	sl, r2
    749a:	d829      	bhi.n	74f0 <ticker_worker+0x2a0>
			    (next_force ||
    749c:	f117 0f80 	cmn.w	r7, #128	; 0x80
    74a0:	d026      	beq.n	74f0 <ticker_worker+0x2a0>
			     next_is_critical ||
    74a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    74a4:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
    74a6:	4295      	cmp	r5, r2
    74a8:	dd02      	ble.n	74b0 <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
    74aa:	f1be 0f00 	cmp.w	lr, #0
    74ae:	d01f      	beq.n	74f0 <ticker_worker+0x2a0>
    74b0:	9a07      	ldr	r2, [sp, #28]
    74b2:	42ba      	cmp	r2, r7
    74b4:	d019      	beq.n	74ea <ticker_worker+0x29a>
			id_head = ticker_next->next;
    74b6:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
    74ba:	2bff      	cmp	r3, #255	; 0xff
    74bc:	d1ba      	bne.n	7434 <ticker_worker+0x1e4>
    74be:	4644      	mov	r4, r8
    74c0:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    74c4:	990a      	ldr	r1, [sp, #40]	; 0x28
    74c6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    74ca:	e758      	b.n	737e <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
    74cc:	8ba2      	ldrh	r2, [r4, #28]
    74ce:	9805      	ldr	r0, [sp, #20]
    74d0:	4282      	cmp	r2, r0
    74d2:	f63f af0c 	bhi.w	72ee <ticker_worker+0x9e>
				ext_data->reschedule_state =
    74d6:	f04f 0201 	mov.w	r2, #1
    74da:	721a      	strb	r2, [r3, #8]
    74dc:	e709      	b.n	72f2 <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
    74de:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
    74e2:	46a1      	mov	r9, r4
    74e4:	e7d2      	b.n	748c <ticker_worker+0x23c>
					  0U :
    74e6:	46ce      	mov	lr, r9
    74e8:	e7c0      	b.n	746c <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
    74ea:	f1b9 0f00 	cmp.w	r9, #0
    74ee:	d0e2      	beq.n	74b6 <ticker_worker+0x266>
    74f0:	4644      	mov	r4, r8
    74f2:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
    74f6:	990a      	ldr	r1, [sp, #40]	; 0x28
    74f8:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    74fc:	e6ef      	b.n	72de <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    74fe:	9b06      	ldr	r3, [sp, #24]
    7500:	9303      	str	r3, [sp, #12]
    7502:	e6c7      	b.n	7294 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    7504:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    7506:	3901      	subs	r1, #1
    7508:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
    750a:	2d00      	cmp	r5, #0
    750c:	f43f af0a 	beq.w	7324 <ticker_worker+0xd4>
			ticks_drift = 0U;
    7510:	4619      	mov	r1, r3
					   ticks_expired -
    7512:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7514:	6a62      	ldr	r2, [r4, #36]	; 0x24
    7516:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
    7518:	ebaa 0003 	sub.w	r0, sl, r3
    751c:	9b04      	ldr	r3, [sp, #16]
    751e:	695b      	ldr	r3, [r3, #20]
    7520:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    7522:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
    7526:	78e3      	ldrb	r3, [r4, #3]
    7528:	e744      	b.n	73b4 <ticker_worker+0x164>
	ticks_expired = 0U;
    752a:	2300      	movs	r3, #0
    752c:	4619      	mov	r1, r3
    752e:	e6ff      	b.n	7330 <ticker_worker+0xe0>

00007530 <ticker_job>:
	if (instance->worker_trigger) {
    7530:	7fc3      	ldrb	r3, [r0, #31]
    7532:	2b00      	cmp	r3, #0
    7534:	f040 8431 	bne.w	7d9a <ticker_job+0x86a>
{
    7538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    753c:	7f82      	ldrb	r2, [r0, #30]
{
    753e:	b08d      	sub	sp, #52	; 0x34
    7540:	4683      	mov	fp, r0
	if (instance->job_guard) {
    7542:	2a00      	cmp	r2, #0
    7544:	f040 808c 	bne.w	7660 <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7548:	7a83      	ldrb	r3, [r0, #10]
    754a:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
    754c:	2001      	movs	r0, #1
    754e:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7552:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    7554:	f8db 0014 	ldr.w	r0, [fp, #20]
    7558:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    755a:	f000 8440 	beq.w	7dde <ticker_job+0x8ae>
	uint8_t idx = *ticks_elapsed_index + 1;
    755e:	3301      	adds	r3, #1
    7560:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    7562:	2b02      	cmp	r3, #2
		idx = 0U;
    7564:	bf08      	it	eq
    7566:	4613      	moveq	r3, r2
		ticks_elapsed =
    7568:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    756c:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
    7570:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
    7574:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
    7576:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
    7578:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
    757a:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
    757c:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    757e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
    7582:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    7586:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
    758a:	f8db 3000 	ldr.w	r3, [fp]
    758e:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    7590:	f8db 3004 	ldr.w	r3, [fp, #4]
    7594:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    7596:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
    7598:	9206      	str	r2, [sp, #24]
	while (count_user--) {
    759a:	b2db      	uxtb	r3, r3
    759c:	2a00      	cmp	r2, #0
    759e:	f000 81d5 	beq.w	794c <ticker_job+0x41c>
		flag_elapsed = 1U;
    75a2:	2201      	movs	r2, #1
    75a4:	920b      	str	r2, [sp, #44]	; 0x2c
    75a6:	9a05      	ldr	r2, [sp, #20]
    75a8:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
    75ac:	2300      	movs	r3, #0
    75ae:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    75b0:	23ff      	movs	r3, #255	; 0xff
    75b2:	9301      	str	r3, [sp, #4]
    75b4:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
    75b6:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
    75ba:	f89a c003 	ldrb.w	ip, [sl, #3]
    75be:	f89a 7002 	ldrb.w	r7, [sl, #2]
    75c2:	4567      	cmp	r7, ip
    75c4:	d044      	beq.n	7650 <ticker_job+0x120>
			if (middle == user->count_user_op) {
    75c6:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
    75ca:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
    75cc:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
    75ce:	b2db      	uxtb	r3, r3
				middle = 0U;
    75d0:	429a      	cmp	r2, r3
    75d2:	bf08      	it	eq
    75d4:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
    75d6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    75da:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
    75de:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    75e2:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
    75e6:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
    75e8:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    75ec:	d942      	bls.n	7674 <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    75ee:	2808      	cmp	r0, #8
    75f0:	d842      	bhi.n	7678 <ticker_job+0x148>
			ticker = &node[user_op->id];
    75f2:	7861      	ldrb	r1, [r4, #1]
    75f4:	9a00      	ldr	r2, [sp, #0]
    75f6:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    75fa:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
    75fe:	786a      	ldrb	r2, [r5, #1]
    7600:	f895 e002 	ldrb.w	lr, [r5, #2]
    7604:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    7608:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    760c:	d034      	beq.n	7678 <ticker_job+0x148>
			    (state == 0U) ||
    760e:	2805      	cmp	r0, #5
    7610:	d041      	beq.n	7696 <ticker_job+0x166>
			if (state == 1U) {
    7612:	2a01      	cmp	r2, #1
    7614:	f040 8118 	bne.w	7848 <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    7618:	2806      	cmp	r0, #6
    761a:	d006      	beq.n	762a <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    761c:	4658      	mov	r0, fp
    761e:	f7ff fcb5 	bl	6f8c <ticker_dequeue>
			ticker->req = ticker->ack;
    7622:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    7624:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
    7626:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    7628:	7861      	ldrb	r1, [r4, #1]
    762a:	f89b 301c 	ldrb.w	r3, [fp, #28]
    762e:	428b      	cmp	r3, r1
    7630:	f000 80d9 	beq.w	77e6 <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7634:	2000      	movs	r0, #0
    7636:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    763a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
    763c:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    763e:	b10b      	cbz	r3, 7644 <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7640:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7642:	4798      	blx	r3
		while (user->middle != user->last) {
    7644:	f89a c003 	ldrb.w	ip, [sl, #3]
    7648:	f89a 7002 	ldrb.w	r7, [sl, #2]
    764c:	4567      	cmp	r7, ip
    764e:	d1ba      	bne.n	75c6 <ticker_job+0x96>
	while (count_user--) {
    7650:	9a05      	ldr	r2, [sp, #20]
    7652:	4552      	cmp	r2, sl
    7654:	f1aa 0308 	sub.w	r3, sl, #8
    7658:	f000 8107 	beq.w	786a <ticker_job+0x33a>
    765c:	469a      	mov	sl, r3
    765e:	e7aa      	b.n	75b6 <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    7660:	6a44      	ldr	r4, [r0, #36]	; 0x24
    7662:	2104      	movs	r1, #4
    7664:	4603      	mov	r3, r0
    7666:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7668:	2004      	movs	r0, #4
    766a:	46a4      	mov	ip, r4
}
    766c:	b00d      	add	sp, #52	; 0x34
    766e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7672:	4760      	bx	ip
    7674:	461f      	mov	r7, r3
    7676:	e7a4      	b.n	75c2 <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7678:	2200      	movs	r2, #0
    767a:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    767e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
    7680:	2001      	movs	r0, #1
    7682:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    7684:	2a00      	cmp	r2, #0
    7686:	d0f5      	beq.n	7674 <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7688:	6b21      	ldr	r1, [r4, #48]	; 0x30
    768a:	4790      	blx	r2
		while (user->middle != user->last) {
    768c:	f89a c003 	ldrb.w	ip, [sl, #3]
    7690:	f89a 7002 	ldrb.w	r7, [sl, #2]
    7694:	e795      	b.n	75c2 <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    7696:	6860      	ldr	r0, [r4, #4]
    7698:	b948      	cbnz	r0, 76ae <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    769a:	68a0      	ldr	r0, [r4, #8]
    769c:	b938      	cbnz	r0, 76ae <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    769e:	68e0      	ldr	r0, [r4, #12]
    76a0:	b928      	cbnz	r0, 76ae <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    76a2:	6920      	ldr	r0, [r4, #16]
    76a4:	b918      	cbnz	r0, 76ae <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
    76a6:	6960      	ldr	r0, [r4, #20]
    76a8:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    76ac:	d0e4      	beq.n	7678 <ticker_job+0x148>
			if (state == 1U) {
    76ae:	2a01      	cmp	r2, #1
    76b0:	f040 80ca 	bne.w	7848 <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    76b4:	4658      	mov	r0, fp
    76b6:	f7ff fc69 	bl	6f8c <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    76ba:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    76be:	60a8      	str	r0, [r5, #8]
    76c0:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    76c2:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
    76c4:	f00b fec2 	bl	1344c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    76c8:	9b02      	ldr	r3, [sp, #8]
    76ca:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    76cc:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    76ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    76d2:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
    76d4:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
    76d6:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
    76d8:	f240 80af 	bls.w	783a <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
    76dc:	696b      	ldr	r3, [r5, #20]
    76de:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
    76e0:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
    76e2:	f8d5 c004 	ldr.w	ip, [r5, #4]
    76e6:	f1bc 0f00 	cmp.w	ip, #0
    76ea:	d051      	beq.n	7790 <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
    76ec:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
    76ee:	2b00      	cmp	r3, #0
    76f0:	d04e      	beq.n	7790 <ticker_job+0x260>
		user_op->params.update.lazy--;
    76f2:	3b01      	subs	r3, #1
    76f4:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    76f6:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
    76f8:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
    76fa:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    76fc:	d223      	bcs.n	7746 <ticker_job+0x216>
    76fe:	f10c 0e01 	add.w	lr, ip, #1
    7702:	f8cd 8018 	str.w	r8, [sp, #24]
    7706:	940a      	str	r4, [sp, #40]	; 0x28
    7708:	e018      	b.n	773c <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
    770a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    770c:	f8df 8228 	ldr.w	r8, [pc, #552]	; 7938 <ticker_job+0x408>
    7710:	4c8a      	ldr	r4, [pc, #552]	; (793c <ticker_job+0x40c>)
    7712:	4488      	add	r8, r1
    7714:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    7716:	bf84      	itt	hi
    7718:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    771c:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    7720:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
    7722:	6a2c      	ldr	r4, [r5, #32]
    7724:	bf94      	ite	ls
    7726:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    7728:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
    772c:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    772e:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
    7730:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
    7732:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7734:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
    7736:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
    7738:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    773a:	d201      	bcs.n	7740 <ticker_job+0x210>
    773c:	429f      	cmp	r7, r3
    773e:	d3e4      	bcc.n	770a <ticker_job+0x1da>
    7740:	f8dd 8018 	ldr.w	r8, [sp, #24]
    7744:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7746:	42bb      	cmp	r3, r7
    7748:	d221      	bcs.n	778e <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
    774a:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    774e:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
    7752:	9006      	str	r0, [sp, #24]
    7754:	940a      	str	r4, [sp, #40]	; 0x28
    7756:	e005      	b.n	7764 <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7758:	3301      	adds	r3, #1
    775a:	b29b      	uxth	r3, r3
    775c:	4660      	mov	r0, ip
    775e:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
    7760:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7762:	d011      	beq.n	7788 <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
    7764:	4874      	ldr	r0, [pc, #464]	; (7938 <ticker_job+0x408>)
    7766:	4c75      	ldr	r4, [pc, #468]	; (793c <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
    7768:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
    776a:	1808      	adds	r0, r1, r0
    776c:	42a0      	cmp	r0, r4
    776e:	d8f3      	bhi.n	7758 <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7770:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
    7772:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    7774:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7778:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    777a:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
    777e:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    7780:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
    7784:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7786:	d1ed      	bne.n	7764 <ticker_job+0x234>
    7788:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    778a:	6269      	str	r1, [r5, #36]	; 0x24
    778c:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    778e:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    7790:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
    7792:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
    7794:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
    7796:	440a      	add	r2, r1
    7798:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    779a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
    779c:	4403      	add	r3, r0
    779e:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    77a0:	b11a      	cbz	r2, 77aa <ticker_job+0x27a>
    77a2:	6813      	ldr	r3, [r2, #0]
    77a4:	b10b      	cbz	r3, 77aa <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
    77a6:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    77a8:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    77aa:	464a      	mov	r2, r9
    77ac:	9902      	ldr	r1, [sp, #8]
    77ae:	4628      	mov	r0, r5
    77b0:	f7ff fc26 	bl	7000 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    77b4:	68e2      	ldr	r2, [r4, #12]
    77b6:	69ab      	ldr	r3, [r5, #24]
    77b8:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    77ba:	6922      	ldr	r2, [r4, #16]
    77bc:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    77be:	bf8c      	ite	hi
    77c0:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    77c2:	2300      	movls	r3, #0
    77c4:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    77c6:	7da3      	ldrb	r3, [r4, #22]
    77c8:	b103      	cbz	r3, 77cc <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
    77ca:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    77cc:	7de3      	ldrb	r3, [r4, #23]
    77ce:	b113      	cbz	r3, 77d6 <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    77d0:	3b01      	subs	r3, #1
    77d2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    77d6:	9b01      	ldr	r3, [sp, #4]
    77d8:	702b      	strb	r3, [r5, #0]
		ticker->req++;
    77da:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    77dc:	7862      	ldrb	r2, [r4, #1]
    77de:	9201      	str	r2, [sp, #4]
		ticker->req++;
    77e0:	3301      	adds	r3, #1
    77e2:	706b      	strb	r3, [r5, #1]
    77e4:	e726      	b.n	7634 <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
    77e6:	23ff      	movs	r3, #255	; 0xff
    77e8:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    77ec:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
    77f0:	2b06      	cmp	r3, #6
    77f2:	d013      	beq.n	781c <ticker_job+0x2ec>
    77f4:	2b08      	cmp	r3, #8
    77f6:	d011      	beq.n	781c <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
    77f8:	f00b fe28 	bl	1344c <cntr_cnt_get>
			ticks_current = instance->ticks_current;
    77fc:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    7800:	1a83      	subs	r3, r0, r2
    7802:	021d      	lsls	r5, r3, #8
    7804:	d410      	bmi.n	7828 <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
    7806:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7808:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    780c:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    780e:	f8db 2018 	ldr.w	r2, [fp, #24]
    7812:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    7814:	bf88      	it	hi
    7816:	f8cb 3018 	strhi.w	r3, [fp, #24]
    781a:	e70b      	b.n	7634 <ticker_job+0x104>
				ticks_at_yield =
    781c:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
    781e:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    7822:	1a83      	subs	r3, r0, r2
    7824:	021d      	lsls	r5, r3, #8
    7826:	d5ee      	bpl.n	7806 <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7828:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    782a:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    782c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    7830:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    7832:	bf34      	ite	cc
    7834:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
    7836:	2300      	movcs	r3, #0
    7838:	e7e9      	b.n	780e <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    783a:	696b      	ldr	r3, [r5, #20]
    783c:	1bda      	subs	r2, r3, r7
    783e:	1853      	adds	r3, r2, r1
    7840:	9304      	str	r3, [sp, #16]
    7842:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
    7844:	2200      	movs	r2, #0
    7846:	e74c      	b.n	76e2 <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    7848:	2104      	movs	r1, #4
    784a:	465b      	mov	r3, fp
    784c:	2201      	movs	r2, #1
    784e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7852:	4608      	mov	r0, r1
    7854:	47a0      	blx	r4
	while (count_user--) {
    7856:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
    7858:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
    785c:	2301      	movs	r3, #1
	while (count_user--) {
    785e:	4552      	cmp	r2, sl
				pending = 1U;
    7860:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    7862:	f1aa 0308 	sub.w	r3, sl, #8
    7866:	f47f aef9 	bne.w	765c <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    786a:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
    786e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7870:	1a9b      	subs	r3, r3, r2
    7872:	bf18      	it	ne
    7874:	2301      	movne	r3, #1
    7876:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    7878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    787a:	2b00      	cmp	r3, #0
    787c:	d16a      	bne.n	7954 <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
    787e:	9901      	ldr	r1, [sp, #4]
    7880:	4658      	mov	r0, fp
    7882:	f7ff fbe1 	bl	7048 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7886:	f89b 301d 	ldrb.w	r3, [fp, #29]
    788a:	9300      	str	r3, [sp, #0]
    788c:	9b00      	ldr	r3, [sp, #0]
    788e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7890:	4293      	cmp	r3, r2
    7892:	f000 826c 	beq.w	7d6e <ticker_job+0x83e>
	if (!pending) {
    7896:	9b08      	ldr	r3, [sp, #32]
    7898:	2b00      	cmp	r3, #0
    789a:	f000 81e6 	beq.w	7c6a <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
    789e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    78a2:	9300      	str	r3, [sp, #0]
    78a4:	9b00      	ldr	r3, [sp, #0]
    78a6:	2bff      	cmp	r3, #255	; 0xff
    78a8:	f000 82c4 	beq.w	7e34 <ticker_job+0x904>
	if (ticker_id_old_head == TICKER_NULL) {
    78ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    78ae:	2bff      	cmp	r3, #255	; 0xff
    78b0:	f000 82cb 	beq.w	7e4a <ticker_job+0x91a>
	ticker = &instance->nodes[instance->ticker_id_head];
    78b4:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
    78b6:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    78ba:	f8df 9084 	ldr.w	r9, [pc, #132]	; 7940 <ticker_job+0x410>
    78be:	f8df 8084 	ldr.w	r8, [pc, #132]	; 7944 <ticker_job+0x414>
    78c2:	4f21      	ldr	r7, [pc, #132]	; (7948 <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
    78c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    78c8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
    78cc:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    78ce:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
    78d0:	f00b fdbc 	bl	1344c <cntr_cnt_get>
		cc = instance->ticks_current;
    78d4:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    78d8:	1b03      	subs	r3, r0, r4
    78da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    78de:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    78e0:	42b3      	cmp	r3, r6
    78e2:	bf2c      	ite	cs
    78e4:	18e4      	addcs	r4, r4, r3
    78e6:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
    78e8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    78ec:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
    78f0:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    78f2:	4620      	mov	r0, r4
    78f4:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    78f6:	f00b fda9 	bl	1344c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    78fa:	eba0 030a 	sub.w	r3, r0, sl
    78fe:	eba4 040a 	sub.w	r4, r4, sl
    7902:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    7906:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7908:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    790c:	42a3      	cmp	r3, r4
		i--;
    790e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    7912:	f240 8233 	bls.w	7d7c <ticker_job+0x84c>
		LL_ASSERT(i);
    7916:	2d00      	cmp	r5, #0
    7918:	d1da      	bne.n	78d0 <ticker_job+0x3a0>
    791a:	f640 133e 	movw	r3, #2366	; 0x93e
    791e:	464a      	mov	r2, r9
    7920:	4641      	mov	r1, r8
    7922:	4638      	mov	r0, r7
    7924:	f010 fc20 	bl	18168 <printk>
    7928:	4040      	eors	r0, r0
    792a:	f380 8811 	msr	BASEPRI, r0
    792e:	f04f 0003 	mov.w	r0, #3
    7932:	df02      	svc	2
    7934:	e7cc      	b.n	78d0 <ticker_job+0x3a0>
    7936:	bf00      	nop
    7938:	ff172b5a 	.word	0xff172b5a
    793c:	7f172b59 	.word	0x7f172b59
    7940:	0001cda4 	.word	0x0001cda4
    7944:	0001ce50 	.word	0x0001ce50
    7948:	0001cde4 	.word	0x0001cde4
	pending = 0U;
    794c:	9b06      	ldr	r3, [sp, #24]
    794e:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    7950:	23ff      	movs	r3, #255	; 0xff
    7952:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    7954:	f00b fd7a 	bl	1344c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    7958:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    795a:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    795e:	1ac3      	subs	r3, r0, r3
    7960:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    7964:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    7966:	f8db 3000 	ldr.w	r3, [fp]
    796a:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
    796c:	d050      	beq.n	7a10 <ticker_job+0x4e0>
	ticks_expired = 0U;
    796e:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
    7970:	f8df 8290 	ldr.w	r8, [pc, #656]	; 7c04 <ticker_job+0x6d4>
    7974:	f8df 9290 	ldr.w	r9, [pc, #656]	; 7c08 <ticker_job+0x6d8>
	while (instance->ticker_id_head != TICKER_NULL) {
    7978:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
    797a:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
    797c:	9a00      	ldr	r2, [sp, #0]
    797e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    7982:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    7986:	011b      	lsls	r3, r3, #4
    7988:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
    798a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    798c:	429f      	cmp	r7, r3
    798e:	f0c0 8243 	bcc.w	7e18 <ticker_job+0x8e8>
		ticks_expired += ticks_to_expire;
    7992:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
    7994:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
    7998:	f8dd c010 	ldr.w	ip, [sp, #16]
		ticks_expired += ticks_to_expire;
    799c:	441a      	add	r2, r3
    799e:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    79a0:	f8db 2018 	ldr.w	r2, [fp, #24]
    79a4:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    79a6:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
    79aa:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    79ae:	bf25      	ittet	cs
    79b0:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    79b4:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    79b8:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    79ba:	2300      	movcs	r3, #0
    79bc:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    79c0:	78a2      	ldrb	r2, [r4, #2]
    79c2:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    79c4:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    79c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
    79c8:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
    79ca:	1a9b      	subs	r3, r3, r2
    79cc:	b2db      	uxtb	r3, r3
    79ce:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
    79d0:	9b00      	ldr	r3, [sp, #0]
    79d2:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    79d6:	b118      	cbz	r0, 79e0 <ticker_job+0x4b0>
    79d8:	9b05      	ldr	r3, [sp, #20]
    79da:	2b02      	cmp	r3, #2
    79dc:	f000 8135 	beq.w	7c4a <ticker_job+0x71a>
		ticker->ticks_to_expire = 0U;
    79e0:	2300      	movs	r3, #0
    79e2:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    79e4:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    79e8:	2d00      	cmp	r5, #0
    79ea:	f040 80da 	bne.w	7ba2 <ticker_job+0x672>
    79ee:	b119      	cbz	r1, 79f8 <ticker_job+0x4c8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    79f0:	7a09      	ldrb	r1, [r1, #8]
    79f2:	2901      	cmp	r1, #1
    79f4:	f000 8111 	beq.w	7c1a <ticker_job+0x6ea>
			if (state && ((state == 1U) || skip_collision) &&
    79f8:	9b05      	ldr	r3, [sp, #20]
    79fa:	b123      	cbz	r3, 7a06 <ticker_job+0x4d6>
    79fc:	2b01      	cmp	r3, #1
    79fe:	d045      	beq.n	7a8c <ticker_job+0x55c>
    7a00:	f1be 0f00 	cmp.w	lr, #0
    7a04:	d142      	bne.n	7a8c <ticker_job+0x55c>
			ticker->req = ticker->ack;
    7a06:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    7a08:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7a0c:	2eff      	cmp	r6, #255	; 0xff
    7a0e:	d1b5      	bne.n	797c <ticker_job+0x44c>
			flag_compare_update = 1U;
    7a10:	9b06      	ldr	r3, [sp, #24]
    7a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    7a14:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
    7a16:	4296      	cmp	r6, r2
    7a18:	bf18      	it	ne
    7a1a:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
    7a1c:	4658      	mov	r0, fp
			flag_compare_update = 1U;
    7a1e:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
    7a20:	f7ff fb12 	bl	7048 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
    7a24:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
    7a28:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
    7a2c:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
    7a30:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
    7a32:	9b00      	ldr	r3, [sp, #0]
    7a34:	2bff      	cmp	r3, #255	; 0xff
    7a36:	d00f      	beq.n	7a58 <ticker_job+0x528>
    7a38:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
    7a3a:	b233      	sxth	r3, r6
    7a3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7a40:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
    7a44:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
    7a46:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    7a48:	b117      	cbz	r7, 7a50 <ticker_job+0x520>
    7a4a:	7a39      	ldrb	r1, [r7, #8]
    7a4c:	2901      	cmp	r1, #1
    7a4e:	d025      	beq.n	7a9c <ticker_job+0x56c>
			ticker_id_head = ticker->next;
    7a50:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
    7a54:	2eff      	cmp	r6, #255	; 0xff
    7a56:	d1f0      	bne.n	7a3a <ticker_job+0x50a>
	return rescheduled;
    7a58:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    7a5c:	2a00      	cmp	r2, #0
    7a5e:	f43f af15 	beq.w	788c <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7a62:	9b00      	ldr	r3, [sp, #0]
    7a64:	9909      	ldr	r1, [sp, #36]	; 0x24
    7a66:	428b      	cmp	r3, r1
    7a68:	f47f af15 	bne.w	7896 <ticker_job+0x366>
	if (!pending) {
    7a6c:	9b08      	ldr	r3, [sp, #32]
    7a6e:	2b00      	cmp	r3, #0
    7a70:	f47f af18 	bne.w	78a4 <ticker_job+0x374>
	users = &instance->users[0];
    7a74:	f8db 3004 	ldr.w	r3, [fp, #4]
    7a78:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
    7a7a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
    7a7e:	1e5f      	subs	r7, r3, #1
    7a80:	b2ff      	uxtb	r7, r7
    7a82:	2b00      	cmp	r3, #0
    7a84:	f43f af0e 	beq.w	78a4 <ticker_job+0x374>
			flag_compare_update = 1U;
    7a88:	9206      	str	r2, [sp, #24]
    7a8a:	e0fa      	b.n	7c82 <ticker_job+0x752>
			    ticker->fp_op_func) {
    7a8c:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    7a8e:	2b00      	cmp	r3, #0
    7a90:	d0b9      	beq.n	7a06 <ticker_job+0x4d6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    7a92:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7a94:	2001      	movs	r0, #1
    7a96:	4798      	blx	r3
			ticker->req = ticker->ack;
    7a98:	78a2      	ldrb	r2, [r4, #2]
    7a9a:	e7b4      	b.n	7a06 <ticker_job+0x4d6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    7a9c:	9b01      	ldr	r3, [sp, #4]
    7a9e:	7f1b      	ldrb	r3, [r3, #28]
    7aa0:	2bff      	cmp	r3, #255	; 0xff
    7aa2:	d04b      	beq.n	7b3c <ticker_job+0x60c>
			instance->ticks_slot_previous > ticks_elapsed) {
    7aa4:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    7aa6:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
    7aa8:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    7aaa:	4293      	cmp	r3, r2
    7aac:	d946      	bls.n	7b3c <ticker_job+0x60c>
			window_start_ticks = instance->ticks_slot_previous -
    7aae:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    7ab2:	687a      	ldr	r2, [r7, #4]
    7ab4:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
    7ab6:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    7aba:	1ad3      	subs	r3, r2, r3
    7abc:	9302      	str	r3, [sp, #8]
    7abe:	683b      	ldr	r3, [r7, #0]
    7ac0:	429a      	cmp	r2, r3
    7ac2:	f080 80bd 	bcs.w	7c40 <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
    7ac6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    7aca:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
    7ace:	f000 80b7 	beq.w	7c40 <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
    7ad2:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
    7ad6:	45f0      	cmp	r8, lr
    7ad8:	f04f 0300 	mov.w	r3, #0
    7adc:	d331      	bcc.n	7b42 <ticker_job+0x612>
    7ade:	46f1      	mov	r9, lr
    7ae0:	465a      	mov	r2, fp
    7ae2:	461c      	mov	r4, r3
    7ae4:	e01c      	b.n	7b20 <ticker_job+0x5f0>
			if (node->ticks_to_expire >
    7ae6:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
    7ae8:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
    7aea:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
    7aec:	4423      	add	r3, r4
			if (node->ticks_to_expire >
    7aee:	d909      	bls.n	7b04 <ticker_job+0x5d4>
				window_end_ticks =
    7af0:	4543      	cmp	r3, r8
    7af2:	bf28      	it	cs
    7af4:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
    7af6:	4599      	cmp	r9, r3
    7af8:	d204      	bcs.n	7b04 <ticker_job+0x5d4>
			if (ticks_to_expire != 0U &&
    7afa:	ebb3 030e 	subs.w	r3, r3, lr
    7afe:	d001      	beq.n	7b04 <ticker_job+0x5d4>
    7b00:	459c      	cmp	ip, r3
    7b02:	d91e      	bls.n	7b42 <ticker_job+0x612>
			window_start_ticks  = node->ticks_to_expire +
    7b04:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
    7b06:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
    7b0a:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
    7b0e:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
    7b10:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
    7b14:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    7b16:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
    7b1a:	d012      	beq.n	7b42 <ticker_job+0x612>
    7b1c:	45c8      	cmp	r8, r9
    7b1e:	d310      	bcc.n	7b42 <ticker_job+0x612>
			node = &nodes[ticker_id_iter];
    7b20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    7b24:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
    7b28:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    7b2a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7b2c:	2900      	cmp	r1, #0
    7b2e:	d0da      	beq.n	7ae6 <ticker_job+0x5b6>
    7b30:	7a09      	ldrb	r1, [r1, #8]
    7b32:	2901      	cmp	r1, #1
    7b34:	d1d7      	bne.n	7ae6 <ticker_job+0x5b6>
				ticker_id_iter = node->next;
    7b36:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
    7b3a:	e7eb      	b.n	7b14 <ticker_job+0x5e4>
		window_start_ticks = 0U;
    7b3c:	f04f 0c00 	mov.w	ip, #0
    7b40:	e7b7      	b.n	7ab2 <ticker_job+0x582>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    7b42:	9a02      	ldr	r2, [sp, #8]
    7b44:	441a      	add	r2, r3
    7b46:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    7b48:	465c      	mov	r4, fp
    7b4a:	60ab      	str	r3, [r5, #8]
    7b4c:	f04f 0eff 	mov.w	lr, #255	; 0xff
    7b50:	e000      	b.n	7b54 <ticker_job+0x624>
    7b52:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
    7b54:	b221      	sxth	r1, r4
    7b56:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    7b5a:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
    7b5e:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    7b60:	f8dc 0008 	ldr.w	r0, [ip, #8]
    7b64:	4298      	cmp	r0, r3
    7b66:	f080 814d 	bcs.w	7e04 <ticker_job+0x8d4>
				ticker->ticks_to_expire -=
    7b6a:	1a1b      	subs	r3, r3, r0
    7b6c:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
    7b6e:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
    7b72:	2aff      	cmp	r2, #255	; 0xff
    7b74:	46a6      	mov	lr, r4
    7b76:	d1ec      	bne.n	7b52 <ticker_job+0x622>
			instance->ticker_id_head = nodes[ticker_id_head].next;
    7b78:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
    7b7a:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    7b7e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7b82:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    7b84:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    7b88:	f81a 3001 	ldrb.w	r3, [sl, r1]
    7b8c:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    7b8e:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
    7b92:	8beb      	ldrh	r3, [r5, #30]
    7b94:	3b01      	subs	r3, #1
    7b96:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
    7b98:	f04f 0302 	mov.w	r3, #2
    7b9c:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
    7b9e:	2201      	movs	r2, #1
    7ba0:	e747      	b.n	7a32 <ticker_job+0x502>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    7ba2:	b111      	cbz	r1, 7baa <ticker_job+0x67a>
    7ba4:	7a0b      	ldrb	r3, [r1, #8]
    7ba6:	2b01      	cmp	r3, #1
    7ba8:	d037      	beq.n	7c1a <ticker_job+0x6ea>
				if (!ticker->lazy_current) {
    7baa:	f1be 0f00 	cmp.w	lr, #0
    7bae:	d159      	bne.n	7c64 <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
    7bb0:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
    7bb4:	4672      	mov	r2, lr
				while (count--) {
    7bb6:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
    7bb8:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
    7bbc:	2100      	movs	r1, #0
    7bbe:	9005      	str	r0, [sp, #20]
    7bc0:	e004      	b.n	7bcc <ticker_job+0x69c>
    7bc2:	4628      	mov	r0, r5
				while (count--) {
    7bc4:	3a01      	subs	r2, #1
					ticks_to_expire +=
    7bc6:	4401      	add	r1, r0
				while (count--) {
    7bc8:	1c50      	adds	r0, r2, #1
    7bca:	d00f      	beq.n	7bec <ticker_job+0x6bc>
	ticker->remainder_current += ticker->remainder_periodic;
    7bcc:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    7bce:	eb03 0008 	add.w	r0, r3, r8
    7bd2:	4548      	cmp	r0, r9
    7bd4:	d8f5      	bhi.n	7bc2 <ticker_job+0x692>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    7bd6:	9805      	ldr	r0, [sp, #20]
    7bd8:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    7bdc:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    7bde:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
    7be2:	4401      	add	r1, r0
				while (count--) {
    7be4:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    7be6:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
    7bea:	d1ef      	bne.n	7bcc <ticker_job+0x69c>
				} else if (!ticker->must_expire) {
    7bec:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    7bf0:	6263      	str	r3, [r4, #36]	; 0x24
    7bf2:	2a00      	cmp	r2, #0
    7bf4:	f000 80d2 	beq.w	7d9c <ticker_job+0x86c>
				lazy = 0U;
    7bf8:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
    7bfa:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
    7bfc:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    7bfe:	83e2      	strh	r2, [r4, #30]
    7c00:	e00d      	b.n	7c1e <ticker_job+0x6ee>
    7c02:	bf00      	nop
    7c04:	ff172b5a 	.word	0xff172b5a
    7c08:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
    7c0c:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    7c10:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    7c14:	2d00      	cmp	r5, #0
    7c16:	f43f aeeb 	beq.w	79f0 <ticker_job+0x4c0>
				ticker->req = ticker->ack;
    7c1a:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
    7c1c:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7c1e:	9b07      	ldr	r3, [sp, #28]
    7c20:	9a02      	ldr	r2, [sp, #8]
    7c22:	f8db 1014 	ldr.w	r1, [fp, #20]
    7c26:	189a      	adds	r2, r3, r2
    7c28:	4620      	mov	r0, r4
    7c2a:	f7ff f9e9 	bl	7000 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    7c2e:	9a00      	ldr	r2, [sp, #0]
    7c30:	9904      	ldr	r1, [sp, #16]
    7c32:	9b01      	ldr	r3, [sp, #4]
    7c34:	5453      	strb	r3, [r2, r1]
			ticker->req++;
    7c36:	7863      	ldrb	r3, [r4, #1]
    7c38:	9601      	str	r6, [sp, #4]
    7c3a:	3301      	adds	r3, #1
    7c3c:	7063      	strb	r3, [r4, #1]
    7c3e:	e6e3      	b.n	7a08 <ticker_job+0x4d8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
    7c40:	9b02      	ldr	r3, [sp, #8]
    7c42:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
    7c44:	2300      	movs	r3, #0
    7c46:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
    7c48:	e7a3      	b.n	7b92 <ticker_job+0x662>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    7c4a:	f1be 0f00 	cmp.w	lr, #0
    7c4e:	f47f aec7 	bne.w	79e0 <ticker_job+0x4b0>
    7c52:	b111      	cbz	r1, 7c5a <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    7c54:	7a0b      	ldrb	r3, [r1, #8]
    7c56:	2b01      	cmp	r3, #1
    7c58:	d0d8      	beq.n	7c0c <ticker_job+0x6dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
    7c5a:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
    7c5e:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    7c62:	e6bd      	b.n	79e0 <ticker_job+0x4b0>
					ticker->req = ticker->ack;
    7c64:	7062      	strb	r2, [r4, #1]
    7c66:	2200      	movs	r2, #0
    7c68:	e7a5      	b.n	7bb6 <ticker_job+0x686>
	count_user = instance->count_user;
    7c6a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    7c6e:	f8db 2004 	ldr.w	r2, [fp, #4]
    7c72:	9201      	str	r2, [sp, #4]
	while (count_user--) {
    7c74:	1e5f      	subs	r7, r3, #1
    7c76:	b2ff      	uxtb	r7, r7
    7c78:	2b00      	cmp	r3, #0
    7c7a:	f43f ae10 	beq.w	789e <ticker_job+0x36e>
		flag_compare_update = 1U;
    7c7e:	2301      	movs	r3, #1
    7c80:	9306      	str	r3, [sp, #24]
    7c82:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
    7c84:	2600      	movs	r6, #0
    7c86:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
    7c8a:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
    7c8e:	787b      	ldrb	r3, [r7, #1]
    7c90:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
    7c92:	687d      	ldr	r5, [r7, #4]
		while (user->first != user->last) {
    7c94:	429a      	cmp	r2, r3
    7c96:	d10c      	bne.n	7cb2 <ticker_job+0x782>
    7c98:	e05b      	b.n	7d52 <ticker_job+0x822>
	switch (uop->op) {
    7c9a:	2b01      	cmp	r3, #1
    7c9c:	d053      	beq.n	7d46 <ticker_job+0x816>
			first = user->first + 1;
    7c9e:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
    7ca0:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
    7ca2:	3301      	adds	r3, #1
    7ca4:	b2db      	uxtb	r3, r3
				first = 0U;
    7ca6:	4299      	cmp	r1, r3
    7ca8:	bf08      	it	eq
    7caa:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    7cac:	429a      	cmp	r2, r3
			user->first = first;
    7cae:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
    7cb0:	d04f      	beq.n	7d52 <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    7cb2:	b21b      	sxth	r3, r3
    7cb4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    7cb8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7cbc:	eb05 0083 	add.w	r0, r5, r3, lsl #2
	switch (uop->op) {
    7cc0:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    7cc4:	2b02      	cmp	r3, #2
    7cc6:	d017      	beq.n	7cf8 <ticker_job+0x7c8>
    7cc8:	2b03      	cmp	r3, #3
    7cca:	d1e6      	bne.n	7c9a <ticker_job+0x76a>
		if (uop->id < instance->count_node) {
    7ccc:	7843      	ldrb	r3, [r0, #1]
    7cce:	f89b 2008 	ldrb.w	r2, [fp, #8]
    7cd2:	429a      	cmp	r2, r3
    7cd4:	d93a      	bls.n	7d4c <ticker_job+0x81c>
			node[uop->id].priority =
    7cd6:	f8db 2000 	ldr.w	r2, [fp]
    7cda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7cde:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    7ce2:	7902      	ldrb	r2, [r0, #4]
    7ce4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    7ce8:	6286      	str	r6, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    7cea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
    7cec:	b113      	cbz	r3, 7cf4 <ticker_job+0x7c4>
		fp_op_func(uop->status, uop->op_context);
    7cee:	6b01      	ldr	r1, [r0, #48]	; 0x30
    7cf0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    7cf2:	4798      	blx	r3
    7cf4:	78fa      	ldrb	r2, [r7, #3]
    7cf6:	e7d2      	b.n	7c9e <ticker_job+0x76e>
		ticker_by_next_slot_get(instance,
    7cf8:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
    7cfc:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
    7d00:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
    7d04:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
    7d08:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    7d0c:	2aff      	cmp	r2, #255	; 0xff
    7d0e:	d003      	beq.n	7d18 <ticker_job+0x7e8>
    7d10:	f8d1 8000 	ldr.w	r8, [r1]
    7d14:	4598      	cmp	r8, r3
    7d16:	d023      	beq.n	7d60 <ticker_job+0x830>
		_ticker_id_head = instance->ticker_id_head;
    7d18:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    7d1c:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
    7d1e:	f04f 0800 	mov.w	r8, #0
    7d22:	e00a      	b.n	7d3a <ticker_job+0x80a>
		ticker = &node[_ticker_id_head];
    7d24:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    7d28:	eb04 1103 	add.w	r1, r4, r3, lsl #4
    7d2c:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
    7d2e:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
    7d32:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
    7d34:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
    7d36:	b911      	cbnz	r1, 7d3e <ticker_job+0x80e>
		_ticker_id_head = ticker->next;
    7d38:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
    7d3a:	2aff      	cmp	r2, #255	; 0xff
    7d3c:	d1f2      	bne.n	7d24 <ticker_job+0x7f4>
	*ticker_id_head = _ticker_id_head;
    7d3e:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
    7d42:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
    7d46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    7d48:	6286      	str	r6, [r0, #40]	; 0x28
		break;
    7d4a:	e7cf      	b.n	7cec <ticker_job+0x7bc>
			uop->status = TICKER_STATUS_FAILURE;
    7d4c:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
    7d50:	e7cb      	b.n	7cea <ticker_job+0x7ba>
	while (count_user--) {
    7d52:	9a01      	ldr	r2, [sp, #4]
    7d54:	42ba      	cmp	r2, r7
    7d56:	f1a7 0308 	sub.w	r3, r7, #8
    7d5a:	d00b      	beq.n	7d74 <ticker_job+0x844>
    7d5c:	461f      	mov	r7, r3
    7d5e:	e796      	b.n	7c8e <ticker_job+0x75e>
		ticker = &node[_ticker_id_head];
    7d60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    7d64:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    7d66:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
    7d6a:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
    7d6c:	e7e5      	b.n	7d3a <ticker_job+0x80a>
	if (!pending) {
    7d6e:	9b08      	ldr	r3, [sp, #32]
    7d70:	2b00      	cmp	r3, #0
    7d72:	d054      	beq.n	7e1e <ticker_job+0x8ee>
	if (flag_compare_update) {
    7d74:	9b06      	ldr	r3, [sp, #24]
    7d76:	2b00      	cmp	r3, #0
    7d78:	f47f ad91 	bne.w	789e <ticker_job+0x36e>
	if (instance->worker_trigger) {
    7d7c:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    7d80:	2200      	movs	r2, #0
    7d82:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    7d86:	b12b      	cbz	r3, 7d94 <ticker_job+0x864>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7d88:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7d8c:	465b      	mov	r3, fp
    7d8e:	2201      	movs	r2, #1
    7d90:	2103      	movs	r1, #3
    7d92:	e469      	b.n	7668 <ticker_job+0x138>
}
    7d94:	b00d      	add	sp, #52	; 0x34
    7d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d9a:	4770      	bx	lr
					while (ticks_to_expire <
    7d9c:	458a      	cmp	sl, r1
    7d9e:	f67f af2c 	bls.w	7bfa <ticker_job+0x6ca>
    7da2:	1c68      	adds	r0, r5, #1
    7da4:	9405      	str	r4, [sp, #20]
    7da6:	4604      	mov	r4, r0
    7da8:	e005      	b.n	7db6 <ticker_job+0x886>
    7daa:	4628      	mov	r0, r5
						ticks_to_expire +=
    7dac:	4401      	add	r1, r0
						lazy++;
    7dae:	3201      	adds	r2, #1
					while (ticks_to_expire <
    7db0:	458a      	cmp	sl, r1
						lazy++;
    7db2:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    7db4:	d910      	bls.n	7dd8 <ticker_job+0x8a8>
	ticker->remainder_current += ticker->remainder_periodic;
    7db6:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    7db8:	eb03 0008 	add.w	r0, r3, r8
    7dbc:	4548      	cmp	r0, r9
    7dbe:	d8f4      	bhi.n	7daa <ticker_job+0x87a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    7dc0:	4620      	mov	r0, r4
    7dc2:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    7dc6:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    7dc8:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    7dcc:	3201      	adds	r2, #1
					while (ticks_to_expire <
    7dce:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    7dd0:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    7dd4:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    7dd6:	d8ee      	bhi.n	7db6 <ticker_job+0x886>
    7dd8:	9c05      	ldr	r4, [sp, #20]
    7dda:	6263      	str	r3, [r4, #36]	; 0x24
    7ddc:	e70d      	b.n	7bfa <ticker_job+0x6ca>
	ticker_id_old_head = instance->ticker_id_head;
    7dde:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
    7de2:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    7de6:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
    7de8:	f8db 3000 	ldr.w	r3, [fp]
    7dec:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    7dee:	f8db 3004 	ldr.w	r3, [fp, #4]
    7df2:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    7df4:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
    7df6:	9108      	str	r1, [sp, #32]
	while (count_user--) {
    7df8:	b2db      	uxtb	r3, r3
    7dfa:	b3a1      	cbz	r1, 7e66 <ticker_job+0x936>
		flag_elapsed = 0U;
    7dfc:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
    7dfe:	9203      	str	r2, [sp, #12]
    7e00:	f7ff bbd1 	b.w	75a6 <ticker_job+0x76>
				node->ticks_to_expire -=
    7e04:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
    7e06:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    7e0a:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
    7e0e:	f43f aec0 	beq.w	7b92 <ticker_job+0x662>
    7e12:	fa0f f18e 	sxth.w	r1, lr
    7e16:	e6af      	b.n	7b78 <ticker_job+0x648>
			ticker->ticks_to_expire -= ticks_elapsed;
    7e18:	1bdb      	subs	r3, r3, r7
    7e1a:	60a3      	str	r3, [r4, #8]
			break;
    7e1c:	e5f8      	b.n	7a10 <ticker_job+0x4e0>
	count_user = instance->count_user;
    7e1e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    7e22:	f8db 2004 	ldr.w	r2, [fp, #4]
    7e26:	9201      	str	r2, [sp, #4]
	while (count_user--) {
    7e28:	1e5f      	subs	r7, r3, #1
    7e2a:	b2ff      	uxtb	r7, r7
    7e2c:	2b00      	cmp	r3, #0
    7e2e:	f47f af28 	bne.w	7c82 <ticker_job+0x752>
    7e32:	e79f      	b.n	7d74 <ticker_job+0x844>
		if (cntr_stop() == 0) {
    7e34:	f00b fae4 	bl	13400 <cntr_stop>
    7e38:	2800      	cmp	r0, #0
    7e3a:	d19f      	bne.n	7d7c <ticker_job+0x84c>
			instance->ticks_slot_previous = 0U;
    7e3c:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    7e40:	f00b fb04 	bl	1344c <cntr_cnt_get>
    7e44:	f8cb 0014 	str.w	r0, [fp, #20]
    7e48:	e798      	b.n	7d7c <ticker_job+0x84c>
		ticks_current = cntr_cnt_get();
    7e4a:	f00b faff 	bl	1344c <cntr_cnt_get>
    7e4e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    7e50:	f00b fac6 	bl	133e0 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
    7e54:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7e58:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
    7e5a:	2800      	cmp	r0, #0
    7e5c:	f47f ad2a 	bne.w	78b4 <ticker_job+0x384>
			instance->ticks_current = ticks_current;
    7e60:	f8cb 4014 	str.w	r4, [fp, #20]
    7e64:	e526      	b.n	78b4 <ticker_job+0x384>
	insert_head = TICKER_NULL;
    7e66:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
    7e68:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
    7e6a:	9301      	str	r3, [sp, #4]
    7e6c:	e507      	b.n	787e <ticker_job+0x34e>
    7e6e:	bf00      	nop

00007e70 <ticker_init>:
{
    7e70:	b4f0      	push	{r4, r5, r6, r7}
    7e72:	9d04      	ldr	r5, [sp, #16]
    7e74:	f89d 7014 	ldrb.w	r7, [sp, #20]
    7e78:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    7e7a:	2800      	cmp	r0, #0
    7e7c:	d137      	bne.n	7eee <ticker_init+0x7e>
	instance->count_node = count_node;
    7e7e:	4e1d      	ldr	r6, [pc, #116]	; (7ef4 <ticker_init+0x84>)
	while (count_node--) {
    7e80:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
    7e84:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
    7e86:	6032      	str	r2, [r6, #0]
	while (count_node--) {
    7e88:	fa5f fc8c 	uxtb.w	ip, ip
    7e8c:	b149      	cbz	r1, 7ea2 <ticker_init+0x32>
    7e8e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    7e92:	eb02 110c 	add.w	r1, r2, ip, lsl #4
    7e96:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    7e98:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    7e9c:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    7ea0:	d1f9      	bne.n	7e96 <ticker_init+0x26>
	while (count_user--) {
    7ea2:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    7ea4:	7273      	strb	r3, [r6, #9]
	instance->users = user;
    7ea6:	6075      	str	r5, [r6, #4]
	while (count_user--) {
    7ea8:	b2d2      	uxtb	r2, r2
    7eaa:	b183      	cbz	r3, 7ece <ticker_init+0x5e>
    7eac:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
    7eb0:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    7eb2:	4610      	mov	r0, r2
    7eb4:	f812 3908 	ldrb.w	r3, [r2], #-8
    7eb8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    7ebc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
    7ec0:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
    7ec2:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
    7ec6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
    7eca:	b2df      	uxtb	r7, r3
	while (count_user--) {
    7ecc:	d1f0      	bne.n	7eb0 <ticker_init+0x40>
	if (count_op) {
    7ece:	b977      	cbnz	r7, 7eee <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
    7ed0:	9a07      	ldr	r2, [sp, #28]
    7ed2:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
    7ed4:	9a08      	ldr	r2, [sp, #32]
    7ed6:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    7ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    7edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7ede:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
    7ee0:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
    7ee2:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    7ee6:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
    7ee8:	8177      	strh	r7, [r6, #10]
}
    7eea:	bcf0      	pop	{r4, r5, r6, r7}
    7eec:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    7eee:	2001      	movs	r0, #1
}
    7ef0:	bcf0      	pop	{r4, r5, r6, r7}
    7ef2:	4770      	bx	lr
    7ef4:	200015b8 	.word	0x200015b8

00007ef8 <ticker_trigger>:
	if (instance->sched_cb) {
    7ef8:	4b0a      	ldr	r3, [pc, #40]	; (7f24 <ticker_trigger+0x2c>)
    7efa:	222c      	movs	r2, #44	; 0x2c
    7efc:	fb02 3200 	mla	r2, r2, r0, r3
{
    7f00:	b410      	push	{r4}
	if (instance->sched_cb) {
    7f02:	6a54      	ldr	r4, [r2, #36]	; 0x24
    7f04:	b15c      	cbz	r4, 7f1e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    7f06:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    7f0a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7f0e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7f12:	46a4      	mov	ip, r4
    7f14:	2201      	movs	r2, #1
}
    7f16:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    7f18:	2103      	movs	r1, #3
    7f1a:	2002      	movs	r0, #2
    7f1c:	4760      	bx	ip
}
    7f1e:	bc10      	pop	{r4}
    7f20:	4770      	bx	lr
    7f22:	bf00      	nop
    7f24:	200015b8 	.word	0x200015b8

00007f28 <ticker_start_ext>:
{
    7f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    7f2c:	4e28      	ldr	r6, [pc, #160]	; (7fd0 <ticker_start_ext+0xa8>)
{
    7f2e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    7f32:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    7f34:	252c      	movs	r5, #44	; 0x2c
    7f36:	fb05 6504 	mla	r5, r5, r4, r6
{
    7f3a:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    7f3c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    7f40:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
    7f44:	6869      	ldr	r1, [r5, #4]
    7f46:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    7f4a:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
    7f4e:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
    7f52:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
    7f56:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
    7f58:	f10e 0c01 	add.w	ip, lr, #1
    7f5c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    7f60:	4564      	cmp	r4, ip
    7f62:	bf98      	it	ls
    7f64:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    7f68:	4561      	cmp	r1, ip
    7f6a:	d02e      	beq.n	7fca <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    7f6c:	6879      	ldr	r1, [r7, #4]
    7f6e:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    7f72:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    7f76:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    7f7a:	f04f 0904 	mov.w	r9, #4
    7f7e:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    7f82:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    7f84:	9b08      	ldr	r3, [sp, #32]
    7f86:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    7f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f8a:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    7f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f8e:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    7f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f92:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    7f94:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7f96:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    7f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7f9a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    7f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7f9e:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    7fa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    7fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7fa6:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    7fa8:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    7faa:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7fac:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
    7fae:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
    7fb2:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7fb6:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
    7fba:	4798      	blx	r3
    7fbc:	4633      	mov	r3, r6
    7fbe:	4649      	mov	r1, r9
    7fc0:	2200      	movs	r2, #0
    7fc2:	47a8      	blx	r5
	return user_op->status;
    7fc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    7fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    7fca:	2001      	movs	r0, #1
}
    7fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7fd0:	200015b8 	.word	0x200015b8

00007fd4 <ticker_start>:
{
    7fd4:	b510      	push	{r4, lr}
    7fd6:	b08a      	sub	sp, #40	; 0x28
    7fd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7fda:	9400      	str	r4, [sp, #0]
{
    7fdc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7fde:	9401      	str	r4, [sp, #4]
{
    7fe0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7fe2:	9402      	str	r4, [sp, #8]
{
    7fe4:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7fe8:	9403      	str	r4, [sp, #12]
{
    7fea:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7fec:	9404      	str	r4, [sp, #16]
{
    7fee:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7ff0:	9405      	str	r4, [sp, #20]
{
    7ff2:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7ff4:	9406      	str	r4, [sp, #24]
{
    7ff6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7ff8:	9407      	str	r4, [sp, #28]
{
    7ffa:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    7ffc:	9408      	str	r4, [sp, #32]
    7ffe:	2400      	movs	r4, #0
    8000:	9409      	str	r4, [sp, #36]	; 0x24
    8002:	f7ff ff91 	bl	7f28 <ticker_start_ext>
}
    8006:	b00a      	add	sp, #40	; 0x28
    8008:	bd10      	pop	{r4, pc}
    800a:	bf00      	nop

0000800c <ticker_update_ext>:
{
    800c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    8010:	4d28      	ldr	r5, [pc, #160]	; (80b4 <ticker_update_ext+0xa8>)
{
    8012:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    8016:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    801a:	4604      	mov	r4, r0
    801c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    801e:	212c      	movs	r1, #44	; 0x2c
    8020:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
    8024:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    8028:	eb04 0446 	add.w	r4, r4, r6, lsl #1
    802c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
    8030:	684c      	ldr	r4, [r1, #4]
    8032:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    8036:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
    803a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    803e:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
    8040:	f10e 0c01 	add.w	ip, lr, #1
    8044:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    8048:	45e1      	cmp	r9, ip
    804a:	bf98      	it	ls
    804c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    8050:	4564      	cmp	r4, ip
{
    8052:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
    8056:	d02a      	beq.n	80ae <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
    8058:	f8d6 a004 	ldr.w	sl, [r6, #4]
    805c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    8060:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    8064:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    8068:	f04f 0b05 	mov.w	fp, #5
    806c:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    8070:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    8072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8074:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    8076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8078:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    807a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    807c:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    807e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8080:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    8082:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8084:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    8086:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    8088:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    808a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
    808c:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
    808e:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    8092:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
    8096:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    809a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    809e:	4798      	blx	r3
    80a0:	462b      	mov	r3, r5
    80a2:	2200      	movs	r2, #0
    80a4:	2104      	movs	r1, #4
    80a6:	47b0      	blx	r6
	return user_op->status;
    80a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    80aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    80ae:	2001      	movs	r0, #1
}
    80b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    80b4:	200015b8 	.word	0x200015b8

000080b8 <ticker_update>:
{
    80b8:	b510      	push	{r4, lr}
    80ba:	b088      	sub	sp, #32
    80bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    80be:	9400      	str	r4, [sp, #0]
{
    80c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    80c2:	9401      	str	r4, [sp, #4]
{
    80c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    80c6:	9402      	str	r4, [sp, #8]
{
    80c8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    80cc:	9403      	str	r4, [sp, #12]
{
    80ce:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    80d2:	9404      	str	r4, [sp, #16]
{
    80d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    80d6:	9405      	str	r4, [sp, #20]
{
    80d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    80da:	9406      	str	r4, [sp, #24]
    80dc:	2400      	movs	r4, #0
    80de:	9407      	str	r4, [sp, #28]
    80e0:	f7ff ff94 	bl	800c <ticker_update_ext>
}
    80e4:	b008      	add	sp, #32
    80e6:	bd10      	pop	{r4, pc}

000080e8 <ticker_stop>:
{
    80e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    80ec:	4c1e      	ldr	r4, [pc, #120]	; (8168 <ticker_stop+0x80>)
{
    80ee:	4684      	mov	ip, r0
    80f0:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    80f2:	212c      	movs	r1, #44	; 0x2c
    80f4:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
    80f8:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    80fc:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
    8100:	684d      	ldr	r5, [r1, #4]
    8102:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    8106:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    810a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    810e:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    8110:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
    8114:	f10e 0c01 	add.w	ip, lr, #1
    8118:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    811c:	4567      	cmp	r7, ip
    811e:	bf98      	it	ls
    8120:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    8124:	4565      	cmp	r5, ip
    8126:	d01c      	beq.n	8162 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
    8128:	6877      	ldr	r7, [r6, #4]
    812a:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    812e:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
    8132:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    8136:	f04f 0807 	mov.w	r8, #7
    813a:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
    813e:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
    8140:	9b06      	ldr	r3, [sp, #24]
    8142:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    8144:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    8146:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    8148:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
    814a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    814e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    8152:	4798      	blx	r3
    8154:	4623      	mov	r3, r4
    8156:	2200      	movs	r2, #0
    8158:	2104      	movs	r1, #4
    815a:	47b0      	blx	r6
	return user_op->status;
    815c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
    815e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    8162:	2001      	movs	r0, #1
}
    8164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8168:	200015b8 	.word	0x200015b8

0000816c <ticker_ticks_now_get>:
	return cntr_cnt_get();
    816c:	f00b b96e 	b.w	1344c <cntr_cnt_get>

00008170 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    8170:	b570      	push	{r4, r5, r6, lr}
    8172:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    8174:	2000      	movs	r0, #0
{
    8176:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
    8178:	f003 f986 	bl	b488 <ull_adv_is_enabled>
    817c:	b978      	cbnz	r0, 819e <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    817e:	b13c      	cbz	r4, 8190 <ll_addr_set+0x20>
    8180:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    8182:	2206      	movs	r2, #6
    8184:	4631      	mov	r1, r6
    8186:	4807      	ldr	r0, [pc, #28]	; (81a4 <ll_addr_set+0x34>)
    8188:	f010 fe3a 	bl	18e00 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    818c:	4628      	mov	r0, r5
}
    818e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    8190:	2206      	movs	r2, #6
    8192:	4631      	mov	r1, r6
    8194:	4804      	ldr	r0, [pc, #16]	; (81a8 <ll_addr_set+0x38>)
    8196:	f010 fe33 	bl	18e00 <memcpy>
	return 0;
    819a:	4620      	mov	r0, r4
}
    819c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    819e:	200c      	movs	r0, #12
}
    81a0:	bd70      	pop	{r4, r5, r6, pc}
    81a2:	bf00      	nop
    81a4:	200015ec 	.word	0x200015ec
    81a8:	200015e4 	.word	0x200015e4

000081ac <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    81ac:	2801      	cmp	r0, #1
{
    81ae:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    81b0:	d805      	bhi.n	81be <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
    81b2:	4a04      	ldr	r2, [pc, #16]	; (81c4 <ll_addr_get+0x18>)
    81b4:	4804      	ldr	r0, [pc, #16]	; (81c8 <ll_addr_get+0x1c>)
    81b6:	2b00      	cmp	r3, #0
    81b8:	bf18      	it	ne
    81ba:	4610      	movne	r0, r2
    81bc:	4770      	bx	lr
		return NULL;
    81be:	2000      	movs	r0, #0
	}

	return pub_addr;
}
    81c0:	4770      	bx	lr
    81c2:	bf00      	nop
    81c4:	200015ec 	.word	0x200015ec
    81c8:	200015e4 	.word	0x200015e4

000081cc <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
    81cc:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
    81ce:	b510      	push	{r4, lr}
    81d0:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
    81d2:	d80b      	bhi.n	81ec <ll_addr_read+0x20>
	if (addr_type) {
    81d4:	4608      	mov	r0, r1
		return rnd_addr;
    81d6:	4c07      	ldr	r4, [pc, #28]	; (81f4 <ll_addr_read+0x28>)
    81d8:	4907      	ldr	r1, [pc, #28]	; (81f8 <ll_addr_read+0x2c>)
    81da:	2b00      	cmp	r3, #0
    81dc:	bf18      	it	ne
    81de:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
    81e0:	2206      	movs	r2, #6
    81e2:	4621      	mov	r1, r4
    81e4:	f010 fe0c 	bl	18e00 <memcpy>
	}

	return addr;
}
    81e8:	4620      	mov	r0, r4
    81ea:	bd10      	pop	{r4, pc}
		return NULL;
    81ec:	2400      	movs	r4, #0
}
    81ee:	4620      	mov	r0, r4
    81f0:	bd10      	pop	{r4, pc}
    81f2:	bf00      	nop
    81f4:	200015e4 	.word	0x200015e4
    81f8:	200015ec 	.word	0x200015ec

000081fc <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    81fc:	2802      	cmp	r0, #2
    81fe:	d001      	beq.n	8204 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    8200:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    8202:	4770      	bx	lr
{
    8204:	b538      	push	{r3, r4, r5, lr}
    8206:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    8208:	4608      	mov	r0, r1
    820a:	461d      	mov	r5, r3
    820c:	f004 f862 	bl	c2d4 <ll_connected_get>
			if (!conn) {
    8210:	b110      	cbz	r0, 8218 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    8212:	2000      	movs	r0, #0
    8214:	7028      	strb	r0, [r5, #0]
}
    8216:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    8218:	4620      	mov	r0, r4
}
    821a:	bd38      	pop	{r3, r4, r5, pc}

0000821c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    821c:	2300      	movs	r3, #0
    821e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    8220:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    8222:	4770      	bx	lr

00008224 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    8224:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    8226:	4802      	ldr	r0, [pc, #8]	; (8230 <hci_driver_init+0xc>)
    8228:	f7fb ffb6 	bl	4198 <bt_hci_driver_register>

	return 0;
}
    822c:	2000      	movs	r0, #0
    822e:	bd08      	pop	{r3, pc}
    8230:	0001ce68 	.word	0x0001ce68

00008234 <hci_driver_send>:
{
    8234:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    8236:	8983      	ldrh	r3, [r0, #12]
{
    8238:	b083      	sub	sp, #12
	if (!buf->len) {
    823a:	b123      	cbz	r3, 8246 <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    823c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    823e:	4604      	mov	r4, r0
    8240:	b1c3      	cbz	r3, 8274 <hci_driver_send+0x40>
    8242:	2b02      	cmp	r3, #2
    8244:	d004      	beq.n	8250 <hci_driver_send+0x1c>
    8246:	f06f 0515 	mvn.w	r5, #21
}
    824a:	4628      	mov	r0, r5
    824c:	b003      	add	sp, #12
    824e:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    8250:	a901      	add	r1, sp, #4
    8252:	f000 ff13 	bl	907c <hci_acl_handle>
	if (evt) {
    8256:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    8258:	4605      	mov	r5, r0
	if (evt) {
    825a:	b113      	cbz	r3, 8262 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    825c:	4618      	mov	r0, r3
    825e:	f7fb ff7d 	bl	415c <bt_recv_prio>
	if (!err) {
    8262:	2d00      	cmp	r5, #0
    8264:	d1f1      	bne.n	824a <hci_driver_send+0x16>
		net_buf_unref(buf);
    8266:	4620      	mov	r0, r4
    8268:	f00c f87a 	bl	14360 <net_buf_unref>
    826c:	2500      	movs	r5, #0
}
    826e:	4628      	mov	r0, r5
    8270:	b003      	add	sp, #12
    8272:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    8274:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    8276:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    8278:	f000 fa42 	bl	8700 <hci_cmd_handle>
	if (evt) {
    827c:	2800      	cmp	r0, #0
    827e:	d0f2      	beq.n	8266 <hci_driver_send+0x32>
		bt_recv_prio(evt);
    8280:	f7fb ff6c 	bl	415c <bt_recv_prio>
		if (node_rx) {
    8284:	9d01      	ldr	r5, [sp, #4]
    8286:	2d00      	cmp	r5, #0
    8288:	d0ed      	beq.n	8266 <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    828a:	4628      	mov	r0, r5
    828c:	f001 fab0 	bl	97f0 <hci_get_class>
    8290:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    8292:	9901      	ldr	r1, [sp, #4]
    8294:	4801      	ldr	r0, [pc, #4]	; (829c <hci_driver_send+0x68>)
    8296:	f013 fd95 	bl	1bdc4 <k_queue_append>
	if (!err) {
    829a:	e7e4      	b.n	8266 <hci_driver_send+0x32>
    829c:	200008b4 	.word	0x200008b4

000082a0 <recv_thread>:
{
    82a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    82a2:	4e41      	ldr	r6, [pc, #260]	; (83a8 <recv_thread+0x108>)
		LL_ASSERT(0);
    82a4:	4f41      	ldr	r7, [pc, #260]	; (83ac <recv_thread+0x10c>)
{
    82a6:	b083      	sub	sp, #12
    82a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    82ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    82b0:	4630      	mov	r0, r6
    82b2:	f00e ffab 	bl	1720c <z_impl_k_queue_get>
		if (node_rx && !buf) {
    82b6:	2800      	cmp	r0, #0
    82b8:	d0f6      	beq.n	82a8 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    82ba:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    82bc:	9001      	str	r0, [sp, #4]
	switch (class) {
    82be:	2b04      	cmp	r3, #4
    82c0:	d821      	bhi.n	8306 <recv_thread+0x66>
    82c2:	2b00      	cmp	r3, #0
    82c4:	d14b      	bne.n	835e <recv_thread+0xbe>
		LL_ASSERT(0);
    82c6:	493a      	ldr	r1, [pc, #232]	; (83b0 <recv_thread+0x110>)
    82c8:	483a      	ldr	r0, [pc, #232]	; (83b4 <recv_thread+0x114>)
    82ca:	f44f 73cd 	mov.w	r3, #410	; 0x19a
    82ce:	463a      	mov	r2, r7
    82d0:	f00f ff4a 	bl	18168 <printk>
    82d4:	4040      	eors	r0, r0
    82d6:	f380 8811 	msr	BASEPRI, r0
    82da:	f04f 0003 	mov.w	r0, #3
    82de:	df02      	svc	2
	node_rx->hdr.next = NULL;
    82e0:	9b01      	ldr	r3, [sp, #4]
    82e2:	2200      	movs	r2, #0
    82e4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    82e6:	a801      	add	r0, sp, #4
    82e8:	f001 ff12 	bl	a110 <ll_rx_mem_release>
    82ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    82f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    82f4:	4630      	mov	r0, r6
    82f6:	f00e ff89 	bl	1720c <z_impl_k_queue_get>
		if (node_rx && !buf) {
    82fa:	2800      	cmp	r0, #0
    82fc:	d0d4      	beq.n	82a8 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    82fe:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    8300:	9001      	str	r0, [sp, #4]
	switch (class) {
    8302:	2b04      	cmp	r3, #4
    8304:	d9dd      	bls.n	82c2 <recv_thread+0x22>
    8306:	2b05      	cmp	r3, #5
    8308:	d1dd      	bne.n	82c6 <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    830a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    830e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8312:	2003      	movs	r0, #3
    8314:	f7fb fa72 	bl	37fc <bt_buf_get_rx>
    8318:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    831a:	4621      	mov	r1, r4
    831c:	9801      	ldr	r0, [sp, #4]
    831e:	f000 ff39 	bl	9194 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    8322:	9b01      	ldr	r3, [sp, #4]
    8324:	2200      	movs	r2, #0
    8326:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    8328:	a801      	add	r0, sp, #4
    832a:	f001 fef1 	bl	a110 <ll_rx_mem_release>
		while (buf) {
    832e:	2c00      	cmp	r4, #0
    8330:	d0ba      	beq.n	82a8 <recv_thread+0x8>
			frag = net_buf_ref(buf);
    8332:	4620      	mov	r0, r4
    8334:	f012 fd0d 	bl	1ad52 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    8338:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    833a:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    833c:	2000      	movs	r0, #0
    833e:	f012 fd2e 	bl	1ad9e <net_buf_frag_del>
			if (frag->len) {
    8342:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
    8344:	4604      	mov	r4, r0
				bt_recv(frag);
    8346:	4628      	mov	r0, r5
			if (frag->len) {
    8348:	b133      	cbz	r3, 8358 <recv_thread+0xb8>
				bt_recv(frag);
    834a:	f7fb fe8d 	bl	4068 <bt_recv>
	z_impl_k_yield();
    834e:	f00f fba5 	bl	17a9c <z_impl_k_yield>
		while (buf) {
    8352:	2c00      	cmp	r4, #0
    8354:	d1ed      	bne.n	8332 <recv_thread+0x92>
    8356:	e7a7      	b.n	82a8 <recv_thread+0x8>
				net_buf_unref(frag);
    8358:	f00c f802 	bl	14360 <net_buf_unref>
    835c:	e7f7      	b.n	834e <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    835e:	2b02      	cmp	r3, #2
    8360:	d013      	beq.n	838a <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    836a:	2001      	movs	r0, #1
    836c:	f7fb fa46 	bl	37fc <bt_buf_get_rx>
    8370:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    8372:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    8374:	b19c      	cbz	r4, 839e <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
    8376:	4621      	mov	r1, r4
    8378:	f000 ff46 	bl	9208 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    837c:	9b01      	ldr	r3, [sp, #4]
    837e:	2200      	movs	r2, #0
    8380:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    8382:	a801      	add	r0, sp, #4
    8384:	f001 fec4 	bl	a110 <ll_rx_mem_release>
		while (buf) {
    8388:	e7d3      	b.n	8332 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    838a:	2200      	movs	r2, #0
    838c:	2300      	movs	r3, #0
    838e:	2101      	movs	r1, #1
    8390:	2000      	movs	r0, #0
    8392:	f7fb fa5d 	bl	3850 <bt_buf_get_evt>
    8396:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
    8398:	9801      	ldr	r0, [sp, #4]
		if (buf) {
    839a:	2c00      	cmp	r4, #0
    839c:	d1eb      	bne.n	8376 <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
    839e:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    83a0:	a801      	add	r0, sp, #4
    83a2:	f001 feb5 	bl	a110 <ll_rx_mem_release>
		while (buf) {
    83a6:	e77f      	b.n	82a8 <recv_thread+0x8>
    83a8:	200008b4 	.word	0x200008b4
    83ac:	0001ce04 	.word	0x0001ce04
    83b0:	0001ce44 	.word	0x0001ce44
    83b4:	0001cde4 	.word	0x0001cde4

000083b8 <prio_recv_thread>:
{
    83b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    83bc:	4f2e      	ldr	r7, [pc, #184]	; (8478 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
    83be:	4e2f      	ldr	r6, [pc, #188]	; (847c <prio_recv_thread+0xc4>)
{
    83c0:	b082      	sub	sp, #8
    83c2:	e00c      	b.n	83de <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    83c4:	f7fb fa44 	bl	3850 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    83c8:	4622      	mov	r2, r4
    83ca:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    83ce:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    83d0:	f001 f9f6 	bl	97c0 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    83d4:	4620      	mov	r0, r4
    83d6:	f7fb fec1 	bl	415c <bt_recv_prio>
	z_impl_k_yield();
    83da:	f00f fb5f 	bl	17a9c <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    83de:	f10d 0102 	add.w	r1, sp, #2
    83e2:	a801      	add	r0, sp, #4
    83e4:	f001 fce2 	bl	9dac <ll_rx_get>
    83e8:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    83ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    83ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    83f2:	2100      	movs	r1, #0
    83f4:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    83f6:	2c00      	cmp	r4, #0
    83f8:	d1e4      	bne.n	83c4 <prio_recv_thread+0xc>
		if (node_rx) {
    83fa:	9b01      	ldr	r3, [sp, #4]
    83fc:	b1b3      	cbz	r3, 842c <prio_recv_thread+0x74>
			ll_rx_dequeue();
    83fe:	f001 fdb7 	bl	9f70 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    8402:	f8dd 8004 	ldr.w	r8, [sp, #4]
    8406:	4640      	mov	r0, r8
    8408:	f001 f9f2 	bl	97f0 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    840c:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    840e:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    8412:	796b      	ldrb	r3, [r5, #5]
    8414:	2b03      	cmp	r3, #3
    8416:	d102      	bne.n	841e <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    8418:	792b      	ldrb	r3, [r5, #4]
    841a:	2b17      	cmp	r3, #23
    841c:	d00e      	beq.n	843c <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
    841e:	4629      	mov	r1, r5
    8420:	4630      	mov	r0, r6
    8422:	f013 fccf 	bl	1bdc4 <k_queue_append>
		if (iso_received || node_rx) {
    8426:	9b01      	ldr	r3, [sp, #4]
    8428:	2b00      	cmp	r3, #0
    842a:	d1d8      	bne.n	83de <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
    842c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8434:	4638      	mov	r0, r7
    8436:	f00e ff43 	bl	172c0 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    843a:	e7d0      	b.n	83de <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    843c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8440:	4621      	mov	r1, r4
    8442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8446:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    8448:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    844c:	f7fb fa00 	bl	3850 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    8450:	4641      	mov	r1, r8
    8452:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    8454:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    8456:	f105 001c 	add.w	r0, r5, #28
    845a:	f000 fe73 	bl	9144 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    845e:	4640      	mov	r0, r8
    8460:	f000 fe90 	bl	9184 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    8464:	4620      	mov	r0, r4
			if (buf) {
    8466:	b124      	cbz	r4, 8472 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
    8468:	f7fb fe78 	bl	415c <bt_recv_prio>
					net_buf_unref(buf);
    846c:	4620      	mov	r0, r4
    846e:	f00b ff77 	bl	14360 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    8472:	9d01      	ldr	r5, [sp, #4]
    8474:	e7d3      	b.n	841e <prio_recv_thread+0x66>
    8476:	bf00      	nop
    8478:	20000884 	.word	0x20000884
    847c:	200008b4 	.word	0x200008b4

00008480 <hci_driver_open>:
{
    8480:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    8482:	481a      	ldr	r0, [pc, #104]	; (84ec <hci_driver_open+0x6c>)
{
    8484:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    8486:	f002 fa8b 	bl	a9a0 <ll_init>
	if (err) {
    848a:	4604      	mov	r4, r0
    848c:	bb58      	cbnz	r0, 84e6 <hci_driver_open+0x66>
	hci_init(NULL);
    848e:	f001 f9c5 	bl	981c <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    8492:	2600      	movs	r6, #0
    8494:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8496:	f06f 0209 	mvn.w	r2, #9
    849a:	e9cd 2403 	strd	r2, r4, [sp, #12]
    849e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    84a2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    84a6:	4b12      	ldr	r3, [pc, #72]	; (84f0 <hci_driver_open+0x70>)
    84a8:	4912      	ldr	r1, [pc, #72]	; (84f4 <hci_driver_open+0x74>)
    84aa:	9400      	str	r4, [sp, #0]
    84ac:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    84b0:	4811      	ldr	r0, [pc, #68]	; (84f8 <hci_driver_open+0x78>)
    84b2:	f00e fe07 	bl	170c4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    84b6:	4911      	ldr	r1, [pc, #68]	; (84fc <hci_driver_open+0x7c>)
    84b8:	480f      	ldr	r0, [pc, #60]	; (84f8 <hci_driver_open+0x78>)
    84ba:	f013 fbfb 	bl	1bcb4 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    84be:	f06f 0207 	mvn.w	r2, #7
    84c2:	e9cd 2403 	strd	r2, r4, [sp, #12]
    84c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    84ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
    84ce:	4b0c      	ldr	r3, [pc, #48]	; (8500 <hci_driver_open+0x80>)
    84d0:	490c      	ldr	r1, [pc, #48]	; (8504 <hci_driver_open+0x84>)
    84d2:	9400      	str	r4, [sp, #0]
    84d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    84d8:	480b      	ldr	r0, [pc, #44]	; (8508 <hci_driver_open+0x88>)
    84da:	f00e fdf3 	bl	170c4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    84de:	490b      	ldr	r1, [pc, #44]	; (850c <hci_driver_open+0x8c>)
    84e0:	4809      	ldr	r0, [pc, #36]	; (8508 <hci_driver_open+0x88>)
    84e2:	f013 fbe7 	bl	1bcb4 <z_impl_k_thread_name_set>
}
    84e6:	4620      	mov	r0, r4
    84e8:	b008      	add	sp, #32
    84ea:	bdd0      	pop	{r4, r6, r7, pc}
    84ec:	20000884 	.word	0x20000884
    84f0:	000083b9 	.word	0x000083b9
    84f4:	20002ea0 	.word	0x20002ea0
    84f8:	20000dc0 	.word	0x20000dc0
    84fc:	0001ce48 	.word	0x0001ce48
    8500:	000082a1 	.word	0x000082a1
    8504:	20003080 	.word	0x20003080
    8508:	20000e40 	.word	0x20000e40
    850c:	0001ce54 	.word	0x0001ce54

00008510 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    8510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8512:	4c19      	ldr	r4, [pc, #100]	; (8578 <le_remote_feat_complete+0x68>)
    8514:	6864      	ldr	r4, [r4, #4]
    8516:	00a4      	lsls	r4, r4, #2
    8518:	d504      	bpl.n	8524 <le_remote_feat_complete+0x14>
    851a:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    851c:	4a17      	ldr	r2, [pc, #92]	; (857c <le_remote_feat_complete+0x6c>)
    851e:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8520:	0712      	lsls	r2, r2, #28
    8522:	d400      	bmi.n	8526 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    8524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8526:	f103 0408 	add.w	r4, r3, #8
    852a:	4607      	mov	r7, r0
    852c:	460e      	mov	r6, r1
    852e:	4620      	mov	r0, r4
    8530:	2102      	movs	r1, #2
    8532:	f012 fc40 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    8536:	233e      	movs	r3, #62	; 0x3e
    8538:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    853a:	230c      	movs	r3, #12
    853c:	7043      	strb	r3, [r0, #1]
    853e:	2101      	movs	r1, #1
    8540:	4620      	mov	r0, r4
    8542:	f012 fc38 	bl	1adb6 <net_buf_simple_add>
    8546:	4603      	mov	r3, r0
	me->subevent = subevt;
    8548:	2204      	movs	r2, #4
    854a:	701a      	strb	r2, [r3, #0]
    854c:	4620      	mov	r0, r4
    854e:	210b      	movs	r1, #11
    8550:	f012 fc31 	bl	1adb6 <net_buf_simple_add>
		memcpy(&sep->features[0],
    8554:	2208      	movs	r2, #8
	sep->status = status;
    8556:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8558:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    855c:	b92f      	cbnz	r7, 856a <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
    855e:	1d31      	adds	r1, r6, #4
    8560:	3003      	adds	r0, #3
}
    8562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    8566:	f010 bc4b 	b.w	18e00 <memcpy>
}
    856a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    856e:	2100      	movs	r1, #0
    8570:	3003      	adds	r0, #3
    8572:	f010 bc50 	b.w	18e16 <memset>
    8576:	bf00      	nop
    8578:	20000170 	.word	0x20000170
    857c:	20000178 	.word	0x20000178

00008580 <hci_vendor_cmd_handle_common>:
{
    8580:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
    8582:	3801      	subs	r0, #1
{
    8584:	b087      	sub	sp, #28
    8586:	4615      	mov	r5, r2
	switch (ocf) {
    8588:	2809      	cmp	r0, #9
    858a:	d806      	bhi.n	859a <hci_vendor_cmd_handle_common+0x1a>
    858c:	e8df f000 	tbb	[pc, r0]
    8590:	05432609 	.word	0x05432609
    8594:	6b055705 	.word	0x6b055705
    8598:	9f8a      	.short	0x9f8a
    859a:	f06f 0015 	mvn.w	r0, #21
}
    859e:	b007      	add	sp, #28
    85a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    85a2:	4b55      	ldr	r3, [pc, #340]	; (86f8 <hci_vendor_cmd_handle_common+0x178>)
    85a4:	210d      	movs	r1, #13
    85a6:	8818      	ldrh	r0, [r3, #0]
    85a8:	f010 ff83 	bl	194b2 <bt_hci_cmd_complete_create>
    85ac:	210d      	movs	r1, #13
    85ae:	6028      	str	r0, [r5, #0]
    85b0:	3008      	adds	r0, #8
    85b2:	f012 fc00 	bl	1adb6 <net_buf_simple_add>
    85b6:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    85b8:	2202      	movs	r2, #2
	rp->status = 0x00;
    85ba:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    85bc:	2103      	movs	r1, #3
	rp->status = 0x00;
    85be:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    85c0:	705a      	strb	r2, [r3, #1]
    85c2:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    85c4:	70da      	strb	r2, [r3, #3]
    85c6:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    85c8:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    85ca:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    85cc:	71d8      	strb	r0, [r3, #7]
    85ce:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    85d0:	7258      	strb	r0, [r3, #9]
    85d2:	7298      	strb	r0, [r3, #10]
    85d4:	72d8      	strb	r0, [r3, #11]
    85d6:	7318      	strb	r0, [r3, #12]
}
    85d8:	b007      	add	sp, #28
    85da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    85dc:	4b46      	ldr	r3, [pc, #280]	; (86f8 <hci_vendor_cmd_handle_common+0x178>)
    85de:	2141      	movs	r1, #65	; 0x41
    85e0:	8818      	ldrh	r0, [r3, #0]
    85e2:	f010 ff66 	bl	194b2 <bt_hci_cmd_complete_create>
    85e6:	2141      	movs	r1, #65	; 0x41
    85e8:	6028      	str	r0, [r5, #0]
    85ea:	3008      	adds	r0, #8
    85ec:	f012 fbe3 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    85f0:	2400      	movs	r4, #0
    85f2:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    85f4:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    85f6:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    85fa:	4621      	mov	r1, r4
    85fc:	f010 fc0b 	bl	18e16 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    8600:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    8602:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    8604:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    8608:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    860c:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    860e:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    8610:	70ab      	strb	r3, [r5, #2]
}
    8612:	b007      	add	sp, #28
    8614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8616:	4b38      	ldr	r3, [pc, #224]	; (86f8 <hci_vendor_cmd_handle_common+0x178>)
    8618:	2109      	movs	r1, #9
    861a:	8818      	ldrh	r0, [r3, #0]
    861c:	f010 ff49 	bl	194b2 <bt_hci_cmd_complete_create>
    8620:	2109      	movs	r1, #9
    8622:	6028      	str	r0, [r5, #0]
    8624:	3008      	adds	r0, #8
    8626:	f012 fbc6 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    862a:	2400      	movs	r4, #0
    862c:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    8630:	2208      	movs	r2, #8
    8632:	4621      	mov	r1, r4
    8634:	f010 fbef 	bl	18e16 <memset>
	return 0;
    8638:	4620      	mov	r0, r4
}
    863a:	b007      	add	sp, #28
    863c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    863e:	6889      	ldr	r1, [r1, #8]
    8640:	2000      	movs	r0, #0
    8642:	f7ff fd95 	bl	8170 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    8646:	4b2c      	ldr	r3, [pc, #176]	; (86f8 <hci_vendor_cmd_handle_common+0x178>)
    8648:	2101      	movs	r1, #1
    864a:	8818      	ldrh	r0, [r3, #0]
    864c:	f010 ff31 	bl	194b2 <bt_hci_cmd_complete_create>
    8650:	2101      	movs	r1, #1
    8652:	4604      	mov	r4, r0
    8654:	3008      	adds	r0, #8
    8656:	f012 fbae 	bl	1adb6 <net_buf_simple_add>
    865a:	4603      	mov	r3, r0
	ccst->status = status;
    865c:	2000      	movs	r0, #0
    865e:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
    8660:	602c      	str	r4, [r5, #0]
}
    8662:	b007      	add	sp, #28
    8664:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    8666:	4e25      	ldr	r6, [pc, #148]	; (86fc <hci_vendor_cmd_handle_common+0x17c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8668:	4f23      	ldr	r7, [pc, #140]	; (86f8 <hci_vendor_cmd_handle_common+0x178>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    866a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    866c:	46ec      	mov	ip, sp
    866e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8672:	e896 0003 	ldmia.w	r6, {r0, r1}
    8676:	f84c 0b04 	str.w	r0, [ip], #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    867a:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    867c:	f88c 1000 	strb.w	r1, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8680:	2116      	movs	r1, #22
    8682:	f010 ff16 	bl	194b2 <bt_hci_cmd_complete_create>
    8686:	2116      	movs	r1, #22
    8688:	6028      	str	r0, [r5, #0]
    868a:	3008      	adds	r0, #8
    868c:	f012 fb93 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    8690:	2400      	movs	r4, #0
    8692:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    8696:	2215      	movs	r2, #21
    8698:	4669      	mov	r1, sp
    869a:	f010 fbb1 	bl	18e00 <memcpy>
	return 0;
    869e:	4620      	mov	r0, r4
}
    86a0:	b007      	add	sp, #28
    86a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    86a4:	4b14      	ldr	r3, [pc, #80]	; (86f8 <hci_vendor_cmd_handle_common+0x178>)
    86a6:	2118      	movs	r1, #24
    86a8:	8818      	ldrh	r0, [r3, #0]
    86aa:	f010 ff02 	bl	194b2 <bt_hci_cmd_complete_create>
    86ae:	2118      	movs	r1, #24
    86b0:	6028      	str	r0, [r5, #0]
    86b2:	3008      	adds	r0, #8
    86b4:	f012 fb7f 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    86b8:	2400      	movs	r4, #0
    86ba:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    86bc:	2101      	movs	r1, #1
	rp->status = 0x00;
    86be:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    86c2:	f00b fccd 	bl	14060 <hci_vendor_read_static_addr>
    86c6:	7068      	strb	r0, [r5, #1]
	return 0;
    86c8:	4620      	mov	r0, r4
}
    86ca:	b007      	add	sp, #28
    86cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    86ce:	4b0a      	ldr	r3, [pc, #40]	; (86f8 <hci_vendor_cmd_handle_common+0x178>)
    86d0:	2121      	movs	r1, #33	; 0x21
    86d2:	8818      	ldrh	r0, [r3, #0]
    86d4:	f010 feed 	bl	194b2 <bt_hci_cmd_complete_create>
    86d8:	2121      	movs	r1, #33	; 0x21
    86da:	6028      	str	r0, [r5, #0]
    86dc:	3008      	adds	r0, #8
    86de:	f012 fb6a 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    86e2:	4601      	mov	r1, r0
    86e4:	2400      	movs	r4, #0
    86e6:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    86ea:	3001      	adds	r0, #1
    86ec:	f00b fd2c 	bl	14148 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    86f0:	4620      	mov	r0, r4
}
    86f2:	b007      	add	sp, #28
    86f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86f6:	bf00      	nop
    86f8:	20002798 	.word	0x20002798
    86fc:	0001ce7c 	.word	0x0001ce7c

00008700 <hci_cmd_handle>:
{
    8700:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    8702:	8983      	ldrh	r3, [r0, #12]
{
    8704:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    8706:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    8708:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    870a:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    870c:	d92f      	bls.n	876e <hci_cmd_handle+0x6e>
	return net_buf_simple_pull_mem(&buf->b, len);
    870e:	4604      	mov	r4, r0
    8710:	2103      	movs	r1, #3
    8712:	3008      	adds	r0, #8
    8714:	f012 fb76 	bl	1ae04 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    8718:	89a2      	ldrh	r2, [r4, #12]
    871a:	7883      	ldrb	r3, [r0, #2]
    871c:	429a      	cmp	r2, r3
    871e:	d326      	bcc.n	876e <hci_cmd_handle+0x6e>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8720:	8802      	ldrh	r2, [r0, #0]
    8722:	4eb6      	ldr	r6, [pc, #728]	; (89fc <hci_cmd_handle+0x2fc>)
	switch (BT_OGF(_opcode)) {
    8724:	f3c2 2385 	ubfx	r3, r2, #10, #6
    8728:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    872a:	8032      	strh	r2, [r6, #0]
    872c:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
    872e:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    8732:	d809      	bhi.n	8748 <hci_cmd_handle+0x48>
    8734:	b1a3      	cbz	r3, 8760 <hci_cmd_handle+0x60>
    8736:	3b01      	subs	r3, #1
    8738:	2b07      	cmp	r3, #7
    873a:	d811      	bhi.n	8760 <hci_cmd_handle+0x60>
    873c:	e8df f003 	tbb	[pc, r3]
    8740:	4d2a101b 	.word	0x4d2a101b
    8744:	66101010 	.word	0x66101010
    8748:	2b3f      	cmp	r3, #63	; 0x3f
    874a:	d109      	bne.n	8760 <hci_cmd_handle+0x60>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    874c:	4621      	mov	r1, r4
    874e:	aa07      	add	r2, sp, #28
    8750:	4628      	mov	r0, r5
    8752:	f7ff ff15 	bl	8580 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    8756:	3016      	adds	r0, #22
	return evt;
    8758:	bf18      	it	ne
    875a:	9c07      	ldrne	r4, [sp, #28]
	if (err == -EINVAL) {
    875c:	d104      	bne.n	8768 <hci_cmd_handle+0x68>
	return bt_hci_cmd_status_create(_opcode, status);
    875e:	8830      	ldrh	r0, [r6, #0]
    8760:	2101      	movs	r1, #1
    8762:	f010 feb8 	bl	194d6 <bt_hci_cmd_status_create>
    8766:	4604      	mov	r4, r0
}
    8768:	4620      	mov	r0, r4
    876a:	b00d      	add	sp, #52	; 0x34
    876c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    876e:	2400      	movs	r4, #0
}
    8770:	4620      	mov	r0, r4
    8772:	b00d      	add	sp, #52	; 0x34
    8774:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    8776:	2d06      	cmp	r5, #6
    8778:	f000 8420 	beq.w	8fbc <hci_cmd_handle+0x8bc>
    877c:	2d1d      	cmp	r5, #29
    877e:	d1ef      	bne.n	8760 <hci_cmd_handle+0x60>
	handle = sys_le16_to_cpu(cmd->handle);
    8780:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    8782:	8818      	ldrh	r0, [r3, #0]
    8784:	f003 ff34 	bl	c5f0 <ll_version_ind_send>
    8788:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    878a:	8830      	ldrh	r0, [r6, #0]
    878c:	f010 fea3 	bl	194d6 <bt_hci_cmd_status_create>
    8790:	4604      	mov	r4, r0
}
    8792:	e7e9      	b.n	8768 <hci_cmd_handle+0x68>
	switch (ocf) {
    8794:	2d63      	cmp	r5, #99	; 0x63
    8796:	f000 845a 	beq.w	904e <hci_cmd_handle+0x94e>
    879a:	f200 80ed 	bhi.w	8978 <hci_cmd_handle+0x278>
    879e:	2d03      	cmp	r5, #3
    87a0:	f000 8433 	beq.w	900a <hci_cmd_handle+0x90a>
    87a4:	2d2d      	cmp	r5, #45	; 0x2d
    87a6:	f040 80d3 	bne.w	8950 <hci_cmd_handle+0x250>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    87aa:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    87ac:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    87ae:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    87b0:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    87b2:	f010 fe7e 	bl	194b2 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    87b6:	2104      	movs	r1, #4
    87b8:	9007      	str	r0, [sp, #28]
    87ba:	3008      	adds	r0, #8
    87bc:	f012 fafb 	bl	1adb6 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    87c0:	b2b4      	uxth	r4, r6
    87c2:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    87c4:	1cc3      	adds	r3, r0, #3
    87c6:	4621      	mov	r1, r4
    87c8:	463a      	mov	r2, r7
    87ca:	2002      	movs	r0, #2
    87cc:	f7ff fd16 	bl	81fc <ll_tx_pwr_lvl_get>
	rp->status = status;
    87d0:	7028      	strb	r0, [r5, #0]
	return evt;
    87d2:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    87d4:	f8a5 6001 	strh.w	r6, [r5, #1]
}
    87d8:	e7c6      	b.n	8768 <hci_cmd_handle+0x68>
	switch (ocf) {
    87da:	1e6a      	subs	r2, r5, #1
    87dc:	2a08      	cmp	r2, #8
    87de:	d8bf      	bhi.n	8760 <hci_cmd_handle+0x60>
    87e0:	a301      	add	r3, pc, #4	; (adr r3, 87e8 <hci_cmd_handle+0xe8>)
    87e2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    87e6:	bf00      	nop
    87e8:	00008ac1 	.word	0x00008ac1
    87ec:	00008a05 	.word	0x00008a05
    87f0:	000089d3 	.word	0x000089d3
    87f4:	00008761 	.word	0x00008761
    87f8:	00008761 	.word	0x00008761
    87fc:	00008761 	.word	0x00008761
    8800:	00008761 	.word	0x00008761
    8804:	00008761 	.word	0x00008761
    8808:	000089b1 	.word	0x000089b1
	switch (ocf) {
    880c:	1e6a      	subs	r2, r5, #1
    880e:	2a4d      	cmp	r2, #77	; 0x4d
    8810:	d8a6      	bhi.n	8760 <hci_cmd_handle+0x60>
    8812:	a301      	add	r3, pc, #4	; (adr r3, 8818 <hci_cmd_handle+0x118>)
    8814:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8818:	00008b1b 	.word	0x00008b1b
    881c:	00008af7 	.word	0x00008af7
    8820:	00008bc3 	.word	0x00008bc3
    8824:	00008761 	.word	0x00008761
    8828:	00008bb9 	.word	0x00008bb9
    882c:	00008b9d 	.word	0x00008b9d
    8830:	00008b81 	.word	0x00008b81
    8834:	00008b75 	.word	0x00008b75
    8838:	00008b69 	.word	0x00008b69
    883c:	00008b49 	.word	0x00008b49
    8840:	00008761 	.word	0x00008761
    8844:	00008761 	.word	0x00008761
    8848:	00008761 	.word	0x00008761
    884c:	00008761 	.word	0x00008761
    8850:	00008b27 	.word	0x00008b27
    8854:	00008fb7 	.word	0x00008fb7
    8858:	00008faf 	.word	0x00008faf
    885c:	00008fa7 	.word	0x00008fa7
    8860:	00008f7f 	.word	0x00008f7f
    8864:	00008761 	.word	0x00008761
    8868:	00008f53 	.word	0x00008f53
    886c:	00008f3f 	.word	0x00008f3f
    8870:	00008f0b 	.word	0x00008f0b
    8874:	00008ee9 	.word	0x00008ee9
    8878:	00008761 	.word	0x00008761
    887c:	00008edf 	.word	0x00008edf
    8880:	00008ecf 	.word	0x00008ecf
    8884:	00008e99 	.word	0x00008e99
    8888:	00008761 	.word	0x00008761
    888c:	00008761 	.word	0x00008761
    8890:	00008761 	.word	0x00008761
    8894:	00008e7b 	.word	0x00008e7b
    8898:	00008e63 	.word	0x00008e63
    889c:	00008e53 	.word	0x00008e53
    88a0:	00008e1d 	.word	0x00008e1d
    88a4:	00008e0b 	.word	0x00008e0b
    88a8:	00008761 	.word	0x00008761
    88ac:	00008761 	.word	0x00008761
    88b0:	00008dfd 	.word	0x00008dfd
    88b4:	00008df5 	.word	0x00008df5
    88b8:	00008def 	.word	0x00008def
    88bc:	00008dcd 	.word	0x00008dcd
    88c0:	00008d9f 	.word	0x00008d9f
    88c4:	00008d71 	.word	0x00008d71
    88c8:	00008d67 	.word	0x00008d67
    88cc:	00008d59 	.word	0x00008d59
    88d0:	00008d0d 	.word	0x00008d0d
    88d4:	00008cb3 	.word	0x00008cb3
    88d8:	00008c95 	.word	0x00008c95
    88dc:	00008c39 	.word	0x00008c39
    88e0:	00008761 	.word	0x00008761
    88e4:	00008761 	.word	0x00008761
    88e8:	00008761 	.word	0x00008761
    88ec:	00008761 	.word	0x00008761
    88f0:	00008761 	.word	0x00008761
    88f4:	00008761 	.word	0x00008761
    88f8:	00008761 	.word	0x00008761
    88fc:	00008761 	.word	0x00008761
    8900:	00008761 	.word	0x00008761
    8904:	00008761 	.word	0x00008761
    8908:	00008761 	.word	0x00008761
    890c:	00008761 	.word	0x00008761
    8910:	00008761 	.word	0x00008761
    8914:	00008761 	.word	0x00008761
    8918:	00008761 	.word	0x00008761
    891c:	00008761 	.word	0x00008761
    8920:	00008761 	.word	0x00008761
    8924:	00008761 	.word	0x00008761
    8928:	00008761 	.word	0x00008761
    892c:	00008761 	.word	0x00008761
    8930:	00008761 	.word	0x00008761
    8934:	00008761 	.word	0x00008761
    8938:	00008761 	.word	0x00008761
    893c:	00008761 	.word	0x00008761
    8940:	00008c15 	.word	0x00008c15
    8944:	00008761 	.word	0x00008761
    8948:	00008761 	.word	0x00008761
    894c:	00008c0b 	.word	0x00008c0b
	switch (ocf) {
    8950:	2d01      	cmp	r5, #1
    8952:	f47f af05 	bne.w	8760 <hci_cmd_handle+0x60>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    8956:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    8958:	4b29      	ldr	r3, [pc, #164]	; (8a00 <hci_cmd_handle+0x300>)
    895a:	6811      	ldr	r1, [r2, #0]
    895c:	6852      	ldr	r2, [r2, #4]
    895e:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    8960:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    8962:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    8964:	f010 fda5 	bl	194b2 <bt_hci_cmd_complete_create>
    8968:	2101      	movs	r1, #1
    896a:	4604      	mov	r4, r0
    896c:	3008      	adds	r0, #8
    896e:	f012 fa22 	bl	1adb6 <net_buf_simple_add>
	ccst->status = status;
    8972:	2300      	movs	r3, #0
    8974:	7003      	strb	r3, [r0, #0]
}
    8976:	e6f7      	b.n	8768 <hci_cmd_handle+0x68>
	switch (ocf) {
    8978:	2d7b      	cmp	r5, #123	; 0x7b
    897a:	f000 832b 	beq.w	8fd4 <hci_cmd_handle+0x8d4>
    897e:	2d7c      	cmp	r5, #124	; 0x7c
    8980:	f47f aeee 	bne.w	8760 <hci_cmd_handle+0x60>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    8984:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8986:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    8988:	8859      	ldrh	r1, [r3, #2]
    898a:	b2a8      	uxth	r0, r5
    898c:	f003 ff6a 	bl	c864 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    8990:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8992:	2103      	movs	r1, #3
    8994:	8830      	ldrh	r0, [r6, #0]
    8996:	f010 fd8c 	bl	194b2 <bt_hci_cmd_complete_create>
    899a:	2103      	movs	r1, #3
    899c:	4603      	mov	r3, r0
    899e:	3008      	adds	r0, #8
    89a0:	9307      	str	r3, [sp, #28]
    89a2:	f012 fa08 	bl	1adb6 <net_buf_simple_add>
	rp->status = status;
    89a6:	7004      	strb	r4, [r0, #0]
	return evt;
    89a8:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    89aa:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    89ae:	e6db      	b.n	8768 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    89b0:	2107      	movs	r1, #7
    89b2:	f010 fd7e 	bl	194b2 <bt_hci_cmd_complete_create>
    89b6:	2107      	movs	r1, #7
    89b8:	4603      	mov	r3, r0
    89ba:	3008      	adds	r0, #8
    89bc:	9307      	str	r3, [sp, #28]
    89be:	f012 f9fa 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    89c2:	4601      	mov	r1, r0
    89c4:	2000      	movs	r0, #0
    89c6:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
    89ca:	f7ff fbff 	bl	81cc <ll_addr_read>
	return evt;
    89ce:	9c07      	ldr	r4, [sp, #28]
    89d0:	e6ca      	b.n	8768 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    89d2:	2109      	movs	r1, #9
    89d4:	f010 fd6d 	bl	194b2 <bt_hci_cmd_complete_create>
    89d8:	2109      	movs	r1, #9
    89da:	4603      	mov	r3, r0
    89dc:	3008      	adds	r0, #8
    89de:	9307      	str	r3, [sp, #28]
    89e0:	f012 f9e9 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    89e4:	2100      	movs	r1, #0
    89e6:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    89e8:	2208      	movs	r2, #8
	rp->status = 0x00;
    89ea:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    89ee:	f010 fa12 	bl	18e16 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    89f2:	2360      	movs	r3, #96	; 0x60
	return evt;
    89f4:	9c07      	ldr	r4, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
    89f6:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
    89f8:	e6b6      	b.n	8768 <hci_cmd_handle+0x68>
    89fa:	bf00      	nop
    89fc:	20002798 	.word	0x20002798
    8a00:	20000170 	.word	0x20000170
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8a04:	2141      	movs	r1, #65	; 0x41
    8a06:	f010 fd54 	bl	194b2 <bt_hci_cmd_complete_create>
    8a0a:	2141      	movs	r1, #65	; 0x41
    8a0c:	4603      	mov	r3, r0
    8a0e:	3008      	adds	r0, #8
    8a10:	9307      	str	r3, [sp, #28]
    8a12:	f012 f9d0 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    8a16:	2100      	movs	r1, #0
    8a18:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    8a1a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    8a1c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    8a20:	f010 f9f9 	bl	18e16 <memset>
	rp->commands[15] |= BIT(1);
    8a24:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
    8a26:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
    8a28:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    8a2a:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
    8a2c:	f043 0302 	orr.w	r3, r3, #2
    8a30:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    8a32:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
    8a34:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
    8a38:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    8a3c:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
    8a40:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
    8a42:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
    8a44:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
    8a46:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    8a48:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
    8a4a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
    8a4e:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
    8a52:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
    8a56:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
    8a5a:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
    8a5e:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
    8a60:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
    8a62:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
    8a64:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
    8a66:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
    8a68:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
    8a6c:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8a6e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
    8a72:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    8a76:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
    8a7a:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8a7e:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
    8a82:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
    8a84:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
    8a86:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    8a8a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    8a8e:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    8a90:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
    8a94:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    8a98:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8a9c:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    8aa0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
    8aa4:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
    8aa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    8aac:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    8ab0:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    8ab4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    8ab8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
    8abc:	9c07      	ldr	r4, [sp, #28]
    8abe:	e653      	b.n	8768 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8ac0:	2109      	movs	r1, #9
    8ac2:	f010 fcf6 	bl	194b2 <bt_hci_cmd_complete_create>
    8ac6:	2109      	movs	r1, #9
    8ac8:	4603      	mov	r3, r0
    8aca:	3008      	adds	r0, #8
    8acc:	9307      	str	r3, [sp, #28]
    8ace:	f012 f972 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    8ad2:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
    8ad4:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    8ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
    8ada:	7003      	strb	r3, [r0, #0]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    8adc:	f06f 040e 	mvn.w	r4, #14
	rp->hci_version = LL_VERSION_NUMBER;
    8ae0:	7041      	strb	r1, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    8ae2:	7083      	strb	r3, [r0, #2]
    8ae4:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    8ae6:	2305      	movs	r3, #5
    8ae8:	7144      	strb	r4, [r0, #5]
	rp->lmp_version = LL_VERSION_NUMBER;
    8aea:	7101      	strb	r1, [r0, #4]
	return evt;
    8aec:	9c07      	ldr	r4, [sp, #28]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    8aee:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    8af0:	71c2      	strb	r2, [r0, #7]
    8af2:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
    8af4:	e638      	b.n	8768 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8af6:	2104      	movs	r1, #4
    8af8:	f010 fcdb 	bl	194b2 <bt_hci_cmd_complete_create>
    8afc:	2104      	movs	r1, #4
    8afe:	4603      	mov	r3, r0
    8b00:	3008      	adds	r0, #8
    8b02:	9307      	str	r3, [sp, #28]
    8b04:	f012 f957 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    8b08:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    8b0a:	2103      	movs	r1, #3
	rp->status = 0x00;
    8b0c:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    8b0e:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    8b10:	70c1      	strb	r1, [r0, #3]
	return evt;
    8b12:	9c07      	ldr	r4, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
    8b14:	7042      	strb	r2, [r0, #1]
    8b16:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    8b18:	e626      	b.n	8768 <hci_cmd_handle+0x68>
    8b1a:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    8b1c:	4bbe      	ldr	r3, [pc, #760]	; (8e18 <hci_cmd_handle+0x718>)
    8b1e:	6811      	ldr	r1, [r2, #0]
    8b20:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    8b22:	6019      	str	r1, [r3, #0]
    8b24:	e71c      	b.n	8960 <hci_cmd_handle+0x260>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8b26:	2102      	movs	r1, #2
    8b28:	f010 fcc3 	bl	194b2 <bt_hci_cmd_complete_create>
    8b2c:	2102      	movs	r1, #2
    8b2e:	4603      	mov	r3, r0
    8b30:	3008      	adds	r0, #8
    8b32:	9307      	str	r3, [sp, #28]
    8b34:	f012 f93f 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    8b38:	2300      	movs	r3, #0
    8b3a:	7003      	strb	r3, [r0, #0]
    8b3c:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
    8b3e:	f007 fcf1 	bl	10524 <ll_fal_size_get>
    8b42:	7060      	strb	r0, [r4, #1]
	return evt;
    8b44:	9c07      	ldr	r4, [sp, #28]
    8b46:	e60f      	b.n	8768 <hci_cmd_handle+0x68>
	status = ll_adv_enable(cmd->enable);
    8b48:	68a3      	ldr	r3, [r4, #8]
    8b4a:	7818      	ldrb	r0, [r3, #0]
    8b4c:	f7f8 f948 	bl	de0 <ll_adv_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8b50:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    8b52:	2101      	movs	r1, #1
    8b54:	8830      	ldrh	r0, [r6, #0]
    8b56:	f010 fcac 	bl	194b2 <bt_hci_cmd_complete_create>
    8b5a:	2101      	movs	r1, #1
    8b5c:	4604      	mov	r4, r0
    8b5e:	3008      	adds	r0, #8
    8b60:	f012 f929 	bl	1adb6 <net_buf_simple_add>
	ccst->status = status;
    8b64:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
    8b66:	e5ff      	b.n	8768 <hci_cmd_handle+0x68>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    8b68:	68a1      	ldr	r1, [r4, #8]
    8b6a:	f811 0b01 	ldrb.w	r0, [r1], #1
    8b6e:	f002 fd7b 	bl	b668 <ll_adv_scan_rsp_set>
    8b72:	e7ed      	b.n	8b50 <hci_cmd_handle+0x450>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    8b74:	68a1      	ldr	r1, [r4, #8]
    8b76:	f811 0b01 	ldrb.w	r0, [r1], #1
    8b7a:	f002 fd2b 	bl	b5d4 <ll_adv_data_set>
    8b7e:	e7e7      	b.n	8b50 <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8b80:	2102      	movs	r1, #2
    8b82:	f010 fc96 	bl	194b2 <bt_hci_cmd_complete_create>
    8b86:	2102      	movs	r1, #2
    8b88:	4603      	mov	r3, r0
    8b8a:	3008      	adds	r0, #8
    8b8c:	9307      	str	r3, [sp, #28]
    8b8e:	f012 f912 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    8b92:	2300      	movs	r3, #0
    8b94:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    8b96:	7043      	strb	r3, [r0, #1]
	return evt;
    8b98:	9c07      	ldr	r4, [sp, #28]
    8b9a:	e5e5      	b.n	8768 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    8b9c:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    8b9e:	7ba5      	ldrb	r5, [r4, #14]
    8ba0:	79a3      	ldrb	r3, [r4, #6]
    8ba2:	7962      	ldrb	r2, [r4, #5]
    8ba4:	7921      	ldrb	r1, [r4, #4]
    8ba6:	8820      	ldrh	r0, [r4, #0]
    8ba8:	9502      	str	r5, [sp, #8]
    8baa:	7b65      	ldrb	r5, [r4, #13]
    8bac:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    8bae:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    8bb0:	9400      	str	r4, [sp, #0]
    8bb2:	f002 fb13 	bl	b1dc <ll_adv_params_set>
    8bb6:	e7cb      	b.n	8b50 <hci_cmd_handle+0x450>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    8bb8:	68a1      	ldr	r1, [r4, #8]
    8bba:	2001      	movs	r0, #1
    8bbc:	f7ff fad8 	bl	8170 <ll_addr_set>
    8bc0:	e7c6      	b.n	8b50 <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8bc2:	2109      	movs	r1, #9
    8bc4:	f010 fc75 	bl	194b2 <bt_hci_cmd_complete_create>
    8bc8:	2109      	movs	r1, #9
    8bca:	4603      	mov	r3, r0
    8bcc:	3008      	adds	r0, #8
    8bce:	9307      	str	r3, [sp, #28]
    8bd0:	f012 f8f1 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    8bd4:	2100      	movs	r1, #0
    8bd6:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    8bd8:	2208      	movs	r2, #8
	rp->status = 0x00;
    8bda:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    8bde:	f010 f91a 	bl	18e16 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    8be2:	f000 fe43 	bl	986c <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
    8be6:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
    8be8:	f3c0 2407 	ubfx	r4, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    8bec:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
    8bee:	70eb      	strb	r3, [r5, #3]
	dst[1] = val >> 8;
    8bf0:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
    8bf2:	7068      	strb	r0, [r5, #1]
	dst[1] = val >> 8;
    8bf4:	70ac      	strb	r4, [r5, #2]
    8bf6:	f3c1 2007 	ubfx	r0, r1, #8, #8
    8bfa:	712b      	strb	r3, [r5, #4]
    8bfc:	0a13      	lsrs	r3, r2, #8
	return evt;
    8bfe:	9c07      	ldr	r4, [sp, #28]
	dst[0] = val;
    8c00:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
    8c02:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
    8c04:	71ea      	strb	r2, [r5, #7]
	dst[1] = val >> 8;
    8c06:	722b      	strb	r3, [r5, #8]
	if (err == -EINVAL) {
    8c08:	e5ae      	b.n	8768 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    8c0a:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    8c0c:	79c1      	ldrb	r1, [r0, #7]
    8c0e:	f007 ff9b 	bl	10b48 <ll_priv_mode_set>
    8c12:	e79d      	b.n	8b50 <hci_cmd_handle+0x450>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8c14:	2103      	movs	r1, #3
    8c16:	f010 fc4c 	bl	194b2 <bt_hci_cmd_complete_create>
    8c1a:	2103      	movs	r1, #3
    8c1c:	4603      	mov	r3, r0
    8c1e:	3008      	adds	r0, #8
    8c20:	9307      	str	r3, [sp, #28]
    8c22:	f012 f8c8 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    8c26:	4601      	mov	r1, r0
    8c28:	2300      	movs	r3, #0
    8c2a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    8c2e:	3001      	adds	r0, #1
    8c30:	f7ff faf4 	bl	821c <ll_tx_pwr_get>
	return evt;
    8c34:	9c07      	ldr	r4, [sp, #28]
    8c36:	e597      	b.n	8768 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    8c38:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8c3a:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
    8c3c:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    8c3e:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    8c40:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8c44:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
    8c46:	bf48      	it	mi
    8c48:	f041 0103 	orrmi.w	r1, r1, #3
    8c4c:	7913      	ldrb	r3, [r2, #4]
    8c4e:	bf48      	it	mi
    8c50:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8c52:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
    8c54:	bf44      	itt	mi
    8c56:	f043 0303 	orrmi.w	r3, r3, #3
    8c5a:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    8c5c:	ea43 0201 	orr.w	r2, r3, r1
    8c60:	f032 0203 	bics.w	r2, r2, #3
    8c64:	f040 81fc 	bne.w	9060 <hci_cmd_handle+0x960>
	if (!(cmd->tx_phys & 0x07) ||
    8c68:	074d      	lsls	r5, r1, #29
    8c6a:	f000 81f3 	beq.w	9054 <hci_cmd_handle+0x954>
    8c6e:	075a      	lsls	r2, r3, #29
    8c70:	f000 81f0 	beq.w	9054 <hci_cmd_handle+0x954>
	if (phy_opts & 0x03) {
    8c74:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    8c78:	bf1c      	itt	ne
    8c7a:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    8c7e:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    8c82:	4638      	mov	r0, r7
    8c84:	f003 fd78 	bl	c778 <ll_phy_req_send>
    8c88:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    8c8a:	8830      	ldrh	r0, [r6, #0]
    8c8c:	f010 fc23 	bl	194d6 <bt_hci_cmd_status_create>
    8c90:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    8c92:	e569      	b.n	8768 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    8c94:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    8c96:	781a      	ldrb	r2, [r3, #0]
    8c98:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    8c9a:	bf4a      	itet	mi
    8c9c:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8c9e:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
    8ca0:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    8ca2:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    8ca4:	bf4a      	itet	mi
    8ca6:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8ca8:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
    8caa:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    8cac:	f003 fd5a 	bl	c764 <ll_phy_default_set>
    8cb0:	e74e      	b.n	8b50 <hci_cmd_handle+0x450>
	handle = sys_le16_to_cpu(cmd->handle);
    8cb2:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8cb4:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    8cb6:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8cb8:	f010 fbfb 	bl	194b2 <bt_hci_cmd_complete_create>
    8cbc:	2105      	movs	r1, #5
    8cbe:	4603      	mov	r3, r0
    8cc0:	3008      	adds	r0, #8
    8cc2:	9307      	str	r3, [sp, #28]
    8cc4:	f012 f877 	bl	1adb6 <net_buf_simple_add>
    8cc8:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8cca:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
    8ccc:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    8cce:	1ce9      	adds	r1, r5, #3
    8cd0:	f003 fd2a 	bl	c728 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    8cd4:	78eb      	ldrb	r3, [r5, #3]
	rp->status = status;
    8cd6:	7028      	strb	r0, [r5, #0]
    8cd8:	2b00      	cmp	r3, #0
    8cda:	fa93 f2a3 	rbit	r2, r3
    8cde:	792b      	ldrb	r3, [r5, #4]
    8ce0:	fab2 f282 	clz	r2, r2
    8ce4:	bf08      	it	eq
    8ce6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    8cea:	2b00      	cmp	r3, #0
    8cec:	fa93 f3a3 	rbit	r3, r3
    8cf0:	fab3 f383 	clz	r3, r3
    8cf4:	f102 0201 	add.w	r2, r2, #1
    8cf8:	bf08      	it	eq
    8cfa:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    8cfe:	70ea      	strb	r2, [r5, #3]
    8d00:	3301      	adds	r3, #1
	return evt;
    8d02:	9c07      	ldr	r4, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    8d04:	712b      	strb	r3, [r5, #4]
	rp->handle = sys_cpu_to_le16(handle);
    8d06:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    8d0a:	e52d      	b.n	8768 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8d0c:	2109      	movs	r1, #9
    8d0e:	f010 fbd0 	bl	194b2 <bt_hci_cmd_complete_create>
    8d12:	2109      	movs	r1, #9
    8d14:	4603      	mov	r3, r0
    8d16:	3008      	adds	r0, #8
    8d18:	9307      	str	r3, [sp, #28]
    8d1a:	f012 f84c 	bl	1adb6 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    8d1e:	ab08      	add	r3, sp, #32
    8d20:	4605      	mov	r5, r0
    8d22:	f10d 021a 	add.w	r2, sp, #26
    8d26:	a906      	add	r1, sp, #24
    8d28:	f10d 0016 	add.w	r0, sp, #22
    8d2c:	f003 fcf0 	bl	c710 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    8d30:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    8d34:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    8d38:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    8d3c:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    8d40:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8d44:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->status = 0x00;
    8d48:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    8d4a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    8d4e:	702a      	strb	r2, [r5, #0]
	return evt;
    8d50:	9c07      	ldr	r4, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    8d52:	f8a5 3007 	strh.w	r3, [r5, #7]
	if (err == -EINVAL) {
    8d56:	e507      	b.n	8768 <hci_cmd_handle+0x68>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    8d58:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    8d5a:	8818      	ldrh	r0, [r3, #0]
    8d5c:	f007 feea 	bl	10b34 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    8d60:	8830      	ldrh	r0, [r6, #0]
    8d62:	2101      	movs	r1, #1
    8d64:	e5fe      	b.n	8964 <hci_cmd_handle+0x264>
	status = ll_rl_enable(cmd->enable);
    8d66:	68a3      	ldr	r3, [r4, #8]
    8d68:	7818      	ldrb	r0, [r3, #0]
    8d6a:	f007 fecd 	bl	10b08 <ll_rl_enable>
    8d6e:	e6ef      	b.n	8b50 <hci_cmd_handle+0x450>
	memcpy(dst, src, sizeof(*dst));
    8d70:	2207      	movs	r2, #7
    8d72:	68a1      	ldr	r1, [r4, #8]
    8d74:	a808      	add	r0, sp, #32
    8d76:	f010 f843 	bl	18e00 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8d7a:	2107      	movs	r1, #7
    8d7c:	8830      	ldrh	r0, [r6, #0]
    8d7e:	f010 fb98 	bl	194b2 <bt_hci_cmd_complete_create>
    8d82:	2107      	movs	r1, #7
    8d84:	4603      	mov	r3, r0
    8d86:	3008      	adds	r0, #8
    8d88:	9307      	str	r3, [sp, #28]
    8d8a:	f012 f814 	bl	1adb6 <net_buf_simple_add>
    8d8e:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    8d90:	1c41      	adds	r1, r0, #1
    8d92:	a808      	add	r0, sp, #32
    8d94:	f007 fe86 	bl	10aa4 <ll_rl_lrpa_get>
    8d98:	7020      	strb	r0, [r4, #0]
	return evt;
    8d9a:	9c07      	ldr	r4, [sp, #28]
    8d9c:	e4e4      	b.n	8768 <hci_cmd_handle+0x68>
    8d9e:	2207      	movs	r2, #7
    8da0:	68a1      	ldr	r1, [r4, #8]
    8da2:	a808      	add	r0, sp, #32
    8da4:	f010 f82c 	bl	18e00 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8da8:	2107      	movs	r1, #7
    8daa:	8830      	ldrh	r0, [r6, #0]
    8dac:	f010 fb81 	bl	194b2 <bt_hci_cmd_complete_create>
    8db0:	2107      	movs	r1, #7
    8db2:	4603      	mov	r3, r0
    8db4:	3008      	adds	r0, #8
    8db6:	9307      	str	r3, [sp, #28]
    8db8:	f011 fffd 	bl	1adb6 <net_buf_simple_add>
    8dbc:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    8dbe:	1c41      	adds	r1, r0, #1
    8dc0:	a808      	add	r0, sp, #32
    8dc2:	f007 fe35 	bl	10a30 <ll_rl_crpa_get>
    8dc6:	7020      	strb	r0, [r4, #0]
	return evt;
    8dc8:	9c07      	ldr	r4, [sp, #28]
    8dca:	e4cd      	b.n	8768 <hci_cmd_handle+0x68>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8dcc:	2102      	movs	r1, #2
    8dce:	f010 fb70 	bl	194b2 <bt_hci_cmd_complete_create>
    8dd2:	2102      	movs	r1, #2
    8dd4:	4603      	mov	r3, r0
    8dd6:	3008      	adds	r0, #8
    8dd8:	9307      	str	r3, [sp, #28]
    8dda:	f011 ffec 	bl	1adb6 <net_buf_simple_add>
    8dde:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    8de0:	f007 fcec 	bl	107bc <ll_rl_size_get>
	rp->status = 0x00;
    8de4:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    8de6:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    8de8:	7023      	strb	r3, [r4, #0]
	return evt;
    8dea:	9c07      	ldr	r4, [sp, #28]
    8dec:	e4bc      	b.n	8768 <hci_cmd_handle+0x68>
	status = ll_rl_clear();
    8dee:	f007 fce7 	bl	107c0 <ll_rl_clear>
    8df2:	e6ad      	b.n	8b50 <hci_cmd_handle+0x450>
	status = ll_rl_remove(&cmd->peer_id_addr);
    8df4:	68a0      	ldr	r0, [r4, #8]
    8df6:	f007 fd21 	bl	1083c <ll_rl_remove>
    8dfa:	e6a9      	b.n	8b50 <hci_cmd_handle+0x450>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    8dfc:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    8dfe:	f100 0217 	add.w	r2, r0, #23
    8e02:	1dc1      	adds	r1, r0, #7
    8e04:	f008 f92a 	bl	1105c <ll_rl_add>
    8e08:	e6a2      	b.n	8b50 <hci_cmd_handle+0x450>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    8e0a:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    8e0c:	8859      	ldrh	r1, [r3, #2]
    8e0e:	8818      	ldrh	r0, [r3, #0]
    8e10:	f003 fc74 	bl	c6fc <ll_length_default_set>
    8e14:	e69c      	b.n	8b50 <hci_cmd_handle+0x450>
    8e16:	bf00      	nop
    8e18:	20000178 	.word	0x20000178
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8e1c:	2105      	movs	r1, #5
    8e1e:	f010 fb48 	bl	194b2 <bt_hci_cmd_complete_create>
    8e22:	2105      	movs	r1, #5
    8e24:	4603      	mov	r3, r0
    8e26:	3008      	adds	r0, #8
    8e28:	9307      	str	r3, [sp, #28]
    8e2a:	f011 ffc4 	bl	1adb6 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    8e2e:	a908      	add	r1, sp, #32
    8e30:	4605      	mov	r5, r0
    8e32:	f10d 001a 	add.w	r0, sp, #26
    8e36:	f003 fc55 	bl	c6e4 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    8e3a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    8e3e:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->status = 0x00;
    8e42:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    8e44:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    8e48:	702a      	strb	r2, [r5, #0]
	return evt;
    8e4a:	9c07      	ldr	r4, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    8e4c:	f8a5 3003 	strh.w	r3, [r5, #3]
	if (err == -EINVAL) {
    8e50:	e48a      	b.n	8768 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    8e52:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8e54:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8e56:	889a      	ldrh	r2, [r3, #4]
    8e58:	8859      	ldrh	r1, [r3, #2]
    8e5a:	b2a8      	uxth	r0, r5
    8e5c:	f003 fbee 	bl	c63c <ll_length_req_send>
    8e60:	e596      	b.n	8990 <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    8e62:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8e64:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    8e66:	7892      	ldrb	r2, [r2, #2]
    8e68:	2300      	movs	r3, #0
    8e6a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    8e6e:	9300      	str	r3, [sp, #0]
    8e70:	2102      	movs	r1, #2
    8e72:	b2a8      	uxth	r0, r5
    8e74:	f003 fa98 	bl	c3a8 <ll_conn_update>
    8e78:	e58a      	b.n	8990 <hci_cmd_handle+0x290>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    8e7a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    8e7c:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8e7e:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    8e80:	8853      	ldrh	r3, [r2, #2]
    8e82:	9102      	str	r1, [sp, #8]
    8e84:	88d1      	ldrh	r1, [r2, #6]
    8e86:	9101      	str	r1, [sp, #4]
    8e88:	8891      	ldrh	r1, [r2, #4]
    8e8a:	9100      	str	r1, [sp, #0]
    8e8c:	2200      	movs	r2, #0
    8e8e:	2102      	movs	r1, #2
    8e90:	b2a8      	uxth	r0, r5
    8e92:	f003 fa89 	bl	c3a8 <ll_conn_update>
    8e96:	e57b      	b.n	8990 <hci_cmd_handle+0x290>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8e98:	2109      	movs	r1, #9
    8e9a:	f010 fb0a 	bl	194b2 <bt_hci_cmd_complete_create>
    8e9e:	2109      	movs	r1, #9
    8ea0:	4603      	mov	r3, r0
    8ea2:	3008      	adds	r0, #8
    8ea4:	9307      	str	r3, [sp, #28]
    8ea6:	f011 ff86 	bl	1adb6 <net_buf_simple_add>
	dst[0] = val;
    8eaa:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
    8eac:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    8eae:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
    8eb0:	2230      	movs	r2, #48	; 0x30
    8eb2:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    8eb4:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    8eb6:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    8eb8:	24ec      	movs	r4, #236	; 0xec
    8eba:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
    8ebc:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
    8ebe:	2201      	movs	r2, #1
    8ec0:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    8ec2:	7141      	strb	r1, [r0, #5]
	return evt;
    8ec4:	9c07      	ldr	r4, [sp, #28]
	dst[1] = val >> 8;
    8ec6:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    8ec8:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    8eca:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    8ecc:	e44c      	b.n	8768 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
    8ece:	68a3      	ldr	r3, [r4, #8]
    8ed0:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    8ed2:	2200      	movs	r2, #0
    8ed4:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    8ed6:	b2a8      	uxth	r0, r5
    8ed8:	f007 f9ac 	bl	10234 <ll_start_enc_req_send>
    8edc:	e558      	b.n	8990 <hci_cmd_handle+0x290>
	handle = sys_le16_to_cpu(cmd->handle);
    8ede:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    8ee0:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
    8ee2:	f832 5b02 	ldrh.w	r5, [r2], #2
    8ee6:	e7f6      	b.n	8ed6 <hci_cmd_handle+0x7d6>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8ee8:	2109      	movs	r1, #9
    8eea:	f010 fae2 	bl	194b2 <bt_hci_cmd_complete_create>
    8eee:	2109      	movs	r1, #9
    8ef0:	4603      	mov	r3, r0
    8ef2:	3008      	adds	r0, #8
    8ef4:	9307      	str	r3, [sp, #28]
    8ef6:	f011 ff5e 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    8efa:	2300      	movs	r3, #0
    8efc:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    8f00:	2108      	movs	r1, #8
    8f02:	f008 fccd 	bl	118a0 <lll_csrand_get>
	return evt;
    8f06:	9c07      	ldr	r4, [sp, #28]
    8f08:	e42e      	b.n	8768 <hci_cmd_handle+0x68>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    8f0a:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    8f0c:	aa08      	add	r2, sp, #32
    8f0e:	2300      	movs	r3, #0
    8f10:	f100 0110 	add.w	r1, r0, #16
    8f14:	f00a fad0 	bl	134b8 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8f18:	2111      	movs	r1, #17
    8f1a:	8830      	ldrh	r0, [r6, #0]
    8f1c:	f010 fac9 	bl	194b2 <bt_hci_cmd_complete_create>
    8f20:	2111      	movs	r1, #17
    8f22:	4603      	mov	r3, r0
    8f24:	3008      	adds	r0, #8
    8f26:	9307      	str	r3, [sp, #28]
    8f28:	f011 ff45 	bl	1adb6 <net_buf_simple_add>
	rp->status = 0x00;
    8f2c:	2300      	movs	r3, #0
    8f2e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    8f32:	2210      	movs	r2, #16
    8f34:	a908      	add	r1, sp, #32
    8f36:	f00f ff63 	bl	18e00 <memcpy>
	return evt;
    8f3a:	9c07      	ldr	r4, [sp, #28]
    8f3c:	e414      	b.n	8768 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
    8f3e:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    8f40:	8818      	ldrh	r0, [r3, #0]
    8f42:	f003 fb2f 	bl	c5a4 <ll_feature_req_send>
    8f46:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    8f48:	8830      	ldrh	r0, [r6, #0]
    8f4a:	f010 fac4 	bl	194d6 <bt_hci_cmd_status_create>
    8f4e:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    8f50:	e40a      	b.n	8768 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
    8f52:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8f54:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
    8f56:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8f58:	f010 faab 	bl	194b2 <bt_hci_cmd_complete_create>
    8f5c:	2108      	movs	r1, #8
    8f5e:	4603      	mov	r3, r0
    8f60:	4408      	add	r0, r1
    8f62:	9307      	str	r3, [sp, #28]
    8f64:	f011 ff27 	bl	1adb6 <net_buf_simple_add>
    8f68:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
    8f6a:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
    8f6c:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
    8f6e:	f003 faaf 	bl	c4d0 <ll_chm_get>
	rp->status = status;
    8f72:	7028      	strb	r0, [r5, #0]
	return evt;
    8f74:	9c07      	ldr	r4, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
    8f76:	f8a5 6001 	strh.w	r6, [r5, #1]
	if (err == -EINVAL) {
    8f7a:	f7ff bbf5 	b.w	8768 <hci_cmd_handle+0x68>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    8f7e:	68a1      	ldr	r1, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    8f80:	890a      	ldrh	r2, [r1, #8]
    8f82:	884b      	ldrh	r3, [r1, #2]
    8f84:	8808      	ldrh	r0, [r1, #0]
    8f86:	9202      	str	r2, [sp, #8]
    8f88:	88ca      	ldrh	r2, [r1, #6]
    8f8a:	9201      	str	r2, [sp, #4]
    8f8c:	8889      	ldrh	r1, [r1, #4]
    8f8e:	9100      	str	r1, [sp, #0]
    8f90:	2200      	movs	r2, #0
    8f92:	4611      	mov	r1, r2
    8f94:	f003 fa08 	bl	c3a8 <ll_conn_update>
    8f98:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    8f9a:	8830      	ldrh	r0, [r6, #0]
    8f9c:	f010 fa9b 	bl	194d6 <bt_hci_cmd_status_create>
    8fa0:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    8fa2:	f7ff bbe1 	b.w	8768 <hci_cmd_handle+0x68>
	status = ll_fal_remove(&cmd->addr);
    8fa6:	68a0      	ldr	r0, [r4, #8]
    8fa8:	f007 fb7c 	bl	106a4 <ll_fal_remove>
    8fac:	e5d0      	b.n	8b50 <hci_cmd_handle+0x450>
	status = ll_fal_add(&cmd->addr);
    8fae:	68a0      	ldr	r0, [r4, #8]
    8fb0:	f007 fae0 	bl	10574 <ll_fal_add>
    8fb4:	e5cc      	b.n	8b50 <hci_cmd_handle+0x450>
	status = ll_fal_clear();
    8fb6:	f007 fab7 	bl	10528 <ll_fal_clear>
    8fba:	e5c9      	b.n	8b50 <hci_cmd_handle+0x450>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    8fbc:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    8fbe:	7899      	ldrb	r1, [r3, #2]
    8fc0:	8818      	ldrh	r0, [r3, #0]
    8fc2:	f003 faa5 	bl	c510 <ll_terminate_ind_send>
    8fc6:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    8fc8:	8830      	ldrh	r0, [r6, #0]
    8fca:	f010 fa84 	bl	194d6 <bt_hci_cmd_status_create>
    8fce:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    8fd0:	f7ff bbca 	b.w	8768 <hci_cmd_handle+0x68>
	handle = sys_le16_to_cpu(cmd->handle);
    8fd4:	68a3      	ldr	r3, [r4, #8]
    8fd6:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    8fd8:	a908      	add	r1, sp, #32
    8fda:	b2a8      	uxth	r0, r5
    8fdc:	f003 fc1e 	bl	c81c <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8fe0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    8fe2:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8fe4:	8830      	ldrh	r0, [r6, #0]
    8fe6:	f010 fa64 	bl	194b2 <bt_hci_cmd_complete_create>
    8fea:	2105      	movs	r1, #5
    8fec:	4603      	mov	r3, r0
    8fee:	3008      	adds	r0, #8
    8ff0:	9307      	str	r3, [sp, #28]
    8ff2:	f011 fee0 	bl	1adb6 <net_buf_simple_add>
	rp->status = status;
    8ff6:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8ff8:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    8ffc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
    9000:	9c07      	ldr	r4, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    9002:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    9006:	f7ff bbaf 	b.w	8768 <hci_cmd_handle+0x68>
	event_mask = DEFAULT_EVENT_MASK;
    900a:	4b18      	ldr	r3, [pc, #96]	; (906c <hci_cmd_handle+0x96c>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    900c:	4a18      	ldr	r2, [pc, #96]	; (9070 <hci_cmd_handle+0x970>)
	event_mask = DEFAULT_EVENT_MASK;
    900e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9012:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9016:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    901a:	4b16      	ldr	r3, [pc, #88]	; (9074 <hci_cmd_handle+0x974>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    901c:	2000      	movs	r0, #0
    901e:	2100      	movs	r1, #0
    9020:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9024:	201f      	movs	r0, #31
    9026:	2100      	movs	r1, #0
    9028:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    902c:	f001 fd26 	bl	aa7c <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    9030:	2101      	movs	r1, #1
    9032:	8830      	ldrh	r0, [r6, #0]
    9034:	f010 fa3d 	bl	194b2 <bt_hci_cmd_complete_create>
    9038:	2101      	movs	r1, #1
    903a:	4604      	mov	r4, r0
    903c:	3008      	adds	r0, #8
    903e:	f011 feba 	bl	1adb6 <net_buf_simple_add>
	conn_count = 0U;
    9042:	4a0d      	ldr	r2, [pc, #52]	; (9078 <hci_cmd_handle+0x978>)
	ccst->status = status;
    9044:	2300      	movs	r3, #0
    9046:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
    9048:	6013      	str	r3, [r2, #0]
}
    904a:	f7ff bb8d 	b.w	8768 <hci_cmd_handle+0x68>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    904e:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    9050:	4b07      	ldr	r3, [pc, #28]	; (9070 <hci_cmd_handle+0x970>)
    9052:	e564      	b.n	8b1e <hci_cmd_handle+0x41e>
	return bt_hci_cmd_status_create(_opcode, status);
    9054:	2112      	movs	r1, #18
    9056:	f010 fa3e 	bl	194d6 <bt_hci_cmd_status_create>
    905a:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    905c:	f7ff bb84 	b.w	8768 <hci_cmd_handle+0x68>
	return bt_hci_cmd_status_create(_opcode, status);
    9060:	2111      	movs	r1, #17
    9062:	f010 fa38 	bl	194d6 <bt_hci_cmd_status_create>
    9066:	4604      	mov	r4, r0
	if (err == -EINVAL) {
    9068:	f7ff bb7e 	b.w	8768 <hci_cmd_handle+0x68>
    906c:	20000170 	.word	0x20000170
    9070:	20000ec0 	.word	0x20000ec0
    9074:	20000178 	.word	0x20000178
    9078:	200015f4 	.word	0x200015f4

0000907c <hci_acl_handle>:
{
    907c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
    9080:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    9082:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    9084:	2b03      	cmp	r3, #3
	*evt = NULL;
    9086:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    9088:	d918      	bls.n	90bc <hci_acl_handle+0x40>
	return net_buf_simple_pull_mem(&buf->b, len);
    908a:	4605      	mov	r5, r0
    908c:	4688      	mov	r8, r1
    908e:	3008      	adds	r0, #8
    9090:	2104      	movs	r1, #4
    9092:	f011 feb7 	bl	1ae04 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    9096:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    9098:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    909a:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    909e:	42b3      	cmp	r3, r6
    90a0:	d30c      	bcc.n	90bc <hci_acl_handle+0x40>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
    90a2:	2e1b      	cmp	r6, #27
    90a4:	d80a      	bhi.n	90bc <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
    90a6:	f003 f927 	bl	c2f8 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    90aa:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
    90ae:	4604      	mov	r4, r0
    90b0:	b318      	cbz	r0, 90fa <hci_acl_handle+0x7e>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    90b2:	08bb      	lsrs	r3, r7, #2
    90b4:	d102      	bne.n	90bc <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
    90b6:	b1d7      	cbz	r7, 90ee <hci_acl_handle+0x72>
    90b8:	2f01      	cmp	r7, #1
    90ba:	d003      	beq.n	90c4 <hci_acl_handle+0x48>
		return -EINVAL;
    90bc:	f06f 0015 	mvn.w	r0, #21
}
    90c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    90c4:	7903      	ldrb	r3, [r0, #4]
    90c6:	f367 0301 	bfi	r3, r7, #0, #2
    90ca:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
    90cc:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    90ce:	68a9      	ldr	r1, [r5, #8]
    90d0:	4632      	mov	r2, r6
    90d2:	1de0      	adds	r0, r4, #7
    90d4:	f00f fe94 	bl	18e00 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    90d8:	4621      	mov	r1, r4
    90da:	f3c9 000b 	ubfx	r0, r9, #0, #12
    90de:	f003 f917 	bl	c310 <ll_tx_mem_enqueue>
    90e2:	2800      	cmp	r0, #0
    90e4:	d0ec      	beq.n	90c0 <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
    90e6:	4620      	mov	r0, r4
    90e8:	f003 f90c 	bl	c304 <ll_tx_mem_release>
    90ec:	e7e6      	b.n	90bc <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    90ee:	7903      	ldrb	r3, [r0, #4]
    90f0:	2202      	movs	r2, #2
    90f2:	f362 0301 	bfi	r3, r2, #0, #2
    90f6:	7103      	strb	r3, [r0, #4]
		break;
    90f8:	e7e8      	b.n	90cc <hci_acl_handle+0x50>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    90fa:	4b11      	ldr	r3, [pc, #68]	; (9140 <hci_acl_handle+0xc4>)
    90fc:	681b      	ldr	r3, [r3, #0]
    90fe:	019b      	lsls	r3, r3, #6
    9100:	d402      	bmi.n	9108 <hci_acl_handle+0x8c>
		return -ENOBUFS;
    9102:	f06f 0068 	mvn.w	r0, #104	; 0x68
    9106:	e7db      	b.n	90c0 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    910c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9110:	2001      	movs	r0, #1
    9112:	f7fa fb73 	bl	37fc <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    9116:	2102      	movs	r1, #2
    9118:	f8c8 0000 	str.w	r0, [r8]
    911c:	3008      	adds	r0, #8
    911e:	f011 fe4a 	bl	1adb6 <net_buf_simple_add>
	hdr->len = len;
    9122:	2401      	movs	r4, #1
	hdr->evt = evt;
    9124:	221a      	movs	r2, #26
    9126:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    9128:	7044      	strb	r4, [r0, #1]
    912a:	f8d8 0000 	ldr.w	r0, [r8]
    912e:	4621      	mov	r1, r4
    9130:	3008      	adds	r0, #8
    9132:	f011 fe40 	bl	1adb6 <net_buf_simple_add>
    9136:	4603      	mov	r3, r0
		return -ENOBUFS;
    9138:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    913c:	701c      	strb	r4, [r3, #0]
    913e:	e7bf      	b.n	90c0 <hci_acl_handle+0x44>
    9140:	20000170 	.word	0x20000170

00009144 <hci_disconn_complete_encode>:
{
    9144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9146:	4b0e      	ldr	r3, [pc, #56]	; (9180 <hci_disconn_complete_encode+0x3c>)
    9148:	681b      	ldr	r3, [r3, #0]
    914a:	06db      	lsls	r3, r3, #27
    914c:	d400      	bmi.n	9150 <hci_disconn_complete_encode+0xc>
}
    914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9150:	f102 0408 	add.w	r4, r2, #8
    9154:	4605      	mov	r5, r0
    9156:	460e      	mov	r6, r1
    9158:	4620      	mov	r0, r4
    915a:	2102      	movs	r1, #2
    915c:	f011 fe2b 	bl	1adb6 <net_buf_simple_add>
    9160:	4603      	mov	r3, r0
	hdr->len = len;
    9162:	2104      	movs	r1, #4
	hdr->evt = evt;
    9164:	2205      	movs	r2, #5
	hdr->len = len;
    9166:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
    9168:	701a      	strb	r2, [r3, #0]
    916a:	4620      	mov	r0, r4
    916c:	f011 fe23 	bl	1adb6 <net_buf_simple_add>
    9170:	2700      	movs	r7, #0
	ep->status = 0x00;
    9172:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9174:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    9178:	782b      	ldrb	r3, [r5, #0]
    917a:	70c3      	strb	r3, [r0, #3]
}
    917c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    917e:	bf00      	nop
    9180:	20000170 	.word	0x20000170

00009184 <hci_disconn_complete_process>:
	conn_count--;
    9184:	4a02      	ldr	r2, [pc, #8]	; (9190 <hci_disconn_complete_process+0xc>)
    9186:	6813      	ldr	r3, [r2, #0]
    9188:	3b01      	subs	r3, #1
    918a:	6013      	str	r3, [r2, #0]
}
    918c:	4770      	bx	lr
    918e:	bf00      	nop
    9190:	200015f4 	.word	0x200015f4

00009194 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9194:	7f03      	ldrb	r3, [r0, #28]
    9196:	f003 0303 	and.w	r3, r3, #3
    919a:	3b01      	subs	r3, #1
    919c:	2b01      	cmp	r3, #1
{
    919e:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    91a0:	d90d      	bls.n	91be <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    91a2:	4a16      	ldr	r2, [pc, #88]	; (91fc <hci_acl_encode+0x68>)
    91a4:	4916      	ldr	r1, [pc, #88]	; (9200 <hci_acl_encode+0x6c>)
    91a6:	4817      	ldr	r0, [pc, #92]	; (9204 <hci_acl_encode+0x70>)
    91a8:	f641 53b7 	movw	r3, #7607	; 0x1db7
    91ac:	f00e ffdc 	bl	18168 <printk>
    91b0:	4040      	eors	r0, r0
    91b2:	f380 8811 	msr	BASEPRI, r0
    91b6:	f04f 0003 	mov.w	r0, #3
    91ba:	df02      	svc	2
		break;
	}
}
    91bc:	bd70      	pop	{r4, r5, r6, pc}
    91be:	4604      	mov	r4, r0
    91c0:	f101 0508 	add.w	r5, r1, #8
    91c4:	4628      	mov	r0, r5
    91c6:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    91c8:	88e6      	ldrh	r6, [r4, #6]
    91ca:	f011 fdf4 	bl	1adb6 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    91ce:	7f23      	ldrb	r3, [r4, #28]
    91d0:	f003 0303 	and.w	r3, r3, #3
    91d4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    91d6:	bf0c      	ite	eq
    91d8:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    91dc:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    91e0:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    91e2:	7f61      	ldrb	r1, [r4, #29]
    91e4:	8041      	strh	r1, [r0, #2]
    91e6:	4628      	mov	r0, r5
    91e8:	f011 fde5 	bl	1adb6 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    91ec:	7f62      	ldrb	r2, [r4, #29]
    91ee:	f104 011f 	add.w	r1, r4, #31
}
    91f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    91f6:	f00f be03 	b.w	18e00 <memcpy>
    91fa:	bf00      	nop
    91fc:	0001ce94 	.word	0x0001ce94
    9200:	0001ce44 	.word	0x0001ce44
    9204:	0001cde4 	.word	0x0001cde4

00009208 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    9208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    920c:	f890 c004 	ldrb.w	ip, [r0, #4]
    9210:	88c6      	ldrh	r6, [r0, #6]
    9212:	f1bc 0f03 	cmp.w	ip, #3
{
    9216:	b085      	sub	sp, #20
    9218:	4604      	mov	r4, r0
    921a:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    921c:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9220:	d00e      	beq.n	9240 <hci_evt_encode+0x38>
	switch (node_rx->hdr.type) {
    9222:	f1ac 0c16 	sub.w	ip, ip, #22
    9226:	f1bc 0f06 	cmp.w	ip, #6
    922a:	f200 82ac 	bhi.w	9786 <hci_evt_encode+0x57e>
    922e:	e8df f01c 	tbh	[pc, ip, lsl #1]
    9232:	002b      	.short	0x002b
    9234:	008f0087 	.word	0x008f0087
    9238:	00bd0021 	.word	0x00bd0021
    923c:	00f100d0 	.word	0x00f100d0
	switch (pdu_data->llctrl.opcode) {
    9240:	7fc3      	ldrb	r3, [r0, #31]
    9242:	3b03      	subs	r3, #3
    9244:	2b12      	cmp	r3, #18
    9246:	f200 811d 	bhi.w	9484 <hci_evt_encode+0x27c>
    924a:	e8df f013 	tbh	[pc, r3, lsl #1]
    924e:	0160      	.short	0x0160
    9250:	011b011b 	.word	0x011b011b
    9254:	01b6019d 	.word	0x01b6019d
    9258:	01e9011b 	.word	0x01e9011b
    925c:	011b011b 	.word	0x011b011b
    9260:	01ee011b 	.word	0x01ee011b
    9264:	01c4011b 	.word	0x01c4011b
    9268:	001a011b 	.word	0x001a011b
    926c:	011b011b 	.word	0x011b011b
    9270:	01290129 	.word	0x01290129
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    9274:	4bbd      	ldr	r3, [pc, #756]	; (956c <hci_evt_encode+0x364>)
    9276:	685b      	ldr	r3, [r3, #4]
    9278:	0418      	lsls	r0, r3, #16
    927a:	f04f 0400 	mov.w	r4, #0
    927e:	f100 8136 	bmi.w	94ee <hci_evt_encode+0x2e6>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9282:	b005      	add	sp, #20
    9284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    9288:	07f8      	lsls	r0, r7, #31
    928a:	f100 81f2 	bmi.w	9672 <hci_evt_encode+0x46a>
	status = cc->status;
    928e:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
    9290:	2f00      	cmp	r7, #0
    9292:	f000 81e5 	beq.w	9660 <hci_evt_encode+0x458>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9296:	4bb5      	ldr	r3, [pc, #724]	; (956c <hci_evt_encode+0x364>)
    9298:	685b      	ldr	r3, [r3, #4]
    929a:	0099      	lsls	r1, r3, #2
    929c:	d5f1      	bpl.n	9282 <hci_evt_encode+0x7a>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    929e:	4bb4      	ldr	r3, [pc, #720]	; (9570 <hci_evt_encode+0x368>)
    92a0:	681b      	ldr	r3, [r3, #0]
    92a2:	f240 2201 	movw	r2, #513	; 0x201
    92a6:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    92a8:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    92ac:	d0e9      	beq.n	9282 <hci_evt_encode+0x7a>
    92ae:	3508      	adds	r5, #8
	if (!status) {
    92b0:	2f00      	cmp	r7, #0
    92b2:	f040 81f6 	bne.w	96a2 <hci_evt_encode+0x49a>
		conn_count++;
    92b6:	4aaf      	ldr	r2, [pc, #700]	; (9574 <hci_evt_encode+0x36c>)
    92b8:	6813      	ldr	r3, [r2, #0]
    92ba:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
    92bc:	f104 091f 	add.w	r9, r4, #31
		conn_count++;
    92c0:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    92c2:	f1b8 0f00 	cmp.w	r8, #0
    92c6:	f000 8208 	beq.w	96da <hci_evt_encode+0x4d2>
    92ca:	2102      	movs	r1, #2
    92cc:	4628      	mov	r0, r5
    92ce:	f011 fd72 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    92d2:	233e      	movs	r3, #62	; 0x3e
    92d4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    92d6:	231f      	movs	r3, #31
    92d8:	7043      	strb	r3, [r0, #1]
    92da:	2101      	movs	r1, #1
    92dc:	4628      	mov	r0, r5
    92de:	f011 fd6a 	bl	1adb6 <net_buf_simple_add>
    92e2:	4603      	mov	r3, r0
	me->subevent = subevt;
    92e4:	220a      	movs	r2, #10
    92e6:	701a      	strb	r2, [r3, #0]
    92e8:	4628      	mov	r0, r5
    92ea:	211e      	movs	r1, #30
    92ec:	f011 fd63 	bl	1adb6 <net_buf_simple_add>
		leecc->status = 0x00;
    92f0:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    92f2:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
    92f6:	7f63      	ldrb	r3, [r4, #29]
    92f8:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    92fa:	7fa3      	ldrb	r3, [r4, #30]
    92fc:	7103      	strb	r3, [r0, #4]
    92fe:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
    9300:	4649      	mov	r1, r9
    9302:	2206      	movs	r2, #6
    9304:	3005      	adds	r0, #5
    9306:	f00f fd7b 	bl	18e00 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
    930a:	2206      	movs	r2, #6
    930c:	f104 012b 	add.w	r1, r4, #43	; 0x2b
    9310:	f105 000b 	add.w	r0, r5, #11
    9314:	f00f fd74 	bl	18e00 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
    9318:	2206      	movs	r2, #6
    931a:	f104 0125 	add.w	r1, r4, #37	; 0x25
    931e:	f105 0011 	add.w	r0, r5, #17
    9322:	f00f fd6d 	bl	18e00 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    9326:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    9328:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    932a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    932c:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    9330:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    9334:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
    9338:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    933c:	776b      	strb	r3, [r5, #29]
		return;
    933e:	e7a0      	b.n	9282 <hci_evt_encode+0x7a>
		hci_disconn_complete_encode(pdu_data, handle, buf);
    9340:	460a      	mov	r2, r1
    9342:	4638      	mov	r0, r7
    9344:	4631      	mov	r1, r6
}
    9346:	b005      	add	sp, #20
    9348:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    934c:	f7ff befa 	b.w	9144 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9350:	4b86      	ldr	r3, [pc, #536]	; (956c <hci_evt_encode+0x364>)
    9352:	685b      	ldr	r3, [r3, #4]
    9354:	009a      	lsls	r2, r3, #2
    9356:	d594      	bpl.n	9282 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    9358:	4b85      	ldr	r3, [pc, #532]	; (9570 <hci_evt_encode+0x368>)
    935a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    935c:	075b      	lsls	r3, r3, #29
    935e:	d590      	bpl.n	9282 <hci_evt_encode+0x7a>
    9360:	3508      	adds	r5, #8
    9362:	2102      	movs	r1, #2
    9364:	4628      	mov	r0, r5
    9366:	f011 fd26 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    936a:	233e      	movs	r3, #62	; 0x3e
    936c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    936e:	230a      	movs	r3, #10
    9370:	7043      	strb	r3, [r0, #1]
    9372:	2101      	movs	r1, #1
    9374:	4628      	mov	r0, r5
    9376:	f011 fd1e 	bl	1adb6 <net_buf_simple_add>
    937a:	4603      	mov	r3, r0
	me->subevent = subevt;
    937c:	2203      	movs	r2, #3
    937e:	4628      	mov	r0, r5
    9380:	701a      	strb	r2, [r3, #0]
    9382:	2109      	movs	r1, #9
    9384:	f011 fd17 	bl	1adb6 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    9388:	07ff      	lsls	r7, r7, #31
    938a:	4605      	mov	r5, r0
    938c:	f100 81ed 	bmi.w	976a <hci_evt_encode+0x562>
	sep->status = cu->status;
    9390:	7f23      	ldrb	r3, [r4, #28]
    9392:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    9394:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    9396:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    9398:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    939a:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
    939e:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    93a2:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    93a6:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    93aa:	e76a      	b.n	9282 <hci_evt_encode+0x7a>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    93ac:	4b72      	ldr	r3, [pc, #456]	; (9578 <hci_evt_encode+0x370>)
    93ae:	681b      	ldr	r3, [r3, #0]
    93b0:	0219      	lsls	r1, r3, #8
    93b2:	f57f af66 	bpl.w	9282 <hci_evt_encode+0x7a>
    93b6:	3508      	adds	r5, #8
    93b8:	2102      	movs	r1, #2
    93ba:	4628      	mov	r0, r5
    93bc:	f011 fcfb 	bl	1adb6 <net_buf_simple_add>
	hdr->len = len;
    93c0:	2102      	movs	r1, #2
	hdr->evt = evt;
    93c2:	2357      	movs	r3, #87	; 0x57
    93c4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    93c6:	7041      	strb	r1, [r0, #1]
    93c8:	4628      	mov	r0, r5
    93ca:	f011 fcf4 	bl	1adb6 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    93ce:	8006      	strh	r6, [r0, #0]
    93d0:	e757      	b.n	9282 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    93d2:	4b66      	ldr	r3, [pc, #408]	; (956c <hci_evt_encode+0x364>)
    93d4:	685b      	ldr	r3, [r3, #4]
    93d6:	009a      	lsls	r2, r3, #2
    93d8:	f57f af53 	bpl.w	9282 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    93dc:	4b64      	ldr	r3, [pc, #400]	; (9570 <hci_evt_encode+0x368>)
    93de:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    93e0:	031b      	lsls	r3, r3, #12
    93e2:	f57f af4e 	bpl.w	9282 <hci_evt_encode+0x7a>
    93e6:	3508      	adds	r5, #8
    93e8:	2102      	movs	r1, #2
    93ea:	4628      	mov	r0, r5
    93ec:	f011 fce3 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    93f0:	233e      	movs	r3, #62	; 0x3e
    93f2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    93f4:	2304      	movs	r3, #4
    93f6:	7043      	strb	r3, [r0, #1]
    93f8:	2101      	movs	r1, #1
    93fa:	4628      	mov	r0, r5
    93fc:	f011 fcdb 	bl	1adb6 <net_buf_simple_add>
	me->subevent = subevt;
    9400:	2314      	movs	r3, #20
    9402:	7003      	strb	r3, [r0, #0]
    9404:	2103      	movs	r1, #3
    9406:	4628      	mov	r0, r5
    9408:	f011 fcd5 	bl	1adb6 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    940c:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    940e:	7f23      	ldrb	r3, [r4, #28]
    9410:	7083      	strb	r3, [r0, #2]
    9412:	e736      	b.n	9282 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9414:	4b55      	ldr	r3, [pc, #340]	; (956c <hci_evt_encode+0x364>)
    9416:	685b      	ldr	r3, [r3, #4]
    9418:	009f      	lsls	r7, r3, #2
    941a:	f57f af32 	bpl.w	9282 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    941e:	4b54      	ldr	r3, [pc, #336]	; (9570 <hci_evt_encode+0x368>)
    9420:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9422:	0518      	lsls	r0, r3, #20
    9424:	f57f af2d 	bpl.w	9282 <hci_evt_encode+0x7a>
    9428:	3508      	adds	r5, #8
    942a:	2102      	movs	r1, #2
    942c:	4628      	mov	r0, r5
    942e:	f011 fcc2 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    9432:	233e      	movs	r3, #62	; 0x3e
    9434:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    9436:	2306      	movs	r3, #6
    9438:	7043      	strb	r3, [r0, #1]
    943a:	2101      	movs	r1, #1
    943c:	4628      	mov	r0, r5
    943e:	f011 fcba 	bl	1adb6 <net_buf_simple_add>
	me->subevent = subevt;
    9442:	230c      	movs	r3, #12
    9444:	7003      	strb	r3, [r0, #0]
    9446:	2105      	movs	r1, #5
    9448:	4628      	mov	r0, r5
    944a:	f011 fcb4 	bl	1adb6 <net_buf_simple_add>
	sep->status = pu->status;
    944e:	7f23      	ldrb	r3, [r4, #28]
    9450:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9452:	f8a0 6001 	strh.w	r6, [r0, #1]
    9456:	7f62      	ldrb	r2, [r4, #29]
    9458:	2a00      	cmp	r2, #0
    945a:	fa92 f3a2 	rbit	r3, r2
    945e:	fab3 f383 	clz	r3, r3
    9462:	bf08      	it	eq
    9464:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9468:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    946a:	70c3      	strb	r3, [r0, #3]
    946c:	7fa2      	ldrb	r2, [r4, #30]
    946e:	fa92 f3a2 	rbit	r3, r2
    9472:	2a00      	cmp	r2, #0
    9474:	fab3 f383 	clz	r3, r3
    9478:	bf08      	it	eq
    947a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    947e:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    9480:	7103      	strb	r3, [r0, #4]
    9482:	e6fe      	b.n	9282 <hci_evt_encode+0x7a>
		LL_ASSERT(0);
    9484:	4a3d      	ldr	r2, [pc, #244]	; (957c <hci_evt_encode+0x374>)
    9486:	493e      	ldr	r1, [pc, #248]	; (9580 <hci_evt_encode+0x378>)
    9488:	483e      	ldr	r0, [pc, #248]	; (9584 <hci_evt_encode+0x37c>)
    948a:	f641 538b 	movw	r3, #7563	; 0x1d8b
    948e:	f00e fe6b 	bl	18168 <printk>
    9492:	4040      	eors	r0, r0
    9494:	f380 8811 	msr	BASEPRI, r0
    9498:	f04f 0003 	mov.w	r0, #3
    949c:	df02      	svc	2
}
    949e:	e6f0      	b.n	9282 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    94a0:	4b32      	ldr	r3, [pc, #200]	; (956c <hci_evt_encode+0x364>)
    94a2:	685b      	ldr	r3, [r3, #4]
    94a4:	009a      	lsls	r2, r3, #2
    94a6:	f57f aeec 	bpl.w	9282 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    94aa:	4b31      	ldr	r3, [pc, #196]	; (9570 <hci_evt_encode+0x368>)
    94ac:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    94ae:	065b      	lsls	r3, r3, #25
    94b0:	f57f aee7 	bpl.w	9282 <hci_evt_encode+0x7a>
    94b4:	3508      	adds	r5, #8
    94b6:	2102      	movs	r1, #2
    94b8:	4628      	mov	r0, r5
    94ba:	f011 fc7c 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    94be:	233e      	movs	r3, #62	; 0x3e
    94c0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    94c2:	230b      	movs	r3, #11
    94c4:	7043      	strb	r3, [r0, #1]
    94c6:	2101      	movs	r1, #1
    94c8:	4628      	mov	r0, r5
    94ca:	f011 fc74 	bl	1adb6 <net_buf_simple_add>
	me->subevent = subevt;
    94ce:	2307      	movs	r3, #7
    94d0:	7003      	strb	r3, [r0, #0]
    94d2:	210a      	movs	r1, #10
    94d4:	4628      	mov	r0, r5
    94d6:	f011 fc6e 	bl	1adb6 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    94da:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    94dc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    94de:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    94e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    94e2:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    94e4:	8c23      	ldrh	r3, [r4, #32]
    94e6:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    94e8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    94ea:	8103      	strh	r3, [r0, #8]
    94ec:	e6c9      	b.n	9282 <hci_evt_encode+0x7a>
    94ee:	3508      	adds	r5, #8
    94f0:	2102      	movs	r1, #2
    94f2:	4628      	mov	r0, r5
    94f4:	f011 fc5f 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    94f8:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
    94fa:	2103      	movs	r1, #3
	hdr->evt = evt;
    94fc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    94fe:	7041      	strb	r1, [r0, #1]
    9500:	4628      	mov	r0, r5
    9502:	f011 fc58 	bl	1adb6 <net_buf_simple_add>
	ep->status = 0x00;
    9506:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9508:	f8a0 6001 	strh.w	r6, [r0, #1]
    950c:	e6b9      	b.n	9282 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    950e:	4b17      	ldr	r3, [pc, #92]	; (956c <hci_evt_encode+0x364>)
    9510:	685b      	ldr	r3, [r3, #4]
    9512:	0099      	lsls	r1, r3, #2
    9514:	f57f aeb5 	bpl.w	9282 <hci_evt_encode+0x7a>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    9518:	4b15      	ldr	r3, [pc, #84]	; (9570 <hci_evt_encode+0x368>)
    951a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    951c:	06da      	lsls	r2, r3, #27
    951e:	f57f aeb0 	bpl.w	9282 <hci_evt_encode+0x7a>
    9522:	3508      	adds	r5, #8
    9524:	2102      	movs	r1, #2
    9526:	4628      	mov	r0, r5
    9528:	f011 fc45 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    952c:	233e      	movs	r3, #62	; 0x3e
    952e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    9530:	230d      	movs	r3, #13
    9532:	7043      	strb	r3, [r0, #1]
    9534:	2101      	movs	r1, #1
    9536:	4628      	mov	r0, r5
    9538:	f011 fc3d 	bl	1adb6 <net_buf_simple_add>
	me->subevent = subevt;
    953c:	2305      	movs	r3, #5
    953e:	7003      	strb	r3, [r0, #0]
    9540:	210c      	movs	r1, #12
    9542:	4628      	mov	r0, r5
    9544:	f011 fc37 	bl	1adb6 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    9548:	f104 0120 	add.w	r1, r4, #32
    954c:	4605      	mov	r5, r0
    954e:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    9550:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    9554:	f00f fc54 	bl	18e00 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    9558:	2202      	movs	r2, #2
    955a:	f104 0128 	add.w	r1, r4, #40	; 0x28
    955e:	f105 000a 	add.w	r0, r5, #10
}
    9562:	b005      	add	sp, #20
    9564:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    9568:	f00f bc4a 	b.w	18e00 <memcpy>
    956c:	20000170 	.word	0x20000170
    9570:	20000178 	.word	0x20000178
    9574:	200015f4 	.word	0x200015f4
    9578:	20000ec0 	.word	0x20000ec0
    957c:	0001ce94 	.word	0x0001ce94
    9580:	0001ce44 	.word	0x0001ce44
    9584:	0001cde4 	.word	0x0001cde4
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    9588:	4b86      	ldr	r3, [pc, #536]	; (97a4 <hci_evt_encode+0x59c>)
    958a:	681b      	ldr	r3, [r3, #0]
    958c:	061b      	lsls	r3, r3, #24
    958e:	f04f 0400 	mov.w	r4, #0
    9592:	f57f ae76 	bpl.w	9282 <hci_evt_encode+0x7a>
    9596:	3508      	adds	r5, #8
    9598:	2102      	movs	r1, #2
    959a:	4628      	mov	r0, r5
    959c:	f011 fc0b 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    95a0:	2308      	movs	r3, #8
	hdr->len = len;
    95a2:	2104      	movs	r1, #4
	hdr->evt = evt;
    95a4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    95a6:	7041      	strb	r1, [r0, #1]
    95a8:	4628      	mov	r0, r5
    95aa:	f011 fc04 	bl	1adb6 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    95ae:	2301      	movs	r3, #1
	ep->status = err;
    95b0:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    95b2:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    95b6:	70c3      	strb	r3, [r0, #3]
    95b8:	e663      	b.n	9282 <hci_evt_encode+0x7a>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    95ba:	f890 3020 	ldrb.w	r3, [r0, #32]
    95be:	2b0e      	cmp	r3, #14
    95c0:	f47f ae5f 	bne.w	9282 <hci_evt_encode+0x7a>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    95c4:	460b      	mov	r3, r1
    95c6:	4632      	mov	r2, r6
    95c8:	2100      	movs	r1, #0
    95ca:	201a      	movs	r0, #26
}
    95cc:	b005      	add	sp, #20
    95ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    95d2:	f7fe bf9d 	b.w	8510 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95d6:	4b73      	ldr	r3, [pc, #460]	; (97a4 <hci_evt_encode+0x59c>)
    95d8:	685b      	ldr	r3, [r3, #4]
    95da:	0098      	lsls	r0, r3, #2
    95dc:	d557      	bpl.n	968e <hci_evt_encode+0x486>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    95de:	4b72      	ldr	r3, [pc, #456]	; (97a8 <hci_evt_encode+0x5a0>)
    95e0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    95e2:	0699      	lsls	r1, r3, #26
    95e4:	d553      	bpl.n	968e <hci_evt_encode+0x486>
    95e6:	3508      	adds	r5, #8
    95e8:	2102      	movs	r1, #2
    95ea:	4628      	mov	r0, r5
    95ec:	f011 fbe3 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    95f0:	233e      	movs	r3, #62	; 0x3e
    95f2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    95f4:	230b      	movs	r3, #11
    95f6:	7043      	strb	r3, [r0, #1]
    95f8:	2101      	movs	r1, #1
    95fa:	4628      	mov	r0, r5
    95fc:	f011 fbdb 	bl	1adb6 <net_buf_simple_add>
	me->subevent = subevt;
    9600:	2306      	movs	r3, #6
    9602:	7003      	strb	r3, [r0, #0]
    9604:	210a      	movs	r1, #10
    9606:	4628      	mov	r0, r5
    9608:	f011 fbd5 	bl	1adb6 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    960c:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    960e:	8c23      	ldrh	r3, [r4, #32]
    9610:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    9612:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    9614:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    9616:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    9618:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    961a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    961c:	8103      	strh	r3, [r0, #8]
    961e:	e630      	b.n	9282 <hci_evt_encode+0x7a>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    9620:	460b      	mov	r3, r1
    9622:	4632      	mov	r2, r6
    9624:	4639      	mov	r1, r7
    9626:	2000      	movs	r0, #0
    9628:	e7d0      	b.n	95cc <hci_evt_encode+0x3c4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    962a:	4b5e      	ldr	r3, [pc, #376]	; (97a4 <hci_evt_encode+0x59c>)
    962c:	681b      	ldr	r3, [r3, #0]
    962e:	061f      	lsls	r7, r3, #24
    9630:	f57f ae27 	bpl.w	9282 <hci_evt_encode+0x7a>
    9634:	3508      	adds	r5, #8
    9636:	2102      	movs	r1, #2
    9638:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    963a:	f894 4020 	ldrb.w	r4, [r4, #32]
    963e:	f011 fbba 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    9642:	2308      	movs	r3, #8
	hdr->len = len;
    9644:	2104      	movs	r1, #4
	hdr->evt = evt;
    9646:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    9648:	7041      	strb	r1, [r0, #1]
    964a:	4628      	mov	r0, r5
    964c:	f011 fbb3 	bl	1adb6 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    9650:	fab4 f384 	clz	r3, r4
    9654:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    9656:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9658:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    965c:	70c3      	strb	r3, [r0, #3]
    965e:	e610      	b.n	9282 <hci_evt_encode+0x7a>
		ll_rl_crpa_set(cc->peer_addr_type,
    9660:	7fa0      	ldrb	r0, [r4, #30]
    9662:	f104 0325 	add.w	r3, r4, #37	; 0x25
    9666:	22ff      	movs	r2, #255	; 0xff
    9668:	f104 011f 	add.w	r1, r4, #31
    966c:	f007 f99a 	bl	109a4 <ll_rl_crpa_set>
    9670:	e611      	b.n	9296 <hci_evt_encode+0x8e>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    9672:	4a4e      	ldr	r2, [pc, #312]	; (97ac <hci_evt_encode+0x5a4>)
    9674:	494e      	ldr	r1, [pc, #312]	; (97b0 <hci_evt_encode+0x5a8>)
    9676:	484f      	ldr	r0, [pc, #316]	; (97b4 <hci_evt_encode+0x5ac>)
    9678:	f641 23f1 	movw	r3, #6897	; 0x1af1
    967c:	f00e fd74 	bl	18168 <printk>
    9680:	4040      	eors	r0, r0
    9682:	f380 8811 	msr	BASEPRI, r0
    9686:	f04f 0003 	mov.w	r0, #3
    968a:	df02      	svc	2
    968c:	e5ff      	b.n	928e <hci_evt_encode+0x86>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    968e:	2300      	movs	r3, #0
    9690:	e9cd 3301 	strd	r3, r3, [sp, #4]
    9694:	9300      	str	r3, [sp, #0]
    9696:	221a      	movs	r2, #26
    9698:	2102      	movs	r1, #2
    969a:	4630      	mov	r0, r6
    969c:	f002 fe84 	bl	c3a8 <ll_conn_update>
		return;
    96a0:	e5ef      	b.n	9282 <hci_evt_encode+0x7a>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    96a2:	f1b8 0f00 	cmp.w	r8, #0
    96a6:	d147      	bne.n	9738 <hci_evt_encode+0x530>
    96a8:	2102      	movs	r1, #2
    96aa:	4628      	mov	r0, r5
    96ac:	f011 fb83 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    96b0:	233e      	movs	r3, #62	; 0x3e
    96b2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    96b4:	2313      	movs	r3, #19
    96b6:	7043      	strb	r3, [r0, #1]
    96b8:	2101      	movs	r1, #1
    96ba:	4628      	mov	r0, r5
    96bc:	f011 fb7b 	bl	1adb6 <net_buf_simple_add>
	me->subevent = subevt;
    96c0:	2301      	movs	r3, #1
    96c2:	7003      	strb	r3, [r0, #0]
    96c4:	2112      	movs	r1, #18
    96c6:	4628      	mov	r0, r5
    96c8:	f011 fb75 	bl	1adb6 <net_buf_simple_add>
    96cc:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    96ce:	2212      	movs	r2, #18
    96d0:	4641      	mov	r1, r8
    96d2:	f00f fba0 	bl	18e16 <memset>
		lecc->status = status;
    96d6:	7027      	strb	r7, [r4, #0]
		return;
    96d8:	e5d3      	b.n	9282 <hci_evt_encode+0x7a>
    96da:	2102      	movs	r1, #2
    96dc:	4628      	mov	r0, r5
    96de:	f011 fb6a 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    96e2:	233e      	movs	r3, #62	; 0x3e
    96e4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    96e6:	2313      	movs	r3, #19
    96e8:	7043      	strb	r3, [r0, #1]
    96ea:	2101      	movs	r1, #1
    96ec:	4628      	mov	r0, r5
    96ee:	f011 fb62 	bl	1adb6 <net_buf_simple_add>
    96f2:	4603      	mov	r3, r0
	me->subevent = subevt;
    96f4:	2201      	movs	r2, #1
    96f6:	701a      	strb	r2, [r3, #0]
    96f8:	4628      	mov	r0, r5
    96fa:	2112      	movs	r1, #18
    96fc:	f011 fb5b 	bl	1adb6 <net_buf_simple_add>
	lecc->status = 0x00;
    9700:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    9702:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
    9706:	7f63      	ldrb	r3, [r4, #29]
    9708:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    970a:	7fa3      	ldrb	r3, [r4, #30]
    970c:	f003 0301 	and.w	r3, r3, #1
    9710:	4605      	mov	r5, r0
    9712:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    9714:	4649      	mov	r1, r9
    9716:	2206      	movs	r2, #6
    9718:	3005      	adds	r0, #5
    971a:	f00f fb71 	bl	18e00 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    971e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    9720:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    9722:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    9724:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    9728:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    972c:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    9730:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    9734:	746b      	strb	r3, [r5, #17]
    9736:	e5a4      	b.n	9282 <hci_evt_encode+0x7a>
    9738:	2102      	movs	r1, #2
    973a:	4628      	mov	r0, r5
    973c:	f011 fb3b 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    9740:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
    9742:	231f      	movs	r3, #31
	hdr->evt = evt;
    9744:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    9746:	7043      	strb	r3, [r0, #1]
    9748:	2101      	movs	r1, #1
    974a:	4628      	mov	r0, r5
    974c:	f011 fb33 	bl	1adb6 <net_buf_simple_add>
	me->subevent = subevt;
    9750:	230a      	movs	r3, #10
    9752:	7003      	strb	r3, [r0, #0]
    9754:	211e      	movs	r1, #30
    9756:	4628      	mov	r0, r5
    9758:	f011 fb2d 	bl	1adb6 <net_buf_simple_add>
    975c:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
    975e:	221e      	movs	r2, #30
    9760:	2100      	movs	r1, #0
    9762:	f00f fb58 	bl	18e16 <memset>
			leecc->status = status;
    9766:	7027      	strb	r7, [r4, #0]
			return;
    9768:	e58b      	b.n	9282 <hci_evt_encode+0x7a>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    976a:	4a10      	ldr	r2, [pc, #64]	; (97ac <hci_evt_encode+0x5a4>)
    976c:	4912      	ldr	r1, [pc, #72]	; (97b8 <hci_evt_encode+0x5b0>)
    976e:	4811      	ldr	r0, [pc, #68]	; (97b4 <hci_evt_encode+0x5ac>)
    9770:	f641 3376 	movw	r3, #7030	; 0x1b76
    9774:	f00e fcf8 	bl	18168 <printk>
    9778:	4040      	eors	r0, r0
    977a:	f380 8811 	msr	BASEPRI, r0
    977e:	f04f 0003 	mov.w	r0, #3
    9782:	df02      	svc	2
    9784:	e604      	b.n	9390 <hci_evt_encode+0x188>
		LL_ASSERT(0);
    9786:	4a09      	ldr	r2, [pc, #36]	; (97ac <hci_evt_encode+0x5a4>)
    9788:	490c      	ldr	r1, [pc, #48]	; (97bc <hci_evt_encode+0x5b4>)
    978a:	480a      	ldr	r0, [pc, #40]	; (97b4 <hci_evt_encode+0x5ac>)
    978c:	f641 43ab 	movw	r3, #7339	; 0x1cab
    9790:	f00e fcea 	bl	18168 <printk>
    9794:	4040      	eors	r0, r0
    9796:	f380 8811 	msr	BASEPRI, r0
    979a:	f04f 0003 	mov.w	r0, #3
    979e:	df02      	svc	2
		return;
    97a0:	e56f      	b.n	9282 <hci_evt_encode+0x7a>
    97a2:	bf00      	nop
    97a4:	20000170 	.word	0x20000170
    97a8:	20000178 	.word	0x20000178
    97ac:	0001ce94 	.word	0x0001ce94
    97b0:	0001ced0 	.word	0x0001ced0
    97b4:	0001cde4 	.word	0x0001cde4
    97b8:	0001cf0c 	.word	0x0001cf0c
    97bc:	0001ce44 	.word	0x0001ce44

000097c0 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    97c0:	b570      	push	{r4, r5, r6, lr}
    97c2:	f100 0408 	add.w	r4, r0, #8
    97c6:	460e      	mov	r6, r1
    97c8:	4620      	mov	r0, r4
    97ca:	2102      	movs	r1, #2
    97cc:	4615      	mov	r5, r2
    97ce:	f011 faf2 	bl	1adb6 <net_buf_simple_add>
	hdr->evt = evt;
    97d2:	2313      	movs	r3, #19
	hdr->len = len;
    97d4:	2105      	movs	r1, #5
	hdr->evt = evt;
    97d6:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    97d8:	7041      	strb	r1, [r0, #1]
    97da:	4620      	mov	r0, r4
    97dc:	f011 faeb 	bl	1adb6 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    97e0:	2301      	movs	r3, #1
    97e2:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    97e4:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    97e8:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    97ec:	bd70      	pop	{r4, r5, r6, pc}
    97ee:	bf00      	nop

000097f0 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    97f0:	7903      	ldrb	r3, [r0, #4]
    97f2:	2b03      	cmp	r3, #3
    97f4:	d009      	beq.n	980a <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    97f6:	2b16      	cmp	r3, #22
    97f8:	d005      	beq.n	9806 <hci_get_class+0x16>
    97fa:	3b17      	subs	r3, #23
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
    97fc:	2b05      	cmp	r3, #5
    97fe:	bf94      	ite	ls
    9800:	2003      	movls	r0, #3
    9802:	2000      	movhi	r0, #0
    9804:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    9806:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    9808:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    980a:	7f03      	ldrb	r3, [r0, #28]
    980c:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
    9810:	2b03      	cmp	r3, #3
    9812:	bf0c      	ite	eq
    9814:	2004      	moveq	r0, #4
    9816:	2005      	movne	r0, #5
    9818:	4770      	bx	lr
    981a:	bf00      	nop

0000981c <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
    981c:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    981e:	4b0b      	ldr	r3, [pc, #44]	; (984c <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9820:	490b      	ldr	r1, [pc, #44]	; (9850 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9822:	4a0c      	ldr	r2, [pc, #48]	; (9854 <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
    9824:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    9828:	f641 75ff 	movw	r5, #8191	; 0x1fff
    982c:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9830:	2400      	movs	r4, #0
    9832:	2500      	movs	r5, #0
    9834:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
    9838:	4b07      	ldr	r3, [pc, #28]	; (9858 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    983a:	201f      	movs	r0, #31
    983c:	2100      	movs	r1, #0
    983e:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
    9842:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    9844:	bc30      	pop	{r4, r5}
	conn_count = 0U;
    9846:	601a      	str	r2, [r3, #0]
}
    9848:	4770      	bx	lr
    984a:	bf00      	nop
    984c:	20000170 	.word	0x20000170
    9850:	20000ec0 	.word	0x20000ec0
    9854:	20000178 	.word	0x20000178
    9858:	200015f4 	.word	0x200015f4

0000985c <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    985c:	f008 b820 	b.w	118a0 <lll_csrand_get>

00009860 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    9860:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    9862:	2300      	movs	r3, #0
    9864:	f009 fe28 	bl	134b8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    9868:	2000      	movs	r0, #0
    986a:	bd08      	pop	{r3, pc}

0000986c <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    986c:	4801      	ldr	r0, [pc, #4]	; (9874 <ll_feat_get+0x8>)
    986e:	2100      	movs	r1, #0
    9870:	4770      	bx	lr
    9872:	bf00      	nop
    9874:	0001417f 	.word	0x0001417f

00009878 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    9878:	b510      	push	{r4, lr}
    987a:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    987c:	f008 f846 	bl	1190c <lll_reset>
	LL_ASSERT(!err);
    9880:	b950      	cbnz	r0, 9898 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    9882:	f008 fc43 	bl	1210c <lll_adv_reset>
	LL_ASSERT(!err);
    9886:	b9c0      	cbnz	r0, 98ba <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    9888:	f009 f8f0 	bl	12a6c <lll_conn_reset>
	LL_ASSERT(!err);
    988c:	bb30      	cbnz	r0, 98dc <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    988e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    9890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9894:	f00d bcee 	b.w	17274 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    9898:	4a19      	ldr	r2, [pc, #100]	; (9900 <perform_lll_reset+0x88>)
    989a:	491a      	ldr	r1, [pc, #104]	; (9904 <perform_lll_reset+0x8c>)
    989c:	481a      	ldr	r0, [pc, #104]	; (9908 <perform_lll_reset+0x90>)
    989e:	f640 031c 	movw	r3, #2076	; 0x81c
    98a2:	f00e fc61 	bl	18168 <printk>
    98a6:	4040      	eors	r0, r0
    98a8:	f380 8811 	msr	BASEPRI, r0
    98ac:	f04f 0003 	mov.w	r0, #3
    98b0:	df02      	svc	2
	err = lll_adv_reset();
    98b2:	f008 fc2b 	bl	1210c <lll_adv_reset>
	LL_ASSERT(!err);
    98b6:	2800      	cmp	r0, #0
    98b8:	d0e6      	beq.n	9888 <perform_lll_reset+0x10>
    98ba:	4a11      	ldr	r2, [pc, #68]	; (9900 <perform_lll_reset+0x88>)
    98bc:	4911      	ldr	r1, [pc, #68]	; (9904 <perform_lll_reset+0x8c>)
    98be:	4812      	ldr	r0, [pc, #72]	; (9908 <perform_lll_reset+0x90>)
    98c0:	f640 0321 	movw	r3, #2081	; 0x821
    98c4:	f00e fc50 	bl	18168 <printk>
    98c8:	4040      	eors	r0, r0
    98ca:	f380 8811 	msr	BASEPRI, r0
    98ce:	f04f 0003 	mov.w	r0, #3
    98d2:	df02      	svc	2
	err = lll_conn_reset();
    98d4:	f009 f8ca 	bl	12a6c <lll_conn_reset>
	LL_ASSERT(!err);
    98d8:	2800      	cmp	r0, #0
    98da:	d0d8      	beq.n	988e <perform_lll_reset+0x16>
    98dc:	4a08      	ldr	r2, [pc, #32]	; (9900 <perform_lll_reset+0x88>)
    98de:	4909      	ldr	r1, [pc, #36]	; (9904 <perform_lll_reset+0x8c>)
    98e0:	4809      	ldr	r0, [pc, #36]	; (9908 <perform_lll_reset+0x90>)
    98e2:	f640 032d 	movw	r3, #2093	; 0x82d
    98e6:	f00e fc3f 	bl	18168 <printk>
    98ea:	4040      	eors	r0, r0
    98ec:	f380 8811 	msr	BASEPRI, r0
    98f0:	f04f 0003 	mov.w	r0, #3
    98f4:	df02      	svc	2
    98f6:	4620      	mov	r0, r4
}
    98f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98fc:	f00d bcba 	b.w	17274 <z_impl_k_sem_give>
    9900:	0001cf48 	.word	0x0001cf48
    9904:	0001cf84 	.word	0x0001cf84
    9908:	0001cde4 	.word	0x0001cde4

0000990c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    990c:	6008      	str	r0, [r1, #0]
    990e:	4801      	ldr	r0, [pc, #4]	; (9914 <ull_ticker_status_give+0x8>)
    9910:	f00d bcb0 	b.w	17274 <z_impl_k_sem_give>
    9914:	200018a0 	.word	0x200018a0

00009918 <disabled_cb>:
    9918:	f00d bcac 	b.w	17274 <z_impl_k_sem_give>

0000991c <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    991c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    9920:	4d2c      	ldr	r5, [pc, #176]	; (99d4 <tx_cmplt_get+0xb8>)
{
    9922:	460c      	mov	r4, r1
    9924:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    9926:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    9928:	7822      	ldrb	r2, [r4, #0]
    992a:	782b      	ldrb	r3, [r5, #0]
    992c:	4291      	cmp	r1, r2
    992e:	bf9c      	itt	ls
    9930:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
    9932:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
    9934:	4591      	cmp	r9, r2
{
    9936:	4682      	mov	sl, r0
    9938:	d042      	beq.n	99c0 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    993a:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
    993e:	3201      	adds	r2, #1
    9940:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    9942:	4f25      	ldr	r7, [pc, #148]	; (99d8 <tx_cmplt_get+0xbc>)
		i = 0U;
    9944:	4291      	cmp	r1, r2
    9946:	bf08      	it	eq
    9948:	2200      	moveq	r2, #0

	*idx = i;
    994a:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
    994c:	5afa      	ldrh	r2, [r7, r3]
    994e:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
    9950:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
    9952:	443b      	add	r3, r7
    9954:	f04f 0b01 	mov.w	fp, #1
    9958:	f04f 0802 	mov.w	r8, #2
    995c:	e021      	b.n	99a2 <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
    995e:	b362      	cbz	r2, 99ba <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    9960:	7902      	ldrb	r2, [r0, #4]
    9962:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
    9966:	3a01      	subs	r2, #1
    9968:	2a01      	cmp	r2, #1
    996a:	d92d      	bls.n	99c8 <tx_cmplt_get+0xac>
    996c:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
    9970:	f002 fcc8 	bl	c304 <ll_tx_mem_release>
	if (*idx >= count) {
    9974:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    9976:	7869      	ldrb	r1, [r5, #1]
    9978:	7828      	ldrb	r0, [r5, #0]
    997a:	4299      	cmp	r1, r3
    997c:	bf9c      	itt	ls
    997e:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
    9980:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
    9982:	454b      	cmp	r3, r9
    9984:	d01d      	beq.n	99c2 <tx_cmplt_get+0xa6>
	i = *idx + 1;
    9986:	1c5a      	adds	r2, r3, #1
    9988:	b2d2      	uxtb	r2, r2
		i = 0U;
    998a:	4291      	cmp	r1, r2
    998c:	bf08      	it	eq
    998e:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
    9990:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
    9994:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    9996:	5af9      	ldrh	r1, [r7, r3]
    9998:	f8ba 2000 	ldrh.w	r2, [sl]
    999c:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
    999e:	443b      	add	r3, r7
    99a0:	d10f      	bne.n	99c2 <tx_cmplt_get+0xa6>
		node_tx = tx->node;
    99a2:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    99a4:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
    99a6:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
    99aa:	d8d8      	bhi.n	995e <tx_cmplt_get+0x42>
			cmplt++;
    99ac:	3601      	adds	r6, #1
    99ae:	b2f6      	uxtb	r6, r6
    99b0:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
    99b4:	2a00      	cmp	r2, #0
    99b6:	d0dd      	beq.n	9974 <tx_cmplt_get+0x58>
    99b8:	e7da      	b.n	9970 <tx_cmplt_get+0x54>
    99ba:	f8c3 8004 	str.w	r8, [r3, #4]
    99be:	e7d9      	b.n	9974 <tx_cmplt_get+0x58>
		return 0;
    99c0:	2600      	movs	r6, #0

	return cmplt;
}
    99c2:	4630      	mov	r0, r6
    99c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    99c8:	3601      	adds	r6, #1
    99ca:	f8c3 b004 	str.w	fp, [r3, #4]
    99ce:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
    99d0:	e7ce      	b.n	9970 <tx_cmplt_get+0x54>
    99d2:	bf00      	nop
    99d4:	2000046c 	.word	0x2000046c
    99d8:	20000470 	.word	0x20000470

000099dc <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    99dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    99e0:	4e3c      	ldr	r6, [pc, #240]	; (9ad4 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
    99e2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9ad8 <ull_done+0xfc>
    99e6:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 9adc <ull_done+0x100>
{
    99ea:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    99ec:	e9d6 0100 	ldrd	r0, r1, [r6]
    99f0:	aa01      	add	r2, sp, #4
    99f2:	f7fd f94f 	bl	6c94 <memq_peek>
		if (link) {
    99f6:	4604      	mov	r4, r0
    99f8:	2800      	cmp	r0, #0
    99fa:	d03e      	beq.n	9a7a <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
    99fc:	6870      	ldr	r0, [r6, #4]
    99fe:	2200      	movs	r2, #0
    9a00:	4631      	mov	r1, r6
    9a02:	f7fd f94f 	bl	6ca4 <memq_dequeue>
			rx_demux_event_done(link, done);
    9a06:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
    9a08:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
    9a0a:	b135      	cbz	r5, 9a1a <ull_done+0x3e>
	return hdr->ref;
    9a0c:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    9a0e:	2b00      	cmp	r3, #0
    9a10:	d052      	beq.n	9ab8 <ull_done+0xdc>
	return hdr->ref--;
    9a12:	782b      	ldrb	r3, [r5, #0]
    9a14:	3b01      	subs	r3, #1
    9a16:	b2db      	uxtb	r3, r3
    9a18:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    9a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
    9a1e:	b123      	cbz	r3, 9a2a <ull_done+0x4e>
    9a20:	2b01      	cmp	r3, #1
    9a22:	d13b      	bne.n	9a9c <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
    9a24:	4638      	mov	r0, r7
    9a26:	f005 fea7 	bl	f778 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
    9a2a:	4a2d      	ldr	r2, [pc, #180]	; (9ae0 <ull_done+0x104>)
	last = last + 1;
    9a2c:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
    9a2e:	f892 c001 	ldrb.w	ip, [r2, #1]
    9a32:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
    9a34:	3301      	adds	r3, #1
	done->extra.type = 0U;
    9a36:	2000      	movs	r0, #0
    9a38:	b2db      	uxtb	r3, r3
		last = 0U;
    9a3a:	459c      	cmp	ip, r3
    9a3c:	bf08      	it	eq
    9a3e:	4603      	moveq	r3, r0
	if (last == first) {
    9a40:	4299      	cmp	r1, r3
    9a42:	f887 0020 	strb.w	r0, [r7, #32]
    9a46:	d01b      	beq.n	9a80 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
    9a48:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
    9a4a:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    9a4c:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    9a4e:	fb00 2101 	mla	r1, r0, r1, r2
    9a52:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
    9a54:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    9a56:	2d00      	cmp	r5, #0
    9a58:	d0c8      	beq.n	99ec <ull_done+0x10>
	return hdr->ref;
    9a5a:	782b      	ldrb	r3, [r5, #0]
    9a5c:	2b00      	cmp	r3, #0
    9a5e:	d1c5      	bne.n	99ec <ull_done+0x10>
    9a60:	696b      	ldr	r3, [r5, #20]
    9a62:	2b00      	cmp	r3, #0
    9a64:	d0c2      	beq.n	99ec <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    9a66:	69a8      	ldr	r0, [r5, #24]
    9a68:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    9a6a:	e9d6 0100 	ldrd	r0, r1, [r6]
    9a6e:	aa01      	add	r2, sp, #4
    9a70:	f7fd f910 	bl	6c94 <memq_peek>
		if (link) {
    9a74:	4604      	mov	r4, r0
    9a76:	2800      	cmp	r0, #0
    9a78:	d1c0      	bne.n	99fc <ull_done+0x20>
}
    9a7a:	b003      	add	sp, #12
    9a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
    9a80:	4918      	ldr	r1, [pc, #96]	; (9ae4 <ull_done+0x108>)
    9a82:	4819      	ldr	r0, [pc, #100]	; (9ae8 <ull_done+0x10c>)
    9a84:	f640 2368 	movw	r3, #2664	; 0xa68
    9a88:	4642      	mov	r2, r8
    9a8a:	f00e fb6d 	bl	18168 <printk>
    9a8e:	4040      	eors	r0, r0
    9a90:	f380 8811 	msr	BASEPRI, r0
    9a94:	f04f 0003 	mov.w	r0, #3
    9a98:	df02      	svc	2
    9a9a:	e7dc      	b.n	9a56 <ull_done+0x7a>
		LL_ASSERT(0);
    9a9c:	4913      	ldr	r1, [pc, #76]	; (9aec <ull_done+0x110>)
    9a9e:	4812      	ldr	r0, [pc, #72]	; (9ae8 <ull_done+0x10c>)
    9aa0:	f640 2361 	movw	r3, #2657	; 0xa61
    9aa4:	4642      	mov	r2, r8
    9aa6:	f00e fb5f 	bl	18168 <printk>
    9aaa:	4040      	eors	r0, r0
    9aac:	f380 8811 	msr	BASEPRI, r0
    9ab0:	f04f 0003 	mov.w	r0, #3
    9ab4:	df02      	svc	2
		break;
    9ab6:	e7b8      	b.n	9a2a <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
    9ab8:	480b      	ldr	r0, [pc, #44]	; (9ae8 <ull_done+0x10c>)
    9aba:	f640 230a 	movw	r3, #2570	; 0xa0a
    9abe:	4642      	mov	r2, r8
    9ac0:	4649      	mov	r1, r9
    9ac2:	f00e fb51 	bl	18168 <printk>
    9ac6:	4040      	eors	r0, r0
    9ac8:	f380 8811 	msr	BASEPRI, r0
    9acc:	f04f 0003 	mov.w	r0, #3
    9ad0:	df02      	svc	2
    9ad2:	e79e      	b.n	9a12 <ull_done+0x36>
    9ad4:	2000188c 	.word	0x2000188c
    9ad8:	0001cf48 	.word	0x0001cf48
    9adc:	0001cf8c 	.word	0x0001cf8c
    9ae0:	2000032c 	.word	0x2000032c
    9ae4:	0001cfa4 	.word	0x0001cfa4
    9ae8:	0001cde4 	.word	0x0001cde4
    9aec:	0001ce44 	.word	0x0001ce44

00009af0 <rx_alloc>:
{
    9af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
    9af4:	4f33      	ldr	r7, [pc, #204]	; (9bc4 <rx_alloc+0xd4>)
    9af6:	783e      	ldrb	r6, [r7, #0]
    9af8:	4286      	cmp	r6, r0
    9afa:	bf28      	it	cs
    9afc:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9afe:	b34e      	cbz	r6, 9b54 <rx_alloc+0x64>
    9b00:	4d31      	ldr	r5, [pc, #196]	; (9bc8 <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
    9b02:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 9bcc <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9b06:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
    9b08:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
    9b0c:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9b0e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    9b10:	3401      	adds	r4, #1
    9b12:	b2e4      	uxtb	r4, r4
		last = 0U;
    9b14:	42a2      	cmp	r2, r4
    9b16:	bf08      	it	eq
    9b18:	2400      	moveq	r4, #0
	if (last == first) {
    9b1a:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    9b1c:	4640      	mov	r0, r8
    9b1e:	d01b      	beq.n	9b58 <rx_alloc+0x68>
    9b20:	f7fd f84a 	bl	6bb8 <mem_acquire>
    9b24:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    9b26:	4648      	mov	r0, r9
		if (!link) {
    9b28:	f1ba 0f00 	cmp.w	sl, #0
    9b2c:	d012      	beq.n	9b54 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    9b2e:	f7fd f843 	bl	6bb8 <mem_acquire>
		if (!rx) {
    9b32:	2800      	cmp	r0, #0
    9b34:	d03f      	beq.n	9bb6 <rx_alloc+0xc6>
		rx->link = link;
    9b36:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    9b3a:	78ea      	ldrb	r2, [r5, #3]
    9b3c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    9b3e:	fb02 5303 	mla	r3, r2, r3, r5
    9b42:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    9b44:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    9b46:	70ec      	strb	r4, [r5, #3]
		max--;
    9b48:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    9b4a:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9b4c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    9b50:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9b52:	d1db      	bne.n	9b0c <rx_alloc+0x1c>
}
    9b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
    9b58:	783b      	ldrb	r3, [r7, #0]
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	d0fa      	beq.n	9b54 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    9b5e:	4d1c      	ldr	r5, [pc, #112]	; (9bd0 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
    9b60:	4e1c      	ldr	r6, [pc, #112]	; (9bd4 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    9b62:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    9b64:	f8df 8064 	ldr.w	r8, [pc, #100]	; 9bcc <rx_alloc+0xdc>
		link->mem = NULL;
    9b68:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    9b6c:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    9b6e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    9b70:	3401      	adds	r4, #1
    9b72:	b2e4      	uxtb	r4, r4
		last = 0U;
    9b74:	42a2      	cmp	r2, r4
    9b76:	bf08      	it	eq
    9b78:	2400      	moveq	r4, #0
	if (last == first) {
    9b7a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    9b7c:	4630      	mov	r0, r6
    9b7e:	d0e9      	beq.n	9b54 <rx_alloc+0x64>
    9b80:	f7fd f81a 	bl	6bb8 <mem_acquire>
    9b84:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    9b86:	4640      	mov	r0, r8
		if (!link) {
    9b88:	f1ba 0f00 	cmp.w	sl, #0
    9b8c:	d0e2      	beq.n	9b54 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    9b8e:	f7fd f813 	bl	6bb8 <mem_acquire>
		if (!rx) {
    9b92:	b180      	cbz	r0, 9bb6 <rx_alloc+0xc6>
		link->mem = NULL;
    9b94:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    9b98:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    9b9c:	78ea      	ldrb	r2, [r5, #3]
    9b9e:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    9ba0:	fb02 5303 	mla	r3, r2, r3, r5
    9ba4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    9ba6:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    9ba8:	70ec      	strb	r4, [r5, #3]
    9baa:	3b01      	subs	r3, #1
    9bac:	b2db      	uxtb	r3, r3
    9bae:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    9bb0:	2b00      	cmp	r3, #0
    9bb2:	d1db      	bne.n	9b6c <rx_alloc+0x7c>
    9bb4:	e7ce      	b.n	9b54 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
    9bb6:	4650      	mov	r0, sl
    9bb8:	4906      	ldr	r1, [pc, #24]	; (9bd4 <rx_alloc+0xe4>)
}
    9bba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
    9bbe:	f7fd b815 	b.w	6bec <mem_release>
    9bc2:	bf00      	nop
    9bc4:	20001654 	.word	0x20001654
    9bc8:	20000350 	.word	0x20000350
    9bcc:	200016a4 	.word	0x200016a4
    9bd0:	20000344 	.word	0x20000344
    9bd4:	20001658 	.word	0x20001658

00009bd8 <rx_demux>:
{
    9bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 9d8c <rx_demux+0x1b4>
	k_sem_give(sem_recv);
    9be0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 9d90 <rx_demux+0x1b8>
		LL_ASSERT(0);
    9be4:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 9d94 <rx_demux+0x1bc>
    9be8:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 9d98 <rx_demux+0x1c0>
{
    9bec:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    9bee:	e9d8 0100 	ldrd	r0, r1, [r8]
    9bf2:	aa03      	add	r2, sp, #12
    9bf4:	f7fd f84e 	bl	6c94 <memq_peek>
		if (link) {
    9bf8:	4605      	mov	r5, r0
    9bfa:	2800      	cmp	r0, #0
    9bfc:	d035      	beq.n	9c6a <rx_demux+0x92>
			LL_ASSERT(rx);
    9bfe:	9b03      	ldr	r3, [sp, #12]
    9c00:	2b00      	cmp	r3, #0
    9c02:	f000 80a6 	beq.w	9d52 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    9c06:	7818      	ldrb	r0, [r3, #0]
    9c08:	aa04      	add	r2, sp, #16
    9c0a:	a902      	add	r1, sp, #8
    9c0c:	f006 f86a 	bl	fce4 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    9c10:	4604      	mov	r4, r0
    9c12:	2800      	cmp	r0, #0
    9c14:	d055      	beq.n	9cc2 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    9c16:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    9c1a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    9c1e:	780f      	ldrb	r7, [r1, #0]
    9c20:	f8ad 200a 	strh.w	r2, [sp, #10]
    9c24:	ae05      	add	r6, sp, #20
    9c26:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    9c28:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    9c2c:	f006 f874 	bl	fd18 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    9c30:	4621      	mov	r1, r4
    9c32:	9a05      	ldr	r2, [sp, #20]
    9c34:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    9c38:	f006 f8b8 	bl	fdac <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    9c3c:	4620      	mov	r0, r4
    9c3e:	f006 f829 	bl	fc94 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    9c42:	4632      	mov	r2, r6
    9c44:	4629      	mov	r1, r5
    9c46:	4638      	mov	r0, r7
    9c48:	f006 f84c 	bl	fce4 <ull_conn_ack_by_last_peek>
	} while (link);
    9c4c:	4604      	mov	r4, r0
    9c4e:	2800      	cmp	r0, #0
    9c50:	d1ec      	bne.n	9c2c <rx_demux+0x54>
	k_sem_give(sem_recv);
    9c52:	f8d9 0000 	ldr.w	r0, [r9]
    9c56:	f00d fb0d 	bl	17274 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    9c5a:	e9d8 0100 	ldrd	r0, r1, [r8]
    9c5e:	aa03      	add	r2, sp, #12
    9c60:	f7fd f818 	bl	6c94 <memq_peek>
		if (link) {
    9c64:	4605      	mov	r5, r0
    9c66:	2800      	cmp	r0, #0
    9c68:	d1c9      	bne.n	9bfe <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    9c6a:	aa04      	add	r2, sp, #16
    9c6c:	a902      	add	r1, sp, #8
    9c6e:	f10d 0007 	add.w	r0, sp, #7
    9c72:	f006 f81b 	bl	fcac <ull_conn_ack_peek>
			if (link) {
    9c76:	4604      	mov	r4, r0
    9c78:	2800      	cmp	r0, #0
    9c7a:	d067      	beq.n	9d4c <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
    9c7c:	9b04      	ldr	r3, [sp, #16]
    9c7e:	9305      	str	r3, [sp, #20]
    9c80:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    9c84:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    9c88:	f8ad 300a 	strh.w	r3, [sp, #10]
    9c8c:	ae05      	add	r6, sp, #20
    9c8e:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    9c92:	f006 f841 	bl	fd18 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    9c96:	4621      	mov	r1, r4
    9c98:	9a05      	ldr	r2, [sp, #20]
    9c9a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    9c9e:	f006 f885 	bl	fdac <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    9ca2:	4620      	mov	r0, r4
    9ca4:	f005 fff6 	bl	fc94 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    9ca8:	4632      	mov	r2, r6
    9caa:	4629      	mov	r1, r5
    9cac:	4638      	mov	r0, r7
    9cae:	f006 f819 	bl	fce4 <ull_conn_ack_by_last_peek>
	} while (link);
    9cb2:	4604      	mov	r4, r0
    9cb4:	2800      	cmp	r0, #0
    9cb6:	d1ec      	bne.n	9c92 <rx_demux+0xba>
	k_sem_give(sem_recv);
    9cb8:	f8d9 0000 	ldr.w	r0, [r9]
    9cbc:	f00d fada 	bl	17274 <z_impl_k_sem_give>
			if (nack) {
    9cc0:	e7cb      	b.n	9c5a <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    9cc2:	9b03      	ldr	r3, [sp, #12]
    9cc4:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    9cc6:	791b      	ldrb	r3, [r3, #4]
    9cc8:	3b01      	subs	r3, #1
    9cca:	2b16      	cmp	r3, #22
    9ccc:	d80d      	bhi.n	9cea <rx_demux+0x112>
    9cce:	e8df f003 	tbb	[pc, r3]
    9cd2:	0c1a      	.short	0x0c1a
    9cd4:	0c0c0c38 	.word	0x0c0c0c38
    9cd8:	0c0c0c0c 	.word	0x0c0c0c0c
    9cdc:	0c0c0c0c 	.word	0x0c0c0c0c
    9ce0:	0c0c0c0c 	.word	0x0c0c0c0c
    9ce4:	2d0c0c0c 	.word	0x2d0c0c0c
    9ce8:	1a          	.byte	0x1a
    9ce9:	00          	.byte	0x00
		LL_ASSERT(0);
    9cea:	482c      	ldr	r0, [pc, #176]	; (9d9c <rx_demux+0x1c4>)
    9cec:	f640 13f7 	movw	r3, #2551	; 0x9f7
    9cf0:	4652      	mov	r2, sl
    9cf2:	4659      	mov	r1, fp
    9cf4:	f00e fa38 	bl	18168 <printk>
    9cf8:	4040      	eors	r0, r0
    9cfa:	f380 8811 	msr	BASEPRI, r0
    9cfe:	f04f 0003 	mov.w	r0, #3
    9d02:	df02      	svc	2
			if (nack) {
    9d04:	e773      	b.n	9bee <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    9d06:	4921      	ldr	r1, [pc, #132]	; (9d8c <rx_demux+0x1b4>)
    9d08:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9d0c:	2200      	movs	r2, #0
    9d0e:	f7fc ffc9 	bl	6ca4 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9d12:	4b23      	ldr	r3, [pc, #140]	; (9da0 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
    9d14:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9d16:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    9d18:	4628      	mov	r0, r5
    9d1a:	4a22      	ldr	r2, [pc, #136]	; (9da4 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9d1c:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    9d1e:	f7fc ffaf 	bl	6c80 <memq_enqueue>
	k_sem_give(sem_recv);
    9d22:	f8d9 0000 	ldr.w	r0, [r9]
    9d26:	f00d faa5 	bl	17274 <z_impl_k_sem_give>
			if (nack) {
    9d2a:	e796      	b.n	9c5a <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    9d2c:	4917      	ldr	r1, [pc, #92]	; (9d8c <rx_demux+0x1b4>)
    9d2e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9d32:	2200      	movs	r2, #0
    9d34:	f7fc ffb6 	bl	6ca4 <memq_dequeue>
		ull_conn_setup(link, rx);
    9d38:	9905      	ldr	r1, [sp, #20]
    9d3a:	4628      	mov	r0, r5
    9d3c:	f002 fe0c 	bl	c958 <ull_conn_setup>
			if (nack) {
    9d40:	e755      	b.n	9bee <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
    9d42:	a905      	add	r1, sp, #20
    9d44:	4628      	mov	r0, r5
    9d46:	f002 fe2f 	bl	c9a8 <ull_conn_rx>
		if (nack) {
    9d4a:	b188      	cbz	r0, 9d70 <rx_demux+0x198>
}
    9d4c:	b007      	add	sp, #28
    9d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    9d52:	4915      	ldr	r1, [pc, #84]	; (9da8 <rx_demux+0x1d0>)
    9d54:	4811      	ldr	r0, [pc, #68]	; (9d9c <rx_demux+0x1c4>)
    9d56:	f640 03a8 	movw	r3, #2216	; 0x8a8
    9d5a:	4652      	mov	r2, sl
    9d5c:	f00e fa04 	bl	18168 <printk>
    9d60:	4040      	eors	r0, r0
    9d62:	f380 8811 	msr	BASEPRI, r0
    9d66:	f04f 0003 	mov.w	r0, #3
    9d6a:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    9d6c:	9b03      	ldr	r3, [sp, #12]
    9d6e:	e74a      	b.n	9c06 <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    9d70:	4906      	ldr	r1, [pc, #24]	; (9d8c <rx_demux+0x1b4>)
    9d72:	4602      	mov	r2, r0
    9d74:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9d78:	f7fc ff94 	bl	6ca4 <memq_dequeue>
		if (rx) {
    9d7c:	9905      	ldr	r1, [sp, #20]
    9d7e:	2900      	cmp	r1, #0
    9d80:	f43f af35 	beq.w	9bee <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9d84:	4b06      	ldr	r3, [pc, #24]	; (9da0 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    9d86:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    9d88:	78db      	ldrb	r3, [r3, #3]
    9d8a:	e7c6      	b.n	9d1a <rx_demux+0x142>
    9d8c:	20001894 	.word	0x20001894
    9d90:	2000189c 	.word	0x2000189c
    9d94:	0001cf48 	.word	0x0001cf48
    9d98:	0001ce44 	.word	0x0001ce44
    9d9c:	0001cde4 	.word	0x0001cde4
    9da0:	2000046c 	.word	0x2000046c
    9da4:	20001888 	.word	0x20001888
    9da8:	0001cfb4 	.word	0x0001cfb4

00009dac <ll_rx_get>:
{
    9dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9db0:	b085      	sub	sp, #20
    9db2:	e9cd 0100 	strd	r0, r1, [sp]
    9db6:	4c63      	ldr	r4, [pc, #396]	; (9f44 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
    9db8:	4d63      	ldr	r5, [pc, #396]	; (9f48 <ll_rx_get+0x19c>)
    9dba:	4e64      	ldr	r6, [pc, #400]	; (9f4c <ll_rx_get+0x1a0>)
	*node_rx = NULL;
    9dbc:	9a00      	ldr	r2, [sp, #0]
    9dbe:	2300      	movs	r3, #0
    9dc0:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    9dc2:	e9d6 0100 	ldrd	r0, r1, [r6]
    9dc6:	aa03      	add	r2, sp, #12
    9dc8:	f7fc ff64 	bl	6c94 <memq_peek>
	if (link) {
    9dcc:	4680      	mov	r8, r0
    9dce:	2800      	cmp	r0, #0
    9dd0:	f000 809f 	beq.w	9f12 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    9dd4:	9b03      	ldr	r3, [sp, #12]
    9dd6:	495e      	ldr	r1, [pc, #376]	; (9f50 <ll_rx_get+0x1a4>)
    9dd8:	781a      	ldrb	r2, [r3, #0]
    9dda:	9801      	ldr	r0, [sp, #4]
    9ddc:	f7ff fd9e 	bl	991c <tx_cmplt_get>
		if (!cmplt) {
    9de0:	2800      	cmp	r0, #0
    9de2:	f040 809b 	bne.w	9f1c <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
    9de6:	78a3      	ldrb	r3, [r4, #2]
    9de8:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    9dec:	78e2      	ldrb	r2, [r4, #3]
    9dee:	4607      	mov	r7, r0
    9df0:	f10d 0109 	add.w	r1, sp, #9
    9df4:	f10d 000a 	add.w	r0, sp, #10
    9df8:	f7ff fd90 	bl	991c <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
    9dfc:	ea47 0200 	orr.w	r2, r7, r0
    9e00:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    9e04:	d1f2      	bne.n	9dec <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
    9e06:	9b03      	ldr	r3, [sp, #12]
    9e08:	7919      	ldrb	r1, [r3, #4]
    9e0a:	2901      	cmp	r1, #1
    9e0c:	f040 8093 	bne.w	9f36 <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
    9e10:	494e      	ldr	r1, [pc, #312]	; (9f4c <ll_rx_get+0x1a0>)
    9e12:	6870      	ldr	r0, [r6, #4]
    9e14:	f7fc ff46 	bl	6ca4 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    9e18:	494e      	ldr	r1, [pc, #312]	; (9f54 <ll_rx_get+0x1a8>)
    9e1a:	4640      	mov	r0, r8
    9e1c:	f7fc fee6 	bl	6bec <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9e20:	782b      	ldrb	r3, [r5, #0]
    9e22:	2b04      	cmp	r3, #4
    9e24:	d866      	bhi.n	9ef4 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
    9e26:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    9e28:	494b      	ldr	r1, [pc, #300]	; (9f58 <ll_rx_get+0x1ac>)
    9e2a:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    9e2c:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    9e2e:	f7fc fedd 	bl	6bec <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9e32:	782b      	ldrb	r3, [r5, #0]
    9e34:	2b00      	cmp	r3, #0
    9e36:	d0c1      	beq.n	9dbc <ll_rx_get+0x10>
    9e38:	f8df 8120 	ldr.w	r8, [pc, #288]	; 9f5c <ll_rx_get+0x1b0>
	last = last + 1;
    9e3c:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
    9e40:	f898 2001 	ldrb.w	r2, [r8, #1]
    9e44:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    9e48:	3701      	adds	r7, #1
    9e4a:	b2ff      	uxtb	r7, r7
		last = 0U;
    9e4c:	42ba      	cmp	r2, r7
    9e4e:	bf08      	it	eq
    9e50:	2700      	moveq	r7, #0
	if (last == first) {
    9e52:	429f      	cmp	r7, r3
    9e54:	d019      	beq.n	9e8a <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
    9e56:	483f      	ldr	r0, [pc, #252]	; (9f54 <ll_rx_get+0x1a8>)
    9e58:	f7fc feae 	bl	6bb8 <mem_acquire>
		if (!link) {
    9e5c:	4681      	mov	r9, r0
    9e5e:	2800      	cmp	r0, #0
    9e60:	d0ac      	beq.n	9dbc <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    9e62:	483d      	ldr	r0, [pc, #244]	; (9f58 <ll_rx_get+0x1ac>)
    9e64:	f7fc fea8 	bl	6bb8 <mem_acquire>
		if (!rx) {
    9e68:	2800      	cmp	r0, #0
    9e6a:	d05a      	beq.n	9f22 <ll_rx_get+0x176>
		rx->link = link;
    9e6c:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    9e70:	f898 2003 	ldrb.w	r2, [r8, #3]
    9e74:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    9e78:	fb02 8303 	mla	r3, r2, r3, r8
    9e7c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    9e7e:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    9e80:	f888 7003 	strb.w	r7, [r8, #3]
    9e84:	3b01      	subs	r3, #1
    9e86:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    9e88:	e798      	b.n	9dbc <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    9e8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 9f60 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
    9e8e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 9f54 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    9e92:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    9e96:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 9f58 <ll_rx_get+0x1ac>
	if (last == count) {
    9e9a:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    9e9e:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    9ea2:	3701      	adds	r7, #1
    9ea4:	b2ff      	uxtb	r7, r7
		last = 0U;
    9ea6:	42ba      	cmp	r2, r7
    9ea8:	bf08      	it	eq
    9eaa:	2700      	moveq	r7, #0
	if (last == first) {
    9eac:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
    9eae:	4648      	mov	r0, r9
    9eb0:	d084      	beq.n	9dbc <ll_rx_get+0x10>
    9eb2:	f7fc fe81 	bl	6bb8 <mem_acquire>
    9eb6:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    9eb8:	4650      	mov	r0, sl
		if (!link) {
    9eba:	f1bb 0f00 	cmp.w	fp, #0
    9ebe:	f43f af7d 	beq.w	9dbc <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    9ec2:	f7fc fe79 	bl	6bb8 <mem_acquire>
		if (!rx) {
    9ec6:	2800      	cmp	r0, #0
    9ec8:	d030      	beq.n	9f2c <ll_rx_get+0x180>
		link->mem = NULL;
    9eca:	2300      	movs	r3, #0
    9ecc:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
    9ed0:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    9ed4:	f898 2003 	ldrb.w	r2, [r8, #3]
    9ed8:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    9edc:	fb02 8303 	mla	r3, r2, r3, r8
    9ee0:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    9ee2:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    9ee4:	f888 7003 	strb.w	r7, [r8, #3]
    9ee8:	3b01      	subs	r3, #1
    9eea:	b2db      	uxtb	r3, r3
    9eec:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    9eee:	2b00      	cmp	r3, #0
    9ef0:	d1d3      	bne.n	9e9a <ll_rx_get+0xee>
    9ef2:	e763      	b.n	9dbc <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9ef4:	4a1b      	ldr	r2, [pc, #108]	; (9f64 <ll_rx_get+0x1b8>)
    9ef6:	491c      	ldr	r1, [pc, #112]	; (9f68 <ll_rx_get+0x1bc>)
    9ef8:	481c      	ldr	r0, [pc, #112]	; (9f6c <ll_rx_get+0x1c0>)
    9efa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    9efe:	f00e f933 	bl	18168 <printk>
    9f02:	4040      	eors	r0, r0
    9f04:	f380 8811 	msr	BASEPRI, r0
    9f08:	f04f 0003 	mov.w	r0, #3
    9f0c:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    9f0e:	782b      	ldrb	r3, [r5, #0]
    9f10:	e789      	b.n	9e26 <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    9f12:	78e2      	ldrb	r2, [r4, #3]
    9f14:	490e      	ldr	r1, [pc, #56]	; (9f50 <ll_rx_get+0x1a4>)
    9f16:	9801      	ldr	r0, [sp, #4]
    9f18:	f7ff fd00 	bl	991c <tx_cmplt_get>
}
    9f1c:	b005      	add	sp, #20
    9f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    9f22:	490c      	ldr	r1, [pc, #48]	; (9f54 <ll_rx_get+0x1a8>)
    9f24:	4648      	mov	r0, r9
    9f26:	f7fc fe61 	bl	6bec <mem_release>
			return;
    9f2a:	e747      	b.n	9dbc <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
    9f2c:	4909      	ldr	r1, [pc, #36]	; (9f54 <ll_rx_get+0x1a8>)
    9f2e:	4658      	mov	r0, fp
    9f30:	f7fc fe5c 	bl	6bec <mem_release>
			return;
    9f34:	e742      	b.n	9dbc <ll_rx_get+0x10>
			*node_rx = rx;
    9f36:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    9f38:	4610      	mov	r0, r2
			*node_rx = rx;
    9f3a:	600b      	str	r3, [r1, #0]
}
    9f3c:	b005      	add	sp, #20
    9f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f42:	bf00      	nop
    9f44:	2000046c 	.word	0x2000046c
    9f48:	20001654 	.word	0x20001654
    9f4c:	20001884 	.word	0x20001884
    9f50:	2000046e 	.word	0x2000046e
    9f54:	20001658 	.word	0x20001658
    9f58:	200016a4 	.word	0x200016a4
    9f5c:	20000350 	.word	0x20000350
    9f60:	20000344 	.word	0x20000344
    9f64:	0001cf48 	.word	0x0001cf48
    9f68:	0001cfb8 	.word	0x0001cfb8
    9f6c:	0001cde4 	.word	0x0001cde4

00009f70 <ll_rx_dequeue>:
{
    9f70:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    9f72:	495d      	ldr	r1, [pc, #372]	; (a0e8 <ll_rx_dequeue+0x178>)
{
    9f74:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    9f76:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    9f78:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    9f7a:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    9f7c:	aa01      	add	r2, sp, #4
    9f7e:	f7fc fe91 	bl	6ca4 <memq_dequeue>
	LL_ASSERT(link);
    9f82:	4604      	mov	r4, r0
    9f84:	2800      	cmp	r0, #0
    9f86:	d063      	beq.n	a050 <ll_rx_dequeue+0xe0>
	mem_release(link, &mem_link_rx.free);
    9f88:	4958      	ldr	r1, [pc, #352]	; (a0ec <ll_rx_dequeue+0x17c>)
    9f8a:	4620      	mov	r0, r4
    9f8c:	f7fc fe2e 	bl	6bec <mem_release>
	switch (rx->type) {
    9f90:	9a01      	ldr	r2, [sp, #4]
    9f92:	7913      	ldrb	r3, [r2, #4]
    9f94:	2b1c      	cmp	r3, #28
    9f96:	d810      	bhi.n	9fba <ll_rx_dequeue+0x4a>
    9f98:	e8df f003 	tbb	[pc, r3]
    9f9c:	1e0f0f1e 	.word	0x1e0f0f1e
    9fa0:	0f0f0f0f 	.word	0x0f0f0f0f
    9fa4:	0f0f0f0f 	.word	0x0f0f0f0f
    9fa8:	0f0f0f0f 	.word	0x0f0f0f0f
    9fac:	0f0f0f0f 	.word	0x0f0f0f0f
    9fb0:	1e2f0f0f 	.word	0x1e2f0f0f
    9fb4:	1e1e1e1e 	.word	0x1e1e1e1e
    9fb8:	1e          	.byte	0x1e
    9fb9:	00          	.byte	0x00
		LL_ASSERT(0);
    9fba:	4a4d      	ldr	r2, [pc, #308]	; (a0f0 <ll_rx_dequeue+0x180>)
    9fbc:	494d      	ldr	r1, [pc, #308]	; (a0f4 <ll_rx_dequeue+0x184>)
    9fbe:	484e      	ldr	r0, [pc, #312]	; (a0f8 <ll_rx_dequeue+0x188>)
    9fc0:	f240 43c7 	movw	r3, #1223	; 0x4c7
    9fc4:	f00e f8d0 	bl	18168 <printk>
    9fc8:	4040      	eors	r0, r0
    9fca:	f380 8811 	msr	BASEPRI, r0
    9fce:	f04f 0003 	mov.w	r0, #3
    9fd2:	df02      	svc	2
}
    9fd4:	b002      	add	sp, #8
    9fd6:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    9fd8:	2b00      	cmp	r3, #0
    9fda:	d1fb      	bne.n	9fd4 <ll_rx_dequeue+0x64>
    9fdc:	4a44      	ldr	r2, [pc, #272]	; (a0f0 <ll_rx_dequeue+0x180>)
    9fde:	4947      	ldr	r1, [pc, #284]	; (a0fc <ll_rx_dequeue+0x18c>)
    9fe0:	4845      	ldr	r0, [pc, #276]	; (a0f8 <ll_rx_dequeue+0x188>)
    9fe2:	f240 43c3 	movw	r3, #1219	; 0x4c3
    9fe6:	f00e f8bf 	bl	18168 <printk>
    9fea:	4040      	eors	r0, r0
    9fec:	f380 8811 	msr	BASEPRI, r0
    9ff0:	f04f 0003 	mov.w	r0, #3
    9ff4:	df02      	svc	2
}
    9ff6:	b002      	add	sp, #8
    9ff8:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    9ffa:	7f13      	ldrb	r3, [r2, #28]
    9ffc:	2b3c      	cmp	r3, #60	; 0x3c
    9ffe:	d035      	beq.n	a06c <ll_rx_dequeue+0xfc>
    a000:	7f53      	ldrb	r3, [r2, #29]
    a002:	b1bb      	cbz	r3, a034 <ll_rx_dequeue+0xc4>
			adv = HDR_LLL2ULL(lll);
    a004:	6893      	ldr	r3, [r2, #8]
    a006:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    a008:	6e60      	ldr	r0, [r4, #100]	; 0x64
    a00a:	b120      	cbz	r0, a016 <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
    a00c:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    a00e:	493c      	ldr	r1, [pc, #240]	; (a100 <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
    a010:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
    a012:	f7fc fdeb 	bl	6bec <mem_release>
			adv->is_enabled = 0U;
    a016:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    a01a:	f36f 0300 	bfc	r3, #0, #1
    a01e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      ull_adv_is_enabled(0));
    a022:	2000      	movs	r0, #0
    a024:	f001 fa30 	bl	b488 <ull_adv_is_enabled>
			if (!bm) {
    a028:	2800      	cmp	r0, #0
    a02a:	d1d3      	bne.n	9fd4 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
    a02c:	f006 fe52 	bl	10cd4 <ull_filter_adv_scan_state_cb>
}
    a030:	b002      	add	sp, #8
    a032:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    a034:	4a2e      	ldr	r2, [pc, #184]	; (a0f0 <ll_rx_dequeue+0x180>)
    a036:	492f      	ldr	r1, [pc, #188]	; (a0f4 <ll_rx_dequeue+0x184>)
    a038:	482f      	ldr	r0, [pc, #188]	; (a0f8 <ll_rx_dequeue+0x188>)
    a03a:	f240 4354 	movw	r3, #1108	; 0x454
    a03e:	f00e f893 	bl	18168 <printk>
    a042:	4040      	eors	r0, r0
    a044:	f380 8811 	msr	BASEPRI, r0
    a048:	f04f 0003 	mov.w	r0, #3
    a04c:	df02      	svc	2
    a04e:	e7e8      	b.n	a022 <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
    a050:	4a27      	ldr	r2, [pc, #156]	; (a0f0 <ll_rx_dequeue+0x180>)
    a052:	492c      	ldr	r1, [pc, #176]	; (a104 <ll_rx_dequeue+0x194>)
    a054:	4828      	ldr	r0, [pc, #160]	; (a0f8 <ll_rx_dequeue+0x188>)
    a056:	f240 33a1 	movw	r3, #929	; 0x3a1
    a05a:	f00e f885 	bl	18168 <printk>
    a05e:	4040      	eors	r0, r0
    a060:	f380 8811 	msr	BASEPRI, r0
    a064:	f04f 0003 	mov.w	r0, #3
    a068:	df02      	svc	2
    a06a:	e78d      	b.n	9f88 <ll_rx_dequeue+0x18>
			lll = ftr->param;
    a06c:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
    a06e:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
    a072:	b1ed      	cbz	r5, a0b0 <ll_rx_dequeue+0x140>
				LL_ASSERT(!conn_lll->link_tx_free);
    a074:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
    a076:	2200      	movs	r2, #0
    a078:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
    a07a:	b163      	cbz	r3, a096 <ll_rx_dequeue+0x126>
    a07c:	4a1c      	ldr	r2, [pc, #112]	; (a0f0 <ll_rx_dequeue+0x180>)
    a07e:	4922      	ldr	r1, [pc, #136]	; (a108 <ll_rx_dequeue+0x198>)
    a080:	481d      	ldr	r0, [pc, #116]	; (a0f8 <ll_rx_dequeue+0x188>)
    a082:	f240 431a 	movw	r3, #1050	; 0x41a
    a086:	f00e f86f 	bl	18168 <printk>
    a08a:	4040      	eors	r0, r0
    a08c:	f380 8811 	msr	BASEPRI, r0
    a090:	f04f 0003 	mov.w	r0, #3
    a094:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    a096:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    a09a:	f105 0048 	add.w	r0, r5, #72	; 0x48
    a09e:	f7fc fde5 	bl	6c6c <memq_deinit>
				LL_ASSERT(link);
    a0a2:	4606      	mov	r6, r0
    a0a4:	b190      	cbz	r0, a0cc <ll_rx_dequeue+0x15c>
				ll_conn_release(conn);
    a0a6:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    a0a8:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
    a0aa:	f002 f8fd 	bl	c2a8 <ll_conn_release>
    a0ae:	e7b2      	b.n	a016 <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
    a0b0:	4a0f      	ldr	r2, [pc, #60]	; (a0f0 <ll_rx_dequeue+0x180>)
    a0b2:	4916      	ldr	r1, [pc, #88]	; (a10c <ll_rx_dequeue+0x19c>)
    a0b4:	4810      	ldr	r0, [pc, #64]	; (a0f8 <ll_rx_dequeue+0x188>)
    a0b6:	f240 4317 	movw	r3, #1047	; 0x417
    a0ba:	f00e f855 	bl	18168 <printk>
    a0be:	4040      	eors	r0, r0
    a0c0:	f380 8811 	msr	BASEPRI, r0
    a0c4:	f04f 0003 	mov.w	r0, #3
    a0c8:	df02      	svc	2
    a0ca:	e7d3      	b.n	a074 <ll_rx_dequeue+0x104>
				LL_ASSERT(link);
    a0cc:	4a08      	ldr	r2, [pc, #32]	; (a0f0 <ll_rx_dequeue+0x180>)
    a0ce:	490d      	ldr	r1, [pc, #52]	; (a104 <ll_rx_dequeue+0x194>)
    a0d0:	4809      	ldr	r0, [pc, #36]	; (a0f8 <ll_rx_dequeue+0x188>)
    a0d2:	f240 431d 	movw	r3, #1053	; 0x41d
    a0d6:	f00e f847 	bl	18168 <printk>
    a0da:	4040      	eors	r0, r0
    a0dc:	f380 8811 	msr	BASEPRI, r0
    a0e0:	f04f 0003 	mov.w	r0, #3
    a0e4:	df02      	svc	2
    a0e6:	e7de      	b.n	a0a6 <ll_rx_dequeue+0x136>
    a0e8:	20001884 	.word	0x20001884
    a0ec:	20001658 	.word	0x20001658
    a0f0:	0001cf48 	.word	0x0001cf48
    a0f4:	0001ce44 	.word	0x0001ce44
    a0f8:	0001cde4 	.word	0x0001cde4
    a0fc:	0001d018 	.word	0x0001d018
    a100:	200016a4 	.word	0x200016a4
    a104:	0001d29c 	.word	0x0001d29c
    a108:	0001d000 	.word	0x0001d000
    a10c:	0001cff4 	.word	0x0001cff4

0000a110 <ll_rx_mem_release>:
{
    a110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    a114:	6804      	ldr	r4, [r0, #0]
{
    a116:	4680      	mov	r8, r0
	while (rx) {
    a118:	b344      	cbz	r4, a16c <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
    a11a:	4f56      	ldr	r7, [pc, #344]	; (a274 <ll_rx_mem_release+0x164>)
    a11c:	f8df 9158 	ldr.w	r9, [pc, #344]	; a278 <ll_rx_mem_release+0x168>
    a120:	4e56      	ldr	r6, [pc, #344]	; (a27c <ll_rx_mem_release+0x16c>)
		rx = rx->next;
    a122:	4625      	mov	r5, r4
    a124:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    a126:	792b      	ldrb	r3, [r5, #4]
    a128:	2b1c      	cmp	r3, #28
    a12a:	d810      	bhi.n	a14e <ll_rx_mem_release+0x3e>
    a12c:	e8df f003 	tbb	[pc, r3]
    a130:	380f0f38 	.word	0x380f0f38
    a134:	0f0f0f0f 	.word	0x0f0f0f0f
    a138:	0f0f0f0f 	.word	0x0f0f0f0f
    a13c:	0f0f0f0f 	.word	0x0f0f0f0f
    a140:	0f0f0f0f 	.word	0x0f0f0f0f
    a144:	56260f0f 	.word	0x56260f0f
    a148:	38383838 	.word	0x38383838
    a14c:	38          	.byte	0x38
    a14d:	00          	.byte	0x00
			LL_ASSERT(0);
    a14e:	f240 53f4 	movw	r3, #1524	; 0x5f4
    a152:	463a      	mov	r2, r7
    a154:	4649      	mov	r1, r9
    a156:	4630      	mov	r0, r6
    a158:	f00e f806 	bl	18168 <printk>
    a15c:	4040      	eors	r0, r0
    a15e:	f380 8811 	msr	BASEPRI, r0
    a162:	f04f 0003 	mov.w	r0, #3
    a166:	df02      	svc	2
	while (rx) {
    a168:	2c00      	cmp	r4, #0
    a16a:	d1da      	bne.n	a122 <ll_rx_mem_release+0x12>
	*node_rx = rx;
    a16c:	2300      	movs	r3, #0
    a16e:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
    a172:	20ff      	movs	r0, #255	; 0xff
}
    a174:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
    a178:	f7ff bcba 	b.w	9af0 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    a17c:	7f2b      	ldrb	r3, [r5, #28]
    a17e:	2b3c      	cmp	r3, #60	; 0x3c
    a180:	d062      	beq.n	a248 <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
    a182:	b1db      	cbz	r3, a1bc <ll_rx_mem_release+0xac>
    a184:	493e      	ldr	r1, [pc, #248]	; (a280 <ll_rx_mem_release+0x170>)
    a186:	f240 532b 	movw	r3, #1323	; 0x52b
    a18a:	463a      	mov	r2, r7
    a18c:	4630      	mov	r0, r6
    a18e:	f00d ffeb 	bl	18168 <printk>
    a192:	4040      	eors	r0, r0
    a194:	f380 8811 	msr	BASEPRI, r0
    a198:	f04f 0003 	mov.w	r0, #3
    a19c:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    a19e:	792b      	ldrb	r3, [r5, #4]
    a1a0:	b963      	cbnz	r3, a1bc <ll_rx_mem_release+0xac>
    a1a2:	4938      	ldr	r1, [pc, #224]	; (a284 <ll_rx_mem_release+0x174>)
    a1a4:	f240 537d 	movw	r3, #1405	; 0x57d
    a1a8:	463a      	mov	r2, r7
    a1aa:	4630      	mov	r0, r6
    a1ac:	f00d ffdc 	bl	18168 <printk>
    a1b0:	4040      	eors	r0, r0
    a1b2:	f380 8811 	msr	BASEPRI, r0
    a1b6:	f04f 0003 	mov.w	r0, #3
    a1ba:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    a1bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; a288 <ll_rx_mem_release+0x178>
    a1c0:	f89a 3000 	ldrb.w	r3, [sl]
    a1c4:	2b04      	cmp	r3, #4
    a1c6:	d82f      	bhi.n	a228 <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
    a1c8:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    a1ca:	4930      	ldr	r1, [pc, #192]	; (a28c <ll_rx_mem_release+0x17c>)
	mem_link_rx.quota_pdu += delta;
    a1cc:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
    a1d0:	4628      	mov	r0, r5
    a1d2:	f7fc fd0b 	bl	6bec <mem_release>
	while (rx) {
    a1d6:	2c00      	cmp	r4, #0
    a1d8:	d1a3      	bne.n	a122 <ll_rx_mem_release+0x12>
    a1da:	e7c7      	b.n	a16c <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
    a1dc:	88e8      	ldrh	r0, [r5, #6]
    a1de:	2800      	cmp	r0, #0
    a1e0:	d1c2      	bne.n	a168 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
    a1e2:	f002 f86f 	bl	c2c4 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
    a1e6:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
    a1e8:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
    a1ea:	b163      	cbz	r3, a206 <ll_rx_mem_release+0xf6>
    a1ec:	4928      	ldr	r1, [pc, #160]	; (a290 <ll_rx_mem_release+0x180>)
    a1ee:	f240 53e6 	movw	r3, #1510	; 0x5e6
    a1f2:	463a      	mov	r2, r7
    a1f4:	4630      	mov	r0, r6
    a1f6:	f00d ffb7 	bl	18168 <printk>
    a1fa:	4040      	eors	r0, r0
    a1fc:	f380 8811 	msr	BASEPRI, r0
    a200:	f04f 0003 	mov.w	r0, #3
    a204:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
    a206:	f105 0168 	add.w	r1, r5, #104	; 0x68
    a20a:	f105 0064 	add.w	r0, r5, #100	; 0x64
    a20e:	f7fc fd2d 	bl	6c6c <memq_deinit>
				LL_ASSERT(link);
    a212:	4682      	mov	sl, r0
    a214:	b300      	cbz	r0, a258 <ll_rx_mem_release+0x148>
				conn->lll.link_tx_free = link;
    a216:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
    a21a:	4628      	mov	r0, r5
    a21c:	f002 f844 	bl	c2a8 <ll_conn_release>
	while (rx) {
    a220:	2c00      	cmp	r4, #0
    a222:	f47f af7e 	bne.w	a122 <ll_rx_mem_release+0x12>
    a226:	e7a1      	b.n	a16c <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    a228:	491a      	ldr	r1, [pc, #104]	; (a294 <ll_rx_mem_release+0x184>)
    a22a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    a22e:	463a      	mov	r2, r7
    a230:	4630      	mov	r0, r6
    a232:	f00d ff99 	bl	18168 <printk>
    a236:	4040      	eors	r0, r0
    a238:	f380 8811 	msr	BASEPRI, r0
    a23c:	f04f 0003 	mov.w	r0, #3
    a240:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    a242:	f89a 3000 	ldrb.w	r3, [sl]
    a246:	e7bf      	b.n	a1c8 <ll_rx_mem_release+0xb8>
				mem_release(rx_free, &mem_pdu_rx.free);
    a248:	4910      	ldr	r1, [pc, #64]	; (a28c <ll_rx_mem_release+0x17c>)
    a24a:	4628      	mov	r0, r5
    a24c:	f7fc fcce 	bl	6bec <mem_release>
	while (rx) {
    a250:	2c00      	cmp	r4, #0
    a252:	f47f af66 	bne.w	a122 <ll_rx_mem_release+0x12>
    a256:	e789      	b.n	a16c <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
    a258:	490f      	ldr	r1, [pc, #60]	; (a298 <ll_rx_mem_release+0x188>)
    a25a:	f240 53e9 	movw	r3, #1513	; 0x5e9
    a25e:	463a      	mov	r2, r7
    a260:	4630      	mov	r0, r6
    a262:	f00d ff81 	bl	18168 <printk>
    a266:	4040      	eors	r0, r0
    a268:	f380 8811 	msr	BASEPRI, r0
    a26c:	f04f 0003 	mov.w	r0, #3
    a270:	df02      	svc	2
    a272:	e7d0      	b.n	a216 <ll_rx_mem_release+0x106>
    a274:	0001cf48 	.word	0x0001cf48
    a278:	0001ce44 	.word	0x0001ce44
    a27c:	0001cde4 	.word	0x0001cde4
    a280:	0001d038 	.word	0x0001d038
    a284:	0001d044 	.word	0x0001d044
    a288:	20001654 	.word	0x20001654
    a28c:	200016a4 	.word	0x200016a4
    a290:	0001d068 	.word	0x0001d068
    a294:	0001cfb8 	.word	0x0001cfb8
    a298:	0001d29c 	.word	0x0001d29c

0000a29c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    a29c:	4801      	ldr	r0, [pc, #4]	; (a2a4 <ll_rx_link_alloc+0x8>)
    a29e:	f7fc bc8b 	b.w	6bb8 <mem_acquire>
    a2a2:	bf00      	nop
    a2a4:	20001658 	.word	0x20001658

0000a2a8 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    a2a8:	4901      	ldr	r1, [pc, #4]	; (a2b0 <ll_rx_link_release+0x8>)
    a2aa:	f7fc bc9f 	b.w	6bec <mem_release>
    a2ae:	bf00      	nop
    a2b0:	20001658 	.word	0x20001658

0000a2b4 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    a2b4:	4801      	ldr	r0, [pc, #4]	; (a2bc <ll_rx_alloc+0x8>)
    a2b6:	f7fc bc7f 	b.w	6bb8 <mem_acquire>
    a2ba:	bf00      	nop
    a2bc:	200016a4 	.word	0x200016a4

0000a2c0 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    a2c0:	4901      	ldr	r1, [pc, #4]	; (a2c8 <ll_rx_release+0x8>)
    a2c2:	f7fc bc93 	b.w	6bec <mem_release>
    a2c6:	bf00      	nop
    a2c8:	200016a4 	.word	0x200016a4

0000a2cc <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    a2cc:	4b02      	ldr	r3, [pc, #8]	; (a2d8 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    a2ce:	4a03      	ldr	r2, [pc, #12]	; (a2dc <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    a2d0:	78db      	ldrb	r3, [r3, #3]
    a2d2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    a2d4:	f7fc bcd4 	b.w	6c80 <memq_enqueue>
    a2d8:	2000046c 	.word	0x2000046c
    a2dc:	20001888 	.word	0x20001888

0000a2e0 <ll_rx_sched>:
	k_sem_give(sem_recv);
    a2e0:	4b01      	ldr	r3, [pc, #4]	; (a2e8 <ll_rx_sched+0x8>)
    a2e2:	6818      	ldr	r0, [r3, #0]
    a2e4:	f00c bfc6 	b.w	17274 <z_impl_k_sem_give>
    a2e8:	2000189c 	.word	0x2000189c

0000a2ec <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    a2ec:	4b0d      	ldr	r3, [pc, #52]	; (a324 <ll_pdu_rx_alloc_peek+0x38>)
    a2ee:	7899      	ldrb	r1, [r3, #2]
    a2f0:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
    a2f2:	4291      	cmp	r1, r2
    a2f4:	d80a      	bhi.n	a30c <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    a2f6:	eba2 0c01 	sub.w	ip, r2, r1
    a2fa:	fa5f fc8c 	uxtb.w	ip, ip
    a2fe:	4560      	cmp	r0, ip
    a300:	d802      	bhi.n	a308 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    a302:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    a304:	7818      	ldrb	r0, [r3, #0]
    a306:	d109      	bne.n	a31c <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
    a308:	2000      	movs	r0, #0
}
    a30a:	4770      	bx	lr
		return count - first + last;
    a30c:	f893 c001 	ldrb.w	ip, [r3, #1]
    a310:	4462      	add	r2, ip
    a312:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    a314:	b2d2      	uxtb	r2, r2
    a316:	4290      	cmp	r0, r2
    a318:	d8f6      	bhi.n	a308 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    a31a:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    a31c:	fb01 3300 	mla	r3, r1, r0, r3
    a320:	6858      	ldr	r0, [r3, #4]
    a322:	4770      	bx	lr
    a324:	20000344 	.word	0x20000344

0000a328 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    a328:	4b09      	ldr	r3, [pc, #36]	; (a350 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    a32a:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    a32c:	78da      	ldrb	r2, [r3, #3]
    a32e:	7818      	ldrb	r0, [r3, #0]
    a330:	f893 c001 	ldrb.w	ip, [r3, #1]
    a334:	428a      	cmp	r2, r1
    a336:	d009      	beq.n	a34c <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    a338:	1c4a      	adds	r2, r1, #1
    a33a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    a33c:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
    a340:	4594      	cmp	ip, r2
    a342:	bf08      	it	eq
    a344:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    a346:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
    a348:	709a      	strb	r2, [r3, #2]

	return mem;
    a34a:	4770      	bx	lr
		return NULL;
    a34c:	2000      	movs	r0, #0
}
    a34e:	4770      	bx	lr
    a350:	20000344 	.word	0x20000344

0000a354 <ll_tx_ack_put>:
{
    a354:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    a356:	4a15      	ldr	r2, [pc, #84]	; (a3ac <ll_tx_ack_put+0x58>)
    a358:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
    a35c:	7854      	ldrb	r4, [r2, #1]
    a35e:	f892 e002 	ldrb.w	lr, [r2, #2]
    a362:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
    a364:	f10c 0301 	add.w	r3, ip, #1
    a368:	b2db      	uxtb	r3, r3
		last = 0U;
    a36a:	429c      	cmp	r4, r3
    a36c:	bf08      	it	eq
    a36e:	2300      	moveq	r3, #0
	if (last == first) {
    a370:	459e      	cmp	lr, r3
    a372:	d00a      	beq.n	a38a <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    a374:	fb1c fc05 	smulbb	ip, ip, r5
    a378:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
    a37c:	f82e 000c 	strh.w	r0, [lr, ip]
    a380:	44f4      	add	ip, lr
	tx->node = node_tx;
    a382:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
    a386:	70d3      	strb	r3, [r2, #3]
}
    a388:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
    a38a:	4a09      	ldr	r2, [pc, #36]	; (a3b0 <ll_tx_ack_put+0x5c>)
    a38c:	4909      	ldr	r1, [pc, #36]	; (a3b4 <ll_tx_ack_put+0x60>)
    a38e:	480a      	ldr	r0, [pc, #40]	; (a3b8 <ll_tx_ack_put+0x64>)
    a390:	f44f 63c9 	mov.w	r3, #1608	; 0x648
    a394:	f00d fee8 	bl	18168 <printk>
    a398:	4040      	eors	r0, r0
    a39a:	f380 8811 	msr	BASEPRI, r0
    a39e:	f04f 0003 	mov.w	r0, #3
    a3a2:	df02      	svc	2
	tx->handle = handle;
    a3a4:	2300      	movs	r3, #0
    a3a6:	801b      	strh	r3, [r3, #0]
    a3a8:	deff      	udf	#255	; 0xff
    a3aa:	bf00      	nop
    a3ac:	2000046c 	.word	0x2000046c
    a3b0:	0001cf48 	.word	0x0001cf48
    a3b4:	0001d290 	.word	0x0001d290
    a3b8:	0001cde4 	.word	0x0001cde4

0000a3bc <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    a3bc:	f030 0302 	bics.w	r3, r0, #2
{
    a3c0:	b510      	push	{r4, lr}
    a3c2:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    a3c4:	d002      	beq.n	a3cc <ull_ticker_status_take+0x10>
    a3c6:	680b      	ldr	r3, [r1, #0]
    a3c8:	2b02      	cmp	r3, #2
    a3ca:	d008      	beq.n	a3de <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    a3cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a3d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a3d4:	4809      	ldr	r0, [pc, #36]	; (a3fc <ull_ticker_status_take+0x40>)
    a3d6:	f00c ff73 	bl	172c0 <z_impl_k_sem_take>
	return *ret_cb;
    a3da:	6820      	ldr	r0, [r4, #0]
}
    a3dc:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    a3de:	4a08      	ldr	r2, [pc, #32]	; (a400 <ull_ticker_status_take+0x44>)
    a3e0:	4908      	ldr	r1, [pc, #32]	; (a404 <ull_ticker_status_take+0x48>)
    a3e2:	4809      	ldr	r0, [pc, #36]	; (a408 <ull_ticker_status_take+0x4c>)
    a3e4:	f240 637c 	movw	r3, #1660	; 0x67c
    a3e8:	f00d febe 	bl	18168 <printk>
    a3ec:	4040      	eors	r0, r0
    a3ee:	f380 8811 	msr	BASEPRI, r0
    a3f2:	f04f 0003 	mov.w	r0, #3
    a3f6:	df02      	svc	2
    a3f8:	e7e8      	b.n	a3cc <ull_ticker_status_take+0x10>
    a3fa:	bf00      	nop
    a3fc:	200018a0 	.word	0x200018a0
    a400:	0001cf48 	.word	0x0001cf48
    a404:	0001d088 	.word	0x0001d088
    a408:	0001cde4 	.word	0x0001cde4

0000a40c <ull_disable_mark>:
	if (!*m) {
    a40c:	4a03      	ldr	r2, [pc, #12]	; (a41c <ull_disable_mark+0x10>)
{
    a40e:	4603      	mov	r3, r0
	if (!*m) {
    a410:	6810      	ldr	r0, [r2, #0]
    a412:	b100      	cbz	r0, a416 <ull_disable_mark+0xa>
}
    a414:	4770      	bx	lr
		*m = param;
    a416:	6013      	str	r3, [r2, #0]
    a418:	4618      	mov	r0, r3
}
    a41a:	4770      	bx	lr
    a41c:	20001620 	.word	0x20001620

0000a420 <ull_disable_unmark>:
	if (*m && *m == param) {
    a420:	4a04      	ldr	r2, [pc, #16]	; (a434 <ull_disable_unmark+0x14>)
    a422:	6813      	ldr	r3, [r2, #0]
    a424:	b123      	cbz	r3, a430 <ull_disable_unmark+0x10>
    a426:	4298      	cmp	r0, r3
		*m = NULL;
    a428:	bf06      	itte	eq
    a42a:	2100      	moveq	r1, #0
    a42c:	6011      	streq	r1, [r2, #0]
	return NULL;
    a42e:	2300      	movne	r3, #0
}
    a430:	4618      	mov	r0, r3
    a432:	4770      	bx	lr
    a434:	20001620 	.word	0x20001620

0000a438 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    a438:	4b01      	ldr	r3, [pc, #4]	; (a440 <ull_disable_mark_get+0x8>)
}
    a43a:	6818      	ldr	r0, [r3, #0]
    a43c:	4770      	bx	lr
    a43e:	bf00      	nop
    a440:	20001620 	.word	0x20001620

0000a444 <ull_update_mark>:
	if (!*m) {
    a444:	4a03      	ldr	r2, [pc, #12]	; (a454 <ull_update_mark+0x10>)
{
    a446:	4603      	mov	r3, r0
	if (!*m) {
    a448:	6810      	ldr	r0, [r2, #0]
    a44a:	b100      	cbz	r0, a44e <ull_update_mark+0xa>
}
    a44c:	4770      	bx	lr
		*m = param;
    a44e:	6013      	str	r3, [r2, #0]
    a450:	4618      	mov	r0, r3
}
    a452:	4770      	bx	lr
    a454:	20001624 	.word	0x20001624

0000a458 <ull_update_unmark>:
	if (*m && *m == param) {
    a458:	4a04      	ldr	r2, [pc, #16]	; (a46c <ull_update_unmark+0x14>)
    a45a:	6813      	ldr	r3, [r2, #0]
    a45c:	b123      	cbz	r3, a468 <ull_update_unmark+0x10>
    a45e:	4298      	cmp	r0, r3
		*m = NULL;
    a460:	bf06      	itte	eq
    a462:	2100      	moveq	r1, #0
    a464:	6011      	streq	r1, [r2, #0]
	return NULL;
    a466:	2300      	movne	r3, #0
}
    a468:	4618      	mov	r0, r3
    a46a:	4770      	bx	lr
    a46c:	20001624 	.word	0x20001624

0000a470 <ull_update_mark_get>:
	return mark_get(mark_update);
    a470:	4b01      	ldr	r3, [pc, #4]	; (a478 <ull_update_mark_get+0x8>)
}
    a472:	6818      	ldr	r0, [r3, #0]
    a474:	4770      	bx	lr
    a476:	bf00      	nop
    a478:	20001624 	.word	0x20001624

0000a47c <ull_disable>:
{
    a47c:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    a47e:	6805      	ldr	r5, [r0, #0]
{
    a480:	b087      	sub	sp, #28
	if (!hdr || !ull_ref_get(hdr)) {
    a482:	b10d      	cbz	r5, a488 <ull_disable+0xc>
    a484:	782b      	ldrb	r3, [r5, #0]
    a486:	b913      	cbnz	r3, a48e <ull_disable+0x12>
		return 0;
    a488:	2000      	movs	r0, #0
}
    a48a:	b007      	add	sp, #28
    a48c:	bd30      	pop	{r4, r5, pc}
	compiler_barrier();
    a48e:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    a490:	2201      	movs	r2, #1
    a492:	2100      	movs	r1, #0
    a494:	4668      	mov	r0, sp
    a496:	f011 fce6 	bl	1be66 <z_impl_k_sem_init>
    a49a:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
    a49c:	4a12      	ldr	r2, [pc, #72]	; (a4e8 <ull_disable+0x6c>)
	hdr->disabled_param = &sem;
    a49e:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    a4a2:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    a4a4:	2b00      	cmp	r3, #0
    a4a6:	d0ef      	beq.n	a488 <ull_disable+0xc>
	mfy.param = lll;
    a4a8:	4b10      	ldr	r3, [pc, #64]	; (a4ec <ull_disable+0x70>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    a4aa:	2200      	movs	r2, #0
    a4ac:	4611      	mov	r1, r2
    a4ae:	2003      	movs	r0, #3
	mfy.param = lll;
    a4b0:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    a4b2:	f7fc fc59 	bl	6d68 <mayfly_enqueue>
	LL_ASSERT(!ret);
    a4b6:	b940      	cbnz	r0, a4ca <ull_disable+0x4e>
	return z_impl_k_sem_take(sem, timeout);
    a4b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a4bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a4c0:	4668      	mov	r0, sp
    a4c2:	f00c fefd 	bl	172c0 <z_impl_k_sem_take>
}
    a4c6:	b007      	add	sp, #28
    a4c8:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    a4ca:	4a09      	ldr	r2, [pc, #36]	; (a4f0 <ull_disable+0x74>)
    a4cc:	4909      	ldr	r1, [pc, #36]	; (a4f4 <ull_disable+0x78>)
    a4ce:	480a      	ldr	r0, [pc, #40]	; (a4f8 <ull_disable+0x7c>)
    a4d0:	f240 63f7 	movw	r3, #1783	; 0x6f7
    a4d4:	f00d fe48 	bl	18168 <printk>
    a4d8:	4040      	eors	r0, r0
    a4da:	f380 8811 	msr	BASEPRI, r0
    a4de:	f04f 0003 	mov.w	r0, #3
    a4e2:	df02      	svc	2
    a4e4:	e7e8      	b.n	a4b8 <ull_disable+0x3c>
    a4e6:	bf00      	nop
    a4e8:	00009919 	.word	0x00009919
    a4ec:	200004d0 	.word	0x200004d0
    a4f0:	0001cf48 	.word	0x0001cf48
    a4f4:	0001d080 	.word	0x0001d080
    a4f8:	0001cde4 	.word	0x0001cde4

0000a4fc <ull_ticker_stop_with_mark>:
{
    a4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    a4fe:	4d1d      	ldr	r5, [pc, #116]	; (a574 <ull_ticker_stop_with_mark+0x78>)
    a500:	682b      	ldr	r3, [r5, #0]
{
    a502:	b085      	sub	sp, #20
    a504:	460c      	mov	r4, r1
    a506:	4616      	mov	r6, r2
	if (!*m) {
    a508:	b323      	cbz	r3, a554 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
    a50a:	4299      	cmp	r1, r3
    a50c:	d112      	bne.n	a534 <ull_ticker_stop_with_mark+0x38>
	ret_cb = TICKER_STATUS_BUSY;
    a50e:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    a510:	af03      	add	r7, sp, #12
    a512:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    a514:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    a516:	2103      	movs	r1, #3
    a518:	4b17      	ldr	r3, [pc, #92]	; (a578 <ull_ticker_stop_with_mark+0x7c>)
    a51a:	9700      	str	r7, [sp, #0]
    a51c:	2000      	movs	r0, #0
    a51e:	f7fd fde3 	bl	80e8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    a522:	4639      	mov	r1, r7
    a524:	f7ff ff4a 	bl	a3bc <ull_ticker_status_take>
	if (ret) {
    a528:	b140      	cbz	r0, a53c <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
    a52a:	682b      	ldr	r3, [r5, #0]
    a52c:	b10b      	cbz	r3, a532 <ull_ticker_stop_with_mark+0x36>
    a52e:	429c      	cmp	r4, r3
    a530:	d012      	beq.n	a558 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
    a532:	b1cc      	cbz	r4, a568 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
    a534:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    a538:	b005      	add	sp, #20
    a53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
    a53c:	4630      	mov	r0, r6
    a53e:	f7ff ff9d 	bl	a47c <ull_disable>
	if (ret) {
    a542:	b9a0      	cbnz	r0, a56e <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
    a544:	682b      	ldr	r3, [r5, #0]
    a546:	b10b      	cbz	r3, a54c <ull_ticker_stop_with_mark+0x50>
    a548:	429c      	cmp	r4, r3
    a54a:	d00b      	beq.n	a564 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
    a54c:	2c00      	cmp	r4, #0
    a54e:	d1f1      	bne.n	a534 <ull_ticker_stop_with_mark+0x38>
}
    a550:	b005      	add	sp, #20
    a552:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    a554:	6029      	str	r1, [r5, #0]
	if (mark != param) {
    a556:	e7da      	b.n	a50e <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    a558:	2300      	movs	r3, #0
		return -EALREADY;
    a55a:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    a55e:	602b      	str	r3, [r5, #0]
}
    a560:	b005      	add	sp, #20
    a562:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    a564:	6028      	str	r0, [r5, #0]
	if (mark != param) {
    a566:	e7e7      	b.n	a538 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
    a568:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a56c:	e7e4      	b.n	a538 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
    a56e:	f06f 000f 	mvn.w	r0, #15
    a572:	e7e1      	b.n	a538 <ull_ticker_stop_with_mark+0x3c>
    a574:	20001620 	.word	0x20001620
    a578:	0000990d 	.word	0x0000990d

0000a57c <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    a57c:	4b0d      	ldr	r3, [pc, #52]	; (a5b4 <ull_pdu_rx_alloc_peek+0x38>)
    a57e:	7899      	ldrb	r1, [r3, #2]
    a580:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
    a582:	4291      	cmp	r1, r2
    a584:	d80a      	bhi.n	a59c <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    a586:	eba2 0c01 	sub.w	ip, r2, r1
    a58a:	fa5f fc8c 	uxtb.w	ip, ip
    a58e:	4560      	cmp	r0, ip
    a590:	d802      	bhi.n	a598 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    a592:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    a594:	7818      	ldrb	r0, [r3, #0]
    a596:	d109      	bne.n	a5ac <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
    a598:	2000      	movs	r0, #0
}
    a59a:	4770      	bx	lr
		return count - first + last;
    a59c:	f893 c001 	ldrb.w	ip, [r3, #1]
    a5a0:	4462      	add	r2, ip
    a5a2:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    a5a4:	b2d2      	uxtb	r2, r2
    a5a6:	4290      	cmp	r0, r2
    a5a8:	d8f6      	bhi.n	a598 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    a5aa:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
    a5ac:	fb01 3300 	mla	r3, r1, r0, r3
    a5b0:	6858      	ldr	r0, [r3, #4]
    a5b2:	4770      	bx	lr
    a5b4:	20000350 	.word	0x20000350

0000a5b8 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    a5b8:	4b09      	ldr	r3, [pc, #36]	; (a5e0 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    a5ba:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    a5bc:	78da      	ldrb	r2, [r3, #3]
    a5be:	7818      	ldrb	r0, [r3, #0]
    a5c0:	f893 c001 	ldrb.w	ip, [r3, #1]
    a5c4:	428a      	cmp	r2, r1
    a5c6:	d009      	beq.n	a5dc <ull_pdu_rx_alloc+0x24>
	_first += 1U;
    a5c8:	1c4a      	adds	r2, r1, #1
    a5ca:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    a5cc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    a5d0:	4594      	cmp	ip, r2
    a5d2:	bf08      	it	eq
    a5d4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    a5d6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    a5d8:	709a      	strb	r2, [r3, #2]
	return mem;
    a5da:	4770      	bx	lr
		return NULL;
    a5dc:	2000      	movs	r0, #0
}
    a5de:	4770      	bx	lr
    a5e0:	20000350 	.word	0x20000350

0000a5e4 <ull_rx_put>:
{
    a5e4:	b538      	push	{r3, r4, r5, lr}
    a5e6:	460c      	mov	r4, r1
    a5e8:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    a5ea:	f005 fb59 	bl	fca0 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    a5ee:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    a5f0:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    a5f2:	4a03      	ldr	r2, [pc, #12]	; (a600 <ull_rx_put+0x1c>)
    a5f4:	4628      	mov	r0, r5
}
    a5f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    a5fa:	f7fc bb41 	b.w	6c80 <memq_enqueue>
    a5fe:	bf00      	nop
    a600:	20001898 	.word	0x20001898

0000a604 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    a604:	2201      	movs	r2, #1
    a606:	4b02      	ldr	r3, [pc, #8]	; (a610 <ull_rx_sched+0xc>)
    a608:	4611      	mov	r1, r2
    a60a:	2000      	movs	r0, #0
    a60c:	f7fc bbac 	b.w	6d68 <mayfly_enqueue>
    a610:	200004c0 	.word	0x200004c0

0000a614 <ull_prepare_enqueue>:
{
    a614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    a618:	4e15      	ldr	r6, [pc, #84]	; (a670 <ull_prepare_enqueue+0x5c>)
{
    a61a:	f89d a020 	ldrb.w	sl, [sp, #32]
    a61e:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    a620:	78f3      	ldrb	r3, [r6, #3]
{
    a622:	460f      	mov	r7, r1
	last = last + 1;
    a624:	1c5d      	adds	r5, r3, #1
    a626:	4611      	mov	r1, r2
	if (last == count) {
    a628:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
    a62a:	b2ed      	uxtb	r5, r5
		last = 0U;
    a62c:	42aa      	cmp	r2, r5
    a62e:	bf08      	it	eq
    a630:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    a632:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
    a634:	42aa      	cmp	r2, r5
{
    a636:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    a638:	7830      	ldrb	r0, [r6, #0]
    a63a:	d015      	beq.n	a668 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    a63c:	1d34      	adds	r4, r6, #4
    a63e:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    a642:	2210      	movs	r2, #16
    a644:	4620      	mov	r0, r4
    a646:	f00e fbdb 	bl	18e00 <memcpy>
	e->is_resume = is_resume;
    a64a:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
    a64c:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    a64e:	f00a 0a01 	and.w	sl, sl, #1
    a652:	f023 0303 	bic.w	r3, r3, #3
    a656:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
    a65a:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    a65e:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    a660:	70f5      	strb	r5, [r6, #3]
}
    a662:	4620      	mov	r0, r4
    a664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
    a668:	2400      	movs	r4, #0
}
    a66a:	4620      	mov	r0, r4
    a66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a670:	20000368 	.word	0x20000368

0000a674 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    a674:	4b05      	ldr	r3, [pc, #20]	; (a68c <ull_prepare_dequeue_get+0x18>)
    a676:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
    a678:	78da      	ldrb	r2, [r3, #3]
    a67a:	7819      	ldrb	r1, [r3, #0]
    a67c:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
    a67e:	bf1a      	itte	ne
    a680:	3304      	addne	r3, #4
    a682:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
    a686:	2000      	moveq	r0, #0
}
    a688:	4770      	bx	lr
    a68a:	bf00      	nop
    a68c:	20000368 	.word	0x20000368

0000a690 <ull_prepare_dequeue_iter>:
{
    a690:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    a692:	4b0d      	ldr	r3, [pc, #52]	; (a6c8 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
    a694:	7802      	ldrb	r2, [r0, #0]
    a696:	7859      	ldrb	r1, [r3, #1]
    a698:	f893 c003 	ldrb.w	ip, [r3, #3]
    a69c:	f893 e000 	ldrb.w	lr, [r3]
    a6a0:	4291      	cmp	r1, r2
    a6a2:	bf9c      	itt	ls
    a6a4:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    a6a6:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    a6a8:	4594      	cmp	ip, r2
    a6aa:	d00a      	beq.n	a6c2 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
    a6ac:	1c53      	adds	r3, r2, #1
    a6ae:	b2db      	uxtb	r3, r3
		i = 0U;
    a6b0:	4299      	cmp	r1, r3
    a6b2:	bf08      	it	eq
    a6b4:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    a6b6:	4905      	ldr	r1, [pc, #20]	; (a6cc <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
    a6b8:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    a6ba:	fb02 100e 	mla	r0, r2, lr, r1
}
    a6be:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    a6c2:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    a6c4:	e7fb      	b.n	a6be <ull_prepare_dequeue_iter+0x2e>
    a6c6:	bf00      	nop
    a6c8:	20000368 	.word	0x20000368
    a6cc:	2000036c 	.word	0x2000036c

0000a6d0 <ull_prepare_dequeue>:
{
    a6d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    a6d4:	4c23      	ldr	r4, [pc, #140]	; (a764 <ull_prepare_dequeue+0x94>)
    a6d6:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
    a6d8:	78e1      	ldrb	r1, [r4, #3]
    a6da:	7823      	ldrb	r3, [r4, #0]
    a6dc:	4291      	cmp	r1, r2
    a6de:	d027      	beq.n	a730 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    a6e0:	1d27      	adds	r7, r4, #4
			mfy.param = next;
    a6e2:	f8df 9084 	ldr.w	r9, [pc, #132]	; a768 <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
    a6e6:	f8df b084 	ldr.w	fp, [pc, #132]	; a76c <ull_prepare_dequeue+0x9c>
    a6ea:	f8df a084 	ldr.w	sl, [pc, #132]	; a770 <ull_prepare_dequeue+0xa0>
    a6ee:	4680      	mov	r8, r0
    a6f0:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
    a6f4:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
    a6f6:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
    a6f8:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    a6fc:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
    a700:	d518      	bpl.n	a734 <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
    a702:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
    a704:	78e1      	ldrb	r1, [r4, #3]
    a706:	7820      	ldrb	r0, [r4, #0]
    a708:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
    a70c:	1c53      	adds	r3, r2, #1
	if (_first == last) {
    a70e:	4291      	cmp	r1, r2
	_first += 1U;
    a710:	b2db      	uxtb	r3, r3
	if (_first == last) {
    a712:	d00d      	beq.n	a730 <ull_prepare_dequeue+0x60>
		_first = 0U;
    a714:	459c      	cmp	ip, r3
    a716:	bf08      	it	eq
    a718:	2300      	moveq	r3, #0
	if (first == last) {
    a71a:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    a71c:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
    a71e:	d007      	beq.n	a730 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    a720:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    a724:	2d00      	cmp	r5, #0
    a726:	d1e5      	bne.n	a6f4 <ull_prepare_dequeue+0x24>
    a728:	b116      	cbz	r6, a730 <ull_prepare_dequeue+0x60>
    a72a:	7f03      	ldrb	r3, [r0, #28]
    a72c:	07db      	lsls	r3, r3, #31
    a72e:	d5e1      	bpl.n	a6f4 <ull_prepare_dequeue+0x24>
}
    a730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    a734:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    a738:	4b0b      	ldr	r3, [pc, #44]	; (a768 <ull_prepare_dequeue+0x98>)
    a73a:	462a      	mov	r2, r5
    a73c:	4629      	mov	r1, r5
    a73e:	4640      	mov	r0, r8
    a740:	f7fc fb12 	bl	6d68 <mayfly_enqueue>
			LL_ASSERT(!ret);
    a744:	2800      	cmp	r0, #0
    a746:	d0dc      	beq.n	a702 <ull_prepare_dequeue+0x32>
    a748:	480a      	ldr	r0, [pc, #40]	; (a774 <ull_prepare_dequeue+0xa4>)
    a74a:	f240 736e 	movw	r3, #1902	; 0x76e
    a74e:	465a      	mov	r2, fp
    a750:	4651      	mov	r1, sl
    a752:	f00d fd09 	bl	18168 <printk>
    a756:	4040      	eors	r0, r0
    a758:	f380 8811 	msr	BASEPRI, r0
    a75c:	f04f 0003 	mov.w	r0, #3
    a760:	df02      	svc	2
    a762:	e7ce      	b.n	a702 <ull_prepare_dequeue+0x32>
    a764:	20000368 	.word	0x20000368
    a768:	20000490 	.word	0x20000490
    a76c:	0001cf48 	.word	0x0001cf48
    a770:	0001d080 	.word	0x0001d080
    a774:	0001cde4 	.word	0x0001cde4

0000a778 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    a778:	4b06      	ldr	r3, [pc, #24]	; (a794 <ull_event_done_extra_get+0x1c>)
    a77a:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    a77c:	78d9      	ldrb	r1, [r3, #3]
    a77e:	7818      	ldrb	r0, [r3, #0]
    a780:	4291      	cmp	r1, r2
    a782:	d005      	beq.n	a790 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    a784:	fb02 3300 	mla	r3, r2, r0, r3
    a788:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    a78a:	b110      	cbz	r0, a792 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    a78c:	3020      	adds	r0, #32
    a78e:	4770      	bx	lr
		return NULL;
    a790:	2000      	movs	r0, #0
}
    a792:	4770      	bx	lr
    a794:	2000032c 	.word	0x2000032c

0000a798 <ull_event_done>:
{
    a798:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    a79a:	4a13      	ldr	r2, [pc, #76]	; (a7e8 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    a79c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    a79e:	78d4      	ldrb	r4, [r2, #3]
    a7a0:	7811      	ldrb	r1, [r2, #0]
    a7a2:	429c      	cmp	r4, r3
{
    a7a4:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
    a7a6:	7850      	ldrb	r0, [r2, #1]
    a7a8:	d01b      	beq.n	a7e2 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    a7aa:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    a7ae:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    a7b0:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    a7b2:	b2db      	uxtb	r3, r3
		_first = 0U;
    a7b4:	4298      	cmp	r0, r3
    a7b6:	bf08      	it	eq
    a7b8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    a7ba:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    a7bc:	b17c      	cbz	r4, a7de <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    a7be:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    a7c0:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    a7c2:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    a7c4:	4a09      	ldr	r2, [pc, #36]	; (a7ec <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    a7c6:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
    a7c8:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
    a7ca:	6025      	str	r5, [r4, #0]
	evdone->param = param;
    a7cc:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
    a7ce:	f7fc fa57 	bl	6c80 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    a7d2:	2201      	movs	r2, #1
    a7d4:	4b06      	ldr	r3, [pc, #24]	; (a7f0 <ull_event_done+0x58>)
    a7d6:	4611      	mov	r1, r2
    a7d8:	4628      	mov	r0, r5
    a7da:	f7fc fac5 	bl	6d68 <mayfly_enqueue>
}
    a7de:	4620      	mov	r0, r4
    a7e0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    a7e2:	2400      	movs	r4, #0
    a7e4:	e7fb      	b.n	a7de <ull_event_done+0x46>
    a7e6:	bf00      	nop
    a7e8:	2000032c 	.word	0x2000032c
    a7ec:	20001890 	.word	0x20001890
    a7f0:	200004b0 	.word	0x200004b0

0000a7f4 <ull_rxfifo_alloc>:
{
    a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7f8:	b083      	sub	sp, #12
    a7fa:	461d      	mov	r5, r3
    a7fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    a7fe:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    a802:	e9cd 0400 	strd	r0, r4, [sp]
    a806:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    a80a:	b33b      	cbz	r3, a85c <ull_rxfifo_alloc+0x68>
    a80c:	1e5c      	subs	r4, r3, #1
    a80e:	f895 b000 	ldrb.w	fp, [r5]
    a812:	4688      	mov	r8, r1
    a814:	4617      	mov	r7, r2
    a816:	b2e4      	uxtb	r4, r4
	last = last + 1;
    a818:	f10b 0301 	add.w	r3, fp, #1
    a81c:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
    a820:	45d8      	cmp	r8, fp
    a822:	bf08      	it	eq
    a824:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
    a828:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
    a82a:	4648      	mov	r0, r9
    a82c:	d016      	beq.n	a85c <ull_rxfifo_alloc+0x68>
    a82e:	f7fc f9c3 	bl	6bb8 <mem_acquire>
    a832:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
    a834:	4650      	mov	r0, sl
		if (!link) {
    a836:	b18e      	cbz	r6, a85c <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
    a838:	f7fc f9be 	bl	6bb8 <mem_acquire>
		if (!rx) {
    a83c:	b188      	cbz	r0, a862 <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
    a83e:	2300      	movs	r3, #0
    a840:	6073      	str	r3, [r6, #4]
		rx->link = link;
    a842:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    a844:	782a      	ldrb	r2, [r5, #0]
    a846:	9b00      	ldr	r3, [sp, #0]
    a848:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    a84c:	9b01      	ldr	r3, [sp, #4]
    a84e:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
    a850:	3c01      	subs	r4, #1
    a852:	b2e4      	uxtb	r4, r4
    a854:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
    a856:	f885 b000 	strb.w	fp, [r5]
    a85a:	d1dd      	bne.n	a818 <ull_rxfifo_alloc+0x24>
}
    a85c:	b003      	add	sp, #12
    a85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
    a862:	4649      	mov	r1, r9
    a864:	4630      	mov	r0, r6
}
    a866:	b003      	add	sp, #12
    a868:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
    a86c:	f7fc b9be 	b.w	6bec <mem_release>

0000a870 <init_reset>:
{
    a870:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
    a872:	4c3f      	ldr	r4, [pc, #252]	; (a970 <init_reset+0x100>)
    a874:	4d3f      	ldr	r5, [pc, #252]	; (a974 <init_reset+0x104>)
    a876:	79a2      	ldrb	r2, [r4, #6]
    a878:	88a1      	ldrh	r1, [r4, #4]
    a87a:	4e3f      	ldr	r6, [pc, #252]	; (a978 <init_reset+0x108>)
    a87c:	2000      	movs	r0, #0
{
    a87e:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
    a880:	4623      	mov	r3, r4
    a882:	8068      	strh	r0, [r5, #2]
    a884:	f104 0008 	add.w	r0, r4, #8
    a888:	f7fc f966 	bl	6b58 <mem_init>
    a88c:	79e3      	ldrb	r3, [r4, #7]
    a88e:	79a2      	ldrb	r2, [r4, #6]
    a890:	1d30      	adds	r0, r6, #4
    a892:	441a      	add	r2, r3
    a894:	2108      	movs	r1, #8
    a896:	4633      	mov	r3, r6
    a898:	f7fc f95e 	bl	6b58 <mem_init>
    a89c:	9602      	str	r6, [sp, #8]
    a89e:	462e      	mov	r6, r5
    a8a0:	79a3      	ldrb	r3, [r4, #6]
    a8a2:	f816 0b04 	ldrb.w	r0, [r6], #4
    a8a6:	78aa      	ldrb	r2, [r5, #2]
    a8a8:	7869      	ldrb	r1, [r5, #1]
    a8aa:	9303      	str	r3, [sp, #12]
    a8ac:	e9cd 6400 	strd	r6, r4, [sp]
    a8b0:	1ceb      	adds	r3, r5, #3
    a8b2:	f7ff ff9f 	bl	a7f4 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    a8b6:	4b31      	ldr	r3, [pc, #196]	; (a97c <init_reset+0x10c>)
    a8b8:	2207      	movs	r2, #7
    a8ba:	1d18      	adds	r0, r3, #4
    a8bc:	2144      	movs	r1, #68	; 0x44
    a8be:	f7fc f94b 	bl	6b58 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    a8c2:	4b2f      	ldr	r3, [pc, #188]	; (a980 <init_reset+0x110>)
    a8c4:	2209      	movs	r2, #9
    a8c6:	1d18      	adds	r0, r3, #4
    a8c8:	2108      	movs	r1, #8
    a8ca:	f7fc f945 	bl	6b58 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    a8ce:	482c      	ldr	r0, [pc, #176]	; (a980 <init_reset+0x110>)
    a8d0:	f7fc f972 	bl	6bb8 <mem_acquire>
	LL_ASSERT(link);
    a8d4:	4604      	mov	r4, r0
    a8d6:	b308      	cbz	r0, a91c <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
    a8d8:	4a2a      	ldr	r2, [pc, #168]	; (a984 <init_reset+0x114>)
    a8da:	4620      	mov	r0, r4
    a8dc:	1f11      	subs	r1, r2, #4
    a8de:	f7fc f9c1 	bl	6c64 <memq_init>
	link = mem_acquire(&mem_link_done.free);
    a8e2:	4825      	ldr	r0, [pc, #148]	; (a978 <init_reset+0x108>)
    a8e4:	f7fc f968 	bl	6bb8 <mem_acquire>
	LL_ASSERT(link);
    a8e8:	4604      	mov	r4, r0
    a8ea:	b328      	cbz	r0, a938 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
    a8ec:	4a26      	ldr	r2, [pc, #152]	; (a988 <init_reset+0x118>)
    a8ee:	4620      	mov	r0, r4
    a8f0:	1f11      	subs	r1, r2, #4
    a8f2:	f7fc f9b7 	bl	6c64 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    a8f6:	4822      	ldr	r0, [pc, #136]	; (a980 <init_reset+0x110>)
    a8f8:	f7fc f95e 	bl	6bb8 <mem_acquire>
	LL_ASSERT(link);
    a8fc:	4604      	mov	r4, r0
    a8fe:	b348      	cbz	r0, a954 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
    a900:	4a22      	ldr	r2, [pc, #136]	; (a98c <init_reset+0x11c>)
    a902:	4620      	mov	r0, r4
    a904:	1f11      	subs	r1, r2, #4
    a906:	f7fc f9ad 	bl	6c64 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    a90a:	4b21      	ldr	r3, [pc, #132]	; (a990 <init_reset+0x120>)
    a90c:	2205      	movs	r2, #5
	rx_alloc(UINT8_MAX);
    a90e:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    a910:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
    a912:	f7ff f8ed 	bl	9af0 <rx_alloc>
}
    a916:	2000      	movs	r0, #0
    a918:	b004      	add	sp, #16
    a91a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    a91c:	4a1d      	ldr	r2, [pc, #116]	; (a994 <init_reset+0x124>)
    a91e:	491e      	ldr	r1, [pc, #120]	; (a998 <init_reset+0x128>)
    a920:	481e      	ldr	r0, [pc, #120]	; (a99c <init_reset+0x12c>)
    a922:	f240 73fa 	movw	r3, #2042	; 0x7fa
    a926:	f00d fc1f 	bl	18168 <printk>
    a92a:	4040      	eors	r0, r0
    a92c:	f380 8811 	msr	BASEPRI, r0
    a930:	f04f 0003 	mov.w	r0, #3
    a934:	df02      	svc	2
    a936:	e7cf      	b.n	a8d8 <init_reset+0x68>
	LL_ASSERT(link);
    a938:	4a16      	ldr	r2, [pc, #88]	; (a994 <init_reset+0x124>)
    a93a:	4917      	ldr	r1, [pc, #92]	; (a998 <init_reset+0x128>)
    a93c:	4817      	ldr	r0, [pc, #92]	; (a99c <init_reset+0x12c>)
    a93e:	f640 0302 	movw	r3, #2050	; 0x802
    a942:	f00d fc11 	bl	18168 <printk>
    a946:	4040      	eors	r0, r0
    a948:	f380 8811 	msr	BASEPRI, r0
    a94c:	f04f 0003 	mov.w	r0, #3
    a950:	df02      	svc	2
    a952:	e7cb      	b.n	a8ec <init_reset+0x7c>
	LL_ASSERT(link);
    a954:	4a0f      	ldr	r2, [pc, #60]	; (a994 <init_reset+0x124>)
    a956:	4910      	ldr	r1, [pc, #64]	; (a998 <init_reset+0x128>)
    a958:	4810      	ldr	r0, [pc, #64]	; (a99c <init_reset+0x12c>)
    a95a:	f640 030a 	movw	r3, #2058	; 0x80a
    a95e:	f00d fc03 	bl	18168 <printk>
    a962:	4040      	eors	r0, r0
    a964:	f380 8811 	msr	BASEPRI, r0
    a968:	f04f 0003 	mov.w	r0, #3
    a96c:	df02      	svc	2
    a96e:	e7c7      	b.n	a900 <init_reset+0x90>
    a970:	20000254 	.word	0x20000254
    a974:	2000032c 	.word	0x2000032c
    a978:	20001628 	.word	0x20001628
    a97c:	200016a4 	.word	0x200016a4
    a980:	20001658 	.word	0x20001658
    a984:	20001898 	.word	0x20001898
    a988:	20001890 	.word	0x20001890
    a98c:	20001888 	.word	0x20001888
    a990:	20001654 	.word	0x20001654
    a994:	0001cf48 	.word	0x0001cf48
    a998:	0001d29c 	.word	0x0001d29c
    a99c:	0001cde4 	.word	0x0001cde4

0000a9a0 <ll_init>:
{
    a9a0:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
    a9a2:	4b2b      	ldr	r3, [pc, #172]	; (aa50 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a9a4:	4d2b      	ldr	r5, [pc, #172]	; (aa54 <ll_init+0xb4>)
	sem_recv = sem_rx;
    a9a6:	6018      	str	r0, [r3, #0]
{
    a9a8:	b087      	sub	sp, #28
	cntr_init();
    a9aa:	f008 fd0b 	bl	133c4 <cntr_init>
	mayfly_init();
    a9ae:	f7fc f989 	bl	6cc4 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a9b2:	4a29      	ldr	r2, [pc, #164]	; (aa58 <ll_init+0xb8>)
    a9b4:	4929      	ldr	r1, [pc, #164]	; (aa5c <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    a9b6:	482a      	ldr	r0, [pc, #168]	; (aa60 <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a9b8:	e9cd 2504 	strd	r2, r5, [sp, #16]
    a9bc:	4a29      	ldr	r2, [pc, #164]	; (aa64 <ll_init+0xc4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    a9be:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a9c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    a9c4:	2402      	movs	r4, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a9c6:	210c      	movs	r1, #12
    a9c8:	e9cd 0100 	strd	r0, r1, [sp]
    a9cc:	4a26      	ldr	r2, [pc, #152]	; (aa68 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    a9ce:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    a9d0:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    a9d2:	7404      	strb	r4, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    a9d4:	7604      	strb	r4, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    a9d6:	4619      	mov	r1, r3
    a9d8:	2000      	movs	r0, #0
    a9da:	f7fd fa49 	bl	7e70 <ticker_init>
	LL_ASSERT(!err);
    a9de:	bb40      	cbnz	r0, aa32 <ll_init+0x92>
	return z_impl_k_sem_init(sem, initial_count, limit);
    a9e0:	2201      	movs	r2, #1
    a9e2:	2100      	movs	r1, #0
    a9e4:	4821      	ldr	r0, [pc, #132]	; (aa6c <ll_init+0xcc>)
    a9e6:	f011 fa3e 	bl	1be66 <z_impl_k_sem_init>
	err = lll_init();
    a9ea:	f006 ff25 	bl	11838 <lll_init>
	if (err) {
    a9ee:	4604      	mov	r4, r0
    a9f0:	b110      	cbz	r0, a9f8 <ll_init+0x58>
}
    a9f2:	4620      	mov	r0, r4
    a9f4:	b007      	add	sp, #28
    a9f6:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
    a9f8:	f7ff ff3a 	bl	a870 <init_reset>
	if (err) {
    a9fc:	4604      	mov	r4, r0
    a9fe:	2800      	cmp	r0, #0
    aa00:	d1f7      	bne.n	a9f2 <ll_init+0x52>
	err = lll_adv_init();
    aa02:	f007 fb6b 	bl	120dc <lll_adv_init>
	if (err) {
    aa06:	4604      	mov	r4, r0
    aa08:	2800      	cmp	r0, #0
    aa0a:	d1f2      	bne.n	a9f2 <ll_init+0x52>
	err = ull_adv_init();
    aa0c:	f000 fcd2 	bl	b3b4 <ull_adv_init>
	if (err) {
    aa10:	4604      	mov	r4, r0
    aa12:	2800      	cmp	r0, #0
    aa14:	d1ed      	bne.n	a9f2 <ll_init+0x52>
	err = lll_conn_init();
    aa16:	f008 f81d 	bl	12a54 <lll_conn_init>
	if (err) {
    aa1a:	4604      	mov	r4, r0
    aa1c:	2800      	cmp	r0, #0
    aa1e:	d1e8      	bne.n	a9f2 <ll_init+0x52>
	err = ull_conn_init();
    aa20:	f001 ff42 	bl	c8a8 <ull_conn_init>
	if (err) {
    aa24:	4604      	mov	r4, r0
    aa26:	2800      	cmp	r0, #0
    aa28:	d1e3      	bne.n	a9f2 <ll_init+0x52>
		ull_filter_reset(true);
    aa2a:	2001      	movs	r0, #1
    aa2c:	f006 f8d2 	bl	10bd4 <ull_filter_reset>
	return  0;
    aa30:	e7df      	b.n	a9f2 <ll_init+0x52>
	LL_ASSERT(!err);
    aa32:	4a0f      	ldr	r2, [pc, #60]	; (aa70 <ll_init+0xd0>)
    aa34:	490f      	ldr	r1, [pc, #60]	; (aa74 <ll_init+0xd4>)
    aa36:	4810      	ldr	r0, [pc, #64]	; (aa78 <ll_init+0xd8>)
    aa38:	f240 230d 	movw	r3, #525	; 0x20d
    aa3c:	f00d fb94 	bl	18168 <printk>
    aa40:	4040      	eors	r0, r0
    aa42:	f380 8811 	msr	BASEPRI, r0
    aa46:	f04f 0003 	mov.w	r0, #3
    aa4a:	df02      	svc	2
    aa4c:	e7c8      	b.n	a9e0 <ll_init+0x40>
    aa4e:	bf00      	nop
    aa50:	2000189c 	.word	0x2000189c
    aa54:	00014059 	.word	0x00014059
    aa58:	00013f09 	.word	0x00013f09
    aa5c:	00013ea5 	.word	0x00013ea5
    aa60:	20001be8 	.word	0x20001be8
    aa64:	20001978 	.word	0x20001978
    aa68:	200018b8 	.word	0x200018b8
    aa6c:	200018a0 	.word	0x200018a0
    aa70:	0001cf48 	.word	0x0001cf48
    aa74:	0001cf84 	.word	0x0001cf84
    aa78:	0001cde4 	.word	0x0001cde4

0000aa7c <ll_reset>:
{
    aa7c:	b510      	push	{r4, lr}
    aa7e:	b086      	sub	sp, #24
	err = ull_adv_reset();
    aa80:	f000 fca8 	bl	b3d4 <ull_adv_reset>
	LL_ASSERT(!err);
    aa84:	bb70      	cbnz	r0, aae4 <ll_reset+0x68>
	err = ull_conn_reset();
    aa86:	f001 ff11 	bl	c8ac <ull_conn_reset>
	LL_ASSERT(!err);
    aa8a:	2800      	cmp	r0, #0
    aa8c:	d13b      	bne.n	ab06 <ll_reset+0x8a>
	MFIFO_INIT(tx_ack);
    aa8e:	4b3a      	ldr	r3, [pc, #232]	; (ab78 <ll_reset+0xfc>)
    aa90:	2400      	movs	r4, #0
    aa92:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    aa94:	4620      	mov	r0, r4
    aa96:	f006 f89d 	bl	10bd4 <ull_filter_reset>
	MFIFO_INIT(prep);
    aa9a:	4938      	ldr	r1, [pc, #224]	; (ab7c <ll_reset+0x100>)
	MFIFO_INIT(pdu_rx_free);
    aa9c:	4a38      	ldr	r2, [pc, #224]	; (ab80 <ll_reset+0x104>)
	MFIFO_INIT(ll_pdu_rx_free);
    aa9e:	4b39      	ldr	r3, [pc, #228]	; (ab84 <ll_reset+0x108>)
	MFIFO_INIT(prep);
    aaa0:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
    aaa2:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    aaa4:	805c      	strh	r4, [r3, #2]
    aaa6:	2201      	movs	r2, #1
    aaa8:	4621      	mov	r1, r4
    aaaa:	4668      	mov	r0, sp
    aaac:	f011 f9db 	bl	1be66 <z_impl_k_sem_init>
		mfy.param = &sem;
    aab0:	4b35      	ldr	r3, [pc, #212]	; (ab88 <ll_reset+0x10c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    aab2:	4622      	mov	r2, r4
    aab4:	4621      	mov	r1, r4
    aab6:	2003      	movs	r0, #3
		mfy.param = &sem;
    aab8:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    aabc:	f7fc f954 	bl	6d68 <mayfly_enqueue>
		LL_ASSERT(!retval);
    aac0:	2800      	cmp	r0, #0
    aac2:	d14b      	bne.n	ab5c <ll_reset+0xe0>
	return z_impl_k_sem_take(sem, timeout);
    aac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aacc:	4668      	mov	r0, sp
    aace:	f00c fbf7 	bl	172c0 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    aad2:	f000 fc99 	bl	b408 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    aad6:	2800      	cmp	r0, #0
    aad8:	d132      	bne.n	ab40 <ll_reset+0xc4>
	err = init_reset();
    aada:	f7ff fec9 	bl	a870 <init_reset>
	LL_ASSERT(!err);
    aade:	bb00      	cbnz	r0, ab22 <ll_reset+0xa6>
}
    aae0:	b006      	add	sp, #24
    aae2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    aae4:	4a29      	ldr	r2, [pc, #164]	; (ab8c <ll_reset+0x110>)
    aae6:	492a      	ldr	r1, [pc, #168]	; (ab90 <ll_reset+0x114>)
    aae8:	482a      	ldr	r0, [pc, #168]	; (ab94 <ll_reset+0x118>)
    aaea:	f240 23ad 	movw	r3, #685	; 0x2ad
    aaee:	f00d fb3b 	bl	18168 <printk>
    aaf2:	4040      	eors	r0, r0
    aaf4:	f380 8811 	msr	BASEPRI, r0
    aaf8:	f04f 0003 	mov.w	r0, #3
    aafc:	df02      	svc	2
	err = ull_conn_reset();
    aafe:	f001 fed5 	bl	c8ac <ull_conn_reset>
	LL_ASSERT(!err);
    ab02:	2800      	cmp	r0, #0
    ab04:	d0c3      	beq.n	aa8e <ll_reset+0x12>
    ab06:	4a21      	ldr	r2, [pc, #132]	; (ab8c <ll_reset+0x110>)
    ab08:	4921      	ldr	r1, [pc, #132]	; (ab90 <ll_reset+0x114>)
    ab0a:	4822      	ldr	r0, [pc, #136]	; (ab94 <ll_reset+0x118>)
    ab0c:	f240 23de 	movw	r3, #734	; 0x2de
    ab10:	f00d fb2a 	bl	18168 <printk>
    ab14:	4040      	eors	r0, r0
    ab16:	f380 8811 	msr	BASEPRI, r0
    ab1a:	f04f 0003 	mov.w	r0, #3
    ab1e:	df02      	svc	2
    ab20:	e7b5      	b.n	aa8e <ll_reset+0x12>
	LL_ASSERT(!err);
    ab22:	4a1a      	ldr	r2, [pc, #104]	; (ab8c <ll_reset+0x110>)
    ab24:	491a      	ldr	r1, [pc, #104]	; (ab90 <ll_reset+0x114>)
    ab26:	481b      	ldr	r0, [pc, #108]	; (ab94 <ll_reset+0x118>)
    ab28:	f240 3327 	movw	r3, #807	; 0x327
    ab2c:	f00d fb1c 	bl	18168 <printk>
    ab30:	4040      	eors	r0, r0
    ab32:	f380 8811 	msr	BASEPRI, r0
    ab36:	f04f 0003 	mov.w	r0, #3
    ab3a:	df02      	svc	2
}
    ab3c:	b006      	add	sp, #24
    ab3e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    ab40:	4a12      	ldr	r2, [pc, #72]	; (ab8c <ll_reset+0x110>)
    ab42:	4913      	ldr	r1, [pc, #76]	; (ab90 <ll_reset+0x114>)
    ab44:	4813      	ldr	r0, [pc, #76]	; (ab94 <ll_reset+0x118>)
    ab46:	f240 331a 	movw	r3, #794	; 0x31a
    ab4a:	f00d fb0d 	bl	18168 <printk>
    ab4e:	4040      	eors	r0, r0
    ab50:	f380 8811 	msr	BASEPRI, r0
    ab54:	f04f 0003 	mov.w	r0, #3
    ab58:	df02      	svc	2
    ab5a:	e7be      	b.n	aada <ll_reset+0x5e>
		LL_ASSERT(!retval);
    ab5c:	4a0b      	ldr	r2, [pc, #44]	; (ab8c <ll_reset+0x110>)
    ab5e:	490e      	ldr	r1, [pc, #56]	; (ab98 <ll_reset+0x11c>)
    ab60:	480c      	ldr	r0, [pc, #48]	; (ab94 <ll_reset+0x118>)
    ab62:	f240 330d 	movw	r3, #781	; 0x30d
    ab66:	f00d faff 	bl	18168 <printk>
    ab6a:	4040      	eors	r0, r0
    ab6c:	f380 8811 	msr	BASEPRI, r0
    ab70:	f04f 0003 	mov.w	r0, #3
    ab74:	df02      	svc	2
    ab76:	e7a5      	b.n	aac4 <ll_reset+0x48>
    ab78:	2000046c 	.word	0x2000046c
    ab7c:	20000368 	.word	0x20000368
    ab80:	20000350 	.word	0x20000350
    ab84:	20000344 	.word	0x20000344
    ab88:	200004a0 	.word	0x200004a0
    ab8c:	0001cf48 	.word	0x0001cf48
    ab90:	0001cf84 	.word	0x0001cf84
    ab94:	0001cde4 	.word	0x0001cde4
    ab98:	0001d0a8 	.word	0x0001d0a8

0000ab9c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    ab9c:	b510      	push	{r4, lr}
    ab9e:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
    aba0:	2400      	movs	r4, #0
    aba2:	e9cd 4400 	strd	r4, r4, [sp]
    aba6:	9b04      	ldr	r3, [sp, #16]
    aba8:	f007 f85a 	bl	11c60 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
    abac:	b002      	add	sp, #8
    abae:	bd10      	pop	{r4, pc}

0000abb0 <lll_resume>:

void lll_resume(void *param)
{
    abb0:	b510      	push	{r4, lr}
    abb2:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    abb4:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    abb6:	691a      	ldr	r2, [r3, #16]
    abb8:	6999      	ldr	r1, [r3, #24]
    abba:	2401      	movs	r4, #1
{
    abbc:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    abbe:	4020      	ands	r0, r4
    abc0:	e9cd 0400 	strd	r0, r4, [sp]
    abc4:	6958      	ldr	r0, [r3, #20]
    abc6:	f007 f84b 	bl	11c60 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    abca:	b108      	cbz	r0, abd0 <lll_resume+0x20>
    abcc:	3077      	adds	r0, #119	; 0x77
    abce:	d101      	bne.n	abd4 <lll_resume+0x24>
}
    abd0:	b002      	add	sp, #8
    abd2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    abd4:	4a06      	ldr	r2, [pc, #24]	; (abf0 <lll_resume+0x40>)
    abd6:	4907      	ldr	r1, [pc, #28]	; (abf4 <lll_resume+0x44>)
    abd8:	4807      	ldr	r0, [pc, #28]	; (abf8 <lll_resume+0x48>)
    abda:	234f      	movs	r3, #79	; 0x4f
    abdc:	f00d fac4 	bl	18168 <printk>
    abe0:	4040      	eors	r0, r0
    abe2:	f380 8811 	msr	BASEPRI, r0
    abe6:	f04f 0003 	mov.w	r0, #3
    abea:	df02      	svc	2
}
    abec:	b002      	add	sp, #8
    abee:	bd10      	pop	{r4, pc}
    abf0:	0001d0b0 	.word	0x0001d0b0
    abf4:	0001d0f4 	.word	0x0001d0f4
    abf8:	0001cde4 	.word	0x0001cde4

0000abfc <ticker_stop_cb>:
{
    abfc:	b530      	push	{r4, r5, lr}
    abfe:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    ac00:	4b19      	ldr	r3, [pc, #100]	; (ac68 <ticker_stop_cb+0x6c>)
{
    ac02:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    ac04:	4a19      	ldr	r2, [pc, #100]	; (ac6c <ticker_stop_cb+0x70>)
    ac06:	1aeb      	subs	r3, r5, r3
    ac08:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    ac0c:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
    ac10:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    ac14:	d119      	bne.n	ac4a <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    ac16:	1ca2      	adds	r2, r4, #2
    ac18:	4b15      	ldr	r3, [pc, #84]	; (ac70 <ticker_stop_cb+0x74>)
    ac1a:	9500      	str	r5, [sp, #0]
    ac1c:	b2d2      	uxtb	r2, r2
    ac1e:	2101      	movs	r1, #1
    ac20:	2000      	movs	r0, #0
    ac22:	f7fd fa61 	bl	80e8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    ac26:	f030 0302 	bics.w	r3, r0, #2
    ac2a:	d00c      	beq.n	ac46 <ticker_stop_cb+0x4a>
    ac2c:	4a11      	ldr	r2, [pc, #68]	; (ac74 <ticker_stop_cb+0x78>)
    ac2e:	4912      	ldr	r1, [pc, #72]	; (ac78 <ticker_stop_cb+0x7c>)
    ac30:	4812      	ldr	r0, [pc, #72]	; (ac7c <ticker_stop_cb+0x80>)
    ac32:	f640 03d2 	movw	r3, #2258	; 0x8d2
    ac36:	f00d fa97 	bl	18168 <printk>
    ac3a:	4040      	eors	r0, r0
    ac3c:	f380 8811 	msr	BASEPRI, r0
    ac40:	f04f 0003 	mov.w	r0, #3
    ac44:	df02      	svc	2
}
    ac46:	b003      	add	sp, #12
    ac48:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    ac4a:	4a0a      	ldr	r2, [pc, #40]	; (ac74 <ticker_stop_cb+0x78>)
    ac4c:	490c      	ldr	r1, [pc, #48]	; (ac80 <ticker_stop_cb+0x84>)
    ac4e:	480b      	ldr	r0, [pc, #44]	; (ac7c <ticker_stop_cb+0x80>)
    ac50:	f640 03cd 	movw	r3, #2253	; 0x8cd
    ac54:	f00d fa88 	bl	18168 <printk>
    ac58:	4040      	eors	r0, r0
    ac5a:	f380 8811 	msr	BASEPRI, r0
    ac5e:	f04f 0003 	mov.w	r0, #3
    ac62:	df02      	svc	2
    ac64:	e7d7      	b.n	ac16 <ticker_stop_cb+0x1a>
    ac66:	bf00      	nop
    ac68:	20001c20 	.word	0x20001c20
    ac6c:	8d3dcb09 	.word	0x8d3dcb09
    ac70:	0000ad19 	.word	0x0000ad19
    ac74:	0001d108 	.word	0x0001d108
    ac78:	0001d154 	.word	0x0001d154
    ac7c:	0001cde4 	.word	0x0001cde4
    ac80:	0001d148 	.word	0x0001d148

0000ac84 <disabled_cb>:
{
    ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    ac86:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    ac88:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
    ac8a:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    ac8c:	b1d7      	cbz	r7, acc4 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
    ac8e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
    ac90:	2300      	movs	r3, #0
    ac92:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    ac94:	b34c      	cbz	r4, acea <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
    ac96:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ac98:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
    ac9a:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ac9c:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    ac9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    aca2:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    aca4:	221e      	movs	r2, #30
    aca6:	f104 001c 	add.w	r0, r4, #28
    acaa:	f00e f8b4 	bl	18e16 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    acae:	233c      	movs	r3, #60	; 0x3c
    acb0:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
    acb2:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    acb4:	4621      	mov	r1, r4
    acb6:	4638      	mov	r0, r7
    acb8:	f7ff fb08 	bl	a2cc <ll_rx_put>
}
    acbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    acc0:	f7ff bb0e 	b.w	a2e0 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    acc4:	4a10      	ldr	r2, [pc, #64]	; (ad08 <disabled_cb+0x84>)
    acc6:	4911      	ldr	r1, [pc, #68]	; (ad0c <disabled_cb+0x88>)
    acc8:	4811      	ldr	r0, [pc, #68]	; (ad10 <disabled_cb+0x8c>)
    acca:	f640 131a 	movw	r3, #2330	; 0x91a
    acce:	f00d fa4b 	bl	18168 <printk>
    acd2:	4040      	eors	r0, r0
    acd4:	f380 8811 	msr	BASEPRI, r0
    acd8:	f04f 0003 	mov.w	r0, #3
    acdc:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    acde:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
    ace0:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
    ace2:	2300      	movs	r3, #0
    ace4:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    ace6:	2c00      	cmp	r4, #0
    ace8:	d1d5      	bne.n	ac96 <disabled_cb+0x12>
    acea:	4a07      	ldr	r2, [pc, #28]	; (ad08 <disabled_cb+0x84>)
    acec:	4909      	ldr	r1, [pc, #36]	; (ad14 <disabled_cb+0x90>)
    acee:	4808      	ldr	r0, [pc, #32]	; (ad10 <disabled_cb+0x8c>)
    acf0:	f640 131e 	movw	r3, #2334	; 0x91e
    acf4:	f00d fa38 	bl	18168 <printk>
    acf8:	4040      	eors	r0, r0
    acfa:	f380 8811 	msr	BASEPRI, r0
    acfe:	f04f 0003 	mov.w	r0, #3
    ad02:	df02      	svc	2
	rx = adv->node_rx_cc_free;
    ad04:	6e6c      	ldr	r4, [r5, #100]	; 0x64
    ad06:	e7c6      	b.n	ac96 <disabled_cb+0x12>
    ad08:	0001d108 	.word	0x0001d108
    ad0c:	0001d170 	.word	0x0001d170
    ad10:	0001cde4 	.word	0x0001cde4
    ad14:	0001d184 	.word	0x0001d184

0000ad18 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    ad18:	b100      	cbz	r0, ad1c <ticker_stop_op_cb+0x4>
    ad1a:	4770      	bx	lr
	mfy.param = param;
    ad1c:	4b0c      	ldr	r3, [pc, #48]	; (ad50 <ticker_stop_op_cb+0x38>)
{
    ad1e:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    ad20:	4602      	mov	r2, r0
    ad22:	460c      	mov	r4, r1
    ad24:	2002      	movs	r0, #2
    ad26:	2101      	movs	r1, #1
	mfy.param = param;
    ad28:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    ad2a:	f7fc f81d 	bl	6d68 <mayfly_enqueue>
	LL_ASSERT(!ret);
    ad2e:	b900      	cbnz	r0, ad32 <ticker_stop_op_cb+0x1a>
}
    ad30:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    ad32:	4a08      	ldr	r2, [pc, #32]	; (ad54 <ticker_stop_op_cb+0x3c>)
    ad34:	4908      	ldr	r1, [pc, #32]	; (ad58 <ticker_stop_op_cb+0x40>)
    ad36:	4809      	ldr	r0, [pc, #36]	; (ad5c <ticker_stop_op_cb+0x44>)
    ad38:	f640 03ee 	movw	r3, #2286	; 0x8ee
    ad3c:	f00d fa14 	bl	18168 <printk>
    ad40:	4040      	eors	r0, r0
    ad42:	f380 8811 	msr	BASEPRI, r0
    ad46:	f04f 0003 	mov.w	r0, #3
    ad4a:	df02      	svc	2
}
    ad4c:	bd10      	pop	{r4, pc}
    ad4e:	bf00      	nop
    ad50:	20000500 	.word	0x20000500
    ad54:	0001d108 	.word	0x0001d108
    ad58:	0001d080 	.word	0x0001d080
    ad5c:	0001cde4 	.word	0x0001cde4

0000ad60 <adv_disable>:
{
    ad60:	b538      	push	{r3, r4, r5, lr}
    ad62:	4604      	mov	r4, r0
    ad64:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    ad68:	b353      	cbz	r3, adc0 <adv_disable+0x60>
		mfy.param = &adv->lll;
    ad6a:	4d17      	ldr	r5, [pc, #92]	; (adc8 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    ad6c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
    ad6e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    ad70:	b16b      	cbz	r3, ad8e <adv_disable+0x2e>
    ad72:	4a16      	ldr	r2, [pc, #88]	; (adcc <adv_disable+0x6c>)
    ad74:	4916      	ldr	r1, [pc, #88]	; (add0 <adv_disable+0x70>)
    ad76:	4817      	ldr	r0, [pc, #92]	; (add4 <adv_disable+0x74>)
    ad78:	f640 1303 	movw	r3, #2307	; 0x903
    ad7c:	f00d f9f4 	bl	18168 <printk>
    ad80:	4040      	eors	r0, r0
    ad82:	f380 8811 	msr	BASEPRI, r0
    ad86:	f04f 0003 	mov.w	r0, #3
    ad8a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    ad8c:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    ad8e:	4912      	ldr	r1, [pc, #72]	; (add8 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ad90:	4b0d      	ldr	r3, [pc, #52]	; (adc8 <adv_disable+0x68>)
    ad92:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    ad94:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ad98:	4611      	mov	r1, r2
    ad9a:	2001      	movs	r0, #1
    ad9c:	f7fb ffe4 	bl	6d68 <mayfly_enqueue>
		LL_ASSERT(!ret);
    ada0:	b900      	cbnz	r0, ada4 <adv_disable+0x44>
}
    ada2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    ada4:	4a09      	ldr	r2, [pc, #36]	; (adcc <adv_disable+0x6c>)
    ada6:	490d      	ldr	r1, [pc, #52]	; (addc <adv_disable+0x7c>)
    ada8:	480a      	ldr	r0, [pc, #40]	; (add4 <adv_disable+0x74>)
    adaa:	f640 130a 	movw	r3, #2314	; 0x90a
    adae:	f00d f9db 	bl	18168 <printk>
    adb2:	4040      	eors	r0, r0
    adb4:	f380 8811 	msr	BASEPRI, r0
    adb8:	f04f 0003 	mov.w	r0, #3
    adbc:	df02      	svc	2
}
    adbe:	bd38      	pop	{r3, r4, r5, pc}
    adc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
    adc4:	f7ff bf5e 	b.w	ac84 <disabled_cb>
    adc8:	200004f0 	.word	0x200004f0
    adcc:	0001d108 	.word	0x0001d108
    add0:	0001d19c 	.word	0x0001d19c
    add4:	0001cde4 	.word	0x0001cde4
    add8:	0000ac85 	.word	0x0000ac85
    addc:	0001d080 	.word	0x0001d080

0000ade0 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    ade0:	b900      	cbnz	r0, ade4 <ticker_update_op_cb+0x4>
    ade2:	4770      	bx	lr
{
    ade4:	b510      	push	{r4, lr}
    ade6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    ade8:	f7ff fb26 	bl	a438 <ull_disable_mark_get>
    adec:	4284      	cmp	r4, r0
    adee:	d00c      	beq.n	ae0a <ticker_update_op_cb+0x2a>
    adf0:	4a06      	ldr	r2, [pc, #24]	; (ae0c <ticker_update_op_cb+0x2c>)
    adf2:	4907      	ldr	r1, [pc, #28]	; (ae10 <ticker_update_op_cb+0x30>)
    adf4:	4807      	ldr	r0, [pc, #28]	; (ae14 <ticker_update_op_cb+0x34>)
    adf6:	f640 03bf 	movw	r3, #2239	; 0x8bf
    adfa:	f00d f9b5 	bl	18168 <printk>
    adfe:	4040      	eors	r0, r0
    ae00:	f380 8811 	msr	BASEPRI, r0
    ae04:	f04f 0003 	mov.w	r0, #3
    ae08:	df02      	svc	2
}
    ae0a:	bd10      	pop	{r4, pc}
    ae0c:	0001d108 	.word	0x0001d108
    ae10:	0001d1b0 	.word	0x0001d1b0
    ae14:	0001cde4 	.word	0x0001cde4

0000ae18 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
    ae18:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    ae1a:	4b13      	ldr	r3, [pc, #76]	; (ae68 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    ae1c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    ae1e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    ae22:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
    ae26:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    ae2a:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
    ae2e:	f022 0202 	bic.w	r2, r2, #2
    ae32:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    ae34:	f042 020e 	orr.w	r2, r2, #14
    ae38:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
    ae3a:	2006      	movs	r0, #6
	pdu->type = pdu_type;
    ae3c:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    ae3e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    ae42:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    ae46:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    ae4a:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
    ae4e:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
    ae50:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    ae52:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
    ae56:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    ae5a:	2204      	movs	r2, #4
    ae5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
    ae5e:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
    ae60:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
    ae62:	f85d fb04 	ldr.w	pc, [sp], #4
    ae66:	bf00      	nop
    ae68:	20001c20 	.word	0x20001c20

0000ae6c <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    ae6c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    ae6e:	4c1b      	ldr	r4, [pc, #108]	; (aedc <conn_release.constprop.0+0x70>)
    ae70:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
    ae72:	6dab      	ldr	r3, [r5, #88]	; 0x58
    ae74:	b163      	cbz	r3, ae90 <conn_release.constprop.0+0x24>
    ae76:	4a1a      	ldr	r2, [pc, #104]	; (aee0 <conn_release.constprop.0+0x74>)
    ae78:	491a      	ldr	r1, [pc, #104]	; (aee4 <conn_release.constprop.0+0x78>)
    ae7a:	481b      	ldr	r0, [pc, #108]	; (aee8 <conn_release.constprop.0+0x7c>)
    ae7c:	f640 1348 	movw	r3, #2376	; 0x948
    ae80:	f00d f972 	bl	18168 <printk>
    ae84:	4040      	eors	r0, r0
    ae86:	f380 8811 	msr	BASEPRI, r0
    ae8a:	f04f 0003 	mov.w	r0, #3
    ae8e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    ae90:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    ae94:	f105 0048 	add.w	r0, r5, #72	; 0x48
    ae98:	f7fb fee8 	bl	6c6c <memq_deinit>
	LL_ASSERT(link);
    ae9c:	4606      	mov	r6, r0
    ae9e:	b170      	cbz	r0, aebe <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    aea0:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    aea2:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
    aea4:	f001 fa00 	bl	c2a8 <ll_conn_release>
	adv->lll.conn = NULL;
    aea8:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    aeaa:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
    aeac:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
    aeae:	f7ff fa07 	bl	a2c0 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    aeb2:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
    aeb4:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
    aeb6:	f7ff f9f7 	bl	a2a8 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    aeba:	6625      	str	r5, [r4, #96]	; 0x60
}
    aebc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    aebe:	4a08      	ldr	r2, [pc, #32]	; (aee0 <conn_release.constprop.0+0x74>)
    aec0:	490a      	ldr	r1, [pc, #40]	; (aeec <conn_release.constprop.0+0x80>)
    aec2:	4809      	ldr	r0, [pc, #36]	; (aee8 <conn_release.constprop.0+0x7c>)
    aec4:	f640 134a 	movw	r3, #2378	; 0x94a
    aec8:	f00d f94e 	bl	18168 <printk>
    aecc:	4040      	eors	r0, r0
    aece:	f380 8811 	msr	BASEPRI, r0
    aed2:	f04f 0003 	mov.w	r0, #3
    aed6:	df02      	svc	2
    aed8:	e7e2      	b.n	aea0 <conn_release.constprop.0+0x34>
    aeda:	bf00      	nop
    aedc:	20001c20 	.word	0x20001c20
    aee0:	0001d108 	.word	0x0001d108
    aee4:	0001d1e0 	.word	0x0001d1e0
    aee8:	0001cde4 	.word	0x0001cde4
    aeec:	0001d29c 	.word	0x0001d29c

0000aef0 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
    aef0:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
    aef2:	4c4a      	ldr	r4, [pc, #296]	; (b01c <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
    aef4:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
    aef6:	4620      	mov	r0, r4
    aef8:	f7ff fa88 	bl	a40c <ull_disable_mark>
	LL_ASSERT(mark == adv);
    aefc:	4284      	cmp	r4, r0
    aefe:	d00c      	beq.n	af1a <disable.part.0+0x2a>
    af00:	4a47      	ldr	r2, [pc, #284]	; (b020 <disable.part.0+0x130>)
    af02:	4948      	ldr	r1, [pc, #288]	; (b024 <disable.part.0+0x134>)
    af04:	4848      	ldr	r0, [pc, #288]	; (b028 <disable.part.0+0x138>)
    af06:	f640 13fe 	movw	r3, #2558	; 0x9fe
    af0a:	f00d f92d 	bl	18168 <printk>
    af0e:	4040      	eors	r0, r0
    af10:	f380 8811 	msr	BASEPRI, r0
    af14:	f04f 0003 	mov.w	r0, #3
    af18:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    af1a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    af1e:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    af20:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    af22:	d50d      	bpl.n	af40 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
    af24:	2102      	movs	r1, #2
    af26:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    af28:	4b40      	ldr	r3, [pc, #256]	; (b02c <disable.part.0+0x13c>)
    af2a:	9500      	str	r5, [sp, #0]
    af2c:	2103      	movs	r1, #3
    af2e:	2201      	movs	r2, #1
    af30:	2000      	movs	r0, #0
    af32:	f7fd f8d9 	bl	80e8 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    af36:	4629      	mov	r1, r5
    af38:	f7ff fa40 	bl	a3bc <ull_ticker_status_take>
		if (ret) {
    af3c:	2800      	cmp	r0, #0
    af3e:	d157      	bne.n	aff0 <disable.part.0+0x100>
	ret_cb = TICKER_STATUS_BUSY;
    af40:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    af42:	2103      	movs	r1, #3
    af44:	4b39      	ldr	r3, [pc, #228]	; (b02c <disable.part.0+0x13c>)
    af46:	9500      	str	r5, [sp, #0]
    af48:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    af4a:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    af4c:	f7fd f8cc 	bl	80e8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    af50:	4629      	mov	r1, r5
    af52:	f7ff fa33 	bl	a3bc <ull_ticker_status_take>
	if (ret) {
    af56:	2800      	cmp	r0, #0
    af58:	d135      	bne.n	afc6 <disable.part.0+0xd6>
	ret = ull_disable(&adv->lll);
    af5a:	4835      	ldr	r0, [pc, #212]	; (b030 <disable.part.0+0x140>)
    af5c:	f7ff fa8e 	bl	a47c <ull_disable>
	LL_ASSERT(!ret);
    af60:	b9f0      	cbnz	r0, afa0 <disable.part.0+0xb0>
	mark = ull_disable_unmark(adv);
    af62:	482e      	ldr	r0, [pc, #184]	; (b01c <disable.part.0+0x12c>)
    af64:	f7ff fa5c 	bl	a420 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    af68:	4284      	cmp	r4, r0
    af6a:	d00c      	beq.n	af86 <disable.part.0+0x96>
    af6c:	4a2c      	ldr	r2, [pc, #176]	; (b020 <disable.part.0+0x130>)
    af6e:	492d      	ldr	r1, [pc, #180]	; (b024 <disable.part.0+0x134>)
    af70:	482d      	ldr	r0, [pc, #180]	; (b028 <disable.part.0+0x138>)
    af72:	f44f 6322 	mov.w	r3, #2592	; 0xa20
    af76:	f00d f8f7 	bl	18168 <printk>
    af7a:	4040      	eors	r0, r0
    af7c:	f380 8811 	msr	BASEPRI, r0
    af80:	f04f 0003 	mov.w	r0, #3
    af84:	df02      	svc	2
	if (adv->lll.conn) {
    af86:	6a23      	ldr	r3, [r4, #32]
    af88:	b10b      	cbz	r3, af8e <disable.part.0+0x9e>
		conn_release(adv);
    af8a:	f7ff ff6f 	bl	ae6c <conn_release.constprop.0>
	adv->is_enabled = 0U;
    af8e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	return 0;
    af92:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
    af94:	f36f 0300 	bfc	r3, #0, #1
    af98:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
    af9c:	b005      	add	sp, #20
    af9e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    afa0:	4a1f      	ldr	r2, [pc, #124]	; (b020 <disable.part.0+0x130>)
    afa2:	4924      	ldr	r1, [pc, #144]	; (b034 <disable.part.0+0x144>)
    afa4:	4820      	ldr	r0, [pc, #128]	; (b028 <disable.part.0+0x138>)
    afa6:	f640 231d 	movw	r3, #2589	; 0xa1d
    afaa:	f00d f8dd 	bl	18168 <printk>
    afae:	4040      	eors	r0, r0
    afb0:	f380 8811 	msr	BASEPRI, r0
    afb4:	f04f 0003 	mov.w	r0, #3
    afb8:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    afba:	4818      	ldr	r0, [pc, #96]	; (b01c <disable.part.0+0x12c>)
    afbc:	f7ff fa30 	bl	a420 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    afc0:	4284      	cmp	r4, r0
    afc2:	d1d3      	bne.n	af6c <disable.part.0+0x7c>
    afc4:	e7df      	b.n	af86 <disable.part.0+0x96>
		mark = ull_disable_unmark(adv);
    afc6:	4815      	ldr	r0, [pc, #84]	; (b01c <disable.part.0+0x12c>)
    afc8:	f7ff fa2a 	bl	a420 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    afcc:	4284      	cmp	r4, r0
    afce:	d021      	beq.n	b014 <disable.part.0+0x124>
    afd0:	4a13      	ldr	r2, [pc, #76]	; (b020 <disable.part.0+0x130>)
    afd2:	4914      	ldr	r1, [pc, #80]	; (b024 <disable.part.0+0x134>)
    afd4:	4814      	ldr	r0, [pc, #80]	; (b028 <disable.part.0+0x138>)
    afd6:	f640 2317 	movw	r3, #2583	; 0xa17
    afda:	f00d f8c5 	bl	18168 <printk>
    afde:	4040      	eors	r0, r0
    afe0:	f380 8811 	msr	BASEPRI, r0
    afe4:	f04f 0003 	mov.w	r0, #3
    afe8:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    afea:	200c      	movs	r0, #12
}
    afec:	b005      	add	sp, #20
    afee:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_unmark(adv);
    aff0:	480a      	ldr	r0, [pc, #40]	; (b01c <disable.part.0+0x12c>)
    aff2:	f7ff fa15 	bl	a420 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    aff6:	4284      	cmp	r4, r0
    aff8:	d00c      	beq.n	b014 <disable.part.0+0x124>
    affa:	4a09      	ldr	r2, [pc, #36]	; (b020 <disable.part.0+0x130>)
    affc:	4909      	ldr	r1, [pc, #36]	; (b024 <disable.part.0+0x134>)
    affe:	480a      	ldr	r0, [pc, #40]	; (b028 <disable.part.0+0x138>)
    b000:	f640 2309 	movw	r3, #2569	; 0xa09
    b004:	f00d f8b0 	bl	18168 <printk>
    b008:	4040      	eors	r0, r0
    b00a:	f380 8811 	msr	BASEPRI, r0
    b00e:	f04f 0003 	mov.w	r0, #3
    b012:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
    b014:	200c      	movs	r0, #12
}
    b016:	b005      	add	sp, #20
    b018:	bd30      	pop	{r4, r5, pc}
    b01a:	bf00      	nop
    b01c:	20001c20 	.word	0x20001c20
    b020:	0001d108 	.word	0x0001d108
    b024:	0001d1f4 	.word	0x0001d1f4
    b028:	0001cde4 	.word	0x0001cde4
    b02c:	0000990d 	.word	0x0000990d
    b030:	20001c3c 	.word	0x20001c3c
    b034:	0001d080 	.word	0x0001d080

0000b038 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
    b038:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    b03a:	7804      	ldrb	r4, [r0, #0]
    b03c:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
    b040:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    b042:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    b044:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    b048:	d01f      	beq.n	b08a <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    b04a:	2c01      	cmp	r4, #1
    b04c:	d009      	beq.n	b062 <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    b04e:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
    b050:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
    b052:	b18c      	cbz	r4, b078 <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
    b054:	2c06      	cmp	r4, #6
    b056:	d00f      	beq.n	b078 <adv_time_get.constprop.0.isra.0+0x40>
    b058:	f44f 732a 	mov.w	r3, #680	; 0x2a8
    b05c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
    b060:	e003      	b.n	b06a <adv_time_get.constprop.0.isra.0+0x32>
    b062:	f44f 6387 	mov.w	r3, #1080	; 0x438
    b066:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
    b06a:	fb0c 3302 	mla	r3, ip, r2, r3
    b06e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    b072:	4018      	ands	r0, r3
}
    b074:	bc10      	pop	{r4}
    b076:	4770      	bx	lr
				adv_size += pdu->len;
    b078:	7843      	ldrb	r3, [r0, #1]
    b07a:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
    b07c:	00db      	lsls	r3, r3, #3
    b07e:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    b082:	f503 72b3 	add.w	r2, r3, #358	; 0x166
    b086:	440b      	add	r3, r1
    b088:	e7ef      	b.n	b06a <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
    b08a:	7840      	ldrb	r0, [r0, #1]
}
    b08c:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    b08e:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    b092:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    b096:	3010      	adds	r0, #16
    b098:	005b      	lsls	r3, r3, #1
    b09a:	00c1      	lsls	r1, r0, #3
    b09c:	f503 70c8 	add.w	r0, r3, #400	; 0x190
    b0a0:	fb01 0002 	mla	r0, r1, r2, r0
    b0a4:	b280      	uxth	r0, r0
}
    b0a6:	4770      	bx	lr

0000b0a8 <ticker_cb>:
{
    b0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0ac:	461d      	mov	r5, r3
    b0ae:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    b0b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b0b4:	429d      	cmp	r5, r3
{
    b0b6:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    b0ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    b0bc:	d018      	beq.n	b0f0 <ticker_cb+0x48>
	return ++hdr->ref;
    b0be:	7823      	ldrb	r3, [r4, #0]
    b0c0:	3301      	adds	r3, #1
    b0c2:	b2db      	uxtb	r3, r3
    b0c4:	4607      	mov	r7, r0
    b0c6:	4616      	mov	r6, r2
    b0c8:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
    b0ca:	2b00      	cmp	r3, #0
    b0cc:	d061      	beq.n	b192 <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
    b0ce:	4938      	ldr	r1, [pc, #224]	; (b1b0 <ticker_cb+0x108>)
		mfy.param = &p;
    b0d0:	4b38      	ldr	r3, [pc, #224]	; (b1b4 <ticker_cb+0x10c>)
		p.lazy = lazy;
    b0d2:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
    b0d4:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    b0d8:	2200      	movs	r2, #0
		p.param = lll;
    b0da:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
    b0dc:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
    b0e0:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
    b0e4:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    b0e6:	2001      	movs	r0, #1
    b0e8:	4611      	mov	r1, r2
    b0ea:	f7fb fe3d 	bl	6d68 <mayfly_enqueue>
		LL_ASSERT(!ret);
    b0ee:	b938      	cbnz	r0, b100 <ticker_cb+0x58>
	if (!lll->is_hdcd)
    b0f0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    b0f4:	f010 0501 	ands.w	r5, r0, #1
    b0f8:	d014      	beq.n	b124 <ticker_cb+0x7c>
}
    b0fa:	b00a      	add	sp, #40	; 0x28
    b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    b100:	4a2d      	ldr	r2, [pc, #180]	; (b1b8 <ticker_cb+0x110>)
    b102:	492e      	ldr	r1, [pc, #184]	; (b1bc <ticker_cb+0x114>)
    b104:	482e      	ldr	r0, [pc, #184]	; (b1c0 <ticker_cb+0x118>)
    b106:	f640 0392 	movw	r3, #2194	; 0x892
    b10a:	f00d f82d 	bl	18168 <printk>
    b10e:	4040      	eors	r0, r0
    b110:	f380 8811 	msr	BASEPRI, r0
    b114:	f04f 0003 	mov.w	r0, #3
    b118:	df02      	svc	2
	if (!lll->is_hdcd)
    b11a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    b11e:	f010 0501 	ands.w	r5, r0, #1
    b122:	d1ea      	bne.n	b0fa <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
    b124:	2104      	movs	r1, #4
    b126:	a809      	add	r0, sp, #36	; 0x24
    b128:	f006 fbdc 	bl	118e4 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
    b12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b12e:	4a25      	ldr	r2, [pc, #148]	; (b1c4 <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    b130:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
    b132:	fba2 1203 	umull	r1, r2, r2, r3
    b136:	1a99      	subs	r1, r3, r2
    b138:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    b13c:	0a12      	lsrs	r2, r2, #8
    b13e:	f240 1147 	movw	r1, #327	; 0x147
    b142:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    b146:	4a20      	ldr	r2, [pc, #128]	; (b1c8 <ticker_cb+0x120>)
    b148:	4920      	ldr	r1, [pc, #128]	; (b1cc <ticker_cb+0x124>)
    b14a:	1aa2      	subs	r2, r4, r2
    b14c:	fba1 1202 	umull	r1, r2, r1, r2
    b150:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    b152:	491f      	ldr	r1, [pc, #124]	; (b1d0 <ticker_cb+0x128>)
    b154:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
    b156:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    b158:	e9cd 5104 	strd	r5, r1, [sp, #16]
    b15c:	e9cd 5502 	strd	r5, r5, [sp, #8]
    b160:	e9cd 5500 	strd	r5, r5, [sp]
    b164:	b2d2      	uxtb	r2, r2
    b166:	2101      	movs	r1, #1
    b168:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
    b16a:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    b16c:	f7fc ffa4 	bl	80b8 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b170:	f030 0302 	bics.w	r3, r0, #2
    b174:	d0c1      	beq.n	b0fa <ticker_cb+0x52>
    b176:	4a10      	ldr	r2, [pc, #64]	; (b1b8 <ticker_cb+0x110>)
    b178:	4916      	ldr	r1, [pc, #88]	; (b1d4 <ticker_cb+0x12c>)
    b17a:	4811      	ldr	r0, [pc, #68]	; (b1c0 <ticker_cb+0x118>)
    b17c:	f240 732c 	movw	r3, #1836	; 0x72c
    b180:	f00c fff2 	bl	18168 <printk>
    b184:	4040      	eors	r0, r0
    b186:	f380 8811 	msr	BASEPRI, r0
    b18a:	f04f 0003 	mov.w	r0, #3
    b18e:	df02      	svc	2
}
    b190:	e7b3      	b.n	b0fa <ticker_cb+0x52>
		LL_ASSERT(ref);
    b192:	4a09      	ldr	r2, [pc, #36]	; (b1b8 <ticker_cb+0x110>)
    b194:	4910      	ldr	r1, [pc, #64]	; (b1d8 <ticker_cb+0x130>)
    b196:	480a      	ldr	r0, [pc, #40]	; (b1c0 <ticker_cb+0x118>)
    b198:	f640 0385 	movw	r3, #2181	; 0x885
    b19c:	f00c ffe4 	bl	18168 <printk>
    b1a0:	4040      	eors	r0, r0
    b1a2:	f380 8811 	msr	BASEPRI, r0
    b1a6:	f04f 0003 	mov.w	r0, #3
    b1aa:	df02      	svc	2
    b1ac:	e78f      	b.n	b0ce <ticker_cb+0x26>
    b1ae:	bf00      	nop
    b1b0:	20001ca0 	.word	0x20001ca0
    b1b4:	200004e0 	.word	0x200004e0
    b1b8:	0001d108 	.word	0x0001d108
    b1bc:	0001d080 	.word	0x0001d080
    b1c0:	0001cde4 	.word	0x0001cde4
    b1c4:	90d4f121 	.word	0x90d4f121
    b1c8:	20001c20 	.word	0x20001c20
    b1cc:	8d3dcb09 	.word	0x8d3dcb09
    b1d0:	0000ade1 	.word	0x0000ade1
    b1d4:	0001d154 	.word	0x0001d154
    b1d8:	0001d200 	.word	0x0001d200

0000b1dc <ll_adv_params_set>:
{
    b1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!adv || adv->is_enabled) {
    b1e0:	4c6d      	ldr	r4, [pc, #436]	; (b398 <ll_adv_params_set+0x1bc>)
{
    b1e2:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    b1e4:	4b6d      	ldr	r3, [pc, #436]	; (b39c <ll_adv_params_set+0x1c0>)
	if (!adv || adv->is_enabled) {
    b1e6:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
    b1ea:	4680      	mov	r8, r0
    b1ec:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    b1ee:	e893 0003 	ldmia.w	r3, {r0, r1}
{
    b1f2:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
    b1f4:	f016 0601 	ands.w	r6, r6, #1
{
    b1f8:	4615      	mov	r5, r2
    b1fa:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    b1fe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    b202:	9000      	str	r0, [sp, #0]
    b204:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    b208:	f040 8089 	bne.w	b31e <ll_adv_params_set+0x142>
	adv->lll.chan_map = chan_map;
    b20c:	f00c 0c07 	and.w	ip, ip, #7
    b210:	f002 0203 	and.w	r2, r2, #3
    b214:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    b218:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    b21c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
    b220:	f1be 0f01 	cmp.w	lr, #1
    b224:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    b228:	bf08      	it	eq
    b22a:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
    b22e:	ab02      	add	r3, sp, #8
    b230:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
    b234:	449e      	add	lr, r3
    b236:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
    b23a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
    b23c:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
    b240:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
    b244:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    b248:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
    b24c:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
    b250:	f029 011f 	bic.w	r1, r9, #31
    b254:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
    b258:	ea4c 0c02 	orr.w	ip, ip, r2
    b25c:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    b260:	bf0c      	ite	eq
    b262:	2201      	moveq	r2, #1
    b264:	2200      	movne	r2, #0
    b266:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
    b26a:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
    b26e:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    b272:	f003 030f 	and.w	r3, r3, #15
    b276:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
    b278:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    b27c:	d046      	beq.n	b30c <ll_adv_params_set+0x130>
	adv->own_addr_type = own_addr_type;
    b27e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    b282:	f365 0342 	bfi	r3, r5, #1, #2
    b286:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    b28a:	b2da      	uxtb	r2, r3
    b28c:	075b      	lsls	r3, r3, #29
    b28e:	d508      	bpl.n	b2a2 <ll_adv_params_set+0xc6>
		adv->peer_addr_type = direct_addr_type;
    b290:	f367 02c3 	bfi	r2, r7, #3, #1
    b294:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
    b298:	4841      	ldr	r0, [pc, #260]	; (b3a0 <ll_adv_params_set+0x1c4>)
    b29a:	990a      	ldr	r1, [sp, #40]	; 0x28
    b29c:	2206      	movs	r2, #6
    b29e:	f00d fdaf 	bl	18e00 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    b2a2:	f898 3000 	ldrb.w	r3, [r8]
    b2a6:	f003 020f 	and.w	r2, r3, #15
    b2aa:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
    b2ac:	f005 0a01 	and.w	sl, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    b2b0:	d03a      	beq.n	b328 <ll_adv_params_set+0x14c>
	} else if (pdu->len == 0) {
    b2b2:	f898 2001 	ldrb.w	r2, [r8, #1]
    b2b6:	b1fa      	cbz	r2, b2f8 <ll_adv_params_set+0x11c>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
    b2b8:	f1b9 0f01 	cmp.w	r9, #1
    b2bc:	d04f      	beq.n	b35e <ll_adv_params_set+0x182>
		pdu->tx_addr = own_addr_type & 0x1;
    b2be:	f898 3000 	ldrb.w	r3, [r8]
    b2c2:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
    b2c6:	f36f 13c7 	bfc	r3, #7, #1
    b2ca:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    b2ce:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    b2d2:	61e4      	str	r4, [r4, #28]
    b2d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    b2d8:	01ad      	lsls	r5, r5, #6
    b2da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b2dc:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
    b2e0:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    b2e2:	f045 0504 	orr.w	r5, r5, #4
    b2e6:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
    b2e8:	b912      	cbnz	r2, b2f0 <ll_adv_params_set+0x114>
			pdu->len = BDADDR_SIZE;
    b2ea:	2106      	movs	r1, #6
    b2ec:	7059      	strb	r1, [r3, #1]
	return 0;
    b2ee:	4616      	mov	r6, r2
}
    b2f0:	4630      	mov	r0, r6
    b2f2:	b002      	add	sp, #8
    b2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
    b2f8:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = 0;
    b2fc:	f362 13c7 	bfi	r3, r2, #7, #1
    b300:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
    b304:	2306      	movs	r3, #6
    b306:	f888 3001 	strb.w	r3, [r8, #1]
    b30a:	e7e0      	b.n	b2ce <ll_adv_params_set+0xf2>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
    b30c:	f1b9 0f01 	cmp.w	r9, #1
    b310:	d0b5      	beq.n	b27e <ll_adv_params_set+0xa2>
		if (pdu->len == 0U) {
    b312:	f898 2001 	ldrb.w	r2, [r8, #1]
    b316:	b9b2      	cbnz	r2, b346 <ll_adv_params_set+0x16a>
			adv->ad_data_backup.len = 0U;
    b318:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    b31c:	e7af      	b.n	b27e <ll_adv_params_set+0xa2>
		return BT_HCI_ERR_CMD_DISALLOWED;
    b31e:	260c      	movs	r6, #12
}
    b320:	4630      	mov	r0, r6
    b322:	b002      	add	sp, #8
    b324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = direct_addr_type;
    b328:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
    b32a:	f36a 1386 	bfi	r3, sl, #6, #1
		pdu->rx_addr = direct_addr_type;
    b32e:	f367 13c7 	bfi	r3, r7, #7, #1
    b332:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    b336:	990a      	ldr	r1, [sp, #40]	; 0x28
    b338:	2206      	movs	r2, #6
    b33a:	f00d fd61 	bl	18e00 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    b33e:	230c      	movs	r3, #12
    b340:	f888 3001 	strb.w	r3, [r8, #1]
    b344:	e7c3      	b.n	b2ce <ll_adv_params_set+0xf2>
			LL_ASSERT(pdu->len >=
    b346:	2a05      	cmp	r2, #5
    b348:	d916      	bls.n	b378 <ll_adv_params_set+0x19c>
			adv->ad_data_backup.len = pdu->len -
    b34a:	3a06      	subs	r2, #6
    b34c:	b2d2      	uxtb	r2, r2
    b34e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    b352:	f108 0108 	add.w	r1, r8, #8
    b356:	4813      	ldr	r0, [pc, #76]	; (b3a4 <ll_adv_params_set+0x1c8>)
    b358:	f00d fd52 	bl	18e00 <memcpy>
    b35c:	e78f      	b.n	b27e <ll_adv_params_set+0xa2>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
    b35e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    b362:	4910      	ldr	r1, [pc, #64]	; (b3a4 <ll_adv_params_set+0x1c8>)
    b364:	f108 0008 	add.w	r0, r8, #8
    b368:	f00d fd4a 	bl	18e00 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
    b36c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    b370:	3306      	adds	r3, #6
    b372:	f888 3001 	strb.w	r3, [r8, #1]
    b376:	e7a2      	b.n	b2be <ll_adv_params_set+0xe2>
			LL_ASSERT(pdu->len >=
    b378:	4a0b      	ldr	r2, [pc, #44]	; (b3a8 <ll_adv_params_set+0x1cc>)
    b37a:	490c      	ldr	r1, [pc, #48]	; (b3ac <ll_adv_params_set+0x1d0>)
    b37c:	480c      	ldr	r0, [pc, #48]	; (b3b0 <ll_adv_params_set+0x1d4>)
    b37e:	f44f 73ce 	mov.w	r3, #412	; 0x19c
    b382:	f00c fef1 	bl	18168 <printk>
    b386:	4040      	eors	r0, r0
    b388:	f380 8811 	msr	BASEPRI, r0
    b38c:	f04f 0003 	mov.w	r0, #3
    b390:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
    b392:	f898 2001 	ldrb.w	r2, [r8, #1]
    b396:	e7d8      	b.n	b34a <ll_adv_params_set+0x16e>
    b398:	20001c20 	.word	0x20001c20
    b39c:	0001ca50 	.word	0x0001ca50
    b3a0:	20001c8b 	.word	0x20001c8b
    b3a4:	20001c61 	.word	0x20001c61
    b3a8:	0001d108 	.word	0x0001d108
    b3ac:	0001d204 	.word	0x0001d204
    b3b0:	0001cde4 	.word	0x0001cde4

0000b3b4 <ull_adv_init>:
{
    b3b4:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    b3b6:	4c06      	ldr	r4, [pc, #24]	; (b3d0 <ull_adv_init+0x1c>)
    b3b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b3bc:	f006 febe 	bl	1213c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    b3c0:	f104 0034 	add.w	r0, r4, #52	; 0x34
    b3c4:	f006 feba 	bl	1213c <lll_adv_data_init>
	init_set(&ll_adv[0]);
    b3c8:	f7ff fd26 	bl	ae18 <init_set.constprop.0>
}
    b3cc:	2000      	movs	r0, #0
    b3ce:	bd10      	pop	{r4, pc}
    b3d0:	20001c20 	.word	0x20001c20

0000b3d4 <ull_adv_reset>:
{
    b3d4:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
    b3d6:	4b0b      	ldr	r3, [pc, #44]	; (b404 <ull_adv_reset+0x30>)
    b3d8:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
    b3dc:	07d2      	lsls	r2, r2, #31
    b3de:	d50e      	bpl.n	b3fe <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
    b3e0:	6a1a      	ldr	r2, [r3, #32]
    b3e2:	b152      	cbz	r2, b3fa <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
    b3e4:	f892 1020 	ldrb.w	r1, [r2, #32]
    b3e8:	f041 0102 	orr.w	r1, r1, #2
    b3ec:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    b3f0:	6a1b      	ldr	r3, [r3, #32]
    b3f2:	f893 3020 	ldrb.w	r3, [r3, #32]
    b3f6:	07db      	lsls	r3, r3, #31
    b3f8:	d401      	bmi.n	b3fe <ull_adv_reset+0x2a>
    b3fa:	f7ff fd79 	bl	aef0 <disable.part.0>
}
    b3fe:	2000      	movs	r0, #0
    b400:	bd08      	pop	{r3, pc}
    b402:	bf00      	nop
    b404:	20001c20 	.word	0x20001c20

0000b408 <ull_adv_reset_finalize>:
{
    b408:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
    b40a:	4c0a      	ldr	r4, [pc, #40]	; (b434 <ull_adv_reset_finalize+0x2c>)
    b40c:	f104 0528 	add.w	r5, r4, #40	; 0x28
    b410:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
    b412:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
    b414:	f006 fea2 	bl	1215c <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
    b418:	4620      	mov	r0, r4
    b41a:	f006 fe9f 	bl	1215c <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    b41e:	4628      	mov	r0, r5
    b420:	f006 fe8c 	bl	1213c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    b424:	4620      	mov	r0, r4
    b426:	f006 fe89 	bl	1213c <lll_adv_data_init>
	init_set(&ll_adv[0]);
    b42a:	f7ff fcf5 	bl	ae18 <init_set.constprop.0>
}
    b42e:	2000      	movs	r0, #0
    b430:	bd38      	pop	{r3, r4, r5, pc}
    b432:	bf00      	nop
    b434:	20001c20 	.word	0x20001c20

0000b438 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    b438:	4a03      	ldr	r2, [pc, #12]	; (b448 <ull_adv_handle_get+0x10>)
    b43a:	4b04      	ldr	r3, [pc, #16]	; (b44c <ull_adv_handle_get+0x14>)
    b43c:	1a80      	subs	r0, r0, r2
    b43e:	fba3 3000 	umull	r3, r0, r3, r0
}
    b442:	f3c0 108f 	ubfx	r0, r0, #6, #16
    b446:	4770      	bx	lr
    b448:	20001c20 	.word	0x20001c20
    b44c:	8d3dcb09 	.word	0x8d3dcb09

0000b450 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    b450:	4a04      	ldr	r2, [pc, #16]	; (b464 <ull_adv_lll_handle_get+0x14>)
    b452:	6800      	ldr	r0, [r0, #0]
    b454:	4b04      	ldr	r3, [pc, #16]	; (b468 <ull_adv_lll_handle_get+0x18>)
    b456:	1a80      	subs	r0, r0, r2
    b458:	fba3 3000 	umull	r3, r0, r3, r0
}
    b45c:	f3c0 108f 	ubfx	r0, r0, #6, #16
    b460:	4770      	bx	lr
    b462:	bf00      	nop
    b464:	20001c20 	.word	0x20001c20
    b468:	8d3dcb09 	.word	0x8d3dcb09

0000b46c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    b46c:	b938      	cbnz	r0, b47e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    b46e:	4805      	ldr	r0, [pc, #20]	; (b484 <ull_adv_is_enabled_get+0x18>)
    b470:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
    b474:	f013 0f01 	tst.w	r3, #1
    b478:	bf08      	it	eq
    b47a:	2000      	moveq	r0, #0
    b47c:	4770      	bx	lr
		return NULL;
    b47e:	2000      	movs	r0, #0
}
    b480:	4770      	bx	lr
    b482:	bf00      	nop
    b484:	20001c20 	.word	0x20001c20

0000b488 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    b488:	b928      	cbnz	r0, b496 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    b48a:	4b04      	ldr	r3, [pc, #16]	; (b49c <ull_adv_is_enabled+0x14>)
    b48c:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
    b490:	f000 0001 	and.w	r0, r0, #1
    b494:	4770      	bx	lr
    b496:	2000      	movs	r0, #0
}
    b498:	4770      	bx	lr
    b49a:	bf00      	nop
    b49c:	20001c20 	.word	0x20001c20

0000b4a0 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    b4a0:	b950      	cbnz	r0, b4b8 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
    b4a2:	4b06      	ldr	r3, [pc, #24]	; (b4bc <ull_adv_filter_pol_get+0x1c>)
    b4a4:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
    b4a8:	f010 0001 	ands.w	r0, r0, #1
    b4ac:	d005      	beq.n	b4ba <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
    b4ae:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
    b4b2:	f000 0003 	and.w	r0, r0, #3
    b4b6:	4770      	bx	lr
		return 0;
    b4b8:	2000      	movs	r0, #0
}
    b4ba:	4770      	bx	lr
    b4bc:	20001c20 	.word	0x20001c20

0000b4c0 <ull_adv_pdu_update_addrs>:
{
    b4c0:	b570      	push	{r4, r5, r6, lr}
    b4c2:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
    b4c4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
    b4c8:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
    b4ca:	f005 fd47 	bl	10f5c <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
    b4ce:	b310      	cbz	r0, b516 <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
    b4d0:	7823      	ldrb	r3, [r4, #0]
    b4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b4d6:	4601      	mov	r1, r0
    b4d8:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
    b4da:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
    b4dc:	2206      	movs	r2, #6
    b4de:	4630      	mov	r0, r6
    b4e0:	f00d fc8e 	bl	18e00 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    b4e4:	7823      	ldrb	r3, [r4, #0]
    b4e6:	f003 030f 	and.w	r3, r3, #15
    b4ea:	2b01      	cmp	r3, #1
    b4ec:	d001      	beq.n	b4f2 <ull_adv_pdu_update_addrs+0x32>
}
    b4ee:	4630      	mov	r0, r6
    b4f0:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
    b4f2:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
    b4f6:	f005 fd5f 	bl	10fb8 <ull_filter_tgta_get>
	if (rx_addr) {
    b4fa:	4601      	mov	r1, r0
    b4fc:	2800      	cmp	r0, #0
    b4fe:	d0f6      	beq.n	b4ee <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
    b500:	7823      	ldrb	r3, [r4, #0]
    b502:	4620      	mov	r0, r4
    b504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b508:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
    b50c:	2206      	movs	r2, #6
    b50e:	f00d fc77 	bl	18e00 <memcpy>
}
    b512:	4630      	mov	r0, r6
    b514:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
    b516:	7820      	ldrb	r0, [r4, #0]
    b518:	f3c0 1080 	ubfx	r0, r0, #6, #1
    b51c:	f7fc fe46 	bl	81ac <ll_addr_get>
    b520:	4601      	mov	r1, r0
	if (rpa) {
    b522:	e7da      	b.n	b4da <ull_adv_pdu_update_addrs+0x1a>

0000b524 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
    b524:	291f      	cmp	r1, #31
    b526:	d849      	bhi.n	b5bc <ull_adv_data_set+0x98>
{
    b528:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    b52a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    b52e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    b532:	b083      	sub	sp, #12
    b534:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    b536:	7833      	ldrb	r3, [r6, #0]
    b538:	f003 030f 	and.w	r3, r3, #15
    b53c:	2b01      	cmp	r3, #1
    b53e:	460d      	mov	r5, r1
    b540:	4604      	mov	r4, r0
    b542:	4617      	mov	r7, r2
    b544:	d03c      	beq.n	b5c0 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    b546:	f10d 0107 	add.w	r1, sp, #7
    b54a:	3028      	adds	r0, #40	; 0x28
    b54c:	f006 fe86 	bl	1225c <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
    b550:	4631      	mov	r1, r6
    b552:	4606      	mov	r6, r0
    b554:	f811 2b02 	ldrb.w	r2, [r1], #2
    b558:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
    b55c:	f3c2 0303 	ubfx	r3, r2, #0, #4
    b560:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
    b564:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
    b568:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
    b56c:	f002 0280 	and.w	r2, r2, #128	; 0x80
    b570:	4630      	mov	r0, r6
    b572:	4313      	orrs	r3, r2
    b574:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    b578:	2206      	movs	r2, #6
    b57a:	f00d fc41 	bl	18e00 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    b57e:	462a      	mov	r2, r5
    b580:	4639      	mov	r1, r7
    b582:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
    b586:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    b588:	f00d fc3a 	bl	18e00 <memcpy>
	pdu->len = BDADDR_SIZE + len;
    b58c:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
    b58e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    b592:	07db      	lsls	r3, r3, #31
    b594:	d406      	bmi.n	b5a4 <ull_adv_data_set+0x80>
	pdu->last = idx;
    b596:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b59a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
    b59e:	2000      	movs	r0, #0
}
    b5a0:	b003      	add	sp, #12
    b5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    b5a4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    b5a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
    b5ac:	4631      	mov	r1, r6
    b5ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b5b0:	4620      	mov	r0, r4
    b5b2:	f7f5 fe39 	bl	1228 <ull_adv_time_update>
		if (err) {
    b5b6:	2800      	cmp	r0, #0
    b5b8:	d0ed      	beq.n	b596 <ull_adv_data_set+0x72>
    b5ba:	e7f1      	b.n	b5a0 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
    b5bc:	2012      	movs	r0, #18
}
    b5be:	4770      	bx	lr
		adv->ad_data_backup.len = len;
    b5c0:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
    b5c4:	460a      	mov	r2, r1
    b5c6:	3041      	adds	r0, #65	; 0x41
    b5c8:	4639      	mov	r1, r7
    b5ca:	f00d fc19 	bl	18e00 <memcpy>
		return 0;
    b5ce:	2000      	movs	r0, #0
}
    b5d0:	b003      	add	sp, #12
    b5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b5d4 <ll_adv_data_set>:
{
    b5d4:	4603      	mov	r3, r0
    b5d6:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    b5d8:	4801      	ldr	r0, [pc, #4]	; (b5e0 <ll_adv_data_set+0xc>)
    b5da:	4619      	mov	r1, r3
    b5dc:	f7ff bfa2 	b.w	b524 <ull_adv_data_set>
    b5e0:	20001c20 	.word	0x20001c20

0000b5e4 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
    b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5e6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    b5ea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    b5ee:	b083      	sub	sp, #12
    b5f0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    b5f2:	460e      	mov	r6, r1
    b5f4:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    b5f6:	f10d 0107 	add.w	r1, sp, #7
    b5fa:	3034      	adds	r0, #52	; 0x34
    b5fc:	4617      	mov	r7, r2
    b5fe:	f006 fe2d 	bl	1225c <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
    b602:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    b604:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
    b606:	f811 3b02 	ldrb.w	r3, [r1], #2
    b60a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    b60e:	019b      	lsls	r3, r3, #6
    b610:	f043 0304 	orr.w	r3, r3, #4
    b614:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
    b616:	1db3      	adds	r3, r6, #6
    b618:	7043      	strb	r3, [r0, #1]
    b61a:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    b61c:	3002      	adds	r0, #2
    b61e:	f00d fbef 	bl	18e00 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    b622:	4632      	mov	r2, r6
    b624:	4639      	mov	r1, r7
    b626:	f105 0008 	add.w	r0, r5, #8
    b62a:	f00d fbe9 	bl	18e00 <memcpy>
	if (adv->is_enabled) {
    b62e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    b632:	07db      	lsls	r3, r3, #31
    b634:	d50a      	bpl.n	b64c <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    b636:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    b63a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    b63e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
    b640:	780b      	ldrb	r3, [r1, #0]
    b642:	f013 030f 	ands.w	r3, r3, #15
    b646:	d008      	beq.n	b65a <ull_scan_rsp_set.part.0+0x76>
    b648:	2b06      	cmp	r3, #6
    b64a:	d006      	beq.n	b65a <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
    b64c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b650:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
    b654:	2000      	movs	r0, #0
}
    b656:	b003      	add	sp, #12
    b658:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
    b65a:	462a      	mov	r2, r5
    b65c:	4620      	mov	r0, r4
    b65e:	f7f5 fde3 	bl	1228 <ull_adv_time_update>
			if (err) {
    b662:	2800      	cmp	r0, #0
    b664:	d0f2      	beq.n	b64c <ull_scan_rsp_set.part.0+0x68>
    b666:	e7f6      	b.n	b656 <ull_scan_rsp_set.part.0+0x72>

0000b668 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
    b668:	281f      	cmp	r0, #31
{
    b66a:	4603      	mov	r3, r0
    b66c:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
    b66e:	d803      	bhi.n	b678 <ll_adv_scan_rsp_set+0x10>
    b670:	4802      	ldr	r0, [pc, #8]	; (b67c <ll_adv_scan_rsp_set+0x14>)
    b672:	4619      	mov	r1, r3
    b674:	f7ff bfb6 	b.w	b5e4 <ull_scan_rsp_set.part.0>
}
    b678:	2012      	movs	r0, #18
    b67a:	4770      	bx	lr
    b67c:	20001c20 	.word	0x20001c20

0000b680 <init_reset>:
{
    b680:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    b682:	4b15      	ldr	r3, [pc, #84]	; (b6d8 <init_reset+0x58>)
    b684:	4815      	ldr	r0, [pc, #84]	; (b6dc <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    b686:	4c16      	ldr	r4, [pc, #88]	; (b6e0 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
    b688:	2201      	movs	r2, #1
    b68a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    b68e:	f7fb fa63 	bl	6b58 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
    b692:	4b14      	ldr	r3, [pc, #80]	; (b6e4 <init_reset+0x64>)
    b694:	2203      	movs	r2, #3
    b696:	1d18      	adds	r0, r3, #4
    b698:	2124      	movs	r1, #36	; 0x24
    b69a:	f7fb fa5d 	bl	6b58 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    b69e:	4b12      	ldr	r3, [pc, #72]	; (b6e8 <init_reset+0x68>)
    b6a0:	2204      	movs	r2, #4
    b6a2:	1898      	adds	r0, r3, r2
    b6a4:	212c      	movs	r1, #44	; 0x2c
    b6a6:	f7fb fa57 	bl	6b58 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    b6aa:	4b10      	ldr	r3, [pc, #64]	; (b6ec <init_reset+0x6c>)
    b6ac:	2207      	movs	r2, #7
    b6ae:	1d18      	adds	r0, r3, #4
    b6b0:	2108      	movs	r1, #8
    b6b2:	f7fb fa51 	bl	6b58 <mem_init>
	default_phy_tx |= PHY_2M;
    b6b6:	490e      	ldr	r1, [pc, #56]	; (b6f0 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
    b6b8:	4a0e      	ldr	r2, [pc, #56]	; (b6f4 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    b6ba:	480f      	ldr	r0, [pc, #60]	; (b6f8 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
    b6bc:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    b6be:	f04f 0c1b 	mov.w	ip, #27
    b6c2:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
    b6c6:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    b6c8:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
    b6cc:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    b6ce:	f8a0 c000 	strh.w	ip, [r0]
}
    b6d2:	2000      	movs	r0, #0
    b6d4:	bd10      	pop	{r4, pc}
    b6d6:	bf00      	nop
    b6d8:	20001cb0 	.word	0x20001cb0
    b6dc:	20000ec8 	.word	0x20000ec8
    b6e0:	2000279a 	.word	0x2000279a
    b6e4:	20001cd8 	.word	0x20001cd8
    b6e8:	20001d48 	.word	0x20001d48
    b6ec:	20001dfc 	.word	0x20001dfc
    b6f0:	200027b5 	.word	0x200027b5
    b6f4:	200027b4 	.word	0x200027b4
    b6f8:	2000279c 	.word	0x2000279c

0000b6fc <ctrl_tx_pause_enqueue>:
{
    b6fc:	b538      	push	{r3, r4, r5, lr}
    b6fe:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
    b700:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
{
    b704:	460d      	mov	r5, r1
	if (
    b706:	b11b      	cbz	r3, b710 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    b708:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    b70c:	0789      	lsls	r1, r1, #30
    b70e:	d50c      	bpl.n	b72a <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
    b710:	b340      	cbz	r0, b764 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
    b712:	2a00      	cmp	r2, #0
    b714:	d130      	bne.n	b778 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
    b716:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    b71a:	681a      	ldr	r2, [r3, #0]
    b71c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    b71e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    b720:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    b722:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    b726:	b1d3      	cbz	r3, b75e <ctrl_tx_pause_enqueue+0x62>
}
    b728:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    b72a:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    b72e:	07c9      	lsls	r1, r1, #31
    b730:	d4ee      	bmi.n	b710 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    b732:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    b736:	428b      	cmp	r3, r1
    b738:	d02c      	beq.n	b794 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
    b73a:	2800      	cmp	r0, #0
    b73c:	d036      	beq.n	b7ac <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
    b73e:	2a00      	cmp	r2, #0
    b740:	d0e9      	beq.n	b716 <ctrl_tx_pause_enqueue+0x1a>
    b742:	4a22      	ldr	r2, [pc, #136]	; (b7cc <ctrl_tx_pause_enqueue+0xd0>)
    b744:	4922      	ldr	r1, [pc, #136]	; (b7d0 <ctrl_tx_pause_enqueue+0xd4>)
    b746:	4823      	ldr	r0, [pc, #140]	; (b7d4 <ctrl_tx_pause_enqueue+0xd8>)
    b748:	f640 235f 	movw	r3, #2655	; 0xa5f
    b74c:	f00c fd0c 	bl	18168 <printk>
    b750:	4040      	eors	r0, r0
    b752:	f380 8811 	msr	BASEPRI, r0
    b756:	f04f 0003 	mov.w	r0, #3
    b75a:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
    b75c:	e7db      	b.n	b716 <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
    b75e:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
    b762:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    b764:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    b766:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
    b76a:	2a00      	cmp	r2, #0
    b76c:	d1db      	bne.n	b726 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
    b76e:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
    b772:	2b00      	cmp	r3, #0
    b774:	d1d8      	bne.n	b728 <ctrl_tx_pause_enqueue+0x2c>
    b776:	e7f2      	b.n	b75e <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
    b778:	4a14      	ldr	r2, [pc, #80]	; (b7cc <ctrl_tx_pause_enqueue+0xd0>)
    b77a:	4915      	ldr	r1, [pc, #84]	; (b7d0 <ctrl_tx_pause_enqueue+0xd4>)
    b77c:	4815      	ldr	r0, [pc, #84]	; (b7d4 <ctrl_tx_pause_enqueue+0xd8>)
    b77e:	f640 2371 	movw	r3, #2673	; 0xa71
    b782:	f00c fcf1 	bl	18168 <printk>
    b786:	4040      	eors	r0, r0
    b788:	f380 8811 	msr	BASEPRI, r0
    b78c:	f04f 0003 	mov.w	r0, #3
    b790:	df02      	svc	2
    b792:	e7c0      	b.n	b716 <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
    b794:	6819      	ldr	r1, [r3, #0]
    b796:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    b79a:	2800      	cmp	r0, #0
    b79c:	d1cf      	bne.n	b73e <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
    b79e:	6819      	ldr	r1, [r3, #0]
    b7a0:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    b7a2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    b7a4:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
    b7a6:	2a00      	cmp	r2, #0
    b7a8:	d0e1      	beq.n	b76e <ctrl_tx_pause_enqueue+0x72>
    b7aa:	e7bc      	b.n	b726 <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    b7ac:	7919      	ldrb	r1, [r3, #4]
    b7ae:	f001 0103 	and.w	r1, r1, #3
    b7b2:	2903      	cmp	r1, #3
    b7b4:	d004      	beq.n	b7c0 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    b7b6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
    b7ba:	2a00      	cmp	r2, #0
    b7bc:	d0ab      	beq.n	b716 <ctrl_tx_pause_enqueue+0x1a>
    b7be:	e7c0      	b.n	b742 <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
    b7c0:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    b7c2:	2903      	cmp	r1, #3
    b7c4:	d0eb      	beq.n	b79e <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    b7c6:	290a      	cmp	r1, #10
    b7c8:	d1f5      	bne.n	b7b6 <ctrl_tx_pause_enqueue+0xba>
    b7ca:	e7e8      	b.n	b79e <ctrl_tx_pause_enqueue+0xa2>
    b7cc:	0001d244 	.word	0x0001d244
    b7d0:	0001d284 	.word	0x0001d284
    b7d4:	0001cde4 	.word	0x0001cde4

0000b7d8 <tx_lll_flush>:
{
    b7d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
    b7dc:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    b7e0:	4934      	ldr	r1, [pc, #208]	; (b8b4 <tx_lll_flush+0xdc>)
{
    b7e2:	b083      	sub	sp, #12
    b7e4:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    b7e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    b7ea:	4640      	mov	r0, r8
    b7ec:	f7fb fa1a 	bl	6c24 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    b7f0:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
    b7f4:	4629      	mov	r1, r5
    b7f6:	f007 f93b 	bl	12a70 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    b7fa:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    b7fc:	aa01      	add	r2, sp, #4
    b7fe:	4631      	mov	r1, r6
    b800:	f7fb fa50 	bl	6ca4 <memq_dequeue>
	while (link) {
    b804:	b328      	cbz	r0, b852 <tx_lll_flush+0x7a>
    b806:	4c2c      	ldr	r4, [pc, #176]	; (b8b8 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
    b808:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    b80c:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    b810:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
    b812:	f894 c001 	ldrb.w	ip, [r4, #1]
    b816:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
    b818:	1c53      	adds	r3, r2, #1
    b81a:	b2db      	uxtb	r3, r3
		last = 0U;
    b81c:	459c      	cmp	ip, r3
    b81e:	bf08      	it	eq
    b820:	2300      	moveq	r3, #0
	if (last == first) {
    b822:	4299      	cmp	r1, r3
    b824:	f894 c000 	ldrb.w	ip, [r4]
    b828:	d033      	beq.n	b892 <tx_lll_flush+0xba>
		lll_tx->node = tx;
    b82a:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    b82c:	fb12 f20c 	smulbb	r2, r2, ip
    b830:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
    b834:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    b838:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
    b83a:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    b83e:	6002      	str	r2, [r0, #0]
		tx->next = link;
    b840:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    b842:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
    b844:	70e3      	strb	r3, [r4, #3]
    b846:	aa01      	add	r2, sp, #4
    b848:	4631      	mov	r1, r6
    b84a:	f7fb fa2b 	bl	6ca4 <memq_dequeue>
	while (link) {
    b84e:	2800      	cmp	r0, #0
    b850:	d1de      	bne.n	b810 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    b852:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
    b856:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
    b85a:	b150      	cbz	r0, b872 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
    b85c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    b85e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    b860:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
    b864:	f7fe febe 	bl	a5e4 <ull_rx_put>
	ull_rx_sched();
    b868:	f7fe fecc 	bl	a604 <ull_rx_sched>
}
    b86c:	b003      	add	sp, #12
    b86e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    b872:	4a12      	ldr	r2, [pc, #72]	; (b8bc <tx_lll_flush+0xe4>)
    b874:	4912      	ldr	r1, [pc, #72]	; (b8c0 <tx_lll_flush+0xe8>)
    b876:	4813      	ldr	r0, [pc, #76]	; (b8c4 <tx_lll_flush+0xec>)
    b878:	f640 13cb 	movw	r3, #2507	; 0x9cb
    b87c:	f00c fc74 	bl	18168 <printk>
    b880:	4040      	eors	r0, r0
    b882:	f380 8811 	msr	BASEPRI, r0
    b886:	f04f 0003 	mov.w	r0, #3
    b88a:	df02      	svc	2
	link = rx->hdr.link;
    b88c:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
    b890:	e7e4      	b.n	b85c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
    b892:	4a0a      	ldr	r2, [pc, #40]	; (b8bc <tx_lll_flush+0xe4>)
    b894:	490c      	ldr	r1, [pc, #48]	; (b8c8 <tx_lll_flush+0xf0>)
    b896:	480b      	ldr	r0, [pc, #44]	; (b8c4 <tx_lll_flush+0xec>)
    b898:	f640 13b7 	movw	r3, #2487	; 0x9b7
    b89c:	f00c fc64 	bl	18168 <printk>
    b8a0:	4040      	eors	r0, r0
    b8a2:	f380 8811 	msr	BASEPRI, r0
    b8a6:	f04f 0003 	mov.w	r0, #3
    b8aa:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
    b8ac:	2300      	movs	r3, #0
    b8ae:	801b      	strh	r3, [r3, #0]
    b8b0:	deff      	udf	#255	; 0xff
    b8b2:	bf00      	nop
    b8b4:	20000ec8 	.word	0x20000ec8
    b8b8:	20000510 	.word	0x20000510
    b8bc:	0001d244 	.word	0x0001d244
    b8c0:	0001d294 	.word	0x0001d294
    b8c4:	0001cde4 	.word	0x0001cde4
    b8c8:	0001d28c 	.word	0x0001d28c

0000b8cc <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
    b8cc:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
    b8d0:	f012 0202 	ands.w	r2, r2, #2
    b8d4:	d00a      	beq.n	b8ec <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
    b8d6:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
    b8da:	b1d3      	cbz	r3, b912 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
    b8dc:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
    b8e0:	681a      	ldr	r2, [r3, #0]
    b8e2:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
    b8e4:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
    b8e6:	680b      	ldr	r3, [r1, #0]
    b8e8:	b1d3      	cbz	r3, b920 <ctrl_tx_sec_enqueue+0x54>
    b8ea:	4770      	bx	lr
		if (conn->tx_head) {
    b8ec:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    b8f0:	b1cb      	cbz	r3, b926 <ctrl_tx_sec_enqueue+0x5a>
{
    b8f2:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
    b8f4:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
    b8f8:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
    b8fc:	45e6      	cmp	lr, ip
    b8fe:	d004      	beq.n	b90a <ctrl_tx_sec_enqueue+0x3e>
    b900:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
    b904:	f1bc 0f03 	cmp.w	ip, #3
    b908:	d010      	beq.n	b92c <ctrl_tx_sec_enqueue+0x60>
}
    b90a:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
    b90e:	f7ff bef5 	b.w	b6fc <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
    b912:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    b916:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
    b918:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
    b91c:	2b00      	cmp	r3, #0
    b91e:	d1e4      	bne.n	b8ea <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
    b920:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
    b924:	4770      	bx	lr
	bool pause = false;
    b926:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
    b928:	f7ff bee8 	b.w	b6fc <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    b92c:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
    b930:	f00c 0c03 	and.w	ip, ip, #3
    b934:	f1bc 0f03 	cmp.w	ip, #3
    b938:	d1e7      	bne.n	b90a <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
    b93a:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    b93c:	2a03      	cmp	r2, #3
    b93e:	d005      	beq.n	b94c <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    b940:	f1a2 020a 	sub.w	r2, r2, #10
    b944:	fab2 f282 	clz	r2, r2
    b948:	0952      	lsrs	r2, r2, #5
    b94a:	e7de      	b.n	b90a <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
    b94c:	2201      	movs	r2, #1
    b94e:	e7dc      	b.n	b90a <ctrl_tx_sec_enqueue+0x3e>

0000b950 <ticker_stop_op_cb>:
{
    b950:	b510      	push	{r4, lr}
    b952:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b954:	b9b0      	cbnz	r0, b984 <ticker_stop_op_cb+0x34>
	mfy.param = param;
    b956:	4b12      	ldr	r3, [pc, #72]	; (b9a0 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    b958:	2200      	movs	r2, #0
    b95a:	2101      	movs	r1, #1
    b95c:	2002      	movs	r0, #2
	mfy.param = param;
    b95e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    b960:	f7fb fa02 	bl	6d68 <mayfly_enqueue>
	LL_ASSERT(!ret);
    b964:	b900      	cbnz	r0, b968 <ticker_stop_op_cb+0x18>
}
    b966:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
    b968:	4a0e      	ldr	r2, [pc, #56]	; (b9a4 <ticker_stop_op_cb+0x54>)
    b96a:	490f      	ldr	r1, [pc, #60]	; (b9a8 <ticker_stop_op_cb+0x58>)
    b96c:	480f      	ldr	r0, [pc, #60]	; (b9ac <ticker_stop_op_cb+0x5c>)
    b96e:	f640 1371 	movw	r3, #2417	; 0x971
    b972:	f00c fbf9 	bl	18168 <printk>
    b976:	4040      	eors	r0, r0
    b978:	f380 8811 	msr	BASEPRI, r0
    b97c:	f04f 0003 	mov.w	r0, #3
    b980:	df02      	svc	2
}
    b982:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b984:	4a07      	ldr	r2, [pc, #28]	; (b9a4 <ticker_stop_op_cb+0x54>)
    b986:	490a      	ldr	r1, [pc, #40]	; (b9b0 <ticker_stop_op_cb+0x60>)
    b988:	4808      	ldr	r0, [pc, #32]	; (b9ac <ticker_stop_op_cb+0x5c>)
    b98a:	f640 136b 	movw	r3, #2411	; 0x96b
    b98e:	f00c fbeb 	bl	18168 <printk>
    b992:	4040      	eors	r0, r0
    b994:	f380 8811 	msr	BASEPRI, r0
    b998:	f04f 0003 	mov.w	r0, #3
    b99c:	df02      	svc	2
    b99e:	e7da      	b.n	b956 <ticker_stop_op_cb+0x6>
    b9a0:	20000598 	.word	0x20000598
    b9a4:	0001d244 	.word	0x0001d244
    b9a8:	0001d080 	.word	0x0001d080
    b9ac:	0001cde4 	.word	0x0001cde4
    b9b0:	0001d2a4 	.word	0x0001d2a4

0000b9b4 <disabled_cb>:
{
    b9b4:	b508      	push	{r3, lr}
	mfy.param = param;
    b9b6:	4b0b      	ldr	r3, [pc, #44]	; (b9e4 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    b9b8:	2200      	movs	r2, #0
	mfy.param = param;
    b9ba:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    b9bc:	4611      	mov	r1, r2
    b9be:	2001      	movs	r0, #1
    b9c0:	f7fb f9d2 	bl	6d68 <mayfly_enqueue>
	LL_ASSERT(!ret);
    b9c4:	b900      	cbnz	r0, b9c8 <disabled_cb+0x14>
}
    b9c6:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    b9c8:	4a07      	ldr	r2, [pc, #28]	; (b9e8 <disabled_cb+0x34>)
    b9ca:	4908      	ldr	r1, [pc, #32]	; (b9ec <disabled_cb+0x38>)
    b9cc:	4808      	ldr	r0, [pc, #32]	; (b9f0 <disabled_cb+0x3c>)
    b9ce:	f640 139d 	movw	r3, #2461	; 0x99d
    b9d2:	f00c fbc9 	bl	18168 <printk>
    b9d6:	4040      	eors	r0, r0
    b9d8:	f380 8811 	msr	BASEPRI, r0
    b9dc:	f04f 0003 	mov.w	r0, #3
    b9e0:	df02      	svc	2
}
    b9e2:	bd08      	pop	{r3, pc}
    b9e4:	20000578 	.word	0x20000578
    b9e8:	0001d244 	.word	0x0001d244
    b9ec:	0001d080 	.word	0x0001d080
    b9f0:	0001cde4 	.word	0x0001cde4

0000b9f4 <conn_disable>:
{
    b9f4:	b538      	push	{r3, r4, r5, lr}
    b9f6:	4604      	mov	r4, r0
	return hdr->ref;
    b9f8:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
    b9fc:	b353      	cbz	r3, ba54 <conn_disable+0x60>
		mfy.param = &conn->lll;
    b9fe:	4d17      	ldr	r5, [pc, #92]	; (ba5c <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
    ba00:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
    ba02:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
    ba04:	b16b      	cbz	r3, ba22 <conn_disable+0x2e>
    ba06:	4a16      	ldr	r2, [pc, #88]	; (ba60 <conn_disable+0x6c>)
    ba08:	4916      	ldr	r1, [pc, #88]	; (ba64 <conn_disable+0x70>)
    ba0a:	4817      	ldr	r0, [pc, #92]	; (ba68 <conn_disable+0x74>)
    ba0c:	f640 1386 	movw	r3, #2438	; 0x986
    ba10:	f00c fbaa 	bl	18168 <printk>
    ba14:	4040      	eors	r0, r0
    ba16:	f380 8811 	msr	BASEPRI, r0
    ba1a:	f04f 0003 	mov.w	r0, #3
    ba1e:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    ba20:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    ba22:	4912      	ldr	r1, [pc, #72]	; (ba6c <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ba24:	4b0d      	ldr	r3, [pc, #52]	; (ba5c <conn_disable+0x68>)
    ba26:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    ba28:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    ba2c:	4611      	mov	r1, r2
    ba2e:	2001      	movs	r0, #1
    ba30:	f7fb f99a 	bl	6d68 <mayfly_enqueue>
		LL_ASSERT(!ret);
    ba34:	b900      	cbnz	r0, ba38 <conn_disable+0x44>
}
    ba36:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
    ba38:	4a09      	ldr	r2, [pc, #36]	; (ba60 <conn_disable+0x6c>)
    ba3a:	490d      	ldr	r1, [pc, #52]	; (ba70 <conn_disable+0x7c>)
    ba3c:	480a      	ldr	r0, [pc, #40]	; (ba68 <conn_disable+0x74>)
    ba3e:	f640 138d 	movw	r3, #2445	; 0x98d
    ba42:	f00c fb91 	bl	18168 <printk>
    ba46:	4040      	eors	r0, r0
    ba48:	f380 8811 	msr	BASEPRI, r0
    ba4c:	f04f 0003 	mov.w	r0, #3
    ba50:	df02      	svc	2
}
    ba52:	bd38      	pop	{r3, r4, r5, pc}
    ba54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
    ba58:	f7ff bfac 	b.w	b9b4 <disabled_cb>
    ba5c:	20000588 	.word	0x20000588
    ba60:	0001d244 	.word	0x0001d244
    ba64:	0001d19c 	.word	0x0001d19c
    ba68:	0001cde4 	.word	0x0001cde4
    ba6c:	0000b9b5 	.word	0x0000b9b5
    ba70:	0001d080 	.word	0x0001d080

0000ba74 <conn_setup_adv_scan_disabled_cb>:
{
    ba74:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
    ba76:	6883      	ldr	r3, [r0, #8]
    ba78:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
    ba7a:	7f53      	ldrb	r3, [r2, #29]
    ba7c:	09db      	lsrs	r3, r3, #7
    ba7e:	d10d      	bne.n	ba9c <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
    ba80:	4a09      	ldr	r2, [pc, #36]	; (baa8 <conn_setup_adv_scan_disabled_cb+0x34>)
    ba82:	490a      	ldr	r1, [pc, #40]	; (baac <conn_setup_adv_scan_disabled_cb+0x38>)
    ba84:	480a      	ldr	r0, [pc, #40]	; (bab0 <conn_setup_adv_scan_disabled_cb+0x3c>)
    ba86:	f640 03c6 	movw	r3, #2246	; 0x8c6
    ba8a:	f00c fb6d 	bl	18168 <printk>
    ba8e:	4040      	eors	r0, r0
    ba90:	f380 8811 	msr	BASEPRI, r0
    ba94:	f04f 0003 	mov.w	r0, #3
    ba98:	df02      	svc	2
}
    ba9a:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
    ba9c:	4601      	mov	r1, r0
}
    ba9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
    baa2:	3108      	adds	r1, #8
    baa4:	f7f5 bec8 	b.w	1838 <ull_periph_setup>
    baa8:	0001d244 	.word	0x0001d244
    baac:	0001ce44 	.word	0x0001ce44
    bab0:	0001cde4 	.word	0x0001cde4

0000bab4 <ticker_start_conn_op_cb>:
{
    bab4:	b510      	push	{r4, lr}
    bab6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    bab8:	b990      	cbnz	r0, bae0 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
    baba:	4620      	mov	r0, r4
    babc:	f7fe fccc 	bl	a458 <ull_update_unmark>
	LL_ASSERT(p == param);
    bac0:	4284      	cmp	r4, r0
    bac2:	d00c      	beq.n	bade <ticker_start_conn_op_cb+0x2a>
    bac4:	4a0d      	ldr	r2, [pc, #52]	; (bafc <ticker_start_conn_op_cb+0x48>)
    bac6:	490e      	ldr	r1, [pc, #56]	; (bb00 <ticker_start_conn_op_cb+0x4c>)
    bac8:	480e      	ldr	r0, [pc, #56]	; (bb04 <ticker_start_conn_op_cb+0x50>)
    baca:	f640 03a8 	movw	r3, #2216	; 0x8a8
    bace:	f00c fb4b 	bl	18168 <printk>
    bad2:	4040      	eors	r0, r0
    bad4:	f380 8811 	msr	BASEPRI, r0
    bad8:	f04f 0003 	mov.w	r0, #3
    badc:	df02      	svc	2
}
    bade:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    bae0:	4a06      	ldr	r2, [pc, #24]	; (bafc <ticker_start_conn_op_cb+0x48>)
    bae2:	4909      	ldr	r1, [pc, #36]	; (bb08 <ticker_start_conn_op_cb+0x54>)
    bae4:	4807      	ldr	r0, [pc, #28]	; (bb04 <ticker_start_conn_op_cb+0x50>)
    bae6:	f640 03a5 	movw	r3, #2213	; 0x8a5
    baea:	f00c fb3d 	bl	18168 <printk>
    baee:	4040      	eors	r0, r0
    baf0:	f380 8811 	msr	BASEPRI, r0
    baf4:	f04f 0003 	mov.w	r0, #3
    baf8:	df02      	svc	2
    bafa:	e7de      	b.n	baba <ticker_start_conn_op_cb+0x6>
    bafc:	0001d244 	.word	0x0001d244
    bb00:	0001d2b0 	.word	0x0001d2b0
    bb04:	0001cde4 	.word	0x0001cde4
    bb08:	0001d2a4 	.word	0x0001d2a4

0000bb0c <ticker_stop_conn_op_cb>:
{
    bb0c:	b510      	push	{r4, lr}
    bb0e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    bb10:	b990      	cbnz	r0, bb38 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
    bb12:	4620      	mov	r0, r4
    bb14:	f7fe fc96 	bl	a444 <ull_update_mark>
	LL_ASSERT(p == param);
    bb18:	4284      	cmp	r4, r0
    bb1a:	d00c      	beq.n	bb36 <ticker_stop_conn_op_cb+0x2a>
    bb1c:	4a0d      	ldr	r2, [pc, #52]	; (bb54 <ticker_stop_conn_op_cb+0x48>)
    bb1e:	490e      	ldr	r1, [pc, #56]	; (bb58 <ticker_stop_conn_op_cb+0x4c>)
    bb20:	480e      	ldr	r0, [pc, #56]	; (bb5c <ticker_stop_conn_op_cb+0x50>)
    bb22:	f640 039e 	movw	r3, #2206	; 0x89e
    bb26:	f00c fb1f 	bl	18168 <printk>
    bb2a:	4040      	eors	r0, r0
    bb2c:	f380 8811 	msr	BASEPRI, r0
    bb30:	f04f 0003 	mov.w	r0, #3
    bb34:	df02      	svc	2
}
    bb36:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    bb38:	4a06      	ldr	r2, [pc, #24]	; (bb54 <ticker_stop_conn_op_cb+0x48>)
    bb3a:	4909      	ldr	r1, [pc, #36]	; (bb60 <ticker_stop_conn_op_cb+0x54>)
    bb3c:	4807      	ldr	r0, [pc, #28]	; (bb5c <ticker_stop_conn_op_cb+0x50>)
    bb3e:	f640 039b 	movw	r3, #2203	; 0x89b
    bb42:	f00c fb11 	bl	18168 <printk>
    bb46:	4040      	eors	r0, r0
    bb48:	f380 8811 	msr	BASEPRI, r0
    bb4c:	f04f 0003 	mov.w	r0, #3
    bb50:	df02      	svc	2
    bb52:	e7de      	b.n	bb12 <ticker_stop_conn_op_cb+0x6>
    bb54:	0001d244 	.word	0x0001d244
    bb58:	0001d2b0 	.word	0x0001d2b0
    bb5c:	0001cde4 	.word	0x0001cde4
    bb60:	0001d2a4 	.word	0x0001d2a4

0000bb64 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    bb64:	b900      	cbnz	r0, bb68 <ticker_update_conn_op_cb+0x4>
    bb66:	4770      	bx	lr
{
    bb68:	b510      	push	{r4, lr}
    bb6a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    bb6c:	f7fe fc80 	bl	a470 <ull_update_mark_get>
    bb70:	4284      	cmp	r4, r0
    bb72:	d010      	beq.n	bb96 <ticker_update_conn_op_cb+0x32>
    bb74:	f7fe fc60 	bl	a438 <ull_disable_mark_get>
    bb78:	4284      	cmp	r4, r0
    bb7a:	d00c      	beq.n	bb96 <ticker_update_conn_op_cb+0x32>
    bb7c:	4a06      	ldr	r2, [pc, #24]	; (bb98 <ticker_update_conn_op_cb+0x34>)
    bb7e:	4907      	ldr	r1, [pc, #28]	; (bb9c <ticker_update_conn_op_cb+0x38>)
    bb80:	4807      	ldr	r0, [pc, #28]	; (bba0 <ticker_update_conn_op_cb+0x3c>)
    bb82:	f640 0392 	movw	r3, #2194	; 0x892
    bb86:	f00c faef 	bl	18168 <printk>
    bb8a:	4040      	eors	r0, r0
    bb8c:	f380 8811 	msr	BASEPRI, r0
    bb90:	f04f 0003 	mov.w	r0, #3
    bb94:	df02      	svc	2
}
    bb96:	bd10      	pop	{r4, pc}
    bb98:	0001d244 	.word	0x0001d244
    bb9c:	0001d2bc 	.word	0x0001d2bc
    bba0:	0001cde4 	.word	0x0001cde4

0000bba4 <tx_ull_dequeue>:
{
    bba4:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    bba6:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
{
    bbaa:	4603      	mov	r3, r0
    bbac:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    bbae:	b164      	cbz	r4, bbca <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
    bbb0:	4294      	cmp	r4, r2
    bbb2:	d021      	beq.n	bbf8 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    bbb4:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
    bbb8:	428a      	cmp	r2, r1
    bbba:	d00b      	beq.n	bbd4 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
    bbbc:	6811      	ldr	r1, [r2, #0]
    bbbe:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
    bbc2:	2200      	movs	r2, #0
}
    bbc4:	bc10      	pop	{r4}
		tx->next = NULL;
    bbc6:	6002      	str	r2, [r0, #0]
}
    bbc8:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    bbca:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
    bbce:	4291      	cmp	r1, r2
    bbd0:	d104      	bne.n	bbdc <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
    bbd2:	b18a      	cbz	r2, bbf8 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
    bbd4:	6809      	ldr	r1, [r1, #0]
    bbd6:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
    bbda:	e7ef      	b.n	bbbc <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    bbdc:	7911      	ldrb	r1, [r2, #4]
    bbde:	f001 0103 	and.w	r1, r1, #3
    bbe2:	2903      	cmp	r1, #3
    bbe4:	d013      	beq.n	bc0e <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
    bbe6:	6812      	ldr	r2, [r2, #0]
    bbe8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
    bbec:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    bbee:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
    bbf2:	bc10      	pop	{r4}
		tx->next = tx;
    bbf4:	6000      	str	r0, [r0, #0]
}
    bbf6:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    bbf8:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
    bbfc:	6812      	ldr	r2, [r2, #0]
    bbfe:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    bc02:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
    bc04:	bf18      	it	ne
    bc06:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    bc0a:	d1f2      	bne.n	bbf2 <tx_ull_dequeue+0x4e>
    bc0c:	e7ee      	b.n	bbec <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
    bc0e:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    bc10:	2903      	cmp	r1, #3
    bc12:	d0d3      	beq.n	bbbc <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    bc14:	290a      	cmp	r1, #10
    bc16:	d1e6      	bne.n	bbe6 <tx_ull_dequeue+0x42>
    bc18:	e7d0      	b.n	bbbc <tx_ull_dequeue+0x18>
    bc1a:	bf00      	nop

0000bc1c <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
    bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc1e:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
    bc20:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
    bc24:	0787      	lsls	r7, r0, #30
{
    bc26:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
    bc28:	d433      	bmi.n	bc92 <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    bc2a:	482e      	ldr	r0, [pc, #184]	; (bce4 <reject_ext_ind_send+0xc8>)
    bc2c:	4617      	mov	r7, r2
    bc2e:	461e      	mov	r6, r3
    bc30:	f7fa ffc2 	bl	6bb8 <mem_acquire>
	if (!tx) {
    bc34:	2800      	cmp	r0, #0
    bc36:	d038      	beq.n	bcaa <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
    bc38:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    bc3c:	f043 0302 	orr.w	r3, r3, #2
    bc40:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    bc44:	2303      	movs	r3, #3
    bc46:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bc48:	2211      	movs	r2, #17
	    conn->tx_head &&
    bc4a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bc4e:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc50:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
    bc52:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    bc56:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc58:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    bc5c:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bc5e:	7102      	strb	r2, [r0, #4]
	if (
    bc60:	b1db      	cbz	r3, bc9a <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
    bc62:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    bc66:	0796      	lsls	r6, r2, #30
    bc68:	d417      	bmi.n	bc9a <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
    bc6a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    bc6e:	07d2      	lsls	r2, r2, #31
    bc70:	d413      	bmi.n	bc9a <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
    bc72:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    bc76:	4293      	cmp	r3, r2
    bc78:	d022      	beq.n	bcc0 <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
    bc7a:	b1c9      	cbz	r1, bcb0 <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
    bc7c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    bc80:	681a      	ldr	r2, [r3, #0]
    bc82:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    bc84:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    bc86:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    bc88:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    bc8c:	b90b      	cbnz	r3, bc92 <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
    bc8e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    bc92:	2301      	movs	r3, #1
    bc94:	712b      	strb	r3, [r5, #4]
		*err = 0U;
    bc96:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
    bc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
    bc9a:	2900      	cmp	r1, #0
    bc9c:	d1ee      	bne.n	bc7c <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
    bc9e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    bca0:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    bca4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    bca8:	e7f0      	b.n	bc8c <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
    bcaa:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    bcae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    bcb0:	791a      	ldrb	r2, [r3, #4]
    bcb2:	f002 0203 	and.w	r2, r2, #3
    bcb6:	2a03      	cmp	r2, #3
    bcb8:	d00e      	beq.n	bcd8 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    bcba:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    bcbe:	e7df      	b.n	bc80 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
    bcc0:	681a      	ldr	r2, [r3, #0]
    bcc2:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    bcc6:	2900      	cmp	r1, #0
    bcc8:	d1d8      	bne.n	bc7c <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
    bcca:	681a      	ldr	r2, [r3, #0]
    bccc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    bcce:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    bcd0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    bcd2:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    bcd6:	e7d9      	b.n	bc8c <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
    bcd8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    bcda:	2a03      	cmp	r2, #3
    bcdc:	d0f5      	beq.n	bcca <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    bcde:	2a0a      	cmp	r2, #10
    bce0:	d1eb      	bne.n	bcba <reject_ext_ind_send+0x9e>
    bce2:	e7f2      	b.n	bcca <reject_ext_ind_send+0xae>
    bce4:	20001d48 	.word	0x20001d48

0000bce8 <event_len_prep>:
{
    bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
    bcea:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    bcee:	f003 0207 	and.w	r2, r3, #7
{
    bcf2:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
    bcf4:	2a06      	cmp	r2, #6
    bcf6:	f200 80d4 	bhi.w	bea2 <event_len_prep+0x1ba>
    bcfa:	e8df f002 	tbb	[pc, r2]
    bcfe:	4704      	.short	0x4704
    bd00:	48484747 	.word	0x48484747
    bd04:	47          	.byte	0x47
    bd05:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    bd06:	486e      	ldr	r0, [pc, #440]	; (bec0 <event_len_prep+0x1d8>)
    bd08:	f7fa ff56 	bl	6bb8 <mem_acquire>
		if (!tx) {
    bd0c:	2800      	cmp	r0, #0
    bd0e:	d03d      	beq.n	bd8c <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    bd10:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    bd14:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
    bd18:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    bd1c:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    bd20:	2301      	movs	r3, #1
    bd22:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
    bd26:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    bd2a:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    bd2e:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    bd30:	72c3      	strb	r3, [r0, #11]
    bd32:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    bd34:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
    bd36:	2309      	movs	r3, #9
    bd38:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    bd3a:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    bd3c:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    bd3e:	2214      	movs	r2, #20
	    conn->tx_head &&
    bd40:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    bd44:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    bd46:	2100      	movs	r1, #0
    bd48:	221b      	movs	r2, #27
    bd4a:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
    bd4c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    bd50:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bd52:	7902      	ldrb	r2, [r0, #4]
    bd54:	f042 0203 	orr.w	r2, r2, #3
    bd58:	7102      	strb	r2, [r0, #4]
	if (
    bd5a:	b13b      	cbz	r3, bd6c <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
    bd5c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    bd60:	0795      	lsls	r5, r2, #30
    bd62:	d403      	bmi.n	bd6c <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
    bd64:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    bd68:	07d2      	lsls	r2, r2, #31
    bd6a:	d573      	bpl.n	be54 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
    bd6c:	2900      	cmp	r1, #0
    bd6e:	d07f      	beq.n	be70 <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
    bd70:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    bd74:	681a      	ldr	r2, [r3, #0]
    bd76:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    bd78:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    bd7a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    bd7c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    bd80:	2b00      	cmp	r3, #0
    bd82:	d056      	beq.n	be32 <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
    bd84:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bd88:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
    bd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    bd8e:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    bd92:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
    bd96:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
    bd9a:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
    bd9e:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    bda2:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    bda6:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    bda8:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    bdac:	d024      	beq.n	bdf8 <event_len_prep+0x110>
			conn->llcp_length.state =
    bdae:	2206      	movs	r2, #6
    bdb0:	f362 0302 	bfi	r3, r2, #0, #3
    bdb4:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
    bdb8:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    bdbc:	b335      	cbz	r5, be0c <event_len_prep+0x124>
    bdbe:	6828      	ldr	r0, [r5, #0]
    bdc0:	b320      	cbz	r0, be0c <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    bdc2:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    bdc4:	6842      	ldr	r2, [r0, #4]
    bdc6:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    bdca:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
    bdce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    bdd0:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
    bdd2:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
    bdd4:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
    bdd6:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    bdd8:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    bdda:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    bddc:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    bdde:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    bde2:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    bde4:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    bde6:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    bde8:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    bdea:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
    bdec:	f7fe fa6e 	bl	a2cc <ll_rx_put>
}
    bdf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
    bdf4:	f7fe ba74 	b.w	a2e0 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
    bdf8:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
    bdfc:	b9e2      	cbnz	r2, be38 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
    bdfe:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
    be02:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
    be06:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
    be0a:	e7d5      	b.n	bdb8 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
    be0c:	4a2d      	ldr	r2, [pc, #180]	; (bec4 <event_len_prep+0x1dc>)
    be0e:	492e      	ldr	r1, [pc, #184]	; (bec8 <event_len_prep+0x1e0>)
    be10:	482e      	ldr	r0, [pc, #184]	; (becc <event_len_prep+0x1e4>)
    be12:	f241 03b1 	movw	r3, #4273	; 0x10b1
    be16:	f00c f9a7 	bl	18168 <printk>
    be1a:	4040      	eors	r0, r0
    be1c:	f380 8811 	msr	BASEPRI, r0
    be20:	f04f 0003 	mov.w	r0, #3
    be24:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    be26:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    be28:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    be2c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    be30:	e7c7      	b.n	bdc2 <event_len_prep+0xda>
		conn->tx_data_last = tx;
    be32:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    be36:	e7a5      	b.n	bd84 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
    be38:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
    be3c:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    be3e:	f362 0302 	bfi	r3, r2, #0, #3
    be42:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
    be46:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
    be4a:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
    be4e:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    be52:	e7b1      	b.n	bdb8 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
    be54:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    be58:	4293      	cmp	r3, r2
    be5a:	d00f      	beq.n	be7c <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
    be5c:	2900      	cmp	r1, #0
    be5e:	d187      	bne.n	bd70 <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    be60:	791a      	ldrb	r2, [r3, #4]
    be62:	f002 0203 	and.w	r2, r2, #3
    be66:	2a03      	cmp	r2, #3
    be68:	d015      	beq.n	be96 <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    be6a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    be6e:	e781      	b.n	bd74 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
    be70:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    be72:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    be76:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    be7a:	e781      	b.n	bd80 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
    be7c:	681a      	ldr	r2, [r3, #0]
    be7e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    be82:	2900      	cmp	r1, #0
    be84:	f47f af74 	bne.w	bd70 <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
    be88:	681a      	ldr	r2, [r3, #0]
    be8a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    be8c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    be8e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    be90:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    be94:	e774      	b.n	bd80 <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
    be96:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    be98:	2a03      	cmp	r2, #3
    be9a:	d0f5      	beq.n	be88 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    be9c:	2a0a      	cmp	r2, #10
    be9e:	d1e4      	bne.n	be6a <event_len_prep+0x182>
    bea0:	e7f2      	b.n	be88 <event_len_prep+0x1a0>
		LL_ASSERT(0);
    bea2:	4a08      	ldr	r2, [pc, #32]	; (bec4 <event_len_prep+0x1dc>)
    bea4:	490a      	ldr	r1, [pc, #40]	; (bed0 <event_len_prep+0x1e8>)
    bea6:	4809      	ldr	r0, [pc, #36]	; (becc <event_len_prep+0x1e4>)
    bea8:	f241 03db 	movw	r3, #4315	; 0x10db
    beac:	f00c f95c 	bl	18168 <printk>
    beb0:	4040      	eors	r0, r0
    beb2:	f380 8811 	msr	BASEPRI, r0
    beb6:	f04f 0003 	mov.w	r0, #3
    beba:	df02      	svc	2
}
    bebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bebe:	bf00      	nop
    bec0:	20001d48 	.word	0x20001d48
    bec4:	0001d244 	.word	0x0001d244
    bec8:	0001d310 	.word	0x0001d310
    becc:	0001cde4 	.word	0x0001cde4
    bed0:	0001ce44 	.word	0x0001ce44

0000bed4 <event_phy_upd_ind_prep>:
{
    bed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
    bed8:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
    bedc:	f013 0601 	ands.w	r6, r3, #1
{
    bee0:	4604      	mov	r4, r0
    bee2:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
    bee4:	f040 8092 	bne.w	c00c <event_phy_upd_ind_prep+0x138>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    bee8:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
    beec:	1a69      	subs	r1, r5, r1
    beee:	0409      	lsls	r1, r1, #16
    bef0:	f100 8093 	bmi.w	c01a <event_phy_upd_ind_prep+0x146>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    bef4:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
    bef8:	2900      	cmp	r1, #0
    befa:	f2c0 8110 	blt.w	c11e <event_phy_upd_ind_prep+0x24a>
		rx = conn->llcp_rx;
    befe:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
    bf02:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
    bf04:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    bf08:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
    bf0c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
    bf10:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
    bf14:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
    bf18:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
    bf1c:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
    bf20:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
    bf24:	d17b      	bne.n	c01e <event_phy_upd_ind_prep+0x14a>
		uint16_t eff_tx_time = lll->max_tx_time;
    bf26:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
    bf2a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    bf2e:	d008      	beq.n	bf42 <event_phy_upd_ind_prep+0x6e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    bf30:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
    bf34:	095b      	lsrs	r3, r3, #5
    bf36:	f363 0102 	bfi	r1, r3, #0, #3
    bf3a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    bf3e:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
    bf42:	2d00      	cmp	r5, #0
    bf44:	f000 80cb 	beq.w	c0de <event_phy_upd_ind_prep+0x20a>
    bf48:	6828      	ldr	r0, [r5, #0]
    bf4a:	2800      	cmp	r0, #0
    bf4c:	f000 80c7 	beq.w	c0de <event_phy_upd_ind_prep+0x20a>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    bf50:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
    bf54:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
    bf58:	f8d0 c004 	ldr.w	ip, [r0, #4]
    bf5c:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    bf60:	0792      	lsls	r2, r2, #30
    bf62:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
    bf66:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    bf6a:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
    bf6e:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    bf72:	d402      	bmi.n	bf7a <event_phy_upd_ind_prep+0xa6>
    bf74:	4599      	cmp	r9, r3
    bf76:	f000 80ee 	beq.w	c156 <event_phy_upd_ind_prep+0x282>
		rx->hdr.handle = lll->handle;
    bf7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    bf7c:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    bf7e:	231c      	movs	r3, #28
    bf80:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
    bf82:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    bf84:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
    bf88:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
    bf8c:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
    bf8e:	4629      	mov	r1, r5
    bf90:	f7fe f99c 	bl	a2cc <ll_rx_put>
		rx = conn->llcp_rx;
    bf94:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
    bf98:	2d00      	cmp	r5, #0
    bf9a:	f000 80b1 	beq.w	c100 <event_phy_upd_ind_prep+0x22c>
    bf9e:	6828      	ldr	r0, [r5, #0]
    bfa0:	2800      	cmp	r0, #0
    bfa2:	f000 80ad 	beq.w	c100 <event_phy_upd_ind_prep+0x22c>
		if ((eff_tx_time <= lll->max_tx_time) &&
    bfa6:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
    bfaa:	6842      	ldr	r2, [r0, #4]
    bfac:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
    bfb0:	42b3      	cmp	r3, r6
    bfb2:	d30a      	bcc.n	bfca <event_phy_upd_ind_prep+0xf6>
    bfb4:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    bfb8:	d807      	bhi.n	bfca <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
    bfba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
    bfbe:	42bb      	cmp	r3, r7
    bfc0:	d303      	bcc.n	bfca <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
    bfc2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    bfc6:	f240 80ff 	bls.w	c1c8 <event_phy_upd_ind_prep+0x2f4>
		lll->max_tx_time = eff_tx_time;
    bfca:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
    bfce:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    bfd2:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    bfd4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    bfd6:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    bfd8:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    bfdc:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    bfe0:	2109      	movs	r1, #9
    bfe2:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    bfe4:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    bfe8:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    bfea:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    bfee:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    bff0:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
    bff4:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    bff6:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    bff8:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    bffa:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    bffc:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    bffe:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
    c000:	f7fe f964 	bl	a2cc <ll_rx_put>
}
    c004:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
    c008:	f7fe b96a 	b.w	a2e0 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
    c00c:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
    c010:	2200      	movs	r2, #0
    c012:	f7fa fe3f 	bl	6c94 <memq_peek>
    c016:	4606      	mov	r6, r0
    c018:	b150      	cbz	r0, c030 <event_phy_upd_ind_prep+0x15c>
}
    c01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    c01e:	f3c3 0082 	ubfx	r0, r3, #2, #3
    c022:	f360 0102 	bfi	r1, r0, #0, #3
    c026:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    c02a:	f44f 76a4 	mov.w	r6, #328	; 0x148
    c02e:	e77c      	b.n	bf2a <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
    c030:	2002      	movs	r0, #2
    c032:	f7fe f95b 	bl	a2ec <ll_pdu_rx_alloc_peek>
		if (!rx) {
    c036:	4680      	mov	r8, r0
    c038:	2800      	cmp	r0, #0
    c03a:	d0ee      	beq.n	c01a <event_phy_upd_ind_prep+0x146>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    c03c:	4893      	ldr	r0, [pc, #588]	; (c28c <event_phy_upd_ind_prep+0x3b8>)
    c03e:	f7fa fdbb 	bl	6bb8 <mem_acquire>
		if (!tx) {
    c042:	4607      	mov	r7, r0
    c044:	2800      	cmp	r0, #0
    c046:	d0e8      	beq.n	c01a <event_phy_upd_ind_prep+0x146>
		conn->llcp.phy_upd_ind.initiate = 0U;
    c048:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c04c:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    c050:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    c054:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
    c058:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    c05c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
    c060:	b2db      	uxtb	r3, r3
    c062:	f040 8093 	bne.w	c18c <event_phy_upd_ind_prep+0x2b8>
			conn->llcp_ack = conn->llcp_req;
    c066:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
    c06a:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
    c06e:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    c070:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
    c074:	f100 80ba 	bmi.w	c1ec <event_phy_upd_ind_prep+0x318>
    c078:	4633      	mov	r3, r6
    c07a:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    c07c:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
    c07e:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    c080:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
    c082:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    c084:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
    c086:	2218      	movs	r2, #24
	    conn->tx_head &&
    c088:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		if (!conn->tx_ctrl) {
    c08c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->llctrl.opcode =
    c090:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c092:	793a      	ldrb	r2, [r7, #4]
    c094:	f042 0203 	orr.w	r2, r2, #3
    c098:	713a      	strb	r2, [r7, #4]
	if (
    c09a:	2b00      	cmp	r3, #0
    c09c:	f000 809d 	beq.w	c1da <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_enc.pause_tx &&
    c0a0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    c0a4:	0795      	lsls	r5, r2, #30
    c0a6:	f100 8098 	bmi.w	c1da <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_phy.pause_tx &&
    c0aa:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    c0ae:	07d0      	lsls	r0, r2, #31
    c0b0:	f100 8093 	bmi.w	c1da <event_phy_upd_ind_prep+0x306>
		if (conn->tx_head == conn->tx_data) {
    c0b4:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    c0b8:	4293      	cmp	r3, r2
    c0ba:	f000 80cb 	beq.w	c254 <event_phy_upd_ind_prep+0x380>
		} else if (!conn->tx_ctrl) {
    c0be:	2900      	cmp	r1, #0
    c0c0:	f000 80d5 	beq.w	c26e <event_phy_upd_ind_prep+0x39a>
	tx->next = conn->tx_ctrl_last->next;
    c0c4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    c0c8:	681a      	ldr	r2, [r3, #0]
    c0ca:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    c0cc:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    c0ce:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
    c0d0:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
    c0d4:	2b00      	cmp	r3, #0
    c0d6:	d1a0      	bne.n	c01a <event_phy_upd_ind_prep+0x146>
		conn->tx_data_last = tx;
    c0d8:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
    c0dc:	e79d      	b.n	c01a <event_phy_upd_ind_prep+0x146>
		LL_ASSERT(rx && rx->hdr.link);
    c0de:	4a6c      	ldr	r2, [pc, #432]	; (c290 <event_phy_upd_ind_prep+0x3bc>)
    c0e0:	496c      	ldr	r1, [pc, #432]	; (c294 <event_phy_upd_ind_prep+0x3c0>)
    c0e2:	486d      	ldr	r0, [pc, #436]	; (c298 <event_phy_upd_ind_prep+0x3c4>)
    c0e4:	f241 230b 	movw	r3, #4619	; 0x120b
    c0e8:	f00c f83e 	bl	18168 <printk>
    c0ec:	4040      	eors	r0, r0
    c0ee:	f380 8811 	msr	BASEPRI, r0
    c0f2:	f04f 0003 	mov.w	r0, #3
    c0f6:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    c0f8:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    c0fa:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    c0fe:	e727      	b.n	bf50 <event_phy_upd_ind_prep+0x7c>
		LL_ASSERT(rx && rx->hdr.link);
    c100:	4a63      	ldr	r2, [pc, #396]	; (c290 <event_phy_upd_ind_prep+0x3bc>)
    c102:	4964      	ldr	r1, [pc, #400]	; (c294 <event_phy_upd_ind_prep+0x3c0>)
    c104:	4864      	ldr	r0, [pc, #400]	; (c298 <event_phy_upd_ind_prep+0x3c4>)
    c106:	f241 233a 	movw	r3, #4666	; 0x123a
    c10a:	f00c f82d 	bl	18168 <printk>
    c10e:	4040      	eors	r0, r0
    c110:	f380 8811 	msr	BASEPRI, r0
    c114:	f04f 0003 	mov.w	r0, #3
    c118:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    c11a:	6828      	ldr	r0, [r5, #0]
    c11c:	e743      	b.n	bfa6 <event_phy_upd_ind_prep+0xd2>
			rx = ll_pdu_rx_alloc();
    c11e:	f7fe f903 	bl	a328 <ll_pdu_rx_alloc>
			if (!rx) {
    c122:	4605      	mov	r5, r0
    c124:	2800      	cmp	r0, #0
    c126:	f43f af78 	beq.w	c01a <event_phy_upd_ind_prep+0x146>
			rx->hdr.link->mem = conn->llcp_rx;
    c12a:	6803      	ldr	r3, [r0, #0]
    c12c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    c130:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    c132:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
    c136:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    c13a:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
    c13c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c140:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    c142:	f6bf aedf 	bge.w	bf04 <event_phy_upd_ind_prep+0x30>
    c146:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
    c14a:	2900      	cmp	r1, #0
    c14c:	f43f aeda 	beq.w	bf04 <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
    c150:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
    c154:	e6da      	b.n	bf0c <event_phy_upd_ind_prep+0x38>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    c156:	4588      	cmp	r8, r1
    c158:	f47f af0f 	bne.w	bf7a <event_phy_upd_ind_prep+0xa6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    c15c:	2301      	movs	r3, #1
    c15e:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    c160:	4629      	mov	r1, r5
    c162:	f7fe f8b3 	bl	a2cc <ll_rx_put>
				rx = conn->llcp_rx;
    c166:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
    c16a:	2d00      	cmp	r5, #0
    c16c:	d063      	beq.n	c236 <event_phy_upd_ind_prep+0x362>
    c16e:	6828      	ldr	r0, [r5, #0]
    c170:	2800      	cmp	r0, #0
    c172:	d060      	beq.n	c236 <event_phy_upd_ind_prep+0x362>
				conn->llcp_rx = rx->hdr.link->mem;
    c174:	6842      	ldr	r2, [r0, #4]
    c176:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    c17a:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
    c17c:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
    c17e:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
    c180:	f7fe f8a4 	bl	a2cc <ll_rx_put>
}
    c184:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
    c188:	f7fe b8aa 	b.w	a2e0 <ll_rx_sched>
							 lll->latency +
    c18c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    c18e:	1da9      	adds	r1, r5, #6
    c190:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
    c192:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
    c196:	f7fe f8c7 	bl	a328 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    c19a:	f8d8 3000 	ldr.w	r3, [r8]
    c19e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    c1a2:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    c1a4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
    c1a8:	f7fe f8be 	bl	a328 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
    c1ac:	6803      	ldr	r3, [r0, #0]
    c1ae:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    c1b2:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    c1b4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    c1b8:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
    c1bc:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    c1c0:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    c1c4:	095b      	lsrs	r3, r3, #5
    c1c6:	e759      	b.n	c07c <event_phy_upd_ind_prep+0x1a8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    c1c8:	2301      	movs	r3, #1
    c1ca:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    c1cc:	4629      	mov	r1, r5
    c1ce:	f7fe f87d 	bl	a2cc <ll_rx_put>
}
    c1d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
    c1d6:	f7fe b883 	b.w	a2e0 <ll_rx_sched>
		if (!conn->tx_ctrl) {
    c1da:	2900      	cmp	r1, #0
    c1dc:	f47f af72 	bne.w	c0c4 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head;
    c1e0:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    c1e2:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    c1e6:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
    c1ea:	e773      	b.n	c0d4 <event_phy_upd_ind_prep+0x200>
				(void)ll_pdu_rx_alloc();
    c1ec:	f7fe f89c 	bl	a328 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
    c1f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c1f2:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c1f6:	231c      	movs	r3, #28
				upd->status = 0U;
    c1f8:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c1fc:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    c200:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
    c204:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
    c208:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c20c:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    c210:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    c214:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c218:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    c21c:	4641      	mov	r1, r8
    c21e:	f7fe f855 	bl	a2cc <ll_rx_put>
				ll_rx_sched();
    c222:	f7fe f85d 	bl	a2e0 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    c226:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    c22a:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
    c22e:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
    c232:	095b      	lsrs	r3, r3, #5
    c234:	e722      	b.n	c07c <event_phy_upd_ind_prep+0x1a8>
				LL_ASSERT(rx && rx->hdr.link);
    c236:	4a16      	ldr	r2, [pc, #88]	; (c290 <event_phy_upd_ind_prep+0x3bc>)
    c238:	4916      	ldr	r1, [pc, #88]	; (c294 <event_phy_upd_ind_prep+0x3c0>)
    c23a:	4817      	ldr	r0, [pc, #92]	; (c298 <event_phy_upd_ind_prep+0x3c4>)
    c23c:	f241 231d 	movw	r3, #4637	; 0x121d
    c240:	f00b ff92 	bl	18168 <printk>
    c244:	4040      	eors	r0, r0
    c246:	f380 8811 	msr	BASEPRI, r0
    c24a:	f04f 0003 	mov.w	r0, #3
    c24e:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
    c250:	6828      	ldr	r0, [r5, #0]
    c252:	e78f      	b.n	c174 <event_phy_upd_ind_prep+0x2a0>
			conn->tx_data = conn->tx_data->next;
    c254:	681a      	ldr	r2, [r3, #0]
    c256:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    c25a:	2900      	cmp	r1, #0
    c25c:	f47f af32 	bne.w	c0c4 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head->next;
    c260:	681a      	ldr	r2, [r3, #0]
    c262:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    c264:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    c266:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    c268:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
    c26c:	e732      	b.n	c0d4 <event_phy_upd_ind_prep+0x200>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    c26e:	791a      	ldrb	r2, [r3, #4]
    c270:	f002 0203 	and.w	r2, r2, #3
    c274:	2a03      	cmp	r2, #3
    c276:	d002      	beq.n	c27e <event_phy_upd_ind_prep+0x3aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    c278:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    c27c:	e722      	b.n	c0c4 <event_phy_upd_ind_prep+0x1f0>
	    ((pdu_data_tx->llctrl.opcode !=
    c27e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    c280:	2a03      	cmp	r2, #3
    c282:	d0ed      	beq.n	c260 <event_phy_upd_ind_prep+0x38c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    c284:	2a0a      	cmp	r2, #10
    c286:	d1f7      	bne.n	c278 <event_phy_upd_ind_prep+0x3a4>
    c288:	e7ea      	b.n	c260 <event_phy_upd_ind_prep+0x38c>
    c28a:	bf00      	nop
    c28c:	20001d48 	.word	0x20001d48
    c290:	0001d244 	.word	0x0001d244
    c294:	0001d310 	.word	0x0001d310
    c298:	0001cde4 	.word	0x0001cde4

0000c29c <ll_conn_acquire>:
	return mem_acquire(&conn_free);
    c29c:	4801      	ldr	r0, [pc, #4]	; (c2a4 <ll_conn_acquire+0x8>)
    c29e:	f7fa bc8b 	b.w	6bb8 <mem_acquire>
    c2a2:	bf00      	nop
    c2a4:	20001cb0 	.word	0x20001cb0

0000c2a8 <ll_conn_release>:
	mem_release(conn, &conn_free);
    c2a8:	4901      	ldr	r1, [pc, #4]	; (c2b0 <ll_conn_release+0x8>)
    c2aa:	f7fa bc9f 	b.w	6bec <mem_release>
    c2ae:	bf00      	nop
    c2b0:	20001cb0 	.word	0x20001cb0

0000c2b4 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    c2b4:	4902      	ldr	r1, [pc, #8]	; (c2c0 <ll_conn_handle_get+0xc>)
    c2b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    c2ba:	f7fa bcb3 	b.w	6c24 <mem_index_get>
    c2be:	bf00      	nop
    c2c0:	20000ec8 	.word	0x20000ec8

0000c2c4 <ll_conn_get>:
{
    c2c4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c2c6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c2ca:	4801      	ldr	r0, [pc, #4]	; (c2d0 <ll_conn_get+0xc>)
    c2cc:	f7fa bca6 	b.w	6c1c <mem_get>
    c2d0:	20000ec8 	.word	0x20000ec8

0000c2d4 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    c2d4:	b958      	cbnz	r0, c2ee <ll_connected_get+0x1a>
{
    c2d6:	b508      	push	{r3, lr}
    c2d8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c2da:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c2de:	4805      	ldr	r0, [pc, #20]	; (c2f4 <ll_connected_get+0x20>)
    c2e0:	f7fa fc9c 	bl	6c1c <mem_get>
	if (conn->lll.handle != handle) {
    c2e4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    c2e6:	b903      	cbnz	r3, c2ea <ll_connected_get+0x16>
}
    c2e8:	bd08      	pop	{r3, pc}
		return NULL;
    c2ea:	2000      	movs	r0, #0
}
    c2ec:	bd08      	pop	{r3, pc}
		return NULL;
    c2ee:	2000      	movs	r0, #0
}
    c2f0:	4770      	bx	lr
    c2f2:	bf00      	nop
    c2f4:	20000ec8 	.word	0x20000ec8

0000c2f8 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
    c2f8:	4801      	ldr	r0, [pc, #4]	; (c300 <ll_tx_mem_acquire+0x8>)
    c2fa:	f7fa bc5d 	b.w	6bb8 <mem_acquire>
    c2fe:	bf00      	nop
    c300:	20001cd8 	.word	0x20001cd8

0000c304 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
    c304:	4901      	ldr	r1, [pc, #4]	; (c30c <ll_tx_mem_release+0x8>)
    c306:	f7fa bc71 	b.w	6bec <mem_release>
    c30a:	bf00      	nop
    c30c:	20001cd8 	.word	0x20001cd8

0000c310 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    c310:	2800      	cmp	r0, #0
    c312:	d13f      	bne.n	c394 <ll_tx_mem_enqueue+0x84>
{
    c314:	b570      	push	{r4, r5, r6, lr}
    c316:	4602      	mov	r2, r0
    c318:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c31a:	4820      	ldr	r0, [pc, #128]	; (c39c <ll_tx_mem_enqueue+0x8c>)
    c31c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c320:	f7fa fc7c 	bl	6c1c <mem_get>
	if (conn->lll.handle != handle) {
    c324:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c326:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
    c328:	bb72      	cbnz	r2, c388 <ll_tx_mem_enqueue+0x78>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
    c32a:	4c1d      	ldr	r4, [pc, #116]	; (c3a0 <ll_tx_mem_enqueue+0x90>)
    c32c:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
    c330:	7861      	ldrb	r1, [r4, #1]
    c332:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
    c334:	f10c 0301 	add.w	r3, ip, #1
    c338:	b2db      	uxtb	r3, r3
		last = 0U;
    c33a:	4299      	cmp	r1, r3
    c33c:	bf08      	it	eq
    c33e:	2300      	moveq	r3, #0
    c340:	78a1      	ldrb	r1, [r4, #2]
	if (last == first) {
    c342:	4299      	cmp	r1, r3
    c344:	d023      	beq.n	c38e <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    c346:	fb1c fc00 	smulbb	ip, ip, r0
    c34a:	1d20      	adds	r0, r4, #4
	lll_tx->handle = handle;
    c34c:	f820 200c 	strh.w	r2, [r0, ip]
    c350:	4484      	add	ip, r0
	lll_tx->node = tx;
    c352:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
    c356:	70e3      	strb	r3, [r4, #3]
    c358:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
    c35a:	b92b      	cbnz	r3, c368 <ll_tx_mem_enqueue+0x58>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c35c:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    c360:	2b00      	cmp	r3, #0
    c362:	db0b      	blt.n	c37c <ll_tx_mem_enqueue+0x6c>
	return 0;
    c364:	2000      	movs	r0, #0
}
    c366:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
    c368:	4b0e      	ldr	r3, [pc, #56]	; (c3a4 <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    c36a:	2101      	movs	r1, #1
    c36c:	2003      	movs	r0, #3
		mfy.param = conn;
    c36e:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    c370:	f7fa fcfa 	bl	6d68 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c374:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
    c378:	2b00      	cmp	r3, #0
    c37a:	daf3      	bge.n	c364 <ll_tx_mem_enqueue+0x54>
		ull_periph_latency_cancel(conn, handle);
    c37c:	4628      	mov	r0, r5
    c37e:	2100      	movs	r1, #0
    c380:	f003 ff20 	bl	101c4 <ull_periph_latency_cancel>
	return 0;
    c384:	2000      	movs	r0, #0
}
    c386:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c388:	f06f 0015 	mvn.w	r0, #21
}
    c38c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    c38e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    c392:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c394:	f06f 0015 	mvn.w	r0, #21
}
    c398:	4770      	bx	lr
    c39a:	bf00      	nop
    c39c:	20000ec8 	.word	0x20000ec8
    c3a0:	20000554 	.word	0x20000554
    c3a4:	200005a8 	.word	0x200005a8

0000c3a8 <ll_conn_update>:
{
    c3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c3ac:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    c3b0:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    c3b4:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
    c3b8:	2800      	cmp	r0, #0
    c3ba:	d155      	bne.n	c468 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c3bc:	460c      	mov	r4, r1
    c3be:	4615      	mov	r5, r2
    c3c0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c3c4:	4602      	mov	r2, r0
    c3c6:	4841      	ldr	r0, [pc, #260]	; (c4cc <ll_conn_update+0x124>)
    c3c8:	461e      	mov	r6, r3
    c3ca:	f7fa fc27 	bl	6c1c <mem_get>
    c3ce:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
    c3d0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    c3d2:	2800      	cmp	r0, #0
    c3d4:	d148      	bne.n	c468 <ll_conn_update+0xc0>
	if (!cmd) {
    c3d6:	bb3c      	cbnz	r4, c428 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
    c3d8:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
    c3dc:	0699      	lsls	r1, r3, #26
    c3de:	d44a      	bmi.n	c476 <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
    c3e0:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
    c3e4:	07da      	lsls	r2, r3, #31
    c3e6:	d442      	bmi.n	c46e <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
    c3e8:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
    c3ec:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
    c3f0:	4293      	cmp	r3, r2
    c3f2:	d136      	bne.n	c462 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
    c3f4:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    c3f8:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
    c3fc:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
    c400:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
    c404:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
    c406:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    c40a:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
    c40c:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
    c410:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
    c414:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
    c418:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
    c41c:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    c420:	db4e      	blt.n	c4c0 <ll_conn_update+0x118>
	return 0;
    c422:	2000      	movs	r0, #0
}
    c424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
    c428:	3c01      	subs	r4, #1
		if (cmd) {
    c42a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    c42e:	d0db      	beq.n	c3e8 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
    c430:	f89c 2185 	ldrb.w	r2, [ip, #389]	; 0x185
    c434:	f89c 3184 	ldrb.w	r3, [ip, #388]	; 0x184
    c438:	429a      	cmp	r2, r3
    c43a:	d012      	beq.n	c462 <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
    c43c:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
    c440:	f003 020f 	and.w	r2, r3, #15
    c444:	2a03      	cmp	r2, #3
    c446:	d10c      	bne.n	c462 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
    c448:	f004 040f 	and.w	r4, r4, #15
    c44c:	f023 031f 	bic.w	r3, r3, #31
    c450:	f044 0410 	orr.w	r4, r4, #16
    c454:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
    c456:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
    c45a:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
    c45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    c462:	200c      	movs	r0, #12
}
    c464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c468:	2002      	movs	r0, #2
}
    c46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
    c46e:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
    c472:	079b      	lsls	r3, r3, #30
    c474:	d4b8      	bmi.n	c3e8 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
    c476:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
    c47a:	2b00      	cmp	r3, #0
    c47c:	db1e      	blt.n	c4bc <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
    c47e:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
    c482:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
    c486:	4293      	cmp	r3, r2
    c488:	d1eb      	bne.n	c462 <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    c48a:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
    c48e:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
    c492:	3301      	adds	r3, #1
    c494:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    c498:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
    c49c:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    c49e:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
    c4a2:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
    c4a4:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
    c4a8:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
    c4ac:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    c4b0:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
    c4b4:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
    c4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    c4bc:	201a      	movs	r0, #26
    c4be:	e7d1      	b.n	c464 <ll_conn_update+0xbc>
				ull_periph_latency_cancel(conn, handle);
    c4c0:	4660      	mov	r0, ip
    c4c2:	2100      	movs	r1, #0
    c4c4:	f003 fe7e 	bl	101c4 <ull_periph_latency_cancel>
	return 0;
    c4c8:	2000      	movs	r0, #0
    c4ca:	e7cb      	b.n	c464 <ll_conn_update+0xbc>
    c4cc:	20000ec8 	.word	0x20000ec8

0000c4d0 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    c4d0:	b9d0      	cbnz	r0, c508 <ll_chm_get+0x38>
{
    c4d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4d4:	4602      	mov	r2, r0
    c4d6:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c4d8:	480c      	ldr	r0, [pc, #48]	; (c50c <ll_chm_get+0x3c>)
    c4da:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c4de:	f7fa fb9d 	bl	6c1c <mem_get>
	if (conn->lll.handle != handle) {
    c4e2:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c4e4:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    c4e6:	b96e      	cbnz	r6, c504 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
    c4e8:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
    c4ec:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
    c4f0:	2205      	movs	r2, #5
    c4f2:	4639      	mov	r1, r7
    c4f4:	4628      	mov	r0, r5
    c4f6:	f00c fc83 	bl	18e00 <memcpy>
	} while (conn->chm_updated);
    c4fa:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
    c4fe:	2800      	cmp	r0, #0
    c500:	d1f4      	bne.n	c4ec <ll_chm_get+0x1c>
}
    c502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c504:	2002      	movs	r0, #2
}
    c506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c508:	2002      	movs	r0, #2
}
    c50a:	4770      	bx	lr
    c50c:	20000ec8 	.word	0x20000ec8

0000c510 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    c510:	2800      	cmp	r0, #0
    c512:	d13e      	bne.n	c592 <ll_terminate_ind_send+0x82>
{
    c514:	b510      	push	{r4, lr}
    c516:	4602      	mov	r2, r0
    c518:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c51a:	4821      	ldr	r0, [pc, #132]	; (c5a0 <ll_terminate_ind_send+0x90>)
    c51c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c520:	f7fa fb7c 	bl	6c1c <mem_get>
	if (conn->lll.handle != handle) {
    c524:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    c526:	bb93      	cbnz	r3, c58e <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
    c528:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    c52c:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
    c530:	429a      	cmp	r2, r3
    c532:	d12a      	bne.n	c58a <ll_terminate_ind_send+0x7a>
	switch (reason) {
    c534:	2c29      	cmp	r4, #41	; 0x29
    c536:	d819      	bhi.n	c56c <ll_terminate_ind_send+0x5c>
    c538:	2c04      	cmp	r4, #4
    c53a:	d919      	bls.n	c570 <ll_terminate_ind_send+0x60>
    c53c:	1f62      	subs	r2, r4, #5
    c53e:	2a24      	cmp	r2, #36	; 0x24
    c540:	d816      	bhi.n	c570 <ll_terminate_ind_send+0x60>
    c542:	e8df f002 	tbb	[pc, r2]
    c546:	1517      	.short	0x1517
    c548:	15151515 	.word	0x15151515
    c54c:	15151515 	.word	0x15151515
    c550:	15151515 	.word	0x15151515
    c554:	15171717 	.word	0x15171717
    c558:	17151515 	.word	0x17151515
    c55c:	15151515 	.word	0x15151515
    c560:	15151515 	.word	0x15151515
    c564:	15151515 	.word	0x15151515
    c568:	1515      	.short	0x1515
    c56a:	17          	.byte	0x17
    c56b:	00          	.byte	0x00
    c56c:	2c3b      	cmp	r4, #59	; 0x3b
    c56e:	d001      	beq.n	c574 <ll_terminate_ind_send+0x64>
    c570:	2012      	movs	r0, #18
}
    c572:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c574:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
    c578:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    c57c:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c57e:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
    c580:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c584:	db07      	blt.n	c596 <ll_terminate_ind_send+0x86>
	return 0;
    c586:	2000      	movs	r0, #0
}
    c588:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    c58a:	200c      	movs	r0, #12
}
    c58c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c58e:	2002      	movs	r0, #2
}
    c590:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c592:	2002      	movs	r0, #2
}
    c594:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
    c596:	2100      	movs	r1, #0
    c598:	f003 fe14 	bl	101c4 <ull_periph_latency_cancel>
	return 0;
    c59c:	2000      	movs	r0, #0
}
    c59e:	bd10      	pop	{r4, pc}
    c5a0:	20000ec8 	.word	0x20000ec8

0000c5a4 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    c5a4:	bb00      	cbnz	r0, c5e8 <ll_feature_req_send+0x44>
{
    c5a6:	b510      	push	{r4, lr}
    c5a8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c5aa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c5ae:	480f      	ldr	r0, [pc, #60]	; (c5ec <ll_feature_req_send+0x48>)
    c5b0:	f7fa fb34 	bl	6c1c <mem_get>
	if (conn->lll.handle != handle) {
    c5b4:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    c5b6:	b984      	cbnz	r4, c5da <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
    c5b8:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    c5bc:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
    c5c0:	428a      	cmp	r2, r1
    c5c2:	d108      	bne.n	c5d6 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    c5c4:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
    c5c8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    c5ca:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
    c5cc:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    c5d0:	db05      	blt.n	c5de <ll_feature_req_send+0x3a>
	return 0;
    c5d2:	4620      	mov	r0, r4
}
    c5d4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    c5d6:	200c      	movs	r0, #12
}
    c5d8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c5da:	2002      	movs	r0, #2
}
    c5dc:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
    c5de:	4621      	mov	r1, r4
    c5e0:	f003 fdf0 	bl	101c4 <ull_periph_latency_cancel>
	return 0;
    c5e4:	4620      	mov	r0, r4
}
    c5e6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c5e8:	2002      	movs	r0, #2
}
    c5ea:	4770      	bx	lr
    c5ec:	20000ec8 	.word	0x20000ec8

0000c5f0 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    c5f0:	bb00      	cbnz	r0, c634 <ll_version_ind_send+0x44>
{
    c5f2:	b510      	push	{r4, lr}
    c5f4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c5f6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c5fa:	480f      	ldr	r0, [pc, #60]	; (c638 <ll_version_ind_send+0x48>)
    c5fc:	f7fa fb0e 	bl	6c1c <mem_get>
	if (conn->lll.handle != handle) {
    c600:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    c602:	b984      	cbnz	r4, c626 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
    c604:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    c608:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
    c60c:	428a      	cmp	r2, r1
    c60e:	d108      	bne.n	c622 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c610:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
    c614:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c616:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
    c618:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c61c:	db05      	blt.n	c62a <ll_version_ind_send+0x3a>
	return 0;
    c61e:	4620      	mov	r0, r4
}
    c620:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    c622:	200c      	movs	r0, #12
}
    c624:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c626:	2002      	movs	r0, #2
}
    c628:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
    c62a:	4621      	mov	r1, r4
    c62c:	f003 fdca 	bl	101c4 <ull_periph_latency_cancel>
	return 0;
    c630:	4620      	mov	r0, r4
}
    c632:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c634:	2002      	movs	r0, #2
}
    c636:	4770      	bx	lr
    c638:	20000ec8 	.word	0x20000ec8

0000c63c <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    c63c:	2800      	cmp	r0, #0
    c63e:	d14c      	bne.n	c6da <ll_length_req_send+0x9e>
{
    c640:	b538      	push	{r3, r4, r5, lr}
    c642:	460d      	mov	r5, r1
    c644:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c646:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c64a:	4602      	mov	r2, r0
    c64c:	4824      	ldr	r0, [pc, #144]	; (c6e0 <ll_length_req_send+0xa4>)
    c64e:	f7fa fae5 	bl	6c1c <mem_get>
	if (conn->lll.handle != handle) {
    c652:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    c654:	bbc3      	cbnz	r3, c6c8 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
    c656:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    c65a:	071a      	lsls	r2, r3, #28
    c65c:	d432      	bmi.n	c6c4 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
    c65e:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
    c662:	07d1      	lsls	r1, r2, #31
    c664:	d503      	bpl.n	c66e <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
    c666:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
    c66a:	0692      	lsls	r2, r2, #26
    c66c:	d52a      	bpl.n	c6c4 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
    c66e:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    c672:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
    c676:	428a      	cmp	r2, r1
    c678:	d011      	beq.n	c69e <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
    c67a:	f003 0307 	and.w	r3, r3, #7
    c67e:	2b03      	cmp	r3, #3
    c680:	d004      	beq.n	c68c <ll_length_req_send+0x50>
    c682:	3303      	adds	r3, #3
    c684:	f003 0307 	and.w	r3, r3, #7
    c688:	2b01      	cmp	r3, #1
    c68a:	d824      	bhi.n	c6d6 <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
    c68c:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
    c690:	bb0b      	cbnz	r3, c6d6 <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
    c692:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
    c696:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
    c69a:	4618      	mov	r0, r3
}
    c69c:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    c69e:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
    c6a2:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    c6a6:	f36f 0302 	bfc	r3, #0, #3
    c6aa:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c6ae:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
    c6b2:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
    c6b6:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c6b8:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
    c6ba:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c6be:	db05      	blt.n	c6cc <ll_length_req_send+0x90>
	return 0;
    c6c0:	2000      	movs	r0, #0
}
    c6c2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    c6c4:	201a      	movs	r0, #26
}
    c6c6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c6c8:	2002      	movs	r0, #2
}
    c6ca:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
    c6cc:	2100      	movs	r1, #0
    c6ce:	f003 fd79 	bl	101c4 <ull_periph_latency_cancel>
	return 0;
    c6d2:	2000      	movs	r0, #0
}
    c6d4:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    c6d6:	200c      	movs	r0, #12
}
    c6d8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c6da:	2002      	movs	r0, #2
}
    c6dc:	4770      	bx	lr
    c6de:	bf00      	nop
    c6e0:	20000ec8 	.word	0x20000ec8

0000c6e4 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
    c6e4:	4a03      	ldr	r2, [pc, #12]	; (c6f4 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
    c6e6:	4b04      	ldr	r3, [pc, #16]	; (c6f8 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
    c6e8:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
    c6ea:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
    c6ec:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
    c6ee:	800b      	strh	r3, [r1, #0]
}
    c6f0:	4770      	bx	lr
    c6f2:	bf00      	nop
    c6f4:	2000279a 	.word	0x2000279a
    c6f8:	2000279c 	.word	0x2000279c

0000c6fc <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
    c6fc:	4a02      	ldr	r2, [pc, #8]	; (c708 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
    c6fe:	4b03      	ldr	r3, [pc, #12]	; (c70c <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
    c700:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
    c702:	8019      	strh	r1, [r3, #0]
}
    c704:	2000      	movs	r0, #0
    c706:	4770      	bx	lr
    c708:	2000279a 	.word	0x2000279a
    c70c:	2000279c 	.word	0x2000279c

0000c710 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
    c710:	f04f 0c1b 	mov.w	ip, #27
    c714:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    c718:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
    c71c:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    c720:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
    c722:	8018      	strh	r0, [r3, #0]
}
    c724:	4770      	bx	lr
    c726:	bf00      	nop

0000c728 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    c728:	b9c0      	cbnz	r0, c75c <ll_phy_get+0x34>
{
    c72a:	b538      	push	{r3, r4, r5, lr}
    c72c:	460d      	mov	r5, r1
    c72e:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c730:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c734:	4602      	mov	r2, r0
    c736:	480a      	ldr	r0, [pc, #40]	; (c760 <ll_phy_get+0x38>)
    c738:	f7fa fa70 	bl	6c1c <mem_get>
    c73c:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
    c73e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    c740:	b950      	cbnz	r0, c758 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
    c742:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    c746:	f3c2 0202 	ubfx	r2, r2, #0, #3
    c74a:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
    c74c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
    c750:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c754:	7023      	strb	r3, [r4, #0]
}
    c756:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c758:	2002      	movs	r0, #2
}
    c75a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c75c:	2002      	movs	r0, #2
}
    c75e:	4770      	bx	lr
    c760:	20000ec8 	.word	0x20000ec8

0000c764 <ll_phy_default_set>:
	default_phy_tx = tx;
    c764:	4a02      	ldr	r2, [pc, #8]	; (c770 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
    c766:	4b03      	ldr	r3, [pc, #12]	; (c774 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
    c768:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
    c76a:	7019      	strb	r1, [r3, #0]
}
    c76c:	2000      	movs	r0, #0
    c76e:	4770      	bx	lr
    c770:	200027b5 	.word	0x200027b5
    c774:	200027b4 	.word	0x200027b4

0000c778 <ll_phy_req_send>:
{
    c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
    c77a:	2800      	cmp	r0, #0
    c77c:	d143      	bne.n	c806 <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c77e:	460c      	mov	r4, r1
    c780:	4616      	mov	r6, r2
    c782:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c786:	4602      	mov	r2, r0
    c788:	4823      	ldr	r0, [pc, #140]	; (c818 <ll_phy_req_send+0xa0>)
    c78a:	461f      	mov	r7, r3
    c78c:	f7fa fa46 	bl	6c1c <mem_get>
	if (conn->lll.handle != handle) {
    c790:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    c792:	bbc3      	cbnz	r3, c806 <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
    c794:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
    c798:	f015 0508 	ands.w	r5, r5, #8
    c79c:	d130      	bne.n	c800 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
    c79e:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
    c7a2:	07db      	lsls	r3, r3, #31
    c7a4:	d504      	bpl.n	c7b0 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
    c7a6:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
    c7aa:	f413 6f10 	tst.w	r3, #2304	; 0x900
    c7ae:	d027      	beq.n	c800 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
    c7b0:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
    c7b4:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
    c7b8:	4299      	cmp	r1, r3
    c7ba:	d11e      	bne.n	c7fa <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    c7bc:	f004 0407 	and.w	r4, r4, #7
    c7c0:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
    c7c4:	00a4      	lsls	r4, r4, #2
    c7c6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    c7ca:	f007 0307 	and.w	r3, r7, #7
    c7ce:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
    c7d2:	f006 0601 	and.w	r6, r6, #1
    c7d6:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
    c7da:	f022 0207 	bic.w	r2, r2, #7
    c7de:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
    c7e2:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c7e4:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    c7e8:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
    c7ec:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c7ee:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
    c7f0:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
    c7f4:	db0a      	blt.n	c80c <ll_phy_req_send+0x94>
}
    c7f6:	4628      	mov	r0, r5
    c7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    c7fa:	250c      	movs	r5, #12
}
    c7fc:	4628      	mov	r0, r5
    c7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    c800:	251a      	movs	r5, #26
}
    c802:	4628      	mov	r0, r5
    c804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c806:	2502      	movs	r5, #2
}
    c808:	4628      	mov	r0, r5
    c80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
    c80c:	2100      	movs	r1, #0
    c80e:	f003 fcd9 	bl	101c4 <ull_periph_latency_cancel>
}
    c812:	4628      	mov	r0, r5
    c814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c816:	bf00      	nop
    c818:	20000ec8 	.word	0x20000ec8

0000c81c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    c81c:	b9d8      	cbnz	r0, c856 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c81e:	4602      	mov	r2, r0
{
    c820:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c822:	480e      	ldr	r0, [pc, #56]	; (c85c <ll_apto_get+0x40>)
    c824:	460c      	mov	r4, r1
    c826:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c82a:	f7fa f9f7 	bl	6c1c <mem_get>
    c82e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    c830:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    c832:	b970      	cbnz	r0, c852 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
    c834:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
    c838:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
    c83a:	fb02 f303 	mul.w	r3, r2, r3
    c83e:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
    c842:	4a07      	ldr	r2, [pc, #28]	; (c860 <ll_apto_get+0x44>)
    c844:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c848:	fba2 2303 	umull	r2, r3, r2, r3
    c84c:	099b      	lsrs	r3, r3, #6
    c84e:	8023      	strh	r3, [r4, #0]
}
    c850:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c852:	2002      	movs	r0, #2
}
    c854:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c856:	2002      	movs	r0, #2
}
    c858:	4770      	bx	lr
    c85a:	bf00      	nop
    c85c:	20000ec8 	.word	0x20000ec8
    c860:	10624dd3 	.word	0x10624dd3

0000c864 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
    c864:	b9e0      	cbnz	r0, c8a0 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c866:	4602      	mov	r2, r0
{
    c868:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c86a:	480e      	ldr	r0, [pc, #56]	; (c8a4 <ll_apto_set+0x40>)
    c86c:	460c      	mov	r4, r1
    c86e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c872:	f7fa f9d3 	bl	6c1c <mem_get>
    c876:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
    c878:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    c87a:	b978      	cbnz	r0, c89c <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
    c87c:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
    c880:	f240 43e2 	movw	r3, #1250	; 0x4e2
    c884:	fb03 fc0c 	mul.w	ip, r3, ip
    c888:	f242 7310 	movw	r3, #10000	; 0x2710
    c88c:	fb03 c304 	mla	r3, r3, r4, ip
    c890:	3b01      	subs	r3, #1
    c892:	fbb3 f3fc 	udiv	r3, r3, ip
    c896:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
    c89a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c89c:	2002      	movs	r0, #2
}
    c89e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c8a0:	2002      	movs	r0, #2
}
    c8a2:	4770      	bx	lr
    c8a4:	20000ec8 	.word	0x20000ec8

0000c8a8 <ull_conn_init>:
	err = init_reset();
    c8a8:	f7fe beea 	b.w	b680 <init_reset>

0000c8ac <ull_conn_reset>:
{
    c8ac:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c8ae:	2200      	movs	r2, #0
    c8b0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c8b4:	4815      	ldr	r0, [pc, #84]	; (c90c <ull_conn_reset+0x60>)
    c8b6:	f7fa f9b1 	bl	6c1c <mem_get>
    c8ba:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
    c8bc:	f100 021c 	add.w	r2, r0, #28
    c8c0:	4601      	mov	r1, r0
    c8c2:	2003      	movs	r0, #3
    c8c4:	f7fd fe1a 	bl	a4fc <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    c8c8:	b108      	cbz	r0, c8ce <ull_conn_reset+0x22>
    c8ca:	3078      	adds	r0, #120	; 0x78
    c8cc:	d10f      	bne.n	c8ee <ull_conn_reset+0x42>
	MFIFO_INIT(conn_tx);
    c8ce:	4810      	ldr	r0, [pc, #64]	; (c910 <ull_conn_reset+0x64>)
	MFIFO_INIT(conn_ack);
    c8d0:	4910      	ldr	r1, [pc, #64]	; (c914 <ull_conn_reset+0x68>)
	conn_upd_curr = NULL;
    c8d2:	4a11      	ldr	r2, [pc, #68]	; (c918 <ull_conn_reset+0x6c>)
	conn->lll.link_tx_free = NULL;
    c8d4:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
    c8d6:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
    c8da:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
    c8dc:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
    c8de:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
    c8e2:	6763      	str	r3, [r4, #116]	; 0x74
}
    c8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
    c8e8:	6013      	str	r3, [r2, #0]
	err = init_reset();
    c8ea:	f7fe bec9 	b.w	b680 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
    c8ee:	4a0b      	ldr	r2, [pc, #44]	; (c91c <ull_conn_reset+0x70>)
    c8f0:	490b      	ldr	r1, [pc, #44]	; (c920 <ull_conn_reset+0x74>)
    c8f2:	480c      	ldr	r0, [pc, #48]	; (c924 <ull_conn_reset+0x78>)
    c8f4:	f640 03d4 	movw	r3, #2260	; 0x8d4
    c8f8:	f00b fc36 	bl	18168 <printk>
    c8fc:	4040      	eors	r0, r0
    c8fe:	f380 8811 	msr	BASEPRI, r0
    c902:	f04f 0003 	mov.w	r0, #3
    c906:	df02      	svc	2
    c908:	e7e1      	b.n	c8ce <ull_conn_reset+0x22>
    c90a:	bf00      	nop
    c90c:	20000ec8 	.word	0x20000ec8
    c910:	20000554 	.word	0x20000554
    c914:	20000510 	.word	0x20000510
    c918:	20001cb4 	.word	0x20001cb4
    c91c:	0001d244 	.word	0x0001d244
    c920:	0001d354 	.word	0x0001d354
    c924:	0001cde4 	.word	0x0001cde4

0000c928 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
    c928:	4b01      	ldr	r3, [pc, #4]	; (c930 <ull_conn_default_tx_octets_get+0x8>)
}
    c92a:	8818      	ldrh	r0, [r3, #0]
    c92c:	4770      	bx	lr
    c92e:	bf00      	nop
    c930:	2000279a 	.word	0x2000279a

0000c934 <ull_conn_default_tx_time_get>:
	return default_tx_time;
    c934:	4b01      	ldr	r3, [pc, #4]	; (c93c <ull_conn_default_tx_time_get+0x8>)
}
    c936:	8818      	ldrh	r0, [r3, #0]
    c938:	4770      	bx	lr
    c93a:	bf00      	nop
    c93c:	2000279c 	.word	0x2000279c

0000c940 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
    c940:	4b01      	ldr	r3, [pc, #4]	; (c948 <ull_conn_default_phy_tx_get+0x8>)
}
    c942:	7818      	ldrb	r0, [r3, #0]
    c944:	4770      	bx	lr
    c946:	bf00      	nop
    c948:	200027b5 	.word	0x200027b5

0000c94c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
    c94c:	4b01      	ldr	r3, [pc, #4]	; (c954 <ull_conn_default_phy_rx_get+0x8>)
}
    c94e:	7818      	ldrb	r0, [r3, #0]
    c950:	4770      	bx	lr
    c952:	bf00      	nop
    c954:	200027b4 	.word	0x200027b4

0000c958 <ull_conn_setup>:
{
    c958:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
    c95a:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
    c95c:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
    c95e:	681d      	ldr	r5, [r3, #0]
    c960:	782b      	ldrb	r3, [r5, #0]
{
    c962:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
    c964:	b193      	cbz	r3, c98c <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
    c966:	696b      	ldr	r3, [r5, #20]
    c968:	b163      	cbz	r3, c984 <ull_conn_setup+0x2c>
    c96a:	4a0b      	ldr	r2, [pc, #44]	; (c998 <ull_conn_setup+0x40>)
    c96c:	490b      	ldr	r1, [pc, #44]	; (c99c <ull_conn_setup+0x44>)
    c96e:	480c      	ldr	r0, [pc, #48]	; (c9a0 <ull_conn_setup+0x48>)
    c970:	f240 33ed 	movw	r3, #1005	; 0x3ed
    c974:	f00b fbf8 	bl	18168 <printk>
    c978:	4040      	eors	r0, r0
    c97a:	f380 8811 	msr	BASEPRI, r0
    c97e:	f04f 0003 	mov.w	r0, #3
    c982:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
    c984:	4b07      	ldr	r3, [pc, #28]	; (c9a4 <ull_conn_setup+0x4c>)
    c986:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
    c98a:	bd38      	pop	{r3, r4, r5, pc}
    c98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
    c990:	4608      	mov	r0, r1
    c992:	f7ff b86f 	b.w	ba74 <conn_setup_adv_scan_disabled_cb>
    c996:	bf00      	nop
    c998:	0001d244 	.word	0x0001d244
    c99c:	0001d19c 	.word	0x0001d19c
    c9a0:	0001cde4 	.word	0x0001cde4
    c9a4:	0000ba75 	.word	0x0000ba75

0000c9a8 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
    c9a8:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
    c9aa:	88da      	ldrh	r2, [r3, #6]
    c9ac:	2a00      	cmp	r2, #0
    c9ae:	f040 80cd 	bne.w	cb4c <ull_conn_rx+0x1a4>
{
    c9b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9b6:	460e      	mov	r6, r1
    c9b8:	b085      	sub	sp, #20
    c9ba:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c9bc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    c9c0:	48bb      	ldr	r0, [pc, #748]	; (ccb0 <ull_conn_rx+0x308>)
    c9c2:	f7fa f92b 	bl	6c1c <mem_get>
	if (conn->lll.handle != handle) {
    c9c6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    c9c8:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
    c9ca:	2b00      	cmp	r3, #0
    c9cc:	f040 80b7 	bne.w	cb3e <ull_conn_rx+0x196>
	pdu_rx = (void *)(*rx)->pdu;
    c9d0:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    c9d2:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
	switch (pdu_rx->ll_id) {
    c9d6:	7f29      	ldrb	r1, [r5, #28]
    c9d8:	f001 0103 	and.w	r1, r1, #3
    c9dc:	2903      	cmp	r1, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    c9de:	f002 0001 	and.w	r0, r2, #1
	switch (pdu_rx->ll_id) {
    c9e2:	d128      	bne.n	ca36 <ull_conn_rx+0x8e>
	opcode = pdu_rx->llctrl.opcode;
    c9e4:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
    c9e8:	f105 0c1c 	add.w	ip, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
    c9ec:	b3c8      	cbz	r0, ca62 <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    c9ee:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    c9f2:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
    c9f4:	f002 0104 	and.w	r1, r2, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    c9f8:	f2c0 80ac 	blt.w	cb54 <ull_conn_rx+0x1ac>
	return (!conn->lll.role &&
    c9fc:	2900      	cmp	r1, #0
    c9fe:	f040 80fd 	bne.w	cbfc <ull_conn_rx+0x254>
		((!conn->llcp_enc.refresh &&
    ca02:	f1b8 0f02 	cmp.w	r8, #2
    ca06:	f000 810d 	beq.w	cc24 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    ca0a:	f1b8 0f05 	cmp.w	r8, #5
    ca0e:	d04a      	beq.n	caa6 <ull_conn_rx+0xfe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    ca10:	f1b8 0f06 	cmp.w	r8, #6
    ca14:	f000 8366 	beq.w	d0e4 <ull_conn_rx+0x73c>
    ca18:	f1b8 0f0d 	cmp.w	r8, #13
    ca1c:	f000 81da 	beq.w	cdd4 <ull_conn_rx+0x42c>
    ca20:	f1b8 0f11 	cmp.w	r8, #17
    ca24:	f000 826c 	beq.w	cf00 <ull_conn_rx+0x558>
		conn->llcp_terminate.reason_final =
    ca28:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ca2a:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
    ca2c:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
    ca30:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ca32:	712b      	strb	r3, [r5, #4]
		return 0;
    ca34:	e007      	b.n	ca46 <ull_conn_rx+0x9e>
	switch (pdu_rx->ll_id) {
    ca36:	b949      	cbnz	r1, ca4c <ull_conn_rx+0xa4>
		if (conn->llcp_enc.pause_rx) {
    ca38:	b110      	cbz	r0, ca40 <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_final =
    ca3a:	233d      	movs	r3, #61	; 0x3d
    ca3c:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ca40:	2301      	movs	r3, #1
    ca42:	712b      	strb	r3, [r5, #4]
	return 0;
    ca44:	2000      	movs	r0, #0
}
    ca46:	b005      	add	sp, #20
    ca48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
    ca4c:	2800      	cmp	r0, #0
    ca4e:	d0f9      	beq.n	ca44 <ull_conn_rx+0x9c>
			conn->llcp_terminate.reason_final =
    ca50:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ca52:	2201      	movs	r2, #1
	return 0;
    ca54:	4618      	mov	r0, r3
			conn->llcp_terminate.reason_final =
    ca56:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    ca5a:	712a      	strb	r2, [r5, #4]
}
    ca5c:	b005      	add	sp, #20
    ca5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
    ca62:	f1b8 0f18 	cmp.w	r8, #24
    ca66:	d81e      	bhi.n	caa6 <ull_conn_rx+0xfe>
    ca68:	e8df f018 	tbh	[pc, r8, lsl #1]
    ca6c:	02800126 	.word	0x02800126
    ca70:	001900dc 	.word	0x001900dc
    ca74:	001d001d 	.word	0x001d001d
    ca78:	03e3033c 	.word	0x03e3033c
    ca7c:	03030367 	.word	0x03030367
    ca80:	047602ba 	.word	0x047602ba
    ca84:	01b401f7 	.word	0x01b401f7
    ca88:	019f001d 	.word	0x019f001d
    ca8c:	024a001d 	.word	0x024a001d
    ca90:	01950226 	.word	0x01950226
    ca94:	00e800e8 	.word	0x00e800e8
    ca98:	001d0446 	.word	0x001d0446
    ca9c:	0409      	.short	0x0409
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
    ca9e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    caa2:	2b00      	cmp	r3, #0
    caa4:	db63      	blt.n	cb6e <ull_conn_rx+0x1c6>
	if (conn->common.txn_lock) {
    caa6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    caaa:	0798      	lsls	r0, r3, #30
    caac:	d4c8      	bmi.n	ca40 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    caae:	4881      	ldr	r0, [pc, #516]	; (ccb4 <ull_conn_rx+0x30c>)
    cab0:	f7fa f882 	bl	6bb8 <mem_acquire>
	if (!tx) {
    cab4:	2800      	cmp	r0, #0
    cab6:	f000 851b 	beq.w	d4f0 <ull_conn_rx+0xb48>
	conn->common.txn_lock = 1U;
    caba:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    cabe:	f043 0302 	orr.w	r3, r3, #2
    cac2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    cac6:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
    cac8:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    cacc:	f043 0303 	orr.w	r3, r3, #3
    cad0:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    cad2:	2302      	movs	r3, #2
    cad4:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    cad6:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    cada:	2307      	movs	r3, #7
    cadc:	71c3      	strb	r3, [r0, #7]
	if (
    cade:	b1f2      	cbz	r2, cb1e <ull_conn_rx+0x176>
	    !conn->llcp_enc.pause_tx &&
    cae0:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
    cae4:	0799      	lsls	r1, r3, #30
    cae6:	d41a      	bmi.n	cb1e <ull_conn_rx+0x176>
	    !conn->llcp_phy.pause_tx &&
    cae8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    caec:	07db      	lsls	r3, r3, #31
    caee:	d416      	bmi.n	cb1e <ull_conn_rx+0x176>
		if (conn->tx_head == conn->tx_data) {
    caf0:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
    caf4:	429a      	cmp	r2, r3
    caf6:	f000 8504 	beq.w	d502 <ull_conn_rx+0xb5a>
		} else if (!conn->tx_ctrl) {
    cafa:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    cafe:	2b00      	cmp	r3, #0
    cb00:	f000 8552 	beq.w	d5a8 <ull_conn_rx+0xc00>
	tx->next = conn->tx_ctrl_last->next;
    cb04:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
    cb08:	6813      	ldr	r3, [r2, #0]
    cb0a:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    cb0c:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    cb0e:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    cb10:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    cb14:	2a00      	cmp	r2, #0
    cb16:	d193      	bne.n	ca40 <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
    cb18:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    cb1c:	e790      	b.n	ca40 <ull_conn_rx+0x98>
		if (!conn->tx_ctrl) {
    cb1e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    cb22:	2b00      	cmp	r3, #0
    cb24:	f000 84da 	beq.w	d4dc <ull_conn_rx+0xb34>
	tx->next = conn->tx_ctrl_last->next;
    cb28:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    cb2c:	681a      	ldr	r2, [r3, #0]
    cb2e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    cb30:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    cb32:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
    cb34:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    cb38:	2a00      	cmp	r2, #0
    cb3a:	d181      	bne.n	ca40 <ull_conn_rx+0x98>
    cb3c:	e7ec      	b.n	cb18 <ull_conn_rx+0x170>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cb3e:	6833      	ldr	r3, [r6, #0]
    cb40:	2201      	movs	r2, #1
		return 0;
    cb42:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cb44:	711a      	strb	r2, [r3, #4]
}
    cb46:	b005      	add	sp, #20
    cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cb4c:	2201      	movs	r2, #1
    cb4e:	711a      	strb	r2, [r3, #4]
		return 0;
    cb50:	2000      	movs	r0, #0
}
    cb52:	4770      	bx	lr
	       (conn->lll.role &&
    cb54:	2900      	cmp	r1, #0
    cb56:	d05d      	beq.n	cc14 <ull_conn_rx+0x26c>
		 (conn->llcp_enc.refresh &&
    cb58:	f1b8 0f02 	cmp.w	r8, #2
    cb5c:	d062      	beq.n	cc24 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    cb5e:	f1b8 0f0b 	cmp.w	r8, #11
    cb62:	f000 84e1 	beq.w	d528 <ull_conn_rx+0xb80>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    cb66:	f1b8 0f03 	cmp.w	r8, #3
    cb6a:	f47f af51 	bne.w	ca10 <ull_conn_rx+0x68>
		if (!conn->lll.role ||
    cb6e:	7f6b      	ldrb	r3, [r5, #29]
    cb70:	2b17      	cmp	r3, #23
    cb72:	d198      	bne.n	caa6 <ull_conn_rx+0xfe>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
    cb74:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
    cb78:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    cb7c:	1a9b      	subs	r3, r3, r2
    cb7e:	f003 0303 	and.w	r3, r3, #3
    cb82:	2b02      	cmp	r3, #2
    cb84:	f001 818c 	beq.w	dea0 <ull_conn_rx+0x14f8>

		/* Start Enc Req to be scheduled by LL api */
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
    cb88:	2208      	movs	r2, #8
    cb8a:	f105 0120 	add.w	r1, r5, #32
    cb8e:	f204 1069 	addw	r0, r4, #361	; 0x169
    cb92:	f00c f935 	bl	18e00 <memcpy>
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
    cb96:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    cb9a:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
    cb9e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29

		/* Enc rsp to be scheduled in central prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    cba2:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
    cba6:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cbaa:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    cbac:	2301      	movs	r3, #1
    cbae:	f363 0201 	bfi	r2, r3, #0, #2
    cbb2:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cbb6:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
    cbb8:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
    cbbc:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
    cbbe:	3b02      	subs	r3, #2
    cbc0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* things from central stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[0],
    cbc4:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
    cbc6:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
    cbca:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    cbce:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    cbd2:	f00c f915 	bl	18e00 <memcpy>
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
    cbd6:	2204      	movs	r2, #4
    cbd8:	f105 0132 	add.w	r1, r5, #50	; 0x32
    cbdc:	f104 0094 	add.w	r0, r4, #148	; 0x94
    cbe0:	f00c f90e 	bl	18e00 <memcpy>
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
    cbe4:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    cbe8:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    cbec:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
    cbf0:	f043 0301 	orr.w	r3, r3, #1
    cbf4:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
    cbf8:	2000      	movs	r0, #0

		break;
    cbfa:	e724      	b.n	ca46 <ull_conn_rx+0x9e>
		 (conn->llcp_enc.refresh &&
    cbfc:	f1b8 0f02 	cmp.w	r8, #2
    cc00:	d010      	beq.n	cc24 <ull_conn_rx+0x27c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    cc02:	f1b8 0f0b 	cmp.w	r8, #11
    cc06:	f000 8477 	beq.w	d4f8 <ull_conn_rx+0xb50>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
    cc0a:	f1b8 0f04 	cmp.w	r8, #4
    cc0e:	f47f aefc 	bne.w	ca0a <ull_conn_rx+0x62>
    cc12:	e748      	b.n	caa6 <ull_conn_rx+0xfe>
		((!conn->llcp_enc.refresh &&
    cc14:	f1b8 0f07 	cmp.w	r8, #7
    cc18:	f000 830b 	beq.w	d232 <ull_conn_rx+0x88a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
    cc1c:	f1b8 0f02 	cmp.w	r8, #2
    cc20:	f47f aef6 	bne.w	ca10 <ull_conn_rx+0x68>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
    cc24:	7f6b      	ldrb	r3, [r5, #29]
    cc26:	2b02      	cmp	r3, #2
    cc28:	f47f af3d 	bne.w	caa6 <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_final =
    cc2c:	f895 2020 	ldrb.w	r2, [r5, #32]
    cc30:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    cc34:	2301      	movs	r3, #1
	int nack = 0;
    cc36:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    cc38:	712b      	strb	r3, [r5, #4]
}
    cc3a:	e704      	b.n	ca46 <ull_conn_rx+0x9e>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
    cc3c:	7f6b      	ldrb	r3, [r5, #29]
    cc3e:	2b09      	cmp	r3, #9
    cc40:	f47f af31 	bne.w	caa6 <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    cc44:	f1b8 0f14 	cmp.w	r8, #20
    cc48:	f000 84b8 	beq.w	d5bc <ull_conn_rx+0xc14>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    cc4c:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
    cc50:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
    cc54:	4293      	cmp	r3, r2
    cc56:	f001 804a 	beq.w	dcee <ull_conn_rx+0x1346>
	eff_rx_octets = conn->lll.max_rx_octets;
    cc5a:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
    cc5e:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
    cc62:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
    cc66:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    cc6a:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
    cc6e:	2300      	movs	r3, #0
	       tx) ||
    cc70:	f001 0107 	and.w	r1, r1, #7
    cc74:	2902      	cmp	r1, #2
    cc76:	f000 84c1 	beq.w	d5fc <ull_conn_rx+0xc54>
    cc7a:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
    cc7e:	f1b8 0f15 	cmp.w	r8, #21
    cc82:	f43f aedf 	beq.w	ca44 <ull_conn_rx+0x9c>
			mem_release(tx, &mem_conn_tx_ctrl.free);
    cc86:	4618      	mov	r0, r3
    cc88:	490a      	ldr	r1, [pc, #40]	; (ccb4 <ull_conn_rx+0x30c>)
    cc8a:	f7f9 ffaf 	bl	6bec <mem_release>
			if (conn->llcp_length.state ==
    cc8e:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
    cc92:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
    cc96:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
    cc9a:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
    cc9e:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
    cca0:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
    cca4:	f47f aece 	bne.w	ca44 <ull_conn_rx+0x9c>
				return -EBUSY;
    cca8:	f06f 000f 	mvn.w	r0, #15
    ccac:	e6cb      	b.n	ca46 <ull_conn_rx+0x9e>
    ccae:	bf00      	nop
    ccb0:	20000ec8 	.word	0x20000ec8
    ccb4:	20001d48 	.word	0x20001d48
		if (!conn->lll.role ||
    ccb8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    ccbc:	2b00      	cmp	r3, #0
    ccbe:	f6bf aef2 	bge.w	caa6 <ull_conn_rx+0xfe>
    ccc2:	7f6b      	ldrb	r3, [r5, #29]
    ccc4:	2b0c      	cmp	r3, #12
    ccc6:	f47f aeee 	bne.w	caa6 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
    ccca:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
    ccce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    ccd0:	1ad3      	subs	r3, r2, r3
    ccd2:	041b      	lsls	r3, r3, #16
    ccd4:	f100 8744 	bmi.w	db60 <ull_conn_rx+0x11b8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    ccd8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    ccdc:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    cce0:	1a5b      	subs	r3, r3, r1
    cce2:	f003 0303 	and.w	r3, r3, #3
    cce6:	2b02      	cmp	r3, #2
    cce8:	f000 87c4 	beq.w	dc74 <ull_conn_rx+0x12cc>
	if (!conn_upd_curr) {
    ccec:	4bba      	ldr	r3, [pc, #744]	; (cfd8 <ull_conn_rx+0x630>)
    ccee:	6819      	ldr	r1, [r3, #0]
    ccf0:	2900      	cmp	r1, #0
    ccf2:	f000 87e9 	beq.w	dcc8 <ull_conn_rx+0x1320>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
    ccf6:	f895 3020 	ldrb.w	r3, [r5, #32]
    ccfa:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
    ccfe:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
    cd02:	f240 41e2 	movw	r1, #1250	; 0x4e2
    cd06:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
    cd0a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
    cd0e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    cd12:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    cd16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
    cd1a:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
    cd1e:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    cd22:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    cd26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
    cd2a:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    cd2e:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    cd32:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
    cd36:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
    cd3a:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    cd3e:	f023 030f 	bic.w	r3, r3, #15
    cd42:	f043 0308 	orr.w	r3, r3, #8
    cd46:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
    cd4a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
    cd4e:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
    cd52:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
    cd56:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
    cd58:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
    cd5c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
    cd60:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
    cd62:	6832      	ldr	r2, [r6, #0]
    cd64:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
    cd66:	6832      	ldr	r2, [r6, #0]
    cd68:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
    cd6c:	2300      	movs	r3, #0
    cd6e:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cd70:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    cd74:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    cd78:	4293      	cmp	r3, r2
    cd7a:	d007      	beq.n	cd8c <ull_conn_rx+0x3e4>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
    cd7c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    cd80:	f003 030e 	and.w	r3, r3, #14
    cd84:	2b04      	cmp	r3, #4
    cd86:	d101      	bne.n	cd8c <ull_conn_rx+0x3e4>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    cd88:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
    cd8c:	2300      	movs	r3, #0
    cd8e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    cd92:	4618      	mov	r0, r3
		break;
    cd94:	e657      	b.n	ca46 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
    cd96:	7f6a      	ldrb	r2, [r5, #29]
    cd98:	2a01      	cmp	r2, #1
    cd9a:	f47f ae84 	bne.w	caa6 <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
    cd9e:	2300      	movs	r3, #0
    cda0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    cda4:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    cda6:	712a      	strb	r2, [r5, #4]
		break;
    cda8:	e64d      	b.n	ca46 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
    cdaa:	7f6b      	ldrb	r3, [r5, #29]
    cdac:	2b18      	cmp	r3, #24
    cdae:	f47f ae7a 	bne.w	caa6 <ull_conn_rx+0xfe>
	return conn_upd_curr && (conn_upd_curr != conn);
    cdb2:	4889      	ldr	r0, [pc, #548]	; (cfd8 <ull_conn_rx+0x630>)
    cdb4:	6803      	ldr	r3, [r0, #0]
    cdb6:	2b00      	cmp	r3, #0
    cdb8:	f000 83c2 	beq.w	d540 <ull_conn_rx+0xb98>
    cdbc:	429c      	cmp	r4, r3
    cdbe:	f000 83bf 	beq.w	d540 <ull_conn_rx+0xb98>
			nack = reject_ext_ind_send(conn, *rx,
    cdc2:	2320      	movs	r3, #32
    cdc4:	220f      	movs	r2, #15
    cdc6:	4629      	mov	r1, r5
    cdc8:	4620      	mov	r0, r4
}
    cdca:	b005      	add	sp, #20
    cdcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
    cdd0:	f7fe bf24 	b.w	bc1c <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
    cdd4:	7f6b      	ldrb	r3, [r5, #29]
    cdd6:	2b02      	cmp	r3, #2
    cdd8:	f47f ae65 	bne.w	caa6 <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
    cddc:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    cde0:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    cde4:	4293      	cmp	r3, r2
    cde6:	d004      	beq.n	cdf2 <ull_conn_rx+0x44a>
    cde8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    cdec:	2b03      	cmp	r3, #3
    cdee:	f000 86a1 	beq.w	db34 <ull_conn_rx+0x118c>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    cdf2:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
    cdf6:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    cdfa:	4293      	cmp	r3, r2
    cdfc:	f000 84eb 	beq.w	d7d6 <ull_conn_rx+0xe2e>
		rej_ext_ind->error_code = rej_ind->error_code;
    ce00:	f895 1020 	ldrb.w	r1, [r5, #32]
    ce04:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    ce08:	2923      	cmp	r1, #35	; 0x23
    ce0a:	d012      	beq.n	ce32 <ull_conn_rx+0x48a>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    ce0c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
    ce10:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    ce14:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
    ce18:	f36f 0200 	bfc	r2, #0, #1
    ce1c:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
    ce20:	2200      	movs	r2, #0
    ce22:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    ce26:	f3c3 0202 	ubfx	r2, r3, #0, #3
    ce2a:	f362 1306 	bfi	r3, r2, #4, #3
    ce2e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
    ce32:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    ce36:	075e      	lsls	r6, r3, #29
    ce38:	f57f ae02 	bpl.w	ca40 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    ce3c:	231c      	movs	r3, #28
    ce3e:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
    ce40:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
    ce42:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    ce46:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ce4a:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
    ce4c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    ce50:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
    ce54:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
    ce56:	77ab      	strb	r3, [r5, #30]
	if (err) {
    ce58:	e5f5      	b.n	ca46 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
    ce5a:	7f6e      	ldrb	r6, [r5, #29]
    ce5c:	2e06      	cmp	r6, #6
    ce5e:	f47f ae22 	bne.w	caa6 <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
    ce62:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    ce66:	07df      	lsls	r7, r3, #31
    ce68:	f140 85aa 	bpl.w	d9c0 <ull_conn_rx+0x1018>
	} else if (!conn->llcp_version.rx) {
    ce6c:	f013 0302 	ands.w	r3, r3, #2
    ce70:	f47f ade6 	bne.w	ca40 <ull_conn_rx+0x98>
		conn->llcp_version.ack = conn->llcp_version.req;
    ce74:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
    ce78:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
    ce7c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
    ce80:	f895 3020 	ldrb.w	r3, [r5, #32]
    ce84:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    ce88:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    ce8c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
    ce90:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
    ce94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ce98:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
    ce9c:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    cea0:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
    cea4:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
    cea8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
    ceac:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
    ceb0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
    ceb4:	2000      	movs	r0, #0
    ceb6:	e5c6      	b.n	ca46 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
    ceb8:	7f6f      	ldrb	r7, [r5, #29]
    ceba:	2f01      	cmp	r7, #1
    cebc:	f47f adf3 	bne.w	caa6 <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
    cec0:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    cec4:	f013 0602 	ands.w	r6, r3, #2
    cec8:	f040 85a5 	bne.w	da16 <ull_conn_rx+0x106e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    cecc:	4843      	ldr	r0, [pc, #268]	; (cfdc <ull_conn_rx+0x634>)
    cece:	f7f9 fe73 	bl	6bb8 <mem_acquire>
	if (!tx) {
    ced2:	4601      	mov	r1, r0
    ced4:	2800      	cmp	r0, #0
    ced6:	f000 830b 	beq.w	d4f0 <ull_conn_rx+0xb48>
	conn->common.txn_lock = 1U;
    ceda:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    cede:	f043 0302 	orr.w	r3, r3, #2
    cee2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    cee6:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    cee8:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    ceea:	f043 0303 	orr.w	r3, r3, #3
    ceee:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    cef0:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
    cef2:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    cef4:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    cef6:	f7fe fce9 	bl	b8cc <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    cefa:	712f      	strb	r7, [r5, #4]
	return 0;
    cefc:	4630      	mov	r0, r6
    cefe:	e5a2      	b.n	ca46 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
    cf00:	7f6b      	ldrb	r3, [r5, #29]
    cf02:	2b03      	cmp	r3, #3
    cf04:	f47f adcf 	bne.w	caa6 <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
    cf08:	f895 3020 	ldrb.w	r3, [r5, #32]
    cf0c:	3b03      	subs	r3, #3
    cf0e:	2b13      	cmp	r3, #19
    cf10:	f63f ad96 	bhi.w	ca40 <ull_conn_rx+0x98>
    cf14:	a201      	add	r2, pc, #4	; (adr r2, cf1c <ull_conn_rx+0x574>)
    cf16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cf1a:	bf00      	nop
    cf1c:	0000d44f 	.word	0x0000d44f
    cf20:	0000ca41 	.word	0x0000ca41
    cf24:	0000ca41 	.word	0x0000ca41
    cf28:	0000ca41 	.word	0x0000ca41
    cf2c:	0000ca41 	.word	0x0000ca41
    cf30:	0000ca41 	.word	0x0000ca41
    cf34:	0000ca41 	.word	0x0000ca41
    cf38:	0000ca41 	.word	0x0000ca41
    cf3c:	0000ca41 	.word	0x0000ca41
    cf40:	0000ca41 	.word	0x0000ca41
    cf44:	0000ca41 	.word	0x0000ca41
    cf48:	0000ca41 	.word	0x0000ca41
    cf4c:	0000d3d5 	.word	0x0000d3d5
    cf50:	0000ca41 	.word	0x0000ca41
    cf54:	0000ca41 	.word	0x0000ca41
    cf58:	0000ca41 	.word	0x0000ca41
    cf5c:	0000ca41 	.word	0x0000ca41
    cf60:	0000d397 	.word	0x0000d397
    cf64:	0000ca41 	.word	0x0000ca41
    cf68:	0000d48f 	.word	0x0000d48f
		if (!conn->lll.role ||
    cf6c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    cf70:	2b00      	cmp	r3, #0
    cf72:	f6bf ad98 	bge.w	caa6 <ull_conn_rx+0xfe>
    cf76:	7f6b      	ldrb	r3, [r5, #29]
    cf78:	2b08      	cmp	r3, #8
    cf7a:	f47f ad94 	bne.w	caa6 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
    cf7e:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    cf82:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    cf84:	1af3      	subs	r3, r6, r3
    cf86:	041f      	lsls	r7, r3, #16
    cf88:	f100 85ea 	bmi.w	db60 <ull_conn_rx+0x11b8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    cf8c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    cf90:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
    cf94:	1a9b      	subs	r3, r3, r2
    cf96:	f003 0303 	and.w	r3, r3, #3
    cf9a:	2b02      	cmp	r3, #2
    cf9c:	f000 866a 	beq.w	dc74 <ull_conn_rx+0x12cc>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
    cfa0:	2205      	movs	r2, #5
    cfa2:	f105 0120 	add.w	r1, r5, #32
    cfa6:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
    cfaa:	f00b ff29 	bl	18e00 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
    cfae:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
    cfb2:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
    cfb6:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
    cfba:	f36f 0200 	bfc	r2, #0, #1
    cfbe:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
    cfc2:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
    cfc4:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    cfc6:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
    cfc8:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
    cfcc:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
    cfd0:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    cfd2:	712a      	strb	r2, [r5, #4]
		if (err) {
    cfd4:	e537      	b.n	ca46 <ull_conn_rx+0x9e>
    cfd6:	bf00      	nop
    cfd8:	20001cb4 	.word	0x20001cb4
    cfdc:	20001d48 	.word	0x20001d48
		if (!conn->lll.role ||
    cfe0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    cfe4:	2b00      	cmp	r3, #0
    cfe6:	f6bf ad5e 	bge.w	caa6 <ull_conn_rx+0xfe>
    cfea:	7f6e      	ldrb	r6, [r5, #29]
    cfec:	2e01      	cmp	r6, #1
    cfee:	f47f ad5a 	bne.w	caa6 <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    cff2:	48d7      	ldr	r0, [pc, #860]	; (d350 <ull_conn_rx+0x9a8>)
    cff4:	f7f9 fde0 	bl	6bb8 <mem_acquire>
		if (!tx) {
    cff8:	2800      	cmp	r0, #0
    cffa:	f000 8279 	beq.w	d4f0 <ull_conn_rx+0xb48>
	conn->llcp_enc.pause_rx = 1U;
    cffe:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
    d002:	f023 0305 	bic.w	r3, r3, #5
    d006:	f043 0305 	orr.w	r3, r3, #5
    d00a:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
    d00e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    d012:	f36f 03c3 	bfc	r3, #3, #1
    d016:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d01a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d01c:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d01e:	f043 0303 	orr.w	r3, r3, #3
    d022:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
    d024:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d028:	220b      	movs	r2, #11
    d02a:	71c2      	strb	r2, [r0, #7]
	if (
    d02c:	2b00      	cmp	r3, #0
    d02e:	f000 82b0 	beq.w	d592 <ull_conn_rx+0xbea>
	    !conn->llcp_enc.pause_tx &&
    d032:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    d036:	0791      	lsls	r1, r2, #30
    d038:	f100 82ab 	bmi.w	d592 <ull_conn_rx+0xbea>
	    !conn->llcp_phy.pause_tx &&
    d03c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    d040:	07d2      	lsls	r2, r2, #31
    d042:	f100 82a6 	bmi.w	d592 <ull_conn_rx+0xbea>
		if (conn->tx_head == conn->tx_data) {
    d046:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    d04a:	4293      	cmp	r3, r2
    d04c:	f000 8752 	beq.w	def4 <ull_conn_rx+0x154c>
		} else if (!conn->tx_ctrl) {
    d050:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    d054:	2a00      	cmp	r2, #0
    d056:	f000 8765 	beq.w	df24 <ull_conn_rx+0x157c>
	tx->next = conn->tx_ctrl_last->next;
    d05a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d05e:	681a      	ldr	r2, [r3, #0]
    d060:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    d062:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    d064:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d068:	6803      	ldr	r3, [r0, #0]
    d06a:	2b00      	cmp	r3, #0
    d06c:	f47f ace8 	bne.w	ca40 <ull_conn_rx+0x98>
    d070:	e552      	b.n	cb18 <ull_conn_rx+0x170>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
    d072:	7f6b      	ldrb	r3, [r5, #29]
    d074:	2b09      	cmp	r3, #9
    d076:	f47f ad16 	bne.w	caa6 <ull_conn_rx+0xfe>
    d07a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d07c:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
    d07e:	49b5      	ldr	r1, [pc, #724]	; (d354 <ull_conn_rx+0x9ac>)
    d080:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    d084:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
    d088:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
    d08a:	400b      	ands	r3, r1
    d08c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    d090:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
    d094:	4013      	ands	r3, r2
    d096:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    d09a:	6a2e      	ldr	r6, [r5, #32]
    d09c:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
    d09e:	f7fc fbe5 	bl	986c <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
    d0a2:	4aac      	ldr	r2, [pc, #688]	; (d354 <ull_conn_rx+0x9ac>)
	conn->llcp_feature.ack = conn->llcp_feature.req;
    d0a4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    d0a8:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat &= LL_FEAT_BIT_MASK;
    d0ac:	4332      	orrs	r2, r6
	feat_result = feat_to_keep & feat_octet0;
    d0ae:	4002      	ands	r2, r0
    d0b0:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
	feat_result &= 0xFF;
    d0b4:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	conn->common.fex_valid = 1U;
    d0b8:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
    d0bc:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    d0be:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
    d0c2:	2300      	movs	r3, #0
    d0c4:	f005 050f 	and.w	r5, r5, #15
	conn->common.fex_valid = 1U;
    d0c8:	f041 0101 	orr.w	r1, r1, #1
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    d0cc:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
    d0d0:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
    d0d4:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	conn->llcp_feature.features_peer =
    d0d8:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
    d0dc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    d0e0:	4618      	mov	r0, r3
}
    d0e2:	e4b0      	b.n	ca46 <ull_conn_rx+0x9e>
		if ((conn->llcp_req == conn->llcp_ack) ||
    d0e4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    d0e8:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    d0ec:	4299      	cmp	r1, r3
    d0ee:	f43f acda 	beq.w	caa6 <ull_conn_rx+0xfe>
    d0f2:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
    d0f6:	2903      	cmp	r1, #3
    d0f8:	f47f acd5 	bne.w	caa6 <ull_conn_rx+0xfe>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
    d0fc:	7f69      	ldrb	r1, [r5, #29]
    d0fe:	2901      	cmp	r1, #1
    d100:	f47f acd1 	bne.w	caa6 <ull_conn_rx+0xfe>
		if (conn->lll.role) {
    d104:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
    d108:	2900      	cmp	r1, #0
    d10a:	f2c0 84e3 	blt.w	dad4 <ull_conn_rx+0x112c>
			conn->llcp_enc.pause_rx = 0U;
    d10e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
    d112:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
    d116:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
    d118:	f022 0203 	bic.w	r2, r2, #3
    d11c:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
    d120:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
    d124:	0750      	lsls	r0, r2, #29
    d126:	f57f ac8d 	bpl.w	ca44 <ull_conn_rx+0x9c>
			conn->llcp_enc.refresh = 0U;
    d12a:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d12e:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
    d130:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	int nack = 0;
    d134:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d136:	712b      	strb	r3, [r5, #4]
    d138:	e485      	b.n	ca46 <ull_conn_rx+0x9e>
		if (!conn->lll.role ||
    d13a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d13e:	2b00      	cmp	r3, #0
    d140:	f6bf acb1 	bge.w	caa6 <ull_conn_rx+0xfe>
    d144:	f895 901d 	ldrb.w	r9, [r5, #29]
    d148:	f1b9 0f09 	cmp.w	r9, #9
    d14c:	f47f acab 	bne.w	caa6 <ull_conn_rx+0xfe>
	if (conn->common.txn_lock) {
    d150:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    d154:	f010 0602 	ands.w	r6, r0, #2
    d158:	f47f ac72 	bne.w	ca40 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d15c:	487c      	ldr	r0, [pc, #496]	; (d350 <ull_conn_rx+0x9a8>)
    d15e:	f7f9 fd2b 	bl	6bb8 <mem_acquire>
	if (!tx) {
    d162:	4607      	mov	r7, r0
    d164:	2800      	cmp	r0, #0
    d166:	f000 81c3 	beq.w	d4f0 <ull_conn_rx+0xb48>
	conn->common.txn_lock = 1U;
    d16a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
    d16e:	4979      	ldr	r1, [pc, #484]	; (d354 <ull_conn_rx+0x9ac>)
	conn->common.txn_lock = 1U;
    d170:	f043 0302 	orr.w	r3, r3, #2
    d174:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
    d178:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d17a:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
    d17c:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    d180:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
    d184:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
    d186:	400b      	ands	r3, r1
    d188:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    d18c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
    d190:	4013      	ands	r3, r2
    d192:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    d196:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
    d19a:	f8d5 8020 	ldr.w	r8, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
    d19e:	f7fc fb65 	bl	986c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    d1a2:	f00a 030f 	and.w	r3, sl, #15
	conn->llcp_feature.features_peer =
    d1a6:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
    d1aa:	4b6a      	ldr	r3, [pc, #424]	; (d354 <ull_conn_rx+0x9ac>)
    d1ac:	ea48 0303 	orr.w	r3, r8, r3
	feat_result = feat_to_keep & feat_octet0;
    d1b0:	4003      	ands	r3, r0
	feat_result &= 0xFF;
    d1b2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    d1b6:	f028 08ff 	bic.w	r8, r8, #255	; 0xff
    d1ba:	ea43 0308 	orr.w	r3, r3, r8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    d1be:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
    d1c2:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
    d1c6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
    d1ca:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    d1ce:	f043 0301 	orr.w	r3, r3, #1
    d1d2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d1d6:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    d1d8:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d1dc:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    d1e0:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d1e2:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    d1e4:	18b8      	adds	r0, r7, r2
    d1e6:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    d1e8:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
    d1ec:	f00b fe13 	bl	18e16 <memset>
	feat = feat_land_octet0(ll_feat_get(),
    d1f0:	f7fc fb3c 	bl	986c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
    d1f4:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	dst[1] = val >> 8;
    d1f8:	737e      	strb	r6, [r7, #13]
	feat = feat_land_octet0(ll_feat_get(),
    d1fa:	4603      	mov	r3, r0
	feat_result = feat_to_keep & feat_octet0;
    d1fc:	401a      	ands	r2, r3
	feat_result &= 0xFF;
    d1fe:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
    d202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    d206:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
    d208:	0c1a      	lsrs	r2, r3, #16
    d20a:	f001 010f 	and.w	r1, r1, #15
	dst[0] = val;
    d20e:	723b      	strb	r3, [r7, #8]
    d210:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
    d212:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d216:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
    d218:	7339      	strb	r1, [r7, #12]
	ctrl_tx_sec_enqueue(conn, tx);
    d21a:	4620      	mov	r0, r4
	dst[1] = val >> 8;
    d21c:	727b      	strb	r3, [r7, #9]
	dst[0] = val;
    d21e:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
    d220:	73fe      	strb	r6, [r7, #15]
    d222:	72fa      	strb	r2, [r7, #11]
    d224:	4639      	mov	r1, r7
    d226:	f7fe fb51 	bl	b8cc <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    d22a:	2301      	movs	r3, #1
    d22c:	712b      	strb	r3, [r5, #4]
	return 0;
    d22e:	4630      	mov	r0, r6
    d230:	e409      	b.n	ca46 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
    d232:	7f6b      	ldrb	r3, [r5, #29]
    d234:	2b02      	cmp	r3, #2
    d236:	f47f ac36 	bne.w	caa6 <ull_conn_rx+0xfe>
			    conn->llcp_conn_param.req) &&
    d23a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
    d23e:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
    d242:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
    d246:	4291      	cmp	r1, r2
    d248:	d002      	beq.n	d250 <ull_conn_rx+0x8a8>
			    conn->llcp_conn_param.req) &&
    d24a:	2b0f      	cmp	r3, #15
    d24c:	f000 836d 	beq.w	d92a <ull_conn_rx+0xf82>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
    d250:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    d254:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
    d258:	4291      	cmp	r1, r2
    d25a:	d002      	beq.n	d262 <ull_conn_rx+0x8ba>
    d25c:	2b14      	cmp	r3, #20
    d25e:	f000 83e1 	beq.w	da24 <ull_conn_rx+0x107c>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
    d262:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
    d266:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
    d26a:	4291      	cmp	r1, r2
    d26c:	d002      	beq.n	d274 <ull_conn_rx+0x8cc>
    d26e:	2b16      	cmp	r3, #22
    d270:	f000 843c 	beq.w	daec <ull_conn_rx+0x1144>
			switch (llctrl->unknown_rsp.type) {
    d274:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d276:	bf04      	itt	eq
    d278:	2301      	moveq	r3, #1
    d27a:	712b      	strbeq	r3, [r5, #4]
				break;
    d27c:	e586      	b.n	cd8c <ull_conn_rx+0x3e4>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
    d27e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d282:	2b00      	cmp	r3, #0
    d284:	f6bf ac0f 	bge.w	caa6 <ull_conn_rx+0xfe>
    d288:	7f6b      	ldrb	r3, [r5, #29]
    d28a:	2b05      	cmp	r3, #5
    d28c:	f47f ac0b 	bne.w	caa6 <ull_conn_rx+0xfe>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
    d290:	f895 2020 	ldrb.w	r2, [r5, #32]
    d294:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    d298:	4313      	orrs	r3, r2
    d29a:	f013 0307 	ands.w	r3, r3, #7
    d29e:	f040 8471 	bne.w	db84 <ull_conn_rx+0x11dc>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    d2a2:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
    d2a6:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
    d2aa:	428a      	cmp	r2, r1
    d2ac:	f43f abc8 	beq.w	ca40 <ull_conn_rx+0x98>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    d2b0:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    d2b4:	f002 0203 	and.w	r2, r2, #3
    d2b8:	2a02      	cmp	r2, #2
    d2ba:	f47f abc1 	bne.w	ca40 <ull_conn_rx+0x98>
		conn->llcp_phy.pause_tx = 0U;
    d2be:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
    d2c2:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    d2c6:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
    d2ca:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
    d2ce:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    d2d2:	4608      	mov	r0, r1
    d2d4:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
    d2d8:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
    d2dc:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    d2e0:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
    d2e4:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
    d2e8:	f040 85e7 	bne.w	deba <ull_conn_rx+0x1512>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d2ec:	6833      	ldr	r3, [r6, #0]
    d2ee:	2101      	movs	r1, #1
    d2f0:	7119      	strb	r1, [r3, #4]
	int nack = 0;
    d2f2:	4610      	mov	r0, r2
    d2f4:	f7ff bba7 	b.w	ca46 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
    d2f8:	7f6b      	ldrb	r3, [r5, #29]
    d2fa:	2b03      	cmp	r3, #3
    d2fc:	f47f abd3 	bne.w	caa6 <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
    d300:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d304:	2b00      	cmp	r3, #0
    d306:	f2c0 828d 	blt.w	d824 <ull_conn_rx+0xe7c>
			if ((conn->llcp_phy.ack !=
    d30a:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
    d30e:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
    d312:	4281      	cmp	r1, r0
    d314:	d007      	beq.n	d326 <ull_conn_rx+0x97e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    d316:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
    d31a:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
    d31e:	3a01      	subs	r2, #1
    d320:	2a02      	cmp	r2, #2
    d322:	f240 83df 	bls.w	dae4 <ull_conn_rx+0x113c>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    d326:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    d32a:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
    d32e:	1a9b      	subs	r3, r3, r2
    d330:	f003 0303 	and.w	r3, r3, #3
    d334:	2b02      	cmp	r3, #2
    d336:	f000 8368 	beq.w	da0a <ull_conn_rx+0x1062>
				     LLCP_ENCRYPTION)) ||
    d33a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    d33e:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    d342:	429a      	cmp	r2, r3
    d344:	f000 8383 	beq.w	da4e <ull_conn_rx+0x10a6>
				nack = reject_ext_ind_send(conn, *rx,
    d348:	232a      	movs	r3, #42	; 0x2a
    d34a:	2216      	movs	r2, #22
    d34c:	e53b      	b.n	cdc6 <ull_conn_rx+0x41e>
    d34e:	bf00      	nop
    d350:	20001d48 	.word	0x20001d48
    d354:	087830d0 	.word	0x087830d0
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    d358:	7f6b      	ldrb	r3, [r5, #29]
    d35a:	2b01      	cmp	r3, #1
    d35c:	f47f aba3 	bne.w	caa6 <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
    d360:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d364:	2b00      	cmp	r3, #0
    d366:	f2c0 80e3 	blt.w	d530 <ull_conn_rx+0xb88>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d36a:	48d0      	ldr	r0, [pc, #832]	; (d6ac <ull_conn_rx+0xd04>)
    d36c:	f7f9 fc24 	bl	6bb8 <mem_acquire>
		if (!tx) {
    d370:	2800      	cmp	r0, #0
    d372:	f000 80bd 	beq.w	d4f0 <ull_conn_rx+0xb48>
	conn->llcp_enc.pause_rx = 1U;
    d376:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
    d37a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
    d37e:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
    d382:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
    d386:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d38a:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
    d38c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d390:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d392:	7142      	strb	r2, [r0, #5]
    d394:	e643      	b.n	d01e <ull_conn_rx+0x676>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
    d396:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    d39a:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
    d39e:	4293      	cmp	r3, r2
    d3a0:	f43f ab4e 	beq.w	ca40 <ull_conn_rx+0x98>
	conn->procedure_expire = 0U;
    d3a4:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    d3a6:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
    d3a8:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
    d3ac:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    d3b0:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    d3b2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    d3b6:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
    d3ba:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d3bc:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    d3be:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d3c2:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
    d3c4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    d3c8:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
    d3ca:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
    d3cc:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
    d3ce:	4618      	mov	r0, r3
    d3d0:	f7ff bb39 	b.w	ca46 <ull_conn_rx+0x9e>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    d3d4:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    d3d8:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
    d3dc:	429a      	cmp	r2, r3
    d3de:	f43f ab2f 	beq.w	ca40 <ull_conn_rx+0x98>
	if (!lll->role && (rej_ext_ind->error_code ==
    d3e2:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
    d3e6:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    d3ea:	2900      	cmp	r1, #0
    d3ec:	f2c0 8591 	blt.w	df12 <ull_conn_rx+0x156a>
    d3f0:	2a1a      	cmp	r2, #26
    d3f2:	f000 8620 	beq.w	e036 <ull_conn_rx+0x168e>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    d3f6:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    d3fa:	f002 010f 	and.w	r1, r2, #15
    d3fe:	2904      	cmp	r1, #4
    d400:	d106      	bne.n	d410 <ull_conn_rx+0xa68>
	conn_upd_curr = NULL;
    d402:	49ab      	ldr	r1, [pc, #684]	; (d6b0 <ull_conn_rx+0xd08>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d404:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    d408:	2300      	movs	r3, #0
    d40a:	600b      	str	r3, [r1, #0]
		conn->procedure_expire = 0U;
    d40c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
    d410:	06d2      	lsls	r2, r2, #27
    d412:	f57f ab15 	bpl.w	ca40 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d416:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    d418:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d41c:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    d41e:	f040 8472 	bne.w	dd06 <ull_conn_rx+0x135e>
	cu->status = rej_ext_ind->error_code;
    d422:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    d426:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
    d428:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
    d42a:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
    d42e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    d430:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
    d432:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
    d434:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
    d438:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
    d43c:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
    d43e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    d442:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
    d446:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
    d448:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
    d44a:	f7ff bafc 	b.w	ca46 <ull_conn_rx+0x9e>
		if ((conn->llcp_ack != conn->llcp_req) &&
    d44e:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
    d452:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
    d456:	428b      	cmp	r3, r1
    d458:	f43f aaf2 	beq.w	ca40 <ull_conn_rx+0x98>
    d45c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    d460:	2b03      	cmp	r3, #3
    d462:	f47f aaed 	bne.w	ca40 <ull_conn_rx+0x98>
	conn->llcp_enc.pause_rx = 0U;
    d466:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
    d46a:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
    d46e:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    d470:	f022 0203 	bic.w	r2, r2, #3
    d474:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
    d478:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
    d47c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    d480:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    d484:	210d      	movs	r1, #13
    d486:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
    d488:	4618      	mov	r0, r3
    d48a:	f7ff badc 	b.w	ca46 <ull_conn_rx+0x9e>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    d48e:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
    d492:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    d496:	428b      	cmp	r3, r1
    d498:	f43f aad2 	beq.w	ca40 <ull_conn_rx+0x98>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    d49c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    d4a0:	2a23      	cmp	r2, #35	; 0x23
    d4a2:	d012      	beq.n	d4ca <ull_conn_rx+0xb22>
		conn->llcp_phy.ack = conn->llcp_phy.req;
    d4a4:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
    d4a8:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    d4ac:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
    d4b0:	f36f 0100 	bfc	r1, #0, #1
    d4b4:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
    d4b8:	2100      	movs	r1, #0
    d4ba:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
    d4be:	f3c3 0102 	ubfx	r1, r3, #0, #3
    d4c2:	f361 1306 	bfi	r3, r1, #4, #3
    d4c6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
    d4ca:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    d4ce:	0759      	lsls	r1, r3, #29
    d4d0:	f57f aab6 	bpl.w	ca40 <ull_conn_rx+0x98>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d4d4:	231c      	movs	r3, #28
    d4d6:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
    d4d8:	772a      	strb	r2, [r5, #28]
    d4da:	e4b2      	b.n	ce42 <ull_conn_rx+0x49a>
			tx->next = conn->tx_head;
    d4dc:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    d4de:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    d4e2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d4e6:	2a00      	cmp	r2, #0
    d4e8:	f47f aaaa 	bne.w	ca40 <ull_conn_rx+0x98>
    d4ec:	f7ff bb14 	b.w	cb18 <ull_conn_rx+0x170>
		*err = -ENOBUFS;
    d4f0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    d4f4:	f7ff baa7 	b.w	ca46 <ull_conn_rx+0x9e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    d4f8:	7f6b      	ldrb	r3, [r5, #29]
    d4fa:	2b01      	cmp	r3, #1
    d4fc:	f47f aad3 	bne.w	caa6 <ull_conn_rx+0xfe>
    d500:	e733      	b.n	d36a <ull_conn_rx+0x9c2>
			conn->tx_data = conn->tx_data->next;
    d502:	6813      	ldr	r3, [r2, #0]
    d504:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    d508:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
    d50c:	2b00      	cmp	r3, #0
    d50e:	f47f aaf9 	bne.w	cb04 <ull_conn_rx+0x15c>
			tx->next = conn->tx_head->next;
    d512:	6813      	ldr	r3, [r2, #0]
    d514:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    d516:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    d518:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    d51a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
    d51e:	2a00      	cmp	r2, #0
    d520:	f47f aa8e 	bne.w	ca40 <ull_conn_rx+0x98>
    d524:	f7ff baf8 	b.w	cb18 <ull_conn_rx+0x170>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
    d528:	7f6b      	ldrb	r3, [r5, #29]
    d52a:	2b01      	cmp	r3, #1
    d52c:	f47f aabb 	bne.w	caa6 <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
    d530:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    d534:	f36f 1304 	bfc	r3, #4, #1
    d538:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
    d53c:	f7ff ba80 	b.w	ca40 <ull_conn_rx+0x98>
		if (!conn->lll.role) {
    d540:	f994 7039 	ldrsb.w	r7, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
    d544:	f894 6184 	ldrb.w	r6, [r4, #388]	; 0x184
					conn->llcp_conn_param.ack) &&
    d548:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		if (!conn->lll.role) {
    d54c:	2f00      	cmp	r7, #0
    d54e:	f2c0 80b1 	blt.w	d6b4 <ull_conn_rx+0xd0c>
			if ((conn->llcp_conn_param.req !=
    d552:	42b1      	cmp	r1, r6
    d554:	d00a      	beq.n	d56c <ull_conn_rx+0xbc4>
			    ((conn->llcp_conn_param.state ==
    d556:	f894 6186 	ldrb.w	r6, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
    d55a:	f016 0f0b 	tst.w	r6, #11
    d55e:	f000 825e 	beq.w	da1e <ull_conn_rx+0x1076>
			      LLCP_CPR_STATE_RSP_WAIT) ||
    d562:	f006 060f 	and.w	r6, r6, #15
    d566:	2e06      	cmp	r6, #6
    d568:	f000 8259 	beq.w	da1e <ull_conn_rx+0x1076>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
    d56c:	f894 60e4 	ldrb.w	r6, [r4, #228]	; 0xe4
    d570:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
    d574:	1bf6      	subs	r6, r6, r7
    d576:	f006 0603 	and.w	r6, r6, #3
    d57a:	2e02      	cmp	r6, #2
    d57c:	f000 83d2 	beq.w	dd24 <ull_conn_rx+0x137c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    d580:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
    d584:	f894 61bd 	ldrb.w	r6, [r4, #445]	; 0x1bd
    d588:	42b7      	cmp	r7, r6
    d58a:	f000 83e5 	beq.w	dd58 <ull_conn_rx+0x13b0>
				nack = reject_ext_ind_send(conn, *rx,
    d58e:	232a      	movs	r3, #42	; 0x2a
    d590:	e418      	b.n	cdc4 <ull_conn_rx+0x41c>
		if (!conn->tx_ctrl) {
    d592:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    d596:	2a00      	cmp	r2, #0
    d598:	f47f ad5f 	bne.w	d05a <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head;
    d59c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    d59e:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    d5a2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    d5a6:	e55f      	b.n	d068 <ull_conn_rx+0x6c0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    d5a8:	7913      	ldrb	r3, [r2, #4]
    d5aa:	f003 0303 	and.w	r3, r3, #3
    d5ae:	2b03      	cmp	r3, #3
    d5b0:	f000 82ce 	beq.w	db50 <ull_conn_rx+0x11a8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    d5b4:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
    d5b8:	f7ff baa6 	b.w	cb08 <ull_conn_rx+0x160>
	if (conn->common.txn_lock) {
    d5bc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    d5c0:	079b      	lsls	r3, r3, #30
    d5c2:	f53f aa3d 	bmi.w	ca40 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d5c6:	4839      	ldr	r0, [pc, #228]	; (d6ac <ull_conn_rx+0xd04>)
    d5c8:	f7f9 faf6 	bl	6bb8 <mem_acquire>
	if (!tx) {
    d5cc:	4603      	mov	r3, r0
    d5ce:	2800      	cmp	r0, #0
    d5d0:	d08e      	beq.n	d4f0 <ull_conn_rx+0xb48>
	conn->common.txn_lock = 1U;
    d5d2:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    d5d6:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
    d5da:	f8b4 b05a 	ldrh.w	fp, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
    d5de:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
    d5e2:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
    d5e6:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
    d5ea:	f042 0202 	orr.w	r2, r2, #2
    d5ee:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
    d5f2:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
    d5f6:	428a      	cmp	r2, r1
    d5f8:	f040 855b 	bne.w	e0b2 <ull_conn_rx+0x170a>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
    d5fc:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    d5fe:	291a      	cmp	r1, #26
    d600:	f240 8223 	bls.w	da4a <ull_conn_rx+0x10a2>
			eff_tx_octets = MIN(max_rx_octets,
    d604:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
    d608:	4281      	cmp	r1, r0
    d60a:	bf28      	it	cs
    d60c:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
    d60e:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
    d610:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
    d614:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
    d616:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
    d618:	bf34      	ite	cc
    d61a:	46de      	movcc	lr, fp
    d61c:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
    d620:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
    d624:	bf34      	ite	cc
    d626:	4640      	movcc	r0, r8
    d628:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
    d62c:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
    d630:	bf34      	ite	cc
    d632:	46cc      	movcc	ip, r9
    d634:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
    d638:	45de      	cmp	lr, fp
    d63a:	f000 831f 	beq.w	dc7c <ull_conn_rx+0x12d4>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
    d63e:	3a01      	subs	r2, #1
    d640:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
    d644:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
    d648:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
    d64c:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
    d650:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
    d654:	2b00      	cmp	r3, #0
    d656:	f000 836b 	beq.w	dd30 <ull_conn_rx+0x1388>
				conn->llcp_length.state =
    d65a:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
    d65e:	2505      	movs	r5, #5
    d660:	f365 0202 	bfi	r2, r5, #0, #3
    d664:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
    d668:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    d66c:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
    d66e:	6832      	ldr	r2, [r6, #0]
    d670:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
    d672:	6832      	ldr	r2, [r6, #0]
    d674:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
    d678:	2200      	movs	r2, #0
    d67a:	6032      	str	r2, [r6, #0]
	if (tx) {
    d67c:	2b00      	cmp	r3, #0
    d67e:	f43f a9e1 	beq.w	ca44 <ull_conn_rx+0x9c>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d682:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
    d684:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d686:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
    d68a:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d68c:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    d68e:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d690:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
    d692:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
    d694:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
    d698:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
    d69c:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    d69e:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d6a0:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
    d6a2:	f7fe f913 	bl	b8cc <ctrl_tx_sec_enqueue>
	return 0;
    d6a6:	2000      	movs	r0, #0
}
    d6a8:	f7ff b9cd 	b.w	ca46 <ull_conn_rx+0x9e>
    d6ac:	20001d48 	.word	0x20001d48
    d6b0:	20001cb4 	.word	0x20001cb4
		} else if ((conn->llcp_conn_param.req ==
    d6b4:	42b1      	cmp	r1, r6
    d6b6:	d005      	beq.n	d6c4 <ull_conn_rx+0xd1c>
			    conn->llcp_conn_param.ack) ||
    d6b8:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    d6bc:	f012 0f0b 	tst.w	r2, #11
    d6c0:	f47f a9be 	bne.w	ca40 <ull_conn_rx+0x98>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
    d6c4:	f8b5 a020 	ldrh.w	sl, [r5, #32]
    d6c8:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    d6cc:	2a05      	cmp	r2, #5
    d6ce:	f240 80a6 	bls.w	d81e <ull_conn_rx+0xe76>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
    d6d2:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
    d6d6:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    d6da:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
    d6de:	f200 809e 	bhi.w	d81e <ull_conn_rx+0xe76>
			    (interval_max > 3200) ||
    d6e2:	42b2      	cmp	r2, r6
    d6e4:	f200 809b 	bhi.w	d81e <ull_conn_rx+0xe76>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
    d6e8:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
    d6ec:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
    d6f0:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d6f4:	f080 8093 	bcs.w	d81e <ull_conn_rx+0xe76>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
    d6f8:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
    d6fc:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
    d700:	f1a2 070a 	sub.w	r7, r2, #10
    d704:	f640 4b76 	movw	fp, #3190	; 0xc76
    d708:	b2bf      	uxth	r7, r7
    d70a:	455f      	cmp	r7, fp
    d70c:	f200 8087 	bhi.w	d81e <ull_conn_rx+0xe76>
			     ((latency + 1) * interval_max)) ||
    d710:	f10c 0701 	add.w	r7, ip, #1
    d714:	b2bf      	uxth	r7, r7
    d716:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
    d71a:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
    d71e:	d27e      	bcs.n	d81e <ull_conn_rx+0xe76>
			     ((latency + 1) * interval_max)) ||
    d720:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
    d724:	455e      	cmp	r6, fp
    d726:	d37a      	bcc.n	d81e <ull_conn_rx+0xe76>
			conn->llcp_conn_param.interval_min = interval_min;
    d728:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
    d72c:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
    d730:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
    d734:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
    d738:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
    d73c:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
    d740:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
    d744:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d748:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
    d74c:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
    d750:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
    d754:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
    d758:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
    d75c:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
    d760:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
    d764:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
    d768:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
    d76c:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
    d770:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
    d774:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
    d778:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
    d77c:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
    d780:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
    d784:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
    d788:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
    d78c:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
    d790:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
    d794:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
    d798:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
    d79c:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
    d7a0:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
    d7a4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
    d7a8:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
    d7ac:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
    d7ae:	42be      	cmp	r6, r7
    d7b0:	f000 840b 	beq.w	dfca <ull_conn_rx+0x1622>
				conn->llcp_conn_param.state =
    d7b4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    d7b8:	2503      	movs	r5, #3
    d7ba:	f365 0203 	bfi	r2, r5, #0, #4
    d7be:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
    d7c2:	3901      	subs	r1, #1
    d7c4:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
    d7c8:	2b00      	cmp	r3, #0
    d7ca:	f47f a93b 	bne.w	ca44 <ull_conn_rx+0x9c>
		conn_upd_curr = conn;
    d7ce:	6004      	str	r4, [r0, #0]
	int nack = 0;
    d7d0:	4618      	mov	r0, r3
    d7d2:	f7ff b938 	b.w	ca46 <ull_conn_rx+0x9e>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    d7d6:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    d7da:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
    d7de:	4293      	cmp	r3, r2
    d7e0:	f43f add9 	beq.w	d396 <ull_conn_rx+0x9ee>
		rej_ext_ind->error_code = rej_ind->error_code;
    d7e4:	f895 3020 	ldrb.w	r3, [r5, #32]
    d7e8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
    d7ec:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
    d7f0:	2900      	cmp	r1, #0
    d7f2:	f2c0 82a9 	blt.w	dd48 <ull_conn_rx+0x13a0>
    d7f6:	2b1a      	cmp	r3, #26
    d7f8:	f000 841d 	beq.w	e036 <ull_conn_rx+0x168e>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
    d7fc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    d800:	f003 010f 	and.w	r1, r3, #15
    d804:	2904      	cmp	r1, #4
    d806:	d106      	bne.n	d816 <ull_conn_rx+0xe6e>
	conn_upd_curr = NULL;
    d808:	49d9      	ldr	r1, [pc, #868]	; (db70 <ull_conn_rx+0x11c8>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d80a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    d80e:	2200      	movs	r2, #0
    d810:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
    d812:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
    d816:	06d8      	lsls	r0, r3, #27
    d818:	f57f a912 	bpl.w	ca40 <ull_conn_rx+0x98>
    d81c:	e5fb      	b.n	d416 <ull_conn_rx+0xa6e>
				nack = reject_ext_ind_send(conn, *rx,
    d81e:	231e      	movs	r3, #30
    d820:	f7ff bad0 	b.w	cdc4 <ull_conn_rx+0x41c>
	if (conn->common.txn_lock) {
    d824:	f894 70d8 	ldrb.w	r7, [r4, #216]	; 0xd8
    d828:	f017 0702 	ands.w	r7, r7, #2
    d82c:	f47f a908 	bne.w	ca40 <ull_conn_rx+0x98>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d830:	48d0      	ldr	r0, [pc, #832]	; (db74 <ull_conn_rx+0x11cc>)
    d832:	f7f9 f9c1 	bl	6bb8 <mem_acquire>
	if (!tx) {
    d836:	4602      	mov	r2, r0
    d838:	2800      	cmp	r0, #0
    d83a:	f43f ae59 	beq.w	d4f0 <ull_conn_rx+0xb48>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    d83e:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
    d842:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
    d846:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    d84a:	2002      	movs	r0, #2
    d84c:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
    d850:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    d854:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
    d858:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
	conn->common.txn_lock = 1U;
    d85c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
			conn->phy_pref_tx;
    d860:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	if (conn->llcp_phy.ack ==
    d864:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
    d866:	f3c3 0602 	ubfx	r6, r3, #0, #3
    d86a:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
    d86e:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
    d872:	d114      	bne.n	d89e <ull_conn_rx+0xef6>
		conn->llcp_phy.ack--;
    d874:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
    d876:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
    d87a:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
    d87e:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
    d882:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
    d886:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
    d88a:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
    d88e:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->procedure_expire =
    d892:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
    d896:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
    d89a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
    d89e:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
    d8a2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
    d8a6:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
    d8aa:	f3c1 0c82 	ubfx	ip, r1, #2, #3
    d8ae:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
    d8b2:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
    d8b6:	009b      	lsls	r3, r3, #2
    d8b8:	f001 0103 	and.w	r1, r1, #3
    d8bc:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
    d8c0:	430b      	orrs	r3, r1
    d8c2:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    d8c6:	2303      	movs	r3, #3
    d8c8:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    d8ca:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d8cc:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
    d8ce:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    d8d2:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    d8d4:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d8d6:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    d8da:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
    d8dc:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d8e0:	7110      	strb	r0, [r2, #4]
	if (
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	f000 80a8 	beq.w	da38 <ull_conn_rx+0x1090>
	    !conn->llcp_enc.pause_tx &&
    d8e8:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
    d8ec:	0786      	lsls	r6, r0, #30
    d8ee:	f100 80a3 	bmi.w	da38 <ull_conn_rx+0x1090>
	    !conn->llcp_phy.pause_tx &&
    d8f2:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
    d8f6:	07c0      	lsls	r0, r0, #31
    d8f8:	f100 809e 	bmi.w	da38 <ull_conn_rx+0x1090>
		if (conn->tx_head == conn->tx_data) {
    d8fc:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
    d900:	4283      	cmp	r3, r0
    d902:	f000 8334 	beq.w	df6e <ull_conn_rx+0x15c6>
		} else if (!conn->tx_ctrl) {
    d906:	2900      	cmp	r1, #0
    d908:	f000 8375 	beq.w	dff6 <ull_conn_rx+0x164e>
	tx->next = conn->tx_ctrl_last->next;
    d90c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    d910:	6819      	ldr	r1, [r3, #0]
    d912:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    d914:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    d916:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
    d91a:	6813      	ldr	r3, [r2, #0]
    d91c:	2b00      	cmp	r3, #0
    d91e:	f47f a88f 	bne.w	ca40 <ull_conn_rx+0x98>
		conn->tx_data_last = tx;
    d922:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    d926:	f7ff b88b 	b.w	ca40 <ull_conn_rx+0x98>
			conn->llcp_conn_param.disabled = 1U;
    d92a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    d92e:	f043 0320 	orr.w	r3, r3, #32
    d932:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
    d936:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    d93a:	2b00      	cmp	r3, #0
    d93c:	f2c0 81c7 	blt.w	dcce <ull_conn_rx+0x1326>
				LL_ASSERT(conn->llcp_cu.req ==
    d940:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
    d944:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    d948:	429a      	cmp	r2, r3
    d94a:	d00e      	beq.n	d96a <ull_conn_rx+0xfc2>
    d94c:	4a8a      	ldr	r2, [pc, #552]	; (db78 <ull_conn_rx+0x11d0>)
    d94e:	498b      	ldr	r1, [pc, #556]	; (db7c <ull_conn_rx+0x11d4>)
    d950:	488b      	ldr	r0, [pc, #556]	; (db80 <ull_conn_rx+0x11d8>)
    d952:	f641 33e6 	movw	r3, #7142	; 0x1be6
    d956:	f00a fc07 	bl	18168 <printk>
    d95a:	4040      	eors	r0, r0
    d95c:	f380 8811 	msr	BASEPRI, r0
    d960:	f04f 0003 	mov.w	r0, #3
    d964:	df02      	svc	2
    d966:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
    d96a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    d96e:	2106      	movs	r1, #6
    d970:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
    d974:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
    d976:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
    d978:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
    d97c:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d980:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
    d982:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    d986:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    d98a:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
    d98e:	00db      	lsls	r3, r3, #3
    d990:	f022 020f 	bic.w	r2, r2, #15
    d994:	430b      	orrs	r3, r1
    d996:	4313      	orrs	r3, r2
    d998:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
    d99c:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
    d9a0:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
    d9a4:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
    d9a8:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
    d9aa:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
    d9ae:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
    d9b2:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
    d9b6:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    d9ba:	7129      	strb	r1, [r5, #4]
				break;
    d9bc:	f7ff b843 	b.w	ca46 <ull_conn_rx+0x9e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    d9c0:	486c      	ldr	r0, [pc, #432]	; (db74 <ull_conn_rx+0x11cc>)
    d9c2:	f7f9 f8f9 	bl	6bb8 <mem_acquire>
		if (!tx) {
    d9c6:	4601      	mov	r1, r0
    d9c8:	2800      	cmp	r0, #0
    d9ca:	f43f ad91 	beq.w	d4f0 <ull_conn_rx+0xb48>
		conn->llcp_version.tx = 1U;
    d9ce:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    d9d2:	f043 0301 	orr.w	r3, r3, #1
    d9d6:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d9da:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
    d9dc:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d9de:	220c      	movs	r2, #12
    d9e0:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
    d9e2:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d9e4:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    d9e8:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    d9ec:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    d9ee:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
    d9f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    d9f4:	2205      	movs	r2, #5
		v->sub_version_number =
    d9f6:	72c3      	strb	r3, [r0, #11]
    d9f8:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
    d9fa:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
    d9fc:	4620      	mov	r0, r4
    d9fe:	f7fd ff65 	bl	b8cc <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    da02:	2301      	movs	r3, #1
    da04:	712b      	strb	r3, [r5, #4]
    da06:	f7ff ba3b 	b.w	ce80 <ull_conn_rx+0x4d8>
				      0x03) == 0x02) &&
    da0a:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    da0e:	2b03      	cmp	r3, #3
    da10:	f47f ac9a 	bne.w	d348 <ull_conn_rx+0x9a0>
    da14:	e491      	b.n	d33a <ull_conn_rx+0x992>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
    da16:	712f      	strb	r7, [r5, #4]
		*err = 0U;
    da18:	2000      	movs	r0, #0
    da1a:	f7ff b814 	b.w	ca46 <ull_conn_rx+0x9e>
				nack = reject_ext_ind_send(conn, *rx,
    da1e:	2323      	movs	r3, #35	; 0x23
    da20:	f7ff b9d0 	b.w	cdc4 <ull_conn_rx+0x41c>
			conn->llcp_length.disabled = 1U;
    da24:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
    da28:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
    da2c:	f043 0308 	orr.w	r3, r3, #8
    da30:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
    da34:	f7ff b9aa 	b.w	cd8c <ull_conn_rx+0x3e4>
		if (!conn->tx_ctrl) {
    da38:	2900      	cmp	r1, #0
    da3a:	f47f af67 	bne.w	d90c <ull_conn_rx+0xf64>
			tx->next = conn->tx_head;
    da3e:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
    da40:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    da44:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
    da48:	e767      	b.n	d91a <ull_conn_rx+0xf72>
    da4a:	4651      	mov	r1, sl
    da4c:	e5df      	b.n	d60e <ull_conn_rx+0xc66>
				conn->llcp_phy.state =
    da4e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
    da52:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
    da54:	f043 0303 	orr.w	r3, r3, #3
    da58:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
    da5c:	d111      	bne.n	da82 <ull_conn_rx+0x10da>
					conn->llcp_phy.tx =
    da5e:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
    da62:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
    da66:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
    da68:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
    da6c:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
    da70:	f240 43fc 	movw	r3, #1276	; 0x4fc
    da74:	f022 0204 	bic.w	r2, r2, #4
    da78:	ea03 0380 	and.w	r3, r3, r0, lsl #2
    da7c:	4313      	orrs	r3, r2
    da7e:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
    da82:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    da86:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
    da8a:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
    da8e:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
    da92:	f003 0203 	and.w	r2, r3, #3
    da96:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    da9a:	4003      	ands	r3, r0
    da9c:	009b      	lsls	r3, r3, #2
    da9e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    daa2:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    daa4:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
    daa8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
    daac:	d002      	beq.n	dab4 <ull_conn_rx+0x110c>
    daae:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    dab2:	d105      	bne.n	dac0 <ull_conn_rx+0x1118>
					conn->llcp_phy.tx = 0;
    dab4:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    dab8:	f003 0303 	and.w	r3, r3, #3
    dabc:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
    dac0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dac4:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
    dac6:	4313      	orrs	r3, r2
    dac8:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
    dacc:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dace:	712a      	strb	r2, [r5, #4]
    dad0:	f7fe bfb9 	b.w	ca46 <ull_conn_rx+0x9e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
    dad4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    dad8:	f36f 0301 	bfc	r3, #0, #2
    dadc:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    dae0:	f7ff bb20 	b.w	d124 <ull_conn_rx+0x77c>
				nack = reject_ext_ind_send(conn, *rx,
    dae4:	2323      	movs	r3, #35	; 0x23
    dae6:	2216      	movs	r2, #22
    dae8:	f7ff b96d 	b.w	cdc6 <ull_conn_rx+0x41e>
			lll->phy_tx_time = lll->phy_tx;
    daec:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
    daf0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
    daf4:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
    daf8:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
    dafc:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
    dafe:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
    db02:	f361 1206 	bfi	r2, r1, #4, #3
    db06:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
    db0a:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
    db0e:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
    db12:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    db16:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
    db18:	f000 80ec 	beq.w	dcf4 <ull_conn_rx+0x134c>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    db1c:	221c      	movs	r2, #28
    db1e:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
    db20:	2300      	movs	r3, #0
    db22:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
    db24:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
    db26:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    db2a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    db2e:	77ab      	strb	r3, [r5, #30]
    db30:	f7ff b92c 	b.w	cd8c <ull_conn_rx+0x3e4>
	conn->llcp_enc.pause_rx = 0U;
    db34:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
    db38:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
    db3c:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
    db3e:	f021 0103 	bic.w	r1, r1, #3
    db42:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
    db46:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
    db4a:	4618      	mov	r0, r3
    db4c:	f7fe bf7b 	b.w	ca46 <ull_conn_rx+0x9e>
	    ((pdu_data_tx->llctrl.opcode !=
    db50:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    db52:	2b03      	cmp	r3, #3
    db54:	f43f acdd 	beq.w	d512 <ull_conn_rx+0xb6a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    db58:	2b0a      	cmp	r3, #10
    db5a:	f47f ad2b 	bne.w	d5b4 <ull_conn_rx+0xc0c>
    db5e:	e4d8      	b.n	d512 <ull_conn_rx+0xb6a>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    db60:	2301      	movs	r3, #1
    db62:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
    db64:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
    db66:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
    db6a:	2000      	movs	r0, #0
    db6c:	f7fe bf6b 	b.w	ca46 <ull_conn_rx+0x9e>
    db70:	20001cb4 	.word	0x20001cb4
    db74:	20001d48 	.word	0x20001d48
    db78:	0001d244 	.word	0x0001d244
    db7c:	0001d390 	.word	0x0001d390
    db80:	0001cde4 	.word	0x0001cde4
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
    db84:	2101      	movs	r1, #1
    db86:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
    db8a:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
    db8e:	f7f9 f9e9 	bl	6f64 <util_ones_count_get>
    db92:	2801      	cmp	r0, #1
    db94:	f200 80b2 	bhi.w	dcfc <ull_conn_rx+0x1354>
	phy = ind->p_to_c_phy;
    db98:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    db9c:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
    dba0:	f10d 000f 	add.w	r0, sp, #15
    dba4:	2101      	movs	r1, #1
    dba6:	f7f9 f9dd 	bl	6f64 <util_ones_count_get>
    dbaa:	2801      	cmp	r0, #1
    dbac:	f200 80a6 	bhi.w	dcfc <ull_conn_rx+0x1354>
	instant = sys_le16_to_cpu(ind->instant);
    dbb0:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
    dbb2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    dbb4:	1ad3      	subs	r3, r2, r3
    dbb6:	041b      	lsls	r3, r3, #16
    dbb8:	f100 8288 	bmi.w	e0cc <ull_conn_rx+0x1724>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    dbbc:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    dbc0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    dbc4:	1a5b      	subs	r3, r3, r1
    dbc6:	f003 0303 	and.w	r3, r3, #3
    dbca:	2b02      	cmp	r3, #2
    dbcc:	f000 8279 	beq.w	e0c2 <ull_conn_rx+0x171a>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    dbd0:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    dbd4:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    dbd8:	4283      	cmp	r3, r0
    dbda:	d018      	beq.n	dc0e <ull_conn_rx+0x1266>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    dbdc:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    dbe0:	f003 0303 	and.w	r3, r3, #3
    dbe4:	2b02      	cmp	r3, #2
    dbe6:	d112      	bne.n	dc0e <ull_conn_rx+0x1266>
		conn->llcp_phy.pause_tx = 0U;
    dbe8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
    dbec:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
    dbf0:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    dbf4:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
    dbf8:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    dbfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
    dc00:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
    dc04:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    dc06:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
    dc0a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
    dc0e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
    dc12:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
    dc16:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
    dc1a:	009b      	lsls	r3, r3, #2
    dc1c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    dc20:	f003 031c 	and.w	r3, r3, #28
    dc24:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    dc28:	f002 0202 	and.w	r2, r2, #2
    dc2c:	4313      	orrs	r3, r2
    dc2e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
    dc32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    dc36:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
    dc38:	6833      	ldr	r3, [r6, #0]
    dc3a:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
    dc3c:	6832      	ldr	r2, [r6, #0]
    dc3e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
    dc42:	2300      	movs	r3, #0
    dc44:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
    dc46:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
    dc4a:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
    dc4c:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
    dc4e:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
    dc52:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
    dc56:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
    dc5a:	f43e aef4 	beq.w	ca46 <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
    dc5e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    dc62:	f3c2 0282 	ubfx	r2, r2, #2, #3
    dc66:	f362 1106 	bfi	r1, r2, #4, #3
    dc6a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
    dc6e:	4618      	mov	r0, r3
    dc70:	f7fe bee9 	b.w	ca46 <ull_conn_rx+0x9e>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
    dc74:	2301      	movs	r3, #1
    dc76:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
    dc78:	232a      	movs	r3, #42	; 0x2a
    dc7a:	e774      	b.n	db66 <ull_conn_rx+0x11be>
			conn->procedure_expire = 0U;
    dc7c:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    dc7e:	4551      	cmp	r1, sl
			conn->llcp_length.ack = conn->llcp_length.req;
    dc80:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
    dc84:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    dc88:	f000 8129 	beq.w	dede <ull_conn_rx+0x1536>
			conn->lll.max_rx_time = eff_rx_time;
    dc8c:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
    dc90:	2b00      	cmp	r3, #0
    dc92:	f000 811f 	beq.w	ded4 <ull_conn_rx+0x152c>
					(conn->llcp_length.req - 1);
    dc96:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
    dc98:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
    dc9c:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
    dca0:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
    dca4:	2603      	movs	r6, #3
    dca6:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
    dcaa:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
    dcae:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
    dcb2:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
    dcb6:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
    dcba:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
    dcbe:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
    dcc0:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
    dcc4:	84e8      	strh	r0, [r5, #38]	; 0x26
    dcc6:	e4d9      	b.n	d67c <ull_conn_rx+0xcd4>
		conn_upd_curr = conn;
    dcc8:	601c      	str	r4, [r3, #0]
    dcca:	f7ff b814 	b.w	ccf6 <ull_conn_rx+0x34e>
	conn_upd_curr = NULL;
    dcce:	4bce      	ldr	r3, [pc, #824]	; (e008 <ull_conn_rx+0x1660>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    dcd0:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    dcd4:	2200      	movs	r2, #0
    dcd6:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
    dcd8:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    dcdc:	f013 0310 	ands.w	r3, r3, #16
    dce0:	f040 80c5 	bne.w	de6e <ull_conn_rx+0x14c6>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dce4:	2201      	movs	r2, #1
    dce6:	712a      	strb	r2, [r5, #4]
	int nack = 0;
    dce8:	4618      	mov	r0, r3
				break;
    dcea:	f7fe beac 	b.w	ca46 <ull_conn_rx+0x9e>
	struct node_tx *tx = NULL;
    dcee:	2300      	movs	r3, #0
    dcf0:	f7fe bfc5 	b.w	cc7e <ull_conn_rx+0x2d6>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dcf4:	2201      	movs	r2, #1
    dcf6:	711a      	strb	r2, [r3, #4]
    dcf8:	f7ff b848 	b.w	cd8c <ull_conn_rx+0x3e4>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dcfc:	6833      	ldr	r3, [r6, #0]
    dcfe:	2201      	movs	r2, #1
    dd00:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
    dd02:	231e      	movs	r3, #30
    dd04:	e72f      	b.n	db66 <ull_conn_rx+0x11be>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    dd06:	4ac1      	ldr	r2, [pc, #772]	; (e00c <ull_conn_rx+0x1664>)
    dd08:	49c1      	ldr	r1, [pc, #772]	; (e010 <ull_conn_rx+0x1668>)
    dd0a:	48c2      	ldr	r0, [pc, #776]	; (e014 <ull_conn_rx+0x166c>)
    dd0c:	f241 43d1 	movw	r3, #5329	; 0x14d1
    dd10:	f00a fa2a 	bl	18168 <printk>
    dd14:	4040      	eors	r0, r0
    dd16:	f380 8811 	msr	BASEPRI, r0
    dd1a:	f04f 0003 	mov.w	r0, #3
    dd1e:	df02      	svc	2
    dd20:	f7ff bb7f 	b.w	d422 <ull_conn_rx+0xa7a>
				      0x03) == 0x02) &&
    dd24:	f894 60e6 	ldrb.w	r6, [r4, #230]	; 0xe6
    dd28:	2e03      	cmp	r6, #3
    dd2a:	f47f ac30 	bne.w	d58e <ull_conn_rx+0xbe6>
    dd2e:	e427      	b.n	d580 <ull_conn_rx+0xbd8>
				conn->llcp_length.state =
    dd30:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
    dd34:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
    dd38:	2504      	movs	r5, #4
    dd3a:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
    dd3e:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
    dd42:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
    dd46:	e48f      	b.n	d668 <ull_conn_rx+0xcc0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    dd48:	2b23      	cmp	r3, #35	; 0x23
    dd4a:	f43f ad57 	beq.w	d7fc <ull_conn_rx+0xe54>
			conn->periph.ticks_to_offset =
    dd4e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    dd52:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    dd56:	e551      	b.n	d7fc <ull_conn_rx+0xe54>
				uint16_t interval_min =
    dd58:	f8b5 9020 	ldrh.w	r9, [r5, #32]
    dd5c:	fa1f f689 	uxth.w	r6, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    dd60:	2e05      	cmp	r6, #5
    dd62:	f67f ad5c 	bls.w	d81e <ull_conn_rx+0xe76>
				uint16_t interval_max =
    dd66:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
    dd6a:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
    dd6e:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
    dd72:	f63f ad54 	bhi.w	d81e <ull_conn_rx+0xe76>
				    (interval_max > 3200) ||
    dd76:	4576      	cmp	r6, lr
    dd78:	f63f ad51 	bhi.w	d81e <ull_conn_rx+0xe76>
				uint16_t latency =
    dd7c:	8cae      	ldrh	r6, [r5, #36]	; 0x24
    dd7e:	f8ad 6006 	strh.w	r6, [sp, #6]
    dd82:	b2b6      	uxth	r6, r6
				    (interval_min > interval_max) ||
    dd84:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
    dd88:	f4bf ad49 	bcs.w	d81e <ull_conn_rx+0xe76>
				uint16_t timeout =
    dd8c:	8cef      	ldrh	r7, [r5, #38]	; 0x26
    dd8e:	fa1f fc87 	uxth.w	ip, r7
				    (latency > 499) ||
    dd92:	f1ac 0a0a 	sub.w	sl, ip, #10
    dd96:	f640 4b76 	movw	fp, #3190	; 0xc76
    dd9a:	fa1f fa8a 	uxth.w	sl, sl
    dd9e:	45da      	cmp	sl, fp
    dda0:	f63f ad3d 	bhi.w	d81e <ull_conn_rx+0xe76>
				     ((latency + 1) * interval_max)) ||
    dda4:	f106 0a01 	add.w	sl, r6, #1
    dda8:	fa1f fa8a 	uxth.w	sl, sl
    ddac:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
    ddb0:	ebba 0f8c 	cmp.w	sl, ip, lsl #2
    ddb4:	f4bf ad33 	bcs.w	d81e <ull_conn_rx+0xe76>
				     ((latency + 1) * interval_max)) ||
    ddb8:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
    ddbc:	45de      	cmp	lr, fp
    ddbe:	f4ff ad2e 	bcc.w	d81e <ull_conn_rx+0xe76>
				conn->llcp_conn_param.interval_max =
    ddc2:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.latency =	latency;
    ddc6:	f8bd 8006 	ldrh.w	r8, [sp, #6]
				conn->llcp_conn_param.interval_min =
    ddca:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.latency =	latency;
    ddce:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
    ddd2:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
    ddd6:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
    ddda:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
    ddde:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
    dde2:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    dde6:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
    ddea:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
    ddee:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
    ddf2:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
    ddf6:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
    ddfa:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
    ddfe:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
    de02:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
    de06:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
    de0a:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
    de0e:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
    de12:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
    de16:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
    de1a:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
    de1e:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
    de22:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
    de26:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
    de2a:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
    de2e:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
    de32:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
    de36:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
    de3a:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
    de3e:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
    de42:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
    de46:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
    de4a:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
    de4c:	45be      	cmp	lr, r7
    de4e:	f000 809a 	beq.w	df86 <ull_conn_rx+0x15de>
					if (conn->llcp_enc.pause_tx) {
    de52:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
    de56:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
    de5a:	f43f acad 	beq.w	d7b8 <ull_conn_rx+0xe10>
						conn->llcp_conn_param.state =
    de5e:	2602      	movs	r6, #2
    de60:	f366 0203 	bfi	r2, r6, #0, #4
    de64:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
    de68:	2201      	movs	r2, #1
    de6a:	712a      	strb	r2, [r5, #4]
    de6c:	e4a9      	b.n	d7c2 <ull_conn_rx+0xe1a>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    de6e:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    de70:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    de74:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    de76:	d15e      	bne.n	df36 <ull_conn_rx+0x158e>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    de78:	231a      	movs	r3, #26
    de7a:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
    de7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
    de7e:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
    de82:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
    de84:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
    de86:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
    de8a:	227d      	movs	r2, #125	; 0x7d
    de8c:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
    de90:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
    de92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    de96:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
    de9a:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
    de9c:	f7fe bf76 	b.w	cd8c <ull_conn_rx+0x3e4>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
    dea0:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
    dea4:	3202      	adds	r2, #2
    dea6:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
    deaa:	2b00      	cmp	r3, #0
    deac:	d151      	bne.n	df52 <ull_conn_rx+0x15aa>
			conn->periph.llcp_type = conn->llcp_type;
    deae:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
    deb2:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
    deb6:	f7fe be67 	b.w	cb88 <ull_conn_rx+0x1e0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    deba:	6832      	ldr	r2, [r6, #0]
    debc:	201c      	movs	r0, #28
    debe:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
    dec0:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
    dec2:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
    dec4:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
    dec8:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
    deca:	f3c2 0302 	ubfx	r3, r2, #0, #3
    dece:	77ab      	strb	r3, [r5, #30]
		if (err) {
    ded0:	f7fe bdb9 	b.w	ca46 <ull_conn_rx+0x9e>
				conn->lll.max_tx_octets = eff_tx_octets;
    ded4:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
    ded8:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
    dedc:	e6ed      	b.n	dcba <ull_conn_rx+0x1312>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
    dede:	4540      	cmp	r0, r8
    dee0:	f47f aed4 	bne.w	dc8c <ull_conn_rx+0x12e4>
			    eff_rx_time == conn->lll.max_rx_time &&
    dee4:	45cc      	cmp	ip, r9
    dee6:	f47f aed1 	bne.w	dc8c <ull_conn_rx+0x12e4>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    deea:	6832      	ldr	r2, [r6, #0]
    deec:	2501      	movs	r5, #1
    deee:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
    def0:	f7ff bbc4 	b.w	d67c <ull_conn_rx+0xcd4>
			conn->tx_data = conn->tx_data->next;
    def4:	681a      	ldr	r2, [r3, #0]
    def6:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    defa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    defe:	2a00      	cmp	r2, #0
    df00:	f47f a8ab 	bne.w	d05a <ull_conn_rx+0x6b2>
			tx->next = conn->tx_head->next;
    df04:	681a      	ldr	r2, [r3, #0]
    df06:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    df08:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    df0a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    df0e:	f7ff b8ab 	b.w	d068 <ull_conn_rx+0x6c0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
    df12:	2a23      	cmp	r2, #35	; 0x23
    df14:	f43f aa6f 	beq.w	d3f6 <ull_conn_rx+0xa4e>
			conn->periph.ticks_to_offset =
    df18:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
    df1c:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
    df20:	f7ff ba69 	b.w	d3f6 <ull_conn_rx+0xa4e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    df24:	791a      	ldrb	r2, [r3, #4]
    df26:	f002 0203 	and.w	r2, r2, #3
    df2a:	2a03      	cmp	r2, #3
    df2c:	d076      	beq.n	e01c <ull_conn_rx+0x1674>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    df2e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    df32:	f7ff b892 	b.w	d05a <ull_conn_rx+0x6b2>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
    df36:	4a35      	ldr	r2, [pc, #212]	; (e00c <ull_conn_rx+0x1664>)
    df38:	4935      	ldr	r1, [pc, #212]	; (e010 <ull_conn_rx+0x1668>)
    df3a:	4836      	ldr	r0, [pc, #216]	; (e014 <ull_conn_rx+0x166c>)
    df3c:	f641 4313 	movw	r3, #7187	; 0x1c13
    df40:	f00a f912 	bl	18168 <printk>
    df44:	4040      	eors	r0, r0
    df46:	f380 8811 	msr	BASEPRI, r0
    df4a:	f04f 0003 	mov.w	r0, #3
    df4e:	df02      	svc	2
    df50:	e792      	b.n	de78 <ull_conn_rx+0x14d0>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
    df52:	4a2e      	ldr	r2, [pc, #184]	; (e00c <ull_conn_rx+0x1664>)
    df54:	4930      	ldr	r1, [pc, #192]	; (e018 <ull_conn_rx+0x1670>)
    df56:	482f      	ldr	r0, [pc, #188]	; (e014 <ull_conn_rx+0x166c>)
    df58:	f641 139e 	movw	r3, #6558	; 0x199e
    df5c:	f00a f904 	bl	18168 <printk>
    df60:	4040      	eors	r0, r0
    df62:	f380 8811 	msr	BASEPRI, r0
    df66:	f04f 0003 	mov.w	r0, #3
    df6a:	df02      	svc	2
    df6c:	e79f      	b.n	deae <ull_conn_rx+0x1506>
			conn->tx_data = conn->tx_data->next;
    df6e:	6818      	ldr	r0, [r3, #0]
    df70:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    df74:	2900      	cmp	r1, #0
    df76:	f47f acc9 	bne.w	d90c <ull_conn_rx+0xf64>
			tx->next = conn->tx_head->next;
    df7a:	6819      	ldr	r1, [r3, #0]
    df7c:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
    df7e:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
    df80:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
    df84:	e4c9      	b.n	d91a <ull_conn_rx+0xf72>
				     lll->interval) ||
    df86:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
    df8a:	45b6      	cmp	lr, r6
    df8c:	f47f af61 	bne.w	de52 <ull_conn_rx+0x14aa>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    df90:	f240 46e2 	movw	r6, #1250	; 0x4e2
    df94:	fb06 f707 	mul.w	r7, r6, r7
    df98:	f242 7610 	movw	r6, #10000	; 0x2710
    df9c:	fb06 760c 	mla	r6, r6, ip, r7
    dfa0:	3e01      	subs	r6, #1
    dfa2:	fbb6 f6f7 	udiv	r6, r6, r7
				     lll->latency) ||
    dfa6:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
    dfaa:	b2b6      	uxth	r6, r6
    dfac:	42b7      	cmp	r7, r6
    dfae:	f47f af50 	bne.w	de52 <ull_conn_rx+0x14aa>
				conn->llcp_conn_param.state =
    dfb2:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
    dfb6:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
    dfba:	f042 0201 	orr.w	r2, r2, #1
    dfbe:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    dfc2:	2201      	movs	r2, #1
    dfc4:	712a      	strb	r2, [r5, #4]
    dfc6:	f7ff bbfc 	b.w	d7c2 <ull_conn_rx+0xe1a>
			     lll->interval) ||
    dfca:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
    dfcc:	4567      	cmp	r7, ip
    dfce:	f47f abf1 	bne.w	d7b4 <ull_conn_rx+0xe0c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    dfd2:	f240 47e2 	movw	r7, #1250	; 0x4e2
    dfd6:	fb07 f606 	mul.w	r6, r7, r6
    dfda:	f242 7710 	movw	r7, #10000	; 0x2710
    dfde:	fb07 6202 	mla	r2, r7, r2, r6
    dfe2:	3a01      	subs	r2, #1
    dfe4:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
    dfe8:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
    dfec:	b292      	uxth	r2, r2
    dfee:	4296      	cmp	r6, r2
    dff0:	f47f abe0 	bne.w	d7b4 <ull_conn_rx+0xe0c>
    dff4:	e7dd      	b.n	dfb2 <ull_conn_rx+0x160a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    dff6:	7919      	ldrb	r1, [r3, #4]
    dff8:	f001 0103 	and.w	r1, r1, #3
    dffc:	2903      	cmp	r1, #3
    dffe:	d014      	beq.n	e02a <ull_conn_rx+0x1682>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e000:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    e004:	e482      	b.n	d90c <ull_conn_rx+0xf64>
    e006:	bf00      	nop
    e008:	20001cb4 	.word	0x20001cb4
    e00c:	0001d244 	.word	0x0001d244
    e010:	0001cf0c 	.word	0x0001cf0c
    e014:	0001cde4 	.word	0x0001cde4
    e018:	0001d36c 	.word	0x0001d36c
	    ((pdu_data_tx->llctrl.opcode !=
    e01c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e01e:	2a03      	cmp	r2, #3
    e020:	f43f af70 	beq.w	df04 <ull_conn_rx+0x155c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e024:	2a0a      	cmp	r2, #10
    e026:	d182      	bne.n	df2e <ull_conn_rx+0x1586>
    e028:	e76c      	b.n	df04 <ull_conn_rx+0x155c>
	    ((pdu_data_tx->llctrl.opcode !=
    e02a:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e02c:	2903      	cmp	r1, #3
    e02e:	d0a4      	beq.n	df7a <ull_conn_rx+0x15d2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    e030:	290a      	cmp	r1, #10
    e032:	d1e5      	bne.n	e000 <ull_conn_rx+0x1658>
    e034:	e7a1      	b.n	df7a <ull_conn_rx+0x15d2>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
    e036:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
    e03a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    e03e:	429a      	cmp	r2, r3
    e040:	d00e      	beq.n	e060 <ull_conn_rx+0x16b8>
    e042:	4a25      	ldr	r2, [pc, #148]	; (e0d8 <ull_conn_rx+0x1730>)
    e044:	4925      	ldr	r1, [pc, #148]	; (e0dc <ull_conn_rx+0x1734>)
    e046:	4826      	ldr	r0, [pc, #152]	; (e0e0 <ull_conn_rx+0x1738>)
    e048:	f44f 53a5 	mov.w	r3, #5280	; 0x14a0
    e04c:	f00a f88c 	bl	18168 <printk>
    e050:	4040      	eors	r0, r0
    e052:	f380 8811 	msr	BASEPRI, r0
    e056:	f04f 0003 	mov.w	r0, #3
    e05a:	df02      	svc	2
    e05c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    e060:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
    e064:	2106      	movs	r1, #6
    e066:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
    e06a:	3b01      	subs	r3, #1
    e06c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    e070:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    e074:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e078:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
    e07c:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e07e:	00db      	lsls	r3, r3, #3
    e080:	430b      	orrs	r3, r1
    e082:	f022 020f 	bic.w	r2, r2, #15
    e086:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
    e088:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    e08c:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    e090:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
    e094:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
    e098:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    e09a:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
    e09e:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
    e0a2:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    e0a6:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    e0aa:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
    e0ae:	f7fe bcc7 	b.w	ca40 <ull_conn_rx+0x98>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
    e0b2:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
    e0b6:	f011 0f06 	tst.w	r1, #6
    e0ba:	f43f aa9f 	beq.w	d5fc <ull_conn_rx+0xc54>
    e0be:	f7fe bdd7 	b.w	cc70 <ull_conn_rx+0x2c8>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e0c2:	6833      	ldr	r3, [r6, #0]
    e0c4:	2201      	movs	r2, #1
    e0c6:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
    e0c8:	232a      	movs	r3, #42	; 0x2a
    e0ca:	e54c      	b.n	db66 <ull_conn_rx+0x11be>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
    e0cc:	6833      	ldr	r3, [r6, #0]
    e0ce:	2201      	movs	r2, #1
    e0d0:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
    e0d2:	2328      	movs	r3, #40	; 0x28
    e0d4:	e547      	b.n	db66 <ull_conn_rx+0x11be>
    e0d6:	bf00      	nop
    e0d8:	0001d244 	.word	0x0001d244
    e0dc:	0001d390 	.word	0x0001d390
    e0e0:	0001cde4 	.word	0x0001cde4

0000e0e4 <ull_conn_llcp>:
{
    e0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e0e8:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
    e0ea:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
    e0ee:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    e0f2:	4298      	cmp	r0, r3
{
    e0f4:	460d      	mov	r5, r1
    e0f6:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    e0f8:	d030      	beq.n	e15c <ull_conn_llcp+0x78>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    e0fa:	1a1b      	subs	r3, r3, r0
    e0fc:	f003 0303 	and.w	r3, r3, #3
    e100:	2b02      	cmp	r3, #2
    e102:	d010      	beq.n	e126 <ull_conn_llcp+0x42>
    e104:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
    e108:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    e10a:	f1bc 0f00 	cmp.w	ip, #0
    e10e:	db4e      	blt.n	e1ae <ull_conn_llcp+0xca>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
    e110:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
    e114:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
    e118:	1a9b      	subs	r3, r3, r2
    e11a:	b2db      	uxtb	r3, r3
    e11c:	2b01      	cmp	r3, #1
    e11e:	d05f      	beq.n	e1e0 <ull_conn_llcp+0xfc>
	return 0;
    e120:	2000      	movs	r0, #0
}
    e122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    e126:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
    e12a:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    e12e:	429a      	cmp	r2, r3
    e130:	d006      	beq.n	e140 <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
    e132:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
    e136:	f003 0306 	and.w	r3, r3, #6
    e13a:	2b04      	cmp	r3, #4
    e13c:	f000 81f4 	beq.w	e528 <ull_conn_llcp+0x444>
		switch (conn->llcp_type) {
    e140:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
    e144:	1e7b      	subs	r3, r7, #1
    e146:	2b05      	cmp	r3, #5
    e148:	f200 81d8 	bhi.w	e4fc <ull_conn_llcp+0x418>
    e14c:	e8df f013 	tbh	[pc, r3, lsl #1]
    e150:	01720024 	.word	0x01720024
    e154:	01d600eb 	.word	0x01d600eb
    e158:	00a500b0 	.word	0x00a500b0
    e15c:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
    e160:	2a00      	cmp	r2, #0
    e162:	4694      	mov	ip, r2
    e164:	f2c0 81da 	blt.w	e51c <ull_conn_llcp+0x438>
	    !conn->llcp_enc.pause_rx) {
    e168:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
    e16c:	f017 0801 	ands.w	r8, r7, #1
    e170:	d1cb      	bne.n	e10a <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    e172:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
    e176:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
    e17a:	45ce      	cmp	lr, r9
    e17c:	f000 8304 	beq.w	e788 <ull_conn_llcp+0x6a4>
			conn->llcp_type = LLCP_CONN_UPD;
    e180:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
    e182:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
    e184:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
    e188:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    e18c:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    e190:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
    e194:	429a      	cmp	r2, r3
    e196:	d1cc      	bne.n	e132 <ull_conn_llcp+0x4e>
			if (event_conn_upd_prep(conn, lazy,
    e198:	462a      	mov	r2, r5
    e19a:	4631      	mov	r1, r6
    e19c:	4620      	mov	r0, r4
    e19e:	f7f3 f89b 	bl	12d8 <event_conn_upd_prep>
    e1a2:	2800      	cmp	r0, #0
    e1a4:	f040 81b7 	bne.w	e516 <ull_conn_llcp+0x432>
				return -ECANCELED;
    e1a8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    e1ac:	e7b9      	b.n	e122 <ull_conn_llcp+0x3e>
    e1ae:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    e1b2:	2900      	cmp	r1, #0
    e1b4:	d0ac      	beq.n	e110 <ull_conn_llcp+0x2c>
		switch (conn->periph.llcp_type) {
    e1b6:	2902      	cmp	r1, #2
    e1b8:	f000 816e 	beq.w	e498 <ull_conn_llcp+0x3b4>
    e1bc:	2906      	cmp	r1, #6
    e1be:	d05a      	beq.n	e276 <ull_conn_llcp+0x192>
    e1c0:	2901      	cmp	r1, #1
    e1c2:	d061      	beq.n	e288 <ull_conn_llcp+0x1a4>
			LL_ASSERT(0);
    e1c4:	4ac9      	ldr	r2, [pc, #804]	; (e4ec <ull_conn_llcp+0x408>)
    e1c6:	49ca      	ldr	r1, [pc, #808]	; (e4f0 <ull_conn_llcp+0x40c>)
    e1c8:	48ca      	ldr	r0, [pc, #808]	; (e4f4 <ull_conn_llcp+0x410>)
    e1ca:	f240 5312 	movw	r3, #1298	; 0x512
    e1ce:	f009 ffcb 	bl	18168 <printk>
    e1d2:	4040      	eors	r0, r0
    e1d4:	f380 8811 	msr	BASEPRI, r0
    e1d8:	f04f 0003 	mov.w	r0, #3
    e1dc:	df02      	svc	2
			break;
    e1de:	e797      	b.n	e110 <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e1e0:	48c5      	ldr	r0, [pc, #788]	; (e4f8 <ull_conn_llcp+0x414>)
    e1e2:	f7f8 fce9 	bl	6bb8 <mem_acquire>
		if (tx) {
    e1e6:	2800      	cmp	r0, #0
    e1e8:	d038      	beq.n	e25c <ull_conn_llcp+0x178>
			conn->llcp_terminate.ack--;
    e1ea:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
    e1ee:	3b01      	subs	r3, #1
    e1f0:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e1f4:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    e1f6:	2202      	movs	r2, #2
    e1f8:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    e1fa:	f043 0303 	orr.w	r3, r3, #3
    e1fe:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    e200:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
    e202:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
    e206:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
		if (!conn->tx_ctrl) {
    e20a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			pdu_tx->llctrl.terminate_ind.error_code =
    e20e:	7202      	strb	r2, [r0, #8]
	if (
    e210:	b1b3      	cbz	r3, e240 <ull_conn_llcp+0x15c>
	    !conn->llcp_enc.pause_tx &&
    e212:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    e216:	0795      	lsls	r5, r2, #30
    e218:	d412      	bmi.n	e240 <ull_conn_llcp+0x15c>
	    !conn->llcp_phy.pause_tx &&
    e21a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    e21e:	07d2      	lsls	r2, r2, #31
    e220:	d40e      	bmi.n	e240 <ull_conn_llcp+0x15c>
		if (conn->tx_head == conn->tx_data) {
    e222:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    e226:	4293      	cmp	r3, r2
    e228:	f000 8568 	beq.w	ecfc <ull_conn_llcp+0xc18>
		} else if (!conn->tx_ctrl) {
    e22c:	b959      	cbnz	r1, e246 <ull_conn_llcp+0x162>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    e22e:	791a      	ldrb	r2, [r3, #4]
    e230:	f002 0203 	and.w	r2, r2, #3
    e234:	2a03      	cmp	r2, #3
    e236:	f000 8705 	beq.w	f044 <ull_conn_llcp+0xf60>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    e23a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    e23e:	e004      	b.n	e24a <ull_conn_llcp+0x166>
		if (!conn->tx_ctrl) {
    e240:	2900      	cmp	r1, #0
    e242:	f000 82f5 	beq.w	e830 <ull_conn_llcp+0x74c>
	tx->next = conn->tx_ctrl_last->next;
    e246:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    e24a:	681a      	ldr	r2, [r3, #0]
    e24c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    e24e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    e250:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    e252:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e256:	2b00      	cmp	r3, #0
    e258:	f000 816a 	beq.w	e530 <ull_conn_llcp+0x44c>
		if (!conn->procedure_expire) {
    e25c:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    e260:	2800      	cmp	r0, #0
    e262:	f47f af5d 	bne.w	e120 <ull_conn_llcp+0x3c>
			conn->procedure_expire = conn->supervision_reload;
    e266:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
    e26a:	2b01      	cmp	r3, #1
    e26c:	f240 82dc 	bls.w	e828 <ull_conn_llcp+0x744>
			conn->procedure_expire = conn->supervision_reload;
    e270:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    e274:	e754      	b.n	e120 <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
    e276:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
    e278:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    e27a:	440a      	add	r2, r1
    e27c:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
    e27e:	4620      	mov	r0, r4
    e280:	b291      	uxth	r1, r2
    e282:	f7fd fe27 	bl	bed4 <event_phy_upd_ind_prep>
		break;
    e286:	e743      	b.n	e110 <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
    e288:	462a      	mov	r2, r5
    e28a:	4631      	mov	r1, r6
    e28c:	4620      	mov	r0, r4
    e28e:	f7f3 f823 	bl	12d8 <event_conn_upd_prep>
    e292:	2800      	cmp	r0, #0
    e294:	f47f af3c 	bne.w	e110 <ull_conn_llcp+0x2c>
    e298:	e786      	b.n	e1a8 <ull_conn_llcp+0xc4>
			event_counter = lll->event_counter +
    e29a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
    e29c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    e29e:	4419      	add	r1, r3
    e2a0:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
    e2a2:	b289      	uxth	r1, r1
    e2a4:	4620      	mov	r0, r4
    e2a6:	f7fd fe15 	bl	bed4 <event_phy_upd_ind_prep>
		break;
    e2aa:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    e2ae:	e72c      	b.n	e10a <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e2b0:	4891      	ldr	r0, [pc, #580]	; (e4f8 <ull_conn_llcp+0x414>)
    e2b2:	f7f8 fc81 	bl	6bb8 <mem_acquire>
	if (tx) {
    e2b6:	2800      	cmp	r0, #0
    e2b8:	f000 812d 	beq.w	e516 <ull_conn_llcp+0x432>
		conn->llcp_ack = conn->llcp_req;
    e2bc:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    e2c0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e2c4:	7903      	ldrb	r3, [r0, #4]
    e2c6:	f043 0303 	orr.w	r3, r3, #3
    e2ca:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    e2cc:	2301      	movs	r3, #1
    e2ce:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    e2d0:	2312      	movs	r3, #18
    e2d2:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
    e2d4:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
	if (
    e2d8:	2b00      	cmp	r3, #0
    e2da:	f000 82b2 	beq.w	e842 <ull_conn_llcp+0x75e>
	    !conn->llcp_enc.pause_tx &&
    e2de:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    e2e2:	078f      	lsls	r7, r1, #30
    e2e4:	f100 82ad 	bmi.w	e842 <ull_conn_llcp+0x75e>
	    !conn->llcp_phy.pause_tx &&
    e2e8:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    e2ec:	07c9      	lsls	r1, r1, #31
    e2ee:	f100 82a8 	bmi.w	e842 <ull_conn_llcp+0x75e>
		if (conn->tx_head == conn->tx_data) {
    e2f2:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    e2f6:	428b      	cmp	r3, r1
    e2f8:	f000 8681 	beq.w	effe <ull_conn_llcp+0xf1a>
		} else if (!conn->tx_ctrl) {
    e2fc:	2a00      	cmp	r2, #0
    e2fe:	f000 86ac 	beq.w	f05a <ull_conn_llcp+0xf76>
	tx->next = conn->tx_ctrl_last->next;
    e302:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    e306:	681a      	ldr	r2, [r3, #0]
    e308:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    e30a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    e30c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
    e30e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e312:	2b00      	cmp	r3, #0
    e314:	f000 83e2 	beq.w	eadc <ull_conn_llcp+0x9f8>
		conn->procedure_expire = conn->procedure_reload;
    e318:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    e31c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    e320:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    e324:	e6f1      	b.n	e10a <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
    e326:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    e32a:	f013 0803 	ands.w	r8, r3, #3
    e32e:	f000 8151 	beq.w	e5d4 <ull_conn_llcp+0x4f0>
		if (lll->role &&
    e332:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    e336:	2b00      	cmp	r3, #0
    e338:	f6bf aeea 	bge.w	e110 <ull_conn_llcp+0x2c>
    e33c:	f1b8 0f01 	cmp.w	r8, #1
    e340:	f47f af35 	bne.w	e1ae <ull_conn_llcp+0xca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e344:	486c      	ldr	r0, [pc, #432]	; (e4f8 <ull_conn_llcp+0x414>)
    e346:	f7f8 fc37 	bl	6bb8 <mem_acquire>
	if (!tx) {
    e34a:	4607      	mov	r7, r0
    e34c:	2800      	cmp	r0, #0
    e34e:	f000 80e2 	beq.w	e516 <ull_conn_llcp+0x432>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e352:	7903      	ldrb	r3, [r0, #4]
    e354:	f043 0303 	orr.w	r3, r3, #3
    e358:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    e35a:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    e35e:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    e360:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    e364:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    e366:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    e36a:	210c      	movs	r1, #12
    e36c:	4640      	mov	r0, r8
    e36e:	f003 faa5 	bl	118bc <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
    e372:	4641      	mov	r1, r8
    e374:	2208      	movs	r2, #8
    e376:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
    e37a:	f00a fd41 	bl	18e00 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
    e37e:	464a      	mov	r2, r9
    e380:	f107 0110 	add.w	r1, r7, #16
    e384:	f104 0098 	add.w	r0, r4, #152	; 0x98
    e388:	f00a fd3a 	bl	18e00 <memcpy>
	    conn->tx_head &&
    e38c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    e390:	2b00      	cmp	r3, #0
    e392:	f000 84a7 	beq.w	ece4 <ull_conn_llcp+0xc00>
	    !conn->llcp_enc.pause_tx &&
    e396:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    e39a:	0791      	lsls	r1, r2, #30
    e39c:	f100 84a2 	bmi.w	ece4 <ull_conn_llcp+0xc00>
	    !conn->llcp_phy.pause_tx &&
    e3a0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    e3a4:	07d2      	lsls	r2, r2, #31
    e3a6:	f100 849d 	bmi.w	ece4 <ull_conn_llcp+0xc00>
		if (conn->tx_head == conn->tx_data) {
    e3aa:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e3ae:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    e3b2:	428b      	cmp	r3, r1
    e3b4:	f000 8682 	beq.w	f0bc <ull_conn_llcp+0xfd8>
		} else if (!conn->tx_ctrl) {
    e3b8:	2a00      	cmp	r2, #0
    e3ba:	f000 874a 	beq.w	f252 <ull_conn_llcp+0x116e>
	tx->next = conn->tx_ctrl_last->next;
    e3be:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    e3c2:	681a      	ldr	r2, [r3, #0]
    e3c4:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
    e3c6:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    e3c8:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
    e3ca:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e3ce:	2b00      	cmp	r3, #0
    e3d0:	f000 85a6 	beq.w	ef20 <ull_conn_llcp+0xe3c>
			rx = ll_pdu_rx_alloc();
    e3d4:	f7fb ffa8 	bl	a328 <ll_pdu_rx_alloc>
			if (!rx) {
    e3d8:	4607      	mov	r7, r0
    e3da:	2800      	cmp	r0, #0
    e3dc:	f000 809b 	beq.w	e516 <ull_conn_llcp+0x432>
			rx->hdr.handle = conn->lll.handle;
    e3e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    e3e2:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e3e4:	2303      	movs	r3, #3
    e3e6:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    e3e8:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    e3ea:	7f3b      	ldrb	r3, [r7, #28]
    e3ec:	f043 0303 	orr.w	r3, r3, #3
    e3f0:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    e3f2:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
    e3f4:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    e3f6:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    e3f8:	f204 1169 	addw	r1, r4, #361	; 0x169
    e3fc:	f107 0020 	add.w	r0, r7, #32
    e400:	f00a fcfe 	bl	18e00 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    e404:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
    e408:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    e40c:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
    e410:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    e414:	6838      	ldr	r0, [r7, #0]
    e416:	4639      	mov	r1, r7
    e418:	f7fb ff58 	bl	a2cc <ll_rx_put>
			ll_rx_sched();
    e41c:	f7fb ff60 	bl	a2e0 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    e420:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    e424:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    e428:	2202      	movs	r2, #2
    e42a:	f362 0301 	bfi	r3, r2, #0, #2
    e42e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    e432:	e66a      	b.n	e10a <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    e434:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    e436:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e438:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
    e43a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
    e43e:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
    e440:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
    e444:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
    e446:	d176      	bne.n	e536 <ull_conn_llcp+0x452>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    e448:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    e44c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    e450:	1afb      	subs	r3, r7, r3
    e452:	0418      	lsls	r0, r3, #16
    e454:	f53f ae59 	bmi.w	e10a <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    e458:	f1bc 0f00 	cmp.w	ip, #0
    e45c:	f2c0 8336 	blt.w	eacc <ull_conn_llcp+0x9e8>
			conn->llcp_ack = conn->llcp_req;
    e460:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    e464:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
    e468:	f104 0734 	add.w	r7, r4, #52	; 0x34
    e46c:	2205      	movs	r2, #5
    e46e:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    e472:	4638      	mov	r0, r7
    e474:	f00a fcc4 	bl	18e00 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    e478:	2105      	movs	r1, #5
    e47a:	4638      	mov	r0, r7
    e47c:	f7f8 fd72 	bl	6f64 <util_ones_count_get>
		lll->data_chan_count =
    e480:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    e484:	2301      	movs	r3, #1
		lll->data_chan_count =
    e486:	f360 0c05 	bfi	ip, r0, #0, #6
    e48a:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    e48e:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
    e492:	fa4f fc8c 	sxtb.w	ip, ip
    e496:	e638      	b.n	e10a <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
    e498:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    e49a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
    e49c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
    e4a0:	440a      	add	r2, r1
    e4a2:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
    e4a4:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
    e4a8:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
    e4aa:	f040 8122 	bne.w	e6f2 <ull_conn_llcp+0x60e>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    e4ae:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    e4b2:	1ab6      	subs	r6, r6, r2
    e4b4:	0436      	lsls	r6, r6, #16
    e4b6:	f53f ae2b 	bmi.w	e110 <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
    e4ba:	f104 0534 	add.w	r5, r4, #52	; 0x34
    e4be:	2205      	movs	r2, #5
			conn->periph.llcp_type = LLCP_NONE;
    e4c0:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
    e4c4:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    e4c8:	4628      	mov	r0, r5
    e4ca:	f00a fc99 	bl	18e00 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    e4ce:	2105      	movs	r1, #5
    e4d0:	4628      	mov	r0, r5
    e4d2:	f7f8 fd47 	bl	6f64 <util_ones_count_get>
		lll->data_chan_count =
    e4d6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    e4da:	2201      	movs	r2, #1
		lll->data_chan_count =
    e4dc:	f360 0305 	bfi	r3, r0, #0, #6
    e4e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
    e4e4:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
    e4e8:	e612      	b.n	e110 <ull_conn_llcp+0x2c>
    e4ea:	bf00      	nop
    e4ec:	0001d244 	.word	0x0001d244
    e4f0:	0001ce44 	.word	0x0001ce44
    e4f4:	0001cde4 	.word	0x0001cde4
    e4f8:	20001d48 	.word	0x20001d48
			LL_ASSERT(0);
    e4fc:	4ad5      	ldr	r2, [pc, #852]	; (e854 <ull_conn_llcp+0x770>)
    e4fe:	49d6      	ldr	r1, [pc, #856]	; (e858 <ull_conn_llcp+0x774>)
    e500:	48d6      	ldr	r0, [pc, #856]	; (e85c <ull_conn_llcp+0x778>)
    e502:	f240 43e1 	movw	r3, #1249	; 0x4e1
    e506:	f009 fe2f 	bl	18168 <printk>
    e50a:	4040      	eors	r0, r0
    e50c:	f380 8811 	msr	BASEPRI, r0
    e510:	f04f 0003 	mov.w	r0, #3
    e514:	df02      	svc	2
			break;
    e516:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    e51a:	e5f6      	b.n	e10a <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
    e51c:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
    e520:	2900      	cmp	r1, #0
    e522:	f47f ae48 	bne.w	e1b6 <ull_conn_llcp+0xd2>
    e526:	e61f      	b.n	e168 <ull_conn_llcp+0x84>
				event_len_prep(conn);
    e528:	4620      	mov	r0, r4
    e52a:	f7fd fbdd 	bl	bce8 <event_len_prep>
    e52e:	e607      	b.n	e140 <ull_conn_llcp+0x5c>
		conn->tx_data_last = tx;
    e530:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    e534:	e692      	b.n	e25c <ull_conn_llcp+0x178>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e536:	48ca      	ldr	r0, [pc, #808]	; (e860 <ull_conn_llcp+0x77c>)
    e538:	f7f8 fb3e 	bl	6bb8 <mem_acquire>
		if (tx) {
    e53c:	4680      	mov	r8, r0
    e53e:	2800      	cmp	r0, #0
    e540:	d0e9      	beq.n	e516 <ull_conn_llcp+0x432>
						      conn->lll.latency + 6;
    e542:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    e544:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
    e548:	3306      	adds	r3, #6
    e54a:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
    e54c:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e550:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    e552:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e556:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
    e55a:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e55e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    e560:	2308      	movs	r3, #8
    e562:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    e564:	2301      	movs	r3, #1
    e566:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    e568:	2205      	movs	r2, #5
    e56a:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    e56e:	3008      	adds	r0, #8
    e570:	f00a fc46 	bl	18e00 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    e574:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    e578:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
    e57c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    e580:	2b00      	cmp	r3, #0
    e582:	f000 82ae 	beq.w	eae2 <ull_conn_llcp+0x9fe>
	    !conn->llcp_enc.pause_tx &&
    e586:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    e58a:	0792      	lsls	r2, r2, #30
    e58c:	f100 82a9 	bmi.w	eae2 <ull_conn_llcp+0x9fe>
	    !conn->llcp_phy.pause_tx &&
    e590:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    e594:	07d7      	lsls	r7, r2, #31
    e596:	f100 82a4 	bmi.w	eae2 <ull_conn_llcp+0x9fe>
		if (conn->tx_head == conn->tx_data) {
    e59a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e59e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    e5a2:	428b      	cmp	r3, r1
    e5a4:	f000 8563 	beq.w	f06e <ull_conn_llcp+0xf8a>
		} else if (!conn->tx_ctrl) {
    e5a8:	2a00      	cmp	r2, #0
    e5aa:	f000 8607 	beq.w	f1bc <ull_conn_llcp+0x10d8>
	tx->next = conn->tx_ctrl_last->next;
    e5ae:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    e5b2:	681a      	ldr	r2, [r3, #0]
    e5b4:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    e5b8:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    e5bc:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    e5c0:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e5c4:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    e5c8:	2b00      	cmp	r3, #0
    e5ca:	f47f ad9e 	bne.w	e10a <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
    e5ce:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
    e5d2:	e59a      	b.n	e10a <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e5d4:	48a2      	ldr	r0, [pc, #648]	; (e860 <ull_conn_llcp+0x77c>)
    e5d6:	f7f8 faef 	bl	6bb8 <mem_acquire>
	if (!tx) {
    e5da:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    e5de:	4681      	mov	r9, r0
    e5e0:	2800      	cmp	r0, #0
    e5e2:	f43f ad92 	beq.w	e10a <ull_conn_llcp+0x26>
	if (!lll->role) {
    e5e6:	f1bc 0f00 	cmp.w	ip, #0
    e5ea:	f280 82ff 	bge.w	ebec <ull_conn_llcp+0xb08>
	else if (!lll->enc_rx) {
    e5ee:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    e5f2:	071a      	lsls	r2, r3, #28
    e5f4:	f100 83fb 	bmi.w	edee <ull_conn_llcp+0xd0a>
		if (conn->llcp.encryption.error_code) {
    e5f8:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
    e5fc:	f1b8 0f00 	cmp.w	r8, #0
    e600:	f040 8492 	bne.w	ef28 <ull_conn_llcp+0xe44>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    e604:	f104 077b 	add.w	r7, r4, #123	; 0x7b
    e608:	463b      	mov	r3, r7
    e60a:	4642      	mov	r2, r8
    e60c:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
    e610:	f204 1071 	addw	r0, r4, #369	; 0x171
    e614:	f004 ff50 	bl	134b8 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    e618:	4639      	mov	r1, r7
    e61a:	2210      	movs	r2, #16
    e61c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    e620:	f00a fbee 	bl	18e00 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    e624:	2208      	movs	r2, #8
    e626:	f104 0194 	add.w	r1, r4, #148	; 0x94
    e62a:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
    e62e:	f00a fbe7 	bl	18e00 <memcpy>
			lll->ccm_rx.direction = 1U;
    e632:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
    e636:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
    e63a:	f043 0301 	orr.w	r3, r3, #1
    e63e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
    e642:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
    e646:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
    e64a:	f368 0300 	bfi	r3, r8, #0, #1
    e64e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
    e652:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
    e656:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
    e65a:	f043 0308 	orr.w	r3, r3, #8
    e65e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e662:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
    e666:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e66a:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
    e66e:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
    e672:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
    e676:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
    e67a:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
    e67e:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e682:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    e686:	2301      	movs	r3, #1
    e688:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
    e68c:	2305      	movs	r3, #5
    e68e:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
    e692:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    e696:	2b00      	cmp	r3, #0
    e698:	f000 8357 	beq.w	ed4a <ull_conn_llcp+0xc66>
	    !conn->llcp_enc.pause_tx &&
    e69c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    e6a0:	0797      	lsls	r7, r2, #30
    e6a2:	f100 8352 	bmi.w	ed4a <ull_conn_llcp+0xc66>
	    !conn->llcp_phy.pause_tx &&
    e6a6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    e6aa:	07d0      	lsls	r0, r2, #31
    e6ac:	f100 834d 	bmi.w	ed4a <ull_conn_llcp+0xc66>
		if (conn->tx_head == conn->tx_data) {
    e6b0:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e6b4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    e6b8:	428b      	cmp	r3, r1
    e6ba:	f000 85db 	beq.w	f274 <ull_conn_llcp+0x1190>
		} else if (!conn->tx_ctrl) {
    e6be:	2a00      	cmp	r2, #0
    e6c0:	f000 86d3 	beq.w	f46a <ull_conn_llcp+0x1386>
	tx->next = conn->tx_ctrl_last->next;
    e6c4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    e6c8:	681a      	ldr	r2, [r3, #0]
    e6ca:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    e6ce:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
    e6d2:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e6d6:	f8d9 3000 	ldr.w	r3, [r9]
    e6da:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    e6de:	2b00      	cmp	r3, #0
    e6e0:	f000 82f3 	beq.w	ecca <ull_conn_llcp+0xbe6>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
    e6e4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    e6e8:	f043 0303 	orr.w	r3, r3, #3
    e6ec:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    e6f0:	e50b      	b.n	e10a <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e6f2:	485b      	ldr	r0, [pc, #364]	; (e860 <ull_conn_llcp+0x77c>)
    e6f4:	f7f8 fa60 	bl	6bb8 <mem_acquire>
		if (tx) {
    e6f8:	4605      	mov	r5, r0
    e6fa:	2800      	cmp	r0, #0
    e6fc:	f43f ad08 	beq.w	e110 <ull_conn_llcp+0x2c>
						      conn->lll.latency + 6;
    e700:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
    e702:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e706:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
    e708:	3206      	adds	r2, #6
			conn->llcp.chan_map.initiate = 0U;
    e70a:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
    e70e:	4432      	add	r2, r6
			conn->llcp.chan_map.initiate = 0U;
    e710:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
    e714:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e718:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    e71c:	2108      	movs	r1, #8
			pdu_ctrl_tx->llctrl.opcode =
    e71e:	2201      	movs	r2, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e720:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    e722:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    e724:	71c2      	strb	r2, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    e726:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
    e72a:	2205      	movs	r2, #5
    e72c:	3008      	adds	r0, #8
    e72e:	f00a fb67 	bl	18e00 <memcpy>
	    conn->tx_head &&
    e732:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    e736:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    e73a:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
    e73e:	2b00      	cmp	r3, #0
    e740:	f000 81db 	beq.w	eafa <ull_conn_llcp+0xa16>
	    !conn->llcp_enc.pause_tx &&
    e744:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    e748:	0792      	lsls	r2, r2, #30
    e74a:	f100 81d6 	bmi.w	eafa <ull_conn_llcp+0xa16>
	    !conn->llcp_phy.pause_tx &&
    e74e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    e752:	07d7      	lsls	r7, r2, #31
    e754:	f100 81d1 	bmi.w	eafa <ull_conn_llcp+0xa16>
		if (conn->tx_head == conn->tx_data) {
    e758:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    e75c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    e760:	428b      	cmp	r3, r1
    e762:	f000 8495 	beq.w	f090 <ull_conn_llcp+0xfac>
		} else if (!conn->tx_ctrl) {
    e766:	2a00      	cmp	r2, #0
    e768:	f000 85a1 	beq.w	f2ae <ull_conn_llcp+0x11ca>
	tx->next = conn->tx_ctrl_last->next;
    e76c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    e770:	681a      	ldr	r2, [r3, #0]
    e772:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    e774:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    e776:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    e778:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e77c:	2b00      	cmp	r3, #0
    e77e:	f47f acc7 	bne.w	e110 <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
    e782:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
    e786:	e4c3      	b.n	e110 <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    e788:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
    e78c:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
    e790:	4571      	cmp	r1, lr
    e792:	d067      	beq.n	e864 <ull_conn_llcp+0x780>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    e794:	eba1 010e 	sub.w	r1, r1, lr
    e798:	07c8      	lsls	r0, r1, #31
    e79a:	f57f acb6 	bpl.w	e10a <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
    e79e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    e7a2:	f013 0701 	ands.w	r7, r3, #1
    e7a6:	f000 81b3 	beq.w	eb10 <ull_conn_llcp+0xa2c>
		rx = ll_pdu_rx_alloc();
    e7aa:	f7fb fdbd 	bl	a328 <ll_pdu_rx_alloc>
		if (!rx) {
    e7ae:	4607      	mov	r7, r0
    e7b0:	2800      	cmp	r0, #0
    e7b2:	f000 8185 	beq.w	eac0 <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    e7b6:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    e7ba:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    e7be:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    e7c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    e7c2:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    e7c4:	f043 0303 	orr.w	r3, r3, #3
    e7c8:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    e7ca:	2309      	movs	r3, #9
    e7cc:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    e7ce:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e7d0:	2303      	movs	r3, #3
    e7d2:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    e7d4:	4641      	mov	r1, r8
    e7d6:	2208      	movs	r2, #8
    e7d8:	3020      	adds	r0, #32
    e7da:	f00a fb1c 	bl	18e16 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
    e7de:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
    e7e2:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    e7e4:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
    e7e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
    e7ec:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
    e7f0:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    e7f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    e7f6:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
    e7fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e7fe:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
    e800:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
    e804:	0a12      	lsrs	r2, r2, #8
    e806:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
    e80a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    e80e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
    e812:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
    e814:	6808      	ldr	r0, [r1, #0]
    e816:	f7fb fd59 	bl	a2cc <ll_rx_put>
	ll_rx_sched();
    e81a:	f7fb fd61 	bl	a2e0 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    e81e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    e822:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
    e826:	e468      	b.n	e0fa <ull_conn_llcp+0x16>
				conn->procedure_expire++;
    e828:	3301      	adds	r3, #1
    e82a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    e82e:	e478      	b.n	e122 <ull_conn_llcp+0x3e>
			tx->next = conn->tx_head;
    e830:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    e832:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    e836:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    e83a:	2b00      	cmp	r3, #0
    e83c:	f47f ad0e 	bne.w	e25c <ull_conn_llcp+0x178>
    e840:	e676      	b.n	e530 <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
    e842:	2a00      	cmp	r2, #0
    e844:	f47f ad5d 	bne.w	e302 <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head;
    e848:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    e84a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    e84e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    e852:	e55e      	b.n	e312 <ull_conn_llcp+0x22e>
    e854:	0001d244 	.word	0x0001d244
    e858:	0001ce44 	.word	0x0001ce44
    e85c:	0001cde4 	.word	0x0001cde4
    e860:	20001d48 	.word	0x20001d48
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    e864:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
    e868:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
    e86c:	4571      	cmp	r1, lr
    e86e:	d02f      	beq.n	e8d0 <ull_conn_llcp+0x7ec>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    e870:	eba1 010e 	sub.w	r1, r1, lr
    e874:	07cf      	lsls	r7, r1, #31
    e876:	f57f ac48 	bpl.w	e10a <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
    e87a:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    e87e:	07d8      	lsls	r0, r3, #31
    e880:	f140 82f9 	bpl.w	ee76 <ull_conn_llcp+0xd92>
	} else if (conn->llcp_version.rx) {
    e884:	079b      	lsls	r3, r3, #30
    e886:	f140 82e3 	bpl.w	ee50 <ull_conn_llcp+0xd6c>
		rx = ll_pdu_rx_alloc();
    e88a:	f7fb fd4d 	bl	a328 <ll_pdu_rx_alloc>
		if (!rx) {
    e88e:	4601      	mov	r1, r0
    e890:	2800      	cmp	r0, #0
    e892:	f000 8115 	beq.w	eac0 <ull_conn_llcp+0x9dc>
		conn->llcp_version.ack = conn->llcp_version.req;
    e896:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
    e89a:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
    e89e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    e8a0:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e8a2:	2303      	movs	r3, #3
    e8a4:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    e8a6:	7f03      	ldrb	r3, [r0, #28]
    e8a8:	f043 0303 	orr.w	r3, r3, #3
    e8ac:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    e8ae:	2306      	movs	r3, #6
    e8b0:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    e8b2:	230c      	movs	r3, #12
    e8b4:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
    e8b6:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
    e8ba:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
    e8be:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
    e8c2:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
    e8c6:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
    e8ca:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
    e8ce:	e7a1      	b.n	e814 <ull_conn_llcp+0x730>
		} else if (conn->llcp_conn_param.ack !=
    e8d0:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
    e8d4:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    e8d8:	458e      	cmp	lr, r1
    e8da:	f000 81f9 	beq.w	ecd0 <ull_conn_llcp+0xbec>
	return conn_upd_curr && (conn_upd_curr != conn);
    e8de:	f8df 8304 	ldr.w	r8, [pc, #772]	; ebe4 <ull_conn_llcp+0xb00>
    e8e2:	f8d8 1000 	ldr.w	r1, [r8]
    e8e6:	2900      	cmp	r1, #0
    e8e8:	f000 8365 	beq.w	efb6 <ull_conn_llcp+0xed2>
    e8ec:	428c      	cmp	r4, r1
    e8ee:	f47f ac0c 	bne.w	e10a <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
    e8f2:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
    e8f6:	f001 010f 	and.w	r1, r1, #15
    e8fa:	2906      	cmp	r1, #6
    e8fc:	f200 8671 	bhi.w	f5e2 <ull_conn_llcp+0x14fe>
    e900:	f20f 0e04 	addw	lr, pc, #4
    e904:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
    e908:	0000e9fb 	.word	0x0000e9fb
    e90c:	0000e975 	.word	0x0000e975
    e910:	0000e925 	.word	0x0000e925
    e914:	0000e0fb 	.word	0x0000e0fb
    e918:	0000e0fb 	.word	0x0000e0fb
    e91c:	0000e0fb 	.word	0x0000e0fb
    e920:	0000e0fb 	.word	0x0000e0fb
	if (conn->llcp_enc.pause_tx) {
    e924:	07bb      	lsls	r3, r7, #30
    e926:	f53f abf0 	bmi.w	e10a <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
    e92a:	f7fb fcfd 	bl	a328 <ll_pdu_rx_alloc>
	if (!rx) {
    e92e:	4601      	mov	r1, r0
    e930:	2800      	cmp	r0, #0
    e932:	f000 80c5 	beq.w	eac0 <ull_conn_llcp+0x9dc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    e936:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e93a:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    e93c:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e93e:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    e942:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    e946:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    e948:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
    e94c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    e94e:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    e950:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    e952:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    e954:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    e958:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    e95a:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    e95e:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    e960:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
    e964:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    e966:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
    e96a:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    e96c:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
    e96e:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    e970:	77cb      	strb	r3, [r1, #31]
    e972:	e74f      	b.n	e814 <ull_conn_llcp+0x730>
	if (conn->llcp_conn_param.status) {
    e974:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
    e978:	2b00      	cmp	r3, #0
    e97a:	f040 83b8 	bne.w	f0ee <ull_conn_llcp+0x100a>
	if (!conn->lll.role) {
    e97e:	2a00      	cmp	r2, #0
    e980:	f2c0 84e2 	blt.w	f348 <ull_conn_llcp+0x1264>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    e984:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
    e988:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    e98c:	2106      	movs	r1, #6
    e98e:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
    e992:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    e996:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
    e99a:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
    e99c:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
    e9a0:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
    e9a4:	2900      	cmp	r1, #0
    e9a6:	f000 8571 	beq.w	f48c <ull_conn_llcp+0x13a8>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    e9aa:	fbb2 f3f1 	udiv	r3, r2, r1
    e9ae:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
    e9b2:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
    e9b6:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
    e9b8:	4299      	cmp	r1, r3
    e9ba:	bf98      	it	ls
    e9bc:	461a      	movls	r2, r3
    e9be:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    e9c2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    e9c6:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    e9ca:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
    e9ce:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    e9d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    e9d6:	00db      	lsls	r3, r3, #3
    e9d8:	f022 020f 	bic.w	r2, r2, #15
    e9dc:	f043 0302 	orr.w	r3, r3, #2
    e9e0:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
    e9e2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    e9e6:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
    e9ea:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    e9ee:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
    e9f2:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    e9f6:	f7ff bb8b 	b.w	e110 <ull_conn_llcp+0x2c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    e9fa:	487b      	ldr	r0, [pc, #492]	; (ebe8 <ull_conn_llcp+0xb04>)
			event_counter = lll->event_counter +
    e9fc:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
    e9fe:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ea02:	f7f8 f8d9 	bl	6bb8 <mem_acquire>
	if (!tx) {
    ea06:	4602      	mov	r2, r0
    ea08:	2800      	cmp	r0, #0
    ea0a:	d059      	beq.n	eac0 <ull_conn_llcp+0x9dc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ea0c:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
    ea0e:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ea12:	f043 0303 	orr.w	r3, r3, #3
    ea16:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    ea18:	2318      	movs	r3, #24
    ea1a:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    ea1c:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    ea20:	8110      	strh	r0, [r2, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    ea22:	f8b4 018a 	ldrh.w	r0, [r4, #394]	; 0x18a
    ea26:	8150      	strh	r0, [r2, #10]
	p->preferred_periodicity = 0U;
    ea28:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    ea2a:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    ea2e:	8190      	strh	r0, [r2, #12]
			event_counter = lll->event_counter +
    ea30:	eb07 0109 	add.w	r1, r7, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    ea34:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
    ea38:	7413      	strb	r3, [r2, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    ea3a:	74d3      	strb	r3, [r2, #19]
    ea3c:	7513      	strb	r3, [r2, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
    ea3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    ea42:	81d0      	strh	r0, [r2, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
    ea44:	7553      	strb	r3, [r2, #21]
    ea46:	7593      	strb	r3, [r2, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    ea48:	75d3      	strb	r3, [r2, #23]
    ea4a:	7613      	strb	r3, [r2, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    ea4c:	7653      	strb	r3, [r2, #25]
    ea4e:	7693      	strb	r3, [r2, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    ea50:	76d3      	strb	r3, [r2, #27]
    ea52:	7713      	strb	r3, [r2, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    ea54:	7753      	strb	r3, [r2, #29]
    ea56:	7793      	strb	r3, [r2, #30]
			event_counter = lll->event_counter +
    ea58:	4431      	add	r1, r6
	conn->procedure_expire = conn->procedure_reload;
    ea5a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    ea5e:	200f      	movs	r0, #15
    ea60:	71d0      	strb	r0, [r2, #7]
	conn->procedure_expire = conn->procedure_reload;
    ea62:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    ea66:	f8a2 1011 	strh.w	r1, [r2, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    ea6a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    ea6e:	2104      	movs	r1, #4
    ea70:	f361 0303 	bfi	r3, r1, #0, #4
    ea74:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
    ea78:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    ea7c:	2b00      	cmp	r3, #0
    ea7e:	f000 832b 	beq.w	f0d8 <ull_conn_llcp+0xff4>
	    !conn->llcp_enc.pause_tx &&
    ea82:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    ea86:	078f      	lsls	r7, r1, #30
    ea88:	f100 8326 	bmi.w	f0d8 <ull_conn_llcp+0xff4>
	    !conn->llcp_phy.pause_tx &&
    ea8c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    ea90:	07c8      	lsls	r0, r1, #31
    ea92:	f100 8321 	bmi.w	f0d8 <ull_conn_llcp+0xff4>
		if (conn->tx_head == conn->tx_data) {
    ea96:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    ea9a:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
    ea9c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    eaa0:	f000 8501 	beq.w	f4a6 <ull_conn_llcp+0x13c2>
		} else if (!conn->tx_ctrl) {
    eaa4:	2900      	cmp	r1, #0
    eaa6:	f000 857b 	beq.w	f5a0 <ull_conn_llcp+0x14bc>
	tx->next = conn->tx_ctrl_last->next;
    eaaa:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    eaae:	6819      	ldr	r1, [r3, #0]
    eab0:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
    eab2:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
    eab4:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
    eab8:	6813      	ldr	r3, [r2, #0]
    eaba:	2b00      	cmp	r3, #0
    eabc:	f000 8376 	beq.w	f1ac <ull_conn_llcp+0x10c8>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    eac0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    eac4:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
    eac8:	f7ff bb17 	b.w	e0fa <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    eacc:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
    ead0:	2b00      	cmp	r3, #0
    ead2:	f43f acc5 	beq.w	e460 <ull_conn_llcp+0x37c>
			conn->periph.llcp_type = LLCP_NONE;
    ead6:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
    eada:	e4c5      	b.n	e468 <ull_conn_llcp+0x384>
		conn->tx_data_last = tx;
    eadc:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    eae0:	e41a      	b.n	e318 <ull_conn_llcp+0x234>
		if (!conn->tx_ctrl) {
    eae2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    eae6:	2a00      	cmp	r2, #0
    eae8:	f47f ad61 	bne.w	e5ae <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head;
    eaec:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    eaf0:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    eaf4:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
    eaf8:	e564      	b.n	e5c4 <ull_conn_llcp+0x4e0>
		if (!conn->tx_ctrl) {
    eafa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    eafe:	2a00      	cmp	r2, #0
    eb00:	f47f ae34 	bne.w	e76c <ull_conn_llcp+0x688>
			tx->next = conn->tx_head;
    eb04:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    eb06:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    eb0a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    eb0e:	e635      	b.n	e77c <ull_conn_llcp+0x698>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    eb10:	4835      	ldr	r0, [pc, #212]	; (ebe8 <ull_conn_llcp+0xb04>)
    eb12:	f7f8 f851 	bl	6bb8 <mem_acquire>
	if (tx) {
    eb16:	4680      	mov	r8, r0
    eb18:	2800      	cmp	r0, #0
    eb1a:	d0d1      	beq.n	eac0 <ull_conn_llcp+0x9dc>
		conn->llcp_feature.ack--;
    eb1c:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
    eb20:	3b01      	subs	r3, #1
    eb22:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    eb26:	2309      	movs	r3, #9
    eb28:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    eb2a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    eb2e:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    eb30:	7903      	ldrb	r3, [r0, #4]
    eb32:	f043 0303 	orr.w	r3, r3, #3
    eb36:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    eb38:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
    eb3c:	bfac      	ite	ge
    eb3e:	2308      	movge	r3, #8
    eb40:	230e      	movlt	r3, #14
    eb42:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    eb44:	4639      	mov	r1, r7
    eb46:	4410      	add	r0, r2
    eb48:	f00a f965 	bl	18e16 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
    eb4c:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
    eb50:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
    eb52:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
    eb56:	f3c2 2207 	ubfx	r2, r2, #8, #8
    eb5a:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
    eb5e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
    eb60:	f888 300c 	strb.w	r3, [r8, #12]
    eb64:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
    eb68:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
    eb6c:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
    eb70:	0a09      	lsrs	r1, r1, #8
    eb72:	0a12      	lsrs	r2, r2, #8
    eb74:	f888 100b 	strb.w	r1, [r8, #11]
    eb78:	f888 300d 	strb.w	r3, [r8, #13]
    eb7c:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
    eb80:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    eb84:	2b00      	cmp	r3, #0
    eb86:	f000 80d4 	beq.w	ed32 <ull_conn_llcp+0xc4e>
	    !conn->llcp_enc.pause_tx &&
    eb8a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    eb8e:	0791      	lsls	r1, r2, #30
    eb90:	f100 80cf 	bmi.w	ed32 <ull_conn_llcp+0xc4e>
	    !conn->llcp_phy.pause_tx &&
    eb94:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    eb98:	07d2      	lsls	r2, r2, #31
    eb9a:	f100 80ca 	bmi.w	ed32 <ull_conn_llcp+0xc4e>
		if (conn->tx_head == conn->tx_data) {
    eb9e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    eba2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    eba6:	428b      	cmp	r3, r1
    eba8:	f000 82f0 	beq.w	f18c <ull_conn_llcp+0x10a8>
		} else if (!conn->tx_ctrl) {
    ebac:	2a00      	cmp	r2, #0
    ebae:	f000 83b4 	beq.w	f31a <ull_conn_llcp+0x1236>
	tx->next = conn->tx_ctrl_last->next;
    ebb2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    ebb6:	681a      	ldr	r2, [r3, #0]
    ebb8:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    ebbc:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    ebc0:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
    ebc4:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
    ebc8:	2b00      	cmp	r3, #0
    ebca:	f000 8226 	beq.w	f01a <ull_conn_llcp+0xf36>
		conn->procedure_expire = conn->procedure_reload;
    ebce:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    ebd2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    ebd6:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
    ebda:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
    ebde:	f7ff ba8c 	b.w	e0fa <ull_conn_llcp+0x16>
    ebe2:	bf00      	nop
    ebe4:	20001cb4 	.word	0x20001cb4
    ebe8:	20001d48 	.word	0x20001d48
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    ebec:	f104 077b 	add.w	r7, r4, #123	; 0x7b
    ebf0:	463b      	mov	r3, r7
    ebf2:	4642      	mov	r2, r8
    ebf4:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
    ebf8:	f204 1071 	addw	r0, r4, #369	; 0x171
    ebfc:	f004 fc5c 	bl	134b8 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    ec00:	4639      	mov	r1, r7
    ec02:	2210      	movs	r2, #16
    ec04:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    ec08:	f00a f8fa 	bl	18e00 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    ec0c:	2208      	movs	r2, #8
    ec0e:	f104 0194 	add.w	r1, r4, #148	; 0x94
    ec12:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
    ec16:	f00a f8f3 	bl	18e00 <memcpy>
		lll->enc_rx = 1;
    ec1a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
    ec1e:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
    ec22:	f023 0318 	bic.w	r3, r3, #24
    ec26:	f043 0318 	orr.w	r3, r3, #24
    ec2a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
    ec2e:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
    ec32:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
    ec36:	f368 0300 	bfi	r3, r8, #0, #1
    ec3a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
    ec3e:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
    ec42:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
    ec46:	f043 0301 	orr.w	r3, r3, #1
    ec4a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    ec4e:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
    ec50:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
    ec54:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
    ec58:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
    ec5c:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
    ec60:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
    ec64:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ec68:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    ec6c:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    ec70:	2306      	movs	r3, #6
    ec72:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
    ec76:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ec7a:	f042 0203 	orr.w	r2, r2, #3
    ec7e:	f889 2004 	strb.w	r2, [r9, #4]
	if (
    ec82:	2b00      	cmp	r3, #0
    ec84:	d04a      	beq.n	ed1c <ull_conn_llcp+0xc38>
	    !conn->llcp_enc.pause_tx &&
    ec86:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    ec8a:	0790      	lsls	r0, r2, #30
    ec8c:	d446      	bmi.n	ed1c <ull_conn_llcp+0xc38>
	    !conn->llcp_phy.pause_tx &&
    ec8e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    ec92:	07d1      	lsls	r1, r2, #31
    ec94:	d442      	bmi.n	ed1c <ull_conn_llcp+0xc38>
		if (conn->tx_head == conn->tx_data) {
    ec96:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    ec9a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    ec9c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    eca0:	f000 8264 	beq.w	f16c <ull_conn_llcp+0x1088>
		} else if (!conn->tx_ctrl) {
    eca4:	2a00      	cmp	r2, #0
    eca6:	f000 83b9 	beq.w	f41c <ull_conn_llcp+0x1338>
	tx->next = conn->tx_ctrl_last->next;
    ecaa:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    ecae:	681a      	ldr	r2, [r3, #0]
    ecb0:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    ecb4:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
    ecb8:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
    ecbc:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    ecc0:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
    ecc4:	2b00      	cmp	r3, #0
    ecc6:	f47f ad0d 	bne.w	e6e4 <ull_conn_llcp+0x600>
		conn->tx_data_last = tx;
    ecca:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
    ecce:	e509      	b.n	e6e4 <ull_conn_llcp+0x600>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    ecd0:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
    ecd4:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    ecd8:	4299      	cmp	r1, r3
    ecda:	d042      	beq.n	ed62 <ull_conn_llcp+0xc7e>
			event_len_prep(conn);
    ecdc:	4620      	mov	r0, r4
    ecde:	f7fd f803 	bl	bce8 <event_len_prep>
    ece2:	e6ed      	b.n	eac0 <ull_conn_llcp+0x9dc>
		if (!conn->tx_ctrl) {
    ece4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    ece8:	2a00      	cmp	r2, #0
    ecea:	f47f ab68 	bne.w	e3be <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head;
    ecee:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
    ecf0:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    ecf4:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
    ecf8:	f7ff bb69 	b.w	e3ce <ull_conn_llcp+0x2ea>
			conn->tx_data = conn->tx_data->next;
    ecfc:	681a      	ldr	r2, [r3, #0]
    ecfe:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    ed02:	2900      	cmp	r1, #0
    ed04:	f47f aa9f 	bne.w	e246 <ull_conn_llcp+0x162>
			tx->next = conn->tx_head->next;
    ed08:	681a      	ldr	r2, [r3, #0]
    ed0a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    ed0c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    ed0e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    ed10:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
    ed14:	2b00      	cmp	r3, #0
    ed16:	f47f aaa1 	bne.w	e25c <ull_conn_llcp+0x178>
    ed1a:	e409      	b.n	e530 <ull_conn_llcp+0x44c>
		if (!conn->tx_ctrl) {
    ed1c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    ed20:	2a00      	cmp	r2, #0
    ed22:	d1c2      	bne.n	ecaa <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head;
    ed24:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    ed28:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    ed2c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    ed30:	e7c6      	b.n	ecc0 <ull_conn_llcp+0xbdc>
		if (!conn->tx_ctrl) {
    ed32:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    ed36:	2a00      	cmp	r2, #0
    ed38:	f47f af3b 	bne.w	ebb2 <ull_conn_llcp+0xace>
			tx->next = conn->tx_head;
    ed3c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    ed40:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    ed44:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
    ed48:	e73e      	b.n	ebc8 <ull_conn_llcp+0xae4>
		if (!conn->tx_ctrl) {
    ed4a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    ed4e:	2a00      	cmp	r2, #0
    ed50:	f47f acb8 	bne.w	e6c4 <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head;
    ed54:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    ed58:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    ed5c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    ed60:	e4b9      	b.n	e6d6 <ull_conn_llcp+0x5f2>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    ed62:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
    ed66:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
    ed6a:	428b      	cmp	r3, r1
    ed6c:	f43f a9cd 	beq.w	e10a <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
    ed70:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    ed74:	f003 0703 	and.w	r7, r3, #3
    ed78:	2f03      	cmp	r7, #3
    ed7a:	f000 8229 	beq.w	f1d0 <ull_conn_llcp+0x10ec>
    ed7e:	2f00      	cmp	r7, #0
    ed80:	f47f a9c2 	bne.w	e108 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ed84:	48c9      	ldr	r0, [pc, #804]	; (f0ac <ull_conn_llcp+0xfc8>)
    ed86:	f7f7 ff17 	bl	6bb8 <mem_acquire>
		if (!tx) {
    ed8a:	4601      	mov	r1, r0
    ed8c:	2800      	cmp	r0, #0
    ed8e:	f43f ae97 	beq.w	eac0 <ull_conn_llcp+0x9dc>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    ed92:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
    ed96:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    ed9a:	2201      	movs	r2, #1
    ed9c:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    eda0:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    eda4:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
    eda8:	f3c3 0782 	ubfx	r7, r3, #2, #3
    edac:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
    edb0:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
    edb4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    edb8:	f360 07c3 	bfi	r7, r0, #3, #1
    edbc:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
    edc0:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    edc4:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
    edc6:	f367 02c5 	bfi	r2, r7, #3, #3
    edca:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
    edce:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
    edd2:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    edd4:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
    edd8:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    edda:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    eddc:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    edde:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    ede0:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    ede2:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    ede4:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
    ede6:	4620      	mov	r0, r4
    ede8:	f7fc fc88 	bl	b6fc <ctrl_tx_pause_enqueue>
    edec:	e6ef      	b.n	ebce <ull_conn_llcp+0xaea>
	conn->lll.enc_tx = 1;
    edee:	f043 0310 	orr.w	r3, r3, #16
    edf2:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    edf6:	2301      	movs	r3, #1
    edf8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    edfa:	7903      	ldrb	r3, [r0, #4]
    edfc:	f043 0303 	orr.w	r3, r3, #3
    ee00:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
    ee02:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    ee06:	2206      	movs	r2, #6
    ee08:	71c2      	strb	r2, [r0, #7]
	if (
    ee0a:	2b00      	cmp	r3, #0
    ee0c:	d07d      	beq.n	ef0a <ull_conn_llcp+0xe26>
	    !conn->llcp_enc.pause_tx &&
    ee0e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    ee12:	0791      	lsls	r1, r2, #30
    ee14:	d479      	bmi.n	ef0a <ull_conn_llcp+0xe26>
	    !conn->llcp_phy.pause_tx &&
    ee16:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    ee1a:	07d2      	lsls	r2, r2, #31
    ee1c:	d475      	bmi.n	ef0a <ull_conn_llcp+0xe26>
		if (conn->tx_head == conn->tx_data) {
    ee1e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    ee22:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    ee24:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    ee28:	f000 8233 	beq.w	f292 <ull_conn_llcp+0x11ae>
		} else if (!conn->tx_ctrl) {
    ee2c:	2a00      	cmp	r2, #0
    ee2e:	f000 8325 	beq.w	f47c <ull_conn_llcp+0x1398>
	tx->next = conn->tx_ctrl_last->next;
    ee32:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    ee36:	681a      	ldr	r2, [r3, #0]
    ee38:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    ee3c:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
    ee40:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    ee44:	f8d9 3000 	ldr.w	r3, [r9]
    ee48:	2b00      	cmp	r3, #0
    ee4a:	f47f ac4b 	bne.w	e6e4 <ull_conn_llcp+0x600>
    ee4e:	e73c      	b.n	ecca <ull_conn_llcp+0xbe6>
		LL_ASSERT(0);
    ee50:	4a97      	ldr	r2, [pc, #604]	; (f0b0 <ull_conn_llcp+0xfcc>)
    ee52:	4998      	ldr	r1, [pc, #608]	; (f0b4 <ull_conn_llcp+0xfd0>)
    ee54:	f640 6392 	movw	r3, #3730	; 0xe92
		LL_ASSERT(0);
    ee58:	4897      	ldr	r0, [pc, #604]	; (f0b8 <ull_conn_llcp+0xfd4>)
    ee5a:	f009 f985 	bl	18168 <printk>
    ee5e:	4040      	eors	r0, r0
    ee60:	f380 8811 	msr	BASEPRI, r0
    ee64:	f04f 0003 	mov.w	r0, #3
    ee68:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    ee6a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    ee6e:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
    ee72:	f7ff b942 	b.w	e0fa <ull_conn_llcp+0x16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ee76:	488d      	ldr	r0, [pc, #564]	; (f0ac <ull_conn_llcp+0xfc8>)
    ee78:	f7f7 fe9e 	bl	6bb8 <mem_acquire>
		if (tx) {
    ee7c:	2800      	cmp	r0, #0
    ee7e:	f43f ae1f 	beq.w	eac0 <ull_conn_llcp+0x9dc>
			conn->llcp_version.ack--;
    ee82:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
    ee86:	3b01      	subs	r3, #1
    ee88:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
    ee8c:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
    ee90:	f043 0301 	orr.w	r3, r3, #1
    ee94:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    ee98:	7903      	ldrb	r3, [r0, #4]
    ee9a:	f043 0303 	orr.w	r3, r3, #3
    ee9e:	7103      	strb	r3, [r0, #4]
			pdu->len =
    eea0:	2306      	movs	r3, #6
    eea2:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
    eea4:	230c      	movs	r3, #12
    eea6:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
    eea8:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    eeaa:	f06f 030e 	mvn.w	r3, #14
    eeae:	7243      	strb	r3, [r0, #9]
    eeb0:	2305      	movs	r3, #5
    eeb2:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    eeb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eeb8:	72c3      	strb	r3, [r0, #11]
    eeba:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
    eebc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    eec0:	2b00      	cmp	r3, #0
    eec2:	f000 80b4 	beq.w	f02e <ull_conn_llcp+0xf4a>
	    !conn->llcp_enc.pause_tx &&
    eec6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    eeca:	0791      	lsls	r1, r2, #30
    eecc:	f100 80af 	bmi.w	f02e <ull_conn_llcp+0xf4a>
	    !conn->llcp_phy.pause_tx &&
    eed0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    eed4:	07d2      	lsls	r2, r2, #31
    eed6:	f100 80aa 	bmi.w	f02e <ull_conn_llcp+0xf4a>
		if (conn->tx_head == conn->tx_data) {
    eeda:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    eede:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    eee0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    eee4:	f000 82b5 	beq.w	f452 <ull_conn_llcp+0x136e>
		} else if (!conn->tx_ctrl) {
    eee8:	2a00      	cmp	r2, #0
    eeea:	f000 82d3 	beq.w	f494 <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
    eeee:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    eef2:	681a      	ldr	r2, [r3, #0]
    eef4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    eef6:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    eef8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    eefc:	6803      	ldr	r3, [r0, #0]
    eefe:	2b00      	cmp	r3, #0
    ef00:	f47f ae65 	bne.w	ebce <ull_conn_llcp+0xaea>
		conn->tx_data_last = tx;
    ef04:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
    ef08:	e661      	b.n	ebce <ull_conn_llcp+0xaea>
		if (!conn->tx_ctrl) {
    ef0a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    ef0e:	2a00      	cmp	r2, #0
    ef10:	d18f      	bne.n	ee32 <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head;
    ef12:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    ef16:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    ef1a:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    ef1e:	e791      	b.n	ee44 <ull_conn_llcp+0xd60>
		conn->tx_data_last = tx;
    ef20:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
    ef24:	f7ff ba56 	b.w	e3d4 <ull_conn_llcp+0x2f0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    ef28:	7903      	ldrb	r3, [r0, #4]
    ef2a:	f043 0303 	orr.w	r3, r3, #3
    ef2e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    ef30:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
    ef34:	07db      	lsls	r3, r3, #31
    ef36:	d573      	bpl.n	f020 <ull_conn_llcp+0xf3c>
	    (conn->llcp_feature.features_conn &
    ef38:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
    ef3c:	0758      	lsls	r0, r3, #29
    ef3e:	d56f      	bpl.n	f020 <ull_conn_llcp+0xf3c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    ef40:	2311      	movs	r3, #17
    ef42:	f889 3007 	strb.w	r3, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ef46:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    ef48:	f889 8009 	strb.w	r8, [r9, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    ef4c:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    ef50:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
    ef54:	2300      	movs	r3, #0
    ef56:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
    ef5a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
    ef5e:	2b00      	cmp	r3, #0
    ef60:	d042      	beq.n	efe8 <ull_conn_llcp+0xf04>
	    !conn->llcp_enc.pause_tx &&
    ef62:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    ef66:	0791      	lsls	r1, r2, #30
    ef68:	d43e      	bmi.n	efe8 <ull_conn_llcp+0xf04>
	    !conn->llcp_phy.pause_tx &&
    ef6a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    ef6e:	07d2      	lsls	r2, r2, #31
    ef70:	d43a      	bmi.n	efe8 <ull_conn_llcp+0xf04>
		if (conn->tx_head == conn->tx_data) {
    ef72:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    ef76:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    ef78:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    ef7c:	f000 81d6 	beq.w	f32c <ull_conn_llcp+0x1248>
		} else if (!conn->tx_ctrl) {
    ef80:	2a00      	cmp	r2, #0
    ef82:	f000 82c3 	beq.w	f50c <ull_conn_llcp+0x1428>
	tx->next = conn->tx_ctrl_last->next;
    ef86:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    ef8a:	681a      	ldr	r2, [r3, #0]
    ef8c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
    ef90:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
    ef94:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
    ef98:	f8d9 3000 	ldr.w	r3, [r9]
    ef9c:	2b00      	cmp	r3, #0
    ef9e:	d059      	beq.n	f054 <ull_conn_llcp+0xf70>
			conn->llcp_ack = conn->llcp_req;
    efa0:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
    efa4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    efa8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    efac:	2900      	cmp	r1, #0
    efae:	f43f a8af 	beq.w	e110 <ull_conn_llcp+0x2c>
    efb2:	f7ff b900 	b.w	e1b6 <ull_conn_llcp+0xd2>
	switch (conn->llcp_conn_param.state) {
    efb6:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
    efba:	f003 030f 	and.w	r3, r3, #15
    efbe:	2b06      	cmp	r3, #6
    efc0:	f200 830f 	bhi.w	f5e2 <ull_conn_llcp+0x14fe>
    efc4:	a101      	add	r1, pc, #4	; (adr r1, efcc <ull_conn_llcp+0xee8>)
    efc6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    efca:	bf00      	nop
    efcc:	0000e9fb 	.word	0x0000e9fb
    efd0:	0000e975 	.word	0x0000e975
    efd4:	0000e925 	.word	0x0000e925
    efd8:	0000e10b 	.word	0x0000e10b
    efdc:	0000e10b 	.word	0x0000e10b
    efe0:	0000e10b 	.word	0x0000e10b
    efe4:	0000e10b 	.word	0x0000e10b
		if (!conn->tx_ctrl) {
    efe8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    efec:	2a00      	cmp	r2, #0
    efee:	d1ca      	bne.n	ef86 <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head;
    eff0:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
    eff4:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    eff8:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
    effc:	e7cc      	b.n	ef98 <ull_conn_llcp+0xeb4>
			conn->tx_data = conn->tx_data->next;
    effe:	6819      	ldr	r1, [r3, #0]
    f000:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f004:	2a00      	cmp	r2, #0
    f006:	f47f a97c 	bne.w	e302 <ull_conn_llcp+0x21e>
			tx->next = conn->tx_head->next;
    f00a:	681a      	ldr	r2, [r3, #0]
    f00c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    f00e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
    f010:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    f012:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    f016:	f7ff b97c 	b.w	e312 <ull_conn_llcp+0x22e>
		conn->tx_data_last = tx;
    f01a:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
    f01e:	e5d6      	b.n	ebce <ull_conn_llcp+0xaea>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    f020:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    f022:	f889 8008 	strb.w	r8, [r9, #8]
    f026:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    f028:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    f02c:	e790      	b.n	ef50 <ull_conn_llcp+0xe6c>
		if (!conn->tx_ctrl) {
    f02e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    f032:	2a00      	cmp	r2, #0
    f034:	f47f af5b 	bne.w	eeee <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head;
    f038:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    f03a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    f03e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    f042:	e75b      	b.n	eefc <ull_conn_llcp+0xe18>
	    ((pdu_data_tx->llctrl.opcode !=
    f044:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f046:	2a03      	cmp	r2, #3
    f048:	f43f ae5e 	beq.w	ed08 <ull_conn_llcp+0xc24>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f04c:	2a0a      	cmp	r2, #10
    f04e:	f47f a8f4 	bne.w	e23a <ull_conn_llcp+0x156>
    f052:	e659      	b.n	ed08 <ull_conn_llcp+0xc24>
		conn->tx_data_last = tx;
    f054:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
    f058:	e7a2      	b.n	efa0 <ull_conn_llcp+0xebc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f05a:	791a      	ldrb	r2, [r3, #4]
    f05c:	f002 0203 	and.w	r2, r2, #3
    f060:	2a03      	cmp	r2, #3
    f062:	f000 80ff 	beq.w	f264 <ull_conn_llcp+0x1180>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f066:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f06a:	f7ff b94a 	b.w	e302 <ull_conn_llcp+0x21e>
			conn->tx_data = conn->tx_data->next;
    f06e:	6819      	ldr	r1, [r3, #0]
    f070:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f074:	2a00      	cmp	r2, #0
    f076:	f47f aa9a 	bne.w	e5ae <ull_conn_llcp+0x4ca>
			tx->next = conn->tx_head->next;
    f07a:	681a      	ldr	r2, [r3, #0]
    f07c:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    f080:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    f084:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    f088:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
    f08c:	f7ff ba9a 	b.w	e5c4 <ull_conn_llcp+0x4e0>
			conn->tx_data = conn->tx_data->next;
    f090:	6819      	ldr	r1, [r3, #0]
    f092:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f096:	2a00      	cmp	r2, #0
    f098:	f47f ab68 	bne.w	e76c <ull_conn_llcp+0x688>
			tx->next = conn->tx_head->next;
    f09c:	681a      	ldr	r2, [r3, #0]
    f09e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    f0a0:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    f0a2:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    f0a4:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    f0a8:	f7ff bb68 	b.w	e77c <ull_conn_llcp+0x698>
    f0ac:	20001d48 	.word	0x20001d48
    f0b0:	0001d244 	.word	0x0001d244
    f0b4:	0001ce44 	.word	0x0001ce44
    f0b8:	0001cde4 	.word	0x0001cde4
			conn->tx_data = conn->tx_data->next;
    f0bc:	6819      	ldr	r1, [r3, #0]
    f0be:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f0c2:	2a00      	cmp	r2, #0
    f0c4:	f47f a97b 	bne.w	e3be <ull_conn_llcp+0x2da>
			tx->next = conn->tx_head->next;
    f0c8:	681a      	ldr	r2, [r3, #0]
    f0ca:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
    f0cc:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
    f0ce:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
    f0d0:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
    f0d4:	f7ff b97b 	b.w	e3ce <ull_conn_llcp+0x2ea>
		if (!conn->tx_ctrl) {
    f0d8:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    f0dc:	2900      	cmp	r1, #0
    f0de:	f47f ace4 	bne.w	eaaa <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head;
    f0e2:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
    f0e4:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    f0e8:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
    f0ec:	e4e4      	b.n	eab8 <ull_conn_llcp+0x9d4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f0ee:	48ca      	ldr	r0, [pc, #808]	; (f418 <ull_conn_llcp+0x1334>)
    f0f0:	f7f7 fd62 	bl	6bb8 <mem_acquire>
		if (!tx) {
    f0f4:	2800      	cmp	r0, #0
    f0f6:	f43f ace3 	beq.w	eac0 <ull_conn_llcp+0x9dc>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    f0fa:	7902      	ldrb	r2, [r0, #4]
    f0fc:	f042 0203 	orr.w	r2, r2, #3
    f100:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    f102:	2211      	movs	r2, #17
    f104:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    f106:	2203      	movs	r2, #3
    f108:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    f10a:	220f      	movs	r2, #15
    f10c:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    f10e:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
    f112:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
    f114:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
    f118:	2a00      	cmp	r2, #0
    f11a:	f000 80df 	beq.w	f2dc <ull_conn_llcp+0x11f8>
	    !conn->llcp_enc.pause_tx &&
    f11e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    f122:	0789      	lsls	r1, r1, #30
    f124:	f100 80da 	bmi.w	f2dc <ull_conn_llcp+0x11f8>
	    !conn->llcp_phy.pause_tx &&
    f128:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    f12c:	07cb      	lsls	r3, r1, #31
    f12e:	f100 80d5 	bmi.w	f2dc <ull_conn_llcp+0x11f8>
		if (conn->tx_head == conn->tx_data) {
    f132:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    f136:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    f138:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    f13c:	f000 81cb 	beq.w	f4d6 <ull_conn_llcp+0x13f2>
		} else if (!conn->tx_ctrl) {
    f140:	2900      	cmp	r1, #0
    f142:	f000 81c0 	beq.w	f4c6 <ull_conn_llcp+0x13e2>
	tx->next = conn->tx_ctrl_last->next;
    f146:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
    f14a:	6811      	ldr	r1, [r2, #0]
    f14c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    f14e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    f150:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    f154:	6802      	ldr	r2, [r0, #0]
    f156:	2a00      	cmp	r2, #0
    f158:	f000 81b2 	beq.w	f4c0 <ull_conn_llcp+0x13dc>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    f15c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
    f160:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    f164:	2300      	movs	r3, #0
    f166:	f8c8 3000 	str.w	r3, [r8]
    f16a:	e4a9      	b.n	eac0 <ull_conn_llcp+0x9dc>
			conn->tx_data = conn->tx_data->next;
    f16c:	6819      	ldr	r1, [r3, #0]
    f16e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f172:	2a00      	cmp	r2, #0
    f174:	f47f ad99 	bne.w	ecaa <ull_conn_llcp+0xbc6>
			tx->next = conn->tx_head->next;
    f178:	681a      	ldr	r2, [r3, #0]
    f17a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    f17e:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
    f182:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
    f186:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    f18a:	e599      	b.n	ecc0 <ull_conn_llcp+0xbdc>
			conn->tx_data = conn->tx_data->next;
    f18c:	6819      	ldr	r1, [r3, #0]
    f18e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f192:	2a00      	cmp	r2, #0
    f194:	f47f ad0d 	bne.w	ebb2 <ull_conn_llcp+0xace>
			tx->next = conn->tx_head->next;
    f198:	681a      	ldr	r2, [r3, #0]
    f19a:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    f19e:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
    f1a2:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    f1a6:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
    f1aa:	e50d      	b.n	ebc8 <ull_conn_llcp+0xae4>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    f1ac:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    f1b0:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->tx_data_last = tx;
    f1b4:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
    f1b8:	f7fe bf9f 	b.w	e0fa <ull_conn_llcp+0x16>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f1bc:	791a      	ldrb	r2, [r3, #4]
    f1be:	f002 0203 	and.w	r2, r2, #3
    f1c2:	2a03      	cmp	r2, #3
    f1c4:	f000 813d 	beq.w	f442 <ull_conn_llcp+0x135e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f1c8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f1cc:	f7ff b9ef 	b.w	e5ae <ull_conn_llcp+0x4ca>
		if (conn->llcp_phy.tx & PHY_2M) {
    f1d0:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    f1d2:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
    f1d6:	f3c3 0282 	ubfx	r2, r3, #2, #3
    f1da:	f140 8093 	bpl.w	f304 <ull_conn_llcp+0x1220>
			conn->llcp_phy.tx = PHY_2M;
    f1de:	2202      	movs	r2, #2
    f1e0:	f362 0384 	bfi	r3, r2, #2, #3
    f1e4:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
    f1e8:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
    f1ec:	065f      	lsls	r7, r3, #25
    f1ee:	ea4f 1253 	mov.w	r2, r3, lsr #5
    f1f2:	d57e      	bpl.n	f2f2 <ull_conn_llcp+0x120e>
			conn->llcp_phy.rx = PHY_2M;
    f1f4:	2202      	movs	r2, #2
    f1f6:	f362 1347 	bfi	r3, r2, #5, #3
    f1fa:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
    f1fe:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    f200:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
    f204:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    f208:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
    f20c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f210:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    f214:	f3c2 0182 	ubfx	r1, r2, #2, #3
    f218:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    f21c:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    f220:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    f224:	428f      	cmp	r7, r1
    f226:	bf08      	it	eq
    f228:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    f22a:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    f22c:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    f230:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    f234:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    f238:	bf08      	it	eq
    f23a:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    f23c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    f240:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    f244:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
    f246:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
    f24a:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    f24e:	f7fe bf77 	b.w	e140 <ull_conn_llcp+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f252:	791a      	ldrb	r2, [r3, #4]
    f254:	f002 0203 	and.w	r2, r2, #3
    f258:	2a03      	cmp	r2, #3
    f25a:	d031      	beq.n	f2c0 <ull_conn_llcp+0x11dc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f25c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f260:	f7ff b8ad 	b.w	e3be <ull_conn_llcp+0x2da>
	    ((pdu_data_tx->llctrl.opcode !=
    f264:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f266:	2a03      	cmp	r2, #3
    f268:	f43f aecf 	beq.w	f00a <ull_conn_llcp+0xf26>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f26c:	2a0a      	cmp	r2, #10
    f26e:	f47f aefa 	bne.w	f066 <ull_conn_llcp+0xf82>
    f272:	e6ca      	b.n	f00a <ull_conn_llcp+0xf26>
			conn->tx_data = conn->tx_data->next;
    f274:	6819      	ldr	r1, [r3, #0]
    f276:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f27a:	2a00      	cmp	r2, #0
    f27c:	f47f aa22 	bne.w	e6c4 <ull_conn_llcp+0x5e0>
			tx->next = conn->tx_head->next;
    f280:	681a      	ldr	r2, [r3, #0]
    f282:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    f286:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
    f28a:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    f28e:	f7ff ba22 	b.w	e6d6 <ull_conn_llcp+0x5f2>
			conn->tx_data = conn->tx_data->next;
    f292:	6819      	ldr	r1, [r3, #0]
    f294:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f298:	2a00      	cmp	r2, #0
    f29a:	f47f adca 	bne.w	ee32 <ull_conn_llcp+0xd4e>
			tx->next = conn->tx_head->next;
    f29e:	681a      	ldr	r2, [r3, #0]
    f2a0:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    f2a4:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
    f2a8:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    f2ac:	e5ca      	b.n	ee44 <ull_conn_llcp+0xd60>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f2ae:	791a      	ldrb	r2, [r3, #4]
    f2b0:	f002 0203 	and.w	r2, r2, #3
    f2b4:	2a03      	cmp	r2, #3
    f2b6:	d00a      	beq.n	f2ce <ull_conn_llcp+0x11ea>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f2b8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f2bc:	f7ff ba56 	b.w	e76c <ull_conn_llcp+0x688>
	    ((pdu_data_tx->llctrl.opcode !=
    f2c0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f2c2:	2a03      	cmp	r2, #3
    f2c4:	f43f af00 	beq.w	f0c8 <ull_conn_llcp+0xfe4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f2c8:	2a0a      	cmp	r2, #10
    f2ca:	d1c7      	bne.n	f25c <ull_conn_llcp+0x1178>
    f2cc:	e6fc      	b.n	f0c8 <ull_conn_llcp+0xfe4>
	    ((pdu_data_tx->llctrl.opcode !=
    f2ce:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f2d0:	2a03      	cmp	r2, #3
    f2d2:	f43f aee3 	beq.w	f09c <ull_conn_llcp+0xfb8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f2d6:	2a0a      	cmp	r2, #10
    f2d8:	d1ee      	bne.n	f2b8 <ull_conn_llcp+0x11d4>
    f2da:	e6df      	b.n	f09c <ull_conn_llcp+0xfb8>
		if (!conn->tx_ctrl) {
    f2dc:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    f2e0:	2900      	cmp	r1, #0
    f2e2:	f47f af30 	bne.w	f146 <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head;
    f2e6:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    f2e8:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    f2ec:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    f2f0:	e730      	b.n	f154 <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_1M) {
    f2f2:	07d1      	lsls	r1, r2, #31
    f2f4:	f140 80fb 	bpl.w	f4ee <ull_conn_llcp+0x140a>
			conn->llcp_phy.rx = PHY_1M;
    f2f8:	2201      	movs	r2, #1
    f2fa:	f362 1347 	bfi	r3, r2, #5, #3
    f2fe:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    f302:	e77c      	b.n	f1fe <ull_conn_llcp+0x111a>
		} else if (conn->llcp_phy.tx & PHY_1M) {
    f304:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
    f306:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
    f30a:	f140 8152 	bpl.w	f5b2 <ull_conn_llcp+0x14ce>
			conn->llcp_phy.tx = PHY_1M;
    f30e:	2201      	movs	r2, #1
    f310:	f362 0384 	bfi	r3, r2, #2, #3
    f314:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    f318:	e766      	b.n	f1e8 <ull_conn_llcp+0x1104>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f31a:	791a      	ldrb	r2, [r3, #4]
    f31c:	f002 0203 	and.w	r2, r2, #3
    f320:	2a03      	cmp	r2, #3
    f322:	f000 80fb 	beq.w	f51c <ull_conn_llcp+0x1438>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f326:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f32a:	e442      	b.n	ebb2 <ull_conn_llcp+0xace>
			conn->tx_data = conn->tx_data->next;
    f32c:	6819      	ldr	r1, [r3, #0]
    f32e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f332:	2a00      	cmp	r2, #0
    f334:	f47f ae27 	bne.w	ef86 <ull_conn_llcp+0xea2>
			tx->next = conn->tx_head->next;
    f338:	681a      	ldr	r2, [r3, #0]
    f33a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
    f33e:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
    f342:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
    f346:	e627      	b.n	ef98 <ull_conn_llcp+0xeb4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    f348:	4833      	ldr	r0, [pc, #204]	; (f418 <ull_conn_llcp+0x1334>)
    f34a:	f7f7 fc35 	bl	6bb8 <mem_acquire>
	if (!tx) {
    f34e:	2800      	cmp	r0, #0
    f350:	f43f abb6 	beq.w	eac0 <ull_conn_llcp+0x9dc>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    f354:	7902      	ldrb	r2, [r0, #4]
    f356:	f042 0203 	orr.w	r2, r2, #3
    f35a:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    f35c:	2218      	movs	r2, #24
    f35e:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    f360:	2210      	movs	r2, #16
    f362:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
    f364:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
    f368:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
    f36a:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
    f36e:	8142      	strh	r2, [r0, #10]
	rsp->latency =
    f370:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
    f374:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
    f376:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
    f37a:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
    f37c:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
    f380:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
    f382:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
    f386:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    f38a:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
    f38e:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    f392:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
    f396:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    f39a:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
    f39e:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    f3a2:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
    f3a6:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    f3aa:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
    f3ae:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    f3b2:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
    f3b6:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
    f3ba:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
    f3be:	2a00      	cmp	r2, #0
    f3c0:	d035      	beq.n	f42e <ull_conn_llcp+0x134a>
	    !conn->llcp_enc.pause_tx &&
    f3c2:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
    f3c6:	078f      	lsls	r7, r1, #30
    f3c8:	d431      	bmi.n	f42e <ull_conn_llcp+0x134a>
	    !conn->llcp_phy.pause_tx &&
    f3ca:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
    f3ce:	07c9      	lsls	r1, r1, #31
    f3d0:	d42d      	bmi.n	f42e <ull_conn_llcp+0x134a>
		if (conn->tx_head == conn->tx_data) {
    f3d2:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    f3d6:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
    f3d8:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    f3dc:	f000 80c6 	beq.w	f56c <ull_conn_llcp+0x1488>
		} else if (!conn->tx_ctrl) {
    f3e0:	2900      	cmp	r1, #0
    f3e2:	f000 80bb 	beq.w	f55c <ull_conn_llcp+0x1478>
	tx->next = conn->tx_ctrl_last->next;
    f3e6:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
    f3ea:	6811      	ldr	r1, [r2, #0]
    f3ec:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    f3ee:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
    f3f0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    f3f4:	6802      	ldr	r2, [r0, #0]
    f3f6:	2a00      	cmp	r2, #0
    f3f8:	f000 80ad 	beq.w	f556 <ull_conn_llcp+0x1472>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    f3fc:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    f400:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
    f404:	2305      	movs	r3, #5
    f406:	f363 0203 	bfi	r2, r3, #0, #4
    f40a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    f40e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    f412:	f7fe be72 	b.w	e0fa <ull_conn_llcp+0x16>
    f416:	bf00      	nop
    f418:	20001d48 	.word	0x20001d48
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f41c:	791a      	ldrb	r2, [r3, #4]
    f41e:	f002 0203 	and.w	r2, r2, #3
    f422:	2a03      	cmp	r2, #3
    f424:	f000 80ae 	beq.w	f584 <ull_conn_llcp+0x14a0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f428:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f42c:	e43d      	b.n	ecaa <ull_conn_llcp+0xbc6>
		if (!conn->tx_ctrl) {
    f42e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    f432:	2900      	cmp	r1, #0
    f434:	d1d7      	bne.n	f3e6 <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head;
    f436:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    f438:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    f43c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
    f440:	e7d8      	b.n	f3f4 <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
    f442:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f444:	2a03      	cmp	r2, #3
    f446:	f43f ae18 	beq.w	f07a <ull_conn_llcp+0xf96>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f44a:	2a0a      	cmp	r2, #10
    f44c:	f47f aebc 	bne.w	f1c8 <ull_conn_llcp+0x10e4>
    f450:	e613      	b.n	f07a <ull_conn_llcp+0xf96>
			conn->tx_data = conn->tx_data->next;
    f452:	6819      	ldr	r1, [r3, #0]
    f454:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f458:	2a00      	cmp	r2, #0
    f45a:	f47f ad48 	bne.w	eeee <ull_conn_llcp+0xe0a>
			tx->next = conn->tx_head->next;
    f45e:	681a      	ldr	r2, [r3, #0]
    f460:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    f462:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    f464:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    f468:	e548      	b.n	eefc <ull_conn_llcp+0xe18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f46a:	791a      	ldrb	r2, [r3, #4]
    f46c:	f002 0203 	and.w	r2, r2, #3
    f470:	2a03      	cmp	r2, #3
    f472:	d062      	beq.n	f53a <ull_conn_llcp+0x1456>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f474:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f478:	f7ff b924 	b.w	e6c4 <ull_conn_llcp+0x5e0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f47c:	791a      	ldrb	r2, [r3, #4]
    f47e:	f002 0203 	and.w	r2, r2, #3
    f482:	2a03      	cmp	r2, #3
    f484:	d060      	beq.n	f548 <ull_conn_llcp+0x1464>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f486:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f48a:	e4d2      	b.n	ee32 <ull_conn_llcp+0xd4e>
			conn->llcp_cu.interval = interval_max;
    f48c:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
    f490:	f7ff ba97 	b.w	e9c2 <ull_conn_llcp+0x8de>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f494:	791a      	ldrb	r2, [r3, #4]
    f496:	f002 0203 	and.w	r2, r2, #3
    f49a:	2a03      	cmp	r2, #3
    f49c:	f000 8099 	beq.w	f5d2 <ull_conn_llcp+0x14ee>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f4a0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f4a4:	e523      	b.n	eeee <ull_conn_llcp+0xe0a>
			conn->tx_data = conn->tx_data->next;
    f4a6:	6818      	ldr	r0, [r3, #0]
    f4a8:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f4ac:	2900      	cmp	r1, #0
    f4ae:	f47f aafc 	bne.w	eaaa <ull_conn_llcp+0x9c6>
			tx->next = conn->tx_head->next;
    f4b2:	6819      	ldr	r1, [r3, #0]
    f4b4:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
    f4b6:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
    f4b8:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
    f4bc:	f7ff bafc 	b.w	eab8 <ull_conn_llcp+0x9d4>
		conn->tx_data_last = tx;
    f4c0:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    f4c4:	e64a      	b.n	f15c <ull_conn_llcp+0x1078>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f4c6:	7911      	ldrb	r1, [r2, #4]
    f4c8:	f001 0103 	and.w	r1, r1, #3
    f4cc:	2903      	cmp	r1, #3
    f4ce:	d017      	beq.n	f500 <ull_conn_llcp+0x141c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f4d0:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
    f4d4:	e637      	b.n	f146 <ull_conn_llcp+0x1062>
			conn->tx_data = conn->tx_data->next;
    f4d6:	6813      	ldr	r3, [r2, #0]
    f4d8:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f4dc:	2900      	cmp	r1, #0
    f4de:	f47f ae32 	bne.w	f146 <ull_conn_llcp+0x1062>
			tx->next = conn->tx_head->next;
    f4e2:	6811      	ldr	r1, [r2, #0]
    f4e4:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    f4e6:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    f4e8:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    f4ec:	e632      	b.n	f154 <ull_conn_llcp+0x1070>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
    f4ee:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
    f4f2:	bf18      	it	ne
    f4f4:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    f4f6:	f362 1347 	bfi	r3, r2, #5, #3
    f4fa:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    f4fe:	e67e      	b.n	f1fe <ull_conn_llcp+0x111a>
	    ((pdu_data_tx->llctrl.opcode !=
    f500:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f502:	2903      	cmp	r1, #3
    f504:	d0ed      	beq.n	f4e2 <ull_conn_llcp+0x13fe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f506:	290a      	cmp	r1, #10
    f508:	d1e2      	bne.n	f4d0 <ull_conn_llcp+0x13ec>
    f50a:	e7ea      	b.n	f4e2 <ull_conn_llcp+0x13fe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f50c:	791a      	ldrb	r2, [r3, #4]
    f50e:	f002 0203 	and.w	r2, r2, #3
    f512:	2a03      	cmp	r2, #3
    f514:	d00a      	beq.n	f52c <ull_conn_llcp+0x1448>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f516:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f51a:	e534      	b.n	ef86 <ull_conn_llcp+0xea2>
	    ((pdu_data_tx->llctrl.opcode !=
    f51c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f51e:	2a03      	cmp	r2, #3
    f520:	f43f ae3a 	beq.w	f198 <ull_conn_llcp+0x10b4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f524:	2a0a      	cmp	r2, #10
    f526:	f47f aefe 	bne.w	f326 <ull_conn_llcp+0x1242>
    f52a:	e635      	b.n	f198 <ull_conn_llcp+0x10b4>
	    ((pdu_data_tx->llctrl.opcode !=
    f52c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f52e:	2a03      	cmp	r2, #3
    f530:	f43f af02 	beq.w	f338 <ull_conn_llcp+0x1254>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f534:	2a0a      	cmp	r2, #10
    f536:	d1ee      	bne.n	f516 <ull_conn_llcp+0x1432>
    f538:	e6fe      	b.n	f338 <ull_conn_llcp+0x1254>
	    ((pdu_data_tx->llctrl.opcode !=
    f53a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f53c:	2a03      	cmp	r2, #3
    f53e:	f43f ae9f 	beq.w	f280 <ull_conn_llcp+0x119c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f542:	2a0a      	cmp	r2, #10
    f544:	d196      	bne.n	f474 <ull_conn_llcp+0x1390>
    f546:	e69b      	b.n	f280 <ull_conn_llcp+0x119c>
	    ((pdu_data_tx->llctrl.opcode !=
    f548:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f54a:	2a03      	cmp	r2, #3
    f54c:	f43f aea7 	beq.w	f29e <ull_conn_llcp+0x11ba>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f550:	2a0a      	cmp	r2, #10
    f552:	d198      	bne.n	f486 <ull_conn_llcp+0x13a2>
    f554:	e6a3      	b.n	f29e <ull_conn_llcp+0x11ba>
		conn->tx_data_last = tx;
    f556:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    f55a:	e74f      	b.n	f3fc <ull_conn_llcp+0x1318>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f55c:	7911      	ldrb	r1, [r2, #4]
    f55e:	f001 0103 	and.w	r1, r1, #3
    f562:	2903      	cmp	r1, #3
    f564:	d016      	beq.n	f594 <ull_conn_llcp+0x14b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f566:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
    f56a:	e73c      	b.n	f3e6 <ull_conn_llcp+0x1302>
			conn->tx_data = conn->tx_data->next;
    f56c:	6813      	ldr	r3, [r2, #0]
    f56e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    f572:	2900      	cmp	r1, #0
    f574:	f47f af37 	bne.w	f3e6 <ull_conn_llcp+0x1302>
			tx->next = conn->tx_head->next;
    f578:	6811      	ldr	r1, [r2, #0]
    f57a:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
    f57c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
    f57e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
    f582:	e737      	b.n	f3f4 <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
    f584:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f586:	2a03      	cmp	r2, #3
    f588:	f43f adf6 	beq.w	f178 <ull_conn_llcp+0x1094>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f58c:	2a0a      	cmp	r2, #10
    f58e:	f47f af4b 	bne.w	f428 <ull_conn_llcp+0x1344>
    f592:	e5f1      	b.n	f178 <ull_conn_llcp+0x1094>
	    ((pdu_data_tx->llctrl.opcode !=
    f594:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f596:	2903      	cmp	r1, #3
    f598:	d0ee      	beq.n	f578 <ull_conn_llcp+0x1494>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f59a:	290a      	cmp	r1, #10
    f59c:	d1e3      	bne.n	f566 <ull_conn_llcp+0x1482>
    f59e:	e7eb      	b.n	f578 <ull_conn_llcp+0x1494>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f5a0:	7919      	ldrb	r1, [r3, #4]
    f5a2:	f001 0103 	and.w	r1, r1, #3
    f5a6:	2903      	cmp	r1, #3
    f5a8:	d00c      	beq.n	f5c4 <ull_conn_llcp+0x14e0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    f5aa:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
    f5ae:	f7ff ba7c 	b.w	eaaa <ull_conn_llcp+0x9c6>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
    f5b2:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
    f5b6:	bf18      	it	ne
    f5b8:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
    f5ba:	f362 0384 	bfi	r3, r2, #2, #3
    f5be:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
    f5c2:	e611      	b.n	f1e8 <ull_conn_llcp+0x1104>
	    ((pdu_data_tx->llctrl.opcode !=
    f5c4:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f5c6:	2903      	cmp	r1, #3
    f5c8:	f43f af73 	beq.w	f4b2 <ull_conn_llcp+0x13ce>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f5cc:	290a      	cmp	r1, #10
    f5ce:	d1ec      	bne.n	f5aa <ull_conn_llcp+0x14c6>
    f5d0:	e76f      	b.n	f4b2 <ull_conn_llcp+0x13ce>
	    ((pdu_data_tx->llctrl.opcode !=
    f5d2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    f5d4:	2a03      	cmp	r2, #3
    f5d6:	f43f af42 	beq.w	f45e <ull_conn_llcp+0x137a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    f5da:	2a0a      	cmp	r2, #10
    f5dc:	f47f af60 	bne.w	f4a0 <ull_conn_llcp+0x13bc>
    f5e0:	e73d      	b.n	f45e <ull_conn_llcp+0x137a>
		LL_ASSERT(0);
    f5e2:	4a02      	ldr	r2, [pc, #8]	; (f5ec <ull_conn_llcp+0x1508>)
    f5e4:	4902      	ldr	r1, [pc, #8]	; (f5f0 <ull_conn_llcp+0x150c>)
    f5e6:	f640 73d2 	movw	r3, #4050	; 0xfd2
    f5ea:	e435      	b.n	ee58 <ull_conn_llcp+0xd74>
    f5ec:	0001d244 	.word	0x0001d244
    f5f0:	0001ce44 	.word	0x0001ce44

0000f5f4 <ull_conn_tx_demux>:
{
    f5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    f5f8:	4c24      	ldr	r4, [pc, #144]	; (f68c <__kernel_ram_size+0x64>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f5fa:	4f25      	ldr	r7, [pc, #148]	; (f690 <__kernel_ram_size+0x68>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    f5fc:	78e2      	ldrb	r2, [r4, #3]
{
    f5fe:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
    f600:	1d26      	adds	r6, r4, #4
    f602:	e021      	b.n	f648 <__kernel_ram_size+0x20>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    f604:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    f608:	4638      	mov	r0, r7
    f60a:	f7f7 fb07 	bl	6c1c <mem_get>
	if (conn->lll.handle != handle) {
    f60e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    f610:	bb2a      	cbnz	r2, f65e <__kernel_ram_size+0x36>
			struct node_tx *tx = lll_tx->node;
    f612:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
    f616:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
    f61a:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
    f61c:	b351      	cbz	r1, f674 <__kernel_ram_size+0x4c>
			if (conn->tx_data_last) {
    f61e:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
    f622:	b102      	cbz	r2, f626 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
    f624:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
    f626:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
    f62a:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
    f62c:	78a3      	ldrb	r3, [r4, #2]
    f62e:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
    f630:	429a      	cmp	r2, r3
    f632:	d005      	beq.n	f640 <__kernel_ram_size+0x18>
	_first += 1U;
    f634:	3301      	adds	r3, #1
    f636:	b2db      	uxtb	r3, r3
		_first = 0U;
    f638:	4299      	cmp	r1, r3
    f63a:	bf08      	it	eq
    f63c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    f63e:	70a3      	strb	r3, [r4, #2]
	} while (--count);
    f640:	3d01      	subs	r5, #1
    f642:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    f646:	d01e      	beq.n	f686 <__kernel_ram_size+0x5e>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
    f648:	78a3      	ldrb	r3, [r4, #2]
    f64a:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
    f64c:	4293      	cmp	r3, r2
    f64e:	d01a      	beq.n	f686 <__kernel_ram_size+0x5e>
	return (void *)(fifo + first * size);
    f650:	fb13 f301 	smulbb	r3, r3, r1
    f654:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
    f658:	5af2      	ldrh	r2, [r6, r3]
    f65a:	2a00      	cmp	r2, #0
    f65c:	d0d2      	beq.n	f604 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
    f65e:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
    f662:	790b      	ldrb	r3, [r1, #4]
    f664:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    f668:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
    f66c:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
    f66e:	f7fa fe71 	bl	a354 <ll_tx_ack_put>
    f672:	e7da      	b.n	f62a <__kernel_ram_size+0x2>
				if (!conn->tx_head) {
    f674:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
    f678:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
    f67c:	2a00      	cmp	r2, #0
    f67e:	d1ce      	bne.n	f61e <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
    f680:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
    f684:	e7cf      	b.n	f626 <ull_conn_tx_demux+0x32>
}
    f686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f68a:	bf00      	nop
    f68c:	20000554 	.word	0x20000554
    f690:	20000ec8 	.word	0x20000ec8

0000f694 <conn_cleanup_finalize>:
{
    f694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
    f698:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
    f69c:	b082      	sub	sp, #8
    f69e:	4606      	mov	r6, r0
	while (rx) {
    f6a0:	b144      	cbz	r4, f6b4 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
    f6a2:	2501      	movs	r5, #1
		rx = hdr->link->mem;
    f6a4:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
    f6a6:	4621      	mov	r1, r4
		rx = hdr->link->mem;
    f6a8:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
    f6aa:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
    f6ac:	f7fa fe0e 	bl	a2cc <ll_rx_put>
	while (rx) {
    f6b0:	2c00      	cmp	r4, #0
    f6b2:	d1f7      	bne.n	f6a4 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
    f6b4:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
    f6b8:	b381      	cbz	r1, f71c <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
    f6ba:	f8df 80a4 	ldr.w	r8, [pc, #164]	; f760 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
    f6be:	f8df a0a4 	ldr.w	sl, [pc, #164]	; f764 <conn_cleanup_finalize+0xd0>
    f6c2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; f768 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    f6c6:	f106 0768 	add.w	r7, r6, #104	; 0x68
    f6ca:	e007      	b.n	f6dc <conn_cleanup_finalize+0x48>
    f6cc:	4629      	mov	r1, r5
    f6ce:	463a      	mov	r2, r7
    f6d0:	4620      	mov	r0, r4
    f6d2:	f7f7 fad5 	bl	6c80 <memq_enqueue>
	while (conn->tx_head) {
    f6d6:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
    f6da:	b1f9      	cbz	r1, f71c <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    f6dc:	4630      	mov	r0, r6
    f6de:	f7fc fa61 	bl	bba4 <tx_ull_dequeue>
    f6e2:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
    f6e4:	4640      	mov	r0, r8
    f6e6:	f7f7 fa67 	bl	6bb8 <mem_acquire>
		LL_ASSERT(link);
    f6ea:	4604      	mov	r4, r0
    f6ec:	2800      	cmp	r0, #0
    f6ee:	d1ed      	bne.n	f6cc <conn_cleanup_finalize+0x38>
    f6f0:	481e      	ldr	r0, [pc, #120]	; (f76c <conn_cleanup_finalize+0xd8>)
    f6f2:	f640 134f 	movw	r3, #2383	; 0x94f
    f6f6:	4652      	mov	r2, sl
    f6f8:	4649      	mov	r1, r9
    f6fa:	f008 fd35 	bl	18168 <printk>
    f6fe:	4040      	eors	r0, r0
    f700:	f380 8811 	msr	BASEPRI, r0
    f704:	f04f 0003 	mov.w	r0, #3
    f708:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    f70a:	4629      	mov	r1, r5
    f70c:	463a      	mov	r2, r7
    f70e:	4620      	mov	r0, r4
    f710:	f7f7 fab6 	bl	6c80 <memq_enqueue>
	while (conn->tx_head) {
    f714:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
    f718:	2900      	cmp	r1, #0
    f71a:	d1df      	bne.n	f6dc <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    f71c:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    f71e:	4b14      	ldr	r3, [pc, #80]	; (f770 <conn_cleanup_finalize+0xdc>)
    f720:	9600      	str	r6, [sp, #0]
    f722:	3203      	adds	r2, #3
    f724:	b2d2      	uxtb	r2, r2
    f726:	2101      	movs	r1, #1
    f728:	2000      	movs	r0, #0
    f72a:	f7f8 fcdd 	bl	80e8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f72e:	f030 0302 	bics.w	r3, r0, #2
    f732:	d00c      	beq.n	f74e <conn_cleanup_finalize+0xba>
    f734:	4a0b      	ldr	r2, [pc, #44]	; (f764 <conn_cleanup_finalize+0xd0>)
    f736:	490f      	ldr	r1, [pc, #60]	; (f774 <conn_cleanup_finalize+0xe0>)
    f738:	480c      	ldr	r0, [pc, #48]	; (f76c <conn_cleanup_finalize+0xd8>)
    f73a:	f640 1314 	movw	r3, #2324	; 0x914
    f73e:	f008 fd13 	bl	18168 <printk>
    f742:	4040      	eors	r0, r0
    f744:	f380 8811 	msr	BASEPRI, r0
    f748:	f04f 0003 	mov.w	r0, #3
    f74c:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
    f74e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
    f752:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
    f754:	8533      	strh	r3, [r6, #40]	; 0x28
}
    f756:	b002      	add	sp, #8
    f758:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
    f75c:	f7ff bf4a 	b.w	f5f4 <ull_conn_tx_demux>
    f760:	20001dfc 	.word	0x20001dfc
    f764:	0001d244 	.word	0x0001d244
    f768:	0001d29c 	.word	0x0001d29c
    f76c:	0001cde4 	.word	0x0001cde4
    f770:	0000b951 	.word	0x0000b951
    f774:	0001d324 	.word	0x0001d324

0000f778 <ull_conn_done>:
{
    f778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
    f77c:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    f77e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    f780:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f784:	429a      	cmp	r2, r3
{
    f786:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
    f788:	f000 808f 	beq.w	f8aa <ull_conn_done+0x132>
	switch (done->extra.mic_state) {
    f78c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
    f790:	2b01      	cmp	r3, #1
    f792:	4605      	mov	r5, r0
    f794:	f000 80e5 	beq.w	f962 <ull_conn_done+0x1ea>
    f798:	2b02      	cmp	r3, #2
    f79a:	f000 80cc 	beq.w	f936 <ull_conn_done+0x1be>
    f79e:	2b00      	cmp	r3, #0
    f7a0:	f000 80af 	beq.w	f902 <ull_conn_done+0x18a>
	reason_final = conn->llcp_terminate.reason_final;
    f7a4:	f894 6143 	ldrb.w	r6, [r4, #323]	; 0x143
	if (reason_final && (
    f7a8:	2e00      	cmp	r6, #0
    f7aa:	f040 80c7 	bne.w	f93c <ull_conn_done+0x1c4>
	latency_event = lll->latency_event;
    f7ae:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
    f7b2:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
    f7b4:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
    f7b8:	e9cd 6608 	strd	r6, r6, [sp, #32]
	elapsed_event = latency_event + 1;
    f7bc:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
    f7be:	2b00      	cmp	r3, #0
    f7c0:	d076      	beq.n	f8b0 <ull_conn_done+0x138>
		} else if (lll->role) {
    f7c2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f7c6:	2b00      	cmp	r3, #0
    f7c8:	f2c0 8111 	blt.w	f9ee <ull_conn_done+0x276>
	if (done->extra.crc_valid) {
    f7cc:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
    f7d0:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
    f7d2:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
    f7d4:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
    f7d8:	f140 80c9 	bpl.w	f96e <ull_conn_done+0x1f6>
		conn->supervision_expire = 0U;
    f7dc:	2300      	movs	r3, #0
    f7de:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
    f7e2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    f7e6:	b12b      	cbz	r3, f7f4 <ull_conn_done+0x7c>
		if (conn->procedure_expire > elapsed_event) {
    f7e8:	42bb      	cmp	r3, r7
    f7ea:	f240 8127 	bls.w	fa3c <ull_conn_done+0x2c4>
			conn->procedure_expire -= elapsed_event;
    f7ee:	1bdb      	subs	r3, r3, r7
    f7f0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
    f7f4:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    f7f8:	b12b      	cbz	r3, f806 <ull_conn_done+0x8e>
		if (conn->apto_expire > elapsed_event) {
    f7fa:	42bb      	cmp	r3, r7
    f7fc:	f240 80e3 	bls.w	f9c6 <ull_conn_done+0x24e>
			conn->apto_expire -= elapsed_event;
    f800:	1bdb      	subs	r3, r3, r7
    f802:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
    f806:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
    f80a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    f80e:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
    f812:	b15a      	cbz	r2, f82c <ull_conn_done+0xb4>
		if (conn->appto_expire > elapsed_event) {
    f814:	42ba      	cmp	r2, r7
    f816:	f200 80ba 	bhi.w	f98e <ull_conn_done+0x216>
			if ((conn->procedure_expire == 0U) &&
    f81a:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
    f81e:	2000      	movs	r0, #0
    f820:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
    f824:	b912      	cbnz	r2, f82c <ull_conn_done+0xb4>
    f826:	4299      	cmp	r1, r3
    f828:	f000 8124 	beq.w	fa74 <ull_conn_done+0x2fc>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f82c:	1a5b      	subs	r3, r3, r1
    f82e:	f003 0303 	and.w	r3, r3, #3
    f832:	2b02      	cmp	r3, #2
    f834:	f000 80b4 	beq.w	f9a0 <ull_conn_done+0x228>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
    f838:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
    f83c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
    f840:	429a      	cmp	r2, r3
    f842:	f000 80d2 	beq.w	f9ea <ull_conn_done+0x272>
		lll->latency_event = 0U;
    f846:	2200      	movs	r2, #0
    f848:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    f84a:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
    f84e:	b916      	cbnz	r6, f856 <ull_conn_done+0xde>
    f850:	4590      	cmp	r8, r2
    f852:	f000 80b2 	beq.w	f9ba <ull_conn_done+0x242>
		lazy = lll->latency_event + 1U;
    f856:	3201      	adds	r2, #1
    f858:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    f85a:	b913      	cbnz	r3, f862 <ull_conn_done+0xea>
    f85c:	2d00      	cmp	r5, #0
    f85e:	f000 808f 	beq.w	f980 <ull_conn_done+0x208>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    f862:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
    f864:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f866:	9500      	str	r5, [sp, #0]
    f868:	2000      	movs	r0, #0
    f86a:	4d99      	ldr	r5, [pc, #612]	; (fad0 <ull_conn_done+0x358>)
    f86c:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
    f86e:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f870:	e9cd 0001 	strd	r0, r0, [sp, #4]
    f874:	9604      	str	r6, [sp, #16]
    f876:	9406      	str	r4, [sp, #24]
    f878:	b2d2      	uxtb	r2, r2
    f87a:	2101      	movs	r1, #1
    f87c:	9505      	str	r5, [sp, #20]
    f87e:	f7f8 fc1b 	bl	80b8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f882:	f030 0302 	bics.w	r3, r0, #2
    f886:	d010      	beq.n	f8aa <ull_conn_done+0x132>
    f888:	f7fa fdd6 	bl	a438 <ull_disable_mark_get>
    f88c:	4284      	cmp	r4, r0
    f88e:	d00c      	beq.n	f8aa <ull_conn_done+0x132>
    f890:	4a90      	ldr	r2, [pc, #576]	; (fad4 <ull_conn_done+0x35c>)
    f892:	4991      	ldr	r1, [pc, #580]	; (fad8 <ull_conn_done+0x360>)
    f894:	4891      	ldr	r0, [pc, #580]	; (fadc <ull_conn_done+0x364>)
    f896:	f240 63be 	movw	r3, #1726	; 0x6be
    f89a:	f008 fc65 	bl	18168 <printk>
    f89e:	4040      	eors	r0, r0
    f8a0:	f380 8811 	msr	BASEPRI, r0
    f8a4:	f04f 0003 	mov.w	r0, #3
    f8a8:	df02      	svc	2
}
    f8aa:	b00a      	add	sp, #40	; 0x28
    f8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
    f8b0:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
    f8b4:	f013 0301 	ands.w	r3, r3, #1
    f8b8:	d190      	bne.n	f7dc <ull_conn_done+0x64>
	else if (conn->connect_expire) {
    f8ba:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
    f8be:	2900      	cmp	r1, #0
    f8c0:	d055      	beq.n	f96e <ull_conn_done+0x1f6>
		if (conn->connect_expire > elapsed_event) {
    f8c2:	42b9      	cmp	r1, r7
    f8c4:	f240 80dd 	bls.w	fa82 <ull_conn_done+0x30a>
			conn->connect_expire -= elapsed_event;
    f8c8:	1bc9      	subs	r1, r1, r7
	if (conn->supervision_expire) {
    f8ca:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
    f8ce:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
    f8d2:	2b00      	cmp	r3, #0
    f8d4:	d085      	beq.n	f7e2 <ull_conn_done+0x6a>
		if (conn->supervision_expire > elapsed_event) {
    f8d6:	429f      	cmp	r7, r3
    f8d8:	f080 809b 	bcs.w	fa12 <ull_conn_done+0x29a>
			conn->supervision_expire -= elapsed_event;
    f8dc:	1bdb      	subs	r3, r3, r7
    f8de:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
    f8e0:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
    f8e2:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
    f8e4:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
    f8e8:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
    f8ea:	d908      	bls.n	f8fe <ull_conn_done+0x186>
			else if (lll->role) {
    f8ec:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    f8f0:	4293      	cmp	r3, r2
    f8f2:	f6bf af76 	bge.w	f7e2 <ull_conn_done+0x6a>
				if (latency_event) {
    f8f6:	f1b8 0f00 	cmp.w	r8, #0
    f8fa:	f000 80ad 	beq.w	fa58 <ull_conn_done+0x2e0>
				force = 1U;
    f8fe:	2601      	movs	r6, #1
    f900:	e76f      	b.n	f7e2 <ull_conn_done+0x6a>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    f902:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    f906:	0718      	lsls	r0, r3, #28
    f908:	d551      	bpl.n	f9ae <ull_conn_done+0x236>
					    (lll->latency + 6)) ?
    f90a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
    f90c:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
    f910:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
    f912:	4299      	cmp	r1, r3
    f914:	bfc4      	itt	gt
    f916:	1f8b      	subgt	r3, r1, #6
    f918:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
    f91a:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
    f91e:	bfcc      	ite	gt
    f920:	b29b      	uxthgt	r3, r3
    f922:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
    f924:	4298      	cmp	r0, r3
    f926:	d06e      	beq.n	fa06 <ull_conn_done+0x28e>
				conn->appto_reload = appto_reload_new;
    f928:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
    f92c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
    f930:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
    f934:	e736      	b.n	f7a4 <ull_conn_done+0x2c>
		conn->llcp_terminate.reason_final =
    f936:	263d      	movs	r6, #61	; 0x3d
    f938:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
	if (conn == conn_upd_curr) {
    f93c:	4b68      	ldr	r3, [pc, #416]	; (fae0 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
    f93e:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
    f942:	6819      	ldr	r1, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
    f944:	f884 6160 	strb.w	r6, [r4, #352]	; 0x160
	if (conn == conn_upd_curr) {
    f948:	428c      	cmp	r4, r1
		conn_upd_curr = NULL;
    f94a:	bf04      	itt	eq
    f94c:	2100      	moveq	r1, #0
    f94e:	6019      	streq	r1, [r3, #0]
	conn_cleanup_finalize(conn);
    f950:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    f952:	2317      	movs	r3, #23
    f954:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
    f958:	b00a      	add	sp, #40	; 0x28
    f95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_cleanup_finalize(conn);
    f95e:	f7ff be99 	b.w	f694 <conn_cleanup_finalize>
		conn->appto_expire = conn->apto_expire = 0U;
    f962:	2300      	movs	r3, #0
    f964:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    f968:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
    f96c:	e71a      	b.n	f7a4 <ull_conn_done+0x2c>
		if (!conn->supervision_expire) {
    f96e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    f972:	2b00      	cmp	r3, #0
    f974:	d1af      	bne.n	f8d6 <ull_conn_done+0x15e>
			conn->supervision_expire = conn->supervision_reload;
    f976:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
    f97a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
    f97e:	e7a8      	b.n	f8d2 <ull_conn_done+0x15a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    f980:	2900      	cmp	r1, #0
    f982:	f47f af6e 	bne.w	f862 <ull_conn_done+0xea>
    f986:	2e00      	cmp	r6, #0
    f988:	f47f af6b 	bne.w	f862 <ull_conn_done+0xea>
    f98c:	e78d      	b.n	f8aa <ull_conn_done+0x132>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f98e:	1a5b      	subs	r3, r3, r1
    f990:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
    f994:	1bd2      	subs	r2, r2, r7
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f996:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
    f998:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f99c:	f47f af4c 	bne.w	f838 <ull_conn_done+0xc0>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
    f9a0:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    f9a4:	3b01      	subs	r3, #1
    f9a6:	2b01      	cmp	r3, #1
    f9a8:	f63f af46 	bhi.w	f838 <ull_conn_done+0xc0>
    f9ac:	e74b      	b.n	f846 <ull_conn_done+0xce>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
    f9ae:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
    f9b2:	07d9      	lsls	r1, r3, #31
    f9b4:	f57f aef6 	bpl.w	f7a4 <ull_conn_done+0x2c>
    f9b8:	e7a7      	b.n	f90a <ull_conn_done+0x192>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    f9ba:	b913      	cbnz	r3, f9c2 <ull_conn_done+0x24a>
    f9bc:	2d00      	cmp	r5, #0
    f9be:	f43f af74 	beq.w	f8aa <ull_conn_done+0x132>
	lazy = 0U;
    f9c2:	4631      	mov	r1, r6
    f9c4:	e74d      	b.n	f862 <ull_conn_done+0xea>
			rx = ll_pdu_rx_alloc();
    f9c6:	f7fa fcaf 	bl	a328 <ll_pdu_rx_alloc>
			if (rx) {
    f9ca:	4601      	mov	r1, r0
    f9cc:	2800      	cmp	r0, #0
    f9ce:	d03f      	beq.n	fa50 <ull_conn_done+0x2d8>
				rx->handle = lll->handle;
    f9d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
    f9d2:	2200      	movs	r2, #0
    f9d4:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
    f9d8:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
    f9da:	231a      	movs	r3, #26
    f9dc:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
    f9de:	6800      	ldr	r0, [r0, #0]
    f9e0:	f7fa fc74 	bl	a2cc <ll_rx_put>
				ll_rx_sched();
    f9e4:	f7fa fc7c 	bl	a2e0 <ll_rx_sched>
    f9e8:	e70d      	b.n	f806 <ull_conn_done+0x8e>
	if ((force) || (latency_event != lll->latency_event)) {
    f9ea:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    f9ec:	e72d      	b.n	f84a <ull_conn_done+0xd2>
			ull_drift_ticks_get(done, &ticks_drift_plus,
    f9ee:	aa08      	add	r2, sp, #32
    f9f0:	a909      	add	r1, sp, #36	; 0x24
    f9f2:	4628      	mov	r0, r5
    f9f4:	f7f1 f9ac 	bl	d50 <ull_drift_ticks_get>
			if (!conn->tx_head) {
    f9f8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    f9fc:	2b00      	cmp	r3, #0
    f9fe:	d051      	beq.n	faa4 <ull_conn_done+0x32c>
				lll->latency_event = 0;
    fa00:	2300      	movs	r3, #0
    fa02:	8623      	strh	r3, [r4, #48]	; 0x30
    fa04:	e6e2      	b.n	f7cc <ull_conn_done+0x54>
			if (conn->apto_expire == 0U) {
    fa06:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
    fa0a:	2800      	cmp	r0, #0
    fa0c:	f47f aeca 	bne.w	f7a4 <ull_conn_done+0x2c>
    fa10:	e78c      	b.n	f92c <ull_conn_done+0x1b4>
	if (conn == conn_upd_curr) {
    fa12:	4b33      	ldr	r3, [pc, #204]	; (fae0 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
    fa14:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
    fa16:	681a      	ldr	r2, [r3, #0]
    fa18:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    fa1a:	bf04      	itt	eq
    fa1c:	2200      	moveq	r2, #0
    fa1e:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    fa20:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
    fa22:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
    fa24:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    fa28:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
    fa2c:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
    fa30:	4620      	mov	r0, r4
    fa32:	f7ff fe2f 	bl	f694 <conn_cleanup_finalize>
}
    fa36:	b00a      	add	sp, #40	; 0x28
    fa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn == conn_upd_curr) {
    fa3c:	4b28      	ldr	r3, [pc, #160]	; (fae0 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
    fa3e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
    fa40:	681a      	ldr	r2, [r3, #0]
    fa42:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    fa44:	bf04      	itt	eq
    fa46:	2200      	moveq	r2, #0
    fa48:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    fa4a:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
    fa4c:	2322      	movs	r3, #34	; 0x22
    fa4e:	e7e9      	b.n	fa24 <ull_conn_done+0x2ac>
				conn->apto_expire = 1U;
    fa50:	2301      	movs	r3, #1
    fa52:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    fa56:	e6d6      	b.n	f806 <ull_conn_done+0x8e>
					force = conn->periph.force & 0x01;
    fa58:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
    fa5c:	085a      	lsrs	r2, r3, #1
					if (force) {
    fa5e:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
    fa62:	bf17      	itett	ne
    fa64:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
    fa68:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->periph.force |= BIT(31);
    fa6c:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->periph.force & 0x01;
    fa70:	461e      	movne	r6, r3
    fa72:	e6b6      	b.n	f7e2 <ull_conn_done+0x6a>
				conn->llcp_type = LLCP_PING;
    fa74:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
    fa76:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
    fa78:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
    fa7c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
    fa80:	e6da      	b.n	f838 <ull_conn_done+0xc0>
	if (conn == conn_upd_curr) {
    fa82:	4917      	ldr	r1, [pc, #92]	; (fae0 <ull_conn_done+0x368>)
	rx->hdr.handle = conn->lll.handle;
    fa84:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
    fa88:	6808      	ldr	r0, [r1, #0]
    fa8a:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
    fa8c:	bf08      	it	eq
    fa8e:	600b      	streq	r3, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    fa90:	2117      	movs	r1, #23
	*((uint8_t *)rx->pdu) = reason;
    fa92:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    fa94:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
    fa98:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
    fa9c:	4620      	mov	r0, r4
    fa9e:	f7ff fdf9 	bl	f694 <conn_cleanup_finalize>
}
    faa2:	e702      	b.n	f8aa <ull_conn_done+0x132>
				ull_conn_tx_demux(UINT8_MAX);
    faa4:	20ff      	movs	r0, #255	; 0xff
    faa6:	f7ff fda5 	bl	f5f4 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
    faaa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    faae:	2b00      	cmp	r3, #0
    fab0:	d1a6      	bne.n	fa00 <ull_conn_done+0x288>
    fab2:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
    fab6:	4632      	mov	r2, r6
    fab8:	f7f7 f8ec 	bl	6c94 <memq_peek>
    fabc:	2800      	cmp	r0, #0
    fabe:	d19f      	bne.n	fa00 <ull_conn_done+0x288>
			} else if (lll->periph.latency_enabled) {
    fac0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    fac4:	075a      	lsls	r2, r3, #29
				lll->latency_event = lll->latency;
    fac6:	bf44      	itt	mi
    fac8:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
    faca:	8623      	strhmi	r3, [r4, #48]	; 0x30
    facc:	e67e      	b.n	f7cc <ull_conn_done+0x54>
    face:	bf00      	nop
    fad0:	0000bb65 	.word	0x0000bb65
    fad4:	0001d244 	.word	0x0001d244
    fad8:	0001d3b8 	.word	0x0001d3b8
    fadc:	0001cde4 	.word	0x0001cde4
    fae0:	20001cb4 	.word	0x20001cb4

0000fae4 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
    fae4:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
    fae8:	2b00      	cmp	r3, #0
    faea:	f000 80be 	beq.w	fc6a <ull_conn_tx_lll_enqueue+0x186>
    faee:	3901      	subs	r1, #1
{
    faf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
    faf4:	f8df 8174 	ldr.w	r8, [pc, #372]	; fc6c <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
    faf8:	f8df a174 	ldr.w	sl, [pc, #372]	; fc70 <ull_conn_tx_lll_enqueue+0x18c>
    fafc:	f8df 9174 	ldr.w	r9, [pc, #372]	; fc74 <ull_conn_tx_lll_enqueue+0x190>
    fb00:	4604      	mov	r4, r0
    fb02:	b2cd      	uxtb	r5, r1
    fb04:	e010      	b.n	fb28 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
    fb06:	4640      	mov	r0, r8
    fb08:	f7f7 f856 	bl	6bb8 <mem_acquire>
		LL_ASSERT(link);
    fb0c:	4607      	mov	r7, r0
    fb0e:	b3b0      	cbz	r0, fb7e <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
    fb10:	f104 0268 	add.w	r2, r4, #104	; 0x68
    fb14:	4631      	mov	r1, r6
    fb16:	4638      	mov	r0, r7
    fb18:	f7f7 f8b2 	bl	6c80 <memq_enqueue>
	while (conn->tx_head &&
    fb1c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    fb20:	3d01      	subs	r5, #1
    fb22:	b2ed      	uxtb	r5, r5
    fb24:	2b00      	cmp	r3, #0
    fb26:	d05c      	beq.n	fbe2 <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
    fb28:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
    fb2c:	07d1      	lsls	r1, r2, #31
    fb2e:	d403      	bmi.n	fb38 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
    fb30:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
    fb34:	0792      	lsls	r2, r2, #30
    fb36:	d53a      	bpl.n	fbae <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
    fb38:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    fb3c:	4293      	cmp	r3, r2
    fb3e:	d150      	bne.n	fbe2 <ull_conn_tx_lll_enqueue+0xfe>
    fb40:	2dff      	cmp	r5, #255	; 0xff
    fb42:	d04e      	beq.n	fbe2 <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
    fb44:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
    fb48:	4620      	mov	r0, r4
    fb4a:	f7fc f82b 	bl	bba4 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    fb4e:	7903      	ldrb	r3, [r0, #4]
    fb50:	f003 0303 	and.w	r3, r3, #3
    fb54:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
    fb56:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    fb58:	d1d5      	bne.n	fb06 <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
    fb5a:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
    fb5c:	2b0b      	cmp	r3, #11
    fb5e:	d042      	beq.n	fbe6 <ull_conn_tx_lll_enqueue+0x102>
    fb60:	d81b      	bhi.n	fb9a <ull_conn_tx_lll_enqueue+0xb6>
    fb62:	2b04      	cmp	r3, #4
    fb64:	d1cf      	bne.n	fb06 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
    fb66:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
    fb6a:	f043 0302 	orr.w	r3, r3, #2
    fb6e:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
    fb72:	4640      	mov	r0, r8
    fb74:	f7f7 f820 	bl	6bb8 <mem_acquire>
		LL_ASSERT(link);
    fb78:	4607      	mov	r7, r0
    fb7a:	2800      	cmp	r0, #0
    fb7c:	d1c8      	bne.n	fb10 <ull_conn_tx_lll_enqueue+0x2c>
    fb7e:	483e      	ldr	r0, [pc, #248]	; (fc78 <ull_conn_tx_lll_enqueue+0x194>)
    fb80:	f240 7317 	movw	r3, #1815	; 0x717
    fb84:	4652      	mov	r2, sl
    fb86:	4649      	mov	r1, r9
    fb88:	f008 faee 	bl	18168 <printk>
    fb8c:	4040      	eors	r0, r0
    fb8e:	f380 8811 	msr	BASEPRI, r0
    fb92:	f04f 0003 	mov.w	r0, #3
    fb96:	df02      	svc	2
    fb98:	e7ba      	b.n	fb10 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
    fb9a:	3b16      	subs	r3, #22
    fb9c:	2b01      	cmp	r3, #1
    fb9e:	d8b2      	bhi.n	fb06 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
    fba0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
    fba4:	f043 0301 	orr.w	r3, r3, #1
    fba8:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
    fbac:	e7ab      	b.n	fb06 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    fbae:	791a      	ldrb	r2, [r3, #4]
    fbb0:	f002 0203 	and.w	r2, r2, #3
    fbb4:	2a03      	cmp	r2, #3
    fbb6:	d1c3      	bne.n	fb40 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
    fbb8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
    fbba:	2a03      	cmp	r2, #3
    fbbc:	d001      	beq.n	fbc2 <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
    fbbe:	2a0a      	cmp	r2, #10
    fbc0:	d1be      	bne.n	fb40 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
    fbc2:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
    fbc6:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
    fbca:	428a      	cmp	r2, r1
    fbcc:	d010      	beq.n	fbf0 <ull_conn_tx_lll_enqueue+0x10c>
    fbce:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
    fbd2:	2a03      	cmp	r2, #3
    fbd4:	d0b4      	beq.n	fb40 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
    fbd6:	681a      	ldr	r2, [r3, #0]
    fbd8:	b11a      	cbz	r2, fbe2 <ull_conn_tx_lll_enqueue+0xfe>
    fbda:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    fbde:	428a      	cmp	r2, r1
    fbe0:	d032      	beq.n	fc48 <ull_conn_tx_lll_enqueue+0x164>
}
    fbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
    fbe6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
    fbea:	2b00      	cmp	r3, #0
    fbec:	da8b      	bge.n	fb06 <ull_conn_tx_lll_enqueue+0x22>
    fbee:	e7ba      	b.n	fb66 <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
    fbf0:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    fbf4:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
    fbf8:	4288      	cmp	r0, r1
    fbfa:	d1ec      	bne.n	fbd6 <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
    fbfc:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
    fc00:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
    fc04:	4288      	cmp	r0, r1
    fc06:	d1e6      	bne.n	fbd6 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
    fc08:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
    fc0c:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
    fc10:	4288      	cmp	r0, r1
    fc12:	d1e0      	bne.n	fbd6 <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
    fc14:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
    fc18:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    fc1c:	4288      	cmp	r0, r1
    fc1e:	d1da      	bne.n	fbd6 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
    fc20:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
    fc24:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
    fc28:	4288      	cmp	r0, r1
    fc2a:	d1d4      	bne.n	fbd6 <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    fc2c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
    fc30:	3a02      	subs	r2, #2
    fc32:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
    fc36:	2201      	movs	r2, #1
    fc38:	f362 0301 	bfi	r3, r2, #0, #2
    fc3c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
    fc40:	2303      	movs	r3, #3
    fc42:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
    fc46:	e77b      	b.n	fb40 <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
    fc48:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
    fc4c:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
    fc50:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
    fc54:	6810      	ldr	r0, [r2, #0]
    fc56:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
    fc58:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
    fc5a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
    fc5e:	2900      	cmp	r1, #0
    fc60:	f47f af6e 	bne.w	fb40 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
    fc64:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
    fc68:	e76a      	b.n	fb40 <ull_conn_tx_lll_enqueue+0x5c>
    fc6a:	4770      	bx	lr
    fc6c:	20001dfc 	.word	0x20001dfc
    fc70:	0001d244 	.word	0x0001d244
    fc74:	0001d29c 	.word	0x0001d29c
    fc78:	0001cde4 	.word	0x0001cde4

0000fc7c <tx_demux>:
{
    fc7c:	b510      	push	{r4, lr}
    fc7e:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
    fc80:	2001      	movs	r0, #1
    fc82:	f7ff fcb7 	bl	f5f4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
    fc86:	4620      	mov	r0, r4
    fc88:	2101      	movs	r1, #1
}
    fc8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
    fc8e:	f7ff bf29 	b.w	fae4 <ull_conn_tx_lll_enqueue>
    fc92:	bf00      	nop

0000fc94 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
    fc94:	4901      	ldr	r1, [pc, #4]	; (fc9c <ull_conn_link_tx_release+0x8>)
    fc96:	f7f6 bfa9 	b.w	6bec <mem_release>
    fc9a:	bf00      	nop
    fc9c:	20001dfc 	.word	0x20001dfc

0000fca0 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
    fca0:	4b01      	ldr	r3, [pc, #4]	; (fca8 <ull_conn_ack_last_idx_get+0x8>)
}
    fca2:	78d8      	ldrb	r0, [r3, #3]
    fca4:	4770      	bx	lr
    fca6:	bf00      	nop
    fca8:	20000510 	.word	0x20000510

0000fcac <ull_conn_ack_peek>:
{
    fcac:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
    fcae:	4b0c      	ldr	r3, [pc, #48]	; (fce0 <ull_conn_ack_peek+0x34>)
    fcb0:	f893 c002 	ldrb.w	ip, [r3, #2]
    fcb4:	f893 e003 	ldrb.w	lr, [r3, #3]
    fcb8:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
    fcba:	45f4      	cmp	ip, lr
    fcbc:	d00d      	beq.n	fcda <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
    fcbe:	fb1c fc04 	smulbb	ip, ip, r4
    fcc2:	3304      	adds	r3, #4
    fcc4:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
    fcc8:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
    fccc:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
    fcd0:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
    fcd2:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
    fcd4:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    fcd6:	6818      	ldr	r0, [r3, #0]
}
    fcd8:	bd10      	pop	{r4, pc}
		return NULL;
    fcda:	2000      	movs	r0, #0
}
    fcdc:	bd10      	pop	{r4, pc}
    fcde:	bf00      	nop
    fce0:	20000510 	.word	0x20000510

0000fce4 <ull_conn_ack_by_last_peek>:
{
    fce4:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
    fce6:	4b0b      	ldr	r3, [pc, #44]	; (fd14 <ull_conn_ack_by_last_peek+0x30>)
    fce8:	f893 c002 	ldrb.w	ip, [r3, #2]
    fcec:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
    fcf0:	4584      	cmp	ip, r0
    fcf2:	d00d      	beq.n	fd10 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
    fcf4:	3304      	adds	r3, #4
    fcf6:	fb1c fc0e 	smulbb	ip, ip, lr
    fcfa:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
    fcfe:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
    fd02:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
    fd06:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
    fd08:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
    fd0a:	6818      	ldr	r0, [r3, #0]
}
    fd0c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    fd10:	2000      	movs	r0, #0
    fd12:	e7fb      	b.n	fd0c <ull_conn_ack_by_last_peek+0x28>
    fd14:	20000510 	.word	0x20000510

0000fd18 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
    fd18:	4b09      	ldr	r3, [pc, #36]	; (fd40 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    fd1a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    fd1c:	78da      	ldrb	r2, [r3, #3]
    fd1e:	7818      	ldrb	r0, [r3, #0]
    fd20:	f893 c001 	ldrb.w	ip, [r3, #1]
    fd24:	428a      	cmp	r2, r1
    fd26:	d009      	beq.n	fd3c <ull_conn_ack_dequeue+0x24>
	_first += 1U;
    fd28:	1c4a      	adds	r2, r1, #1
    fd2a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    fd2c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    fd30:	4594      	cmp	ip, r2
    fd32:	bf08      	it	eq
    fd34:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    fd36:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    fd38:	709a      	strb	r2, [r3, #2]
	return mem;
    fd3a:	4770      	bx	lr
		return NULL;
    fd3c:	2000      	movs	r0, #0
}
    fd3e:	4770      	bx	lr
    fd40:	20000510 	.word	0x20000510

0000fd44 <ull_conn_lll_ack_enqueue>:
{
    fd44:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    fd46:	4a15      	ldr	r2, [pc, #84]	; (fd9c <ull_conn_lll_ack_enqueue+0x58>)
    fd48:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
    fd4c:	7854      	ldrb	r4, [r2, #1]
    fd4e:	f892 e002 	ldrb.w	lr, [r2, #2]
    fd52:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
    fd54:	f10c 0301 	add.w	r3, ip, #1
    fd58:	b2db      	uxtb	r3, r3
		last = 0U;
    fd5a:	429c      	cmp	r4, r3
    fd5c:	bf08      	it	eq
    fd5e:	2300      	moveq	r3, #0
	if (last == first) {
    fd60:	459e      	cmp	lr, r3
    fd62:	d00a      	beq.n	fd7a <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    fd64:	fb1c fc05 	smulbb	ip, ip, r5
    fd68:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
    fd6c:	f82e 000c 	strh.w	r0, [lr, ip]
    fd70:	44f4      	add	ip, lr
	lll_tx->node = tx;
    fd72:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
    fd76:	70d3      	strb	r3, [r2, #3]
}
    fd78:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
    fd7a:	4a09      	ldr	r2, [pc, #36]	; (fda0 <ull_conn_lll_ack_enqueue+0x5c>)
    fd7c:	4909      	ldr	r1, [pc, #36]	; (fda4 <ull_conn_lll_ack_enqueue+0x60>)
    fd7e:	480a      	ldr	r0, [pc, #40]	; (fda8 <ull_conn_lll_ack_enqueue+0x64>)
    fd80:	f240 7367 	movw	r3, #1895	; 0x767
    fd84:	f008 f9f0 	bl	18168 <printk>
    fd88:	4040      	eors	r0, r0
    fd8a:	f380 8811 	msr	BASEPRI, r0
    fd8e:	f04f 0003 	mov.w	r0, #3
    fd92:	df02      	svc	2
	lll_tx->handle = handle;
    fd94:	2300      	movs	r3, #0
    fd96:	801b      	strh	r3, [r3, #0]
    fd98:	deff      	udf	#255	; 0xff
    fd9a:	bf00      	nop
    fd9c:	20000510 	.word	0x20000510
    fda0:	0001d244 	.word	0x0001d244
    fda4:	0001d28c 	.word	0x0001d28c
    fda8:	0001cde4 	.word	0x0001cde4

0000fdac <ull_conn_tx_ack>:
{
    fdac:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
    fdae:	7953      	ldrb	r3, [r2, #5]
{
    fdb0:	b082      	sub	sp, #8
    fdb2:	4614      	mov	r4, r2
    fdb4:	4605      	mov	r5, r0
    fdb6:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
    fdb8:	b37b      	cbz	r3, fe1a <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
    fdba:	7923      	ldrb	r3, [r4, #4]
    fdbc:	f003 0203 	and.w	r2, r3, #3
    fdc0:	2a03      	cmp	r2, #3
    fdc2:	d00d      	beq.n	fde0 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
    fdc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fdc8:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
    fdca:	bf04      	itt	eq
    fdcc:	f36f 0301 	bfceq	r3, #0, #2
    fdd0:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
    fdd2:	4621      	mov	r1, r4
    fdd4:	4628      	mov	r0, r5
}
    fdd6:	b002      	add	sp, #8
    fdd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
    fddc:	f7fa baba 	b.w	a354 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
    fde0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fde4:	429d      	cmp	r5, r3
    fde6:	d126      	bne.n	fe36 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
    fde8:	6833      	ldr	r3, [r6, #0]
    fdea:	429c      	cmp	r4, r3
    fdec:	d03e      	beq.n	fe6c <ull_conn_tx_ack+0xc0>
		LL_ASSERT(!link->next);
    fdee:	2b00      	cmp	r3, #0
    fdf0:	d0ef      	beq.n	fdd2 <ull_conn_tx_ack+0x26>
    fdf2:	4a85      	ldr	r2, [pc, #532]	; (10008 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9>)
    fdf4:	4985      	ldr	r1, [pc, #532]	; (1000c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd>)
    fdf6:	4886      	ldr	r0, [pc, #536]	; (10010 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11>)
    fdf8:	f240 7391 	movw	r3, #1937	; 0x791
    fdfc:	f008 f9b4 	bl	18168 <printk>
    fe00:	4040      	eors	r0, r0
    fe02:	f380 8811 	msr	BASEPRI, r0
    fe06:	f04f 0003 	mov.w	r0, #3
    fe0a:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
    fe0c:	4621      	mov	r1, r4
    fe0e:	4628      	mov	r0, r5
}
    fe10:	b002      	add	sp, #8
    fe12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
    fe16:	f7fa ba9d 	b.w	a354 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
    fe1a:	4a7b      	ldr	r2, [pc, #492]	; (10008 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9>)
    fe1c:	497d      	ldr	r1, [pc, #500]	; (10014 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x15>)
    fe1e:	487c      	ldr	r0, [pc, #496]	; (10010 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11>)
    fe20:	f240 7374 	movw	r3, #1908	; 0x774
    fe24:	f008 f9a0 	bl	18168 <printk>
    fe28:	4040      	eors	r0, r0
    fe2a:	f380 8811 	msr	BASEPRI, r0
    fe2e:	f04f 0003 	mov.w	r0, #3
    fe32:	df02      	svc	2
    fe34:	e7c1      	b.n	fdba <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fe36:	462a      	mov	r2, r5
    fe38:	4877      	ldr	r0, [pc, #476]	; (10018 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x19>)
    fe3a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    fe3e:	f7f6 feed 	bl	6c1c <mem_get>
	switch (pdu_tx->llctrl.opcode) {
    fe42:	79e2      	ldrb	r2, [r4, #7]
    fe44:	3a02      	subs	r2, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
    fe46:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
    fe48:	2a15      	cmp	r2, #21
    fe4a:	d80c      	bhi.n	fe66 <ull_conn_tx_ack+0xba>
    fe4c:	e8df f002 	tbb	[pc, r2]
    fe50:	261f0b4e 	.word	0x261f0b4e
    fe54:	180b185a 	.word	0x180b185a
    fe58:	2d0b1f0b 	.word	0x2d0b1f0b
    fe5c:	150b0b0b 	.word	0x150b0b0b
    fe60:	8e42180b 	.word	0x8e42180b
    fe64:	376c      	.short	0x376c
		if (link->next == (void *)tx) {
    fe66:	6833      	ldr	r3, [r6, #0]
    fe68:	42a3      	cmp	r3, r4
    fe6a:	d1c0      	bne.n	fdee <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
    fe6c:	496b      	ldr	r1, [pc, #428]	; (1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>)
    fe6e:	4620      	mov	r0, r4
}
    fe70:	b002      	add	sp, #8
    fe72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
    fe76:	f7f6 beb9 	b.w	6bec <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
    fe7a:	7a22      	ldrb	r2, [r4, #8]
    fe7c:	2a03      	cmp	r2, #3
    fe7e:	d014      	beq.n	feaa <ull_conn_tx_ack+0xfe>
			conn->common.txn_lock = 0U;
    fe80:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
    fe84:	f36f 0241 	bfc	r2, #1, #1
    fe88:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
    fe8c:	e7ac      	b.n	fde8 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
    fe8e:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
    fe92:	f042 0202 	orr.w	r2, r2, #2
    fe96:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
    fe9a:	e7a5      	b.n	fde8 <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
    fe9c:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    fea0:	f042 0203 	orr.w	r2, r2, #3
    fea4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    fea8:	e79e      	b.n	fde8 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
    feaa:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
    feae:	f022 0203 	bic.w	r2, r2, #3
    feb2:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
    feb6:	2200      	movs	r2, #0
    feb8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
    febc:	e794      	b.n	fde8 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
    febe:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
    fec2:	2a00      	cmp	r2, #0
    fec4:	db7f      	blt.n	ffc6 <ull_conn_tx_ack+0x21a>
		conn->llcp_phy.pause_tx = 0U;
    fec6:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
    feca:	f36f 0200 	bfc	r2, #0, #1
    fece:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
    fed2:	e789      	b.n	fde8 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
    fed4:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
    fed8:	f002 0107 	and.w	r1, r2, #7
    fedc:	2901      	cmp	r1, #1
    fede:	d183      	bne.n	fde8 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
    fee0:	2102      	movs	r1, #2
    fee2:	f361 0202 	bfi	r2, r1, #0, #3
    fee6:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
    feea:	e77d      	b.n	fde8 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
    feec:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
    feee:	2a13      	cmp	r2, #19
    fef0:	bf08      	it	eq
    fef2:	2216      	moveq	r2, #22
    fef4:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
    fef8:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
    fefc:	3a01      	subs	r2, #1
    fefe:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
    ff02:	e771      	b.n	fde8 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
    ff04:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
    ff08:	2a00      	cmp	r2, #0
    ff0a:	dac7      	bge.n	fe9c <ull_conn_tx_ack+0xf0>
			conn->llcp_enc.pause_rx = 0U;
    ff0c:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
    ff10:	f022 0203 	bic.w	r2, r2, #3
    ff14:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
    ff18:	2200      	movs	r2, #0
    ff1a:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
    ff1e:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
    ff22:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
    ff26:	e75f      	b.n	fde8 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    ff28:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
    ff2c:	2102      	movs	r1, #2
    ff2e:	f361 0201 	bfi	r2, r1, #0, #2
    ff32:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
    ff36:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
    ff3a:	2a00      	cmp	r2, #0
    ff3c:	dac3      	bge.n	fec6 <ull_conn_tx_ack+0x11a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
    ff3e:	4a38      	ldr	r2, [pc, #224]	; (10020 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x21>)
    ff40:	e892 0003 	ldmia.w	r2, {r0, r1}
    ff44:	aa02      	add	r2, sp, #8
    ff46:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
    ff4a:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
    ff4e:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    ff52:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
    ff56:	f002 0207 	and.w	r2, r2, #7
    ff5a:	a802      	add	r0, sp, #8
    ff5c:	4402      	add	r2, r0
    ff5e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
    ff62:	f362 1106 	bfi	r1, r2, #4, #3
    ff66:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
    ff6a:	e7ac      	b.n	fec6 <ull_conn_tx_ack+0x11a>
		conn->common.txn_lock = 0U;
    ff6c:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
    ff70:	f36f 0241 	bfc	r2, #1, #1
    ff74:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
    ff78:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
    ff7c:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
    ff80:	4282      	cmp	r2, r0
    ff82:	f43f af31 	beq.w	fde8 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
    ff86:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
    ff8a:	f001 0207 	and.w	r2, r1, #7
    ff8e:	2a03      	cmp	r2, #3
    ff90:	d005      	beq.n	ff9e <ull_conn_tx_ack+0x1f2>
    ff92:	3203      	adds	r2, #3
    ff94:	f002 0207 	and.w	r2, r2, #7
    ff98:	2a01      	cmp	r2, #1
    ff9a:	f63f af64 	bhi.w	fe66 <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
    ff9e:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
    ffa2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
    ffa6:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
    ffaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
    ffae:	f001 0207 	and.w	r2, r1, #7
    ffb2:	2a05      	cmp	r2, #5
    ffb4:	d022      	beq.n	fffc <ull_conn_tx_ack+0x250>
				if (!conn->llcp_length.cache.tx_octets) {
    ffb6:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
    ffba:	b98a      	cbnz	r2, ffe0 <ull_conn_tx_ack+0x234>
					conn->llcp_length.ack =
    ffbc:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
    ffc0:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
    ffc4:	e710      	b.n	fde8 <ull_conn_tx_ack+0x3c>
				conn->common.txn_lock = 0U;
    ffc6:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
    ffca:	4a15      	ldr	r2, [pc, #84]	; (10020 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x21>)
				conn->common.txn_lock = 0U;
    ffcc:	f36f 0141 	bfc	r1, #1, #1
    ffd0:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
    ffd4:	e892 0003 	ldmia.w	r2, {r0, r1}
    ffd8:	aa02      	add	r2, sp, #8
    ffda:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
    ffde:	e7b4      	b.n	ff4a <ull_conn_tx_ack+0x19e>
				conn->llcp_length.tx_octets =
    ffe0:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
    ffe4:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    ffe6:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
    ffea:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
    ffee:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    fff2:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
    fff6:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
    fffa:	e6f5      	b.n	fde8 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
    fffc:	2204      	movs	r2, #4
    fffe:	f362 0102 	bfi	r1, r2, #0, #3
   10002:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   10006:	e6ef      	b.n	fde8 <ull_conn_tx_ack+0x3c>
   10008:	0001d244 	.word	0x0001d244
   1000c:	0001d420 	.word	0x0001d420
   10010:	0001cde4 	.word	0x0001cde4
   10014:	0001d414 	.word	0x0001d414
   10018:	20000ec8 	.word	0x20000ec8
   1001c:	20001d48 	.word	0x20001d48
   10020:	0001d42c 	.word	0x0001d42c

00010024 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   10024:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   10028:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   1002c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   10030:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   10032:	bf14      	ite	ne
   10034:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   10036:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   10038:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   1003c:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1003e:	bf14      	ite	ne
   10040:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   10042:	3b0b      	subeq	r3, #11
   10044:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   10046:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   10048:	bf44      	itt	mi
   1004a:	3b04      	submi	r3, #4
   1004c:	b29b      	uxthmi	r3, r3
}
   1004e:	4298      	cmp	r0, r3
   10050:	bf28      	it	cs
   10052:	4618      	movcs	r0, r3
   10054:	4770      	bx	lr
   10056:	bf00      	nop

00010058 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   10058:	b510      	push	{r4, lr}
   1005a:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1005c:	b930      	cbnz	r0, 1006c <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   1005e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   10062:	f36f 0382 	bfc	r3, #2, #1
   10066:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1006a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1006c:	4a09      	ldr	r2, [pc, #36]	; (10094 <ticker_update_latency_cancel_op_cb+0x3c>)
   1006e:	490a      	ldr	r1, [pc, #40]	; (10098 <ticker_update_latency_cancel_op_cb+0x40>)
   10070:	480a      	ldr	r0, [pc, #40]	; (1009c <ticker_update_latency_cancel_op_cb+0x44>)
   10072:	f240 23af 	movw	r3, #687	; 0x2af
   10076:	f008 f877 	bl	18168 <printk>
   1007a:	4040      	eors	r0, r0
   1007c:	f380 8811 	msr	BASEPRI, r0
   10080:	f04f 0003 	mov.w	r0, #3
   10084:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   10086:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1008a:	f36f 0382 	bfc	r3, #2, #1
   1008e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   10092:	bd10      	pop	{r4, pc}
   10094:	0001d438 	.word	0x0001d438
   10098:	0001d480 	.word	0x0001d480
   1009c:	0001cde4 	.word	0x0001cde4

000100a0 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   100a0:	b900      	cbnz	r0, 100a4 <ticker_op_cb+0x4>
   100a2:	4770      	bx	lr
{
   100a4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   100a6:	4a07      	ldr	r2, [pc, #28]	; (100c4 <ticker_op_cb+0x24>)
   100a8:	4907      	ldr	r1, [pc, #28]	; (100c8 <ticker_op_cb+0x28>)
   100aa:	4808      	ldr	r0, [pc, #32]	; (100cc <ticker_op_cb+0x2c>)
   100ac:	f240 23a7 	movw	r3, #679	; 0x2a7
   100b0:	f008 f85a 	bl	18168 <printk>
   100b4:	4040      	eors	r0, r0
   100b6:	f380 8811 	msr	BASEPRI, r0
   100ba:	f04f 0003 	mov.w	r0, #3
   100be:	df02      	svc	2
}
   100c0:	bd08      	pop	{r3, pc}
   100c2:	bf00      	nop
   100c4:	0001d438 	.word	0x0001d438
   100c8:	0001d2a4 	.word	0x0001d2a4
   100cc:	0001cde4 	.word	0x0001cde4

000100d0 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   100d0:	2801      	cmp	r0, #1
   100d2:	d000      	beq.n	100d6 <ticker_op_stop_adv_cb+0x6>
   100d4:	4770      	bx	lr
{
   100d6:	b510      	push	{r4, lr}
   100d8:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   100da:	f7fa f9ad 	bl	a438 <ull_disable_mark_get>
   100de:	4284      	cmp	r4, r0
   100e0:	d00c      	beq.n	100fc <ticker_op_stop_adv_cb+0x2c>
   100e2:	4a07      	ldr	r2, [pc, #28]	; (10100 <ticker_op_stop_adv_cb+0x30>)
   100e4:	4907      	ldr	r1, [pc, #28]	; (10104 <ticker_op_stop_adv_cb+0x34>)
   100e6:	4808      	ldr	r0, [pc, #32]	; (10108 <ticker_op_stop_adv_cb+0x38>)
   100e8:	f240 239f 	movw	r3, #671	; 0x29f
   100ec:	f008 f83c 	bl	18168 <printk>
   100f0:	4040      	eors	r0, r0
   100f2:	f380 8811 	msr	BASEPRI, r0
   100f6:	f04f 0003 	mov.w	r0, #3
   100fa:	df02      	svc	2
}
   100fc:	bd10      	pop	{r4, pc}
   100fe:	bf00      	nop
   10100:	0001d438 	.word	0x0001d438
   10104:	0001d494 	.word	0x0001d494
   10108:	0001cde4 	.word	0x0001cde4

0001010c <ull_periph_ticker_cb>:
{
   1010c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10110:	9c07      	ldr	r4, [sp, #28]
   10112:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   10116:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   10118:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1011a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1011e:	4299      	cmp	r1, r3
   10120:	d026      	beq.n	10170 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   10122:	4606      	mov	r6, r0
   10124:	4617      	mov	r7, r2
   10126:	4601      	mov	r1, r0
   10128:	462a      	mov	r2, r5
   1012a:	4620      	mov	r0, r4
   1012c:	f7fd ffda 	bl	e0e4 <ull_conn_llcp>
		if (ret) {
   10130:	b9f0      	cbnz	r0, 10170 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   10132:	7823      	ldrb	r3, [r4, #0]
   10134:	3301      	adds	r3, #1
   10136:	b2db      	uxtb	r3, r3
   10138:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   1013a:	b34b      	cbz	r3, 10190 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   1013c:	491b      	ldr	r1, [pc, #108]	; (101ac <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   1013e:	4b1c      	ldr	r3, [pc, #112]	; (101b0 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   10140:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   10142:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   10146:	2200      	movs	r2, #0
	p.param = &conn->lll;
   10148:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   1014a:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   1014e:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   10152:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   10154:	2001      	movs	r0, #1
   10156:	4611      	mov	r1, r2
   10158:	f7f6 fe06 	bl	6d68 <mayfly_enqueue>
	LL_ASSERT(!err);
   1015c:	b950      	cbnz	r0, 10174 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   1015e:	20ff      	movs	r0, #255	; 0xff
   10160:	f7ff fa48 	bl	f5f4 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   10164:	4620      	mov	r0, r4
   10166:	21ff      	movs	r1, #255	; 0xff
}
   10168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1016c:	f7ff bcba 	b.w	fae4 <ull_conn_tx_lll_enqueue>
}
   10170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   10174:	4a0f      	ldr	r2, [pc, #60]	; (101b4 <ull_periph_ticker_cb+0xa8>)
   10176:	4910      	ldr	r1, [pc, #64]	; (101b8 <ull_periph_ticker_cb+0xac>)
   10178:	4810      	ldr	r0, [pc, #64]	; (101bc <ull_periph_ticker_cb+0xb0>)
   1017a:	f240 232a 	movw	r3, #554	; 0x22a
   1017e:	f007 fff3 	bl	18168 <printk>
   10182:	4040      	eors	r0, r0
   10184:	f380 8811 	msr	BASEPRI, r0
   10188:	f04f 0003 	mov.w	r0, #3
   1018c:	df02      	svc	2
   1018e:	e7e6      	b.n	1015e <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   10190:	4a08      	ldr	r2, [pc, #32]	; (101b4 <ull_periph_ticker_cb+0xa8>)
   10192:	490b      	ldr	r1, [pc, #44]	; (101c0 <ull_periph_ticker_cb+0xb4>)
   10194:	4809      	ldr	r0, [pc, #36]	; (101bc <ull_periph_ticker_cb+0xb0>)
   10196:	f240 231d 	movw	r3, #541	; 0x21d
   1019a:	f007 ffe5 	bl	18168 <printk>
   1019e:	4040      	eors	r0, r0
   101a0:	f380 8811 	msr	BASEPRI, r0
   101a4:	f04f 0003 	mov.w	r0, #3
   101a8:	df02      	svc	2
   101aa:	e7c7      	b.n	1013c <ull_periph_ticker_cb+0x30>
   101ac:	20001e40 	.word	0x20001e40
   101b0:	200005b8 	.word	0x200005b8
   101b4:	0001d438 	.word	0x0001d438
   101b8:	0001cf84 	.word	0x0001cf84
   101bc:	0001cde4 	.word	0x0001cde4
   101c0:	0001d200 	.word	0x0001d200

000101c4 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   101c4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   101c6:	b123      	cbz	r3, 101d2 <ull_periph_latency_cancel+0xe>
   101c8:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   101cc:	f012 0304 	ands.w	r3, r2, #4
   101d0:	d000      	beq.n	101d4 <ull_periph_latency_cancel+0x10>
   101d2:	4770      	bx	lr
{
   101d4:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   101d6:	f042 0204 	orr.w	r2, r2, #4
{
   101da:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   101dc:	4c11      	ldr	r4, [pc, #68]	; (10224 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   101de:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   101e2:	3103      	adds	r1, #3
   101e4:	2201      	movs	r2, #1
   101e6:	e9cd 3202 	strd	r3, r2, [sp, #8]
   101ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
   101ee:	e9cd 3300 	strd	r3, r3, [sp]
   101f2:	9006      	str	r0, [sp, #24]
   101f4:	b2ca      	uxtb	r2, r1
   101f6:	4618      	mov	r0, r3
   101f8:	2103      	movs	r1, #3
   101fa:	f7f7 ff5d 	bl	80b8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   101fe:	f030 0302 	bics.w	r3, r0, #2
   10202:	d00c      	beq.n	1021e <ull_periph_latency_cancel+0x5a>
   10204:	4a08      	ldr	r2, [pc, #32]	; (10228 <ull_periph_latency_cancel+0x64>)
   10206:	4909      	ldr	r1, [pc, #36]	; (1022c <ull_periph_latency_cancel+0x68>)
   10208:	4809      	ldr	r0, [pc, #36]	; (10230 <ull_periph_latency_cancel+0x6c>)
   1020a:	f240 13e3 	movw	r3, #483	; 0x1e3
   1020e:	f007 ffab 	bl	18168 <printk>
   10212:	4040      	eors	r0, r0
   10214:	f380 8811 	msr	BASEPRI, r0
   10218:	f04f 0003 	mov.w	r0, #3
   1021c:	df02      	svc	2
}
   1021e:	b008      	add	sp, #32
   10220:	bd10      	pop	{r4, pc}
   10222:	bf00      	nop
   10224:	00010059 	.word	0x00010059
   10228:	0001d438 	.word	0x0001d438
   1022c:	0001d324 	.word	0x0001d324
   10230:	0001cde4 	.word	0x0001cde4

00010234 <ll_start_enc_req_send>:
{
   10234:	b570      	push	{r4, r5, r6, lr}
   10236:	460e      	mov	r6, r1
   10238:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   1023a:	f7fc f84b 	bl	c2d4 <ll_connected_get>
	if (!conn) {
   1023e:	2800      	cmp	r0, #0
   10240:	d040      	beq.n	102c4 <ll_start_enc_req_send+0x90>
	if (error_code) {
   10242:	4604      	mov	r4, r0
   10244:	b95e      	cbnz	r6, 1025e <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   10246:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   1024a:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   1024e:	429a      	cmp	r2, r3
   10250:	d003      	beq.n	1025a <ll_start_enc_req_send+0x26>
   10252:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   10256:	2b03      	cmp	r3, #3
   10258:	d026      	beq.n	102a8 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   1025a:	200c      	movs	r0, #12
}
   1025c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1025e:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   10262:	f010 0004 	ands.w	r0, r0, #4
   10266:	d112      	bne.n	1028e <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   10268:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1026c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   10270:	429a      	cmp	r2, r3
   10272:	d0f2      	beq.n	1025a <ll_start_enc_req_send+0x26>
   10274:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   10278:	2b03      	cmp	r3, #3
   1027a:	d1ee      	bne.n	1025a <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1027c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   10280:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   10284:	f360 0301 	bfi	r3, r0, #0, #2
   10288:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   1028c:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1028e:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   10292:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   10296:	4293      	cmp	r3, r2
   10298:	d1df      	bne.n	1025a <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   1029a:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   1029c:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   102a0:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   102a4:	2000      	movs	r0, #0
}
   102a6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   102a8:	2210      	movs	r2, #16
   102aa:	4629      	mov	r1, r5
   102ac:	f200 1071 	addw	r0, r0, #369	; 0x171
   102b0:	f008 fda6 	bl	18e00 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   102b4:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   102b8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   102bc:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   102c0:	4630      	mov	r0, r6
}
   102c2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   102c4:	2002      	movs	r0, #2
}
   102c6:	bd70      	pop	{r4, r5, r6, pc}

000102c8 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   102c8:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   102ca:	fb02 1c01 	mla	ip, r2, r1, r1
   102ce:	7802      	ldrb	r2, [r0, #0]
   102d0:	491c      	ldr	r1, [pc, #112]	; (10344 <lll_chan_sel_1+0x7c>)
{
   102d2:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   102d6:	4494      	add	ip, r2
   102d8:	fb81 210c 	smull	r2, r1, r1, ip
   102dc:	4461      	add	r1, ip
   102de:	1149      	asrs	r1, r1, #5
   102e0:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   102e4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   102e8:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   102ea:	ebac 0101 	sub.w	r1, ip, r1
   102ee:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   102f0:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   102f2:	08c4      	lsrs	r4, r0, #3
   102f4:	f001 0107 	and.w	r1, r1, #7
   102f8:	f813 c004 	ldrb.w	ip, [r3, r4]
   102fc:	fa4c f101 	asr.w	r1, ip, r1
   10300:	f011 0101 	ands.w	r1, r1, #1
   10304:	d11d      	bne.n	10342 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   10306:	fbb0 f2f5 	udiv	r2, r0, r5
   1030a:	fb05 0212 	mls	r2, r5, r2, r0
   1030e:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   10310:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   10314:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   10316:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   10318:	f100 0c08 	add.w	ip, r0, #8
   1031c:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   10320:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   10324:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   10328:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1032c:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   10330:	d002      	beq.n	10338 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   10332:	b132      	cbz	r2, 10342 <lll_chan_sel_1+0x7a>
				chan_index--;
   10334:	3a01      	subs	r2, #1
   10336:	b2d2      	uxtb	r2, r2
			chan_next++;
   10338:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   1033a:	4584      	cmp	ip, r0
   1033c:	d1f2      	bne.n	10324 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1033e:	45a6      	cmp	lr, r4
   10340:	d1ea      	bne.n	10318 <lll_chan_sel_1+0x50>
}
   10342:	bd30      	pop	{r4, r5, pc}
   10344:	dd67c8a7 	.word	0xdd67c8a7

00010348 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   10348:	8842      	ldrh	r2, [r0, #2]
   1034a:	8800      	ldrh	r0, [r0, #0]
}
   1034c:	4050      	eors	r0, r2
   1034e:	4770      	bx	lr

00010350 <lll_chan_sel_2>:
{
   10350:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   10352:	4d2f      	ldr	r5, [pc, #188]	; (10410 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10354:	4c2f      	ldr	r4, [pc, #188]	; (10414 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   10356:	4048      	eors	r0, r1
   10358:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1035c:	0a07      	lsrs	r7, r0, #8
   1035e:	b2c0      	uxtb	r0, r0
   10360:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   10364:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   10368:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   1036c:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   10370:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   10374:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   10378:	433e      	orrs	r6, r7
   1037a:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1037e:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   10382:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   10386:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1038a:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1038e:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   10390:	f3c0 4007 	ubfx	r0, r0, #16, #8
   10394:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   10398:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1039c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   103a0:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   103a2:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   103a6:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   103a8:	d1d8      	bne.n	1035c <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   103aa:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   103ac:	481a      	ldr	r0, [pc, #104]	; (10418 <lll_chan_sel_2+0xc8>)
   103ae:	fba0 4001 	umull	r4, r0, r0, r1
   103b2:	1a0c      	subs	r4, r1, r0
   103b4:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   103b8:	0940      	lsrs	r0, r0, #5
   103ba:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   103be:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   103c2:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   103c4:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   103c8:	f000 0507 	and.w	r5, r0, #7
   103cc:	5d14      	ldrb	r4, [r2, r4]
   103ce:	412c      	asrs	r4, r5
   103d0:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   103d2:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   103d4:	d41a      	bmi.n	1040c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   103d6:	fb01 f303 	mul.w	r3, r1, r3
   103da:	1e56      	subs	r6, r2, #1
   103dc:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   103e0:	3204      	adds	r2, #4
	chan_next = 0U;
   103e2:	4660      	mov	r0, ip
		bite = *chan_map;
   103e4:	f100 0508 	add.w	r5, r0, #8
   103e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   103ec:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   103ee:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   103f2:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   103f6:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   103fa:	d002      	beq.n	10402 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   103fc:	b133      	cbz	r3, 1040c <lll_chan_sel_2+0xbc>
				chan_index--;
   103fe:	3b01      	subs	r3, #1
   10400:	b2db      	uxtb	r3, r3
			chan_next++;
   10402:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   10404:	42a8      	cmp	r0, r5
   10406:	d1f2      	bne.n	103ee <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   10408:	42b2      	cmp	r2, r6
   1040a:	d1eb      	bne.n	103e4 <lll_chan_sel_2+0x94>
}
   1040c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1040e:	bf00      	nop
   10410:	00022110 	.word	0x00022110
   10414:	00088440 	.word	0x00088440
   10418:	bacf914d 	.word	0xbacf914d

0001041c <rl_update>:
		}
	}
}

static void rl_update(void)
{
   1041c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10420:	4d18      	ldr	r5, [pc, #96]	; (10484 <rl_update+0x68>)
   10422:	4e19      	ldr	r6, [pc, #100]	; (10488 <rl_update+0x6c>)
   10424:	2400      	movs	r4, #0
   10426:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1042a:	1eaf      	subs	r7, r5, #2
   1042c:	f04f 0801 	mov.w	r8, #1
   10430:	e006      	b.n	10440 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10432:	3401      	adds	r4, #1
   10434:	2c08      	cmp	r4, #8
   10436:	f105 0506 	add.w	r5, r5, #6
   1043a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1043e:	d01e      	beq.n	1047e <rl_update+0x62>
		if (rl[i].taken) {
   10440:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   10444:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   10448:	07da      	lsls	r2, r3, #31
   1044a:	d5f2      	bpl.n	10432 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   1044c:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1044e:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   10450:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   10454:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   10458:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   1045a:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1045e:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10460:	4631      	mov	r1, r6
   10462:	4628      	mov	r0, r5
   10464:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10466:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   10468:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1046c:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1046e:	f008 fcc7 	bl	18e00 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10472:	2c08      	cmp	r4, #8
   10474:	f105 0506 	add.w	r5, r5, #6
   10478:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1047c:	d1e0      	bne.n	10440 <rl_update+0x24>
}
   1047e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10482:	bf00      	nop
   10484:	200020be 	.word	0x200020be
   10488:	20001f7d 	.word	0x20001f7d

0001048c <fal_update>:
{
   1048c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10490:	4e20      	ldr	r6, [pc, #128]	; (10514 <fal_update+0x88>)
   10492:	4d21      	ldr	r5, [pc, #132]	; (10518 <fal_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   10494:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1051c <fal_update+0x90>
   10498:	f8df 9084 	ldr.w	r9, [pc, #132]	; 10520 <fal_update+0x94>
{
   1049c:	2400      	movs	r4, #0
   1049e:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   104a2:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   104a4:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   104a8:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   104ac:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   104b0:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   104b2:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   104b6:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   104b8:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   104bc:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   104c0:	d021      	beq.n	10506 <fal_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   104c2:	f898 3000 	ldrb.w	r3, [r8]
   104c6:	b163      	cbz	r3, 104e2 <fal_update+0x56>
		j = fal[i].rl_idx;
   104c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   104cc:	2b07      	cmp	r3, #7
   104ce:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   104d2:	d806      	bhi.n	104e2 <fal_update+0x56>
   104d4:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   104d8:	f013 0f04 	tst.w	r3, #4
   104dc:	d001      	beq.n	104e2 <fal_update+0x56>
   104de:	06db      	lsls	r3, r3, #27
   104e0:	d511      	bpl.n	10506 <fal_update+0x7a>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   104e2:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   104e6:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   104ea:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   104ee:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   104f2:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   104f6:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   104fa:	40a3      	lsls	r3, r4
   104fc:	ea4e 0303 	orr.w	r3, lr, r3
   10500:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   10502:	f008 fc7d 	bl	18e00 <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   10506:	3401      	adds	r4, #1
   10508:	2c08      	cmp	r4, #8
   1050a:	f105 0508 	add.w	r5, r5, #8
   1050e:	d1c9      	bne.n	104a4 <fal_update+0x18>
}
   10510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10514:	20001e92 	.word	0x20001e92
   10518:	20001e52 	.word	0x20001e52
   1051c:	200027b7 	.word	0x200027b7
   10520:	20001f7c 	.word	0x20001f7c

00010524 <ll_fal_size_get>:
}
   10524:	2008      	movs	r0, #8
   10526:	4770      	bx	lr

00010528 <ll_fal_clear>:
{
   10528:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1052a:	2000      	movs	r0, #0
   1052c:	f7fa ffb8 	bl	b4a0 <ull_adv_filter_pol_get>
   10530:	b9c8      	cbnz	r0, 10566 <ll_fal_clear+0x3e>
   10532:	4a0e      	ldr	r2, [pc, #56]	; (1056c <ll_fal_clear+0x44>)
			rl[j].fal = 0U;
   10534:	4c0e      	ldr	r4, [pc, #56]	; (10570 <ll_fal_clear+0x48>)
		uint8_t j = fal[i].rl_idx;
   10536:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1053a:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1053c:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   1053e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   10542:	d805      	bhi.n	10550 <ll_fal_clear+0x28>
			rl[j].fal = 0U;
   10544:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   10548:	f36f 1345 	bfc	r3, #5, #1
   1054c:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   10550:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   10554:	f36f 0300 	bfc	r3, #0, #1
   10558:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1055c:	3001      	adds	r0, #1
   1055e:	2808      	cmp	r0, #8
   10560:	d1e9      	bne.n	10536 <ll_fal_clear+0xe>
	return 0;
   10562:	2000      	movs	r0, #0
}
   10564:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10566:	200c      	movs	r0, #12
}
   10568:	bd10      	pop	{r4, pc}
   1056a:	bf00      	nop
   1056c:	20001e50 	.word	0x20001e50
   10570:	20001f7c 	.word	0x20001f7c

00010574 <ll_fal_add>:
{
   10574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10578:	4681      	mov	r9, r0
   1057a:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   1057c:	2000      	movs	r0, #0
   1057e:	f7fa ff8f 	bl	b4a0 <ull_adv_filter_pol_get>
   10582:	2800      	cmp	r0, #0
   10584:	d16d      	bne.n	10662 <ll_fal_add+0xee>
	if (addr->type == ADDR_TYPE_ANON) {
   10586:	f899 a000 	ldrb.w	sl, [r9]
   1058a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1058e:	4605      	mov	r5, r0
   10590:	d064      	beq.n	1065c <ll_fal_add+0xe8>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   10592:	4e42      	ldr	r6, [pc, #264]	; (1069c <ll_fal_add+0x128>)
   10594:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   10598:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   1059c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   105a0:	4604      	mov	r4, r0
   105a2:	1eb7      	subs	r7, r6, #2
   105a4:	e009      	b.n	105ba <ll_fal_add+0x46>
		} else if (free_idx && !fal[i].taken &&
   105a6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   105aa:	d101      	bne.n	105b0 <ll_fal_add+0x3c>
			*free_idx = i;
   105ac:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < FAL_SIZE; i++) {
   105b0:	3401      	adds	r4, #1
   105b2:	2c08      	cmp	r4, #8
   105b4:	f106 0608 	add.w	r6, r6, #8
   105b8:	d017      	beq.n	105ea <ll_fal_add+0x76>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   105ba:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   105be:	07d8      	lsls	r0, r3, #31
   105c0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   105c4:	d5ef      	bpl.n	105a6 <ll_fal_add+0x32>
   105c6:	4552      	cmp	r2, sl
   105c8:	d1f2      	bne.n	105b0 <ll_fal_add+0x3c>
   105ca:	2206      	movs	r2, #6
   105cc:	4630      	mov	r0, r6
   105ce:	4659      	mov	r1, fp
   105d0:	f008 fc05 	bl	18dde <memcmp>
   105d4:	2800      	cmp	r0, #0
   105d6:	d041      	beq.n	1065c <ll_fal_add+0xe8>
		} else if (free_idx && !fal[i].taken &&
   105d8:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   105dc:	07d9      	lsls	r1, r3, #31
   105de:	d5e2      	bpl.n	105a6 <ll_fal_add+0x32>
	for (i = 0; i < FAL_SIZE; i++) {
   105e0:	3401      	adds	r4, #1
   105e2:	2c08      	cmp	r4, #8
   105e4:	f106 0608 	add.w	r6, r6, #8
   105e8:	d1e7      	bne.n	105ba <ll_fal_add+0x46>
	} else if (j >= ARRAY_SIZE(fal)) {
   105ea:	f1b8 0f07 	cmp.w	r8, #7
   105ee:	d850      	bhi.n	10692 <ll_fal_add+0x11e>
	fal[i].id_addr_type = id_addr->type & 0x1;
   105f0:	f899 2000 	ldrb.w	r2, [r9]
   105f4:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   105f8:	4e29      	ldr	r6, [pc, #164]	; (106a0 <ll_fal_add+0x12c>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   105fa:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   105fc:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   10600:	fb14 0008 	smlabb	r0, r4, r8, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   10604:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   10608:	4438      	add	r0, r7
   1060a:	2206      	movs	r2, #6
   1060c:	4659      	mov	r1, fp
   1060e:	f008 fbf7 	bl	18e00 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10612:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10616:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1061a:	f003 0301 	and.w	r3, r3, #1
   1061e:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   10622:	fa5f fa85 	uxtb.w	sl, r5
   10626:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   1062a:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1062e:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10630:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10634:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   10638:	d501      	bpl.n	1063e <ll_fal_add+0xca>
   1063a:	4299      	cmp	r1, r3
   1063c:	d015      	beq.n	1066a <ll_fal_add+0xf6>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1063e:	2d08      	cmp	r5, #8
   10640:	f106 0628 	add.w	r6, r6, #40	; 0x28
   10644:	d1eb      	bne.n	1061e <ll_fal_add+0xaa>
		fal[i].rl_idx = FILTER_IDX_NONE;
   10646:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1064a:	22ff      	movs	r2, #255	; 0xff
   1064c:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   1064e:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   10652:	f043 0301 	orr.w	r3, r3, #1
   10656:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   1065a:	2000      	movs	r0, #0
}
   1065c:	b003      	add	sp, #12
   1065e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10662:	200c      	movs	r0, #12
}
   10664:	b003      	add	sp, #12
   10666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1066a:	4630      	mov	r0, r6
   1066c:	2206      	movs	r2, #6
   1066e:	4659      	mov	r1, fp
   10670:	9301      	str	r3, [sp, #4]
   10672:	f008 fbb4 	bl	18dde <memcmp>
   10676:	9b01      	ldr	r3, [sp, #4]
   10678:	2800      	cmp	r0, #0
   1067a:	d1e0      	bne.n	1063e <ll_fal_add+0xca>
		rl[j].fal = 1U;
   1067c:	f819 3004 	ldrb.w	r3, [r9, r4]
   10680:	f043 0320 	orr.w	r3, r3, #32
   10684:	f809 3004 	strb.w	r3, [r9, r4]
		fal[i].rl_idx = j;
   10688:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1068c:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   10690:	e7dd      	b.n	1064e <ll_fal_add+0xda>
   10692:	2007      	movs	r0, #7
}
   10694:	b003      	add	sp, #12
   10696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1069a:	bf00      	nop
   1069c:	20001e52 	.word	0x20001e52
   106a0:	20001f7d 	.word	0x20001f7d

000106a4 <ll_fal_remove>:
{
   106a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106a8:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   106aa:	2000      	movs	r0, #0
   106ac:	f7fa fef8 	bl	b4a0 <ull_adv_filter_pol_get>
   106b0:	bbb8      	cbnz	r0, 10722 <ll_fal_remove+0x7e>
	if (addr->type == ADDR_TYPE_ANON) {
   106b2:	783e      	ldrb	r6, [r7, #0]
   106b4:	2eff      	cmp	r6, #255	; 0xff
   106b6:	4604      	mov	r4, r0
   106b8:	d013      	beq.n	106e2 <ll_fal_remove+0x3e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   106ba:	4d1b      	ldr	r5, [pc, #108]	; (10728 <ll_fal_remove+0x84>)
   106bc:	3701      	adds	r7, #1
	for (i = 0; i < FAL_SIZE; i++) {
   106be:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   106c2:	f006 0601 	and.w	r6, r6, #1
   106c6:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   106ca:	f3c3 0240 	ubfx	r2, r3, #1, #1
   106ce:	07db      	lsls	r3, r3, #31
   106d0:	d501      	bpl.n	106d6 <ll_fal_remove+0x32>
   106d2:	42b2      	cmp	r2, r6
   106d4:	d007      	beq.n	106e6 <ll_fal_remove+0x42>
	for (i = 0; i < FAL_SIZE; i++) {
   106d6:	3401      	adds	r4, #1
   106d8:	2c08      	cmp	r4, #8
   106da:	f105 0508 	add.w	r5, r5, #8
   106de:	d1f2      	bne.n	106c6 <ll_fal_remove+0x22>
   106e0:	2002      	movs	r0, #2
}
   106e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   106e6:	2206      	movs	r2, #6
   106e8:	4628      	mov	r0, r5
   106ea:	4639      	mov	r1, r7
   106ec:	f008 fb77 	bl	18dde <memcmp>
   106f0:	2800      	cmp	r0, #0
   106f2:	d1f0      	bne.n	106d6 <ll_fal_remove+0x32>
		uint8_t j = fal[i].rl_idx;
   106f4:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   106f8:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   106fa:	2b07      	cmp	r3, #7
   106fc:	d808      	bhi.n	10710 <ll_fal_remove+0x6c>
			rl[j].fal = 0U;
   106fe:	4a0b      	ldr	r2, [pc, #44]	; (1072c <ll_fal_remove+0x88>)
   10700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10704:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   10708:	f360 1145 	bfi	r1, r0, #5, #1
   1070c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   10710:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   10714:	f36f 0300 	bfc	r3, #0, #1
   10718:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   1071c:	2000      	movs	r0, #0
}
   1071e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10722:	200c      	movs	r0, #12
}
   10724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10728:	20001e52 	.word	0x20001e52
   1072c:	20001f7c 	.word	0x20001f7c

00010730 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   10730:	2807      	cmp	r0, #7
{
   10732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10736:	4604      	mov	r4, r0
   10738:	460e      	mov	r6, r1
   1073a:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1073c:	d817      	bhi.n	1076e <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   1073e:	4d1a      	ldr	r5, [pc, #104]	; (107a8 <ll_rl_id_addr_get+0x78>)
   10740:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   10744:	00a7      	lsls	r7, r4, #2
   10746:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1074a:	07db      	lsls	r3, r3, #31
   1074c:	d51d      	bpl.n	1078a <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1074e:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   10750:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   10752:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   10756:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1075a:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   1075e:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   10760:	4640      	mov	r0, r8
   10762:	2206      	movs	r2, #6
}
   10764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   10768:	3101      	adds	r1, #1
   1076a:	f008 bb49 	b.w	18e00 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1076e:	4a0f      	ldr	r2, [pc, #60]	; (107ac <ll_rl_id_addr_get+0x7c>)
   10770:	490f      	ldr	r1, [pc, #60]	; (107b0 <ll_rl_id_addr_get+0x80>)
   10772:	4810      	ldr	r0, [pc, #64]	; (107b4 <ll_rl_id_addr_get+0x84>)
   10774:	f44f 7389 	mov.w	r3, #274	; 0x112
   10778:	f007 fcf6 	bl	18168 <printk>
   1077c:	4040      	eors	r0, r0
   1077e:	f380 8811 	msr	BASEPRI, r0
   10782:	f04f 0003 	mov.w	r0, #3
   10786:	df02      	svc	2
   10788:	e7d9      	b.n	1073e <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1078a:	4a08      	ldr	r2, [pc, #32]	; (107ac <ll_rl_id_addr_get+0x7c>)
   1078c:	490a      	ldr	r1, [pc, #40]	; (107b8 <ll_rl_id_addr_get+0x88>)
   1078e:	4809      	ldr	r0, [pc, #36]	; (107b4 <ll_rl_id_addr_get+0x84>)
   10790:	f240 1313 	movw	r3, #275	; 0x113
   10794:	f007 fce8 	bl	18168 <printk>
   10798:	4040      	eors	r0, r0
   1079a:	f380 8811 	msr	BASEPRI, r0
   1079e:	f04f 0003 	mov.w	r0, #3
   107a2:	df02      	svc	2
   107a4:	e7d3      	b.n	1074e <ll_rl_id_addr_get+0x1e>
   107a6:	bf00      	nop
   107a8:	20001f7c 	.word	0x20001f7c
   107ac:	0001d4c4 	.word	0x0001d4c4
   107b0:	0001d508 	.word	0x0001d508
   107b4:	0001cde4 	.word	0x0001cde4
   107b8:	0001d514 	.word	0x0001d514

000107bc <ll_rl_size_get>:
   107bc:	2008      	movs	r0, #8
   107be:	4770      	bx	lr

000107c0 <ll_rl_clear>:
{
   107c0:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   107c2:	2000      	movs	r0, #0
   107c4:	f7fa fe60 	bl	b488 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   107c8:	bb88      	cbnz	r0, 1082e <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   107ca:	4b1a      	ldr	r3, [pc, #104]	; (10834 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   107cc:	4c1a      	ldr	r4, [pc, #104]	; (10838 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   107ce:	7819      	ldrb	r1, [r3, #0]
   107d0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   107d4:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   107d6:	f360 0100 	bfi	r1, r0, #0, #1
   107da:	f360 0200 	bfi	r2, r0, #0, #1
   107de:	7019      	strb	r1, [r3, #0]
   107e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   107e4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   107e8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   107ec:	f360 0100 	bfi	r1, r0, #0, #1
   107f0:	f360 0200 	bfi	r2, r0, #0, #1
   107f4:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   107f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   107fc:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   10800:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   10804:	f360 0100 	bfi	r1, r0, #0, #1
   10808:	f360 0200 	bfi	r2, r0, #0, #1
   1080c:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   10810:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   10814:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   10818:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1081c:	f360 0100 	bfi	r1, r0, #0, #1
   10820:	f360 0200 	bfi	r2, r0, #0, #1
   10824:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   10828:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   1082c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1082e:	200c      	movs	r0, #12
}
   10830:	bd10      	pop	{r4, pc}
   10832:	bf00      	nop
   10834:	20001f7c 	.word	0x20001f7c
   10838:	200027b6 	.word	0x200027b6

0001083c <ll_rl_remove>:
{
   1083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10840:	4681      	mov	r9, r0
   10842:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   10844:	2000      	movs	r0, #0
   10846:	f7fa fe1f 	bl	b488 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1084a:	2800      	cmp	r0, #0
   1084c:	d149      	bne.n	108e2 <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1084e:	46ca      	mov	sl, r9
   10850:	4e4e      	ldr	r6, [pc, #312]	; (1098c <ll_rl_remove+0x150>)
   10852:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10856:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10858:	f008 0801 	and.w	r8, r8, #1
   1085c:	1e75      	subs	r5, r6, #1
   1085e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   10862:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   10866:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1086a:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1086e:	07d2      	lsls	r2, r2, #31
   10870:	ea4f 0784 	mov.w	r7, r4, lsl #2
   10874:	d501      	bpl.n	1087a <ll_rl_remove+0x3e>
   10876:	4543      	cmp	r3, r8
   10878:	d008      	beq.n	1088c <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1087a:	3401      	adds	r4, #1
   1087c:	2c08      	cmp	r4, #8
   1087e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   10882:	d1ec      	bne.n	1085e <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10884:	2002      	movs	r0, #2
}
   10886:	b003      	add	sp, #12
   10888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1088c:	4630      	mov	r0, r6
   1088e:	2206      	movs	r2, #6
   10890:	4651      	mov	r1, sl
   10892:	f008 faa4 	bl	18dde <memcmp>
   10896:	4603      	mov	r3, r0
   10898:	2800      	cmp	r0, #0
   1089a:	d1ee      	bne.n	1087a <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   1089c:	f89b 2000 	ldrb.w	r2, [fp]
   108a0:	0752      	lsls	r2, r2, #29
   108a2:	d430      	bmi.n	10906 <ll_rl_remove+0xca>
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   108a4:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < FAL_SIZE; i++) {
   108a8:	4e39      	ldr	r6, [pc, #228]	; (10990 <ll_rl_remove+0x154>)
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   108aa:	f009 0901 	and.w	r9, r9, #1
   108ae:	f1a6 0802 	sub.w	r8, r6, #2
   108b2:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   108b6:	07d0      	lsls	r0, r2, #31
   108b8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   108bc:	d501      	bpl.n	108c2 <ll_rl_remove+0x86>
   108be:	4549      	cmp	r1, r9
   108c0:	d013      	beq.n	108ea <ll_rl_remove+0xae>
	for (i = 0; i < FAL_SIZE; i++) {
   108c2:	3301      	adds	r3, #1
   108c4:	2b08      	cmp	r3, #8
   108c6:	f106 0608 	add.w	r6, r6, #8
   108ca:	d1f2      	bne.n	108b2 <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   108cc:	443c      	add	r4, r7
		return 0;
   108ce:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   108d0:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   108d4:	f36f 0300 	bfc	r3, #0, #1
   108d8:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   108dc:	b003      	add	sp, #12
   108de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   108e2:	200c      	movs	r0, #12
}
   108e4:	b003      	add	sp, #12
   108e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   108ea:	2206      	movs	r2, #6
   108ec:	4630      	mov	r0, r6
   108ee:	4651      	mov	r1, sl
   108f0:	9301      	str	r3, [sp, #4]
   108f2:	f008 fa74 	bl	18dde <memcmp>
   108f6:	9b01      	ldr	r3, [sp, #4]
   108f8:	2800      	cmp	r0, #0
   108fa:	d1e2      	bne.n	108c2 <ll_rl_remove+0x86>
			fal[j].rl_idx = FILTER_IDX_NONE;
   108fc:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   10900:	22ff      	movs	r2, #255	; 0xff
   10902:	705a      	strb	r2, [r3, #1]
   10904:	e7e2      	b.n	108cc <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   10906:	f8df 808c 	ldr.w	r8, [pc, #140]	; 10994 <ll_rl_remove+0x158>
   1090a:	f898 6000 	ldrb.w	r6, [r8]
   1090e:	3e01      	subs	r6, #1
			if (pj && pi != pj) {
   10910:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   10914:	d003      	beq.n	1091e <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   10916:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   1091a:	45b3      	cmp	fp, r6
   1091c:	d102      	bne.n	10924 <ll_rl_remove+0xe8>
			peer_irk_count--;
   1091e:	f888 6000 	strb.w	r6, [r8]
   10922:	e7bf      	b.n	108a4 <ll_rl_remove+0x68>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   10924:	481c      	ldr	r0, [pc, #112]	; (10998 <ll_rl_remove+0x15c>)
   10926:	9301      	str	r3, [sp, #4]
   10928:	2210      	movs	r2, #16
   1092a:	eb00 1106 	add.w	r1, r0, r6, lsl #4
   1092e:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   10932:	f008 fa65 	bl	18e00 <memcpy>
   10936:	9b01      	ldr	r3, [sp, #4]
   10938:	f8df c060 	ldr.w	ip, [pc, #96]	; 1099c <ll_rl_remove+0x160>
   1093c:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   1093e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   10942:	fa5f fe82 	uxtb.w	lr, r2
   10946:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   1094a:	f010 0f01 	tst.w	r0, #1
   1094e:	f102 0201 	add.w	r2, r2, #1
   10952:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   10956:	d005      	beq.n	10964 <ll_rl_remove+0x128>
   10958:	0740      	lsls	r0, r0, #29
   1095a:	d503      	bpl.n	10964 <ll_rl_remove+0x128>
   1095c:	f89c 0017 	ldrb.w	r0, [ip, #23]
   10960:	42b0      	cmp	r0, r6
   10962:	d008      	beq.n	10976 <ll_rl_remove+0x13a>
				for (k = 0U;
   10964:	2a08      	cmp	r2, #8
   10966:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1096a:	d1e8      	bne.n	1093e <ll_rl_remove+0x102>
			peer_irk_count--;
   1096c:	f898 6000 	ldrb.w	r6, [r8]
   10970:	3e01      	subs	r6, #1
   10972:	b2f6      	uxtb	r6, r6
   10974:	e7d3      	b.n	1091e <ll_rl_remove+0xe2>
   10976:	f898 6000 	ldrb.w	r6, [r8]
						peer_irk_rl_ids[pi] = k;
   1097a:	4a09      	ldr	r2, [pc, #36]	; (109a0 <ll_rl_remove+0x164>)
						rl[k].pirk_idx = pi;
   1097c:	f881 b017 	strb.w	fp, [r1, #23]
			peer_irk_count--;
   10980:	3e01      	subs	r6, #1
						peer_irk_rl_ids[pi] = k;
   10982:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   10986:	b2f6      	uxtb	r6, r6
						break;
   10988:	e7c9      	b.n	1091e <ll_rl_remove+0xe2>
   1098a:	bf00      	nop
   1098c:	20001f7d 	.word	0x20001f7d
   10990:	20001e52 	.word	0x20001e52
   10994:	200027b6 	.word	0x200027b6
   10998:	20001efc 	.word	0x20001efc
   1099c:	20001f7c 	.word	0x20001f7c
   109a0:	20001ef4 	.word	0x20001ef4

000109a4 <ll_rl_crpa_set>:
{
   109a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   109a8:	795c      	ldrb	r4, [r3, #5]
   109aa:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   109ae:	2c40      	cmp	r4, #64	; 0x40
   109b0:	d001      	beq.n	109b6 <ll_rl_crpa_set+0x12>
}
   109b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   109b6:	461e      	mov	r6, r3
   109b8:	460f      	mov	r7, r1
   109ba:	b301      	cbz	r1, 109fe <ll_rl_crpa_set+0x5a>
   109bc:	f8df 9068 	ldr.w	r9, [pc, #104]	; 10a28 <ll_rl_crpa_set+0x84>
   109c0:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   109c2:	f000 0a01 	and.w	sl, r0, #1
   109c6:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   109ca:	e003      	b.n	109d4 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   109cc:	2c08      	cmp	r4, #8
   109ce:	f109 0928 	add.w	r9, r9, #40	; 0x28
   109d2:	d0ee      	beq.n	109b2 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   109d4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   109d8:	4625      	mov	r5, r4
   109da:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   109de:	f3c2 1380 	ubfx	r3, r2, #6, #1
   109e2:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   109e4:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   109e8:	d5f0      	bpl.n	109cc <ll_rl_crpa_set+0x28>
   109ea:	4553      	cmp	r3, sl
   109ec:	d1ee      	bne.n	109cc <ll_rl_crpa_set+0x28>
   109ee:	4648      	mov	r0, r9
   109f0:	2206      	movs	r2, #6
   109f2:	4639      	mov	r1, r7
   109f4:	f008 f9f3 	bl	18dde <memcmp>
   109f8:	2800      	cmp	r0, #0
   109fa:	d1e7      	bne.n	109cc <ll_rl_crpa_set+0x28>
   109fc:	e004      	b.n	10a08 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   109fe:	2a07      	cmp	r2, #7
   10a00:	d8d7      	bhi.n	109b2 <ll_rl_crpa_set+0xe>
   10a02:	f8df 8028 	ldr.w	r8, [pc, #40]	; 10a2c <ll_rl_crpa_set+0x88>
   10a06:	4615      	mov	r5, r2
   10a08:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   10a0c:	00e8      	lsls	r0, r5, #3
   10a0e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   10a12:	07db      	lsls	r3, r3, #31
   10a14:	d5cd      	bpl.n	109b2 <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   10a16:	3018      	adds	r0, #24
   10a18:	4631      	mov	r1, r6
   10a1a:	4440      	add	r0, r8
   10a1c:	2206      	movs	r2, #6
}
   10a1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   10a22:	f008 b9ed 	b.w	18e00 <memcpy>
   10a26:	bf00      	nop
   10a28:	20001f7d 	.word	0x20001f7d
   10a2c:	20001f7c 	.word	0x20001f7c

00010a30 <ll_rl_crpa_get>:
{
   10a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10a34:	4682      	mov	sl, r0
   10a36:	4e1a      	ldr	r6, [pc, #104]	; (10aa0 <ll_rl_crpa_get+0x70>)
   10a38:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   10a3c:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10a3e:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10a40:	f008 0801 	and.w	r8, r8, #1
   10a44:	1e77      	subs	r7, r6, #1
   10a46:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   10a4a:	00d5      	lsls	r5, r2, #3
   10a4c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   10a50:	f3c3 1280 	ubfx	r2, r3, #6, #1
   10a54:	07db      	lsls	r3, r3, #31
   10a56:	f104 0401 	add.w	r4, r4, #1
   10a5a:	d501      	bpl.n	10a60 <ll_rl_crpa_get+0x30>
   10a5c:	4542      	cmp	r2, r8
   10a5e:	d006      	beq.n	10a6e <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10a60:	2c08      	cmp	r4, #8
   10a62:	f106 0628 	add.w	r6, r6, #40	; 0x28
   10a66:	d1ee      	bne.n	10a46 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10a68:	2002      	movs	r0, #2
}
   10a6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10a6e:	4630      	mov	r0, r6
   10a70:	2206      	movs	r2, #6
   10a72:	4651      	mov	r1, sl
   10a74:	f008 f9b3 	bl	18dde <memcmp>
   10a78:	4683      	mov	fp, r0
   10a7a:	2800      	cmp	r0, #0
   10a7c:	d1f0      	bne.n	10a60 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   10a7e:	f105 0218 	add.w	r2, r5, #24
   10a82:	4417      	add	r7, r2
   10a84:	2106      	movs	r1, #6
   10a86:	4638      	mov	r0, r7
   10a88:	f7f6 f8e0 	bl	6c4c <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   10a8c:	2800      	cmp	r0, #0
   10a8e:	d0eb      	beq.n	10a68 <ll_rl_crpa_get+0x38>
   10a90:	2206      	movs	r2, #6
   10a92:	4639      	mov	r1, r7
   10a94:	4648      	mov	r0, r9
   10a96:	f008 f9b3 	bl	18e00 <memcpy>
		return 0;
   10a9a:	4658      	mov	r0, fp
}
   10a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10aa0:	20001f7d 	.word	0x20001f7d

00010aa4 <ll_rl_lrpa_get>:
{
   10aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10aa8:	4681      	mov	r9, r0
   10aaa:	4e16      	ldr	r6, [pc, #88]	; (10b04 <ll_rl_lrpa_get+0x60>)
   10aac:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   10ab0:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10ab2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10ab4:	f008 0801 	and.w	r8, r8, #1
   10ab8:	1e77      	subs	r7, r6, #1
   10aba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   10abe:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   10ac2:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   10ac6:	f3c3 1280 	ubfx	r2, r3, #6, #1
   10aca:	07db      	lsls	r3, r3, #31
   10acc:	f104 0401 	add.w	r4, r4, #1
   10ad0:	d501      	bpl.n	10ad6 <ll_rl_lrpa_get+0x32>
   10ad2:	4542      	cmp	r2, r8
   10ad4:	d006      	beq.n	10ae4 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10ad6:	2c08      	cmp	r4, #8
   10ad8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   10adc:	d1ed      	bne.n	10aba <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10ade:	2002      	movs	r0, #2
}
   10ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10ae4:	4630      	mov	r0, r6
   10ae6:	2206      	movs	r2, #6
   10ae8:	4649      	mov	r1, r9
   10aea:	f008 f978 	bl	18dde <memcmp>
   10aee:	4683      	mov	fp, r0
   10af0:	2800      	cmp	r0, #0
   10af2:	d1f0      	bne.n	10ad6 <ll_rl_lrpa_get+0x32>
   10af4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10af6:	2206      	movs	r2, #6
   10af8:	4650      	mov	r0, sl
   10afa:	f008 f981 	bl	18e00 <memcpy>
		return 0;
   10afe:	4658      	mov	r0, fp
}
   10b00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b04:	20001f7d 	.word	0x20001f7d

00010b08 <ll_rl_enable>:
{
   10b08:	b510      	push	{r4, lr}
   10b0a:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   10b0c:	2000      	movs	r0, #0
   10b0e:	f7fa fcbb 	bl	b488 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   10b12:	b958      	cbnz	r0, 10b2c <ll_rl_enable+0x24>
	switch (enable) {
   10b14:	b134      	cbz	r4, 10b24 <ll_rl_enable+0x1c>
   10b16:	2c01      	cmp	r4, #1
   10b18:	d001      	beq.n	10b1e <ll_rl_enable+0x16>
   10b1a:	2012      	movs	r0, #18
}
   10b1c:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   10b1e:	4b04      	ldr	r3, [pc, #16]	; (10b30 <ll_rl_enable+0x28>)
   10b20:	701c      	strb	r4, [r3, #0]
}
   10b22:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   10b24:	4b02      	ldr	r3, [pc, #8]	; (10b30 <ll_rl_enable+0x28>)
   10b26:	701c      	strb	r4, [r3, #0]
	return 0;
   10b28:	4620      	mov	r0, r4
}
   10b2a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10b2c:	200c      	movs	r0, #12
}
   10b2e:	bd10      	pop	{r4, pc}
   10b30:	200027b7 	.word	0x200027b7

00010b34 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   10b34:	4b03      	ldr	r3, [pc, #12]	; (10b44 <ll_rl_timeout_set+0x10>)
   10b36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10b3a:	fb02 f000 	mul.w	r0, r2, r0
   10b3e:	6018      	str	r0, [r3, #0]
}
   10b40:	4770      	bx	lr
   10b42:	bf00      	nop
   10b44:	200020f0 	.word	0x200020f0

00010b48 <ll_priv_mode_set>:
{
   10b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b4c:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   10b4e:	2000      	movs	r0, #0
{
   10b50:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   10b52:	f7fa fc99 	bl	b488 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   10b56:	bb68      	cbnz	r0, 10bb4 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   10b58:	4e1d      	ldr	r6, [pc, #116]	; (10bd0 <ll_priv_mode_set+0x88>)
   10b5a:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10b5e:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10b60:	f009 0901 	and.w	r9, r9, #1
   10b64:	1e77      	subs	r7, r6, #1
   10b66:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   10b6a:	00d5      	lsls	r5, r2, #3
   10b6c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   10b70:	f3c3 1280 	ubfx	r2, r3, #6, #1
   10b74:	07db      	lsls	r3, r3, #31
   10b76:	f104 0401 	add.w	r4, r4, #1
   10b7a:	d501      	bpl.n	10b80 <ll_priv_mode_set+0x38>
   10b7c:	454a      	cmp	r2, r9
   10b7e:	d006      	beq.n	10b8e <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10b80:	2c08      	cmp	r4, #8
   10b82:	f106 0628 	add.w	r6, r6, #40	; 0x28
   10b86:	d1ee      	bne.n	10b66 <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10b88:	2002      	movs	r0, #2
}
   10b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10b8e:	4630      	mov	r0, r6
   10b90:	2206      	movs	r2, #6
   10b92:	4651      	mov	r1, sl
   10b94:	f008 f923 	bl	18dde <memcmp>
   10b98:	2800      	cmp	r0, #0
   10b9a:	d1f1      	bne.n	10b80 <ll_priv_mode_set+0x38>
		switch (mode) {
   10b9c:	f1b8 0f00 	cmp.w	r8, #0
   10ba0:	d00e      	beq.n	10bc0 <ll_priv_mode_set+0x78>
   10ba2:	f1b8 0f01 	cmp.w	r8, #1
   10ba6:	d108      	bne.n	10bba <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   10ba8:	5d7b      	ldrb	r3, [r7, r5]
   10baa:	f043 0310 	orr.w	r3, r3, #16
   10bae:	557b      	strb	r3, [r7, r5]
}
   10bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10bb4:	200c      	movs	r0, #12
}
   10bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   10bba:	2012      	movs	r0, #18
}
   10bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   10bc0:	5d7b      	ldrb	r3, [r7, r5]
   10bc2:	f368 1304 	bfi	r3, r8, #4, #1
   10bc6:	557b      	strb	r3, [r7, r5]
	return 0;
   10bc8:	4640      	mov	r0, r8
}
   10bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10bce:	bf00      	nop
   10bd0:	20001f7d 	.word	0x20001f7d

00010bd4 <ull_filter_reset>:
{
   10bd4:	b4d0      	push	{r4, r6, r7}
   10bd6:	4930      	ldr	r1, [pc, #192]	; (10c98 <ull_filter_reset+0xc4>)
   10bd8:	4c30      	ldr	r4, [pc, #192]	; (10c9c <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   10bda:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   10bdc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   10be0:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   10be2:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   10be4:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   10be8:	d805      	bhi.n	10bf6 <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   10bea:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   10bee:	f36f 1245 	bfc	r2, #5, #1
   10bf2:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   10bf6:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   10bfa:	f36f 0200 	bfc	r2, #0, #1
   10bfe:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   10c02:	3301      	adds	r3, #1
   10c04:	2b08      	cmp	r3, #8
   10c06:	d1e9      	bne.n	10bdc <ull_filter_reset+0x8>
	rl_enable = 0U;
   10c08:	4a25      	ldr	r2, [pc, #148]	; (10ca0 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   10c0a:	4c26      	ldr	r4, [pc, #152]	; (10ca4 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   10c0c:	2300      	movs	r3, #0
   10c0e:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   10c10:	780a      	ldrb	r2, [r1, #0]
   10c12:	f363 0200 	bfi	r2, r3, #0, #1
   10c16:	700a      	strb	r2, [r1, #0]
   10c18:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   10c1c:	f363 0200 	bfi	r2, r3, #0, #1
   10c20:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   10c24:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   10c28:	f363 0200 	bfi	r2, r3, #0, #1
   10c2c:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   10c30:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   10c34:	f363 0200 	bfi	r2, r3, #0, #1
   10c38:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   10c3c:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   10c40:	f363 0200 	bfi	r2, r3, #0, #1
   10c44:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   10c48:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   10c4c:	f363 0200 	bfi	r2, r3, #0, #1
   10c50:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   10c54:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   10c58:	f363 0200 	bfi	r2, r3, #0, #1
   10c5c:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   10c60:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   10c64:	f363 0200 	bfi	r2, r3, #0, #1
   10c68:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   10c6c:	4a0e      	ldr	r2, [pc, #56]	; (10ca8 <ull_filter_reset+0xd4>)
   10c6e:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   10c70:	4b0e      	ldr	r3, [pc, #56]	; (10cac <ull_filter_reset+0xd8>)
   10c72:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10c76:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   10c7a:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   10c7e:	4b0c      	ldr	r3, [pc, #48]	; (10cb0 <ull_filter_reset+0xdc>)
   10c80:	6023      	str	r3, [r4, #0]
	if (init) {
   10c82:	b120      	cbz	r0, 10c8e <ull_filter_reset+0xba>
}
   10c84:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   10c86:	490b      	ldr	r1, [pc, #44]	; (10cb4 <ull_filter_reset+0xe0>)
   10c88:	480b      	ldr	r0, [pc, #44]	; (10cb8 <ull_filter_reset+0xe4>)
   10c8a:	f00b b992 	b.w	1bfb2 <k_work_init_delayable>
}
   10c8e:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   10c90:	4809      	ldr	r0, [pc, #36]	; (10cb8 <ull_filter_reset+0xe4>)
   10c92:	f00b b99a 	b.w	1bfca <k_work_cancel_delayable>
   10c96:	bf00      	nop
   10c98:	20001f7c 	.word	0x20001f7c
   10c9c:	20001e50 	.word	0x20001e50
   10ca0:	200027b7 	.word	0x200027b7
   10ca4:	200020f0 	.word	0x200020f0
   10ca8:	200027b6 	.word	0x200027b6
   10cac:	200010a8 	.word	0x200010a8
   10cb0:	000dbba0 	.word	0x000dbba0
   10cb4:	00010f21 	.word	0x00010f21
   10cb8:	200010b0 	.word	0x200010b0

00010cbc <ull_filter_lll_get>:
		return &fal_filter;
   10cbc:	4a03      	ldr	r2, [pc, #12]	; (10ccc <ull_filter_lll_get+0x10>)
   10cbe:	4b04      	ldr	r3, [pc, #16]	; (10cd0 <ull_filter_lll_get+0x14>)
}
   10cc0:	2800      	cmp	r0, #0
   10cc2:	bf0c      	ite	eq
   10cc4:	4610      	moveq	r0, r2
   10cc6:	4618      	movne	r0, r3
   10cc8:	4770      	bx	lr
   10cca:	bf00      	nop
   10ccc:	200020bc 	.word	0x200020bc
   10cd0:	20001e90 	.word	0x20001e90

00010cd4 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   10cd4:	b1a8      	cbz	r0, 10d02 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   10cd6:	4a0c      	ldr	r2, [pc, #48]	; (10d08 <ull_filter_adv_scan_state_cb+0x34>)
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   10cd8:	6812      	ldr	r2, [r2, #0]
{
   10cda:	b510      	push	{r4, lr}
   10cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   10ce0:	f240 30e7 	movw	r0, #999	; 0x3e7
   10ce4:	2100      	movs	r1, #0
   10ce6:	fbe2 0103 	umlal	r0, r1, r2, r3
   10cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10cee:	2300      	movs	r3, #0
   10cf0:	f7ef fdc4 	bl	87c <__aeabi_uldivmod>
}
   10cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10cf8:	4602      	mov	r2, r0
   10cfa:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   10cfc:	4803      	ldr	r0, [pc, #12]	; (10d0c <ull_filter_adv_scan_state_cb+0x38>)
   10cfe:	f006 bc8d 	b.w	1761c <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   10d02:	4802      	ldr	r0, [pc, #8]	; (10d0c <ull_filter_adv_scan_state_cb+0x38>)
   10d04:	f00b b961 	b.w	1bfca <k_work_cancel_delayable>
   10d08:	200020f0 	.word	0x200020f0
   10d0c:	200010b0 	.word	0x200010b0

00010d10 <ull_filter_adv_update>:
{
   10d10:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   10d12:	4b09      	ldr	r3, [pc, #36]	; (10d38 <ull_filter_adv_update+0x28>)
   10d14:	2200      	movs	r2, #0
   10d16:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   10d18:	b930      	cbnz	r0, 10d28 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   10d1a:	4b08      	ldr	r3, [pc, #32]	; (10d3c <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   10d1c:	4a08      	ldr	r2, [pc, #32]	; (10d40 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   10d1e:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   10d20:	2100      	movs	r1, #0
   10d22:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   10d24:	b91b      	cbnz	r3, 10d2e <ull_filter_adv_update+0x1e>
}
   10d26:	bd08      	pop	{r3, pc}
		fal_update();
   10d28:	f7ff fbb0 	bl	1048c <fal_update>
   10d2c:	e7f5      	b.n	10d1a <ull_filter_adv_update+0xa>
}
   10d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   10d32:	f7ff bb73 	b.w	1041c <rl_update>
   10d36:	bf00      	nop
   10d38:	20001e90 	.word	0x20001e90
   10d3c:	200027b7 	.word	0x200027b7
   10d40:	200020bc 	.word	0x200020bc

00010d44 <ull_filter_rpa_update>:
{
   10d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d48:	4683      	mov	fp, r0
   10d4a:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   10d4c:	f00b faad 	bl	1c2aa <z_impl_k_uptime_ticks>
   10d50:	014b      	lsls	r3, r1, #5
   10d52:	0142      	lsls	r2, r0, #5
   10d54:	1a12      	subs	r2, r2, r0
   10d56:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   10d5a:	eb63 0301 	sbc.w	r3, r3, r1
   10d5e:	009b      	lsls	r3, r3, #2
   10d60:	ea4f 0982 	mov.w	r9, r2, lsl #2
   10d64:	eb19 0900 	adds.w	r9, r9, r0
   10d68:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   10d6c:	eb41 0103 	adc.w	r1, r1, r3
   10d70:	00cb      	lsls	r3, r1, #3
   10d72:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   10d76:	0bd9      	lsrs	r1, r3, #15
   10d78:	f3c9 3910 	ubfx	r9, r9, #12, #17
   10d7c:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   10d80:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   10d82:	f1bb 0f00 	cmp.w	fp, #0
   10d86:	d117      	bne.n	10db8 <ull_filter_rpa_update+0x74>
   10d88:	4a5d      	ldr	r2, [pc, #372]	; (10f00 <ull_filter_rpa_update+0x1bc>)
   10d8a:	e9d2 3200 	ldrd	r3, r2, [r2]
   10d8e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   10d92:	bf08      	it	eq
   10d94:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   10d98:	d00e      	beq.n	10db8 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   10d9a:	ebb9 0303 	subs.w	r3, r9, r3
   10d9e:	eb61 0202 	sbc.w	r2, r1, r2
   10da2:	4958      	ldr	r1, [pc, #352]	; (10f04 <ull_filter_rpa_update+0x1c0>)
   10da4:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   10da6:	428b      	cmp	r3, r1
   10da8:	f172 0300 	sbcs.w	r3, r2, #0
   10dac:	bfac      	ite	ge
   10dae:	f04f 0a01 	movge.w	sl, #1
   10db2:	f04f 0a00 	movlt.w	sl, #0
   10db6:	e001      	b.n	10dbc <ull_filter_rpa_update+0x78>
   10db8:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10dbc:	4e52      	ldr	r6, [pc, #328]	; (10f08 <ull_filter_rpa_update+0x1c4>)
   10dbe:	f8df 814c 	ldr.w	r8, [pc, #332]	; 10f0c <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   10dc2:	2400      	movs	r4, #0
   10dc4:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   10dc8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   10dcc:	00a5      	lsls	r5, r4, #2
   10dce:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   10dd2:	07da      	lsls	r2, r3, #31
   10dd4:	d515      	bpl.n	10e02 <ull_filter_rpa_update+0xbe>
   10dd6:	f1ba 0f00 	cmp.w	sl, #0
   10dda:	d101      	bne.n	10de0 <ull_filter_rpa_update+0x9c>
   10ddc:	0798      	lsls	r0, r3, #30
   10dde:	d410      	bmi.n	10e02 <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   10de0:	192b      	adds	r3, r5, r4
   10de2:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   10de6:	0759      	lsls	r1, r3, #29
   10de8:	d432      	bmi.n	10e50 <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   10dea:	192b      	adds	r3, r5, r4
   10dec:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   10df0:	071a      	lsls	r2, r3, #28
   10df2:	d41b      	bmi.n	10e2c <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   10df4:	4425      	add	r5, r4
   10df6:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   10dfa:	f043 0302 	orr.w	r3, r3, #2
   10dfe:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10e02:	3401      	adds	r4, #1
   10e04:	2c08      	cmp	r4, #8
   10e06:	f108 0806 	add.w	r8, r8, #6
   10e0a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   10e0e:	d1db      	bne.n	10dc8 <ull_filter_rpa_update+0x84>
	if (all) {
   10e10:	f1ba 0f00 	cmp.w	sl, #0
   10e14:	d004      	beq.n	10e20 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   10e16:	4b3a      	ldr	r3, [pc, #232]	; (10f00 <ull_filter_rpa_update+0x1bc>)
   10e18:	9a01      	ldr	r2, [sp, #4]
   10e1a:	f8c3 9000 	str.w	r9, [r3]
   10e1e:	605a      	str	r2, [r3, #4]
	if (timeout) {
   10e20:	f1bb 0f00 	cmp.w	fp, #0
   10e24:	d138      	bne.n	10e98 <ull_filter_rpa_update+0x154>
}
   10e26:	b007      	add	sp, #28
   10e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   10e2c:	a902      	add	r1, sp, #8
   10e2e:	f1a6 0017 	sub.w	r0, r6, #23
   10e32:	f008 f837 	bl	18ea4 <bt_rpa_create>
				LL_ASSERT(!err);
   10e36:	2800      	cmp	r0, #0
   10e38:	d154      	bne.n	10ee4 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   10e3a:	ab02      	add	r3, sp, #8
   10e3c:	f8c6 3006 	str.w	r3, [r6, #6]
   10e40:	4619      	mov	r1, r3
   10e42:	2206      	movs	r2, #6
   10e44:	4640      	mov	r0, r8
   10e46:	f007 ffdb 	bl	18e00 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   10e4a:	f8c6 8006 	str.w	r8, [r6, #6]
   10e4e:	e7d1      	b.n	10df4 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   10e50:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   10e54:	4a2e      	ldr	r2, [pc, #184]	; (10f10 <ull_filter_rpa_update+0x1cc>)
   10e56:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   10e5a:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   10e5c:	f10d 0307 	add.w	r3, sp, #7
   10e60:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   10e64:	f812 1901 	ldrb.w	r1, [r2], #-1
   10e68:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   10e6c:	4283      	cmp	r3, r0
   10e6e:	d1f9      	bne.n	10e64 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   10e70:	4631      	mov	r1, r6
   10e72:	a802      	add	r0, sp, #8
   10e74:	f008 f816 	bl	18ea4 <bt_rpa_create>
				LL_ASSERT(!err);
   10e78:	2800      	cmp	r0, #0
   10e7a:	d0b6      	beq.n	10dea <ull_filter_rpa_update+0xa6>
   10e7c:	4a25      	ldr	r2, [pc, #148]	; (10f14 <ull_filter_rpa_update+0x1d0>)
   10e7e:	4926      	ldr	r1, [pc, #152]	; (10f18 <ull_filter_rpa_update+0x1d4>)
   10e80:	4826      	ldr	r0, [pc, #152]	; (10f1c <ull_filter_rpa_update+0x1d8>)
   10e82:	f240 23eb 	movw	r3, #747	; 0x2eb
   10e86:	f007 f96f 	bl	18168 <printk>
   10e8a:	4040      	eors	r0, r0
   10e8c:	f380 8811 	msr	BASEPRI, r0
   10e90:	f04f 0003 	mov.w	r0, #3
   10e94:	df02      	svc	2
   10e96:	e7a8      	b.n	10dea <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   10e98:	2000      	movs	r0, #0
   10e9a:	f7fa fae7 	bl	b46c <ull_adv_is_enabled_get>
		if (adv) {
   10e9e:	4604      	mov	r4, r0
   10ea0:	2800      	cmp	r0, #0
   10ea2:	d0c0      	beq.n	10e26 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   10ea4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   10ea8:	075b      	lsls	r3, r3, #29
   10eaa:	d5bc      	bpl.n	10e26 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   10eac:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   10eb0:	2b07      	cmp	r3, #7
   10eb2:	d8b8      	bhi.n	10e26 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   10eb4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   10eb8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   10ebc:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   10ebe:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   10ec0:	3028      	adds	r0, #40	; 0x28
   10ec2:	f001 f9cb 	bl	1225c <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   10ec6:	7872      	ldrb	r2, [r6, #1]
   10ec8:	4605      	mov	r5, r0
   10eca:	3202      	adds	r2, #2
   10ecc:	4631      	mov	r1, r6
   10ece:	f007 ff97 	bl	18e00 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   10ed2:	4629      	mov	r1, r5
   10ed4:	4620      	mov	r0, r4
   10ed6:	f7fa faf3 	bl	b4c0 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   10eda:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10ede:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   10ee2:	e7a0      	b.n	10e26 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   10ee4:	4a0b      	ldr	r2, [pc, #44]	; (10f14 <ull_filter_rpa_update+0x1d0>)
   10ee6:	490c      	ldr	r1, [pc, #48]	; (10f18 <ull_filter_rpa_update+0x1d4>)
   10ee8:	480c      	ldr	r0, [pc, #48]	; (10f1c <ull_filter_rpa_update+0x1d8>)
   10eea:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   10eee:	f007 f93b 	bl	18168 <printk>
   10ef2:	4040      	eors	r0, r0
   10ef4:	f380 8811 	msr	BASEPRI, r0
   10ef8:	f04f 0003 	mov.w	r0, #3
   10efc:	df02      	svc	2
   10efe:	e79c      	b.n	10e3a <ull_filter_rpa_update+0xf6>
   10f00:	200010a8 	.word	0x200010a8
   10f04:	200020f0 	.word	0x200020f0
   10f08:	20001f9a 	.word	0x20001f9a
   10f0c:	20001ec4 	.word	0x20001ec4
   10f10:	20001efc 	.word	0x20001efc
   10f14:	0001d4c4 	.word	0x0001d4c4
   10f18:	0001cf84 	.word	0x0001cf84
   10f1c:	0001cde4 	.word	0x0001cde4

00010f20 <rpa_timeout>:
{
   10f20:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   10f22:	2001      	movs	r0, #1
   10f24:	f7ff ff0e 	bl	10d44 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   10f28:	4a0a      	ldr	r2, [pc, #40]	; (10f54 <rpa_timeout+0x34>)
   10f2a:	6812      	ldr	r2, [r2, #0]
   10f2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   10f30:	f240 30e7 	movw	r0, #999	; 0x3e7
   10f34:	2100      	movs	r1, #0
   10f36:	fbe2 0103 	umlal	r0, r1, r2, r3
   10f3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10f3e:	2300      	movs	r3, #0
   10f40:	f7ef fc9c 	bl	87c <__aeabi_uldivmod>
}
   10f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10f48:	4602      	mov	r2, r0
   10f4a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   10f4c:	4802      	ldr	r0, [pc, #8]	; (10f58 <rpa_timeout+0x38>)
   10f4e:	f006 bb65 	b.w	1761c <k_work_schedule>
   10f52:	bf00      	nop
   10f54:	200020f0 	.word	0x200020f0
   10f58:	200010b0 	.word	0x200010b0

00010f5c <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   10f5c:	2807      	cmp	r0, #7
   10f5e:	d813      	bhi.n	10f88 <ull_filter_adva_get+0x2c>
{
   10f60:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   10f62:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   10f66:	4d10      	ldr	r5, [pc, #64]	; (10fa8 <ull_filter_adva_get+0x4c>)
   10f68:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   10f6c:	071a      	lsls	r2, r3, #28
   10f6e:	4604      	mov	r4, r0
   10f70:	ea4f 0680 	mov.w	r6, r0, lsl #2
   10f74:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   10f78:	d505      	bpl.n	10f86 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   10f7a:	079b      	lsls	r3, r3, #30
   10f7c:	d506      	bpl.n	10f8c <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   10f7e:	4434      	add	r4, r6
   10f80:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   10f84:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   10f86:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   10f88:	2000      	movs	r0, #0
}
   10f8a:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   10f8c:	4a07      	ldr	r2, [pc, #28]	; (10fac <ull_filter_adva_get+0x50>)
   10f8e:	4908      	ldr	r1, [pc, #32]	; (10fb0 <ull_filter_adva_get+0x54>)
   10f90:	4808      	ldr	r0, [pc, #32]	; (10fb4 <ull_filter_adva_get+0x58>)
   10f92:	f44f 7347 	mov.w	r3, #796	; 0x31c
   10f96:	f007 f8e7 	bl	18168 <printk>
   10f9a:	4040      	eors	r0, r0
   10f9c:	f380 8811 	msr	BASEPRI, r0
   10fa0:	f04f 0003 	mov.w	r0, #3
   10fa4:	df02      	svc	2
   10fa6:	e7ea      	b.n	10f7e <ull_filter_adva_get+0x22>
   10fa8:	20001f7c 	.word	0x20001f7c
   10fac:	0001d4c4 	.word	0x0001d4c4
   10fb0:	0001d528 	.word	0x0001d528
   10fb4:	0001cde4 	.word	0x0001cde4

00010fb8 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   10fb8:	2807      	cmp	r0, #7
   10fba:	d80b      	bhi.n	10fd4 <ull_filter_tgta_get+0x1c>
   10fbc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   10fc0:	4a05      	ldr	r2, [pc, #20]	; (10fd8 <ull_filter_tgta_get+0x20>)
   10fc2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   10fc6:	074b      	lsls	r3, r1, #29
   10fc8:	d504      	bpl.n	10fd4 <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   10fca:	2328      	movs	r3, #40	; 0x28
   10fcc:	fb03 2000 	mla	r0, r3, r0, r2
   10fd0:	301e      	adds	r0, #30
   10fd2:	4770      	bx	lr
	return NULL;
   10fd4:	2000      	movs	r0, #0
   10fd6:	4770      	bx	lr
   10fd8:	20001f7c 	.word	0x20001f7c

00010fdc <ull_filter_rl_find>:
{
   10fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fe0:	468b      	mov	fp, r1
	if (free_idx) {
   10fe2:	4617      	mov	r7, r2
   10fe4:	b10a      	cbz	r2, 10fea <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   10fe6:	23ff      	movs	r3, #255	; 0xff
   10fe8:	7013      	strb	r3, [r2, #0]
   10fea:	4d1b      	ldr	r5, [pc, #108]	; (11058 <ull_filter_rl_find+0x7c>)
{
   10fec:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   10fee:	f000 0a01 	and.w	sl, r0, #1
   10ff2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   10ff6:	e006      	b.n	11006 <ull_filter_rl_find+0x2a>
   10ff8:	4552      	cmp	r2, sl
   10ffa:	d01f      	beq.n	1103c <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   10ffc:	3401      	adds	r4, #1
   10ffe:	2c08      	cmp	r4, #8
   11000:	f105 0528 	add.w	r5, r5, #40	; 0x28
   11004:	d015      	beq.n	11032 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11006:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1100a:	fa5f f884 	uxtb.w	r8, r4
   1100e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   11012:	07d9      	lsls	r1, r3, #31
   11014:	f3c3 1280 	ubfx	r2, r3, #6, #1
   11018:	d4ee      	bmi.n	10ff8 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   1101a:	2f00      	cmp	r7, #0
   1101c:	d0ee      	beq.n	10ffc <ull_filter_rl_find+0x20>
   1101e:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11020:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   11022:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   11024:	bf08      	it	eq
   11026:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1102a:	2c08      	cmp	r4, #8
   1102c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   11030:	d1e9      	bne.n	11006 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   11032:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   11036:	4640      	mov	r0, r8
   11038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1103c:	4628      	mov	r0, r5
   1103e:	2206      	movs	r2, #6
   11040:	4659      	mov	r1, fp
   11042:	f007 fecc 	bl	18dde <memcmp>
   11046:	2800      	cmp	r0, #0
   11048:	d0f5      	beq.n	11036 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   1104a:	2f00      	cmp	r7, #0
   1104c:	d0d6      	beq.n	10ffc <ull_filter_rl_find+0x20>
   1104e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   11052:	07db      	lsls	r3, r3, #31
   11054:	d4d2      	bmi.n	10ffc <ull_filter_rl_find+0x20>
   11056:	e7e2      	b.n	1101e <ull_filter_rl_find+0x42>
   11058:	20001f7d 	.word	0x20001f7d

0001105c <ll_rl_add>:
{
   1105c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11060:	4680      	mov	r8, r0
   11062:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   11064:	2000      	movs	r0, #0
{
   11066:	460e      	mov	r6, r1
   11068:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1106a:	f7fa fa0d 	bl	b488 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1106e:	2800      	cmp	r0, #0
   11070:	d17d      	bne.n	1116e <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   11072:	46c2      	mov	sl, r8
   11074:	4604      	mov	r4, r0
   11076:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1107a:	f10d 020f 	add.w	r2, sp, #15
   1107e:	4651      	mov	r1, sl
   11080:	f7ff ffac 	bl	10fdc <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   11084:	2807      	cmp	r0, #7
   11086:	f240 80b5 	bls.w	111f4 <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   1108a:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1108e:	2f07      	cmp	r7, #7
   11090:	f200 8084 	bhi.w	1119c <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   11094:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   11098:	4d58      	ldr	r5, [pc, #352]	; (111fc <ll_rl_add+0x1a0>)
   1109a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1109e:	1c58      	adds	r0, r3, #1
   110a0:	2206      	movs	r2, #6
   110a2:	4651      	mov	r1, sl
   110a4:	4428      	add	r0, r5
   110a6:	9300      	str	r3, [sp, #0]
   110a8:	f007 feaa 	bl	18e00 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   110ac:	f898 3000 	ldrb.w	r3, [r8]
   110b0:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   110b4:	465a      	mov	r2, fp
   110b6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   110ba:	f363 1186 	bfi	r1, r3, #6, #1
   110be:	f805 100b 	strb.w	r1, [r5, fp]
   110c2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   110c6:	2110      	movs	r1, #16
   110c8:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   110ca:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   110cc:	f7f5 fdbe 	bl	6c4c <mem_nz>
   110d0:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   110d4:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   110d6:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   110da:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   110dc:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   110e0:	f7f5 fdb4 	bl	6c4c <mem_nz>
   110e4:	f815 200b 	ldrb.w	r2, [r5, fp]
   110e8:	f000 0001 	and.w	r0, r0, #1
   110ec:	f360 02c3 	bfi	r2, r0, #3, #1
   110f0:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   110f4:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   110f6:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   110fa:	d453      	bmi.n	111a4 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   110fc:	2800      	cmp	r0, #0
   110fe:	d16b      	bne.n	111d8 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   11100:	9800      	ldr	r0, [sp, #0]
   11102:	4e3f      	ldr	r6, [pc, #252]	; (11200 <ll_rl_add+0x1a4>)
   11104:	3018      	adds	r0, #24
   11106:	2206      	movs	r2, #6
   11108:	2100      	movs	r1, #0
   1110a:	4428      	add	r0, r5
   1110c:	f007 fe83 	bl	18e16 <memset>
	rl[i].dev = 0U;
   11110:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   11114:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   11118:	f021 0112 	bic.w	r1, r1, #18
   1111c:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   11120:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < FAL_SIZE; i++) {
   11124:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   11128:	f009 0901 	and.w	r9, r9, #1
   1112c:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   11130:	07d3      	lsls	r3, r2, #31
   11132:	f3c2 0140 	ubfx	r1, r2, #1, #1
   11136:	d501      	bpl.n	1113c <ll_rl_add+0xe0>
   11138:	4549      	cmp	r1, r9
   1113a:	d01c      	beq.n	11176 <ll_rl_add+0x11a>
	for (i = 0; i < FAL_SIZE; i++) {
   1113c:	3401      	adds	r4, #1
   1113e:	2c08      	cmp	r4, #8
   11140:	f106 0608 	add.w	r6, r6, #8
   11144:	d1f2      	bne.n	1112c <ll_rl_add+0xd0>
		rl[i].fal = 0U;
   11146:	eb0b 0207 	add.w	r2, fp, r7
   1114a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1114e:	f36f 1145 	bfc	r1, #5, #1
   11152:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   11156:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   1115a:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1115c:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   11160:	f042 0201 	orr.w	r2, r2, #1
   11164:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   11168:	b005      	add	sp, #20
   1116a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1116e:	200c      	movs	r0, #12
}
   11170:	b005      	add	sp, #20
   11172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   11176:	2206      	movs	r2, #6
   11178:	4630      	mov	r0, r6
   1117a:	4651      	mov	r1, sl
   1117c:	f007 fe2f 	bl	18dde <memcmp>
   11180:	2800      	cmp	r0, #0
   11182:	d1db      	bne.n	1113c <ll_rl_add+0xe0>
		rl[i].fal = 1U;
   11184:	eb0b 0207 	add.w	r2, fp, r7
		fal[j].rl_idx = i;
   11188:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   1118c:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   11190:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   11192:	f041 0120 	orr.w	r1, r1, #32
   11196:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   1119a:	e7dc      	b.n	11156 <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1119c:	2007      	movs	r0, #7
}
   1119e:	b005      	add	sp, #20
   111a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   111a4:	4b17      	ldr	r3, [pc, #92]	; (11204 <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   111a6:	4a18      	ldr	r2, [pc, #96]	; (11208 <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   111a8:	7819      	ldrb	r1, [r3, #0]
   111aa:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   111ae:	5457      	strb	r7, [r2, r1]
   111b0:	4a16      	ldr	r2, [pc, #88]	; (1120c <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   111b2:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   111b6:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   111ba:	3101      	adds	r1, #1
	psrc += length - 1;
   111bc:	f106 020f 	add.w	r2, r6, #15
   111c0:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   111c2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   111c6:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   111c8:	f812 1901 	ldrb.w	r1, [r2], #-1
   111cc:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   111d0:	42b2      	cmp	r2, r6
   111d2:	d1f9      	bne.n	111c8 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   111d4:	2800      	cmp	r0, #0
   111d6:	d093      	beq.n	11100 <ll_rl_add+0xa4>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   111d8:	9b00      	ldr	r3, [sp, #0]
   111da:	1dd8      	adds	r0, r3, #7
   111dc:	4649      	mov	r1, r9
   111de:	2210      	movs	r2, #16
   111e0:	4428      	add	r0, r5
   111e2:	f007 fe0d 	bl	18e00 <memcpy>
		rl[i].local_rpa = NULL;
   111e6:	eb0b 0207 	add.w	r2, fp, r7
   111ea:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   111ee:	2100      	movs	r1, #0
   111f0:	6251      	str	r1, [r2, #36]	; 0x24
   111f2:	e785      	b.n	11100 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   111f4:	2012      	movs	r0, #18
}
   111f6:	b005      	add	sp, #20
   111f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111fc:	20001f7c 	.word	0x20001f7c
   11200:	20001e52 	.word	0x20001e52
   11204:	200027b6 	.word	0x200027b6
   11208:	20001ef4 	.word	0x20001ef4
   1120c:	20001efc 	.word	0x20001efc

00011210 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   11210:	2807      	cmp	r0, #7
   11212:	d807      	bhi.n	11224 <ull_filter_lll_lrpa_used+0x14>
   11214:	4b04      	ldr	r3, [pc, #16]	; (11228 <ull_filter_lll_lrpa_used+0x18>)
   11216:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1121a:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1121e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   11222:	4770      	bx	lr
   11224:	2000      	movs	r0, #0
}
   11226:	4770      	bx	lr
   11228:	20001f7c 	.word	0x20001f7c

0001122c <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1122c:	4b02      	ldr	r3, [pc, #8]	; (11238 <ull_filter_lll_irks_get+0xc>)
   1122e:	781b      	ldrb	r3, [r3, #0]
   11230:	7003      	strb	r3, [r0, #0]
}
   11232:	4802      	ldr	r0, [pc, #8]	; (1123c <ull_filter_lll_irks_get+0x10>)
   11234:	4770      	bx	lr
   11236:	bf00      	nop
   11238:	200027b6 	.word	0x200027b6
   1123c:	20001efc 	.word	0x20001efc

00011240 <ull_filter_lll_rl_irk_idx>:
{
   11240:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11242:	4b20      	ldr	r3, [pc, #128]	; (112c4 <ull_filter_lll_rl_irk_idx+0x84>)
   11244:	781b      	ldrb	r3, [r3, #0]
   11246:	4283      	cmp	r3, r0
{
   11248:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1124a:	d90c      	bls.n	11266 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1124c:	4b1e      	ldr	r3, [pc, #120]	; (112c8 <ull_filter_lll_rl_irk_idx+0x88>)
   1124e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11250:	2c07      	cmp	r4, #7
   11252:	d819      	bhi.n	11288 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   11254:	4b1d      	ldr	r3, [pc, #116]	; (112cc <ull_filter_lll_rl_irk_idx+0x8c>)
   11256:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1125a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1125e:	07db      	lsls	r3, r3, #31
   11260:	d520      	bpl.n	112a4 <ull_filter_lll_rl_irk_idx+0x64>
}
   11262:	4620      	mov	r0, r4
   11264:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11266:	4a1a      	ldr	r2, [pc, #104]	; (112d0 <ull_filter_lll_rl_irk_idx+0x90>)
   11268:	491a      	ldr	r1, [pc, #104]	; (112d4 <ull_filter_lll_rl_irk_idx+0x94>)
   1126a:	481b      	ldr	r0, [pc, #108]	; (112d8 <ull_filter_lll_rl_irk_idx+0x98>)
   1126c:	f240 336d 	movw	r3, #877	; 0x36d
   11270:	f006 ff7a 	bl	18168 <printk>
   11274:	4040      	eors	r0, r0
   11276:	f380 8811 	msr	BASEPRI, r0
   1127a:	f04f 0003 	mov.w	r0, #3
   1127e:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11280:	4b11      	ldr	r3, [pc, #68]	; (112c8 <ull_filter_lll_rl_irk_idx+0x88>)
   11282:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11284:	2c07      	cmp	r4, #7
   11286:	d9e5      	bls.n	11254 <ull_filter_lll_rl_irk_idx+0x14>
   11288:	4a11      	ldr	r2, [pc, #68]	; (112d0 <ull_filter_lll_rl_irk_idx+0x90>)
   1128a:	4914      	ldr	r1, [pc, #80]	; (112dc <ull_filter_lll_rl_irk_idx+0x9c>)
   1128c:	4812      	ldr	r0, [pc, #72]	; (112d8 <ull_filter_lll_rl_irk_idx+0x98>)
   1128e:	f240 336f 	movw	r3, #879	; 0x36f
   11292:	f006 ff69 	bl	18168 <printk>
   11296:	4040      	eors	r0, r0
   11298:	f380 8811 	msr	BASEPRI, r0
   1129c:	f04f 0003 	mov.w	r0, #3
   112a0:	df02      	svc	2
   112a2:	e7d7      	b.n	11254 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   112a4:	4a0a      	ldr	r2, [pc, #40]	; (112d0 <ull_filter_lll_rl_irk_idx+0x90>)
   112a6:	490e      	ldr	r1, [pc, #56]	; (112e0 <ull_filter_lll_rl_irk_idx+0xa0>)
   112a8:	480b      	ldr	r0, [pc, #44]	; (112d8 <ull_filter_lll_rl_irk_idx+0x98>)
   112aa:	f44f 735c 	mov.w	r3, #880	; 0x370
   112ae:	f006 ff5b 	bl	18168 <printk>
   112b2:	4040      	eors	r0, r0
   112b4:	f380 8811 	msr	BASEPRI, r0
   112b8:	f04f 0003 	mov.w	r0, #3
   112bc:	df02      	svc	2
}
   112be:	4620      	mov	r0, r4
   112c0:	bd10      	pop	{r4, pc}
   112c2:	bf00      	nop
   112c4:	200027b6 	.word	0x200027b6
   112c8:	20001ef4 	.word	0x20001ef4
   112cc:	20001f7c 	.word	0x20001f7c
   112d0:	0001d4c4 	.word	0x0001d4c4
   112d4:	0001d6b0 	.word	0x0001d6b0
   112d8:	0001cde4 	.word	0x0001cde4
   112dc:	0001d6d0 	.word	0x0001d6d0
   112e0:	0001d6a4 	.word	0x0001d6a4

000112e4 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   112e4:	2807      	cmp	r0, #7
   112e6:	d823      	bhi.n	11330 <ull_filter_lll_irk_in_fal+0x4c>
{
   112e8:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   112ea:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   112ee:	4e11      	ldr	r6, [pc, #68]	; (11334 <ull_filter_lll_irk_in_fal+0x50>)
   112f0:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   112f4:	07db      	lsls	r3, r3, #31
   112f6:	4604      	mov	r4, r0
   112f8:	ea4f 0580 	mov.w	r5, r0, lsl #2
   112fc:	d505      	bpl.n	1130a <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   112fe:	442c      	add	r4, r5
   11300:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   11304:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   11308:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1130a:	4a0b      	ldr	r2, [pc, #44]	; (11338 <ull_filter_lll_irk_in_fal+0x54>)
   1130c:	490b      	ldr	r1, [pc, #44]	; (1133c <ull_filter_lll_irk_in_fal+0x58>)
   1130e:	480c      	ldr	r0, [pc, #48]	; (11340 <ull_filter_lll_irk_in_fal+0x5c>)
   11310:	f240 337b 	movw	r3, #891	; 0x37b
   11314:	f006 ff28 	bl	18168 <printk>
   11318:	4040      	eors	r0, r0
   1131a:	f380 8811 	msr	BASEPRI, r0
   1131e:	f04f 0003 	mov.w	r0, #3
   11322:	df02      	svc	2
	return rl[rl_idx].fal;
   11324:	442c      	add	r4, r5
   11326:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1132a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1132e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   11330:	2000      	movs	r0, #0
}
   11332:	4770      	bx	lr
   11334:	20001f7c 	.word	0x20001f7c
   11338:	0001d4c4 	.word	0x0001d4c4
   1133c:	0001d514 	.word	0x0001d514
   11340:	0001cde4 	.word	0x0001cde4

00011344 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   11344:	7813      	ldrb	r3, [r2, #0]
   11346:	2bff      	cmp	r3, #255	; 0xff
   11348:	d11b      	bne.n	11382 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   1134a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1134e:	4d19      	ldr	r5, [pc, #100]	; (113b4 <ull_filter_lll_rl_addr_allowed+0x70>)
   11350:	4604      	mov	r4, r0
   11352:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   11354:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   11356:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1135a:	b2df      	uxtb	r7, r3
   1135c:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   11360:	f01c 0001 	ands.w	r0, ip, #1
   11364:	ea4f 0683 	mov.w	r6, r3, lsl #2
   11368:	d003      	beq.n	11372 <ull_filter_lll_rl_addr_allowed+0x2e>
   1136a:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1136e:	45a4      	cmp	ip, r4
   11370:	d009      	beq.n	11386 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11372:	3301      	adds	r3, #1
   11374:	2b08      	cmp	r3, #8
   11376:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1137a:	d1ec      	bne.n	11356 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   1137c:	2001      	movs	r0, #1
}
   1137e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   11382:	2001      	movs	r0, #1
}
   11384:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   11386:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1138a:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1138c:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   11390:	f81c af01 	ldrb.w	sl, [ip, #1]!
   11394:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   11398:	45ca      	cmp	sl, r9
   1139a:	d1ea      	bne.n	11372 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1139c:	45dc      	cmp	ip, fp
   1139e:	d1f7      	bne.n	11390 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   113a0:	4433      	add	r3, r6
				*rl_idx = i;
   113a2:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   113a4:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   113a8:	075a      	lsls	r2, r3, #29
   113aa:	d5e8      	bpl.n	1137e <ull_filter_lll_rl_addr_allowed+0x3a>
   113ac:	f3c3 1000 	ubfx	r0, r3, #4, #1
   113b0:	e7e5      	b.n	1137e <ull_filter_lll_rl_addr_allowed+0x3a>
   113b2:	bf00      	nop
   113b4:	20001f7c 	.word	0x20001f7c

000113b8 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   113b8:	4b02      	ldr	r3, [pc, #8]	; (113c4 <ull_filter_lll_rl_enabled+0xc>)
   113ba:	7818      	ldrb	r0, [r3, #0]
}
   113bc:	3800      	subs	r0, #0
   113be:	bf18      	it	ne
   113c0:	2001      	movne	r0, #1
   113c2:	4770      	bx	lr
   113c4:	200027b7 	.word	0x200027b7

000113c8 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   113c8:	4668      	mov	r0, sp
   113ca:	f020 0107 	bic.w	r1, r0, #7
   113ce:	468d      	mov	sp, r1
   113d0:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   113d2:	f002 f893 	bl	134fc <isr_radio>

	ISR_DIRECT_PM();
   113d6:	f7f1 fe9d 	bl	3114 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   113da:	f7f1 ff8d 	bl	32f8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   113de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   113e2:	4685      	mov	sp, r0
   113e4:	4770      	bx	lr
   113e6:	bf00      	nop

000113e8 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   113e8:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   113ea:	4b09      	ldr	r3, [pc, #36]	; (11410 <rtc0_nrf5_isr+0x28>)
   113ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   113f0:	b93a      	cbnz	r2, 11402 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   113f2:	2001      	movs	r0, #1
   113f4:	f7f5 fd10 	bl	6e18 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   113f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   113fc:	2002      	movs	r0, #2
   113fe:	f7f5 bd0b 	b.w	6e18 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   11402:	2000      	movs	r0, #0
   11404:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   11408:	f7f6 fd76 	bl	7ef8 <ticker_trigger>
   1140c:	e7f1      	b.n	113f2 <rtc0_nrf5_isr+0xa>
   1140e:	bf00      	nop
   11410:	4000b000 	.word	0x4000b000

00011414 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   11414:	2000      	movs	r0, #0
   11416:	f7f5 bcff 	b.w	6e18 <mayfly_run>
   1141a:	bf00      	nop

0001141c <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1141c:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1141e:	4b0e      	ldr	r3, [pc, #56]	; (11458 <ticker_stop_op_cb+0x3c>)
   11420:	4c0e      	ldr	r4, [pc, #56]	; (1145c <ticker_stop_op_cb+0x40>)
   11422:	781a      	ldrb	r2, [r3, #0]
   11424:	7823      	ldrb	r3, [r4, #0]
   11426:	429a      	cmp	r2, r3
   11428:	d006      	beq.n	11438 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1142a:	490d      	ldr	r1, [pc, #52]	; (11460 <ticker_stop_op_cb+0x44>)
   1142c:	4a0d      	ldr	r2, [pc, #52]	; (11464 <ticker_stop_op_cb+0x48>)
   1142e:	7809      	ldrb	r1, [r1, #0]
   11430:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   11432:	3301      	adds	r3, #1
   11434:	7023      	strb	r3, [r4, #0]
}
   11436:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   11438:	4a0b      	ldr	r2, [pc, #44]	; (11468 <ticker_stop_op_cb+0x4c>)
   1143a:	490c      	ldr	r1, [pc, #48]	; (1146c <ticker_stop_op_cb+0x50>)
   1143c:	480c      	ldr	r0, [pc, #48]	; (11470 <ticker_stop_op_cb+0x54>)
   1143e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   11442:	f006 fe91 	bl	18168 <printk>
   11446:	4040      	eors	r0, r0
   11448:	f380 8811 	msr	BASEPRI, r0
   1144c:	f04f 0003 	mov.w	r0, #3
   11450:	df02      	svc	2
	preempt_stop_ack++;
   11452:	7823      	ldrb	r3, [r4, #0]
   11454:	e7e9      	b.n	1142a <ticker_stop_op_cb+0xe>
   11456:	bf00      	nop
   11458:	200027bd 	.word	0x200027bd
   1145c:	200027bc 	.word	0x200027bc
   11460:	200027b8 	.word	0x200027b8
   11464:	200027b9 	.word	0x200027b9
   11468:	0001d6d8 	.word	0x0001d6d8
   1146c:	0001d720 	.word	0x0001d720
   11470:	0001cde4 	.word	0x0001cde4

00011474 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   11474:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11476:	b9f8      	cbnz	r0, 114b8 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   11478:	4b1e      	ldr	r3, [pc, #120]	; (114f4 <ticker_start_op_cb+0x80>)
   1147a:	4d1f      	ldr	r5, [pc, #124]	; (114f8 <ticker_start_op_cb+0x84>)
   1147c:	781a      	ldrb	r2, [r3, #0]
   1147e:	782b      	ldrb	r3, [r5, #0]
   11480:	429a      	cmp	r2, r3
   11482:	d027      	beq.n	114d4 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   11484:	4a1d      	ldr	r2, [pc, #116]	; (114fc <ticker_start_op_cb+0x88>)
   11486:	4c1e      	ldr	r4, [pc, #120]	; (11500 <ticker_start_op_cb+0x8c>)
   11488:	7812      	ldrb	r2, [r2, #0]
   1148a:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   1148c:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   1148e:	4291      	cmp	r1, r2
	preempt_start_ack++;
   11490:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   11492:	b2d3      	uxtb	r3, r2
   11494:	d00d      	beq.n	114b2 <ticker_start_op_cb+0x3e>
   11496:	4a1b      	ldr	r2, [pc, #108]	; (11504 <ticker_start_op_cb+0x90>)
   11498:	491b      	ldr	r1, [pc, #108]	; (11508 <ticker_start_op_cb+0x94>)
   1149a:	481c      	ldr	r0, [pc, #112]	; (1150c <ticker_start_op_cb+0x98>)
   1149c:	f240 3306 	movw	r3, #774	; 0x306
   114a0:	f006 fe62 	bl	18168 <printk>
   114a4:	4040      	eors	r0, r0
   114a6:	f380 8811 	msr	BASEPRI, r0
   114aa:	f04f 0003 	mov.w	r0, #3
   114ae:	df02      	svc	2
	preempt_req++;
   114b0:	7823      	ldrb	r3, [r4, #0]
   114b2:	3301      	adds	r3, #1
   114b4:	7023      	strb	r3, [r4, #0]
}
   114b6:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   114b8:	4a12      	ldr	r2, [pc, #72]	; (11504 <ticker_start_op_cb+0x90>)
   114ba:	4915      	ldr	r1, [pc, #84]	; (11510 <ticker_start_op_cb+0x9c>)
   114bc:	4813      	ldr	r0, [pc, #76]	; (1150c <ticker_start_op_cb+0x98>)
   114be:	f240 3301 	movw	r3, #769	; 0x301
   114c2:	f006 fe51 	bl	18168 <printk>
   114c6:	4040      	eors	r0, r0
   114c8:	f380 8811 	msr	BASEPRI, r0
   114cc:	f04f 0003 	mov.w	r0, #3
   114d0:	df02      	svc	2
   114d2:	e7d1      	b.n	11478 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   114d4:	4a0b      	ldr	r2, [pc, #44]	; (11504 <ticker_start_op_cb+0x90>)
   114d6:	490f      	ldr	r1, [pc, #60]	; (11514 <ticker_start_op_cb+0xa0>)
   114d8:	480c      	ldr	r0, [pc, #48]	; (1150c <ticker_start_op_cb+0x98>)
   114da:	f240 3303 	movw	r3, #771	; 0x303
   114de:	f006 fe43 	bl	18168 <printk>
   114e2:	4040      	eors	r0, r0
   114e4:	f380 8811 	msr	BASEPRI, r0
   114e8:	f04f 0003 	mov.w	r0, #3
   114ec:	df02      	svc	2
	preempt_start_ack++;
   114ee:	782b      	ldrb	r3, [r5, #0]
   114f0:	e7c8      	b.n	11484 <ticker_start_op_cb+0x10>
   114f2:	bf00      	nop
   114f4:	200027bb 	.word	0x200027bb
   114f8:	200027ba 	.word	0x200027ba
   114fc:	200027b8 	.word	0x200027b8
   11500:	200027b9 	.word	0x200027b9
   11504:	0001d6d8 	.word	0x0001d6d8
   11508:	0001d770 	.word	0x0001d770
   1150c:	0001cde4 	.word	0x0001cde4
   11510:	0001d2a4 	.word	0x0001d2a4
   11514:	0001d748 	.word	0x0001d748

00011518 <isr_race>:
	radio_status_reset();
   11518:	f002 b904 	b.w	13724 <radio_status_reset>

0001151c <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1151c:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1151e:	4a18      	ldr	r2, [pc, #96]	; (11580 <preempt_ticker_cb+0x64>)
   11520:	4c18      	ldr	r4, [pc, #96]	; (11584 <preempt_ticker_cb+0x68>)
   11522:	7812      	ldrb	r2, [r2, #0]
   11524:	7823      	ldrb	r3, [r4, #0]
   11526:	429a      	cmp	r2, r3
   11528:	d01b      	beq.n	11562 <preempt_ticker_cb+0x46>
	preempt_ack++;
   1152a:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   1152c:	4b16      	ldr	r3, [pc, #88]	; (11588 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1152e:	3101      	adds	r1, #1
   11530:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   11532:	2200      	movs	r2, #0
	preempt_ack++;
   11534:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   11536:	9903      	ldr	r1, [sp, #12]
   11538:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1153a:	2001      	movs	r0, #1
   1153c:	4611      	mov	r1, r2
   1153e:	f7f5 fc13 	bl	6d68 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   11542:	b900      	cbnz	r0, 11546 <preempt_ticker_cb+0x2a>
}
   11544:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   11546:	4a11      	ldr	r2, [pc, #68]	; (1158c <preempt_ticker_cb+0x70>)
   11548:	4911      	ldr	r1, [pc, #68]	; (11590 <preempt_ticker_cb+0x74>)
   1154a:	4812      	ldr	r0, [pc, #72]	; (11594 <preempt_ticker_cb+0x78>)
   1154c:	f240 336d 	movw	r3, #877	; 0x36d
   11550:	f006 fe0a 	bl	18168 <printk>
   11554:	4040      	eors	r0, r0
   11556:	f380 8811 	msr	BASEPRI, r0
   1155a:	f04f 0003 	mov.w	r0, #3
   1155e:	df02      	svc	2
}
   11560:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   11562:	4a0a      	ldr	r2, [pc, #40]	; (1158c <preempt_ticker_cb+0x70>)
   11564:	490c      	ldr	r1, [pc, #48]	; (11598 <preempt_ticker_cb+0x7c>)
   11566:	480b      	ldr	r0, [pc, #44]	; (11594 <preempt_ticker_cb+0x78>)
   11568:	f240 3367 	movw	r3, #871	; 0x367
   1156c:	f006 fdfc 	bl	18168 <printk>
   11570:	4040      	eors	r0, r0
   11572:	f380 8811 	msr	BASEPRI, r0
   11576:	f04f 0003 	mov.w	r0, #3
   1157a:	df02      	svc	2
   1157c:	e7d5      	b.n	1152a <preempt_ticker_cb+0xe>
   1157e:	bf00      	nop
   11580:	200027b9 	.word	0x200027b9
   11584:	200027b8 	.word	0x200027b8
   11588:	200005c8 	.word	0x200005c8
   1158c:	0001d6d8 	.word	0x0001d6d8
   11590:	0001d080 	.word	0x0001d080
   11594:	0001cde4 	.word	0x0001cde4
   11598:	0001d78c 	.word	0x0001d78c

0001159c <preempt_ticker_stop>:
{
   1159c:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   1159e:	4917      	ldr	r1, [pc, #92]	; (115fc <preempt_ticker_stop+0x60>)
   115a0:	4a17      	ldr	r2, [pc, #92]	; (11600 <preempt_ticker_stop+0x64>)
   115a2:	780b      	ldrb	r3, [r1, #0]
   115a4:	7812      	ldrb	r2, [r2, #0]
   115a6:	429a      	cmp	r2, r3
{
   115a8:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   115aa:	d122      	bne.n	115f2 <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   115ac:	4b15      	ldr	r3, [pc, #84]	; (11604 <preempt_ticker_stop+0x68>)
   115ae:	4a16      	ldr	r2, [pc, #88]	; (11608 <preempt_ticker_stop+0x6c>)
   115b0:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   115b2:	7812      	ldrb	r2, [r2, #0]
   115b4:	429a      	cmp	r2, r3
   115b6:	d01c      	beq.n	115f2 <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   115b8:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   115ba:	4b14      	ldr	r3, [pc, #80]	; (1160c <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   115bc:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   115be:	2200      	movs	r2, #0
	preempt_stop_req++;
   115c0:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   115c2:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   115c4:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   115c6:	4611      	mov	r1, r2
   115c8:	4610      	mov	r0, r2
   115ca:	f7f6 fd8d 	bl	80e8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   115ce:	4604      	mov	r4, r0
   115d0:	b178      	cbz	r0, 115f2 <preempt_ticker_stop+0x56>
   115d2:	2802      	cmp	r0, #2
   115d4:	d00e      	beq.n	115f4 <preempt_ticker_stop+0x58>
   115d6:	4a0e      	ldr	r2, [pc, #56]	; (11610 <preempt_ticker_stop+0x74>)
   115d8:	490e      	ldr	r1, [pc, #56]	; (11614 <preempt_ticker_stop+0x78>)
   115da:	480f      	ldr	r0, [pc, #60]	; (11618 <preempt_ticker_stop+0x7c>)
   115dc:	f240 3359 	movw	r3, #857	; 0x359
   115e0:	f006 fdc2 	bl	18168 <printk>
   115e4:	4040      	eors	r0, r0
   115e6:	f380 8811 	msr	BASEPRI, r0
   115ea:	f04f 0003 	mov.w	r0, #3
   115ee:	df02      	svc	2
   115f0:	e000      	b.n	115f4 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   115f2:	2400      	movs	r4, #0
}
   115f4:	4620      	mov	r0, r4
   115f6:	b002      	add	sp, #8
   115f8:	bd10      	pop	{r4, pc}
   115fa:	bf00      	nop
   115fc:	200027bd 	.word	0x200027bd
   11600:	200027bc 	.word	0x200027bc
   11604:	200027b8 	.word	0x200027b8
   11608:	200027b9 	.word	0x200027b9
   1160c:	0001141d 	.word	0x0001141d
   11610:	0001d6d8 	.word	0x0001d6d8
   11614:	0001d154 	.word	0x0001d154
   11618:	0001cde4 	.word	0x0001cde4

0001161c <preempt_ticker_start>:
{
   1161c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   11620:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   11622:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   11626:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   11628:	4b2a      	ldr	r3, [pc, #168]	; (116d4 <preempt_ticker_start+0xb8>)
   1162a:	4f2b      	ldr	r7, [pc, #172]	; (116d8 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   1162c:	68d6      	ldr	r6, [r2, #12]
{
   1162e:	460d      	mov	r5, r1
   11630:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   11632:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   11634:	6890      	ldr	r0, [r2, #8]
   11636:	6853      	ldr	r3, [r2, #4]
   11638:	4298      	cmp	r0, r3
   1163a:	bf2c      	ite	cs
   1163c:	ebc6 0600 	rsbcs	r6, r6, r0
   11640:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   11644:	783b      	ldrb	r3, [r7, #0]
   11646:	4299      	cmp	r1, r3
{
   11648:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1164a:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1164e:	d033      	beq.n	116b8 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   11650:	2c00      	cmp	r4, #0
   11652:	d03a      	beq.n	116ca <preempt_ticker_start+0xae>
   11654:	7f23      	ldrb	r3, [r4, #28]
   11656:	079b      	lsls	r3, r3, #30
   11658:	d437      	bmi.n	116ca <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1165a:	f8df a080 	ldr.w	sl, [pc, #128]	; 116dc <preempt_ticker_start+0xc0>
   1165e:	f8da 0000 	ldr.w	r0, [sl]
   11662:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   11666:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   1166a:	d022      	beq.n	116b2 <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   1166c:	f7ff ff96 	bl	1159c <preempt_ticker_stop>
		prev->is_aborted = 1U;
   11670:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   11672:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   11674:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   11678:	f043 0302 	orr.w	r3, r3, #2
   1167c:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1167e:	4620      	mov	r0, r4
   11680:	69a3      	ldr	r3, [r4, #24]
   11682:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11684:	4b16      	ldr	r3, [pc, #88]	; (116e0 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   11686:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11688:	9600      	str	r6, [sp, #0]
   1168a:	e9cd 3507 	strd	r3, r5, [sp, #28]
   1168e:	4b15      	ldr	r3, [pc, #84]	; (116e4 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   11690:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11694:	2200      	movs	r2, #0
	preempt_start_req++;
   11696:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   11698:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   1169c:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1169e:	e9cd 2203 	strd	r2, r2, [sp, #12]
   116a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   116a6:	4643      	mov	r3, r8
   116a8:	4611      	mov	r1, r2
   116aa:	4610      	mov	r0, r2
	preempt_start_req++;
   116ac:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   116ae:	f7f6 fc91 	bl	7fd4 <ticker_start>
}
   116b2:	b00a      	add	sp, #40	; 0x28
   116b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   116b8:	4b0b      	ldr	r3, [pc, #44]	; (116e8 <preempt_ticker_start+0xcc>)
   116ba:	4a0c      	ldr	r2, [pc, #48]	; (116ec <preempt_ticker_start+0xd0>)
   116bc:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   116be:	7812      	ldrb	r2, [r2, #0]
   116c0:	429a      	cmp	r2, r3
   116c2:	d1c5      	bne.n	11650 <preempt_ticker_start+0x34>
   116c4:	f8df a014 	ldr.w	sl, [pc, #20]	; 116dc <preempt_ticker_start+0xc0>
   116c8:	e7dc      	b.n	11684 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   116ca:	2000      	movs	r0, #0
}
   116cc:	b00a      	add	sp, #40	; 0x28
   116ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   116d2:	bf00      	nop
   116d4:	200027ba 	.word	0x200027ba
   116d8:	200027bb 	.word	0x200027bb
   116dc:	2000210c 	.word	0x2000210c
   116e0:	00011475 	.word	0x00011475
   116e4:	0001151d 	.word	0x0001151d
   116e8:	200027b8 	.word	0x200027b8
   116ec:	200027b9 	.word	0x200027b9

000116f0 <preempt>:

static void preempt(void *param)
{
   116f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   116f2:	4e4b      	ldr	r6, [pc, #300]	; (11820 <preempt+0x130>)
   116f4:	68b3      	ldr	r3, [r6, #8]
{
   116f6:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   116f8:	b1b3      	cbz	r3, 11728 <preempt+0x38>
   116fa:	6833      	ldr	r3, [r6, #0]
   116fc:	b1a3      	cbz	r3, 11728 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   116fe:	23ff      	movs	r3, #255	; 0xff
   11700:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   11702:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   11706:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   1170a:	f7f8 ffc1 	bl	a690 <ull_prepare_dequeue_iter>
	if (!next) {
   1170e:	4601      	mov	r1, r0
   11710:	b150      	cbz	r0, 11728 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   11712:	7f0b      	ldrb	r3, [r1, #28]
   11714:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   11718:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1171c:	d006      	beq.n	1172c <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1171e:	f7f8 ffb7 	bl	a690 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   11722:	4601      	mov	r1, r0
   11724:	2800      	cmp	r0, #0
   11726:	d1f4      	bne.n	11712 <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   11728:	b009      	add	sp, #36	; 0x24
   1172a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   1172c:	428d      	cmp	r5, r1
   1172e:	d126      	bne.n	1177e <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   11730:	6873      	ldr	r3, [r6, #4]
   11732:	6831      	ldr	r1, [r6, #0]
   11734:	68e8      	ldr	r0, [r5, #12]
   11736:	aa03      	add	r2, sp, #12
   11738:	4798      	blx	r3
	if (!err) {
   1173a:	4607      	mov	r7, r0
   1173c:	b1b0      	cbz	r0, 1176c <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   1173e:	68b3      	ldr	r3, [r6, #8]
   11740:	6831      	ldr	r1, [r6, #0]
   11742:	4620      	mov	r0, r4
   11744:	4798      	blx	r3
	if (err == -EAGAIN) {
   11746:	f117 0f0b 	cmn.w	r7, #11
   1174a:	d02c      	beq.n	117a6 <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   1174c:	378c      	adds	r7, #140	; 0x8c
   1174e:	d0eb      	beq.n	11728 <preempt+0x38>
   11750:	4a34      	ldr	r2, [pc, #208]	; (11824 <preempt+0x134>)
   11752:	4935      	ldr	r1, [pc, #212]	; (11828 <preempt+0x138>)
   11754:	4835      	ldr	r0, [pc, #212]	; (1182c <preempt+0x13c>)
   11756:	f240 33c7 	movw	r3, #967	; 0x3c7
   1175a:	f006 fd05 	bl	18168 <printk>
   1175e:	4040      	eors	r0, r0
   11760:	f380 8811 	msr	BASEPRI, r0
   11764:	f04f 0003 	mov.w	r0, #3
   11768:	df02      	svc	2
   1176a:	e7dd      	b.n	11728 <preempt+0x38>
		next->is_aborted = 1;
   1176c:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1176e:	69aa      	ldr	r2, [r5, #24]
   11770:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   11772:	f043 0302 	orr.w	r3, r3, #2
   11776:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   11778:	4628      	mov	r0, r5
   1177a:	4790      	blx	r2
		return;
   1177c:	e7d4      	b.n	11728 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   1177e:	4620      	mov	r0, r4
   11780:	f7ff ff4c 	bl	1161c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11784:	f030 0302 	bics.w	r3, r0, #2
   11788:	d0ce      	beq.n	11728 <preempt+0x38>
   1178a:	4a26      	ldr	r2, [pc, #152]	; (11824 <preempt+0x134>)
   1178c:	4928      	ldr	r1, [pc, #160]	; (11830 <preempt+0x140>)
   1178e:	4827      	ldr	r0, [pc, #156]	; (1182c <preempt+0x13c>)
   11790:	f240 3393 	movw	r3, #915	; 0x393
   11794:	f006 fce8 	bl	18168 <printk>
   11798:	4040      	eors	r0, r0
   1179a:	f380 8811 	msr	BASEPRI, r0
   1179e:	f04f 0003 	mov.w	r0, #3
   117a2:	df02      	svc	2
   117a4:	e7c0      	b.n	11728 <preempt+0x38>
		iter_idx = UINT8_MAX;
   117a6:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   117a8:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   117ac:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   117b0:	f7f8 ff6e 	bl	a690 <ull_prepare_dequeue_iter>
		while (iter) {
   117b4:	b928      	cbnz	r0, 117c2 <preempt+0xd2>
   117b6:	e013      	b.n	117e0 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   117b8:	f10d 000b 	add.w	r0, sp, #11
   117bc:	f7f8 ff68 	bl	a690 <ull_prepare_dequeue_iter>
		while (iter) {
   117c0:	b170      	cbz	r0, 117e0 <preempt+0xf0>
			if (!iter->is_aborted &&
   117c2:	7f03      	ldrb	r3, [r0, #28]
   117c4:	079a      	lsls	r2, r3, #30
   117c6:	d4f7      	bmi.n	117b8 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   117c8:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   117ca:	6831      	ldr	r1, [r6, #0]
   117cc:	4291      	cmp	r1, r2
   117ce:	d1f3      	bne.n	117b8 <preempt+0xc8>
				iter->is_aborted = 1;
   117d0:	f043 0302 	orr.w	r3, r3, #2
   117d4:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   117d6:	6983      	ldr	r3, [r0, #24]
   117d8:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   117da:	f88d 400b 	strb.w	r4, [sp, #11]
   117de:	e7eb      	b.n	117b8 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   117e0:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   117e2:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   117e4:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   117e6:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   117e8:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   117ec:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   117ee:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   117f0:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   117f2:	9b03      	ldr	r3, [sp, #12]
   117f4:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   117f8:	aa04      	add	r2, sp, #16
   117fa:	f7f8 ff0b 	bl	a614 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   117fe:	2800      	cmp	r0, #0
   11800:	d192      	bne.n	11728 <preempt+0x38>
   11802:	4a08      	ldr	r2, [pc, #32]	; (11824 <preempt+0x134>)
   11804:	490b      	ldr	r1, [pc, #44]	; (11834 <preempt+0x144>)
   11806:	4809      	ldr	r0, [pc, #36]	; (1182c <preempt+0x13c>)
   11808:	f240 33c5 	movw	r3, #965	; 0x3c5
   1180c:	f006 fcac 	bl	18168 <printk>
   11810:	4040      	eors	r0, r0
   11812:	f380 8811 	msr	BASEPRI, r0
   11816:	f04f 0003 	mov.w	r0, #3
   1181a:	df02      	svc	2
   1181c:	e784      	b.n	11728 <preempt+0x38>
   1181e:	bf00      	nop
   11820:	200020f8 	.word	0x200020f8
   11824:	0001d6d8 	.word	0x0001d6d8
   11828:	0001d7b0 	.word	0x0001d7b0
   1182c:	0001cde4 	.word	0x0001cde4
   11830:	0001d154 	.word	0x0001d154
   11834:	0001d7a8 	.word	0x0001d7a8

00011838 <lll_init>:
{
   11838:	b510      	push	{r4, lr}
   1183a:	4816      	ldr	r0, [pc, #88]	; (11894 <lll_init+0x5c>)
   1183c:	f005 fac0 	bl	16dc0 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   11840:	4b15      	ldr	r3, [pc, #84]	; (11898 <lll_init+0x60>)
   11842:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   11844:	b310      	cbz	r0, 1188c <lll_init+0x54>
	event.curr.abort_cb = NULL;
   11846:	4b15      	ldr	r3, [pc, #84]	; (1189c <lll_init+0x64>)
   11848:	2400      	movs	r4, #0
   1184a:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1184c:	f000 fafa 	bl	11e44 <lll_clock_init>
	if (err < 0) {
   11850:	2800      	cmp	r0, #0
   11852:	db1a      	blt.n	1188a <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   11854:	4621      	mov	r1, r4
   11856:	2001      	movs	r0, #1
   11858:	4622      	mov	r2, r4
   1185a:	f7f1 fc43 	bl	30e4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1185e:	4622      	mov	r2, r4
   11860:	200b      	movs	r0, #11
   11862:	2101      	movs	r1, #1
   11864:	f7f1 fc3e 	bl	30e4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   11868:	4622      	mov	r2, r4
   1186a:	4621      	mov	r1, r4
   1186c:	2018      	movs	r0, #24
   1186e:	f7f1 fc39 	bl	30e4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   11872:	2001      	movs	r0, #1
   11874:	f7f1 fc04 	bl	3080 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   11878:	200b      	movs	r0, #11
   1187a:	f7f1 fc01 	bl	3080 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1187e:	2018      	movs	r0, #24
   11880:	f7f1 fbfe 	bl	3080 <arch_irq_enable>
	radio_setup();
   11884:	f001 fe6a 	bl	1355c <radio_setup>
	return 0;
   11888:	4620      	mov	r0, r4
}
   1188a:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1188c:	f06f 0012 	mvn.w	r0, #18
}
   11890:	bd10      	pop	{r4, pc}
   11892:	bf00      	nop
   11894:	0001d7bc 	.word	0x0001d7bc
   11898:	200020f4 	.word	0x200020f4
   1189c:	200020f8 	.word	0x200020f8

000118a0 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   118a0:	4a05      	ldr	r2, [pc, #20]	; (118b8 <lll_csrand_get+0x18>)
{
   118a2:	b410      	push	{r4}
   118a4:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   118a6:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   118a8:	6884      	ldr	r4, [r0, #8]
   118aa:	6824      	ldr	r4, [r4, #0]
   118ac:	b28a      	uxth	r2, r1
   118ae:	4619      	mov	r1, r3
   118b0:	4623      	mov	r3, r4
}
   118b2:	bc10      	pop	{r4}
   118b4:	4718      	bx	r3
   118b6:	bf00      	nop
   118b8:	200020f4 	.word	0x200020f4

000118bc <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   118bc:	4b08      	ldr	r3, [pc, #32]	; (118e0 <lll_csrand_isr_get+0x24>)
{
   118be:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   118c0:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   118c2:	68ab      	ldr	r3, [r5, #8]
   118c4:	685c      	ldr	r4, [r3, #4]
   118c6:	b13c      	cbz	r4, 118d8 <lll_csrand_isr_get+0x1c>
   118c8:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   118ca:	46a4      	mov	ip, r4
   118cc:	4601      	mov	r1, r0
   118ce:	b292      	uxth	r2, r2
   118d0:	4628      	mov	r0, r5
   118d2:	2300      	movs	r3, #0
}
   118d4:	bc30      	pop	{r4, r5}
   118d6:	4760      	bx	ip
   118d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   118dc:	bc30      	pop	{r4, r5}
   118de:	4770      	bx	lr
   118e0:	200020f4 	.word	0x200020f4

000118e4 <lll_rand_isr_get>:
   118e4:	4b08      	ldr	r3, [pc, #32]	; (11908 <lll_rand_isr_get+0x24>)
   118e6:	b430      	push	{r4, r5}
   118e8:	681d      	ldr	r5, [r3, #0]
   118ea:	68ab      	ldr	r3, [r5, #8]
   118ec:	685c      	ldr	r4, [r3, #4]
   118ee:	b13c      	cbz	r4, 11900 <lll_rand_isr_get+0x1c>
   118f0:	460a      	mov	r2, r1
   118f2:	46a4      	mov	ip, r4
   118f4:	4601      	mov	r1, r0
   118f6:	b292      	uxth	r2, r2
   118f8:	4628      	mov	r0, r5
   118fa:	2300      	movs	r3, #0
   118fc:	bc30      	pop	{r4, r5}
   118fe:	4760      	bx	ip
   11900:	f06f 0085 	mvn.w	r0, #133	; 0x85
   11904:	bc30      	pop	{r4, r5}
   11906:	4770      	bx	lr
   11908:	200020f4 	.word	0x200020f4

0001190c <lll_reset>:
}
   1190c:	2000      	movs	r0, #0
   1190e:	4770      	bx	lr

00011910 <lll_disable>:
{
   11910:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   11912:	4604      	mov	r4, r0
{
   11914:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   11916:	b378      	cbz	r0, 11978 <lll_disable+0x68>
   11918:	4b23      	ldr	r3, [pc, #140]	; (119a8 <lll_disable+0x98>)
   1191a:	681a      	ldr	r2, [r3, #0]
   1191c:	4282      	cmp	r2, r0
   1191e:	d025      	beq.n	1196c <lll_disable+0x5c>
		idx = UINT8_MAX;
   11920:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   11922:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   11926:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1192a:	f7f8 feb1 	bl	a690 <ull_prepare_dequeue_iter>
		while (next) {
   1192e:	b938      	cbnz	r0, 11940 <lll_disable+0x30>
   11930:	e01a      	b.n	11968 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   11932:	428c      	cmp	r4, r1
   11934:	d00a      	beq.n	1194c <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   11936:	f10d 0007 	add.w	r0, sp, #7
   1193a:	f7f8 fea9 	bl	a690 <ull_prepare_dequeue_iter>
		while (next) {
   1193e:	b198      	cbz	r0, 11968 <lll_disable+0x58>
			if (!next->is_aborted &&
   11940:	7f03      	ldrb	r3, [r0, #28]
   11942:	079b      	lsls	r3, r3, #30
   11944:	d4f7      	bmi.n	11936 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   11946:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   11948:	2c00      	cmp	r4, #0
   1194a:	d1f2      	bne.n	11932 <lll_disable+0x22>
				next->is_aborted = 1;
   1194c:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1194e:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   11950:	f043 0302 	orr.w	r3, r3, #2
   11954:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   11956:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   11958:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   1195c:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   11960:	f7f8 fe96 	bl	a690 <ull_prepare_dequeue_iter>
		while (next) {
   11964:	2800      	cmp	r0, #0
   11966:	d1eb      	bne.n	11940 <lll_disable+0x30>
}
   11968:	b003      	add	sp, #12
   1196a:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   1196c:	689b      	ldr	r3, [r3, #8]
   1196e:	b16b      	cbz	r3, 1198c <lll_disable+0x7c>
   11970:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   11972:	2000      	movs	r0, #0
   11974:	4798      	blx	r3
   11976:	e7d3      	b.n	11920 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   11978:	4a0b      	ldr	r2, [pc, #44]	; (119a8 <lll_disable+0x98>)
   1197a:	6893      	ldr	r3, [r2, #8]
   1197c:	2b00      	cmp	r3, #0
   1197e:	d0cf      	beq.n	11920 <lll_disable+0x10>
   11980:	6811      	ldr	r1, [r2, #0]
   11982:	2900      	cmp	r1, #0
   11984:	d0cc      	beq.n	11920 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   11986:	2000      	movs	r0, #0
   11988:	4798      	blx	r3
   1198a:	e7c9      	b.n	11920 <lll_disable+0x10>
			LL_ASSERT(!param);
   1198c:	4a07      	ldr	r2, [pc, #28]	; (119ac <lll_disable+0x9c>)
   1198e:	4908      	ldr	r1, [pc, #32]	; (119b0 <lll_disable+0xa0>)
   11990:	4808      	ldr	r0, [pc, #32]	; (119b4 <lll_disable+0xa4>)
   11992:	23fd      	movs	r3, #253	; 0xfd
   11994:	f006 fbe8 	bl	18168 <printk>
   11998:	4040      	eors	r0, r0
   1199a:	f380 8811 	msr	BASEPRI, r0
   1199e:	f04f 0003 	mov.w	r0, #3
   119a2:	df02      	svc	2
   119a4:	e7bc      	b.n	11920 <lll_disable+0x10>
   119a6:	bf00      	nop
   119a8:	200020f8 	.word	0x200020f8
   119ac:	0001d6d8 	.word	0x0001d6d8
   119b0:	0001d7c0 	.word	0x0001d7c0
   119b4:	0001cde4 	.word	0x0001cde4

000119b8 <lll_prepare_done>:
}
   119b8:	2000      	movs	r0, #0
   119ba:	4770      	bx	lr

000119bc <lll_done>:
{
   119bc:	b538      	push	{r3, r4, r5, lr}
   119be:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   119c0:	f7f8 fe58 	bl	a674 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   119c4:	b154      	cbz	r4, 119dc <lll_done+0x20>
   119c6:	b310      	cbz	r0, 11a0e <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   119c8:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   119ca:	2000      	movs	r0, #0
   119cc:	f7f8 fe80 	bl	a6d0 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   119d0:	4620      	mov	r0, r4
   119d2:	f7f8 fee1 	bl	a798 <ull_event_done>
	LL_ASSERT(evdone);
   119d6:	b158      	cbz	r0, 119f0 <lll_done+0x34>
}
   119d8:	2000      	movs	r0, #0
   119da:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   119dc:	4d1a      	ldr	r5, [pc, #104]	; (11a48 <lll_done+0x8c>)
   119de:	68ab      	ldr	r3, [r5, #8]
   119e0:	b31b      	cbz	r3, 11a2a <lll_done+0x6e>
		param = event.curr.param;
   119e2:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   119e4:	2300      	movs	r3, #0
   119e6:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   119e8:	602b      	str	r3, [r5, #0]
		if (param) {
   119ea:	2c00      	cmp	r4, #0
   119ec:	d1ec      	bne.n	119c8 <lll_done+0xc>
   119ee:	e7ec      	b.n	119ca <lll_done+0xe>
	LL_ASSERT(evdone);
   119f0:	4a16      	ldr	r2, [pc, #88]	; (11a4c <lll_done+0x90>)
   119f2:	4917      	ldr	r1, [pc, #92]	; (11a50 <lll_done+0x94>)
   119f4:	4817      	ldr	r0, [pc, #92]	; (11a54 <lll_done+0x98>)
   119f6:	f240 136d 	movw	r3, #365	; 0x16d
   119fa:	f006 fbb5 	bl	18168 <printk>
   119fe:	4040      	eors	r0, r0
   11a00:	f380 8811 	msr	BASEPRI, r0
   11a04:	f04f 0003 	mov.w	r0, #3
   11a08:	df02      	svc	2
}
   11a0a:	2000      	movs	r0, #0
   11a0c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   11a0e:	4a0f      	ldr	r2, [pc, #60]	; (11a4c <lll_done+0x90>)
   11a10:	4911      	ldr	r1, [pc, #68]	; (11a58 <lll_done+0x9c>)
   11a12:	4810      	ldr	r0, [pc, #64]	; (11a54 <lll_done+0x98>)
   11a14:	f240 1337 	movw	r3, #311	; 0x137
   11a18:	f006 fba6 	bl	18168 <printk>
   11a1c:	4040      	eors	r0, r0
   11a1e:	f380 8811 	msr	BASEPRI, r0
   11a22:	f04f 0003 	mov.w	r0, #3
   11a26:	df02      	svc	2
   11a28:	e7ce      	b.n	119c8 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   11a2a:	4a08      	ldr	r2, [pc, #32]	; (11a4c <lll_done+0x90>)
   11a2c:	490b      	ldr	r1, [pc, #44]	; (11a5c <lll_done+0xa0>)
   11a2e:	4809      	ldr	r0, [pc, #36]	; (11a54 <lll_done+0x98>)
   11a30:	f240 133d 	movw	r3, #317	; 0x13d
   11a34:	f006 fb98 	bl	18168 <printk>
   11a38:	4040      	eors	r0, r0
   11a3a:	f380 8811 	msr	BASEPRI, r0
   11a3e:	f04f 0003 	mov.w	r0, #3
   11a42:	df02      	svc	2
   11a44:	e7cd      	b.n	119e2 <lll_done+0x26>
   11a46:	bf00      	nop
   11a48:	200020f8 	.word	0x200020f8
   11a4c:	0001d6d8 	.word	0x0001d6d8
   11a50:	0001d7ec 	.word	0x0001d7ec
   11a54:	0001cde4 	.word	0x0001cde4
   11a58:	0001d7c8 	.word	0x0001d7c8
   11a5c:	0001d7d8 	.word	0x0001d7d8

00011a60 <lll_is_abort_cb>:
}
   11a60:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   11a64:	4770      	bx	lr
   11a66:	bf00      	nop

00011a68 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   11a68:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   11a6c:	2a00      	cmp	r2, #0
   11a6e:	db04      	blt.n	11a7a <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   11a70:	429a      	cmp	r2, r3
   11a72:	bf38      	it	cc
   11a74:	461a      	movcc	r2, r3
   11a76:	4610      	mov	r0, r2
}
   11a78:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   11a7a:	68c0      	ldr	r0, [r0, #12]
   11a7c:	4298      	cmp	r0, r3
   11a7e:	bf38      	it	cc
   11a80:	4618      	movcc	r0, r3
   11a82:	4770      	bx	lr

00011a84 <lll_preempt_calc>:
{
   11a84:	b510      	push	{r4, lr}
   11a86:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   11a88:	f7f6 fb70 	bl	816c <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   11a8c:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   11a8e:	0203      	lsls	r3, r0, #8
   11a90:	d405      	bmi.n	11a9e <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   11a92:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   11a94:	2809      	cmp	r0, #9
   11a96:	bf94      	ite	ls
   11a98:	2000      	movls	r0, #0
   11a9a:	2001      	movhi	r0, #1
}
   11a9c:	bd10      	pop	{r4, pc}
		return 0;
   11a9e:	2000      	movs	r0, #0
}
   11aa0:	bd10      	pop	{r4, pc}
   11aa2:	bf00      	nop

00011aa4 <lll_chan_set>:
	switch (chan) {
   11aa4:	2826      	cmp	r0, #38	; 0x26
{
   11aa6:	b510      	push	{r4, lr}
   11aa8:	4604      	mov	r4, r0
	switch (chan) {
   11aaa:	d01c      	beq.n	11ae6 <lll_chan_set+0x42>
   11aac:	2827      	cmp	r0, #39	; 0x27
   11aae:	d012      	beq.n	11ad6 <lll_chan_set+0x32>
   11ab0:	2825      	cmp	r0, #37	; 0x25
   11ab2:	d008      	beq.n	11ac6 <lll_chan_set+0x22>
		if (chan < 11) {
   11ab4:	280a      	cmp	r0, #10
   11ab6:	d91e      	bls.n	11af6 <lll_chan_set+0x52>
		} else if (chan < 40) {
   11ab8:	2827      	cmp	r0, #39	; 0x27
   11aba:	d821      	bhi.n	11b00 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   11abc:	3003      	adds	r0, #3
   11abe:	0040      	lsls	r0, r0, #1
   11ac0:	f001 fda8 	bl	13614 <radio_freq_chan_set>
   11ac4:	e002      	b.n	11acc <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   11ac6:	2002      	movs	r0, #2
   11ac8:	f001 fda4 	bl	13614 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   11acc:	4620      	mov	r0, r4
}
   11ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   11ad2:	f001 bda5 	b.w	13620 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   11ad6:	2050      	movs	r0, #80	; 0x50
   11ad8:	f001 fd9c 	bl	13614 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   11adc:	4620      	mov	r0, r4
}
   11ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   11ae2:	f001 bd9d 	b.w	13620 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   11ae6:	201a      	movs	r0, #26
   11ae8:	f001 fd94 	bl	13614 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   11aec:	4620      	mov	r0, r4
}
   11aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   11af2:	f001 bd95 	b.w	13620 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   11af6:	3002      	adds	r0, #2
   11af8:	0040      	lsls	r0, r0, #1
   11afa:	f001 fd8b 	bl	13614 <radio_freq_chan_set>
   11afe:	e7e5      	b.n	11acc <lll_chan_set+0x28>
			LL_ASSERT(0);
   11b00:	4a06      	ldr	r2, [pc, #24]	; (11b1c <lll_chan_set+0x78>)
   11b02:	4907      	ldr	r1, [pc, #28]	; (11b20 <lll_chan_set+0x7c>)
   11b04:	4807      	ldr	r0, [pc, #28]	; (11b24 <lll_chan_set+0x80>)
   11b06:	f44f 73ed 	mov.w	r3, #474	; 0x1da
   11b0a:	f006 fb2d 	bl	18168 <printk>
   11b0e:	4040      	eors	r0, r0
   11b10:	f380 8811 	msr	BASEPRI, r0
   11b14:	f04f 0003 	mov.w	r0, #3
   11b18:	df02      	svc	2
   11b1a:	e7d7      	b.n	11acc <lll_chan_set+0x28>
   11b1c:	0001d6d8 	.word	0x0001d6d8
   11b20:	0001ce44 	.word	0x0001ce44
   11b24:	0001cde4 	.word	0x0001cde4

00011b28 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   11b28:	f001 bdda 	b.w	136e0 <radio_rx_ready_delay_get>

00011b2c <lll_isr_tx_status_reset>:
{
   11b2c:	b508      	push	{r3, lr}
	radio_status_reset();
   11b2e:	f001 fdf9 	bl	13724 <radio_status_reset>
}
   11b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   11b36:	f001 bf4b 	b.w	139d0 <radio_tmr_status_reset>
   11b3a:	bf00      	nop

00011b3c <lll_isr_rx_status_reset>:
{
   11b3c:	b508      	push	{r3, lr}
	radio_status_reset();
   11b3e:	f001 fdf1 	bl	13724 <radio_status_reset>
	radio_tmr_status_reset();
   11b42:	f001 ff45 	bl	139d0 <radio_tmr_status_reset>
}
   11b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   11b4a:	f001 beed 	b.w	13928 <radio_rssi_status_reset>
   11b4e:	bf00      	nop

00011b50 <lll_isr_status_reset>:
{
   11b50:	b508      	push	{r3, lr}
	radio_status_reset();
   11b52:	f001 fde7 	bl	13724 <radio_status_reset>
	radio_tmr_status_reset();
   11b56:	f001 ff3b 	bl	139d0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   11b5a:	f001 ff21 	bl	139a0 <radio_filter_status_reset>
	radio_ar_status_reset();
   11b5e:	f002 f8f9 	bl	13d54 <radio_ar_status_reset>
}
   11b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   11b66:	f001 bedf 	b.w	13928 <radio_rssi_status_reset>
   11b6a:	bf00      	nop

00011b6c <lll_isr_cleanup>:
{
   11b6c:	b508      	push	{r3, lr}
   11b6e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   11b70:	4815      	ldr	r0, [pc, #84]	; (11bc8 <lll_isr_cleanup+0x5c>)
   11b72:	f001 fcd3 	bl	1351c <radio_isr_set>
	if (!radio_is_idle()) {
   11b76:	f001 fdf5 	bl	13764 <radio_is_idle>
   11b7a:	b150      	cbz	r0, 11b92 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   11b7c:	f001 ffcc 	bl	13b18 <radio_tmr_stop>
	err = lll_hfclock_off();
   11b80:	f000 f9a4 	bl	11ecc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   11b84:	2800      	cmp	r0, #0
   11b86:	db0c      	blt.n	11ba2 <lll_isr_cleanup+0x36>
}
   11b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   11b8c:	2000      	movs	r0, #0
   11b8e:	f7ff bf15 	b.w	119bc <lll_done>
		radio_disable();
   11b92:	f001 fdb3 	bl	136fc <radio_disable>
	radio_tmr_stop();
   11b96:	f001 ffbf 	bl	13b18 <radio_tmr_stop>
	err = lll_hfclock_off();
   11b9a:	f000 f997 	bl	11ecc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   11b9e:	2800      	cmp	r0, #0
   11ba0:	daf2      	bge.n	11b88 <lll_isr_cleanup+0x1c>
   11ba2:	4a0a      	ldr	r2, [pc, #40]	; (11bcc <lll_isr_cleanup+0x60>)
   11ba4:	490a      	ldr	r1, [pc, #40]	; (11bd0 <lll_isr_cleanup+0x64>)
   11ba6:	480b      	ldr	r0, [pc, #44]	; (11bd4 <lll_isr_cleanup+0x68>)
   11ba8:	f240 233d 	movw	r3, #573	; 0x23d
   11bac:	f006 fadc 	bl	18168 <printk>
   11bb0:	4040      	eors	r0, r0
   11bb2:	f380 8811 	msr	BASEPRI, r0
   11bb6:	f04f 0003 	mov.w	r0, #3
   11bba:	df02      	svc	2
	lll_done(NULL);
   11bbc:	2000      	movs	r0, #0
}
   11bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   11bc2:	f7ff befb 	b.w	119bc <lll_done>
   11bc6:	bf00      	nop
   11bc8:	00011519 	.word	0x00011519
   11bcc:	0001d6d8 	.word	0x0001d6d8
   11bd0:	0001d7f4 	.word	0x0001d7f4
   11bd4:	0001cde4 	.word	0x0001cde4

00011bd8 <lll_isr_abort>:
{
   11bd8:	b510      	push	{r4, lr}
   11bda:	4604      	mov	r4, r0
	radio_status_reset();
   11bdc:	f001 fda2 	bl	13724 <radio_status_reset>
	radio_tmr_status_reset();
   11be0:	f001 fef6 	bl	139d0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   11be4:	f001 fedc 	bl	139a0 <radio_filter_status_reset>
	radio_ar_status_reset();
   11be8:	f002 f8b4 	bl	13d54 <radio_ar_status_reset>
	radio_rssi_status_reset();
   11bec:	f001 fe9c 	bl	13928 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   11bf0:	4620      	mov	r0, r4
}
   11bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   11bf6:	f7ff bfb9 	b.w	11b6c <lll_isr_cleanup>
   11bfa:	bf00      	nop

00011bfc <lll_isr_early_abort>:
{
   11bfc:	b508      	push	{r3, lr}
   11bfe:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   11c00:	4813      	ldr	r0, [pc, #76]	; (11c50 <lll_isr_early_abort+0x54>)
   11c02:	f001 fc8b 	bl	1351c <radio_isr_set>
	if (!radio_is_idle()) {
   11c06:	f001 fdad 	bl	13764 <radio_is_idle>
   11c0a:	b140      	cbz	r0, 11c1e <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   11c0c:	f000 f95e 	bl	11ecc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   11c10:	2800      	cmp	r0, #0
   11c12:	db0a      	blt.n	11c2a <lll_isr_early_abort+0x2e>
}
   11c14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   11c18:	2000      	movs	r0, #0
   11c1a:	f7ff becf 	b.w	119bc <lll_done>
		radio_disable();
   11c1e:	f001 fd6d 	bl	136fc <radio_disable>
	err = lll_hfclock_off();
   11c22:	f000 f953 	bl	11ecc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   11c26:	2800      	cmp	r0, #0
   11c28:	daf4      	bge.n	11c14 <lll_isr_early_abort+0x18>
   11c2a:	4a0a      	ldr	r2, [pc, #40]	; (11c54 <lll_isr_early_abort+0x58>)
   11c2c:	490a      	ldr	r1, [pc, #40]	; (11c58 <lll_isr_early_abort+0x5c>)
   11c2e:	480b      	ldr	r0, [pc, #44]	; (11c5c <lll_isr_early_abort+0x60>)
   11c30:	f44f 7313 	mov.w	r3, #588	; 0x24c
   11c34:	f006 fa98 	bl	18168 <printk>
   11c38:	4040      	eors	r0, r0
   11c3a:	f380 8811 	msr	BASEPRI, r0
   11c3e:	f04f 0003 	mov.w	r0, #3
   11c42:	df02      	svc	2
	lll_done(NULL);
   11c44:	2000      	movs	r0, #0
}
   11c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   11c4a:	f7ff beb7 	b.w	119bc <lll_done>
   11c4e:	bf00      	nop
   11c50:	00011519 	.word	0x00011519
   11c54:	0001d6d8 	.word	0x0001d6d8
   11c58:	0001d7f4 	.word	0x0001d7f4
   11c5c:	0001cde4 	.word	0x0001cde4

00011c60 <lll_prepare_resolve>:
{
   11c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c64:	b084      	sub	sp, #16
   11c66:	4606      	mov	r6, r0
   11c68:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   11c6a:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   11c6e:	23ff      	movs	r3, #255	; 0xff
{
   11c70:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   11c74:	f88d 300f 	strb.w	r3, [sp, #15]
{
   11c78:	460f      	mov	r7, r1
   11c7a:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   11c7c:	f7f8 fd08 	bl	a690 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   11c80:	4604      	mov	r4, r0
   11c82:	b920      	cbnz	r0, 11c8e <lll_prepare_resolve+0x2e>
   11c84:	e032      	b.n	11cec <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   11c86:	f7f8 fd03 	bl	a690 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   11c8a:	4604      	mov	r4, r0
   11c8c:	b370      	cbz	r0, 11cec <lll_prepare_resolve+0x8c>
   11c8e:	f894 c01c 	ldrb.w	ip, [r4, #28]
   11c92:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   11c96:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   11c9a:	d1f4      	bne.n	11c86 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   11c9c:	f8df a130 	ldr.w	sl, [pc, #304]	; 11dd0 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   11ca0:	f8da 3008 	ldr.w	r3, [sl, #8]
   11ca4:	bb4b      	cbnz	r3, 11cfa <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   11ca6:	f1b9 0f00 	cmp.w	r9, #0
   11caa:	d048      	beq.n	11d3e <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   11cac:	f8cd 9000 	str.w	r9, [sp]
   11cb0:	4643      	mov	r3, r8
   11cb2:	462a      	mov	r2, r5
   11cb4:	4639      	mov	r1, r7
   11cb6:	4630      	mov	r0, r6
   11cb8:	f7f8 fcac 	bl	a614 <ull_prepare_enqueue>
		LL_ASSERT(next);
   11cbc:	b980      	cbnz	r0, 11ce0 <lll_prepare_resolve+0x80>
   11cbe:	4a45      	ldr	r2, [pc, #276]	; (11dd4 <lll_prepare_resolve+0x174>)
   11cc0:	4945      	ldr	r1, [pc, #276]	; (11dd8 <lll_prepare_resolve+0x178>)
   11cc2:	4846      	ldr	r0, [pc, #280]	; (11ddc <lll_prepare_resolve+0x17c>)
   11cc4:	f44f 7322 	mov.w	r3, #648	; 0x288
   11cc8:	f006 fa4e 	bl	18168 <printk>
   11ccc:	4040      	eors	r0, r0
   11cce:	f380 8811 	msr	BASEPRI, r0
   11cd2:	f04f 0003 	mov.w	r0, #3
   11cd6:	df02      	svc	2
   11cd8:	2000      	movs	r0, #0
		if (is_resume) {
   11cda:	f1b9 0f00 	cmp.w	r9, #0
   11cde:	d019      	beq.n	11d14 <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   11ce0:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   11ce4:	4620      	mov	r0, r4
   11ce6:	b004      	add	sp, #16
   11ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   11cec:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 11dd0 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   11cf0:	f8da 3008 	ldr.w	r3, [sl, #8]
   11cf4:	2b00      	cmp	r3, #0
   11cf6:	d031      	beq.n	11d5c <lll_prepare_resolve+0xfc>
   11cf8:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   11cfa:	f8cd 9000 	str.w	r9, [sp]
   11cfe:	4643      	mov	r3, r8
   11d00:	462a      	mov	r2, r5
   11d02:	4639      	mov	r1, r7
   11d04:	4630      	mov	r0, r6
   11d06:	f7f8 fc85 	bl	a614 <ull_prepare_enqueue>
		LL_ASSERT(next);
   11d0a:	2800      	cmp	r0, #0
   11d0c:	d0d7      	beq.n	11cbe <lll_prepare_resolve+0x5e>
		if (is_resume) {
   11d0e:	f1b9 0f00 	cmp.w	r9, #0
   11d12:	d1e5      	bne.n	11ce0 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   11d14:	4601      	mov	r1, r0
   11d16:	4620      	mov	r0, r4
   11d18:	f7ff fc80 	bl	1161c <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11d1c:	f030 0302 	bics.w	r3, r0, #2
   11d20:	d0de      	beq.n	11ce0 <lll_prepare_resolve+0x80>
   11d22:	4a2c      	ldr	r2, [pc, #176]	; (11dd4 <lll_prepare_resolve+0x174>)
   11d24:	492e      	ldr	r1, [pc, #184]	; (11de0 <lll_prepare_resolve+0x180>)
   11d26:	482d      	ldr	r0, [pc, #180]	; (11ddc <lll_prepare_resolve+0x17c>)
   11d28:	f240 2393 	movw	r3, #659	; 0x293
   11d2c:	f006 fa1c 	bl	18168 <printk>
   11d30:	4040      	eors	r0, r0
   11d32:	f380 8811 	msr	BASEPRI, r0
   11d36:	f04f 0003 	mov.w	r0, #3
   11d3a:	df02      	svc	2
   11d3c:	e7d0      	b.n	11ce0 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   11d3e:	42ac      	cmp	r4, r5
   11d40:	d00c      	beq.n	11d5c <lll_prepare_resolve+0xfc>
   11d42:	4a24      	ldr	r2, [pc, #144]	; (11dd4 <lll_prepare_resolve+0x174>)
   11d44:	4927      	ldr	r1, [pc, #156]	; (11de4 <lll_prepare_resolve+0x184>)
   11d46:	4825      	ldr	r0, [pc, #148]	; (11ddc <lll_prepare_resolve+0x17c>)
   11d48:	f240 23b9 	movw	r3, #697	; 0x2b9
   11d4c:	f006 fa0c 	bl	18168 <printk>
   11d50:	4040      	eors	r0, r0
   11d52:	f380 8811 	msr	BASEPRI, r0
   11d56:	f04f 0003 	mov.w	r0, #3
   11d5a:	df02      	svc	2
	event.curr.param = prepare_param->param;
   11d5c:	68eb      	ldr	r3, [r5, #12]
   11d5e:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   11d62:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   11d66:	4628      	mov	r0, r5
   11d68:	47c0      	blx	r8
   11d6a:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   11d6c:	f7ff fc16 	bl	1159c <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11d70:	f030 0302 	bics.w	r3, r0, #2
   11d74:	d11e      	bne.n	11db4 <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   11d76:	f10d 000f 	add.w	r0, sp, #15
   11d7a:	f7f8 fc89 	bl	a690 <ull_prepare_dequeue_iter>
		if (!p) {
   11d7e:	2800      	cmp	r0, #0
   11d80:	d0b0      	beq.n	11ce4 <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   11d82:	7f03      	ldrb	r3, [r0, #28]
   11d84:	f013 0303 	ands.w	r3, r3, #3
   11d88:	d1f5      	bne.n	11d76 <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   11d8a:	4601      	mov	r1, r0
   11d8c:	4618      	mov	r0, r3
   11d8e:	f7ff fc45 	bl	1161c <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11d92:	f030 0302 	bics.w	r3, r0, #2
   11d96:	d0a5      	beq.n	11ce4 <lll_prepare_resolve+0x84>
   11d98:	4a0e      	ldr	r2, [pc, #56]	; (11dd4 <lll_prepare_resolve+0x174>)
   11d9a:	4911      	ldr	r1, [pc, #68]	; (11de0 <lll_prepare_resolve+0x180>)
   11d9c:	480f      	ldr	r0, [pc, #60]	; (11ddc <lll_prepare_resolve+0x17c>)
   11d9e:	f240 23d3 	movw	r3, #723	; 0x2d3
   11da2:	f006 f9e1 	bl	18168 <printk>
   11da6:	4040      	eors	r0, r0
   11da8:	f380 8811 	msr	BASEPRI, r0
   11dac:	f04f 0003 	mov.w	r0, #3
   11db0:	df02      	svc	2
   11db2:	e797      	b.n	11ce4 <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   11db4:	4a07      	ldr	r2, [pc, #28]	; (11dd4 <lll_prepare_resolve+0x174>)
   11db6:	490a      	ldr	r1, [pc, #40]	; (11de0 <lll_prepare_resolve+0x180>)
   11db8:	4808      	ldr	r0, [pc, #32]	; (11ddc <lll_prepare_resolve+0x17c>)
   11dba:	f240 23c6 	movw	r3, #710	; 0x2c6
   11dbe:	f006 f9d3 	bl	18168 <printk>
   11dc2:	4040      	eors	r0, r0
   11dc4:	f380 8811 	msr	BASEPRI, r0
   11dc8:	f04f 0003 	mov.w	r0, #3
   11dcc:	df02      	svc	2
   11dce:	e7d2      	b.n	11d76 <lll_prepare_resolve+0x116>
   11dd0:	200020f8 	.word	0x200020f8
   11dd4:	0001d6d8 	.word	0x0001d6d8
   11dd8:	0001d800 	.word	0x0001d800
   11ddc:	0001cde4 	.word	0x0001cde4
   11de0:	0001d154 	.word	0x0001d154
   11de4:	0001d808 	.word	0x0001d808

00011de8 <clock_ready>:
	z_impl_k_sem_give(sem);
   11de8:	f101 0010 	add.w	r0, r1, #16
   11dec:	f005 ba42 	b.w	17274 <z_impl_k_sem_give>

00011df0 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   11df0:	b570      	push	{r4, r5, r6, lr}
   11df2:	4605      	mov	r5, r0
   11df4:	b08a      	sub	sp, #40	; 0x28
   11df6:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   11df8:	2201      	movs	r2, #1
   11dfa:	2100      	movs	r1, #0
   11dfc:	a804      	add	r0, sp, #16
   11dfe:	f00a f832 	bl	1be66 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   11e02:	4b0f      	ldr	r3, [pc, #60]	; (11e40 <blocking_on+0x50>)
   11e04:	9301      	str	r3, [sp, #4]
   11e06:	2600      	movs	r6, #0
   11e08:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   11e0a:	4669      	mov	r1, sp
   11e0c:	4628      	mov	r0, r5
   11e0e:	9603      	str	r6, [sp, #12]
   11e10:	9302      	str	r3, [sp, #8]
   11e12:	f006 fa25 	bl	18260 <onoff_request>
	if (err < 0) {
   11e16:	2800      	cmp	r0, #0
   11e18:	db10      	blt.n	11e3c <blocking_on+0x4c>
   11e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11e1e:	4631      	mov	r1, r6
   11e20:	f240 30e7 	movw	r0, #999	; 0x3e7
   11e24:	fbe4 0103 	umlal	r0, r1, r4, r3
   11e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11e2c:	2300      	movs	r3, #0
   11e2e:	f7ee fd25 	bl	87c <__aeabi_uldivmod>
   11e32:	4602      	mov	r2, r0
   11e34:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   11e36:	a804      	add	r0, sp, #16
   11e38:	f005 fa42 	bl	172c0 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   11e3c:	b00a      	add	sp, #40	; 0x28
   11e3e:	bd70      	pop	{r4, r5, r6, pc}
   11e40:	00011de9 	.word	0x00011de9

00011e44 <lll_clock_init>:

int lll_clock_init(void)
{
   11e44:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   11e46:	2001      	movs	r0, #1
   11e48:	f002 fbc6 	bl	145d8 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   11e4c:	4904      	ldr	r1, [pc, #16]	; (11e60 <lll_clock_init+0x1c>)
   11e4e:	2300      	movs	r3, #0
   11e50:	2401      	movs	r4, #1
   11e52:	608c      	str	r4, [r1, #8]
   11e54:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   11e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e5a:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   11e5c:	f006 ba00 	b.w	18260 <onoff_request>
   11e60:	20002114 	.word	0x20002114

00011e64 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   11e64:	4b0c      	ldr	r3, [pc, #48]	; (11e98 <lll_clock_wait+0x34>)
   11e66:	781a      	ldrb	r2, [r3, #0]
   11e68:	b10a      	cbz	r2, 11e6e <lll_clock_wait+0xa>
		return 0;
   11e6a:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   11e6c:	4770      	bx	lr
{
   11e6e:	b510      	push	{r4, lr}
	done = true;
   11e70:	2001      	movs	r0, #1
   11e72:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   11e74:	f002 fbb0 	bl	145d8 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   11e78:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   11e7c:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   11e7e:	f7ff ffb7 	bl	11df0 <blocking_on>
	if (err) {
   11e82:	b938      	cbnz	r0, 11e94 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   11e84:	4620      	mov	r0, r4
   11e86:	f006 fa34 	bl	182f2 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   11e8a:	2802      	cmp	r0, #2
		return 0;
   11e8c:	bf0c      	ite	eq
   11e8e:	2000      	moveq	r0, #0
		return -EIO;
   11e90:	f06f 0004 	mvnne.w	r0, #4
}
   11e94:	bd10      	pop	{r4, pc}
   11e96:	bf00      	nop
   11e98:	200027be 	.word	0x200027be

00011e9c <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   11e9c:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11e9e:	4b0a      	ldr	r3, [pc, #40]	; (11ec8 <lll_hfclock_on+0x2c>)
   11ea0:	f3bf 8f5b 	dmb	ish
   11ea4:	e853 2f00 	ldrex	r2, [r3]
   11ea8:	1c51      	adds	r1, r2, #1
   11eaa:	e843 1000 	strex	r0, r1, [r3]
   11eae:	2800      	cmp	r0, #0
   11eb0:	d1f8      	bne.n	11ea4 <lll_hfclock_on+0x8>
   11eb2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   11eb6:	2a00      	cmp	r2, #0
   11eb8:	dd01      	ble.n	11ebe <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   11eba:	2000      	movs	r0, #0
   11ebc:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   11ebe:	f002 fb93 	bl	145e8 <z_nrf_clock_bt_ctlr_hf_request>
}
   11ec2:	2000      	movs	r0, #0
   11ec4:	bd08      	pop	{r3, pc}
   11ec6:	bf00      	nop
   11ec8:	20002110 	.word	0x20002110

00011ecc <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   11ecc:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   11ece:	4b0d      	ldr	r3, [pc, #52]	; (11f04 <lll_hfclock_off+0x38>)
   11ed0:	681a      	ldr	r2, [r3, #0]
   11ed2:	2a00      	cmp	r2, #0
   11ed4:	dd12      	ble.n	11efc <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11ed6:	f3bf 8f5b 	dmb	ish
   11eda:	e853 2f00 	ldrex	r2, [r3]
   11ede:	1e51      	subs	r1, r2, #1
   11ee0:	e843 1000 	strex	r0, r1, [r3]
   11ee4:	2800      	cmp	r0, #0
   11ee6:	d1f8      	bne.n	11eda <lll_hfclock_off+0xe>
   11ee8:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   11eec:	2a01      	cmp	r2, #1
   11eee:	dd01      	ble.n	11ef4 <lll_hfclock_off+0x28>
		return 0;
   11ef0:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   11ef2:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   11ef4:	f002 fb8e 	bl	14614 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   11ef8:	2000      	movs	r0, #0
}
   11efa:	bd08      	pop	{r3, pc}
		return -EALREADY;
   11efc:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   11f00:	bd08      	pop	{r3, pc}
   11f02:	bf00      	nop
   11f04:	20002110 	.word	0x20002110

00011f08 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   11f08:	2032      	movs	r0, #50	; 0x32
   11f0a:	4770      	bx	lr

00011f0c <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   11f0c:	4b01      	ldr	r3, [pc, #4]	; (11f14 <lll_clock_ppm_get+0x8>)
}
   11f0e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   11f12:	4770      	bx	lr
   11f14:	0001d834 	.word	0x0001d834

00011f18 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   11f18:	b510      	push	{r4, lr}
   11f1a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   11f1c:	f7ff fe18 	bl	11b50 <lll_isr_status_reset>

	radio_filter_disable();
   11f20:	f001 fd34 	bl	1398c <radio_filter_disable>

	lll_isr_cleanup(param);
   11f24:	4620      	mov	r0, r4
}
   11f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   11f2a:	f7ff be1f 	b.w	11b6c <lll_isr_cleanup>
   11f2e:	bf00      	nop

00011f30 <isr_tx>:
{
   11f30:	b530      	push	{r4, r5, lr}
   11f32:	b083      	sub	sp, #12
   11f34:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   11f36:	f7ff fdf9 	bl	11b2c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   11f3a:	2096      	movs	r0, #150	; 0x96
   11f3c:	f001 fd58 	bl	139f0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   11f40:	2300      	movs	r3, #0
   11f42:	4618      	mov	r0, r3
   11f44:	461a      	mov	r2, r3
   11f46:	4619      	mov	r1, r3
   11f48:	f001 fc80 	bl	1384c <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   11f4c:	2001      	movs	r0, #1
   11f4e:	f7f8 fb15 	bl	a57c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   11f52:	4604      	mov	r4, r0
   11f54:	2800      	cmp	r0, #0
   11f56:	d043      	beq.n	11fe0 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   11f58:	f104 001c 	add.w	r0, r4, #28
   11f5c:	f001 fbb2 	bl	136c4 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   11f60:	f001 fbec 	bl	1373c <radio_is_ready>
   11f64:	b9e0      	cbnz	r0, 11fa0 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   11f66:	4825      	ldr	r0, [pc, #148]	; (11ffc <isr_tx+0xcc>)
   11f68:	4629      	mov	r1, r5
   11f6a:	f001 fad7 	bl	1351c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   11f6e:	f7ff fa23 	bl	113b8 <ull_filter_lll_rl_enabled>
   11f72:	bb50      	cbnz	r0, 11fca <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   11f74:	f001 fe24 	bl	13bc0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   11f78:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   11f7a:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   11f7c:	4608      	mov	r0, r1
   11f7e:	f001 fbb1 	bl	136e4 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   11f82:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   11f84:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   11f86:	4608      	mov	r0, r1
   11f88:	f001 fba8 	bl	136dc <radio_tx_chain_delay_get>
   11f8c:	442c      	add	r4, r5
   11f8e:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   11f90:	1a20      	subs	r0, r4, r0
   11f92:	f001 fdcd 	bl	13b30 <radio_tmr_hcto_configure>
}
   11f96:	b003      	add	sp, #12
   11f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   11f9c:	f001 be02 	b.w	13ba4 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   11fa0:	4a17      	ldr	r2, [pc, #92]	; (12000 <isr_tx+0xd0>)
   11fa2:	4918      	ldr	r1, [pc, #96]	; (12004 <isr_tx+0xd4>)
   11fa4:	4818      	ldr	r0, [pc, #96]	; (12008 <isr_tx+0xd8>)
   11fa6:	f240 4343 	movw	r3, #1091	; 0x443
   11faa:	f006 f8dd 	bl	18168 <printk>
   11fae:	4040      	eors	r0, r0
   11fb0:	f380 8811 	msr	BASEPRI, r0
   11fb4:	f04f 0003 	mov.w	r0, #3
   11fb8:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   11fba:	4810      	ldr	r0, [pc, #64]	; (11ffc <isr_tx+0xcc>)
   11fbc:	4629      	mov	r1, r5
   11fbe:	f001 faad 	bl	1351c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   11fc2:	f7ff f9f9 	bl	113b8 <ull_filter_lll_rl_enabled>
   11fc6:	2800      	cmp	r0, #0
   11fc8:	d0d4      	beq.n	11f74 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   11fca:	f10d 0007 	add.w	r0, sp, #7
   11fce:	f7ff f92d 	bl	1122c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   11fd2:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   11fd4:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   11fd6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   11fda:	f001 fe81 	bl	13ce0 <radio_ar_configure>
   11fde:	e7c9      	b.n	11f74 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   11fe0:	4a07      	ldr	r2, [pc, #28]	; (12000 <isr_tx+0xd0>)
   11fe2:	490a      	ldr	r1, [pc, #40]	; (1200c <isr_tx+0xdc>)
   11fe4:	4808      	ldr	r0, [pc, #32]	; (12008 <isr_tx+0xd8>)
   11fe6:	f240 433f 	movw	r3, #1087	; 0x43f
   11fea:	f006 f8bd 	bl	18168 <printk>
   11fee:	4040      	eors	r0, r0
   11ff0:	f380 8811 	msr	BASEPRI, r0
   11ff4:	f04f 0003 	mov.w	r0, #3
   11ff8:	df02      	svc	2
   11ffa:	e7ad      	b.n	11f58 <isr_tx+0x28>
   11ffc:	00012781 	.word	0x00012781
   12000:	0001d844 	.word	0x0001d844
   12004:	0001d898 	.word	0x0001d898
   12008:	0001cde4 	.word	0x0001cde4
   1200c:	0001d890 	.word	0x0001d890

00012010 <is_abort_cb>:
	if (next != curr) {
   12010:	4281      	cmp	r1, r0
{
   12012:	b508      	push	{r3, lr}
	if (next != curr) {
   12014:	d00e      	beq.n	12034 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   12016:	7a0b      	ldrb	r3, [r1, #8]
   12018:	07db      	lsls	r3, r3, #31
   1201a:	d402      	bmi.n	12022 <is_abort_cb+0x12>
			return -ECANCELED;
   1201c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   12020:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   12022:	4b13      	ldr	r3, [pc, #76]	; (12070 <is_abort_cb+0x60>)
   12024:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   12026:	f7ff ff39 	bl	11e9c <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1202a:	2800      	cmp	r0, #0
   1202c:	db0f      	blt.n	1204e <is_abort_cb+0x3e>
   1202e:	f06f 000a 	mvn.w	r0, #10
}
   12032:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   12034:	7b0b      	ldrb	r3, [r1, #12]
   12036:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1203a:	690b      	ldr	r3, [r1, #16]
   1203c:	781b      	ldrb	r3, [r3, #0]
   1203e:	f003 030f 	and.w	r3, r3, #15
		return 0;
   12042:	2b01      	cmp	r3, #1
   12044:	bf14      	ite	ne
   12046:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1204a:	2000      	moveq	r0, #0
}
   1204c:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1204e:	4a09      	ldr	r2, [pc, #36]	; (12074 <is_abort_cb+0x64>)
   12050:	4909      	ldr	r1, [pc, #36]	; (12078 <is_abort_cb+0x68>)
   12052:	480a      	ldr	r0, [pc, #40]	; (1207c <is_abort_cb+0x6c>)
   12054:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12058:	f006 f886 	bl	18168 <printk>
   1205c:	4040      	eors	r0, r0
   1205e:	f380 8811 	msr	BASEPRI, r0
   12062:	f04f 0003 	mov.w	r0, #3
   12066:	df02      	svc	2
   12068:	f06f 000a 	mvn.w	r0, #10
}
   1206c:	bd08      	pop	{r3, pc}
   1206e:	bf00      	nop
   12070:	0001259d 	.word	0x0001259d
   12074:	0001d844 	.word	0x0001d844
   12078:	0001d7f4 	.word	0x0001d7f4
   1207c:	0001cde4 	.word	0x0001cde4

00012080 <abort_cb>:
{
   12080:	b510      	push	{r4, lr}
	if (!prepare_param) {
   12082:	b1d8      	cbz	r0, 120bc <abort_cb+0x3c>
	err = lll_hfclock_off();
   12084:	460c      	mov	r4, r1
   12086:	f7ff ff21 	bl	11ecc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1208a:	2800      	cmp	r0, #0
   1208c:	db04      	blt.n	12098 <abort_cb+0x18>
	lll_done(param);
   1208e:	4620      	mov	r0, r4
}
   12090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   12094:	f7ff bc92 	b.w	119bc <lll_done>
	LL_ASSERT(err >= 0);
   12098:	4a0c      	ldr	r2, [pc, #48]	; (120cc <abort_cb+0x4c>)
   1209a:	490d      	ldr	r1, [pc, #52]	; (120d0 <abort_cb+0x50>)
   1209c:	480d      	ldr	r0, [pc, #52]	; (120d4 <abort_cb+0x54>)
   1209e:	f240 431e 	movw	r3, #1054	; 0x41e
   120a2:	f006 f861 	bl	18168 <printk>
   120a6:	4040      	eors	r0, r0
   120a8:	f380 8811 	msr	BASEPRI, r0
   120ac:	f04f 0003 	mov.w	r0, #3
   120b0:	df02      	svc	2
	lll_done(param);
   120b2:	4620      	mov	r0, r4
}
   120b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   120b8:	f7ff bc80 	b.w	119bc <lll_done>
		radio_isr_set(isr_abort, param);
   120bc:	4806      	ldr	r0, [pc, #24]	; (120d8 <abort_cb+0x58>)
   120be:	f001 fa2d 	bl	1351c <radio_isr_set>
}
   120c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   120c6:	f001 bb19 	b.w	136fc <radio_disable>
   120ca:	bf00      	nop
   120cc:	0001d844 	.word	0x0001d844
   120d0:	0001d7f4 	.word	0x0001d7f4
   120d4:	0001cde4 	.word	0x0001cde4
   120d8:	00011f19 	.word	0x00011f19

000120dc <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <lll_adv_init+0x24>)
   120de:	2204      	movs	r2, #4
{
   120e0:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   120e2:	1898      	adds	r0, r3, r2
   120e4:	2128      	movs	r1, #40	; 0x28
   120e6:	f7f4 fd37 	bl	6b58 <mem_init>
	MFIFO_INIT(pdu_free);
   120ea:	4b06      	ldr	r3, [pc, #24]	; (12104 <lll_adv_init+0x28>)
   120ec:	2400      	movs	r4, #0
   120ee:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   120f0:	2202      	movs	r2, #2
   120f2:	4621      	mov	r1, r4
   120f4:	4804      	ldr	r0, [pc, #16]	; (12108 <lll_adv_init+0x2c>)
   120f6:	f009 feb6 	bl	1be66 <z_impl_k_sem_init>
}
   120fa:	4620      	mov	r0, r4
   120fc:	bd10      	pop	{r4, pc}
   120fe:	bf00      	nop
   12100:	20002124 	.word	0x20002124
   12104:	200005d8 	.word	0x200005d8
   12108:	200021c8 	.word	0x200021c8

0001210c <lll_adv_reset>:
   1210c:	4b08      	ldr	r3, [pc, #32]	; (12130 <lll_adv_reset+0x24>)
   1210e:	2204      	movs	r2, #4
   12110:	b510      	push	{r4, lr}
   12112:	1898      	adds	r0, r3, r2
   12114:	2128      	movs	r1, #40	; 0x28
   12116:	f7f4 fd1f 	bl	6b58 <mem_init>
   1211a:	4b06      	ldr	r3, [pc, #24]	; (12134 <lll_adv_reset+0x28>)
   1211c:	2400      	movs	r4, #0
   1211e:	805c      	strh	r4, [r3, #2]
   12120:	2202      	movs	r2, #2
   12122:	4621      	mov	r1, r4
   12124:	4804      	ldr	r0, [pc, #16]	; (12138 <lll_adv_reset+0x2c>)
   12126:	f009 fe9e 	bl	1be66 <z_impl_k_sem_init>
   1212a:	4620      	mov	r0, r4
   1212c:	bd10      	pop	{r4, pc}
   1212e:	bf00      	nop
   12130:	20002124 	.word	0x20002124
   12134:	200005d8 	.word	0x200005d8
   12138:	200021c8 	.word	0x200021c8

0001213c <lll_adv_data_init>:
{
   1213c:	b510      	push	{r4, lr}
   1213e:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   12140:	4805      	ldr	r0, [pc, #20]	; (12158 <lll_adv_data_init+0x1c>)
   12142:	f7f4 fd39 	bl	6bb8 <mem_acquire>
	if (!p) {
   12146:	b120      	cbz	r0, 12152 <lll_adv_data_init+0x16>
   12148:	4603      	mov	r3, r0
	p->len = 0U;
   1214a:	2000      	movs	r0, #0
   1214c:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1214e:	6063      	str	r3, [r4, #4]
}
   12150:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   12152:	f06f 000b 	mvn.w	r0, #11
}
   12156:	bd10      	pop	{r4, pc}
   12158:	20002124 	.word	0x20002124

0001215c <lll_adv_data_reset>:
{
   1215c:	4603      	mov	r3, r0
	pdu->first = 0U;
   1215e:	2000      	movs	r0, #0
   12160:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   12162:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   12164:	6098      	str	r0, [r3, #8]
}
   12166:	4770      	bx	lr

00012168 <lll_adv_pdu_alloc_pdu_adv>:
{
   12168:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1216a:	4c35      	ldr	r4, [pc, #212]	; (12240 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   1216c:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1216e:	78e1      	ldrb	r1, [r4, #3]
   12170:	7823      	ldrb	r3, [r4, #0]
   12172:	4291      	cmp	r1, r2
   12174:	d003      	beq.n	1217e <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   12176:	fb02 4303 	mla	r3, r2, r3, r4
   1217a:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1217c:	b935      	cbnz	r5, 1218c <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   1217e:	4831      	ldr	r0, [pc, #196]	; (12244 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   12180:	f7f4 fd1a 	bl	6bb8 <mem_acquire>
	if (p) {
   12184:	4605      	mov	r5, r0
   12186:	b1a0      	cbz	r0, 121b2 <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   12188:	4628      	mov	r0, r5
   1218a:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   1218c:	482e      	ldr	r0, [pc, #184]	; (12248 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1218e:	2200      	movs	r2, #0
   12190:	2300      	movs	r3, #0
   12192:	f005 f895 	bl	172c0 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   12196:	bb40      	cbnz	r0, 121ea <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   12198:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1219a:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   1219c:	7861      	ldrb	r1, [r4, #1]
   1219e:	429a      	cmp	r2, r3
   121a0:	d0f2      	beq.n	12188 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   121a2:	3301      	adds	r3, #1
   121a4:	b2db      	uxtb	r3, r3
		_first = 0U;
   121a6:	4299      	cmp	r1, r3
   121a8:	bf08      	it	eq
   121aa:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   121ac:	70a3      	strb	r3, [r4, #2]
}
   121ae:	4628      	mov	r0, r5
   121b0:	bd38      	pop	{r3, r4, r5, pc}
   121b2:	4825      	ldr	r0, [pc, #148]	; (12248 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   121b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   121b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121bc:	f005 f880 	bl	172c0 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   121c0:	2800      	cmp	r0, #0
   121c2:	d12e      	bne.n	12222 <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   121c4:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   121c6:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   121c8:	7822      	ldrb	r2, [r4, #0]
   121ca:	7860      	ldrb	r0, [r4, #1]
   121cc:	4299      	cmp	r1, r3
   121ce:	d01a      	beq.n	12206 <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   121d0:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   121d4:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   121d6:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   121d8:	b2db      	uxtb	r3, r3
		_first = 0U;
   121da:	4298      	cmp	r0, r3
   121dc:	bf08      	it	eq
   121de:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   121e0:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   121e2:	b182      	cbz	r2, 12206 <lll_adv_pdu_alloc_pdu_adv+0x9e>
   121e4:	4615      	mov	r5, r2
}
   121e6:	4628      	mov	r0, r5
   121e8:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   121ea:	4a18      	ldr	r2, [pc, #96]	; (1224c <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   121ec:	4918      	ldr	r1, [pc, #96]	; (12250 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   121ee:	4819      	ldr	r0, [pc, #100]	; (12254 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   121f0:	f240 1397 	movw	r3, #407	; 0x197
   121f4:	f005 ffb8 	bl	18168 <printk>
   121f8:	4040      	eors	r0, r0
   121fa:	f380 8811 	msr	BASEPRI, r0
   121fe:	f04f 0003 	mov.w	r0, #3
   12202:	df02      	svc	2
   12204:	e7c8      	b.n	12198 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   12206:	4a11      	ldr	r2, [pc, #68]	; (1224c <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   12208:	4913      	ldr	r1, [pc, #76]	; (12258 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   1220a:	4812      	ldr	r0, [pc, #72]	; (12254 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1220c:	f240 13ad 	movw	r3, #429	; 0x1ad
   12210:	f005 ffaa 	bl	18168 <printk>
   12214:	4040      	eors	r0, r0
   12216:	f380 8811 	msr	BASEPRI, r0
   1221a:	f04f 0003 	mov.w	r0, #3
   1221e:	df02      	svc	2
   12220:	e7b2      	b.n	12188 <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   12222:	4a0a      	ldr	r2, [pc, #40]	; (1224c <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   12224:	490a      	ldr	r1, [pc, #40]	; (12250 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   12226:	480b      	ldr	r0, [pc, #44]	; (12254 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   12228:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   1222c:	f005 ff9c 	bl	18168 <printk>
   12230:	4040      	eors	r0, r0
   12232:	f380 8811 	msr	BASEPRI, r0
   12236:	f04f 0003 	mov.w	r0, #3
   1223a:	df02      	svc	2
   1223c:	e7c2      	b.n	121c4 <lll_adv_pdu_alloc_pdu_adv+0x5c>
   1223e:	bf00      	nop
   12240:	200005d8 	.word	0x200005d8
   12244:	20002124 	.word	0x20002124
   12248:	200021c8 	.word	0x200021c8
   1224c:	0001d844 	.word	0x0001d844
   12250:	0001cf84 	.word	0x0001cf84
   12254:	0001cde4 	.word	0x0001cde4
   12258:	0001d8ac 	.word	0x0001d8ac

0001225c <lll_adv_pdu_alloc>:
{
   1225c:	b510      	push	{r4, lr}
	first = pdu->first;
   1225e:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   12260:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   12262:	429a      	cmp	r2, r3
   12264:	d014      	beq.n	12290 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   12266:	b2d4      	uxtb	r4, r2
   12268:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1226a:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1226c:	4294      	cmp	r4, r2
   1226e:	d004      	beq.n	1227a <lll_adv_pdu_alloc+0x1e>
			last++;
   12270:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   12272:	7043      	strb	r3, [r0, #1]
			last++;
   12274:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   12276:	2b02      	cmp	r3, #2
   12278:	d00e      	beq.n	12298 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   1227a:	461c      	mov	r4, r3
	*idx = last;
   1227c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   12280:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   12282:	6860      	ldr	r0, [r4, #4]
	if (p) {
   12284:	b100      	cbz	r0, 12288 <lll_adv_pdu_alloc+0x2c>
}
   12286:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   12288:	f7ff ff6e 	bl	12168 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   1228c:	6060      	str	r0, [r4, #4]
}
   1228e:	bd10      	pop	{r4, pc}
		last++;
   12290:	3301      	adds	r3, #1
   12292:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   12294:	2b02      	cmp	r3, #2
   12296:	d1f0      	bne.n	1227a <lll_adv_pdu_alloc+0x1e>
{
   12298:	2400      	movs	r4, #0
			last = 0U;
   1229a:	4623      	mov	r3, r4
   1229c:	e7ee      	b.n	1227c <lll_adv_pdu_alloc+0x20>
   1229e:	bf00      	nop

000122a0 <lll_adv_pdu_latest_get>:
{
   122a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122a2:	4604      	mov	r4, r0
	first = pdu->first;
   122a4:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   122a6:	7840      	ldrb	r0, [r0, #1]
   122a8:	4298      	cmp	r0, r3
   122aa:	d027      	beq.n	122fc <lll_adv_pdu_latest_get+0x5c>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   122ac:	4a16      	ldr	r2, [pc, #88]	; (12308 <lll_adv_pdu_latest_get+0x68>)
   122ae:	460e      	mov	r6, r1
   122b0:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   122b2:	7857      	ldrb	r7, [r2, #1]
   122b4:	7890      	ldrb	r0, [r2, #2]
   122b6:	b2dd      	uxtb	r5, r3
	last = last + 1;
   122b8:	1c4b      	adds	r3, r1, #1
   122ba:	b2db      	uxtb	r3, r3
		last = 0U;
   122bc:	429f      	cmp	r7, r3
   122be:	bf08      	it	eq
   122c0:	2300      	moveq	r3, #0
	if (last == first) {
   122c2:	4298      	cmp	r0, r3
   122c4:	d01e      	beq.n	12304 <lll_adv_pdu_latest_get+0x64>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   122c6:	7810      	ldrb	r0, [r2, #0]
   122c8:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   122cc:	fb00 2101 	mla	r1, r0, r1, r2
		p = pdu->pdu[pdu_idx];
   122d0:	6878      	ldr	r0, [r7, #4]
   122d2:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   122d4:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   122d6:	480d      	ldr	r0, [pc, #52]	; (1230c <lll_adv_pdu_latest_get+0x6c>)
		first += 1U;
   122d8:	3501      	adds	r5, #1
   122da:	f004 ffcb 	bl	17274 <z_impl_k_sem_give>
   122de:	b2ed      	uxtb	r5, r5
		if (first == DOUBLE_BUFFER_SIZE) {
   122e0:	2d02      	cmp	r5, #2
   122e2:	bf08      	it	eq
   122e4:	2000      	moveq	r0, #0
		*is_modified = 1U;
   122e6:	f04f 0301 	mov.w	r3, #1
			first = 0U;
   122ea:	bf08      	it	eq
   122ec:	4605      	moveq	r5, r0
		pdu->first = first;
   122ee:	7025      	strb	r5, [r4, #0]
		*is_modified = 1U;
   122f0:	7033      	strb	r3, [r6, #0]
		pdu->pdu[pdu_idx] = NULL;
   122f2:	f04f 0300 	mov.w	r3, #0
	return (void *)pdu->pdu[first];
   122f6:	bf18      	it	ne
   122f8:	4628      	movne	r0, r5
		pdu->pdu[pdu_idx] = NULL;
   122fa:	607b      	str	r3, [r7, #4]
	return (void *)pdu->pdu[first];
   122fc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   12300:	6860      	ldr	r0, [r4, #4]
}
   12302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return NULL;
   12304:	2000      	movs	r0, #0
}
   12306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12308:	200005d8 	.word	0x200005d8
   1230c:	200021c8 	.word	0x200021c8

00012310 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   12310:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   12312:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   12314:	f3c3 1302 	ubfx	r3, r3, #4, #3
   12318:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1231a:	4604      	mov	r4, r0
   1231c:	fa93 f0a3 	rbit	r0, r3
   12320:	fab0 f080 	clz	r0, r0
   12324:	bf08      	it	eq
   12326:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1232a:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1232c:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   1232e:	d043      	beq.n	123b8 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   12330:	7a21      	ldrb	r1, [r4, #8]
   12332:	1e5a      	subs	r2, r3, #1
   12334:	4013      	ands	r3, r2
   12336:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   1233a:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1233e:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   12340:	f7ff fbb0 	bl	11aa4 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   12344:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   12346:	f10d 0107 	add.w	r1, sp, #7
   1234a:	f104 000c 	add.w	r0, r4, #12
   1234e:	f88d 3007 	strb.w	r3, [sp, #7]
   12352:	f7ff ffa5 	bl	122a0 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   12356:	4605      	mov	r5, r0
   12358:	2800      	cmp	r0, #0
   1235a:	d03e      	beq.n	123da <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   1235c:	4628      	mov	r0, r5
   1235e:	f001 f9b7 	bl	136d0 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   12362:	782b      	ldrb	r3, [r5, #0]
   12364:	f003 030f 	and.w	r3, r3, #15
   12368:	2b02      	cmp	r3, #2
   1236a:	d01d      	beq.n	123a8 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1236c:	f10d 0107 	add.w	r1, sp, #7
   12370:	f104 0018 	add.w	r0, r4, #24
   12374:	f7ff ff94 	bl	122a0 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   12378:	4606      	mov	r6, r0
   1237a:	2800      	cmp	r0, #0
   1237c:	d03b      	beq.n	123f6 <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1237e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12382:	b95b      	cbnz	r3, 1239c <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   12384:	4621      	mov	r1, r4
   12386:	4823      	ldr	r0, [pc, #140]	; (12414 <chan_prepare.isra.0+0x104>)
   12388:	f001 f8c8 	bl	1351c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1238c:	2096      	movs	r0, #150	; 0x96
   1238e:	f001 fb2f 	bl	139f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   12392:	2000      	movs	r0, #0
   12394:	f001 fa12 	bl	137bc <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   12398:	b002      	add	sp, #8
   1239a:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   1239c:	2206      	movs	r2, #6
   1239e:	1ca9      	adds	r1, r5, #2
   123a0:	1cb0      	adds	r0, r6, #2
   123a2:	f006 fd2d 	bl	18e00 <memcpy>
   123a6:	e7ed      	b.n	12384 <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   123a8:	481b      	ldr	r0, [pc, #108]	; (12418 <chan_prepare.isra.0+0x108>)
   123aa:	4621      	mov	r1, r4
   123ac:	f001 f8b6 	bl	1351c <radio_isr_set>
		radio_switch_complete_and_disable();
   123b0:	f001 faac 	bl	1390c <radio_switch_complete_and_disable>
}
   123b4:	b002      	add	sp, #8
   123b6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   123b8:	4a18      	ldr	r2, [pc, #96]	; (1241c <chan_prepare.isra.0+0x10c>)
   123ba:	4919      	ldr	r1, [pc, #100]	; (12420 <chan_prepare.isra.0+0x110>)
   123bc:	4819      	ldr	r0, [pc, #100]	; (12424 <chan_prepare.isra.0+0x114>)
   123be:	f240 5335 	movw	r3, #1333	; 0x535
   123c2:	f005 fed1 	bl	18168 <printk>
   123c6:	4040      	eors	r0, r0
   123c8:	f380 8811 	msr	BASEPRI, r0
   123cc:	f04f 0003 	mov.w	r0, #3
   123d0:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   123d2:	7a23      	ldrb	r3, [r4, #8]
   123d4:	f3c3 1302 	ubfx	r3, r3, #4, #3
   123d8:	e7aa      	b.n	12330 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   123da:	4a10      	ldr	r2, [pc, #64]	; (1241c <chan_prepare.isra.0+0x10c>)
   123dc:	4912      	ldr	r1, [pc, #72]	; (12428 <chan_prepare.isra.0+0x118>)
   123de:	4811      	ldr	r0, [pc, #68]	; (12424 <chan_prepare.isra.0+0x114>)
   123e0:	f240 533e 	movw	r3, #1342	; 0x53e
   123e4:	f005 fec0 	bl	18168 <printk>
   123e8:	4040      	eors	r0, r0
   123ea:	f380 8811 	msr	BASEPRI, r0
   123ee:	f04f 0003 	mov.w	r0, #3
   123f2:	df02      	svc	2
   123f4:	e7b2      	b.n	1235c <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   123f6:	4a09      	ldr	r2, [pc, #36]	; (1241c <chan_prepare.isra.0+0x10c>)
   123f8:	490c      	ldr	r1, [pc, #48]	; (1242c <chan_prepare.isra.0+0x11c>)
   123fa:	480a      	ldr	r0, [pc, #40]	; (12424 <chan_prepare.isra.0+0x114>)
   123fc:	f44f 63a9 	mov.w	r3, #1352	; 0x548
   12400:	f005 feb2 	bl	18168 <printk>
   12404:	4040      	eors	r0, r0
   12406:	f380 8811 	msr	BASEPRI, r0
   1240a:	f04f 0003 	mov.w	r0, #3
   1240e:	df02      	svc	2
   12410:	e7b5      	b.n	1237e <chan_prepare.isra.0+0x6e>
   12412:	bf00      	nop
   12414:	00011f31 	.word	0x00011f31
   12418:	00012431 	.word	0x00012431
   1241c:	0001d844 	.word	0x0001d844
   12420:	0001d8b0 	.word	0x0001d8b0
   12424:	0001cde4 	.word	0x0001cde4
   12428:	0001d8b8 	.word	0x0001d8b8
   1242c:	0001d8bc 	.word	0x0001d8bc

00012430 <isr_done>:
{
   12430:	b510      	push	{r4, lr}
   12432:	4604      	mov	r4, r0
	lll_isr_status_reset();
   12434:	f7ff fb8c 	bl	11b50 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   12438:	7a23      	ldrb	r3, [r4, #8]
   1243a:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1243e:	2a01      	cmp	r2, #1
   12440:	d105      	bne.n	1244e <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   12442:	f3c3 0242 	ubfx	r2, r3, #1, #3
   12446:	f362 1306 	bfi	r3, r2, #4, #3
   1244a:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   1244c:	b2db      	uxtb	r3, r3
   1244e:	f013 0f70 	tst.w	r3, #112	; 0x70
   12452:	d005      	beq.n	12460 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   12454:	6863      	ldr	r3, [r4, #4]
   12456:	b153      	cbz	r3, 1246e <isr_done+0x3e>
   12458:	f893 3020 	ldrb.w	r3, [r3, #32]
   1245c:	079b      	lsls	r3, r3, #30
   1245e:	d506      	bpl.n	1246e <isr_done+0x3e>
	radio_filter_disable();
   12460:	f001 fa94 	bl	1398c <radio_filter_disable>
	lll_isr_cleanup(param);
   12464:	4620      	mov	r0, r4
}
   12466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1246a:	f7ff bb7f 	b.w	11b6c <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1246e:	4620      	mov	r0, r4
   12470:	f7ff ff4e 	bl	12310 <chan_prepare.isra.0>
		radio_tx_enable();
   12474:	f001 f93c 	bl	136f0 <radio_tx_enable>
}
   12478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1247c:	f001 bb92 	b.w	13ba4 <radio_tmr_end_capture>

00012480 <prepare_cb>:
{
   12480:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   12482:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   12484:	6863      	ldr	r3, [r4, #4]
{
   12486:	b083      	sub	sp, #12
   12488:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   1248a:	2b00      	cmp	r3, #0
   1248c:	d16d      	bne.n	1256a <prepare_cb+0xea>
	radio_reset();
   1248e:	f001 f887 	bl	135a0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   12492:	2000      	movs	r0, #0
   12494:	f001 f8b8 	bl	13608 <radio_tx_power_set>
	radio_phy_set(0, 0);
   12498:	2100      	movs	r1, #0
   1249a:	4608      	mov	r0, r1
   1249c:	f001 f8a4 	bl	135e8 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   124a0:	2200      	movs	r2, #0
   124a2:	2125      	movs	r1, #37	; 0x25
   124a4:	2008      	movs	r0, #8
   124a6:	f001 f8e5 	bl	13674 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   124aa:	4b35      	ldr	r3, [pc, #212]	; (12580 <prepare_cb+0x100>)
   124ac:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   124ae:	a801      	add	r0, sp, #4
   124b0:	f001 f8c8 	bl	13644 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   124b4:	4933      	ldr	r1, [pc, #204]	; (12584 <prepare_cb+0x104>)
   124b6:	f240 605b 	movw	r0, #1627	; 0x65b
   124ba:	f001 f95d 	bl	13778 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   124be:	7a23      	ldrb	r3, [r4, #8]
   124c0:	f3c3 0242 	ubfx	r2, r3, #1, #3
   124c4:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   124c8:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   124ca:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   124cc:	f7ff ff20 	bl	12310 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   124d0:	f7fe ff72 	bl	113b8 <ull_filter_lll_rl_enabled>
   124d4:	bb98      	cbnz	r0, 1253e <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   124d6:	7a63      	ldrb	r3, [r4, #9]
   124d8:	079b      	lsls	r3, r3, #30
   124da:	d127      	bne.n	1252c <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   124dc:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   124de:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   124e0:	4638      	mov	r0, r7
   124e2:	f7ff fac1 	bl	11a68 <lll_event_offset_get>
   124e6:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   124e8:	686a      	ldr	r2, [r5, #4]
   124ea:	f106 0109 	add.w	r1, r6, #9
   124ee:	2001      	movs	r0, #1
   124f0:	f001 fa8a 	bl	13a08 <radio_tmr_start>
	radio_tmr_end_capture();
   124f4:	f001 fb56 	bl	13ba4 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   124f8:	4620      	mov	r0, r4
   124fa:	f7f8 ffa9 	bl	b450 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   124fe:	1c81      	adds	r1, r0, #2
   12500:	4632      	mov	r2, r6
   12502:	b2c9      	uxtb	r1, r1
   12504:	4638      	mov	r0, r7
   12506:	f7ff fabd 	bl	11a84 <lll_preempt_calc>
   1250a:	b930      	cbnz	r0, 1251a <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   1250c:	4620      	mov	r0, r4
   1250e:	f7ff fa53 	bl	119b8 <lll_prepare_done>
		LL_ASSERT(!ret);
   12512:	b9d0      	cbnz	r0, 1254a <prepare_cb+0xca>
}
   12514:	2000      	movs	r0, #0
   12516:	b003      	add	sp, #12
   12518:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1251a:	481b      	ldr	r0, [pc, #108]	; (12588 <prepare_cb+0x108>)
   1251c:	4621      	mov	r1, r4
   1251e:	f000 fffd 	bl	1351c <radio_isr_set>
		radio_disable();
   12522:	f001 f8eb 	bl	136fc <radio_disable>
}
   12526:	2000      	movs	r0, #0
   12528:	b003      	add	sp, #12
   1252a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   1252c:	2001      	movs	r0, #1
   1252e:	f7fe fbc5 	bl	10cbc <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   12532:	7841      	ldrb	r1, [r0, #1]
   12534:	1c82      	adds	r2, r0, #2
   12536:	7800      	ldrb	r0, [r0, #0]
   12538:	f001 fa08 	bl	1394c <radio_filter_configure>
   1253c:	e7ce      	b.n	124dc <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   1253e:	7a60      	ldrb	r0, [r4, #9]
   12540:	f010 0003 	ands.w	r0, r0, #3
   12544:	bf18      	it	ne
   12546:	2001      	movne	r0, #1
   12548:	e7f1      	b.n	1252e <prepare_cb+0xae>
		LL_ASSERT(!ret);
   1254a:	4a10      	ldr	r2, [pc, #64]	; (1258c <prepare_cb+0x10c>)
   1254c:	4910      	ldr	r1, [pc, #64]	; (12590 <prepare_cb+0x110>)
   1254e:	4811      	ldr	r0, [pc, #68]	; (12594 <prepare_cb+0x114>)
   12550:	f240 33cf 	movw	r3, #975	; 0x3cf
   12554:	f005 fe08 	bl	18168 <printk>
   12558:	4040      	eors	r0, r0
   1255a:	f380 8811 	msr	BASEPRI, r0
   1255e:	f04f 0003 	mov.w	r0, #3
   12562:	df02      	svc	2
}
   12564:	2000      	movs	r0, #0
   12566:	b003      	add	sp, #12
   12568:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   1256a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1256e:	079a      	lsls	r2, r3, #30
   12570:	d08d      	beq.n	1248e <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   12572:	4809      	ldr	r0, [pc, #36]	; (12598 <prepare_cb+0x118>)
   12574:	4621      	mov	r1, r4
   12576:	f000 ffd1 	bl	1351c <radio_isr_set>
		radio_disable();
   1257a:	f001 f8bf 	bl	136fc <radio_disable>
		return 0;
   1257e:	e7c9      	b.n	12514 <prepare_cb+0x94>
   12580:	8e89bed6 	.word	0x8e89bed6
   12584:	00555555 	.word	0x00555555
   12588:	00011f19 	.word	0x00011f19
   1258c:	0001d844 	.word	0x0001d844
   12590:	0001d080 	.word	0x0001d080
   12594:	0001cde4 	.word	0x0001cde4
   12598:	00011bfd 	.word	0x00011bfd

0001259c <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1259c:	68c3      	ldr	r3, [r0, #12]
{
   1259e:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   125a0:	681e      	ldr	r6, [r3, #0]
{
   125a2:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   125a4:	f7f5 fde2 	bl	816c <ticker_ticks_now_get>
   125a8:	4605      	mov	r5, r0
   125aa:	4630      	mov	r0, r6
   125ac:	f7ff fa5c 	bl	11a68 <lll_event_offset_get>
	p->remainder = 0;
   125b0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   125b2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   125b4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   125b8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   125ba:	4620      	mov	r0, r4
}
   125bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   125c0:	f7ff bf5e 	b.w	12480 <prepare_cb>

000125c4 <lll_adv_prepare>:
{
   125c4:	b510      	push	{r4, lr}
   125c6:	b082      	sub	sp, #8
   125c8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   125ca:	f7ff fc67 	bl	11e9c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   125ce:	2800      	cmp	r0, #0
   125d0:	db1a      	blt.n	12608 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   125d2:	4a14      	ldr	r2, [pc, #80]	; (12624 <lll_adv_prepare+0x60>)
   125d4:	4914      	ldr	r1, [pc, #80]	; (12628 <lll_adv_prepare+0x64>)
   125d6:	4815      	ldr	r0, [pc, #84]	; (1262c <lll_adv_prepare+0x68>)
   125d8:	9400      	str	r4, [sp, #0]
   125da:	2300      	movs	r3, #0
   125dc:	f7f8 fade 	bl	ab9c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   125e0:	b108      	cbz	r0, 125e6 <lll_adv_prepare+0x22>
   125e2:	3077      	adds	r0, #119	; 0x77
   125e4:	d101      	bne.n	125ea <lll_adv_prepare+0x26>
}
   125e6:	b002      	add	sp, #8
   125e8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   125ea:	4a11      	ldr	r2, [pc, #68]	; (12630 <lll_adv_prepare+0x6c>)
   125ec:	4911      	ldr	r1, [pc, #68]	; (12634 <lll_adv_prepare+0x70>)
   125ee:	4812      	ldr	r0, [pc, #72]	; (12638 <lll_adv_prepare+0x74>)
   125f0:	f240 239b 	movw	r3, #667	; 0x29b
   125f4:	f005 fdb8 	bl	18168 <printk>
   125f8:	4040      	eors	r0, r0
   125fa:	f380 8811 	msr	BASEPRI, r0
   125fe:	f04f 0003 	mov.w	r0, #3
   12602:	df02      	svc	2
}
   12604:	b002      	add	sp, #8
   12606:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   12608:	4a09      	ldr	r2, [pc, #36]	; (12630 <lll_adv_prepare+0x6c>)
   1260a:	490c      	ldr	r1, [pc, #48]	; (1263c <lll_adv_prepare+0x78>)
   1260c:	480a      	ldr	r0, [pc, #40]	; (12638 <lll_adv_prepare+0x74>)
   1260e:	f44f 7326 	mov.w	r3, #664	; 0x298
   12612:	f005 fda9 	bl	18168 <printk>
   12616:	4040      	eors	r0, r0
   12618:	f380 8811 	msr	BASEPRI, r0
   1261c:	f04f 0003 	mov.w	r0, #3
   12620:	df02      	svc	2
   12622:	e7d6      	b.n	125d2 <lll_adv_prepare+0xe>
   12624:	00012481 	.word	0x00012481
   12628:	00012081 	.word	0x00012081
   1262c:	00012011 	.word	0x00012011
   12630:	0001d844 	.word	0x0001d844
   12634:	0001d8c8 	.word	0x0001d8c8
   12638:	0001cde4 	.word	0x0001cde4
   1263c:	0001d7f4 	.word	0x0001d7f4

00012640 <lll_adv_scan_req_check>:
{
   12640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   12644:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   12648:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1264c:	f01c 0f01 	tst.w	ip, #1
{
   12650:	460f      	mov	r7, r1
   12652:	4616      	mov	r6, r2
   12654:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   12656:	d009      	beq.n	1266c <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   12658:	f1b8 0f00 	cmp.w	r8, #0
   1265c:	d016      	beq.n	1268c <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1265e:	783b      	ldrb	r3, [r7, #0]
   12660:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   12664:	d019      	beq.n	1269a <lll_adv_scan_req_check+0x5a>
{
   12666:	2000      	movs	r0, #0
}
   12668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1266c:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1266e:	f811 0b02 	ldrb.w	r0, [r1], #2
   12672:	9a07      	ldr	r2, [sp, #28]
   12674:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12678:	f7fe fe64 	bl	11344 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   1267c:	2800      	cmp	r0, #0
   1267e:	d1ee      	bne.n	1265e <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   12680:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   12682:	07db      	lsls	r3, r3, #31
   12684:	d5ef      	bpl.n	12666 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   12686:	f1b8 0f00 	cmp.w	r8, #0
   1268a:	d1e8      	bne.n	1265e <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1268c:	9b07      	ldr	r3, [sp, #28]
   1268e:	7818      	ldrb	r0, [r3, #0]
   12690:	f7fe fe28 	bl	112e4 <ull_filter_lll_irk_in_fal>
   12694:	2800      	cmp	r0, #0
   12696:	d1e2      	bne.n	1265e <lll_adv_scan_req_check+0x1e>
   12698:	e7e5      	b.n	12666 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1269a:	2206      	movs	r2, #6
   1269c:	f107 0108 	add.w	r1, r7, #8
   126a0:	4628      	mov	r0, r5
   126a2:	f006 fb9c 	bl	18dde <memcmp>
	return (tx_addr == sr->rx_addr) &&
   126a6:	fab0 f080 	clz	r0, r0
   126aa:	0940      	lsrs	r0, r0, #5
}
   126ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000126b0 <lll_adv_connect_ind_check>:
{
   126b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126b4:	461f      	mov	r7, r3
	if (tgt_addr) {
   126b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   126b8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   126bc:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   126c0:	4605      	mov	r5, r0
   126c2:	460c      	mov	r4, r1
   126c4:	4690      	mov	r8, r2
	if (tgt_addr) {
   126c6:	b9fb      	cbnz	r3, 12708 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   126c8:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   126ca:	079a      	lsls	r2, r3, #30
   126cc:	d507      	bpl.n	126de <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   126ce:	b1a6      	cbz	r6, 126fa <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   126d0:	7823      	ldrb	r3, [r4, #0]
   126d2:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   126d6:	d03a      	beq.n	1274e <lll_adv_connect_ind_check+0x9e>
   126d8:	2000      	movs	r0, #0
}
   126da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   126de:	f811 0b02 	ldrb.w	r0, [r1], #2
   126e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   126e4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   126e8:	f7fe fe2c 	bl	11344 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   126ec:	2800      	cmp	r0, #0
   126ee:	d1ef      	bne.n	126d0 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   126f0:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   126f2:	079b      	lsls	r3, r3, #30
   126f4:	d5f0      	bpl.n	126d8 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   126f6:	2e00      	cmp	r6, #0
   126f8:	d1ea      	bne.n	126d0 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   126fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   126fc:	7818      	ldrb	r0, [r3, #0]
   126fe:	f7fe fdf1 	bl	112e4 <ull_filter_lll_irk_in_fal>
   12702:	2800      	cmp	r0, #0
   12704:	d1e4      	bne.n	126d0 <lll_adv_connect_ind_check+0x20>
   12706:	e7e7      	b.n	126d8 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   12708:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1270a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1270c:	f81a 0b02 	ldrb.w	r0, [sl], #2
   12710:	f3c0 1080 	ubfx	r0, r0, #6, #1
   12714:	4651      	mov	r1, sl
   12716:	f7fe fe15 	bl	11344 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1271a:	2800      	cmp	r0, #0
   1271c:	d0dc      	beq.n	126d8 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1271e:	7823      	ldrb	r3, [r4, #0]
   12720:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   12724:	d1d8      	bne.n	126d8 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   12726:	4638      	mov	r0, r7
   12728:	2206      	movs	r2, #6
   1272a:	f104 0108 	add.w	r1, r4, #8
   1272e:	f006 fb56 	bl	18dde <memcmp>
	return (tx_addr == ci->rx_addr) &&
   12732:	2800      	cmp	r0, #0
   12734:	d1d0      	bne.n	126d8 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   12736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12738:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1273a:	28ff      	cmp	r0, #255	; 0xff
   1273c:	d011      	beq.n	12762 <lll_adv_connect_ind_check+0xb2>
   1273e:	7aab      	ldrb	r3, [r5, #10]
   12740:	2bff      	cmp	r3, #255	; 0xff
   12742:	d00e      	beq.n	12762 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   12744:	1ac0      	subs	r0, r0, r3
   12746:	fab0 f080 	clz	r0, r0
   1274a:	0940      	lsrs	r0, r0, #5
   1274c:	e7c5      	b.n	126da <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1274e:	2206      	movs	r2, #6
   12750:	f104 0108 	add.w	r1, r4, #8
   12754:	4638      	mov	r0, r7
   12756:	f006 fb42 	bl	18dde <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1275a:	fab0 f080 	clz	r0, r0
   1275e:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   12760:	e7bb      	b.n	126da <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   12762:	7823      	ldrb	r3, [r4, #0]
   12764:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12768:	454b      	cmp	r3, r9
   1276a:	d1b5      	bne.n	126d8 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1276c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1276e:	2206      	movs	r2, #6
   12770:	4651      	mov	r1, sl
   12772:	f006 fb34 	bl	18dde <memcmp>
	return (rx_addr == ci->tx_addr) &&
   12776:	fab0 f080 	clz	r0, r0
   1277a:	0940      	lsrs	r0, r0, #5
   1277c:	e7ad      	b.n	126da <lll_adv_connect_ind_check+0x2a>
   1277e:	bf00      	nop

00012780 <isr_rx>:
{
   12780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12784:	b08b      	sub	sp, #44	; 0x2c
   12786:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   12788:	f000 ffe2 	bl	13750 <radio_is_done>
	if (trx_done) {
   1278c:	b2c0      	uxtb	r0, r0
   1278e:	b950      	cbnz	r0, 127a6 <isr_rx+0x26>
	lll_isr_status_reset();
   12790:	f7ff f9de 	bl	11b50 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   12794:	487c      	ldr	r0, [pc, #496]	; (12988 <isr_rx+0x208>)
   12796:	4621      	mov	r1, r4
   12798:	f000 fec0 	bl	1351c <radio_isr_set>
}
   1279c:	b00b      	add	sp, #44	; 0x2c
   1279e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   127a2:	f000 bfab 	b.w	136fc <radio_disable>
		crc_ok = radio_crc_is_valid();
   127a6:	f000 fff3 	bl	13790 <radio_crc_is_valid>
   127aa:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   127ac:	f001 f900 	bl	139b0 <radio_filter_has_match>
   127b0:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   127b2:	f001 f907 	bl	139c4 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   127b6:	f001 fae3 	bl	13d80 <radio_ar_has_match>
   127ba:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   127bc:	f001 fac4 	bl	13d48 <radio_ar_match_get>
	if (crc_ok) {
   127c0:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   127c2:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   127c4:	f001 f8b8 	bl	13938 <radio_rssi_is_ready>
	lll_isr_status_reset();
   127c8:	f7ff f9c2 	bl	11b50 <lll_isr_status_reset>
	if (crc_ok) {
   127cc:	2d00      	cmp	r5, #0
   127ce:	d0e1      	beq.n	12794 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   127d0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   127d4:	d17a      	bne.n	128cc <isr_rx+0x14c>
   127d6:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   127d8:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   127da:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   127de:	f7f7 fecd 	bl	a57c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   127e2:	4605      	mov	r5, r0
   127e4:	2800      	cmp	r0, #0
   127e6:	f000 80a2 	beq.w	1292e <isr_rx+0x1ae>
   127ea:	7b23      	ldrb	r3, [r4, #12]
   127ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   127f0:	f105 011c 	add.w	r1, r5, #28
   127f4:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   127f6:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   127f8:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   127fc:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   12800:	f000 0c0f 	and.w	ip, r0, #15
   12804:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   12808:	bf08      	it	eq
   1280a:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   1280e:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   12812:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   12816:	7f28      	ldrb	r0, [r5, #28]
   12818:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   1281c:	bf18      	it	ne
   1281e:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   12822:	2803      	cmp	r0, #3
   12824:	d05a      	beq.n	128dc <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   12826:	2805      	cmp	r0, #5
   12828:	d1b4      	bne.n	12794 <isr_rx+0x14>
   1282a:	7f68      	ldrb	r0, [r5, #29]
   1282c:	2822      	cmp	r0, #34	; 0x22
   1282e:	d1b1      	bne.n	12794 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   12830:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   12832:	2800      	cmp	r0, #0
   12834:	d0ae      	beq.n	12794 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   12836:	f890 0020 	ldrb.w	r0, [r0, #32]
   1283a:	0780      	lsls	r0, r0, #30
   1283c:	d4aa      	bmi.n	12794 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1283e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   12842:	9003      	str	r0, [sp, #12]
   12844:	e9cd 8901 	strd	r8, r9, [sp, #4]
   12848:	9700      	str	r7, [sp, #0]
   1284a:	4620      	mov	r0, r4
   1284c:	f7ff ff30 	bl	126b0 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   12850:	2800      	cmp	r0, #0
   12852:	d09f      	beq.n	12794 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   12854:	2004      	movs	r0, #4
   12856:	f7f7 fe91 	bl	a57c <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1285a:	2800      	cmp	r0, #0
   1285c:	d09a      	beq.n	12794 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   1285e:	484b      	ldr	r0, [pc, #300]	; (1298c <isr_rx+0x20c>)
   12860:	4621      	mov	r1, r4
   12862:	f000 fe5b 	bl	1351c <radio_isr_set>
		radio_disable();
   12866:	f000 ff49 	bl	136fc <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1286a:	f000 ff67 	bl	1373c <radio_is_ready>
   1286e:	2800      	cmp	r0, #0
   12870:	d14f      	bne.n	12912 <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   12872:	6862      	ldr	r2, [r4, #4]
   12874:	f892 3020 	ldrb.w	r3, [r2, #32]
   12878:	f043 0301 	orr.w	r3, r3, #1
   1287c:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   12880:	f7f7 fe9a 	bl	a5b8 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12884:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   12886:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1288a:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   1288c:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   1288e:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   12890:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   12892:	f001 f93b 	bl	13b0c <radio_tmr_start_get>
   12896:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   12898:	f001 f98c 	bl	13bb4 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   1289c:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1289e:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   128a0:	4608      	mov	r0, r1
   128a2:	f000 ff1f 	bl	136e4 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   128a6:	1a24      	subs	r4, r4, r0
   128a8:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   128aa:	b1ae      	cbz	r6, 128d8 <isr_rx+0x158>
   128ac:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   128b0:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   128b2:	f7f7 fe81 	bl	a5b8 <ull_pdu_rx_alloc>
   128b6:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   128b8:	4629      	mov	r1, r5
   128ba:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   128bc:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   128be:	f7f7 fe91 	bl	a5e4 <ull_rx_put>
		ull_rx_sched();
   128c2:	f7f7 fe9f 	bl	a604 <ull_rx_sched>
}
   128c6:	b00b      	add	sp, #44	; 0x2c
   128c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   128cc:	fa5f f088 	uxtb.w	r0, r8
   128d0:	f7fe fcb6 	bl	11240 <ull_filter_lll_rl_irk_idx>
   128d4:	4603      	mov	r3, r0
   128d6:	e77f      	b.n	127d8 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   128d8:	23ff      	movs	r3, #255	; 0xff
   128da:	e7e9      	b.n	128b0 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   128dc:	7f68      	ldrb	r0, [r5, #29]
   128de:	280c      	cmp	r0, #12
   128e0:	f47f af58 	bne.w	12794 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   128e4:	f1b8 0f00 	cmp.w	r8, #0
   128e8:	f47f af54 	bne.w	12794 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   128ec:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   128f0:	9001      	str	r0, [sp, #4]
   128f2:	f8cd 9000 	str.w	r9, [sp]
   128f6:	4620      	mov	r0, r4
   128f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   128fc:	9105      	str	r1, [sp, #20]
   128fe:	f7ff fe9f 	bl	12640 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   12902:	bb10      	cbnz	r0, 1294a <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   12904:	7f28      	ldrb	r0, [r5, #28]
   12906:	9b07      	ldr	r3, [sp, #28]
   12908:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   1290c:	f000 000f 	and.w	r0, r0, #15
   12910:	e789      	b.n	12826 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   12912:	4a1f      	ldr	r2, [pc, #124]	; (12990 <isr_rx+0x210>)
   12914:	491f      	ldr	r1, [pc, #124]	; (12994 <isr_rx+0x214>)
   12916:	4820      	ldr	r0, [pc, #128]	; (12998 <isr_rx+0x218>)
   12918:	f44f 63bb 	mov.w	r3, #1496	; 0x5d8
   1291c:	f005 fc24 	bl	18168 <printk>
   12920:	4040      	eors	r0, r0
   12922:	f380 8811 	msr	BASEPRI, r0
   12926:	f04f 0003 	mov.w	r0, #3
   1292a:	df02      	svc	2
   1292c:	e7a1      	b.n	12872 <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   1292e:	4a18      	ldr	r2, [pc, #96]	; (12990 <isr_rx+0x210>)
   12930:	491a      	ldr	r1, [pc, #104]	; (1299c <isr_rx+0x21c>)
   12932:	4819      	ldr	r0, [pc, #100]	; (12998 <isr_rx+0x218>)
   12934:	f44f 63af 	mov.w	r3, #1400	; 0x578
   12938:	f005 fc16 	bl	18168 <printk>
   1293c:	4040      	eors	r0, r0
   1293e:	f380 8811 	msr	BASEPRI, r0
   12942:	f04f 0003 	mov.w	r0, #3
   12946:	df02      	svc	2
   12948:	e74f      	b.n	127ea <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   1294a:	4621      	mov	r1, r4
   1294c:	480e      	ldr	r0, [pc, #56]	; (12988 <isr_rx+0x208>)
   1294e:	f000 fde5 	bl	1351c <radio_isr_set>
		radio_switch_complete_and_disable();
   12952:	f000 ffdb 	bl	1390c <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   12956:	7e23      	ldrb	r3, [r4, #24]
   12958:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1295c:	69e0      	ldr	r0, [r4, #28]
   1295e:	f000 feb7 	bl	136d0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   12962:	f000 feeb 	bl	1373c <radio_is_ready>
   12966:	2800      	cmp	r0, #0
   12968:	d0ad      	beq.n	128c6 <isr_rx+0x146>
   1296a:	4a09      	ldr	r2, [pc, #36]	; (12990 <isr_rx+0x210>)
   1296c:	4909      	ldr	r1, [pc, #36]	; (12994 <isr_rx+0x214>)
   1296e:	480a      	ldr	r0, [pc, #40]	; (12998 <isr_rx+0x218>)
   12970:	f240 5391 	movw	r3, #1425	; 0x591
   12974:	f005 fbf8 	bl	18168 <printk>
   12978:	4040      	eors	r0, r0
   1297a:	f380 8811 	msr	BASEPRI, r0
   1297e:	f04f 0003 	mov.w	r0, #3
   12982:	df02      	svc	2
		if (!err) {
   12984:	e79f      	b.n	128c6 <isr_rx+0x146>
   12986:	bf00      	nop
   12988:	00012431 	.word	0x00012431
   1298c:	00011f19 	.word	0x00011f19
   12990:	0001d844 	.word	0x0001d844
   12994:	0001d898 	.word	0x0001d898
   12998:	0001cde4 	.word	0x0001cde4
   1299c:	0001d890 	.word	0x0001d890

000129a0 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   129a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129a2:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   129a4:	f7ff f8d4 	bl	11b50 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   129a8:	f7f7 fee6 	bl	a778 <ull_event_done_extra_get>
	LL_ASSERT(e);
   129ac:	4604      	mov	r4, r0
   129ae:	2800      	cmp	r0, #0
   129b0:	d036      	beq.n	12a20 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   129b2:	4922      	ldr	r1, [pc, #136]	; (12a3c <isr_done+0x9c>)
   129b4:	79a2      	ldrb	r2, [r4, #6]
   129b6:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   129b8:	4b21      	ldr	r3, [pc, #132]	; (12a40 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   129ba:	f360 0200 	bfi	r2, r0, #0, #1
   129be:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   129c0:	4a20      	ldr	r2, [pc, #128]	; (12a44 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   129c2:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   129c4:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   129c6:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   129c8:	2101      	movs	r1, #1
   129ca:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   129cc:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   129ce:	b11b      	cbz	r3, 129d8 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   129d0:	f995 301d 	ldrsb.w	r3, [r5, #29]
   129d4:	2b00      	cmp	r3, #0
   129d6:	db04      	blt.n	129e2 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   129d8:	4628      	mov	r0, r5
}
   129da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   129de:	f7ff b8c5 	b.w	11b6c <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   129e2:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   129e6:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   129ea:	2b02      	cmp	r3, #2
   129ec:	d016      	beq.n	12a1c <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   129ee:	2b04      	cmp	r3, #4
   129f0:	bf14      	ite	ne
   129f2:	2728      	movne	r7, #40	; 0x28
   129f4:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   129f8:	f001 f8c8 	bl	13b8c <radio_tmr_aa_restore>
   129fc:	4606      	mov	r6, r0
   129fe:	f001 f8cb 	bl	13b98 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   12a02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   12a04:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   12a06:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   12a08:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   12a0c:	2300      	movs	r3, #0
   12a0e:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   12a10:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   12a12:	4628      	mov	r0, r5
}
   12a14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   12a18:	f7ff b8a8 	b.w	11b6c <lll_isr_cleanup>
	switch (phy) {
   12a1c:	2718      	movs	r7, #24
   12a1e:	e7eb      	b.n	129f8 <isr_done+0x58>
	LL_ASSERT(e);
   12a20:	4a09      	ldr	r2, [pc, #36]	; (12a48 <isr_done+0xa8>)
   12a22:	490a      	ldr	r1, [pc, #40]	; (12a4c <isr_done+0xac>)
   12a24:	480a      	ldr	r0, [pc, #40]	; (12a50 <isr_done+0xb0>)
   12a26:	f240 3313 	movw	r3, #787	; 0x313
   12a2a:	f005 fb9d 	bl	18168 <printk>
   12a2e:	4040      	eors	r0, r0
   12a30:	f380 8811 	msr	BASEPRI, r0
   12a34:	f04f 0003 	mov.w	r0, #3
   12a38:	df02      	svc	2
   12a3a:	e7ba      	b.n	129b2 <isr_done+0x12>
   12a3c:	200027c0 	.word	0x200027c0
   12a40:	2000279e 	.word	0x2000279e
   12a44:	200027c1 	.word	0x200027c1
   12a48:	0001d8dc 	.word	0x0001d8dc
   12a4c:	0001d180 	.word	0x0001d180
   12a50:	0001cde4 	.word	0x0001cde4

00012a54 <lll_conn_init>:
{
   12a54:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   12a56:	f000 fea5 	bl	137a4 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12a5a:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   12a5c:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12a5e:	2101      	movs	r1, #1
   12a60:	f361 0201 	bfi	r2, r1, #0, #2
}
   12a64:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12a66:	701a      	strb	r2, [r3, #0]
}
   12a68:	bd08      	pop	{r3, pc}
   12a6a:	bf00      	nop

00012a6c <lll_conn_reset>:
}
   12a6c:	2000      	movs	r0, #0
   12a6e:	4770      	bx	lr

00012a70 <lll_conn_flush>:
}
   12a70:	4770      	bx	lr
   12a72:	bf00      	nop

00012a74 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   12a74:	4805      	ldr	r0, [pc, #20]	; (12a8c <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   12a76:	4906      	ldr	r1, [pc, #24]	; (12a90 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   12a78:	4a06      	ldr	r2, [pc, #24]	; (12a94 <lll_conn_prepare_reset+0x20>)
{
   12a7a:	b410      	push	{r4}
	trx_cnt = 0U;
   12a7c:	2300      	movs	r3, #0
   12a7e:	4c06      	ldr	r4, [pc, #24]	; (12a98 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   12a80:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   12a82:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   12a84:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   12a86:	8023      	strh	r3, [r4, #0]
}
   12a88:	bc10      	pop	{r4}
   12a8a:	4770      	bx	lr
   12a8c:	200027c0 	.word	0x200027c0
   12a90:	200027bf 	.word	0x200027bf
   12a94:	200027c1 	.word	0x200027c1
   12a98:	2000279e 	.word	0x2000279e

00012a9c <lll_conn_abort_cb>:
{
   12a9c:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   12a9e:	b1e8      	cbz	r0, 12adc <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   12aa0:	460d      	mov	r5, r1
   12aa2:	4604      	mov	r4, r0
   12aa4:	f7ff fa12 	bl	11ecc <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   12aa8:	2800      	cmp	r0, #0
   12aaa:	db0a      	blt.n	12ac2 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   12aac:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   12aae:	8923      	ldrh	r3, [r4, #8]
   12ab0:	8a51      	ldrh	r1, [r2, #18]
   12ab2:	3301      	adds	r3, #1
   12ab4:	440b      	add	r3, r1
   12ab6:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   12ab8:	4628      	mov	r0, r5
}
   12aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   12abe:	f7fe bf7d 	b.w	119bc <lll_done>
	LL_ASSERT(err >= 0);
   12ac2:	4a0a      	ldr	r2, [pc, #40]	; (12aec <lll_conn_abort_cb+0x50>)
   12ac4:	490a      	ldr	r1, [pc, #40]	; (12af0 <lll_conn_abort_cb+0x54>)
   12ac6:	480b      	ldr	r0, [pc, #44]	; (12af4 <lll_conn_abort_cb+0x58>)
   12ac8:	23aa      	movs	r3, #170	; 0xaa
   12aca:	f005 fb4d 	bl	18168 <printk>
   12ace:	4040      	eors	r0, r0
   12ad0:	f380 8811 	msr	BASEPRI, r0
   12ad4:	f04f 0003 	mov.w	r0, #3
   12ad8:	df02      	svc	2
   12ada:	e7e7      	b.n	12aac <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   12adc:	4806      	ldr	r0, [pc, #24]	; (12af8 <lll_conn_abort_cb+0x5c>)
   12ade:	f000 fd1d 	bl	1351c <radio_isr_set>
}
   12ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   12ae6:	f000 be09 	b.w	136fc <radio_disable>
   12aea:	bf00      	nop
   12aec:	0001d8dc 	.word	0x0001d8dc
   12af0:	0001d7f4 	.word	0x0001d7f4
   12af4:	0001cde4 	.word	0x0001cde4
   12af8:	000129a1 	.word	0x000129a1

00012afc <lll_conn_rx_pkt_set>:
{
   12afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12afe:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   12b00:	2001      	movs	r0, #1
   12b02:	f7f7 fd3b 	bl	a57c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   12b06:	4607      	mov	r7, r0
   12b08:	b350      	cbz	r0, 12b60 <lll_conn_rx_pkt_set+0x64>
	phy = lll->phy_rx;
   12b0a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   12b0e:	8fe6      	ldrh	r6, [r4, #62]	; 0x3e
	phy = lll->phy_rx;
   12b10:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   12b14:	2100      	movs	r1, #0
   12b16:	4628      	mov	r0, r5
   12b18:	f000 fd66 	bl	135e8 <radio_phy_set>
	} else if (lll->enc_rx) {
   12b1c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   12b20:	006a      	lsls	r2, r5, #1
	} else if (lll->enc_rx) {
   12b22:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   12b24:	b2f1      	uxtb	r1, r6
   12b26:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_rx) {
   12b2a:	d510      	bpl.n	12b4e <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   12b2c:	3104      	adds	r1, #4
   12b2e:	b2c9      	uxtb	r1, r1
   12b30:	2008      	movs	r0, #8
   12b32:	f000 fd9f 	bl	13674 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   12b36:	f000 fe3d 	bl	137b4 <radio_pkt_decrypt_get>
   12b3a:	4629      	mov	r1, r5
   12b3c:	4602      	mov	r2, r0
   12b3e:	f104 005f 	add.w	r0, r4, #95	; 0x5f
   12b42:	f001 f843 	bl	13bcc <radio_ccm_rx_pkt_set>
}
   12b46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   12b4a:	f000 bdbb 	b.w	136c4 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   12b4e:	2008      	movs	r0, #8
   12b50:	f000 fd90 	bl	13674 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   12b54:	f107 001c 	add.w	r0, r7, #28
}
   12b58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   12b5c:	f000 bdb2 	b.w	136c4 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   12b60:	4a06      	ldr	r2, [pc, #24]	; (12b7c <lll_conn_rx_pkt_set+0x80>)
   12b62:	4907      	ldr	r1, [pc, #28]	; (12b80 <lll_conn_rx_pkt_set+0x84>)
   12b64:	4807      	ldr	r0, [pc, #28]	; (12b84 <lll_conn_rx_pkt_set+0x88>)
   12b66:	f240 2356 	movw	r3, #598	; 0x256
   12b6a:	f005 fafd 	bl	18168 <printk>
   12b6e:	4040      	eors	r0, r0
   12b70:	f380 8811 	msr	BASEPRI, r0
   12b74:	f04f 0003 	mov.w	r0, #3
   12b78:	df02      	svc	2
   12b7a:	e7c6      	b.n	12b0a <lll_conn_rx_pkt_set+0xe>
   12b7c:	0001d8dc 	.word	0x0001d8dc
   12b80:	0001d890 	.word	0x0001d890
   12b84:	0001cde4 	.word	0x0001cde4

00012b88 <lll_conn_isr_tx>:
{
   12b88:	b538      	push	{r3, r4, r5, lr}
   12b8a:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   12b8c:	f7fe ffce 	bl	11b2c <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   12b90:	2096      	movs	r0, #150	; 0x96
   12b92:	f000 ff2d 	bl	139f0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   12b96:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   12b9a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   12b9e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   12ba2:	f000 0007 	and.w	r0, r0, #7
   12ba6:	f002 0207 	and.w	r2, r2, #7
   12baa:	2100      	movs	r1, #0
   12bac:	f000 fe4e 	bl	1384c <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   12bb0:	4620      	mov	r0, r4
   12bb2:	f7ff ffa3 	bl	12afc <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   12bb6:	f000 fdc1 	bl	1373c <radio_is_ready>
   12bba:	bb58      	cbnz	r0, 12c14 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   12bbc:	f001 f800 	bl	13bc0 <radio_tmr_tifs_base_get>
   12bc0:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   12bc2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   12bc6:	2101      	movs	r1, #1
   12bc8:	f000 0007 	and.w	r0, r0, #7
   12bcc:	f000 fd8a 	bl	136e4 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   12bd0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   12bd4:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   12bd8:	4405      	add	r5, r0
   12bda:	2b02      	cmp	r3, #2
   12bdc:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   12be0:	d016      	beq.n	12c10 <lll_conn_isr_tx+0x88>
		return 376;
   12be2:	2b04      	cmp	r3, #4
   12be4:	bf14      	ite	ne
   12be6:	2328      	movne	r3, #40	; 0x28
   12be8:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   12bec:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   12bf0:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   12bf4:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   12bf8:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   12bfa:	f000 fd6f 	bl	136dc <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   12bfe:	1a28      	subs	r0, r5, r0
   12c00:	f000 ff96 	bl	13b30 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   12c04:	4621      	mov	r1, r4
   12c06:	480a      	ldr	r0, [pc, #40]	; (12c30 <lll_conn_isr_tx+0xa8>)
}
   12c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   12c0c:	f000 bc86 	b.w	1351c <radio_isr_set>
	switch (phy) {
   12c10:	2318      	movs	r3, #24
   12c12:	e7eb      	b.n	12bec <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   12c14:	4a07      	ldr	r2, [pc, #28]	; (12c34 <lll_conn_isr_tx+0xac>)
   12c16:	4908      	ldr	r1, [pc, #32]	; (12c38 <lll_conn_isr_tx+0xb0>)
   12c18:	4808      	ldr	r0, [pc, #32]	; (12c3c <lll_conn_isr_tx+0xb4>)
   12c1a:	f240 230f 	movw	r3, #527	; 0x20f
   12c1e:	f005 faa3 	bl	18168 <printk>
   12c22:	4040      	eors	r0, r0
   12c24:	f380 8811 	msr	BASEPRI, r0
   12c28:	f04f 0003 	mov.w	r0, #3
   12c2c:	df02      	svc	2
   12c2e:	e7c5      	b.n	12bbc <lll_conn_isr_tx+0x34>
   12c30:	00012d79 	.word	0x00012d79
   12c34:	0001d8dc 	.word	0x0001d8dc
   12c38:	0001d898 	.word	0x0001d898
   12c3c:	0001cde4 	.word	0x0001cde4

00012c40 <lll_conn_tx_pkt_set>:
{
   12c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c42:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   12c44:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   12c48:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   12c4a:	f001 0407 	and.w	r4, r1, #7
{
   12c4e:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   12c50:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   12c54:	4620      	mov	r0, r4
   12c56:	f000 fcc7 	bl	135e8 <radio_phy_set>
	} else if (lll->enc_tx) {
   12c5a:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   12c5e:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   12c60:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   12c62:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   12c66:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   12c68:	d50d      	bpl.n	12c86 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   12c6a:	3104      	adds	r1, #4
   12c6c:	b2c9      	uxtb	r1, r1
   12c6e:	2008      	movs	r0, #8
   12c70:	f000 fd00 	bl	13674 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   12c74:	4639      	mov	r1, r7
   12c76:	f105 0080 	add.w	r0, r5, #128	; 0x80
   12c7a:	f000 ffdd 	bl	13c38 <radio_ccm_tx_pkt_set>
}
   12c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   12c82:	f000 bd25 	b.w	136d0 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   12c86:	2008      	movs	r0, #8
   12c88:	f000 fcf4 	bl	13674 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   12c8c:	4638      	mov	r0, r7
}
   12c8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   12c92:	f000 bd1d 	b.w	136d0 <radio_pkt_tx_set>
   12c96:	bf00      	nop

00012c98 <lll_conn_pdu_tx_prep>:
{
   12c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12c9c:	4604      	mov	r4, r0
   12c9e:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   12ca0:	aa01      	add	r2, sp, #4
   12ca2:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   12ca4:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   12ca6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   12ca8:	f7f3 fff4 	bl	6c94 <memq_peek>
	if (lll->empty || !link) {
   12cac:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12cb0:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   12cb2:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   12cb4:	d432      	bmi.n	12d1c <lll_conn_pdu_tx_prep+0x84>
   12cb6:	2800      	cmp	r0, #0
   12cb8:	d04e      	beq.n	12d58 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   12cba:	9b01      	ldr	r3, [sp, #4]
   12cbc:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   12cc0:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   12cc4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   12cc8:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   12ccc:	b913      	cbnz	r3, 12cd4 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   12cce:	786b      	ldrb	r3, [r5, #1]
   12cd0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   12cd4:	b137      	cbz	r7, 12ce4 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12cd6:	f818 2007 	ldrb.w	r2, [r8, r7]
   12cda:	2101      	movs	r1, #1
   12cdc:	f361 0201 	bfi	r2, r1, #0, #2
   12ce0:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   12ce4:	1bdb      	subs	r3, r3, r7
   12ce6:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   12ce8:	4620      	mov	r0, r4
   12cea:	f7fd f99b 	bl	10024 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   12cee:	786b      	ldrb	r3, [r5, #1]
   12cf0:	4283      	cmp	r3, r0
   12cf2:	d924      	bls.n	12d3e <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   12cf4:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   12cf6:	f818 3007 	ldrb.w	r3, [r8, r7]
   12cfa:	f043 0310 	orr.w	r3, r3, #16
   12cfe:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   12d02:	f818 3007 	ldrb.w	r3, [r8, r7]
   12d06:	f36f 1347 	bfc	r3, #5, #3
   12d0a:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   12d0e:	2300      	movs	r3, #0
   12d10:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   12d12:	f8c9 5000 	str.w	r5, [r9]
}
   12d16:	b003      	add	sp, #12
   12d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   12d1c:	f043 0304 	orr.w	r3, r3, #4
   12d20:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   12d24:	f000 fd3e 	bl	137a4 <radio_pkt_empty_get>
   12d28:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   12d2a:	b1e6      	cbz	r6, 12d66 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   12d2c:	7803      	ldrb	r3, [r0, #0]
   12d2e:	f043 0310 	orr.w	r3, r3, #16
   12d32:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   12d34:	f8c9 5000 	str.w	r5, [r9]
}
   12d38:	b003      	add	sp, #12
   12d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   12d3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   12d40:	6832      	ldr	r2, [r6, #0]
   12d42:	429a      	cmp	r2, r3
			p->md = 1U;
   12d44:	f818 3007 	ldrb.w	r3, [r8, r7]
   12d48:	bf14      	ite	ne
   12d4a:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   12d4e:	f36f 1304 	bfceq	r3, #4, #1
   12d52:	f808 3007 	strb.w	r3, [r8, r7]
   12d56:	e7d4      	b.n	12d02 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   12d58:	f043 0304 	orr.w	r3, r3, #4
   12d5c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   12d60:	f000 fd20 	bl	137a4 <radio_pkt_empty_get>
   12d64:	4605      	mov	r5, r0
			p->md = 0U;
   12d66:	782b      	ldrb	r3, [r5, #0]
   12d68:	f36f 1304 	bfc	r3, #4, #1
   12d6c:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   12d6e:	f8c9 5000 	str.w	r5, [r9]
}
   12d72:	b003      	add	sp, #12
   12d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00012d78 <lll_conn_isr_rx>:
{
   12d78:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d7a:	b083      	sub	sp, #12
   12d7c:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   12d7e:	f000 fce7 	bl	13750 <radio_is_done>
	if (trx_done) {
   12d82:	b2c0      	uxtb	r0, r0
   12d84:	b950      	cbnz	r0, 12d9c <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   12d86:	f7fe fed9 	bl	11b3c <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   12d8a:	48b5      	ldr	r0, [pc, #724]	; (13060 <lll_conn_isr_rx+0x2e8>)
   12d8c:	4621      	mov	r1, r4
   12d8e:	f000 fbc5 	bl	1351c <radio_isr_set>
}
   12d92:	b003      	add	sp, #12
   12d94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   12d98:	f000 bcb0 	b.w	136fc <radio_disable>
		crc_ok = radio_crc_is_valid();
   12d9c:	f000 fcf8 	bl	13790 <radio_crc_is_valid>
   12da0:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   12da2:	f000 fdc9 	bl	13938 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   12da6:	f7fe fec9 	bl	11b3c <lll_isr_rx_status_reset>
	trx_cnt++;
   12daa:	4aae      	ldr	r2, [pc, #696]	; (13064 <lll_conn_isr_rx+0x2ec>)
   12dac:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   12dae:	2001      	movs	r0, #1
	trx_cnt++;
   12db0:	4403      	add	r3, r0
   12db2:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   12db4:	f7f7 fbe2 	bl	a57c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   12db8:	4606      	mov	r6, r0
   12dba:	2800      	cmp	r0, #0
   12dbc:	f000 80ca 	beq.w	12f54 <lll_conn_isr_rx+0x1dc>
	if (crc_ok) {
   12dc0:	2d00      	cmp	r5, #0
   12dc2:	d15a      	bne.n	12e7a <lll_conn_isr_rx+0x102>
		if (crc_expire == 0U) {
   12dc4:	4ba8      	ldr	r3, [pc, #672]	; (13068 <lll_conn_isr_rx+0x2f0>)
   12dc6:	781f      	ldrb	r7, [r3, #0]
   12dc8:	2f00      	cmp	r7, #0
   12dca:	f040 80b2 	bne.w	12f32 <lll_conn_isr_rx+0x1ba>
		crc_expire--;
   12dce:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12dd0:	a901      	add	r1, sp, #4
   12dd2:	4620      	mov	r0, r4
		crc_expire--;
   12dd4:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12dd6:	f7ff ff5f 	bl	12c98 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   12dda:	2096      	movs	r0, #150	; 0x96
   12ddc:	f000 fe08 	bl	139f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   12de0:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   12de4:	f000 0007 	and.w	r0, r0, #7
   12de8:	f000 fce8 	bl	137bc <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   12dec:	489f      	ldr	r0, [pc, #636]	; (1306c <lll_conn_isr_rx+0x2f4>)
   12dee:	4621      	mov	r1, r4
   12df0:	f000 fb94 	bl	1351c <radio_isr_set>
		radio_tmr_end_capture();
   12df4:	f000 fed6 	bl	13ba4 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   12df8:	9901      	ldr	r1, [sp, #4]
   12dfa:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   12dfe:	780b      	ldrb	r3, [r1, #0]
   12e00:	f023 000c 	bic.w	r0, r3, #12
   12e04:	f3c2 0340 	ubfx	r3, r2, #1, #1
   12e08:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   12e0a:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   12e0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   12e12:	4303      	orrs	r3, r0
   12e14:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   12e16:	4620      	mov	r0, r4
   12e18:	f7ff ff12 	bl	12c40 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   12e1c:	f000 fc8e 	bl	1373c <radio_is_ready>
   12e20:	2800      	cmp	r0, #0
   12e22:	f040 80d0 	bne.w	12fc6 <lll_conn_isr_rx+0x24e>
	if (!radio_tmr_aa_restore()) {
   12e26:	f000 feb1 	bl	13b8c <radio_tmr_aa_restore>
   12e2a:	b1e8      	cbz	r0, 12e68 <lll_conn_isr_rx+0xf0>
	if (tx_release) {
   12e2c:	b315      	cbz	r5, 12e74 <lll_conn_isr_rx+0xfc>
		LL_ASSERT(lll->handle != 0xFFFF);
   12e2e:	89a0      	ldrh	r0, [r4, #12]
   12e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12e34:	4298      	cmp	r0, r3
   12e36:	f000 80dd 	beq.w	12ff4 <lll_conn_isr_rx+0x27c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   12e3a:	4629      	mov	r1, r5
   12e3c:	f7fc ff82 	bl	fd44 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   12e40:	b177      	cbz	r7, 12e60 <lll_conn_isr_rx+0xe8>
		if (lll->enc_rx) {
   12e42:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12e46:	071b      	lsls	r3, r3, #28
   12e48:	f100 80cb 	bmi.w	12fe2 <lll_conn_isr_rx+0x26a>
		ull_pdu_rx_alloc();
   12e4c:	f7f7 fbb4 	bl	a5b8 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12e50:	2303      	movs	r3, #3
   12e52:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   12e54:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   12e56:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   12e58:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   12e5a:	4631      	mov	r1, r6
   12e5c:	f7f7 fbc2 	bl	a5e4 <ull_rx_put>
		ull_rx_sched();
   12e60:	f7f7 fbd0 	bl	a604 <ull_rx_sched>
}
   12e64:	b003      	add	sp, #12
   12e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   12e68:	f000 fe84 	bl	13b74 <radio_tmr_aa_get>
   12e6c:	f000 fe88 	bl	13b80 <radio_tmr_aa_save>
	if (tx_release) {
   12e70:	2d00      	cmp	r5, #0
   12e72:	d1dc      	bne.n	12e2e <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   12e74:	2f00      	cmp	r7, #0
   12e76:	d1e4      	bne.n	12e42 <lll_conn_isr_rx+0xca>
   12e78:	e7f4      	b.n	12e64 <lll_conn_isr_rx+0xec>
	if (lll->enc_rx) {
   12e7a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12e7e:	0719      	lsls	r1, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   12e80:	f106 071c 	add.w	r7, r6, #28
	if (lll->enc_rx) {
   12e84:	f100 8095 	bmi.w	12fb2 <lll_conn_isr_rx+0x23a>
	if (pdu_data_rx->nesn != lll->sn) {
   12e88:	7f32      	ldrb	r2, [r6, #28]
   12e8a:	f003 0101 	and.w	r1, r3, #1
   12e8e:	f3c2 0080 	ubfx	r0, r2, #2, #1
   12e92:	4288      	cmp	r0, r1
   12e94:	d06e      	beq.n	12f74 <lll_conn_isr_rx+0x1fc>
		if (lll->role) {
   12e96:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   12e9a:	f081 0101 	eor.w	r1, r1, #1
   12e9e:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   12ea2:	2a00      	cmp	r2, #0
		lll->sn++;
   12ea4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   12ea8:	da05      	bge.n	12eb6 <lll_conn_isr_rx+0x13e>
			lll->periph.latency_enabled = 1;
   12eaa:	f894 3020 	ldrb.w	r3, [r4, #32]
   12eae:	f043 0304 	orr.w	r3, r3, #4
   12eb2:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   12eb6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12eba:	075a      	lsls	r2, r3, #29
   12ebc:	f100 80a9 	bmi.w	13012 <lll_conn_isr_rx+0x29a>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   12ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   12ec4:	aa01      	add	r2, sp, #4
   12ec6:	f7f3 fee5 	bl	6c94 <memq_peek>
		if (link) {
   12eca:	4605      	mov	r5, r0
   12ecc:	2800      	cmp	r0, #0
   12ece:	f000 80a7 	beq.w	13020 <lll_conn_isr_rx+0x2a8>
					       lll->packet_tx_head_offset);
   12ed2:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   12ed6:	9b01      	ldr	r3, [sp, #4]
   12ed8:	4413      	add	r3, r2
   12eda:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   12edc:	b171      	cbz	r1, 12efc <lll_conn_isr_rx+0x184>
				if (lll->enc_tx) {
   12ede:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12ee2:	06db      	lsls	r3, r3, #27
   12ee4:	d50a      	bpl.n	12efc <lll_conn_isr_rx+0x184>
					lll->ccm_tx.counter++;
   12ee6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   12eea:	3301      	adds	r3, #1
   12eec:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   12ef0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   12ef4:	f143 0300 	adc.w	r3, r3, #0
   12ef8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   12efc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   12f00:	440a      	add	r2, r1
   12f02:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   12f04:	429a      	cmp	r2, r3
   12f06:	f0c0 808f 	bcc.w	13028 <lll_conn_isr_rx+0x2b0>
			} else if (offset == lll->packet_tx_head_len) {
   12f0a:	f000 80bf 	beq.w	1308c <lll_conn_isr_rx+0x314>
				LL_ASSERT(0);
   12f0e:	4a58      	ldr	r2, [pc, #352]	; (13070 <lll_conn_isr_rx+0x2f8>)
   12f10:	4958      	ldr	r1, [pc, #352]	; (13074 <lll_conn_isr_rx+0x2fc>)
   12f12:	4859      	ldr	r0, [pc, #356]	; (13078 <lll_conn_isr_rx+0x300>)
   12f14:	f240 339f 	movw	r3, #927	; 0x39f
   12f18:	f005 f926 	bl	18168 <printk>
   12f1c:	4040      	eors	r0, r0
   12f1e:	f380 8811 	msr	BASEPRI, r0
   12f22:	f04f 0003 	mov.w	r0, #3
   12f26:	df02      	svc	2
	tx_release = NULL;
   12f28:	2500      	movs	r5, #0
   12f2a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12f2e:	7f32      	ldrb	r2, [r6, #28]
   12f30:	e021      	b.n	12f76 <lll_conn_isr_rx+0x1fe>
		crc_expire--;
   12f32:	3f01      	subs	r7, #1
   12f34:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12f36:	a901      	add	r1, sp, #4
   12f38:	4620      	mov	r0, r4
		crc_expire--;
   12f3a:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12f3c:	f7ff feac 	bl	12c98 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   12f40:	2f00      	cmp	r7, #0
   12f42:	f040 80fe 	bne.w	13142 <lll_conn_isr_rx+0x3ca>
		radio_isr_set(isr_done, param);
   12f46:	4846      	ldr	r0, [pc, #280]	; (13060 <lll_conn_isr_rx+0x2e8>)
   12f48:	4621      	mov	r1, r4
   12f4a:	f000 fae7 	bl	1351c <radio_isr_set>
			radio_switch_complete_and_disable();
   12f4e:	f000 fcdd 	bl	1390c <radio_switch_complete_and_disable>
   12f52:	e751      	b.n	12df8 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   12f54:	4a46      	ldr	r2, [pc, #280]	; (13070 <lll_conn_isr_rx+0x2f8>)
   12f56:	4949      	ldr	r1, [pc, #292]	; (1307c <lll_conn_isr_rx+0x304>)
   12f58:	4847      	ldr	r0, [pc, #284]	; (13078 <lll_conn_isr_rx+0x300>)
   12f5a:	23f2      	movs	r3, #242	; 0xf2
   12f5c:	f005 f904 	bl	18168 <printk>
   12f60:	4040      	eors	r0, r0
   12f62:	f380 8811 	msr	BASEPRI, r0
   12f66:	f04f 0003 	mov.w	r0, #3
   12f6a:	df02      	svc	2
	if (crc_ok) {
   12f6c:	2d00      	cmp	r5, #0
   12f6e:	f43f af29 	beq.w	12dc4 <lll_conn_isr_rx+0x4c>
   12f72:	e782      	b.n	12e7a <lll_conn_isr_rx+0x102>
	tx_release = NULL;
   12f74:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   12f76:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   12f7a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   12f7e:	429a      	cmp	r2, r3
   12f80:	d059      	beq.n	13036 <lll_conn_isr_rx+0x2be>
	is_rx_enqueue = 0U;
   12f82:	2700      	movs	r7, #0
		crc_expire = 0U;
   12f84:	4a38      	ldr	r2, [pc, #224]	; (13068 <lll_conn_isr_rx+0x2f0>)
		crc_valid = 1U;
   12f86:	4b3e      	ldr	r3, [pc, #248]	; (13080 <lll_conn_isr_rx+0x308>)
		crc_expire = 0U;
   12f88:	2100      	movs	r1, #0
   12f8a:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12f8c:	4620      	mov	r0, r4
		crc_valid = 1U;
   12f8e:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12f90:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   12f92:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   12f94:	f7ff fe80 	bl	12c98 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   12f98:	7f33      	ldrb	r3, [r6, #28]
   12f9a:	06d9      	lsls	r1, r3, #27
   12f9c:	f53f af1d 	bmi.w	12dda <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   12fa0:	9b01      	ldr	r3, [sp, #4]
   12fa2:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   12fa4:	06d2      	lsls	r2, r2, #27
   12fa6:	f53f af18 	bmi.w	12dda <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   12faa:	785b      	ldrb	r3, [r3, #1]
   12fac:	2b00      	cmp	r3, #0
   12fae:	d0ca      	beq.n	12f46 <lll_conn_isr_rx+0x1ce>
   12fb0:	e713      	b.n	12dda <lll_conn_isr_rx+0x62>
		pkt_decrypt = radio_pkt_decrypt_get();
   12fb2:	f000 fbff 	bl	137b4 <radio_pkt_decrypt_get>
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   12fb6:	2203      	movs	r2, #3
		pkt_decrypt = radio_pkt_decrypt_get();
   12fb8:	4601      	mov	r1, r0
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   12fba:	4638      	mov	r0, r7
   12fbc:	f005 ff20 	bl	18e00 <memcpy>
   12fc0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   12fc4:	e760      	b.n	12e88 <lll_conn_isr_rx+0x110>
	LL_ASSERT(!radio_is_ready());
   12fc6:	4a2a      	ldr	r2, [pc, #168]	; (13070 <lll_conn_isr_rx+0x2f8>)
   12fc8:	492e      	ldr	r1, [pc, #184]	; (13084 <lll_conn_isr_rx+0x30c>)
   12fca:	482b      	ldr	r0, [pc, #172]	; (13078 <lll_conn_isr_rx+0x300>)
   12fcc:	f240 1369 	movw	r3, #361	; 0x169
   12fd0:	f005 f8ca 	bl	18168 <printk>
   12fd4:	4040      	eors	r0, r0
   12fd6:	f380 8811 	msr	BASEPRI, r0
   12fda:	f04f 0003 	mov.w	r0, #3
   12fde:	df02      	svc	2
   12fe0:	e721      	b.n	12e26 <lll_conn_isr_rx+0xae>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   12fe2:	f000 fbe7 	bl	137b4 <radio_pkt_decrypt_get>
			memcpy((void *)pdu_data_rx->lldata,
   12fe6:	7f72      	ldrb	r2, [r6, #29]
   12fe8:	1cc1      	adds	r1, r0, #3
   12fea:	f106 001f 	add.w	r0, r6, #31
   12fee:	f005 ff07 	bl	18e00 <memcpy>
   12ff2:	e72b      	b.n	12e4c <lll_conn_isr_rx+0xd4>
		LL_ASSERT(lll->handle != 0xFFFF);
   12ff4:	4a1e      	ldr	r2, [pc, #120]	; (13070 <lll_conn_isr_rx+0x2f8>)
   12ff6:	4924      	ldr	r1, [pc, #144]	; (13088 <lll_conn_isr_rx+0x310>)
   12ff8:	481f      	ldr	r0, [pc, #124]	; (13078 <lll_conn_isr_rx+0x300>)
   12ffa:	f44f 73bc 	mov.w	r3, #376	; 0x178
   12ffe:	f005 f8b3 	bl	18168 <printk>
   13002:	4040      	eors	r0, r0
   13004:	f380 8811 	msr	BASEPRI, r0
   13008:	f04f 0003 	mov.w	r0, #3
   1300c:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1300e:	89a0      	ldrh	r0, [r4, #12]
   13010:	e713      	b.n	12e3a <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   13012:	f36f 0382 	bfc	r3, #2, #1
   13016:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1301a:	f000 fbc3 	bl	137a4 <radio_pkt_empty_get>
	tx_release = NULL;
   1301e:	2500      	movs	r5, #0
   13020:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   13024:	7f32      	ldrb	r2, [r6, #28]
   13026:	e7a6      	b.n	12f76 <lll_conn_isr_rx+0x1fe>
				lll->packet_tx_head_offset = offset;
   13028:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   1302c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   13030:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   13032:	2500      	movs	r5, #0
   13034:	e79f      	b.n	12f76 <lll_conn_isr_rx+0x1fe>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   13036:	2003      	movs	r0, #3
   13038:	f7f7 faa0 	bl	a57c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1303c:	2800      	cmp	r0, #0
   1303e:	d0a0      	beq.n	12f82 <lll_conn_isr_rx+0x20a>
		lll->nesn++;
   13040:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   13044:	f083 0302 	eor.w	r3, r3, #2
   13048:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   1304c:	7f73      	ldrb	r3, [r6, #29]
   1304e:	2b00      	cmp	r3, #0
   13050:	d097      	beq.n	12f82 <lll_conn_isr_rx+0x20a>
			if (lll->enc_rx) {
   13052:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   13056:	0718      	lsls	r0, r3, #28
   13058:	d429      	bmi.n	130ae <lll_conn_isr_rx+0x336>
			*is_rx_enqueue = 1U;
   1305a:	2701      	movs	r7, #1
   1305c:	e792      	b.n	12f84 <lll_conn_isr_rx+0x20c>
   1305e:	bf00      	nop
   13060:	000129a1 	.word	0x000129a1
   13064:	2000279e 	.word	0x2000279e
   13068:	200027bf 	.word	0x200027bf
   1306c:	00012b89 	.word	0x00012b89
   13070:	0001d8dc 	.word	0x0001d8dc
   13074:	0001ce44 	.word	0x0001ce44
   13078:	0001cde4 	.word	0x0001cde4
   1307c:	0001d890 	.word	0x0001d890
   13080:	200027c0 	.word	0x200027c0
   13084:	0001d898 	.word	0x0001d898
   13088:	0001d930 	.word	0x0001d930
				lll->packet_tx_head_len = 0;
   1308c:	2200      	movs	r2, #0
   1308e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   13092:	f104 0148 	add.w	r1, r4, #72	; 0x48
   13096:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   13098:	f7f3 fe04 	bl	6ca4 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1309c:	9b01      	ldr	r3, [sp, #4]
   1309e:	7f32      	ldrb	r2, [r6, #28]
   130a0:	6819      	ldr	r1, [r3, #0]
   130a2:	6029      	str	r1, [r5, #0]
				tx->next = link;
   130a4:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   130a6:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   130a8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   130ac:	e763      	b.n	12f76 <lll_conn_isr_rx+0x1fe>
				done = radio_ccm_is_done();
   130ae:	f000 fdeb 	bl	13c88 <radio_ccm_is_done>
				LL_ASSERT(done);
   130b2:	b3c0      	cbz	r0, 13126 <lll_conn_isr_rx+0x3ae>
				bool mic_failure = !radio_ccm_mic_is_valid();
   130b4:	f000 fe0a 	bl	13ccc <radio_ccm_mic_is_valid>
				if (mic_failure &&
   130b8:	bb28      	cbnz	r0, 13106 <lll_conn_isr_rx+0x38e>
				    lll->ccm_rx.counter == 0 &&
   130ba:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   130be:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   130c2:	4313      	orrs	r3, r2
   130c4:	d104      	bne.n	130d0 <lll_conn_isr_rx+0x358>
				    (pdu_data_rx->ll_id ==
   130c6:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   130c8:	f003 0303 	and.w	r3, r3, #3
   130cc:	2b03      	cmp	r3, #3
   130ce:	d004      	beq.n	130da <lll_conn_isr_rx+0x362>
					mic_state = LLL_CONN_MIC_FAIL;
   130d0:	4b1d      	ldr	r3, [pc, #116]	; (13148 <lll_conn_isr_rx+0x3d0>)
   130d2:	2202      	movs	r2, #2
   130d4:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   130d6:	2700      	movs	r7, #0
   130d8:	e6a5      	b.n	12e26 <lll_conn_isr_rx+0xae>
						radio_pkt_scratch_get();
   130da:	f000 fb67 	bl	137ac <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   130de:	7843      	ldrb	r3, [r0, #1]
   130e0:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   130e2:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   130e4:	d8f4      	bhi.n	130d0 <lll_conn_isr_rx+0x358>
						memcpy(pdu_data_rx,
   130e6:	3303      	adds	r3, #3
   130e8:	b2da      	uxtb	r2, r3
   130ea:	4638      	mov	r0, r7
   130ec:	f005 fe88 	bl	18e00 <memcpy>
						lll->ccm_rx.counter--;
   130f0:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   130f4:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   130f8:	3b01      	subs	r3, #1
   130fa:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   130fe:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   13102:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   13106:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   1310a:	4a0f      	ldr	r2, [pc, #60]	; (13148 <lll_conn_isr_rx+0x3d0>)
				lll->ccm_rx.counter++;
   1310c:	3301      	adds	r3, #1
   1310e:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   13112:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   13116:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   1311a:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   1311e:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   13120:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   13122:	7017      	strb	r7, [r2, #0]
		if (err) {
   13124:	e72e      	b.n	12f84 <lll_conn_isr_rx+0x20c>
				LL_ASSERT(done);
   13126:	4a09      	ldr	r2, [pc, #36]	; (1314c <lll_conn_isr_rx+0x3d4>)
   13128:	4909      	ldr	r1, [pc, #36]	; (13150 <lll_conn_isr_rx+0x3d8>)
   1312a:	480a      	ldr	r0, [pc, #40]	; (13154 <lll_conn_isr_rx+0x3dc>)
   1312c:	f240 33ba 	movw	r3, #954	; 0x3ba
   13130:	f005 f81a 	bl	18168 <printk>
   13134:	4040      	eors	r0, r0
   13136:	f380 8811 	msr	BASEPRI, r0
   1313a:	f04f 0003 	mov.w	r0, #3
   1313e:	df02      	svc	2
   13140:	e7b8      	b.n	130b4 <lll_conn_isr_rx+0x33c>
	is_rx_enqueue = 0U;
   13142:	462f      	mov	r7, r5
   13144:	e649      	b.n	12dda <lll_conn_isr_rx+0x62>
   13146:	bf00      	nop
   13148:	200027c1 	.word	0x200027c1
   1314c:	0001d8dc 	.word	0x0001d8dc
   13150:	0001d928 	.word	0x0001d928
   13154:	0001cde4 	.word	0x0001cde4

00013158 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   13158:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1315a:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1315c:	89a2      	ldrh	r2, [r4, #12]
   1315e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13162:	429a      	cmp	r2, r3
{
   13164:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   13166:	f000 80d0 	beq.w	1330a <prepare_cb+0x1b2>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1316a:	4605      	mov	r5, r0
   1316c:	f7ff fc82 	bl	12a74 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   13170:	892b      	ldrh	r3, [r5, #8]
   13172:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   13174:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   13176:	441a      	add	r2, r3
   13178:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1317a:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1317c:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1317e:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   13180:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   13182:	1c41      	adds	r1, r0, #1
   13184:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   13186:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   13188:	f04f 0100 	mov.w	r1, #0
   1318c:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1318e:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   13192:	f100 808d 	bmi.w	132b0 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   13196:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   1319a:	460b      	mov	r3, r1
   1319c:	7fa1      	ldrb	r1, [r4, #30]
   1319e:	9000      	str	r0, [sp, #0]
   131a0:	f104 001f 	add.w	r0, r4, #31
   131a4:	f7fd f890 	bl	102c8 <lll_chan_sel_1>
   131a8:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   131aa:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   131ae:	4419      	add	r1, r3
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   131b0:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   131b4:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   131b6:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   131b8:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->periph.window_widening_max_us) {
   131ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   131bc:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   131be:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   131c0:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->periph.window_widening_event_us =
   131c4:	428b      	cmp	r3, r1
   131c6:	bf28      	it	cs
   131c8:	460b      	movcs	r3, r1
	if (!lll->empty) {
   131ca:	f012 0204 	ands.w	r2, r2, #4
		lll->periph.window_widening_event_us =
   131ce:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   131d0:	f000 808d 	beq.w	132ee <prepare_cb+0x196>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   131d4:	f000 f9e4 	bl	135a0 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   131d8:	2000      	movs	r0, #0
   131da:	f000 fa15 	bl	13608 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   131de:	4620      	mov	r0, r4
   131e0:	f7ff fc8c 	bl	12afc <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   131e4:	1d20      	adds	r0, r4, #4
   131e6:	f000 fa2d 	bl	13644 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   131ea:	8923      	ldrh	r3, [r4, #8]
   131ec:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   131ee:	f240 605b 	movw	r0, #1627	; 0x65b
   131f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   131f6:	f000 fabf 	bl	13778 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   131fa:	4630      	mov	r0, r6
   131fc:	f7fe fc52 	bl	11aa4 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   13200:	4621      	mov	r1, r4
   13202:	4846      	ldr	r0, [pc, #280]	; (1331c <prepare_cb+0x1c4>)
   13204:	f000 f98a 	bl	1351c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   13208:	2096      	movs	r0, #150	; 0x96
   1320a:	f000 fbf1 	bl	139f0 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1320e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   13212:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   13216:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1321a:	2100      	movs	r1, #0
   1321c:	f002 0207 	and.w	r2, r2, #7
   13220:	f000 0007 	and.w	r0, r0, #7
   13224:	f000 fb12 	bl	1384c <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   13228:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1322a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1322c:	4638      	mov	r0, r7
   1322e:	f7fe fc1b 	bl	11a68 <lll_event_offset_get>
   13232:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   13234:	686a      	ldr	r2, [r5, #4]
   13236:	f106 0109 	add.w	r1, r6, #9
   1323a:	2000      	movs	r0, #0
   1323c:	f000 fbe4 	bl	13a08 <radio_tmr_start>
   13240:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   13242:	f000 fc83 	bl	13b4c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   13246:	2000      	movs	r0, #0
   13248:	f000 fc9a 	bl	13b80 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1324c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1324e:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   13252:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13254:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   13258:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1325c:	2101      	movs	r1, #1
   1325e:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   13262:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   13264:	f000 fa3c 	bl	136e0 <radio_rx_ready_delay_get>
   13268:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   1326a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1326e:	f000 0007 	and.w	r0, r0, #7
   13272:	2802      	cmp	r0, #2
   13274:	d039      	beq.n	132ea <prepare_cb+0x192>
		return 40;
   13276:	2804      	cmp	r0, #4
   13278:	bf0c      	ite	eq
   1327a:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1327e:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   13280:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   13282:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   13284:	f000 fa2e 	bl	136e4 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   13288:	4428      	add	r0, r5
   1328a:	f000 fc51 	bl	13b30 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1328e:	89a1      	ldrh	r1, [r4, #12]
   13290:	3103      	adds	r1, #3
   13292:	4632      	mov	r2, r6
   13294:	b2c9      	uxtb	r1, r1
   13296:	4638      	mov	r0, r7
   13298:	f7fe fbf4 	bl	11a84 <lll_preempt_calc>
   1329c:	b180      	cbz	r0, 132c0 <prepare_cb+0x168>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1329e:	4820      	ldr	r0, [pc, #128]	; (13320 <prepare_cb+0x1c8>)
   132a0:	4621      	mov	r1, r4
   132a2:	f000 f93b 	bl	1351c <radio_isr_set>
		radio_disable();
   132a6:	f000 fa29 	bl	136fc <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   132aa:	2000      	movs	r0, #0
   132ac:	b003      	add	sp, #12
   132ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   132b0:	460a      	mov	r2, r1
   132b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   132b6:	8be1      	ldrh	r1, [r4, #30]
   132b8:	f7fd f84a 	bl	10350 <lll_chan_sel_2>
   132bc:	4606      	mov	r6, r0
   132be:	e774      	b.n	131aa <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   132c0:	4620      	mov	r0, r4
   132c2:	f7fe fb79 	bl	119b8 <lll_prepare_done>
		LL_ASSERT(!ret);
   132c6:	2800      	cmp	r0, #0
   132c8:	d0ef      	beq.n	132aa <prepare_cb+0x152>
   132ca:	4a16      	ldr	r2, [pc, #88]	; (13324 <prepare_cb+0x1cc>)
   132cc:	4916      	ldr	r1, [pc, #88]	; (13328 <prepare_cb+0x1d0>)
   132ce:	4817      	ldr	r0, [pc, #92]	; (1332c <prepare_cb+0x1d4>)
   132d0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   132d4:	f004 ff48 	bl	18168 <printk>
   132d8:	4040      	eors	r0, r0
   132da:	f380 8811 	msr	BASEPRI, r0
   132de:	f04f 0003 	mov.w	r0, #3
   132e2:	df02      	svc	2
}
   132e4:	2000      	movs	r0, #0
   132e6:	b003      	add	sp, #12
   132e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   132ea:	2318      	movs	r3, #24
   132ec:	e7c8      	b.n	13280 <prepare_cb+0x128>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   132ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   132f2:	f7f3 fccf 	bl	6c94 <memq_peek>
		if (!link) {
   132f6:	2800      	cmp	r0, #0
   132f8:	f47f af6c 	bne.w	131d4 <prepare_cb+0x7c>
			lll->empty = 1U;
   132fc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   13300:	f043 0304 	orr.w	r3, r3, #4
   13304:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   13308:	e764      	b.n	131d4 <prepare_cb+0x7c>
		radio_isr_set(lll_isr_early_abort, lll);
   1330a:	4809      	ldr	r0, [pc, #36]	; (13330 <prepare_cb+0x1d8>)
   1330c:	4621      	mov	r1, r4
   1330e:	f000 f905 	bl	1351c <radio_isr_set>
		radio_disable();
   13312:	f000 f9f3 	bl	136fc <radio_disable>
}
   13316:	2000      	movs	r0, #0
   13318:	b003      	add	sp, #12
   1331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1331c:	00012d79 	.word	0x00012d79
   13320:	00011bd9 	.word	0x00011bd9
   13324:	0001d948 	.word	0x0001d948
   13328:	0001d080 	.word	0x0001d080
   1332c:	0001cde4 	.word	0x0001cde4
   13330:	00011bfd 	.word	0x00011bfd

00013334 <lll_periph_prepare>:
{
   13334:	b510      	push	{r4, lr}
   13336:	b082      	sub	sp, #8
   13338:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1333a:	f7fe fdaf 	bl	11e9c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1333e:	2800      	cmp	r0, #0
   13340:	db25      	blt.n	1338e <lll_periph_prepare+0x5a>
	lll = p->param;
   13342:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   13344:	8920      	ldrh	r0, [r4, #8]
   13346:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   13348:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   1334a:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->periph.window_widening_max_us) {
   1334e:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   13350:	4413      	add	r3, r2
		lll->periph.window_widening_prepare_us =
   13352:	4283      	cmp	r3, r0
   13354:	bf28      	it	cs
   13356:	4603      	movcs	r3, r0
   13358:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1335a:	4a13      	ldr	r2, [pc, #76]	; (133a8 <lll_periph_prepare+0x74>)
   1335c:	4913      	ldr	r1, [pc, #76]	; (133ac <lll_periph_prepare+0x78>)
   1335e:	4814      	ldr	r0, [pc, #80]	; (133b0 <lll_periph_prepare+0x7c>)
   13360:	9400      	str	r4, [sp, #0]
   13362:	2300      	movs	r3, #0
   13364:	f7f7 fc1a 	bl	ab9c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   13368:	b108      	cbz	r0, 1336e <lll_periph_prepare+0x3a>
   1336a:	3077      	adds	r0, #119	; 0x77
   1336c:	d101      	bne.n	13372 <lll_periph_prepare+0x3e>
}
   1336e:	b002      	add	sp, #8
   13370:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   13372:	4a10      	ldr	r2, [pc, #64]	; (133b4 <lll_periph_prepare+0x80>)
   13374:	4910      	ldr	r1, [pc, #64]	; (133b8 <lll_periph_prepare+0x84>)
   13376:	4811      	ldr	r0, [pc, #68]	; (133bc <lll_periph_prepare+0x88>)
   13378:	235e      	movs	r3, #94	; 0x5e
   1337a:	f004 fef5 	bl	18168 <printk>
   1337e:	4040      	eors	r0, r0
   13380:	f380 8811 	msr	BASEPRI, r0
   13384:	f04f 0003 	mov.w	r0, #3
   13388:	df02      	svc	2
}
   1338a:	b002      	add	sp, #8
   1338c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1338e:	4a09      	ldr	r2, [pc, #36]	; (133b4 <lll_periph_prepare+0x80>)
   13390:	490b      	ldr	r1, [pc, #44]	; (133c0 <lll_periph_prepare+0x8c>)
   13392:	480a      	ldr	r0, [pc, #40]	; (133bc <lll_periph_prepare+0x88>)
   13394:	234d      	movs	r3, #77	; 0x4d
   13396:	f004 fee7 	bl	18168 <printk>
   1339a:	4040      	eors	r0, r0
   1339c:	f380 8811 	msr	BASEPRI, r0
   133a0:	f04f 0003 	mov.w	r0, #3
   133a4:	df02      	svc	2
   133a6:	e7cc      	b.n	13342 <lll_periph_prepare+0xe>
   133a8:	00013159 	.word	0x00013159
   133ac:	00012a9d 	.word	0x00012a9d
   133b0:	00011a61 	.word	0x00011a61
   133b4:	0001d948 	.word	0x0001d948
   133b8:	0001d8c8 	.word	0x0001d8c8
   133bc:	0001cde4 	.word	0x0001cde4
   133c0:	0001d7f4 	.word	0x0001d7f4

000133c4 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   133c4:	4b05      	ldr	r3, [pc, #20]	; (133dc <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   133c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   133ca:	2100      	movs	r1, #0
   133cc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   133d0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   133d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   133d8:	4770      	bx	lr
   133da:	bf00      	nop
   133dc:	4000b000 	.word	0x4000b000

000133e0 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   133e0:	4b05      	ldr	r3, [pc, #20]	; (133f8 <cntr_start+0x18>)
   133e2:	7818      	ldrb	r0, [r3, #0]
   133e4:	1c42      	adds	r2, r0, #1
   133e6:	701a      	strb	r2, [r3, #0]
   133e8:	b918      	cbnz	r0, 133f2 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   133ea:	4b04      	ldr	r3, [pc, #16]	; (133fc <cntr_start+0x1c>)
   133ec:	2201      	movs	r2, #1
   133ee:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   133f0:	4770      	bx	lr
		return 1;
   133f2:	2001      	movs	r0, #1
}
   133f4:	4770      	bx	lr
   133f6:	bf00      	nop
   133f8:	200027c2 	.word	0x200027c2
   133fc:	4000b000 	.word	0x4000b000

00013400 <cntr_stop>:

uint32_t cntr_stop(void)
{
   13400:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   13402:	4c0d      	ldr	r4, [pc, #52]	; (13438 <cntr_stop+0x38>)
   13404:	7820      	ldrb	r0, [r4, #0]
   13406:	b148      	cbz	r0, 1341c <cntr_stop+0x1c>

	if (--_refcount) {
   13408:	3801      	subs	r0, #1
   1340a:	b2c0      	uxtb	r0, r0
   1340c:	7020      	strb	r0, [r4, #0]
   1340e:	b918      	cbnz	r0, 13418 <cntr_stop+0x18>
   13410:	4b0a      	ldr	r3, [pc, #40]	; (1343c <cntr_stop+0x3c>)
   13412:	2201      	movs	r2, #1
   13414:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   13416:	bd10      	pop	{r4, pc}
		return 1;
   13418:	2001      	movs	r0, #1
}
   1341a:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1341c:	4a08      	ldr	r2, [pc, #32]	; (13440 <cntr_stop+0x40>)
   1341e:	4909      	ldr	r1, [pc, #36]	; (13444 <cntr_stop+0x44>)
   13420:	4809      	ldr	r0, [pc, #36]	; (13448 <cntr_stop+0x48>)
   13422:	232d      	movs	r3, #45	; 0x2d
   13424:	f004 fea0 	bl	18168 <printk>
   13428:	4040      	eors	r0, r0
   1342a:	f380 8811 	msr	BASEPRI, r0
   1342e:	f04f 0003 	mov.w	r0, #3
   13432:	df02      	svc	2
	if (--_refcount) {
   13434:	7820      	ldrb	r0, [r4, #0]
   13436:	e7e7      	b.n	13408 <cntr_stop+0x8>
   13438:	200027c2 	.word	0x200027c2
   1343c:	4000b000 	.word	0x4000b000
   13440:	0001d99c 	.word	0x0001d99c
   13444:	0001d9e8 	.word	0x0001d9e8
   13448:	0001cde4 	.word	0x0001cde4

0001344c <cntr_cnt_get>:
     return p_reg->COUNTER;
   1344c:	4b01      	ldr	r3, [pc, #4]	; (13454 <cntr_cnt_get+0x8>)
   1344e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   13452:	4770      	bx	lr
   13454:	4000b000 	.word	0x4000b000

00013458 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   13458:	4b02      	ldr	r3, [pc, #8]	; (13464 <cntr_cmp_set+0xc>)
   1345a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1345e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   13462:	4770      	bx	lr
   13464:	4000b000 	.word	0x4000b000

00013468 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13468:	4b12      	ldr	r3, [pc, #72]	; (134b4 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1346a:	b430      	push	{r4, r5}
   1346c:	2101      	movs	r1, #1
   1346e:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   13470:	2000      	movs	r0, #0
   13472:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   13474:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   13478:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1347c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   13480:	6019      	str	r1, [r3, #0]
}
   13482:	e005      	b.n	13490 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   13484:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   13488:	b932      	cbnz	r2, 13498 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1348a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1348e:	b11a      	cbz	r2, 13498 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   13490:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   13494:	2a00      	cmp	r2, #0
   13496:	d0f5      	beq.n	13484 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13498:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1349a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1349e:	2a00      	cmp	r2, #0
   134a0:	d1e7      	bne.n	13472 <do_ecb+0xa>
   134a2:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   134a6:	2d00      	cmp	r5, #0
   134a8:	d0e3      	beq.n	13472 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   134aa:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   134ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   134b0:	4770      	bx	lr
   134b2:	bf00      	nop
   134b4:	4000e000 	.word	0x4000e000

000134b8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   134b8:	b570      	push	{r4, r5, r6, lr}
   134ba:	b08c      	sub	sp, #48	; 0x30
   134bc:	460e      	mov	r6, r1
   134be:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   134c0:	4601      	mov	r1, r0
   134c2:	2210      	movs	r2, #16
   134c4:	4668      	mov	r0, sp
{
   134c6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   134c8:	f7f3 fbb2 	bl	6c30 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   134cc:	2210      	movs	r2, #16
   134ce:	eb0d 0002 	add.w	r0, sp, r2
   134d2:	4631      	mov	r1, r6
   134d4:	f7f3 fbac 	bl	6c30 <mem_rcopy>

	do_ecb(&ecb);
   134d8:	4668      	mov	r0, sp
   134da:	f7ff ffc5 	bl	13468 <do_ecb>

	if (cipher_text_le) {
   134de:	b125      	cbz	r5, 134ea <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   134e0:	2210      	movs	r2, #16
   134e2:	a908      	add	r1, sp, #32
   134e4:	4628      	mov	r0, r5
   134e6:	f7f3 fba3 	bl	6c30 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   134ea:	b124      	cbz	r4, 134f6 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   134ec:	2210      	movs	r2, #16
   134ee:	a908      	add	r1, sp, #32
   134f0:	4620      	mov	r0, r4
   134f2:	f005 fc85 	bl	18e00 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   134f6:	b00c      	add	sp, #48	; 0x30
   134f8:	bd70      	pop	{r4, r5, r6, pc}
   134fa:	bf00      	nop

000134fc <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   134fc:	4b04      	ldr	r3, [pc, #16]	; (13510 <isr_radio+0x14>)
   134fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   13502:	b123      	cbz	r3, 1350e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   13504:	4a03      	ldr	r2, [pc, #12]	; (13514 <isr_radio+0x18>)
   13506:	4b04      	ldr	r3, [pc, #16]	; (13518 <isr_radio+0x1c>)
   13508:	6810      	ldr	r0, [r2, #0]
   1350a:	681b      	ldr	r3, [r3, #0]
   1350c:	4718      	bx	r3
}
   1350e:	4770      	bx	lr
   13510:	40001000 	.word	0x40001000
   13514:	20002500 	.word	0x20002500
   13518:	200024fc 	.word	0x200024fc

0001351c <radio_isr_set>:
{
   1351c:	b538      	push	{r3, r4, r5, lr}
   1351e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   13520:	2001      	movs	r0, #1
{
   13522:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   13524:	f7ef fdbc 	bl	30a0 <arch_irq_disable>
	isr_cb = cb;
   13528:	4b08      	ldr	r3, [pc, #32]	; (1354c <radio_isr_set+0x30>)
	isr_cb_param = param;
   1352a:	4a09      	ldr	r2, [pc, #36]	; (13550 <radio_isr_set+0x34>)
	isr_cb = cb;
   1352c:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1352e:	4909      	ldr	r1, [pc, #36]	; (13554 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13530:	4b09      	ldr	r3, [pc, #36]	; (13558 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   13532:	6015      	str	r5, [r2, #0]
   13534:	2010      	movs	r0, #16
   13536:	2202      	movs	r2, #2
   13538:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1353c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   13540:	2001      	movs	r0, #1
}
   13542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   13546:	f7ef bd9b 	b.w	3080 <arch_irq_enable>
   1354a:	bf00      	nop
   1354c:	200024fc 	.word	0x200024fc
   13550:	20002500 	.word	0x20002500
   13554:	40001000 	.word	0x40001000
   13558:	e000e100 	.word	0xe000e100

0001355c <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1355c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   13564:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   13566:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1356a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1356e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   13572:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   13576:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1357a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1357e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   13582:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   13586:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1358a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1358e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   13592:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   13596:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1359a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1359e:	4770      	bx	lr

000135a0 <radio_reset>:
{
   135a0:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   135a2:	2001      	movs	r0, #1
   135a4:	f7ef fd7c 	bl	30a0 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   135a8:	4a0d      	ldr	r2, [pc, #52]	; (135e0 <radio_reset+0x40>)
   135aa:	2100      	movs	r1, #0
   135ac:	2301      	movs	r3, #1
   135ae:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   135b2:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   135b6:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   135ba:	490a      	ldr	r1, [pc, #40]	; (135e4 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   135bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   135c0:	f023 0301 	bic.w	r3, r3, #1
   135c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   135c8:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   135cc:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   135d0:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   135d4:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   135d8:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   135dc:	bd10      	pop	{r4, pc}
   135de:	bf00      	nop
   135e0:	40001000 	.word	0x40001000
   135e4:	4001f000 	.word	0x4001f000

000135e8 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   135e8:	4b06      	ldr	r3, [pc, #24]	; (13604 <radio_phy_set+0x1c>)
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   135ea:	2802      	cmp	r0, #2
   135ec:	bf14      	ite	ne
   135ee:	2203      	movne	r2, #3
   135f0:	2204      	moveq	r2, #4
   135f2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   135f6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   135fa:	f042 0201 	orr.w	r2, r2, #1
   135fe:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   13602:	4770      	bx	lr
   13604:	40001000 	.word	0x40001000

00013608 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   13608:	4b01      	ldr	r3, [pc, #4]	; (13610 <radio_tx_power_set+0x8>)
   1360a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1360e:	4770      	bx	lr
   13610:	40001000 	.word	0x40001000

00013614 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   13614:	4b01      	ldr	r3, [pc, #4]	; (1361c <radio_freq_chan_set+0x8>)
   13616:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1361a:	4770      	bx	lr
   1361c:	40001000 	.word	0x40001000

00013620 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   13620:	4b07      	ldr	r3, [pc, #28]	; (13640 <radio_whiten_iv_set+0x20>)
   13622:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   13626:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1362a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1362e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   13632:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   13636:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1363a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1363e:	4770      	bx	lr
   13640:	40001000 	.word	0x40001000

00013644 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   13644:	4a0a      	ldr	r2, [pc, #40]	; (13670 <radio_aa_set+0x2c>)
   13646:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   13648:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1364a:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1364e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   13652:	78c3      	ldrb	r3, [r0, #3]
   13654:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   13658:	7843      	ldrb	r3, [r0, #1]
   1365a:	f890 c002 	ldrb.w	ip, [r0, #2]
   1365e:	7801      	ldrb	r1, [r0, #0]
   13660:	041b      	lsls	r3, r3, #16
   13662:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   13666:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1366a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1366e:	4770      	bx	lr
   13670:	40001000 	.word	0x40001000

00013674 <radio_pkt_configure>:
	switch (phy) {
   13674:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   13678:	2b02      	cmp	r3, #2
   1367a:	bf14      	ite	ne
   1367c:	f04f 0c00 	movne.w	ip, #0
   13680:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   13684:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   13686:	bf48      	it	mi
   13688:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   1368c:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   13690:	4b0a      	ldr	r3, [pc, #40]	; (136bc <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   13692:	4a0b      	ldr	r2, [pc, #44]	; (136c0 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   13694:	ea40 000c 	orr.w	r0, r0, ip
   13698:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   1369c:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   136a0:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   136a4:	4002      	ands	r2, r0
   136a6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   136aa:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   136ae:	4311      	orrs	r1, r2
   136b0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   136b4:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   136b8:	4770      	bx	lr
   136ba:	bf00      	nop
   136bc:	40001000 	.word	0x40001000
   136c0:	fef80000 	.word	0xfef80000

000136c4 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   136c4:	4b01      	ldr	r3, [pc, #4]	; (136cc <radio_pkt_rx_set+0x8>)
   136c6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   136ca:	4770      	bx	lr
   136cc:	40001000 	.word	0x40001000

000136d0 <radio_pkt_tx_set>:
   136d0:	4b01      	ldr	r3, [pc, #4]	; (136d8 <radio_pkt_tx_set+0x8>)
   136d2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   136d6:	4770      	bx	lr
   136d8:	40001000 	.word	0x40001000

000136dc <radio_tx_chain_delay_get>:
}
   136dc:	2001      	movs	r0, #1
   136de:	4770      	bx	lr

000136e0 <radio_rx_ready_delay_get>:
}
   136e0:	2029      	movs	r0, #41	; 0x29
   136e2:	4770      	bx	lr

000136e4 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_US;
   136e4:	2802      	cmp	r0, #2
}
   136e6:	bf14      	ite	ne
   136e8:	200a      	movne	r0, #10
   136ea:	2006      	moveq	r0, #6
   136ec:	4770      	bx	lr
   136ee:	bf00      	nop

000136f0 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   136f0:	4b01      	ldr	r3, [pc, #4]	; (136f8 <radio_tx_enable+0x8>)
   136f2:	2201      	movs	r2, #1
   136f4:	601a      	str	r2, [r3, #0]
}
   136f6:	4770      	bx	lr
   136f8:	40001000 	.word	0x40001000

000136fc <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   136fc:	4a07      	ldr	r2, [pc, #28]	; (1371c <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   136fe:	4908      	ldr	r1, [pc, #32]	; (13720 <radio_disable+0x24>)
{
   13700:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   13702:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   13704:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   13708:	2000      	movs	r0, #0
   1370a:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1370e:	6053      	str	r3, [r2, #4]
}
   13710:	bc10      	pop	{r4}
   13712:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   13714:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   13718:	610b      	str	r3, [r1, #16]
}
   1371a:	4770      	bx	lr
   1371c:	4001f000 	.word	0x4001f000
   13720:	40001000 	.word	0x40001000

00013724 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   13724:	4b04      	ldr	r3, [pc, #16]	; (13738 <radio_status_reset+0x14>)
   13726:	2200      	movs	r2, #0
   13728:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1372c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   13730:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   13734:	4770      	bx	lr
   13736:	bf00      	nop
   13738:	40001000 	.word	0x40001000

0001373c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1373c:	4b03      	ldr	r3, [pc, #12]	; (1374c <radio_is_ready+0x10>)
   1373e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   13742:	3800      	subs	r0, #0
   13744:	bf18      	it	ne
   13746:	2001      	movne	r0, #1
   13748:	4770      	bx	lr
   1374a:	bf00      	nop
   1374c:	40001000 	.word	0x40001000

00013750 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   13750:	4b03      	ldr	r3, [pc, #12]	; (13760 <radio_is_done+0x10>)
   13752:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   13756:	3800      	subs	r0, #0
   13758:	bf18      	it	ne
   1375a:	2001      	movne	r0, #1
   1375c:	4770      	bx	lr
   1375e:	bf00      	nop
   13760:	40001000 	.word	0x40001000

00013764 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   13764:	4b03      	ldr	r3, [pc, #12]	; (13774 <radio_is_idle+0x10>)
   13766:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1376a:	fab0 f080 	clz	r0, r0
   1376e:	0940      	lsrs	r0, r0, #5
   13770:	4770      	bx	lr
   13772:	bf00      	nop
   13774:	40001000 	.word	0x40001000

00013778 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   13778:	4b04      	ldr	r3, [pc, #16]	; (1378c <radio_crc_configure+0x14>)
   1377a:	f240 1203 	movw	r2, #259	; 0x103
   1377e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   13782:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   13786:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1378a:	4770      	bx	lr
   1378c:	40001000 	.word	0x40001000

00013790 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   13790:	4b03      	ldr	r3, [pc, #12]	; (137a0 <radio_crc_is_valid+0x10>)
   13792:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13796:	3800      	subs	r0, #0
   13798:	bf18      	it	ne
   1379a:	2001      	movne	r0, #1
   1379c:	4770      	bx	lr
   1379e:	bf00      	nop
   137a0:	40001000 	.word	0x40001000

000137a4 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   137a4:	4800      	ldr	r0, [pc, #0]	; (137a8 <radio_pkt_empty_get+0x4>)
   137a6:	4770      	bx	lr
   137a8:	200023f4 	.word	0x200023f4

000137ac <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   137ac:	4800      	ldr	r0, [pc, #0]	; (137b0 <radio_pkt_scratch_get+0x4>)
   137ae:	4770      	bx	lr
   137b0:	200023f8 	.word	0x200023f8

000137b4 <radio_pkt_decrypt_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_decrypt_get(void)
{
	return _pkt_decrypt;
}
   137b4:	4800      	ldr	r0, [pc, #0]	; (137b8 <radio_pkt_decrypt_get+0x4>)
   137b6:	4770      	bx	lr
   137b8:	200022f0 	.word	0x200022f0

000137bc <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   137bc:	4b1d      	ldr	r3, [pc, #116]	; (13834 <radio_switch_complete_and_rx+0x78>)
{
   137be:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   137c0:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   137c2:	4d1d      	ldr	r5, [pc, #116]	; (13838 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   137c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   137c8:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   137ca:	4e1c      	ldr	r6, [pc, #112]	; (1383c <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   137cc:	4c1c      	ldr	r4, [pc, #112]	; (13840 <radio_switch_complete_and_rx+0x84>)
   137ce:	4f1d      	ldr	r7, [pc, #116]	; (13844 <radio_switch_complete_and_rx+0x88>)
   137d0:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   137d4:	f102 030c 	add.w	r3, r2, #12
   137d8:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   137da:	00d0      	lsls	r0, r2, #3
   137dc:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   137de:	0091      	lsls	r1, r2, #2
   137e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   137e4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   137e8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   137ec:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   137f0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   137f4:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   137f8:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   137fc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13800:	4811      	ldr	r0, [pc, #68]	; (13848 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13802:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13806:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1380a:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1380e:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   13810:	bf8a      	itet	hi
   13812:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   13816:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   13818:	3b2d      	subhi	r3, #45	; 0x2d
   1381a:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1381e:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   13820:	4b06      	ldr	r3, [pc, #24]	; (1383c <radio_switch_complete_and_rx+0x80>)
   13822:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   13826:	f002 0201 	and.w	r2, r2, #1
   1382a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1382e:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   13830:	bcf0      	pop	{r4, r5, r6, r7}
   13832:	4770      	bx	lr
   13834:	40001000 	.word	0x40001000
   13838:	200027c3 	.word	0x200027c3
   1383c:	4001f000 	.word	0x4001f000
   13840:	40009140 	.word	0x40009140
   13844:	4000110c 	.word	0x4000110c
   13848:	40001004 	.word	0x40001004

0001384c <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   1384c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   13850:	4e28      	ldr	r6, [pc, #160]	; (138f4 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   13852:	4c29      	ldr	r4, [pc, #164]	; (138f8 <radio_switch_complete_and_tx+0xac>)
   13854:	4f29      	ldr	r7, [pc, #164]	; (138fc <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13856:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 13900 <radio_switch_complete_and_tx+0xb4>
   1385a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 13904 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1385e:	2303      	movs	r3, #3
   13860:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   13864:	7821      	ldrb	r1, [r4, #0]
   13866:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1386a:	f101 030c 	add.w	r3, r1, #12
   1386e:	b2db      	uxtb	r3, r3
   13870:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   13872:	00cd      	lsls	r5, r1, #3
   13874:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13878:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1387c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   13880:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   13884:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13888:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1388c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   13890:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13894:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   13898:	f24a 234e 	movw	r3, #41550	; 0xa24e
   1389c:	2a02      	cmp	r2, #2
   1389e:	bf08      	it	eq
   138a0:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   138a2:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   138a6:	f242 42b8 	movw	r2, #9400	; 0x24b8
   138aa:	f241 554a 	movw	r5, #5450	; 0x154a
   138ae:	2802      	cmp	r0, #2
   138b0:	bf08      	it	eq
   138b2:	462a      	moveq	r2, r5
   138b4:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   138b8:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   138bc:	4413      	add	r3, r2
   138be:	4a12      	ldr	r2, [pc, #72]	; (13908 <radio_switch_complete_and_tx+0xbc>)
   138c0:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   138c4:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   138c8:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   138cc:	bf85      	ittet	hi
   138ce:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   138d0:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   138d4:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   138d6:	1a1b      	subhi	r3, r3, r0
   138d8:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   138dc:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   138de:	4b08      	ldr	r3, [pc, #32]	; (13900 <radio_switch_complete_and_tx+0xb4>)
   138e0:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   138e4:	f001 0101 	and.w	r1, r1, #1
   138e8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   138ec:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   138ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138f2:	bf00      	nop
   138f4:	40001000 	.word	0x40001000
   138f8:	200027c3 	.word	0x200027c3
   138fc:	40009140 	.word	0x40009140
   13900:	4001f000 	.word	0x4001f000
   13904:	4000110c 	.word	0x4000110c
   13908:	10624dd3 	.word	0x10624dd3

0001390c <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   1390c:	4904      	ldr	r1, [pc, #16]	; (13920 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1390e:	4b05      	ldr	r3, [pc, #20]	; (13924 <radio_switch_complete_and_disable+0x18>)
   13910:	2003      	movs	r0, #3
   13912:	f44f 6210 	mov.w	r2, #2304	; 0x900
   13916:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1391a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1391e:	4770      	bx	lr
   13920:	40001000 	.word	0x40001000
   13924:	4001f000 	.word	0x4001f000

00013928 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   13928:	4b02      	ldr	r3, [pc, #8]	; (13934 <radio_rssi_status_reset+0xc>)
   1392a:	2200      	movs	r2, #0
   1392c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   13930:	4770      	bx	lr
   13932:	bf00      	nop
   13934:	40001000 	.word	0x40001000

00013938 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   13938:	4b03      	ldr	r3, [pc, #12]	; (13948 <radio_rssi_is_ready+0x10>)
   1393a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1393e:	3800      	subs	r0, #0
   13940:	bf18      	it	ne
   13942:	2001      	movne	r0, #1
   13944:	4770      	bx	lr
   13946:	bf00      	nop
   13948:	40001000 	.word	0x40001000

0001394c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1394c:	b410      	push	{r4}
   1394e:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   13952:	ea4f 038c 	mov.w	r3, ip, lsl #2
   13956:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1395a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1395e:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   13960:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   13964:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   13968:	8894      	ldrh	r4, [r2, #4]
   1396a:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1396e:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   13972:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   13976:	d1ec      	bne.n	13952 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   13978:	4b03      	ldr	r3, [pc, #12]	; (13988 <radio_filter_configure+0x3c>)
}
   1397a:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1397c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   13980:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   13984:	4770      	bx	lr
   13986:	bf00      	nop
   13988:	40001000 	.word	0x40001000

0001398c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1398c:	4a03      	ldr	r2, [pc, #12]	; (1399c <radio_filter_disable+0x10>)
   1398e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   13992:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   13996:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1399a:	4770      	bx	lr
   1399c:	40001000 	.word	0x40001000

000139a0 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   139a0:	4b02      	ldr	r3, [pc, #8]	; (139ac <radio_filter_status_reset+0xc>)
   139a2:	2200      	movs	r2, #0
   139a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   139a8:	4770      	bx	lr
   139aa:	bf00      	nop
   139ac:	40001000 	.word	0x40001000

000139b0 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   139b0:	4b03      	ldr	r3, [pc, #12]	; (139c0 <radio_filter_has_match+0x10>)
   139b2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   139b6:	3800      	subs	r0, #0
   139b8:	bf18      	it	ne
   139ba:	2001      	movne	r0, #1
   139bc:	4770      	bx	lr
   139be:	bf00      	nop
   139c0:	40001000 	.word	0x40001000

000139c4 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   139c4:	4b01      	ldr	r3, [pc, #4]	; (139cc <radio_filter_match_get+0x8>)
   139c6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   139ca:	4770      	bx	lr
   139cc:	40001000 	.word	0x40001000

000139d0 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   139d0:	4904      	ldr	r1, [pc, #16]	; (139e4 <radio_tmr_status_reset+0x14>)
   139d2:	4b05      	ldr	r3, [pc, #20]	; (139e8 <radio_tmr_status_reset+0x18>)
   139d4:	4a05      	ldr	r2, [pc, #20]	; (139ec <radio_tmr_status_reset+0x1c>)
   139d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   139da:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   139de:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   139e2:	4770      	bx	lr
   139e4:	4000b000 	.word	0x4000b000
   139e8:	4001f000 	.word	0x4001f000
   139ec:	0e7000c0 	.word	0x0e7000c0

000139f0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   139f0:	4b03      	ldr	r3, [pc, #12]	; (13a00 <radio_tmr_tifs_set+0x10>)
   139f2:	4a04      	ldr	r2, [pc, #16]	; (13a04 <radio_tmr_tifs_set+0x14>)
   139f4:	781b      	ldrb	r3, [r3, #0]
   139f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   139fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   139fe:	4770      	bx	lr
   13a00:	200027c3 	.word	0x200027c3
   13a04:	40009000 	.word	0x40009000

00013a08 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   13a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   13a0c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   13a10:	4d31      	ldr	r5, [pc, #196]	; (13ad8 <radio_tmr_start+0xd0>)
   13a12:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   13a16:	42ab      	cmp	r3, r5
{
   13a18:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   13a1a:	d906      	bls.n	13a2a <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   13a1c:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   13a20:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   13a24:	3901      	subs	r1, #1
		remainder += 30517578UL;
   13a26:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13a2a:	4b2c      	ldr	r3, [pc, #176]	; (13adc <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   13a2c:	482c      	ldr	r0, [pc, #176]	; (13ae0 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   13a2e:	4d2d      	ldr	r5, [pc, #180]	; (13ae4 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13a30:	4e2d      	ldr	r6, [pc, #180]	; (13ae8 <radio_tmr_start+0xe0>)
   13a32:	2701      	movs	r7, #1
   13a34:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   13a36:	2700      	movs	r7, #0
   13a38:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   13a3c:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   13a40:	2704      	movs	r7, #4
   13a42:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   13a46:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   13a48:	2702      	movs	r7, #2
   13a4a:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   13a4e:	4a27      	ldr	r2, [pc, #156]	; (13aec <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   13a50:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   13a54:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   13a58:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   13a5c:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   13a60:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13a62:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13a66:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   13a6a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   13a6e:	bb64      	cbnz	r4, 13aca <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   13a70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   13a74:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   13a78:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   13a7c:	4b1b      	ldr	r3, [pc, #108]	; (13aec <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13a7e:	4a1c      	ldr	r2, [pc, #112]	; (13af0 <radio_tmr_start+0xe8>)
   13a80:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   13a84:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   13a86:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13a88:	f8df 8068 	ldr.w	r8, [pc, #104]	; 13af4 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13a8c:	f8df e068 	ldr.w	lr, [pc, #104]	; 13af8 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13a90:	f8df c068 	ldr.w	ip, [pc, #104]	; 13afc <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13a94:	4f1a      	ldr	r7, [pc, #104]	; (13b00 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13a96:	4e1b      	ldr	r6, [pc, #108]	; (13b04 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13a98:	4d1b      	ldr	r5, [pc, #108]	; (13b08 <radio_tmr_start+0x100>)
   13a9a:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   13a9c:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   13aa0:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   13aa4:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   13aa8:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   13aac:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13aae:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13ab2:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13ab6:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13aba:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13abe:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13ac2:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   13ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   13aca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   13ace:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   13ad2:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   13ad6:	e7d1      	b.n	13a7c <radio_tmr_start+0x74>
   13ad8:	7ff0bdbf 	.word	0x7ff0bdbf
   13adc:	40008000 	.word	0x40008000
   13ae0:	431bde83 	.word	0x431bde83
   13ae4:	4000b000 	.word	0x4000b000
   13ae8:	4000b148 	.word	0x4000b148
   13aec:	4001f000 	.word	0x4001f000
   13af0:	40009000 	.word	0x40009000
   13af4:	4000110c 	.word	0x4000110c
   13af8:	4000900c 	.word	0x4000900c
   13afc:	40009140 	.word	0x40009140
   13b00:	4001f004 	.word	0x4001f004
   13b04:	40009144 	.word	0x40009144
   13b08:	4001f00c 	.word	0x4001f00c

00013b0c <radio_tmr_start_get>:
    return p_reg->CC[ch];
   13b0c:	4b01      	ldr	r3, [pc, #4]	; (13b14 <radio_tmr_start_get+0x8>)
   13b0e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   13b12:	4770      	bx	lr
   13b14:	4000b000 	.word	0x4000b000

00013b18 <radio_tmr_stop>:
   13b18:	4903      	ldr	r1, [pc, #12]	; (13b28 <radio_tmr_stop+0x10>)
   13b1a:	4a04      	ldr	r2, [pc, #16]	; (13b2c <radio_tmr_stop+0x14>)
   13b1c:	2301      	movs	r3, #1
   13b1e:	604b      	str	r3, [r1, #4]
   13b20:	610b      	str	r3, [r1, #16]
   13b22:	6053      	str	r3, [r2, #4]
   13b24:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   13b26:	4770      	bx	lr
   13b28:	40008000 	.word	0x40008000
   13b2c:	40009000 	.word	0x40009000

00013b30 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   13b30:	4904      	ldr	r1, [pc, #16]	; (13b44 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   13b32:	4b05      	ldr	r3, [pc, #20]	; (13b48 <radio_tmr_hcto_configure+0x18>)
   13b34:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   13b38:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   13b3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   13b40:	4770      	bx	lr
   13b42:	bf00      	nop
   13b44:	40008000 	.word	0x40008000
   13b48:	4001f000 	.word	0x4001f000

00013b4c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13b4c:	4b05      	ldr	r3, [pc, #20]	; (13b64 <radio_tmr_aa_capture+0x18>)
   13b4e:	4806      	ldr	r0, [pc, #24]	; (13b68 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13b50:	4906      	ldr	r1, [pc, #24]	; (13b6c <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   13b52:	4a07      	ldr	r2, [pc, #28]	; (13b70 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   13b54:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   13b58:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   13b5c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   13b60:	4770      	bx	lr
   13b62:	bf00      	nop
   13b64:	4001f000 	.word	0x4001f000
   13b68:	40001100 	.word	0x40001100
   13b6c:	40008040 	.word	0x40008040
   13b70:	04000080 	.word	0x04000080

00013b74 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   13b74:	4b01      	ldr	r3, [pc, #4]	; (13b7c <radio_tmr_aa_get+0x8>)
   13b76:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   13b7a:	4770      	bx	lr
   13b7c:	40008000 	.word	0x40008000

00013b80 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   13b80:	4b01      	ldr	r3, [pc, #4]	; (13b88 <radio_tmr_aa_save+0x8>)
   13b82:	6018      	str	r0, [r3, #0]
}
   13b84:	4770      	bx	lr
   13b86:	bf00      	nop
   13b88:	20002504 	.word	0x20002504

00013b8c <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   13b8c:	4b01      	ldr	r3, [pc, #4]	; (13b94 <radio_tmr_aa_restore+0x8>)
}
   13b8e:	6818      	ldr	r0, [r3, #0]
   13b90:	4770      	bx	lr
   13b92:	bf00      	nop
   13b94:	20002504 	.word	0x20002504

00013b98 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   13b98:	4b01      	ldr	r3, [pc, #4]	; (13ba0 <radio_tmr_ready_get+0x8>)
   13b9a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   13b9e:	4770      	bx	lr
   13ba0:	40008000 	.word	0x40008000

00013ba4 <radio_tmr_end_capture>:
   13ba4:	4b02      	ldr	r3, [pc, #8]	; (13bb0 <radio_tmr_end_capture+0xc>)
   13ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   13baa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   13bae:	4770      	bx	lr
   13bb0:	4001f000 	.word	0x4001f000

00013bb4 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   13bb4:	4b01      	ldr	r3, [pc, #4]	; (13bbc <radio_tmr_end_get+0x8>)
   13bb6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   13bba:	4770      	bx	lr
   13bbc:	40008000 	.word	0x40008000

00013bc0 <radio_tmr_tifs_base_get>:
   13bc0:	4b01      	ldr	r3, [pc, #4]	; (13bc8 <radio_tmr_tifs_base_get+0x8>)
   13bc2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   13bc6:	4770      	bx	lr
   13bc8:	40008000 	.word	0x40008000

00013bcc <radio_ccm_rx_pkt_set>:
#endif /* HAL_RADIO_GPIO_HAVE_PA_PIN || HAL_RADIO_GPIO_HAVE_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   13bcc:	b4f0      	push	{r4, r5, r6, r7}
   13bce:	4605      	mov	r5, r0
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   13bd0:	4e13      	ldr	r6, [pc, #76]	; (13c20 <radio_ccm_rx_pkt_set+0x54>)
   13bd2:	4814      	ldr	r0, [pc, #80]	; (13c24 <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13bd4:	4b14      	ldr	r3, [pc, #80]	; (13c28 <radio_ccm_rx_pkt_set+0x5c>)

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   13bd6:	4f15      	ldr	r7, [pc, #84]	; (13c2c <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13bd8:	2400      	movs	r4, #0
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   13bda:	2902      	cmp	r1, #2
   13bdc:	bf08      	it	eq
   13bde:	4606      	moveq	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13be0:	f04f 0c02 	mov.w	ip, #2
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   13be4:	4812      	ldr	r0, [pc, #72]	; (13c30 <radio_ccm_rx_pkt_set+0x64>)
   13be6:	4913      	ldr	r1, [pc, #76]	; (13c34 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13be8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13bec:	f8c3 c500 	str.w	ip, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   13bf0:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   13bf4:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   13bf8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   13bfc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   13c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   13c04:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   13c08:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   13c0c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   13c10:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   13c14:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13c18:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   13c1a:	bcf0      	pop	{r4, r5, r6, r7}
   13c1c:	601a      	str	r2, [r3, #0]
   13c1e:	4770      	bx	lr
   13c20:	01000001 	.word	0x01000001
   13c24:	01010001 	.word	0x01010001
   13c28:	4000f000 	.word	0x4000f000
   13c2c:	200021e4 	.word	0x200021e4
   13c30:	200023f8 	.word	0x200023f8
   13c34:	4001f000 	.word	0x4001f000

00013c38 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13c38:	4b0f      	ldr	r3, [pc, #60]	; (13c78 <radio_ccm_tx_pkt_set+0x40>)
{
   13c3a:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13c3c:	2200      	movs	r2, #0
{
   13c3e:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13c40:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   13c42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   13c46:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   13c4a:	480c      	ldr	r0, [pc, #48]	; (13c7c <radio_ccm_tx_pkt_set+0x44>)
   13c4c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   13c50:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   13c54:	480a      	ldr	r0, [pc, #40]	; (13c80 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   13c56:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   13c5a:	4c0a      	ldr	r4, [pc, #40]	; (13c84 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   13c5c:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   13c60:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   13c62:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   13c66:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   13c6a:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   13c6c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   13c70:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   13c74:	6019      	str	r1, [r3, #0]
}
   13c76:	4770      	bx	lr
   13c78:	4000f000 	.word	0x4000f000
   13c7c:	01010000 	.word	0x01010000
   13c80:	200023f8 	.word	0x200023f8
   13c84:	200021e4 	.word	0x200021e4

00013c88 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   13c88:	4a0e      	ldr	r2, [pc, #56]	; (13cc4 <radio_ccm_is_done+0x3c>)
   13c8a:	2302      	movs	r3, #2
   13c8c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   13c90:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   13c94:	b933      	cbnz	r3, 13ca4 <radio_ccm_is_done+0x1c>
		__WFE();
   13c96:	bf20      	wfe
		__SEV();
   13c98:	bf40      	sev
		__WFE();
   13c9a:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   13c9c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   13ca0:	2b00      	cmp	r3, #0
   13ca2:	d0f8      	beq.n	13c96 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   13ca4:	4b07      	ldr	r3, [pc, #28]	; (13cc4 <radio_ccm_is_done+0x3c>)
   13ca6:	4a08      	ldr	r2, [pc, #32]	; (13cc8 <radio_ccm_is_done+0x40>)
   13ca8:	2002      	movs	r0, #2
   13caa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13cae:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   13cb2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   13cb6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   13cba:	fab0 f080 	clz	r0, r0
   13cbe:	0940      	lsrs	r0, r0, #5
   13cc0:	4770      	bx	lr
   13cc2:	bf00      	nop
   13cc4:	4000f000 	.word	0x4000f000
   13cc8:	e000e100 	.word	0xe000e100

00013ccc <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   13ccc:	4b03      	ldr	r3, [pc, #12]	; (13cdc <radio_ccm_mic_is_valid+0x10>)
   13cce:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13cd2:	3800      	subs	r0, #0
   13cd4:	bf18      	it	ne
   13cd6:	2001      	movne	r0, #1
   13cd8:	4770      	bx	lr
   13cda:	bf00      	nop
   13cdc:	4000f000 	.word	0x4000f000

00013ce0 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   13ce0:	4a15      	ldr	r2, [pc, #84]	; (13d38 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   13ce2:	4b16      	ldr	r3, [pc, #88]	; (13d3c <radio_ar_configure+0x5c>)
{
   13ce4:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   13ce6:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   13cea:	4e15      	ldr	r6, [pc, #84]	; (13d40 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   13cec:	2703      	movs	r7, #3
   13cee:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   13cf2:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   13cf4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   13cf8:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   13cfa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   13cfe:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   13d00:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   13d04:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   13d08:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   13d0c:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   13d10:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   13d14:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   13d18:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   13d1c:	4909      	ldr	r1, [pc, #36]	; (13d44 <radio_ar_configure+0x64>)
   13d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d22:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   13d26:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   13d2a:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   13d2e:	bcf0      	pop	{r4, r5, r6, r7}
   13d30:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   13d34:	4770      	bx	lr
   13d36:	bf00      	nop
   13d38:	40001000 	.word	0x40001000
   13d3c:	4000f000 	.word	0x4000f000
   13d40:	200021e0 	.word	0x200021e0
   13d44:	4001f000 	.word	0x4001f000

00013d48 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   13d48:	4b01      	ldr	r3, [pc, #4]	; (13d50 <radio_ar_match_get+0x8>)
   13d4a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   13d4e:	4770      	bx	lr
   13d50:	4000f000 	.word	0x4000f000

00013d54 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   13d54:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   13d56:	4807      	ldr	r0, [pc, #28]	; (13d74 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   13d58:	4c07      	ldr	r4, [pc, #28]	; (13d78 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   13d5a:	4a08      	ldr	r2, [pc, #32]	; (13d7c <radio_ar_status_reset+0x28>)
   13d5c:	2300      	movs	r3, #0
   13d5e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   13d62:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   13d66:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   13d6a:	bc10      	pop	{r4}
   13d6c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   13d70:	4770      	bx	lr
   13d72:	bf00      	nop
   13d74:	4000f000 	.word	0x4000f000
   13d78:	40001000 	.word	0x40001000
   13d7c:	4001f000 	.word	0x4001f000

00013d80 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   13d80:	4b08      	ldr	r3, [pc, #32]	; (13da4 <radio_ar_has_match+0x24>)
   13d82:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   13d86:	b160      	cbz	r0, 13da2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   13d88:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   13d8c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   13d90:	b138      	cbz	r0, 13da2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   13d92:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   13d96:	b120      	cbz	r0, 13da2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   13d98:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   13d9c:	fab0 f080 	clz	r0, r0
   13da0:	0940      	lsrs	r0, r0, #5
}
   13da2:	4770      	bx	lr
   13da4:	40001000 	.word	0x40001000

00013da8 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13da8:	2902      	cmp	r1, #2
{
   13daa:	b510      	push	{r4, lr}
   13dac:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   13dae:	d00b      	beq.n	13dc8 <mayfly_enable_cb+0x20>
   13db0:	4a0a      	ldr	r2, [pc, #40]	; (13ddc <mayfly_enable_cb+0x34>)
   13db2:	490b      	ldr	r1, [pc, #44]	; (13de0 <mayfly_enable_cb+0x38>)
   13db4:	480b      	ldr	r0, [pc, #44]	; (13de4 <mayfly_enable_cb+0x3c>)
   13db6:	231e      	movs	r3, #30
   13db8:	f004 f9d6 	bl	18168 <printk>
   13dbc:	4040      	eors	r0, r0
   13dbe:	f380 8811 	msr	BASEPRI, r0
   13dc2:	f04f 0003 	mov.w	r0, #3
   13dc6:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   13dc8:	200b      	movs	r0, #11
	if (enable) {
   13dca:	b11c      	cbz	r4, 13dd4 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   13dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   13dd0:	f7ef b956 	b.w	3080 <arch_irq_enable>
}
   13dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   13dd8:	f7ef b962 	b.w	30a0 <arch_irq_disable>
   13ddc:	0001d9f4 	.word	0x0001d9f4
   13de0:	0001da44 	.word	0x0001da44
   13de4:	0001cde4 	.word	0x0001cde4

00013de8 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   13de8:	b129      	cbz	r1, 13df6 <mayfly_is_enabled+0xe>
   13dea:	3901      	subs	r1, #1
   13dec:	2901      	cmp	r1, #1
   13dee:	d805      	bhi.n	13dfc <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   13df0:	200b      	movs	r0, #11
   13df2:	f7ef b969 	b.w	30c8 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   13df6:	2018      	movs	r0, #24
   13df8:	f7ef b966 	b.w	30c8 <arch_irq_is_enabled>
{
   13dfc:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   13dfe:	4a07      	ldr	r2, [pc, #28]	; (13e1c <mayfly_is_enabled+0x34>)
   13e00:	4907      	ldr	r1, [pc, #28]	; (13e20 <mayfly_is_enabled+0x38>)
   13e02:	4808      	ldr	r0, [pc, #32]	; (13e24 <mayfly_is_enabled+0x3c>)
   13e04:	2336      	movs	r3, #54	; 0x36
   13e06:	f004 f9af 	bl	18168 <printk>
   13e0a:	4040      	eors	r0, r0
   13e0c:	f380 8811 	msr	BASEPRI, r0
   13e10:	f04f 0003 	mov.w	r0, #3
   13e14:	df02      	svc	2
		break;
	}

	return 0;
}
   13e16:	2000      	movs	r0, #0
   13e18:	bd08      	pop	{r3, pc}
   13e1a:	bf00      	nop
   13e1c:	0001d9f4 	.word	0x0001d9f4
   13e20:	0001ce44 	.word	0x0001ce44
   13e24:	0001cde4 	.word	0x0001cde4

00013e28 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   13e28:	4288      	cmp	r0, r1
   13e2a:	d00b      	beq.n	13e44 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   13e2c:	2801      	cmp	r0, #1
   13e2e:	d003      	beq.n	13e38 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   13e30:	2802      	cmp	r0, #2
   13e32:	d009      	beq.n	13e48 <mayfly_prio_is_equal+0x20>
   13e34:	2000      	movs	r0, #0
#endif
	       0;
}
   13e36:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   13e38:	f1a1 0002 	sub.w	r0, r1, #2
   13e3c:	fab0 f080 	clz	r0, r0
   13e40:	0940      	lsrs	r0, r0, #5
   13e42:	4770      	bx	lr
   13e44:	2001      	movs	r0, #1
   13e46:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   13e48:	f1a1 0001 	sub.w	r0, r1, #1
   13e4c:	fab0 f080 	clz	r0, r0
   13e50:	0940      	lsrs	r0, r0, #5
   13e52:	4770      	bx	lr

00013e54 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   13e54:	2901      	cmp	r1, #1
{
   13e56:	b508      	push	{r3, lr}
	switch (callee_id) {
   13e58:	d00f      	beq.n	13e7a <mayfly_pend+0x26>
   13e5a:	2902      	cmp	r1, #2
   13e5c:	d00d      	beq.n	13e7a <mayfly_pend+0x26>
   13e5e:	b191      	cbz	r1, 13e86 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   13e60:	4a0c      	ldr	r2, [pc, #48]	; (13e94 <mayfly_pend+0x40>)
   13e62:	490d      	ldr	r1, [pc, #52]	; (13e98 <mayfly_pend+0x44>)
   13e64:	480d      	ldr	r0, [pc, #52]	; (13e9c <mayfly_pend+0x48>)
   13e66:	2367      	movs	r3, #103	; 0x67
   13e68:	f004 f97e 	bl	18168 <printk>
   13e6c:	4040      	eors	r0, r0
   13e6e:	f380 8811 	msr	BASEPRI, r0
   13e72:	f04f 0003 	mov.w	r0, #3
   13e76:	df02      	svc	2
		break;
	}
}
   13e78:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13e7a:	4b09      	ldr	r3, [pc, #36]	; (13ea0 <mayfly_pend+0x4c>)
   13e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13e80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   13e84:	bd08      	pop	{r3, pc}
   13e86:	4b06      	ldr	r3, [pc, #24]	; (13ea0 <mayfly_pend+0x4c>)
   13e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   13e8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   13e90:	bd08      	pop	{r3, pc}
   13e92:	bf00      	nop
   13e94:	0001d9f4 	.word	0x0001d9f4
   13e98:	0001ce44 	.word	0x0001ce44
   13e9c:	0001cde4 	.word	0x0001cde4
   13ea0:	e000e100 	.word	0xe000e100

00013ea4 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13ea4:	2803      	cmp	r0, #3
{
   13ea6:	b510      	push	{r4, lr}
   13ea8:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13eaa:	d804      	bhi.n	13eb6 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   13eac:	4b11      	ldr	r3, [pc, #68]	; (13ef4 <hal_ticker_instance0_caller_id_get+0x50>)
   13eae:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13eb0:	b18c      	cbz	r4, 13ed6 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   13eb2:	4620      	mov	r0, r4
   13eb4:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13eb6:	4a10      	ldr	r2, [pc, #64]	; (13ef8 <hal_ticker_instance0_caller_id_get+0x54>)
   13eb8:	4910      	ldr	r1, [pc, #64]	; (13efc <hal_ticker_instance0_caller_id_get+0x58>)
   13eba:	4811      	ldr	r0, [pc, #68]	; (13f00 <hal_ticker_instance0_caller_id_get+0x5c>)
   13ebc:	232b      	movs	r3, #43	; 0x2b
   13ebe:	f004 f953 	bl	18168 <printk>
   13ec2:	4040      	eors	r0, r0
   13ec4:	f380 8811 	msr	BASEPRI, r0
   13ec8:	f04f 0003 	mov.w	r0, #3
   13ecc:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   13ece:	4b09      	ldr	r3, [pc, #36]	; (13ef4 <hal_ticker_instance0_caller_id_get+0x50>)
   13ed0:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   13ed2:	2c00      	cmp	r4, #0
   13ed4:	d1ed      	bne.n	13eb2 <hal_ticker_instance0_caller_id_get+0xe>
   13ed6:	4a08      	ldr	r2, [pc, #32]	; (13ef8 <hal_ticker_instance0_caller_id_get+0x54>)
   13ed8:	490a      	ldr	r1, [pc, #40]	; (13f04 <hal_ticker_instance0_caller_id_get+0x60>)
   13eda:	4809      	ldr	r0, [pc, #36]	; (13f00 <hal_ticker_instance0_caller_id_get+0x5c>)
   13edc:	232e      	movs	r3, #46	; 0x2e
   13ede:	f004 f943 	bl	18168 <printk>
   13ee2:	4040      	eors	r0, r0
   13ee4:	f380 8811 	msr	BASEPRI, r0
   13ee8:	f04f 0003 	mov.w	r0, #3
   13eec:	df02      	svc	2
}
   13eee:	4620      	mov	r0, r4
   13ef0:	bd10      	pop	{r4, pc}
   13ef2:	bf00      	nop
   13ef4:	0001dad4 	.word	0x0001dad4
   13ef8:	0001da54 	.word	0x0001da54
   13efc:	0001daa4 	.word	0x0001daa4
   13f00:	0001cde4 	.word	0x0001cde4
   13f04:	0001dac4 	.word	0x0001dac4

00013f08 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   13f08:	3801      	subs	r0, #1
{
   13f0a:	b510      	push	{r4, lr}
   13f0c:	461c      	mov	r4, r3
	switch (caller_id) {
   13f0e:	2804      	cmp	r0, #4
   13f10:	f200 8082 	bhi.w	14018 <hal_ticker_instance0_sched+0x110>
   13f14:	e8df f000 	tbb	[pc, r0]
   13f18:	3f302112 	.word	0x3f302112
   13f1c:	03          	.byte	0x03
   13f1d:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   13f1e:	2904      	cmp	r1, #4
   13f20:	d04a      	beq.n	13fb8 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   13f22:	4a44      	ldr	r2, [pc, #272]	; (14034 <hal_ticker_instance0_sched+0x12c>)
   13f24:	4944      	ldr	r1, [pc, #272]	; (14038 <hal_ticker_instance0_sched+0x130>)
   13f26:	4845      	ldr	r0, [pc, #276]	; (1403c <hal_ticker_instance0_sched+0x134>)
   13f28:	23ba      	movs	r3, #186	; 0xba
   13f2a:	f004 f91d 	bl	18168 <printk>
   13f2e:	4040      	eors	r0, r0
   13f30:	f380 8811 	msr	BASEPRI, r0
   13f34:	f04f 0003 	mov.w	r0, #3
   13f38:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   13f3a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   13f3c:	2904      	cmp	r1, #4
   13f3e:	d043      	beq.n	13fc8 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   13f40:	4a3c      	ldr	r2, [pc, #240]	; (14034 <hal_ticker_instance0_sched+0x12c>)
   13f42:	493d      	ldr	r1, [pc, #244]	; (14038 <hal_ticker_instance0_sched+0x130>)
   13f44:	483d      	ldr	r0, [pc, #244]	; (1403c <hal_ticker_instance0_sched+0x134>)
   13f46:	234e      	movs	r3, #78	; 0x4e
   13f48:	f004 f90e 	bl	18168 <printk>
   13f4c:	4040      	eors	r0, r0
   13f4e:	f380 8811 	msr	BASEPRI, r0
   13f52:	f04f 0003 	mov.w	r0, #3
   13f56:	df02      	svc	2
}
   13f58:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   13f5a:	2903      	cmp	r1, #3
   13f5c:	d03c      	beq.n	13fd8 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   13f5e:	4a35      	ldr	r2, [pc, #212]	; (14034 <hal_ticker_instance0_sched+0x12c>)
   13f60:	4935      	ldr	r1, [pc, #212]	; (14038 <hal_ticker_instance0_sched+0x130>)
   13f62:	4836      	ldr	r0, [pc, #216]	; (1403c <hal_ticker_instance0_sched+0x134>)
   13f64:	2365      	movs	r3, #101	; 0x65
   13f66:	f004 f8ff 	bl	18168 <printk>
   13f6a:	4040      	eors	r0, r0
   13f6c:	f380 8811 	msr	BASEPRI, r0
   13f70:	f04f 0003 	mov.w	r0, #3
   13f74:	df02      	svc	2
}
   13f76:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   13f78:	2904      	cmp	r1, #4
   13f7a:	d035      	beq.n	13fe8 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   13f7c:	4a2d      	ldr	r2, [pc, #180]	; (14034 <hal_ticker_instance0_sched+0x12c>)
   13f7e:	492e      	ldr	r1, [pc, #184]	; (14038 <hal_ticker_instance0_sched+0x130>)
   13f80:	482e      	ldr	r0, [pc, #184]	; (1403c <hal_ticker_instance0_sched+0x134>)
   13f82:	237c      	movs	r3, #124	; 0x7c
   13f84:	f004 f8f0 	bl	18168 <printk>
   13f88:	4040      	eors	r0, r0
   13f8a:	f380 8811 	msr	BASEPRI, r0
   13f8e:	f04f 0003 	mov.w	r0, #3
   13f92:	df02      	svc	2
}
   13f94:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   13f96:	2903      	cmp	r1, #3
   13f98:	d036      	beq.n	14008 <hal_ticker_instance0_sched+0x100>
   13f9a:	2904      	cmp	r1, #4
   13f9c:	d02c      	beq.n	13ff8 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   13f9e:	4a25      	ldr	r2, [pc, #148]	; (14034 <hal_ticker_instance0_sched+0x12c>)
   13fa0:	4925      	ldr	r1, [pc, #148]	; (14038 <hal_ticker_instance0_sched+0x130>)
   13fa2:	4826      	ldr	r0, [pc, #152]	; (1403c <hal_ticker_instance0_sched+0x134>)
   13fa4:	23a2      	movs	r3, #162	; 0xa2
   13fa6:	f004 f8df 	bl	18168 <printk>
   13faa:	4040      	eors	r0, r0
   13fac:	f380 8811 	msr	BASEPRI, r0
   13fb0:	f04f 0003 	mov.w	r0, #3
   13fb4:	df02      	svc	2
}
   13fb6:	bd10      	pop	{r4, pc}
			m.param = instance;
   13fb8:	4b21      	ldr	r3, [pc, #132]	; (14040 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13fba:	2102      	movs	r1, #2
			m.param = instance;
   13fbc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13fbe:	2003      	movs	r0, #3
}
   13fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13fc4:	f7f2 bed0 	b.w	6d68 <mayfly_enqueue>
			m.param = instance;
   13fc8:	4b1e      	ldr	r3, [pc, #120]	; (14044 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   13fca:	2102      	movs	r1, #2
			m.param = instance;
   13fcc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   13fce:	2000      	movs	r0, #0
}
   13fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   13fd4:	f7f2 bec8 	b.w	6d68 <mayfly_enqueue>
			m.param = instance;
   13fd8:	4b1b      	ldr	r3, [pc, #108]	; (14048 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13fda:	2101      	movs	r1, #1
			m.param = instance;
   13fdc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13fde:	4608      	mov	r0, r1
}
   13fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13fe4:	f7f2 bec0 	b.w	6d68 <mayfly_enqueue>
			m.param = instance;
   13fe8:	4b18      	ldr	r3, [pc, #96]	; (1404c <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13fea:	2102      	movs	r1, #2
			m.param = instance;
   13fec:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13fee:	2001      	movs	r0, #1
}
   13ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13ff4:	f7f2 beb8 	b.w	6d68 <mayfly_enqueue>
			m.param = instance;
   13ff8:	4b15      	ldr	r3, [pc, #84]	; (14050 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13ffa:	2102      	movs	r1, #2
			m.param = instance;
   13ffc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   13ffe:	4608      	mov	r0, r1
}
   14000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   14004:	f7f2 beb0 	b.w	6d68 <mayfly_enqueue>
			m.param = instance;
   14008:	4b12      	ldr	r3, [pc, #72]	; (14054 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1400a:	2101      	movs	r1, #1
			m.param = instance;
   1400c:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1400e:	2002      	movs	r0, #2
}
   14010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   14014:	f7f2 bea8 	b.w	6d68 <mayfly_enqueue>
		LL_ASSERT(0);
   14018:	4a06      	ldr	r2, [pc, #24]	; (14034 <hal_ticker_instance0_sched+0x12c>)
   1401a:	4907      	ldr	r1, [pc, #28]	; (14038 <hal_ticker_instance0_sched+0x130>)
   1401c:	4807      	ldr	r0, [pc, #28]	; (1403c <hal_ticker_instance0_sched+0x134>)
   1401e:	23c0      	movs	r3, #192	; 0xc0
   14020:	f004 f8a2 	bl	18168 <printk>
   14024:	4040      	eors	r0, r0
   14026:	f380 8811 	msr	BASEPRI, r0
   1402a:	f04f 0003 	mov.w	r0, #3
   1402e:	df02      	svc	2
}
   14030:	bd10      	pop	{r4, pc}
   14032:	bf00      	nop
   14034:	0001da54 	.word	0x0001da54
   14038:	0001ce44 	.word	0x0001ce44
   1403c:	0001cde4 	.word	0x0001cde4
   14040:	20000608 	.word	0x20000608
   14044:	200005f8 	.word	0x200005f8
   14048:	200005e8 	.word	0x200005e8
   1404c:	20000638 	.word	0x20000638
   14050:	20000618 	.word	0x20000618
   14054:	20000628 	.word	0x20000628

00014058 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   14058:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1405a:	2000      	movs	r0, #0
   1405c:	f7ff b9fc 	b.w	13458 <cntr_cmp_set>

00014060 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   14060:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   14062:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14066:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1406a:	3201      	adds	r2, #1
   1406c:	d008      	beq.n	14080 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1406e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   14072:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   14076:	f013 0301 	ands.w	r3, r3, #1
   1407a:	d10a      	bne.n	14092 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   1407c:	4618      	mov	r0, r3
}
   1407e:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   14080:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   14084:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14088:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1408a:	4293      	cmp	r3, r2
   1408c:	d1ef      	bne.n	1406e <hci_vendor_read_static_addr+0xe>
	return 0;
   1408e:	2000      	movs	r0, #0
}
   14090:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   14092:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   14096:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   14098:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1409a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1409e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   140a2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   140a4:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   140a6:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   140aa:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   140ae:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   140b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   140b4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   140b8:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   140ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   140be:	3301      	adds	r3, #1
   140c0:	d03b      	beq.n	1413a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   140c2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   140c6:	3301      	adds	r3, #1
   140c8:	d037      	beq.n	1413a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   140ca:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   140ce:	3301      	adds	r3, #1
   140d0:	d033      	beq.n	1413a <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   140d2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   140d6:	3301      	adds	r3, #1
   140d8:	d02f      	beq.n	1413a <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   140da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   140de:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   140e0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   140e2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   140e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   140ea:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   140ec:	f880 c009 	strb.w	ip, [r0, #9]
   140f0:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   140f2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   140f6:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   140f8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   140fa:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   140fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   14102:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   14104:	f880 c00d 	strb.w	ip, [r0, #13]
   14108:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1410a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1410e:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   14110:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   14112:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   14116:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1411a:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1411c:	73c3      	strb	r3, [r0, #15]
   1411e:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   14122:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   14126:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   14128:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1412a:	0a11      	lsrs	r1, r2, #8
   1412c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14130:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   14132:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   14134:	7541      	strb	r1, [r0, #21]
		return 1;
   14136:	2001      	movs	r0, #1
}
   14138:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1413a:	2210      	movs	r2, #16
   1413c:	2100      	movs	r1, #0
   1413e:	3006      	adds	r0, #6
   14140:	f004 fe69 	bl	18e16 <memset>
		return 1;
   14144:	2001      	movs	r0, #1
}
   14146:	bd08      	pop	{r3, pc}

00014148 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   14148:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1414a:	2210      	movs	r2, #16
{
   1414c:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1414e:	2100      	movs	r1, #0
   14150:	f004 fe61 	bl	18e16 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   14154:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14158:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1415c:	3201      	adds	r2, #1
   1415e:	d034      	beq.n	141ca <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   14160:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   14164:	3201      	adds	r2, #1
   14166:	d030      	beq.n	141ca <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   14168:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1416c:	3201      	adds	r2, #1
   1416e:	d02c      	beq.n	141ca <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   14170:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   14174:	3201      	adds	r2, #1
   14176:	d028      	beq.n	141ca <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   14178:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1417c:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1417e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   14180:	0a08      	lsrs	r0, r1, #8
   14182:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   14186:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   14188:	70e0      	strb	r0, [r4, #3]
   1418a:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1418c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   14190:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   14192:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   14194:	0a08      	lsrs	r0, r1, #8
   14196:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1419a:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1419c:	71e0      	strb	r0, [r4, #7]
   1419e:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   141a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   141a4:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   141a6:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   141a8:	0a08      	lsrs	r0, r1, #8
   141aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
   141ae:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   141b0:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   141b2:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   141b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   141b8:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   141ba:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   141bc:	0a11      	lsrs	r1, r2, #8
   141be:	f3c3 2307 	ubfx	r3, r3, #8, #8
   141c2:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   141c4:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   141c6:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   141c8:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   141ca:	4620      	mov	r0, r4
   141cc:	2210      	movs	r2, #16
}
   141ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   141d2:	2100      	movs	r1, #0
   141d4:	f004 be1f 	b.w	18e16 <memset>

000141d8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   141d8:	4b02      	ldr	r3, [pc, #8]	; (141e4 <net_buf_pool_get+0xc>)
   141da:	222c      	movs	r2, #44	; 0x2c
   141dc:	fb02 3000 	mla	r0, r2, r0, r3
   141e0:	4770      	bx	lr
   141e2:	bf00      	nop
   141e4:	200008cc 	.word	0x200008cc

000141e8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   141e8:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   141ea:	4b06      	ldr	r3, [pc, #24]	; (14204 <net_buf_id+0x1c>)
   141ec:	212c      	movs	r1, #44	; 0x2c
   141ee:	fb01 3302 	mla	r3, r1, r2, r3
   141f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   141f4:	7f1b      	ldrb	r3, [r3, #28]
   141f6:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   141f8:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   141fa:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   141fe:	fbb0 f0f3 	udiv	r0, r0, r3
   14202:	4770      	bx	lr
   14204:	200008cc 	.word	0x200008cc

00014208 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   14208:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1420a:	4b0a      	ldr	r3, [pc, #40]	; (14234 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1420c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1420e:	242c      	movs	r4, #44	; 0x2c
   14210:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   14214:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14218:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1421a:	6823      	ldr	r3, [r4, #0]
   1421c:	429a      	cmp	r2, r3
   1421e:	bf94      	ite	ls
   14220:	600a      	strls	r2, [r1, #0]
   14222:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   14224:	f7ff ffe0 	bl	141e8 <net_buf_id>
   14228:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1422c:	fb02 3000 	mla	r0, r2, r0, r3
   14230:	bd10      	pop	{r4, pc}
   14232:	bf00      	nop
   14234:	200008cc 	.word	0x200008cc

00014238 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   14238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1423c:	4605      	mov	r5, r0
   1423e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   14240:	4610      	mov	r0, r2
   14242:	4619      	mov	r1, r3
{
   14244:	4691      	mov	r9, r2
   14246:	4698      	mov	r8, r3
   14248:	4617      	mov	r7, r2
   1424a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1424c:	f008 f833 	bl	1c2b6 <sys_clock_timeout_end_calc>
   14250:	4682      	mov	sl, r0
   14252:	468b      	mov	fp, r1
	__asm__ volatile(
   14254:	f04f 0320 	mov.w	r3, #32
   14258:	f3ef 8111 	mrs	r1, BASEPRI
   1425c:	f383 8812 	msr	BASEPRI_MAX, r3
   14260:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   14264:	8b6b      	ldrh	r3, [r5, #26]
   14266:	2b00      	cmp	r3, #0
   14268:	d05a      	beq.n	14320 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1426a:	8b2a      	ldrh	r2, [r5, #24]
   1426c:	429a      	cmp	r2, r3
   1426e:	d93e      	bls.n	142ee <net_buf_alloc_len+0xb6>
   14270:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   14272:	2200      	movs	r2, #0
   14274:	2300      	movs	r3, #0
   14276:	4628      	mov	r0, r5
   14278:	f002 ffc8 	bl	1720c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1427c:	9900      	ldr	r1, [sp, #0]
   1427e:	4604      	mov	r4, r0
   14280:	2800      	cmp	r0, #0
   14282:	d034      	beq.n	142ee <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   14284:	f381 8811 	msr	BASEPRI, r1
   14288:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1428c:	9b01      	ldr	r3, [sp, #4]
   1428e:	2b00      	cmp	r3, #0
   14290:	d056      	beq.n	14340 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   14292:	ea58 0309 	orrs.w	r3, r8, r9
   14296:	d00f      	beq.n	142b8 <net_buf_alloc_len+0x80>
   14298:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1429c:	bf08      	it	eq
   1429e:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   142a2:	d009      	beq.n	142b8 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   142a4:	f003 fe52 	bl	17f4c <sys_clock_tick_get>
   142a8:	ebba 0700 	subs.w	r7, sl, r0
   142ac:	eb6b 0601 	sbc.w	r6, fp, r1
   142b0:	2e00      	cmp	r6, #0
   142b2:	bfbc      	itt	lt
   142b4:	2700      	movlt	r7, #0
   142b6:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   142b8:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   142ba:	f8df 809c 	ldr.w	r8, [pc, #156]	; 14358 <net_buf_alloc_len+0x120>
   142be:	f04f 092c 	mov.w	r9, #44	; 0x2c
   142c2:	fb09 8303 	mla	r3, r9, r3, r8
   142c6:	463a      	mov	r2, r7
   142c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   142ca:	681b      	ldr	r3, [r3, #0]
   142cc:	a901      	add	r1, sp, #4
   142ce:	681d      	ldr	r5, [r3, #0]
   142d0:	4620      	mov	r0, r4
   142d2:	4633      	mov	r3, r6
   142d4:	47a8      	blx	r5
   142d6:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   142d8:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   142da:	2800      	cmp	r0, #0
   142dc:	d131      	bne.n	14342 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   142de:	79a0      	ldrb	r0, [r4, #6]
   142e0:	4621      	mov	r1, r4
   142e2:	fb00 8009 	mla	r0, r0, r9, r8
   142e6:	f007 fd78 	bl	1bdda <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   142ea:	462c      	mov	r4, r5
}
   142ec:	e024      	b.n	14338 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   142ee:	8b68      	ldrh	r0, [r5, #26]
   142f0:	1e43      	subs	r3, r0, #1
   142f2:	836b      	strh	r3, [r5, #26]
   142f4:	f381 8811 	msr	BASEPRI, r1
   142f8:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   142fc:	7f2a      	ldrb	r2, [r5, #28]
   142fe:	f102 0417 	add.w	r4, r2, #23
   14302:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   14306:	8b2c      	ldrh	r4, [r5, #24]
   14308:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1430a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1430c:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   14310:	4811      	ldr	r0, [pc, #68]	; (14358 <net_buf_alloc_len+0x120>)
   14312:	4b12      	ldr	r3, [pc, #72]	; (1435c <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   14314:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   14316:	1a2d      	subs	r5, r5, r0
   14318:	10ad      	asrs	r5, r5, #2
   1431a:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1431c:	71a5      	strb	r5, [r4, #6]
		goto success;
   1431e:	e7b5      	b.n	1428c <net_buf_alloc_len+0x54>
   14320:	f381 8811 	msr	BASEPRI, r1
   14324:	f3bf 8f6f 	isb	sy
   14328:	464a      	mov	r2, r9
   1432a:	4643      	mov	r3, r8
   1432c:	4628      	mov	r0, r5
   1432e:	f002 ff6d 	bl	1720c <z_impl_k_queue_get>
	if (!buf) {
   14332:	4604      	mov	r4, r0
   14334:	2800      	cmp	r0, #0
   14336:	d1a9      	bne.n	1428c <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   14338:	4620      	mov	r0, r4
   1433a:	b003      	add	sp, #12
   1433c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   14340:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   14342:	2300      	movs	r3, #0
	buf->ref   = 1U;
   14344:	2201      	movs	r2, #1
	buf->frags = NULL;
   14346:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   14348:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1434a:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1434c:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1434e:	6923      	ldr	r3, [r4, #16]
   14350:	81e2      	strh	r2, [r4, #14]
   14352:	60a3      	str	r3, [r4, #8]
	return buf;
   14354:	e7f0      	b.n	14338 <net_buf_alloc_len+0x100>
   14356:	bf00      	nop
   14358:	200008cc 	.word	0x200008cc
   1435c:	ba2e8ba3 	.word	0xba2e8ba3

00014360 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   14360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14364:	4d16      	ldr	r5, [pc, #88]	; (143c0 <net_buf_unref+0x60>)
   14366:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   14368:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1436a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1436c:	b90c      	cbnz	r4, 14372 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1436e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   14372:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   14374:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   14378:	3b01      	subs	r3, #1
   1437a:	b2db      	uxtb	r3, r3
   1437c:	7123      	strb	r3, [r4, #4]
   1437e:	2b00      	cmp	r3, #0
   14380:	d1f5      	bne.n	1436e <net_buf_unref+0xe>
		if (buf->__buf) {
   14382:	6921      	ldr	r1, [r4, #16]
   14384:	b159      	cbz	r1, 1439e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   14386:	7963      	ldrb	r3, [r4, #5]
   14388:	079b      	lsls	r3, r3, #30
   1438a:	d407      	bmi.n	1439c <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1438c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1438e:	fb07 5303 	mla	r3, r7, r3, r5
   14392:	4620      	mov	r0, r4
   14394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14396:	681b      	ldr	r3, [r3, #0]
   14398:	689b      	ldr	r3, [r3, #8]
   1439a:	4798      	blx	r3
			buf->__buf = NULL;
   1439c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1439e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   143a0:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   143a2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   143a6:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   143a8:	6a1b      	ldr	r3, [r3, #32]
   143aa:	b11b      	cbz	r3, 143b4 <net_buf_unref+0x54>
			pool->destroy(buf);
   143ac:	4620      	mov	r0, r4
   143ae:	4798      	blx	r3
{
   143b0:	4644      	mov	r4, r8
   143b2:	e7db      	b.n	1436c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   143b4:	4621      	mov	r1, r4
   143b6:	fb00 5007 	mla	r0, r0, r7, r5
   143ba:	f007 fd0e 	bl	1bdda <k_queue_prepend>
}
   143be:	e7f7      	b.n	143b0 <net_buf_unref+0x50>
   143c0:	200008cc 	.word	0x200008cc

000143c4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   143c4:	4b08      	ldr	r3, [pc, #32]	; (143e8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   143c6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   143c8:	1ac3      	subs	r3, r0, r3
{
   143ca:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   143cc:	4907      	ldr	r1, [pc, #28]	; (143ec <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   143ce:	109b      	asrs	r3, r3, #2
{
   143d0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   143d2:	4359      	muls	r1, r3
   143d4:	4806      	ldr	r0, [pc, #24]	; (143f0 <onoff_stop+0x2c>)
   143d6:	2240      	movs	r2, #64	; 0x40
   143d8:	f006 fd4c 	bl	1ae74 <stop>
	notify(mgr, res);
   143dc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   143de:	4601      	mov	r1, r0
	notify(mgr, res);
   143e0:	4620      	mov	r0, r4
}
   143e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   143e6:	4718      	bx	r3
   143e8:	20002548 	.word	0x20002548
   143ec:	b6db6db7 	.word	0xb6db6db7
   143f0:	0001c680 	.word	0x0001c680

000143f4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   143f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   143f6:	4c0c      	ldr	r4, [pc, #48]	; (14428 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   143f8:	4a0c      	ldr	r2, [pc, #48]	; (1442c <onoff_start+0x38>)
   143fa:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   143fc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   143fe:	9300      	str	r3, [sp, #0]
{
   14400:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   14402:	460b      	mov	r3, r1
   14404:	490a      	ldr	r1, [pc, #40]	; (14430 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   14406:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   14408:	4361      	muls	r1, r4
{
   1440a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1440c:	4809      	ldr	r0, [pc, #36]	; (14434 <onoff_start+0x40>)
   1440e:	f006 fd5d 	bl	1aecc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   14412:	1e01      	subs	r1, r0, #0
   14414:	da05      	bge.n	14422 <onoff_start+0x2e>
		notify(mgr, err);
   14416:	4630      	mov	r0, r6
   14418:	462b      	mov	r3, r5
	}
}
   1441a:	b002      	add	sp, #8
   1441c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   14420:	4718      	bx	r3
}
   14422:	b002      	add	sp, #8
   14424:	bd70      	pop	{r4, r5, r6, pc}
   14426:	bf00      	nop
   14428:	20002548 	.word	0x20002548
   1442c:	0001af3d 	.word	0x0001af3d
   14430:	b6db6db7 	.word	0xb6db6db7
   14434:	0001c680 	.word	0x0001c680

00014438 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14438:	2200      	movs	r2, #0
{
   1443a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1443c:	2101      	movs	r1, #1
{
   1443e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   14440:	4610      	mov	r0, r2
   14442:	f7ee fe4f 	bl	30e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   14446:	2000      	movs	r0, #0
   14448:	f7ee fe1a 	bl	3080 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1444c:	480f      	ldr	r0, [pc, #60]	; (1448c <clk_init+0x54>)
   1444e:	f001 fd31 	bl	15eb4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   14452:	4b0f      	ldr	r3, [pc, #60]	; (14490 <clk_init+0x58>)
   14454:	4298      	cmp	r0, r3
   14456:	d115      	bne.n	14484 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   14458:	f007 fac3 	bl	1b9e2 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1445c:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1445e:	490d      	ldr	r1, [pc, #52]	; (14494 <clk_init+0x5c>)
   14460:	4630      	mov	r0, r6
   14462:	f003 feea 	bl	1823a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   14466:	2800      	cmp	r0, #0
   14468:	db0b      	blt.n	14482 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   1446a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1446c:	4909      	ldr	r1, [pc, #36]	; (14494 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1446e:	2501      	movs	r5, #1
   14470:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   14472:	f104 001c 	add.w	r0, r4, #28
   14476:	f003 fee0 	bl	1823a <onoff_manager_init>
		if (err < 0) {
   1447a:	2800      	cmp	r0, #0
   1447c:	db01      	blt.n	14482 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1447e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   14480:	2000      	movs	r0, #0
}
   14482:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   14484:	f06f 0004 	mvn.w	r0, #4
   14488:	e7fb      	b.n	14482 <clk_init+0x4a>
   1448a:	bf00      	nop
   1448c:	000144cd 	.word	0x000144cd
   14490:	0bad0000 	.word	0x0bad0000
   14494:	0001db0c 	.word	0x0001db0c

00014498 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   14498:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1449a:	230c      	movs	r3, #12
   1449c:	4809      	ldr	r0, [pc, #36]	; (144c4 <clkstarted_handle.constprop.0+0x2c>)
   1449e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   144a0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   144a2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   144a4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   144a8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   144aa:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   144ac:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   144ae:	4418      	add	r0, r3
   144b0:	f006 fccd 	bl	1ae4e <set_on_state>
	if (callback) {
   144b4:	b12d      	cbz	r5, 144c2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   144b6:	4632      	mov	r2, r6
   144b8:	462b      	mov	r3, r5
   144ba:	4803      	ldr	r0, [pc, #12]	; (144c8 <clkstarted_handle.constprop.0+0x30>)
}
   144bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   144c0:	4718      	bx	r3
}
   144c2:	bd70      	pop	{r4, r5, r6, pc}
   144c4:	20002548 	.word	0x20002548
   144c8:	0001c680 	.word	0x0001c680

000144cc <clock_event_handler>:
	switch (event) {
   144cc:	b110      	cbz	r0, 144d4 <clock_event_handler+0x8>
   144ce:	2801      	cmp	r0, #1
   144d0:	d004      	beq.n	144dc <clock_event_handler+0x10>
   144d2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   144d4:	4b03      	ldr	r3, [pc, #12]	; (144e4 <clock_event_handler+0x18>)
   144d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   144d8:	075b      	lsls	r3, r3, #29
   144da:	d101      	bne.n	144e0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   144dc:	f7ff bfdc 	b.w	14498 <clkstarted_handle.constprop.0>
}
   144e0:	4770      	bx	lr
   144e2:	bf00      	nop
   144e4:	20002548 	.word	0x20002548

000144e8 <generic_hfclk_start>:
{
   144e8:	b508      	push	{r3, lr}
	__asm__ volatile(
   144ea:	f04f 0320 	mov.w	r3, #32
   144ee:	f3ef 8111 	mrs	r1, BASEPRI
   144f2:	f383 8812 	msr	BASEPRI_MAX, r3
   144f6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   144fa:	4a12      	ldr	r2, [pc, #72]	; (14544 <generic_hfclk_start+0x5c>)
   144fc:	6813      	ldr	r3, [r2, #0]
   144fe:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   14502:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   14506:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   14508:	d00c      	beq.n	14524 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1450a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1450e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14512:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   14516:	f013 0301 	ands.w	r3, r3, #1
   1451a:	d003      	beq.n	14524 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1451c:	480a      	ldr	r0, [pc, #40]	; (14548 <generic_hfclk_start+0x60>)
   1451e:	f006 fc96 	bl	1ae4e <set_on_state>
			already_started = true;
   14522:	2301      	movs	r3, #1
	__asm__ volatile(
   14524:	f381 8811 	msr	BASEPRI, r1
   14528:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1452c:	b123      	cbz	r3, 14538 <generic_hfclk_start+0x50>
}
   1452e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   14532:	2000      	movs	r0, #0
   14534:	f7ff bfb0 	b.w	14498 <clkstarted_handle.constprop.0>
}
   14538:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1453c:	2001      	movs	r0, #1
   1453e:	f001 bcc9 	b.w	15ed4 <nrfx_clock_start>
   14542:	bf00      	nop
   14544:	20002598 	.word	0x20002598
   14548:	20002588 	.word	0x20002588

0001454c <api_blocking_start>:
{
   1454c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1454e:	2200      	movs	r2, #0
   14550:	2301      	movs	r3, #1
   14552:	e9cd 2302 	strd	r2, r3, [sp, #8]
   14556:	ab04      	add	r3, sp, #16
   14558:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1455c:	4a09      	ldr	r2, [pc, #36]	; (14584 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1455e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14562:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   14564:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   14568:	f006 fce1 	bl	1af2e <api_start>
	if (err < 0) {
   1456c:	2800      	cmp	r0, #0
   1456e:	db05      	blt.n	1457c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   14570:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   14574:	2300      	movs	r3, #0
   14576:	4668      	mov	r0, sp
   14578:	f002 fea2 	bl	172c0 <z_impl_k_sem_take>
}
   1457c:	b007      	add	sp, #28
   1457e:	f85d fb04 	ldr.w	pc, [sp], #4
   14582:	bf00      	nop
   14584:	0001af55 	.word	0x0001af55

00014588 <lfclk_start>:
{
   14588:	b510      	push	{r4, lr}
	if (!once) {
   1458a:	4c07      	ldr	r4, [pc, #28]	; (145a8 <lfclk_start+0x20>)
   1458c:	7823      	ldrb	r3, [r4, #0]
   1458e:	b92b      	cbnz	r3, 1459c <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   14590:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   14594:	f007 fe8b 	bl	1c2ae <z_impl_k_busy_wait>
		once = true;
   14598:	2301      	movs	r3, #1
   1459a:	7023      	strb	r3, [r4, #0]
}
   1459c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   145a0:	2000      	movs	r0, #0
   145a2:	f001 bc97 	b.w	15ed4 <nrfx_clock_start>
   145a6:	bf00      	nop
   145a8:	200027c4 	.word	0x200027c4

000145ac <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   145ac:	4b09      	ldr	r3, [pc, #36]	; (145d4 <generic_hfclk_stop+0x28>)
   145ae:	f3bf 8f5b 	dmb	ish
   145b2:	e853 2f00 	ldrex	r2, [r3]
   145b6:	f022 0102 	bic.w	r1, r2, #2
   145ba:	e843 1000 	strex	r0, r1, [r3]
   145be:	2800      	cmp	r0, #0
   145c0:	d1f7      	bne.n	145b2 <generic_hfclk_stop+0x6>
   145c2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   145c6:	07d3      	lsls	r3, r2, #31
   145c8:	d402      	bmi.n	145d0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   145ca:	2001      	movs	r0, #1
   145cc:	f001 bcca 	b.w	15f64 <nrfx_clock_stop>
}
   145d0:	4770      	bx	lr
   145d2:	bf00      	nop
   145d4:	20002598 	.word	0x20002598

000145d8 <z_nrf_clock_control_get_onoff>:
}
   145d8:	4a02      	ldr	r2, [pc, #8]	; (145e4 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   145da:	b2c3      	uxtb	r3, r0
}
   145dc:	201c      	movs	r0, #28
   145de:	fb03 2000 	mla	r0, r3, r0, r2
   145e2:	4770      	bx	lr
   145e4:	20002548 	.word	0x20002548

000145e8 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   145e8:	4b09      	ldr	r3, [pc, #36]	; (14610 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   145ea:	f3bf 8f5b 	dmb	ish
   145ee:	e853 2f00 	ldrex	r2, [r3]
   145f2:	f042 0101 	orr.w	r1, r2, #1
   145f6:	e843 1000 	strex	r0, r1, [r3]
   145fa:	2800      	cmp	r0, #0
   145fc:	d1f7      	bne.n	145ee <z_nrf_clock_bt_ctlr_hf_request+0x6>
   145fe:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   14602:	0793      	lsls	r3, r2, #30
   14604:	d402      	bmi.n	1460c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   14606:	2001      	movs	r0, #1
   14608:	f001 bc64 	b.w	15ed4 <nrfx_clock_start>
}
   1460c:	4770      	bx	lr
   1460e:	bf00      	nop
   14610:	20002598 	.word	0x20002598

00014614 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14614:	4b09      	ldr	r3, [pc, #36]	; (1463c <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   14616:	f3bf 8f5b 	dmb	ish
   1461a:	e853 2f00 	ldrex	r2, [r3]
   1461e:	f022 0101 	bic.w	r1, r2, #1
   14622:	e843 1000 	strex	r0, r1, [r3]
   14626:	2800      	cmp	r0, #0
   14628:	d1f7      	bne.n	1461a <z_nrf_clock_bt_ctlr_hf_release+0x6>
   1462a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   1462e:	0793      	lsls	r3, r2, #30
   14630:	d402      	bmi.n	14638 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   14632:	2001      	movs	r0, #1
   14634:	f001 bc96 	b.w	15f64 <nrfx_clock_stop>
}
   14638:	4770      	bx	lr
   1463a:	bf00      	nop
   1463c:	20002598 	.word	0x20002598

00014640 <z_nrf_clock_control_lf_on>:
{
   14640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14644:	4939      	ldr	r1, [pc, #228]	; (1472c <z_nrf_clock_control_lf_on+0xec>)
   14646:	f3bf 8f5b 	dmb	ish
   1464a:	4607      	mov	r7, r0
   1464c:	2201      	movs	r2, #1
   1464e:	e851 3f00 	ldrex	r3, [r1]
   14652:	e841 2000 	strex	r0, r2, [r1]
   14656:	2800      	cmp	r0, #0
   14658:	d1f9      	bne.n	1464e <z_nrf_clock_control_lf_on+0xe>
   1465a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1465e:	b933      	cbnz	r3, 1466e <z_nrf_clock_control_lf_on+0x2e>
   14660:	4933      	ldr	r1, [pc, #204]	; (14730 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   14662:	4834      	ldr	r0, [pc, #208]	; (14734 <z_nrf_clock_control_lf_on+0xf4>)
   14664:	604b      	str	r3, [r1, #4]
   14666:	60cb      	str	r3, [r1, #12]
   14668:	608a      	str	r2, [r1, #8]
   1466a:	f003 fdf9 	bl	18260 <onoff_request>
	switch (start_mode) {
   1466e:	1e7b      	subs	r3, r7, #1
   14670:	2b01      	cmp	r3, #1
   14672:	d82f      	bhi.n	146d4 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   14674:	2f01      	cmp	r7, #1
   14676:	d107      	bne.n	14688 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   14678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1467c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   14680:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   14684:	2b01      	cmp	r3, #1
   14686:	d025      	beq.n	146d4 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14688:	f007 fb0e 	bl	1bca8 <k_is_in_isr>
   1468c:	4604      	mov	r4, r0
   1468e:	b918      	cbnz	r0, 14698 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   14690:	4b29      	ldr	r3, [pc, #164]	; (14738 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   14692:	781b      	ldrb	r3, [r3, #0]
   14694:	2b00      	cmp	r3, #0
   14696:	d141      	bne.n	1471c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   14698:	f04f 0320 	mov.w	r3, #32
   1469c:	f3ef 8611 	mrs	r6, BASEPRI
   146a0:	f383 8812 	msr	BASEPRI_MAX, r3
   146a4:	f3bf 8f6f 	isb	sy
   146a8:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   146aa:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1473c <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   146ae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   146b2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   146b6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   146ba:	03d2      	lsls	r2, r2, #15
   146bc:	d50c      	bpl.n	146d8 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   146be:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   146c2:	2b01      	cmp	r3, #1
   146c4:	d001      	beq.n	146ca <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   146c6:	2f01      	cmp	r7, #1
   146c8:	d106      	bne.n	146d8 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   146ca:	b30c      	cbz	r4, 14710 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   146cc:	f386 8811 	msr	BASEPRI, r6
   146d0:	f3bf 8f6f 	isb	sy
}
   146d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   146d8:	b1ac      	cbz	r4, 14706 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   146da:	4630      	mov	r0, r6
   146dc:	f7ee fcc6 	bl	306c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   146e0:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   146e4:	2b00      	cmp	r3, #0
   146e6:	d1e4      	bne.n	146b2 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   146e8:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   146ec:	2a00      	cmp	r2, #0
   146ee:	d0e0      	beq.n	146b2 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   146f0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   146f4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   146f8:	2301      	movs	r3, #1
   146fa:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   146fe:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14702:	60ab      	str	r3, [r5, #8]
}
   14704:	e7d5      	b.n	146b2 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   14706:	2100      	movs	r1, #0
   14708:	2021      	movs	r0, #33	; 0x21
   1470a:	f003 fa4f 	bl	17bac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1470e:	e7e7      	b.n	146e0 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   14710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14714:	2202      	movs	r2, #2
   14716:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1471a:	e7db      	b.n	146d4 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   1471c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14720:	2202      	movs	r2, #2
   14722:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   14726:	4606      	mov	r6, r0
}
   14728:	e7bf      	b.n	146aa <z_nrf_clock_control_lf_on+0x6a>
   1472a:	bf00      	nop
   1472c:	2000259c 	.word	0x2000259c
   14730:	20002538 	.word	0x20002538
   14734:	20002564 	.word	0x20002564
   14738:	20002bf6 	.word	0x20002bf6
   1473c:	e000e100 	.word	0xe000e100

00014740 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   14740:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   14742:	4c04      	ldr	r4, [pc, #16]	; (14754 <rtt_console_init+0x14>)
   14744:	4620      	mov	r0, r4
   14746:	f7ed fb2d 	bl	1da4 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   1474a:	4620      	mov	r0, r4
   1474c:	f7ee ffd8 	bl	3700 <__stdout_hook_install>

	return 0;
}
   14750:	2000      	movs	r0, #0
   14752:	bd10      	pop	{r4, pc}
   14754:	00014759 	.word	0x00014759

00014758 <rtt_console_out>:
{
   14758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1475a:	4e14      	ldr	r6, [pc, #80]	; (147ac <rtt_console_out+0x54>)
	char c = (char)character;
   1475c:	f88d 0007 	strb.w	r0, [sp, #7]
{
   14760:	4604      	mov	r4, r0
	char c = (char)character;
   14762:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   14764:	f3ef 8711 	mrs	r7, BASEPRI
   14768:	f04f 0120 	mov.w	r1, #32
   1476c:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   14770:	2201      	movs	r2, #1
   14772:	f10d 0107 	add.w	r1, sp, #7
   14776:	2000      	movs	r0, #0
   14778:	f002 fad2 	bl	16d20 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
   1477c:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
   14780:	b120      	cbz	r0, 1478c <rtt_console_out+0x34>
			host_present = true;
   14782:	2301      	movs	r3, #1
   14784:	7033      	strb	r3, [r6, #0]
}
   14786:	4620      	mov	r0, r4
   14788:	b003      	add	sp, #12
   1478a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   1478c:	7833      	ldrb	r3, [r6, #0]
   1478e:	2b00      	cmp	r3, #0
   14790:	d0f9      	beq.n	14786 <rtt_console_out+0x2e>
			if (max_cnt) {
   14792:	3d01      	subs	r5, #1
   14794:	d008      	beq.n	147a8 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   14796:	f007 fa87 	bl	1bca8 <k_is_in_isr>
   1479a:	2800      	cmp	r0, #0
   1479c:	d1e2      	bne.n	14764 <rtt_console_out+0xc>
   1479e:	2100      	movs	r1, #0
   147a0:	2042      	movs	r0, #66	; 0x42
   147a2:	f003 fa03 	bl	17bac <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   147a6:	e7dd      	b.n	14764 <rtt_console_out+0xc>
				host_present = false;
   147a8:	7035      	strb	r5, [r6, #0]
   147aa:	e7ec      	b.n	14786 <rtt_console_out+0x2e>
   147ac:	200027c5 	.word	0x200027c5

000147b0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   147b0:	b530      	push	{r4, r5, lr}
	return port->config;
   147b2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   147b4:	7b04      	ldrb	r4, [r0, #12]
   147b6:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   147ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   147be:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   147c2:	b085      	sub	sp, #20
   147c4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   147c8:	d104      	bne.n	147d4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   147ca:	4628      	mov	r0, r5
   147cc:	f001 fe68 	bl	164a0 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   147d0:	2000      	movs	r0, #0
   147d2:	e02e      	b.n	14832 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
   147d4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   147d8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   147dc:	d12b      	bne.n	14836 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   147de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   147e2:	bf0c      	ite	eq
   147e4:	2304      	moveq	r3, #4
   147e6:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   147e8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   147ec:	6883      	ldr	r3, [r0, #8]
   147ee:	fa23 f101 	lsr.w	r1, r3, r1
   147f2:	07c9      	lsls	r1, r1, #31
   147f4:	d42b      	bmi.n	1484e <gpio_nrfx_pin_interrupt_configure+0x9e>
   147f6:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   147fa:	d128      	bne.n	1484e <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   147fc:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14800:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   14804:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   14808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1480c:	07db      	lsls	r3, r3, #31
   1480e:	d41e      	bmi.n	1484e <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   14810:	f10d 0407 	add.w	r4, sp, #7
   14814:	4621      	mov	r1, r4
   14816:	4628      	mov	r0, r5
   14818:	f001 fdaa 	bl	16370 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1481c:	4b14      	ldr	r3, [pc, #80]	; (14870 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1481e:	4298      	cmp	r0, r3
   14820:	d114      	bne.n	1484c <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
   14822:	4620      	mov	r0, r4
   14824:	f001 fdf2 	bl	1640c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   14828:	4b12      	ldr	r3, [pc, #72]	; (14874 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1482a:	4298      	cmp	r0, r3
   1482c:	d00e      	beq.n	1484c <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   1482e:	f06f 000b 	mvn.w	r0, #11
}
   14832:	b005      	add	sp, #20
   14834:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   14836:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1483a:	d005      	beq.n	14848 <gpio_nrfx_pin_interrupt_configure+0x98>
   1483c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   14840:	bf0c      	ite	eq
   14842:	2302      	moveq	r3, #2
   14844:	2301      	movne	r3, #1
   14846:	e7cf      	b.n	147e8 <gpio_nrfx_pin_interrupt_configure+0x38>
   14848:	2303      	movs	r3, #3
   1484a:	e7cd      	b.n	147e8 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   1484c:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1484e:	2300      	movs	r3, #0
   14850:	4619      	mov	r1, r3
   14852:	aa02      	add	r2, sp, #8
   14854:	4628      	mov	r0, r5
   14856:	f001 fc63 	bl	16120 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1485a:	4b06      	ldr	r3, [pc, #24]	; (14874 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1485c:	4298      	cmp	r0, r3
   1485e:	d104      	bne.n	1486a <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   14860:	2101      	movs	r1, #1
   14862:	4628      	mov	r0, r5
   14864:	f001 fdd8 	bl	16418 <nrfx_gpiote_trigger_enable>
   14868:	e7b2      	b.n	147d0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   1486a:	f06f 0004 	mvn.w	r0, #4
   1486e:	e7e0      	b.n	14832 <gpio_nrfx_pin_interrupt_configure+0x82>
   14870:	0bad0004 	.word	0x0bad0004
   14874:	0bad0000 	.word	0x0bad0000

00014878 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   14878:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1487a:	f001 fdb7 	bl	163ec <nrfx_gpiote_is_init>
   1487e:	4604      	mov	r4, r0
   14880:	b968      	cbnz	r0, 1489e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   14882:	f001 fd8b 	bl	1639c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   14886:	4b08      	ldr	r3, [pc, #32]	; (148a8 <gpio_nrfx_init+0x30>)
   14888:	4298      	cmp	r0, r3
   1488a:	d10a      	bne.n	148a2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1488c:	4807      	ldr	r0, [pc, #28]	; (148ac <gpio_nrfx_init+0x34>)
   1488e:	4621      	mov	r1, r4
   14890:	f001 fd68 	bl	16364 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14894:	4622      	mov	r2, r4
   14896:	2105      	movs	r1, #5
   14898:	2006      	movs	r0, #6
   1489a:	f7ee fc23 	bl	30e4 <z_arm_irq_priority_set>
		return 0;
   1489e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   148a0:	bd10      	pop	{r4, pc}
		return -EIO;
   148a2:	f06f 0004 	mvn.w	r0, #4
   148a6:	e7fb      	b.n	148a0 <gpio_nrfx_init+0x28>
   148a8:	0bad0000 	.word	0x0bad0000
   148ac:	000148b1 	.word	0x000148b1

000148b0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   148b0:	0943      	lsrs	r3, r0, #5
{
   148b2:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   148b4:	d110      	bne.n	148d8 <nrfx_gpio_handler+0x28>
	return list->head;
   148b6:	4b09      	ldr	r3, [pc, #36]	; (148dc <nrfx_gpio_handler+0x2c>)
   148b8:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   148ba:	b169      	cbz	r1, 148d8 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
   148bc:	2501      	movs	r5, #1
	return node->next;
   148be:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   148c0:	4e07      	ldr	r6, [pc, #28]	; (148e0 <nrfx_gpio_handler+0x30>)
   148c2:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
   148c4:	688a      	ldr	r2, [r1, #8]
   148c6:	402a      	ands	r2, r5
   148c8:	d002      	beq.n	148d0 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
   148ca:	684b      	ldr	r3, [r1, #4]
   148cc:	4630      	mov	r0, r6
   148ce:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   148d0:	b114      	cbz	r4, 148d8 <nrfx_gpio_handler+0x28>
   148d2:	4621      	mov	r1, r4
   148d4:	6824      	ldr	r4, [r4, #0]
   148d6:	e7f5      	b.n	148c4 <nrfx_gpio_handler+0x14>
}
   148d8:	bd70      	pop	{r4, r5, r6, pc}
   148da:	bf00      	nop
   148dc:	200025a0 	.word	0x200025a0
   148e0:	0001c698 	.word	0x0001c698

000148e4 <gpio_nrfx_pin_configure>:
{
   148e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   148e8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   148ea:	7b3b      	ldrb	r3, [r7, #12]
   148ec:	f001 051f 	and.w	r5, r1, #31
{
   148f0:	b085      	sub	sp, #20
   148f2:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   148f4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   148f8:	4614      	mov	r4, r2
   148fa:	b9ca      	cbnz	r2, 14930 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   148fc:	a902      	add	r1, sp, #8
   148fe:	4628      	mov	r0, r5
   14900:	f001 fd36 	bl	16370 <nrfx_gpiote_channel_get>
   14904:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   14906:	4628      	mov	r0, r5
   14908:	f001 fdf2 	bl	164f0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1490c:	4b48      	ldr	r3, [pc, #288]	; (14a30 <gpio_nrfx_pin_configure+0x14c>)
   1490e:	4298      	cmp	r0, r3
   14910:	d004      	beq.n	1491c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   14912:	f06f 0004 	mvn.w	r0, #4
}
   14916:	b005      	add	sp, #20
   14918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   1491c:	4284      	cmp	r4, r0
   1491e:	d105      	bne.n	1492c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   14920:	f89d 0008 	ldrb.w	r0, [sp, #8]
   14924:	f001 fd6c 	bl	16400 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   14928:	42a0      	cmp	r0, r4
   1492a:	d1f2      	bne.n	14912 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1492c:	2000      	movs	r0, #0
   1492e:	e7f2      	b.n	14916 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   14930:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   14934:	f10d 0103 	add.w	r1, sp, #3
   14938:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   1493a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1493e:	f001 fd17 	bl	16370 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14942:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   14944:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   14946:	aa02      	add	r2, sp, #8
   14948:	4649      	mov	r1, r9
   1494a:	4628      	mov	r0, r5
   1494c:	f001 fbe8 	bl	16120 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   14950:	4b37      	ldr	r3, [pc, #220]	; (14a30 <gpio_nrfx_pin_configure+0x14c>)
   14952:	4298      	cmp	r0, r3
   14954:	d002      	beq.n	1495c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14956:	f06f 0015 	mvn.w	r0, #21
   1495a:	e7dc      	b.n	14916 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   1495c:	4580      	cmp	r8, r0
   1495e:	d103      	bne.n	14968 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   14960:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14964:	f001 fd4c 	bl	16400 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   14968:	05a3      	lsls	r3, r4, #22
   1496a:	d54e      	bpl.n	14a0a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1496c:	4b31      	ldr	r3, [pc, #196]	; (14a34 <gpio_nrfx_pin_configure+0x150>)
   1496e:	4a32      	ldr	r2, [pc, #200]	; (14a38 <gpio_nrfx_pin_configure+0x154>)
   14970:	4023      	ands	r3, r4
   14972:	4293      	cmp	r3, r2
   14974:	d03a      	beq.n	149ec <gpio_nrfx_pin_configure+0x108>
   14976:	d80c      	bhi.n	14992 <gpio_nrfx_pin_configure+0xae>
   14978:	2b06      	cmp	r3, #6
   1497a:	d014      	beq.n	149a6 <gpio_nrfx_pin_configure+0xc2>
   1497c:	d804      	bhi.n	14988 <gpio_nrfx_pin_configure+0xa4>
   1497e:	b193      	cbz	r3, 149a6 <gpio_nrfx_pin_configure+0xc2>
   14980:	2b02      	cmp	r3, #2
   14982:	d1e8      	bne.n	14956 <gpio_nrfx_pin_configure+0x72>
   14984:	2304      	movs	r3, #4
   14986:	e00e      	b.n	149a6 <gpio_nrfx_pin_configure+0xc2>
   14988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1498c:	d1e3      	bne.n	14956 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   1498e:	2301      	movs	r3, #1
   14990:	e009      	b.n	149a6 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14992:	4a2a      	ldr	r2, [pc, #168]	; (14a3c <gpio_nrfx_pin_configure+0x158>)
   14994:	4293      	cmp	r3, r2
   14996:	d02b      	beq.n	149f0 <gpio_nrfx_pin_configure+0x10c>
   14998:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1499c:	d02a      	beq.n	149f4 <gpio_nrfx_pin_configure+0x110>
   1499e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   149a2:	d1d8      	bne.n	14956 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   149a4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   149a6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   149aa:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   149ae:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   149b2:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   149b4:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   149b8:	bf54      	ite	pl
   149ba:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   149be:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   149c0:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   149c2:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   149c6:	d517      	bpl.n	149f8 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   149c8:	687b      	ldr	r3, [r7, #4]
   149ca:	2101      	movs	r1, #1
   149cc:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   149d0:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   149d4:	2200      	movs	r2, #0
   149d6:	a901      	add	r1, sp, #4
   149d8:	4628      	mov	r0, r5
   149da:	f001 fc4b 	bl	16274 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   149de:	4b14      	ldr	r3, [pc, #80]	; (14a30 <gpio_nrfx_pin_configure+0x14c>)
   149e0:	4298      	cmp	r0, r3
   149e2:	bf14      	ite	ne
   149e4:	f06f 0015 	mvnne.w	r0, #21
   149e8:	2000      	moveq	r0, #0
   149ea:	e794      	b.n	14916 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   149ec:	2307      	movs	r3, #7
   149ee:	e7da      	b.n	149a6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   149f0:	2305      	movs	r3, #5
   149f2:	e7d8      	b.n	149a6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   149f4:	2303      	movs	r3, #3
   149f6:	e7d6      	b.n	149a6 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   149f8:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   149fa:	bf41      	itttt	mi
   149fc:	687b      	ldrmi	r3, [r7, #4]
   149fe:	2101      	movmi	r1, #1
   14a00:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   14a04:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   14a08:	e7e4      	b.n	149d4 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   14a0a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   14a0c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   14a10:	bf54      	ite	pl
   14a12:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   14a16:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   14a18:	461a      	mov	r2, r3
   14a1a:	a901      	add	r1, sp, #4
   14a1c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   14a1e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   14a22:	f001 fb7d 	bl	16120 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   14a26:	4b02      	ldr	r3, [pc, #8]	; (14a30 <gpio_nrfx_pin_configure+0x14c>)
   14a28:	4298      	cmp	r0, r3
   14a2a:	f43f af7f 	beq.w	1492c <gpio_nrfx_pin_configure+0x48>
   14a2e:	e792      	b.n	14956 <gpio_nrfx_pin_configure+0x72>
   14a30:	0bad0000 	.word	0x0bad0000
   14a34:	00f00006 	.word	0x00f00006
   14a38:	00100006 	.word	0x00100006
   14a3c:	00400002 	.word	0x00400002

00014a40 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   14a40:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twim_config *config = dev->config;
   14a42:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   14a44:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   14a48:	f002 f8ec 	bl	16c24 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(config->config.scl,
					       config->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   14a4c:	4b03      	ldr	r3, [pc, #12]	; (14a5c <i2c_nrfx_twim_recover_bus+0x1c>)
   14a4e:	4298      	cmp	r0, r3
}
   14a50:	bf14      	ite	ne
   14a52:	f06f 000f 	mvnne.w	r0, #15
   14a56:	2000      	moveq	r0, #0
   14a58:	bd08      	pop	{r3, pc}
   14a5a:	bf00      	nop
   14a5c:	0bad0000 	.word	0x0bad0000

00014a60 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   14a60:	b510      	push	{r4, lr}
   14a62:	4604      	mov	r4, r0
   14a64:	2200      	movs	r2, #0
   14a66:	2101      	movs	r1, #1
   14a68:	2003      	movs	r0, #3
   14a6a:	f7ee fb3b 	bl	30e4 <z_arm_irq_priority_set>
	const struct i2c_nrfx_twim_config *config = dev->config;
   14a6e:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&config->twim, &config->config,
   14a70:	6923      	ldr	r3, [r4, #16]
   14a72:	4a06      	ldr	r2, [pc, #24]	; (14a8c <twim_0_init+0x2c>)
   14a74:	f100 0108 	add.w	r1, r0, #8
   14a78:	f001 fec8 	bl	1680c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   14a7c:	4b04      	ldr	r3, [pc, #16]	; (14a90 <twim_0_init+0x30>)
		return -EBUSY;
   14a7e:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(0);
   14a80:	bf14      	ite	ne
   14a82:	f06f 000f 	mvnne.w	r0, #15
   14a86:	2000      	moveq	r0, #0
   14a88:	bd10      	pop	{r4, pc}
   14a8a:	bf00      	nop
   14a8c:	00014a95 	.word	0x00014a95
   14a90:	0bad0000 	.word	0x0bad0000

00014a94 <event_handler>:
	switch (p_event->type) {
   14a94:	7803      	ldrb	r3, [r0, #0]
   14a96:	2b01      	cmp	r3, #1
   14a98:	d008      	beq.n	14aac <event_handler+0x18>
   14a9a:	2b02      	cmp	r3, #2
   14a9c:	d008      	beq.n	14ab0 <event_handler+0x1c>
   14a9e:	b94b      	cbnz	r3, 14ab4 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   14aa0:	4b05      	ldr	r3, [pc, #20]	; (14ab8 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   14aa2:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   14aa4:	f101 0018 	add.w	r0, r1, #24
   14aa8:	f002 bbe4 	b.w	17274 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   14aac:	4b03      	ldr	r3, [pc, #12]	; (14abc <event_handler+0x28>)
   14aae:	e7f8      	b.n	14aa2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   14ab0:	4b03      	ldr	r3, [pc, #12]	; (14ac0 <event_handler+0x2c>)
   14ab2:	e7f6      	b.n	14aa2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   14ab4:	4b03      	ldr	r3, [pc, #12]	; (14ac4 <event_handler+0x30>)
   14ab6:	e7f4      	b.n	14aa2 <event_handler+0xe>
   14ab8:	0bad0000 	.word	0x0bad0000
   14abc:	0bae0001 	.word	0x0bae0001
   14ac0:	0bae0002 	.word	0x0bae0002
   14ac4:	0bad0001 	.word	0x0bad0001

00014ac8 <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   14ac8:	b510      	push	{r4, lr}
   14aca:	4604      	mov	r4, r0
   14acc:	2200      	movs	r2, #0
   14ace:	2101      	movs	r1, #1
   14ad0:	2004      	movs	r0, #4
   14ad2:	f7ee fb07 	bl	30e4 <z_arm_irq_priority_set>
	const struct i2c_nrfx_twim_config *config = dev->config;
   14ad6:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twim_init(&config->twim, &config->config,
   14ad8:	6923      	ldr	r3, [r4, #16]
   14ada:	4a06      	ldr	r2, [pc, #24]	; (14af4 <twim_1_init+0x2c>)
   14adc:	f100 0108 	add.w	r1, r0, #8
   14ae0:	f001 fe94 	bl	1680c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   14ae4:	4b04      	ldr	r3, [pc, #16]	; (14af8 <twim_1_init+0x30>)
		return -EBUSY;
   14ae6:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(1);
   14ae8:	bf14      	ite	ne
   14aea:	f06f 000f 	mvnne.w	r0, #15
   14aee:	2000      	moveq	r0, #0
   14af0:	bd10      	pop	{r4, pc}
   14af2:	bf00      	nop
   14af4:	00014a95 	.word	0x00014a95
   14af8:	0bad0000 	.word	0x0bad0000

00014afc <i2c_nrfx_twim_transfer>:
{
   14afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   14b00:	6846      	ldr	r6, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   14b02:	6907      	ldr	r7, [r0, #16]
{
   14b04:	b089      	sub	sp, #36	; 0x24
   14b06:	461d      	mov	r5, r3
   14b08:	460c      	mov	r4, r1
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   14b0a:	8b33      	ldrh	r3, [r6, #24]
	uint8_t *msg_buf = dev_data->msg_buf;
   14b0c:	f8d7 9038 	ldr.w	r9, [r7, #56]	; 0x38
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   14b10:	9300      	str	r3, [sp, #0]
{
   14b12:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   14b14:	2100      	movs	r1, #0
   14b16:	2214      	movs	r2, #20
   14b18:	a803      	add	r0, sp, #12
   14b1a:	f004 f97c 	bl	18e16 <memset>
   14b1e:	f88d 500d 	strb.w	r5, [sp, #13]
	return z_impl_k_sem_take(sem, timeout);
   14b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b2a:	4638      	mov	r0, r7
   14b2c:	f002 fbc8 	bl	172c0 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   14b30:	f107 0a18 	add.w	sl, r7, #24
   14b34:	2200      	movs	r2, #0
   14b36:	2300      	movs	r3, #0
   14b38:	4650      	mov	r0, sl
   14b3a:	f002 fbc1 	bl	172c0 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   14b3e:	4630      	mov	r0, r6
   14b40:	f001 feb4 	bl	168ac <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   14b44:	f04f 0800 	mov.w	r8, #0
	uint16_t msg_buf_used = 0;
   14b48:	4645      	mov	r5, r8
	for (size_t i = 0; i < num_msgs; i++) {
   14b4a:	45d8      	cmp	r8, fp
   14b4c:	d301      	bcc.n	14b52 <i2c_nrfx_twim_transfer+0x56>
   14b4e:	2400      	movs	r4, #0
   14b50:	e049      	b.n	14be6 <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   14b52:	7a21      	ldrb	r1, [r4, #8]
   14b54:	070a      	lsls	r2, r1, #28
   14b56:	f100 808f 	bmi.w	14c78 <i2c_nrfx_twim_transfer+0x17c>
		bool concat_next = ((i + 1) < num_msgs)
   14b5a:	f108 0801 	add.w	r8, r8, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   14b5e:	45d8      	cmp	r8, fp
   14b60:	6862      	ldr	r2, [r4, #4]
   14b62:	d20a      	bcs.n	14b7a <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   14b64:	078b      	lsls	r3, r1, #30
   14b66:	d408      	bmi.n	14b7a <i2c_nrfx_twim_transfer+0x7e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   14b68:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   14b6a:	ea81 0003 	eor.w	r0, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   14b6e:	f000 0001 	and.w	r0, r0, #1
   14b72:	f003 0304 	and.w	r3, r3, #4
   14b76:	4303      	orrs	r3, r0
   14b78:	d016      	beq.n	14ba8 <i2c_nrfx_twim_transfer+0xac>
		if (concat_next || (msg_buf_used != 0)) {
   14b7a:	b1bd      	cbz	r5, 14bac <i2c_nrfx_twim_transfer+0xb0>
				&& ((msgs[i].flags & I2C_MSG_READ)
   14b7c:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   14b7e:	f8dd c000 	ldr.w	ip, [sp]
   14b82:	18a8      	adds	r0, r5, r2
   14b84:	4560      	cmp	r0, ip
   14b86:	d87a      	bhi.n	14c7e <i2c_nrfx_twim_transfer+0x182>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   14b88:	07c8      	lsls	r0, r1, #31
   14b8a:	d406      	bmi.n	14b9a <i2c_nrfx_twim_transfer+0x9e>
				memcpy(msg_buf + msg_buf_used,
   14b8c:	6821      	ldr	r1, [r4, #0]
   14b8e:	9301      	str	r3, [sp, #4]
   14b90:	eb09 0005 	add.w	r0, r9, r5
   14b94:	f004 f934 	bl	18e00 <memcpy>
   14b98:	9b01      	ldr	r3, [sp, #4]
			msg_buf_used += msgs[i].len;
   14b9a:	6862      	ldr	r2, [r4, #4]
   14b9c:	4415      	add	r5, r2
   14b9e:	b2ad      	uxth	r5, r5
		if (concat_next) {
   14ba0:	2b00      	cmp	r3, #0
   14ba2:	d037      	beq.n	14c14 <i2c_nrfx_twim_transfer+0x118>
   14ba4:	340c      	adds	r4, #12
   14ba6:	e7d0      	b.n	14b4a <i2c_nrfx_twim_transfer+0x4e>
				&& ((msgs[i].flags & I2C_MSG_READ)
   14ba8:	2301      	movs	r3, #1
   14baa:	e7e8      	b.n	14b7e <i2c_nrfx_twim_transfer+0x82>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   14bac:	07c9      	lsls	r1, r1, #31
   14bae:	d524      	bpl.n	14bfa <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
   14bb0:	6823      	ldr	r3, [r4, #0]
   14bb2:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   14bb4:	6863      	ldr	r3, [r4, #4]
   14bb6:	9304      	str	r3, [sp, #16]
   14bb8:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   14bba:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   14bbc:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   14bc0:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   14bc4:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   14bc8:	a903      	add	r1, sp, #12
   14bca:	bf0c      	ite	eq
   14bcc:	2220      	moveq	r2, #32
   14bce:	2200      	movne	r2, #0
   14bd0:	4630      	mov	r0, r6
   14bd2:	f001 fe99 	bl	16908 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   14bd6:	4b2e      	ldr	r3, [pc, #184]	; (14c90 <i2c_nrfx_twim_transfer+0x194>)
   14bd8:	4298      	cmp	r0, r3
   14bda:	d021      	beq.n	14c20 <i2c_nrfx_twim_transfer+0x124>
			if (res == NRFX_ERROR_BUSY) {
   14bdc:	330b      	adds	r3, #11
   14bde:	4298      	cmp	r0, r3
   14be0:	d053      	beq.n	14c8a <i2c_nrfx_twim_transfer+0x18e>
			ret = -EIO;
   14be2:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&dev_config->twim);
   14be6:	4630      	mov	r0, r6
   14be8:	f001 fe70 	bl	168cc <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   14bec:	4638      	mov	r0, r7
   14bee:	f002 fb41 	bl	17274 <z_impl_k_sem_give>
}
   14bf2:	4620      	mov	r0, r4
   14bf4:	b009      	add	sp, #36	; 0x24
   14bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			   !nrfx_is_in_ram(msgs[i].buf)) {
   14bfa:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   14bfc:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   14c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   14c04:	d0d4      	beq.n	14bb0 <i2c_nrfx_twim_transfer+0xb4>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   14c06:	8b73      	ldrh	r3, [r6, #26]
   14c08:	4293      	cmp	r3, r2
   14c0a:	d33b      	bcc.n	14c84 <i2c_nrfx_twim_transfer+0x188>
			memcpy(msg_buf, msgs[i].buf, msgs[i].len);
   14c0c:	4648      	mov	r0, r9
   14c0e:	f004 f8f7 	bl	18e00 <memcpy>
			msg_buf_used = msgs[i].len;
   14c12:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   14c14:	2d00      	cmp	r5, #0
   14c16:	d0cb      	beq.n	14bb0 <i2c_nrfx_twim_transfer+0xb4>
			cur_xfer.p_primary_buf = msg_buf;
   14c18:	f8cd 9018 	str.w	r9, [sp, #24]
			cur_xfer.primary_length = msg_buf_used;
   14c1c:	9504      	str	r5, [sp, #16]
   14c1e:	e7cc      	b.n	14bba <i2c_nrfx_twim_transfer+0xbe>
	return z_impl_k_sem_take(sem, timeout);
   14c20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   14c24:	2300      	movs	r3, #0
   14c26:	4650      	mov	r0, sl
   14c28:	f002 fb4a 	bl	172c0 <z_impl_k_sem_take>
		if (ret != 0) {
   14c2c:	b138      	cbz	r0, 14c3e <i2c_nrfx_twim_transfer+0x142>
			nrfx_twim_disable(&dev_config->twim);
   14c2e:	4630      	mov	r0, r6
   14c30:	f001 fe4c 	bl	168cc <nrfx_twim_disable>
   14c34:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   14c38:	f001 fff4 	bl	16c24 <nrfx_twi_twim_bus_recover>
   14c3c:	e7d1      	b.n	14be2 <i2c_nrfx_twim_transfer+0xe6>
		res = dev_data->res;
   14c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   14c40:	4a13      	ldr	r2, [pc, #76]	; (14c90 <i2c_nrfx_twim_transfer+0x194>)
   14c42:	4293      	cmp	r3, r2
   14c44:	d1cd      	bne.n	14be2 <i2c_nrfx_twim_transfer+0xe6>
		if ((msgs[i].flags & I2C_MSG_READ)
   14c46:	7a23      	ldrb	r3, [r4, #8]
   14c48:	07db      	lsls	r3, r3, #31
   14c4a:	d401      	bmi.n	14c50 <i2c_nrfx_twim_transfer+0x154>
		msg_buf_used = 0;
   14c4c:	2500      	movs	r5, #0
   14c4e:	e7a9      	b.n	14ba4 <i2c_nrfx_twim_transfer+0xa8>
		    && cur_xfer.p_primary_buf == msg_buf) {
   14c50:	9b06      	ldr	r3, [sp, #24]
   14c52:	4599      	cmp	r9, r3
   14c54:	d1fa      	bne.n	14c4c <i2c_nrfx_twim_transfer+0x150>
   14c56:	4623      	mov	r3, r4
   14c58:	e008      	b.n	14c6c <i2c_nrfx_twim_transfer+0x170>
				msg_buf_used -= msgs[j].len;
   14c5a:	1aa9      	subs	r1, r5, r2
				memcpy(msgs[j].buf,
   14c5c:	68d8      	ldr	r0, [r3, #12]
   14c5e:	9301      	str	r3, [sp, #4]
				msg_buf_used -= msgs[j].len;
   14c60:	b28d      	uxth	r5, r1
				memcpy(msgs[j].buf,
   14c62:	fa19 f181 	uxtah	r1, r9, r1
   14c66:	f004 f8cb 	bl	18e00 <memcpy>
				j--;
   14c6a:	9b01      	ldr	r3, [sp, #4]
			while (msg_buf_used >= msgs[j].len) {
   14c6c:	685a      	ldr	r2, [r3, #4]
   14c6e:	4295      	cmp	r5, r2
   14c70:	f1a3 030c 	sub.w	r3, r3, #12
   14c74:	d2f1      	bcs.n	14c5a <i2c_nrfx_twim_transfer+0x15e>
   14c76:	e7e9      	b.n	14c4c <i2c_nrfx_twim_transfer+0x150>
			ret = -ENOTSUP;
   14c78:	f06f 0485 	mvn.w	r4, #133	; 0x85
   14c7c:	e7b3      	b.n	14be6 <i2c_nrfx_twim_transfer+0xea>
				ret = -ENOSPC;
   14c7e:	f06f 041b 	mvn.w	r4, #27
   14c82:	e7b0      	b.n	14be6 <i2c_nrfx_twim_transfer+0xea>
				ret = -EINVAL;
   14c84:	f06f 0415 	mvn.w	r4, #21
   14c88:	e7ad      	b.n	14be6 <i2c_nrfx_twim_transfer+0xea>
				ret = -EBUSY;
   14c8a:	f06f 040f 	mvn.w	r4, #15
   14c8e:	e7aa      	b.n	14be6 <i2c_nrfx_twim_transfer+0xea>
   14c90:	0bad0000 	.word	0x0bad0000

00014c94 <ccs811_channel_get>:
{
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_result_type *rp = &drv_data->result;
	uint32_t uval;

	switch (chan) {
   14c94:	391b      	subs	r1, #27
	struct ccs811_data *drv_data = dev->data;
   14c96:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   14c98:	2904      	cmp	r1, #4
   14c9a:	d820      	bhi.n	14cde <ccs811_channel_get+0x4a>
   14c9c:	e8df f001 	tbb	[pc, r1]
   14ca0:	0a1f0803 	.word	0x0a1f0803
   14ca4:	19          	.byte	0x19
   14ca5:	00          	.byte	0x00
	case SENSOR_CHAN_CO2:
		val->val1 = rp->co2;
   14ca6:	8a1b      	ldrh	r3, [r3, #16]
		val->val2 = 0;

		break;
	case SENSOR_CHAN_VOC:
		val->val1 = rp->voc;
   14ca8:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
   14caa:	2000      	movs	r0, #0
   14cac:	6050      	str	r0, [r2, #4]

		break;
   14cae:	4770      	bx	lr
		val->val1 = rp->voc;
   14cb0:	8a5b      	ldrh	r3, [r3, #18]
   14cb2:	e7f9      	b.n	14ca8 <ccs811_channel_get+0x14>
	case SENSOR_CHAN_VOLTAGE:
		/*
		 * Raw ADC readings are contained in least significant 10 bits
		 */
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   14cb4:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
   14cb6:	480b      	ldr	r0, [pc, #44]	; (14ce4 <ccs811_channel_get+0x50>)
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   14cb8:	f240 614c 	movw	r1, #1612	; 0x64c
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   14cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   14cc0:	434b      	muls	r3, r1
		val->val1 = uval / 1000000U;
   14cc2:	fbb3 f1f0 	udiv	r1, r3, r0
		val->val2 = uval % 1000000;
   14cc6:	fb00 3311 	mls	r3, r0, r1, r3
		val->val1 = uval / 1000000U;
   14cca:	6011      	str	r1, [r2, #0]
		val->val2 = uval % 1000000;
   14ccc:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   14cce:	2000      	movs	r0, #0
		break;
   14cd0:	4770      	bx	lr
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   14cd2:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
   14cd4:	2000      	movs	r0, #0
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   14cd6:	0a9b      	lsrs	r3, r3, #10
		val->val2 = uval % 1000000;
   14cd8:	e9c2 0300 	strd	r0, r3, [r2]
		break;
   14cdc:	4770      	bx	lr
	switch (chan) {
   14cde:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   14ce2:	4770      	bx	lr
   14ce4:	000f4240 	.word	0x000f4240

00014ce8 <ccs811_init>:
}

#endif /* CONFIG_CCS811_TRIGGER */

static int ccs811_init(const struct device *dev)
{
   14ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct ccs811_data *drv_data = dev->data;
   14cea:	6904      	ldr	r4, [r0, #16]
	int status;
	uint16_t fw_ver;
	uint8_t cmd;
	uint8_t hw_id;

	*drv_data = (struct ccs811_data){ 0 };
   14cec:	221c      	movs	r2, #28
   14cee:	2100      	movs	r1, #0
   14cf0:	4620      	mov	r0, r4
   14cf2:	f004 f890 	bl	18e16 <memset>
   14cf6:	485a      	ldr	r0, [pc, #360]	; (14e60 <ccs811_init+0x178>)
   14cf8:	f002 f862 	bl	16dc0 <z_impl_device_get_binding>
	drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
   14cfc:	6020      	str	r0, [r4, #0]
	if (drv_data->i2c == NULL) {
   14cfe:	b920      	cbnz	r0, 14d0a <ccs811_init+0x22>
		LOG_ERR("Failed to get pointer to %s device!",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
   14d00:	f06f 0515 	mvn.w	r5, #21
#endif

out:
	set_wake(drv_data, false);
	return ret;
}
   14d04:	4628      	mov	r0, r5
   14d06:	b003      	add	sp, #12
   14d08:	bd30      	pop	{r4, r5, pc}
   14d0a:	4856      	ldr	r0, [pc, #344]	; (14e64 <ccs811_init+0x17c>)
   14d0c:	f002 f858 	bl	16dc0 <z_impl_device_get_binding>
	drv_data->wake_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, wake_gpios));
   14d10:	60e0      	str	r0, [r4, #12]
	if (drv_data->wake_gpio == NULL) {
   14d12:	2800      	cmp	r0, #0
   14d14:	d0f4      	beq.n	14d00 <ccs811_init+0x18>
	struct gpio_driver_data *data =
   14d16:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   14d18:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   14d1a:	6813      	ldr	r3, [r2, #0]
   14d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   14d20:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   14d22:	680b      	ldr	r3, [r1, #0]
   14d24:	f640 2201 	movw	r2, #2561	; 0xa01
   14d28:	210c      	movs	r1, #12
   14d2a:	4798      	blx	r3
	set_wake(drv_data, true);
   14d2c:	68e0      	ldr	r0, [r4, #12]
   14d2e:	2101      	movs	r1, #1
   14d30:	f006 fbd8 	bl	1b4e4 <set_wake.isra.0>
	k_msleep(1);
   14d34:	2001      	movs	r0, #1
   14d36:	f006 fb8e 	bl	1b456 <k_msleep.isra.0>
   14d3a:	484a      	ldr	r0, [pc, #296]	; (14e64 <ccs811_init+0x17c>)
   14d3c:	f002 f840 	bl	16dc0 <z_impl_device_get_binding>
	drv_data->reset_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, reset_gpios));
   14d40:	60a0      	str	r0, [r4, #8]
	if (drv_data->reset_gpio == NULL) {
   14d42:	2800      	cmp	r0, #0
   14d44:	d0dc      	beq.n	14d00 <ccs811_init+0x18>
	struct gpio_driver_data *data =
   14d46:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   14d48:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   14d4a:	6813      	ldr	r3, [r2, #0]
   14d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   14d50:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   14d52:	680b      	ldr	r3, [r1, #0]
   14d54:	f240 6201 	movw	r2, #1537	; 0x601
   14d58:	210b      	movs	r1, #11
   14d5a:	4798      	blx	r3
	k_msleep(1);
   14d5c:	2001      	movs	r0, #1
   14d5e:	f006 fb7a 	bl	1b456 <k_msleep.isra.0>
   14d62:	4841      	ldr	r0, [pc, #260]	; (14e68 <ccs811_init+0x180>)
   14d64:	f002 f82c 	bl	16dc0 <z_impl_device_get_binding>
	drv_data->irq_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, irq_gpios));
   14d68:	6060      	str	r0, [r4, #4]
	if (drv_data->irq_gpio == NULL) {
   14d6a:	2800      	cmp	r0, #0
   14d6c:	d0c8      	beq.n	14d00 <ccs811_init+0x18>
	k_msleep(20);            /* t_START assuming recent power-on */
   14d6e:	2014      	movs	r0, #20
   14d70:	f006 fb71 	bl	1b456 <k_msleep.isra.0>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 1);
   14d74:	68a0      	ldr	r0, [r4, #8]
   14d76:	2201      	movs	r2, #1
   14d78:	210b      	movs	r1, #11
   14d7a:	f006 fb5c 	bl	1b436 <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
   14d7e:	200f      	movs	r0, #15
   14d80:	f007 fa95 	bl	1c2ae <z_impl_k_busy_wait>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 0);
   14d84:	2200      	movs	r2, #0
   14d86:	210b      	movs	r1, #11
   14d88:	68a0      	ldr	r0, [r4, #8]
   14d8a:	f006 fb54 	bl	1b436 <gpio_pin_set.isra.0>
	k_msleep(2);             /* t_START after reset */
   14d8e:	2002      	movs	r0, #2
   14d90:	f006 fb61 	bl	1b456 <k_msleep.isra.0>
	ret = switch_to_app_mode(drv_data->i2c);
   14d94:	6825      	ldr	r5, [r4, #0]
	status = fetch_status(i2c);
   14d96:	4628      	mov	r0, r5
   14d98:	f006 fb7b 	bl	1b492 <fetch_status>
	if (status < 0) {
   14d9c:	2800      	cmp	r0, #0
   14d9e:	da06      	bge.n	14dae <ccs811_init+0xc6>
		ret = -EIO;
   14da0:	f06f 0504 	mvn.w	r5, #4
	set_wake(drv_data, false);
   14da4:	68e0      	ldr	r0, [r4, #12]
   14da6:	2100      	movs	r1, #0
   14da8:	f006 fb9c 	bl	1b4e4 <set_wake.isra.0>
	return ret;
   14dac:	e7aa      	b.n	14d04 <ccs811_init+0x1c>
	if (!(status & CCS811_STATUS_APP_VALID)) {
   14dae:	06c1      	lsls	r1, r0, #27
   14db0:	d516      	bpl.n	14de0 <ccs811_init+0xf8>
	if (status & CCS811_STATUS_FW_MODE) {
   14db2:	0602      	lsls	r2, r0, #24
   14db4:	d417      	bmi.n	14de6 <ccs811_init+0xfe>
	buf = CCS811_REG_APP_START;
   14db6:	23f4      	movs	r3, #244	; 0xf4
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
   14db8:	2201      	movs	r2, #1
   14dba:	f10d 0106 	add.w	r1, sp, #6
   14dbe:	4628      	mov	r0, r5
	buf = CCS811_REG_APP_START;
   14dc0:	f88d 3006 	strb.w	r3, [sp, #6]
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
   14dc4:	f006 fb57 	bl	1b476 <i2c_write.constprop.0>
   14dc8:	2800      	cmp	r0, #0
   14dca:	dbe9      	blt.n	14da0 <ccs811_init+0xb8>
	k_msleep(1);             /* t_APP_START */
   14dcc:	2001      	movs	r0, #1
   14dce:	f006 fb42 	bl	1b456 <k_msleep.isra.0>
	status = fetch_status(i2c);
   14dd2:	4628      	mov	r0, r5
   14dd4:	f006 fb5d 	bl	1b492 <fetch_status>
	if (status < 0) {
   14dd8:	2800      	cmp	r0, #0
   14dda:	dbe1      	blt.n	14da0 <ccs811_init+0xb8>
	if (!(status & CCS811_STATUS_FW_MODE)) {
   14ddc:	0603      	lsls	r3, r0, #24
   14dde:	d402      	bmi.n	14de6 <ccs811_init+0xfe>
		ret = -EINVAL;
   14de0:	f06f 0515 	mvn.w	r5, #21
   14de4:	e7de      	b.n	14da4 <ccs811_init+0xbc>
	if (i2c_reg_read_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   14de6:	2320      	movs	r3, #32
   14de8:	6820      	ldr	r0, [r4, #0]
   14dea:	f88d 3006 	strb.w	r3, [sp, #6]
 */
static inline int i2c_reg_read_byte(const struct device *dev,
				    uint16_t dev_addr,
				    uint8_t reg_addr, uint8_t *value)
{
	return i2c_write_read(dev, dev_addr,
   14dee:	f10d 0203 	add.w	r2, sp, #3
   14df2:	2301      	movs	r3, #1
   14df4:	f10d 0106 	add.w	r1, sp, #6
   14df8:	f006 fb08 	bl	1b40c <i2c_write_read.constprop.0>
   14dfc:	2800      	cmp	r0, #0
   14dfe:	dbcf      	blt.n	14da0 <ccs811_init+0xb8>
	if (hw_id != CCS881_HW_ID) {
   14e00:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14e04:	2b81      	cmp	r3, #129	; 0x81
   14e06:	d1eb      	bne.n	14de0 <ccs811_init+0xf8>
	cmd = CCS811_REG_FW_APP_VERSION;
   14e08:	2324      	movs	r3, #36	; 0x24
   14e0a:	f88d 3002 	strb.w	r3, [sp, #2]
	if (i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   14e0e:	2302      	movs	r3, #2
   14e10:	6820      	ldr	r0, [r4, #0]
   14e12:	f10d 0206 	add.w	r2, sp, #6
   14e16:	eb0d 0103 	add.w	r1, sp, r3
   14e1a:	f006 faf7 	bl	1b40c <i2c_write_read.constprop.0>
   14e1e:	2800      	cmp	r0, #0
   14e20:	dbbe      	blt.n	14da0 <ccs811_init+0xb8>
	fw_ver = sys_be16_to_cpu(fw_ver);
   14e22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   14e26:	6820      	ldr	r0, [r4, #0]
   14e28:	ba5b      	rev16	r3, r3
	fw_ver = sys_be16_to_cpu(fw_ver);
   14e2a:	f8ad 3006 	strh.w	r3, [sp, #6]
	drv_data->app_fw_ver = fw_ver >> 8U;
   14e2e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14e32:	7663      	strb	r3, [r4, #25]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   14e34:	2510      	movs	r5, #16
   14e36:	2301      	movs	r3, #1

	return i2c_write(dev, tx_buf, 2, dev_addr);
   14e38:	2202      	movs	r2, #2
   14e3a:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
   14e3c:	f88d 3004 	strb.w	r3, [sp, #4]
   14e40:	f88d 5005 	strb.w	r5, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   14e44:	f006 fb17 	bl	1b476 <i2c_write.constprop.0>
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   14e48:	2800      	cmp	r0, #0
   14e4a:	dba9      	blt.n	14da0 <ccs811_init+0xb8>
	status = fetch_status(drv_data->i2c);
   14e4c:	6820      	ldr	r0, [r4, #0]
	drv_data->mode = meas_mode;
   14e4e:	7625      	strb	r5, [r4, #24]
	status = fetch_status(drv_data->i2c);
   14e50:	f006 fb1f 	bl	1b492 <fetch_status>
	if (status < 0) {
   14e54:	2800      	cmp	r0, #0
   14e56:	dba3      	blt.n	14da0 <ccs811_init+0xb8>
	if (status & CCS811_STATUS_ERROR) {
   14e58:	f010 0501 	ands.w	r5, r0, #1
   14e5c:	d0a2      	beq.n	14da4 <ccs811_init+0xbc>
   14e5e:	e7bf      	b.n	14de0 <ccs811_init+0xf8>
   14e60:	0001e1fa 	.word	0x0001e1fa
   14e64:	0001e094 	.word	0x0001e094
   14e68:	0001e09c 	.word	0x0001e09c

00014e6c <hts221_channel_get>:

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   14e6c:	290d      	cmp	r1, #13
{
   14e6e:	b570      	push	{r4, r5, r6, lr}
	struct hts221_data *data = dev->data;
   14e70:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   14e72:	d120      	bne.n	14eb6 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   14e74:	88c5      	ldrh	r5, [r0, #6]
			   (data->t_sample - data->t0_out) /
   14e76:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   14e7a:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
   14e7c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
			   (data->t1_out - data->t0_out) +
   14e80:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   14e84:	1b5b      	subs	r3, r3, r5
			   (data->t_sample - data->t0_out) /
   14e86:	1ba4      	subs	r4, r4, r6
			   (data->t1_out - data->t0_out) +
   14e88:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   14e8a:	4363      	muls	r3, r4
			   (data->t_sample - data->t0_out) /
   14e8c:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   14e90:	442b      	add	r3, r5
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
   14e92:	2b00      	cmp	r3, #0
   14e94:	4619      	mov	r1, r3
   14e96:	bfb8      	it	lt
   14e98:	1dd9      	addlt	r1, r3, #7
   14e9a:	10c9      	asrs	r1, r1, #3
   14e9c:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 8) * (1000000 / 8);
   14e9e:	4259      	negs	r1, r3
   14ea0:	f001 0107 	and.w	r1, r1, #7
   14ea4:	f003 0307 	and.w	r3, r3, #7
   14ea8:	bf58      	it	pl
   14eaa:	424b      	negpl	r3, r1
   14eac:	4911      	ldr	r1, [pc, #68]	; (14ef4 <hts221_channel_get+0x88>)
			   (data->h1_t0_out - data->h0_t0_out) +
			   data->h0_rh_x2;

		/* convert humidity x2 to percent */
		val->val1 = conv_val / 2;
		val->val2 = (conv_val % 2) * 500000;
   14eae:	434b      	muls	r3, r1
   14eb0:	6053      	str	r3, [r2, #4]
	} else {
		return -ENOTSUP;
	}

	return 0;
   14eb2:	2000      	movs	r0, #0
}
   14eb4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
   14eb6:	2910      	cmp	r1, #16
   14eb8:	d119      	bne.n	14eee <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   14eba:	7905      	ldrb	r5, [r0, #4]
			   (data->rh_sample - data->h0_t0_out) /
   14ebc:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   14ec0:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
   14ec2:	f9b0 4000 	ldrsh.w	r4, [r0]
			   (data->h1_t0_out - data->h0_t0_out) +
   14ec6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   14eca:	1b5b      	subs	r3, r3, r5
			   (data->rh_sample - data->h0_t0_out) /
   14ecc:	1ba4      	subs	r4, r4, r6
			   (data->h1_t0_out - data->h0_t0_out) +
   14ece:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   14ed0:	4363      	muls	r3, r4
			   (data->rh_sample - data->h0_t0_out) /
   14ed2:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   14ed6:	442b      	add	r3, r5
		val->val1 = conv_val / 2;
   14ed8:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   14edc:	1049      	asrs	r1, r1, #1
		val->val2 = (conv_val % 2) * 500000;
   14ede:	2b00      	cmp	r3, #0
   14ee0:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
   14ee4:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 2) * 500000;
   14ee6:	bfb8      	it	lt
   14ee8:	425b      	neglt	r3, r3
   14eea:	4903      	ldr	r1, [pc, #12]	; (14ef8 <hts221_channel_get+0x8c>)
   14eec:	e7df      	b.n	14eae <hts221_channel_get+0x42>
		return -ENOTSUP;
   14eee:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14ef2:	e7df      	b.n	14eb4 <hts221_channel_get+0x48>
   14ef4:	0001e848 	.word	0x0001e848
   14ef8:	0007a120 	.word	0x0007a120

00014efc <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
   14efc:	b530      	push	{r4, r5, lr}
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
   14efe:	6844      	ldr	r4, [r0, #4]
{
   14f00:	b087      	sub	sp, #28
   14f02:	4605      	mov	r5, r0
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
   14f04:	f10d 0107 	add.w	r1, sp, #7
   14f08:	4620      	mov	r0, r4
   14f0a:	f003 fcd9 	bl	188c0 <hts221_device_id_get>
	if (status < 0) {
   14f0e:	2800      	cmp	r0, #0
   14f10:	db05      	blt.n	14f1e <hts221_init+0x22>
		LOG_ERR("Failed to read chip ID.");
		return status;
	}

	if (id != HTS221_ID) {
   14f12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14f16:	2bbc      	cmp	r3, #188	; 0xbc
   14f18:	d003      	beq.n	14f22 <hts221_init+0x26>
		LOG_ERR("Invalid chip ID.");
		return -EINVAL;
   14f1a:	f06f 0015 	mvn.w	r0, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
   14f1e:	b007      	add	sp, #28
   14f20:	bd30      	pop	{r4, r5, pc}
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   14f22:	492c      	ldr	r1, [pc, #176]	; (14fd4 <hts221_init+0xd8>)
   14f24:	4608      	mov	r0, r1
   14f26:	f003 ff4e 	bl	18dc6 <strcmp>
   14f2a:	b168      	cbz	r0, 14f48 <hts221_init+0x4c>
   14f2c:	4929      	ldr	r1, [pc, #164]	; (14fd4 <hts221_init+0xd8>)
   14f2e:	482a      	ldr	r0, [pc, #168]	; (14fd8 <hts221_init+0xdc>)
   14f30:	f003 ff49 	bl	18dc6 <strcmp>
   14f34:	b138      	cbz	r0, 14f46 <hts221_init+0x4a>
   14f36:	4927      	ldr	r1, [pc, #156]	; (14fd4 <hts221_init+0xd8>)
   14f38:	4828      	ldr	r0, [pc, #160]	; (14fdc <hts221_init+0xe0>)
   14f3a:	f003 ff44 	bl	18dc6 <strcmp>
   14f3e:	2800      	cmp	r0, #0
   14f40:	d1eb      	bne.n	14f1a <hts221_init+0x1e>
   14f42:	2002      	movs	r0, #2
   14f44:	e000      	b.n	14f48 <hts221_init+0x4c>
   14f46:	2001      	movs	r0, #1
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
   14f48:	4b25      	ldr	r3, [pc, #148]	; (14fe0 <hts221_init+0xe4>)
   14f4a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   14f4e:	7901      	ldrb	r1, [r0, #4]
   14f50:	4620      	mov	r0, r4
   14f52:	f003 fc87 	bl	18864 <hts221_data_rate_set>
	if (status < 0) {
   14f56:	2800      	cmp	r0, #0
   14f58:	dbe1      	blt.n	14f1e <hts221_init+0x22>
	status = hts221_block_data_update_set(ctx, 1);
   14f5a:	2101      	movs	r1, #1
   14f5c:	4620      	mov	r0, r4
   14f5e:	f003 fc98 	bl	18892 <hts221_block_data_update_set>
	if (status < 0) {
   14f62:	2800      	cmp	r0, #0
   14f64:	dbdb      	blt.n	14f1e <hts221_init+0x22>
	status = hts221_power_on_set(ctx, 1);
   14f66:	2101      	movs	r1, #1
   14f68:	4620      	mov	r0, r4
   14f6a:	f003 fcae 	bl	188ca <hts221_power_on_set>
	if (status < 0) {
   14f6e:	2800      	cmp	r0, #0
   14f70:	dbd5      	blt.n	14f1e <hts221_init+0x22>
	return z_impl_k_sleep(timeout);
   14f72:	2100      	movs	r1, #0
   14f74:	2063      	movs	r0, #99	; 0x63
   14f76:	f002 fe19 	bl	17bac <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   14f7a:	6868      	ldr	r0, [r5, #4]
	struct hts221_data *data = dev->data;
   14f7c:	692c      	ldr	r4, [r5, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   14f7e:	2310      	movs	r3, #16
   14f80:	aa02      	add	r2, sp, #8
   14f82:	21b0      	movs	r1, #176	; 0xb0
   14f84:	f003 fc62 	bl	1884c <hts221_read_reg>
	if (status < 0) {
   14f88:	2800      	cmp	r0, #0
   14f8a:	dbc8      	blt.n	14f1e <hts221_init+0x22>
	data->h0_rh_x2 = buf[0];
   14f8c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14f90:	7123      	strb	r3, [r4, #4]
	data->h1_rh_x2 = buf[1];
   14f92:	f89d 3009 	ldrb.w	r3, [sp, #9]
   14f96:	7163      	strb	r3, [r4, #5]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
   14f98:	f89d 300d 	ldrb.w	r3, [sp, #13]
   14f9c:	021a      	lsls	r2, r3, #8
   14f9e:	f402 7140 	and.w	r1, r2, #768	; 0x300
   14fa2:	f89d 200a 	ldrb.w	r2, [sp, #10]
   14fa6:	430a      	orrs	r2, r1
   14fa8:	80e2      	strh	r2, [r4, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
   14faa:	019b      	lsls	r3, r3, #6
   14fac:	f89d 200b 	ldrb.w	r2, [sp, #11]
   14fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
   14fb4:	4313      	orrs	r3, r2
   14fb6:	8123      	strh	r3, [r4, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
   14fb8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   14fbc:	8163      	strh	r3, [r4, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
   14fbe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   14fc2:	81a3      	strh	r3, [r4, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
   14fc4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   14fc8:	81e3      	strh	r3, [r4, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
   14fca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   14fce:	8223      	strh	r3, [r4, #16]
	return 0;
   14fd0:	2000      	movs	r0, #0
   14fd2:	e7a4      	b.n	14f1e <hts221_init+0x22>
   14fd4:	0001ddcd 	.word	0x0001ddcd
   14fd8:	0001e206 	.word	0x0001e206
   14fdc:	0001e208 	.word	0x0001e208
   14fe0:	0001dc08 	.word	0x0001dc08

00014fe4 <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
   14fe4:	b538      	push	{r3, r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
   14fe6:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
   14fe8:	4908      	ldr	r1, [pc, #32]	; (1500c <regulator_fixed_init_onoff+0x28>)
{
   14fea:	4604      	mov	r4, r0
	data->dev = dev;
   14fec:	4628      	mov	r0, r5
   14fee:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
   14ff2:	f003 f922 	bl	1823a <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
   14ff6:	4906      	ldr	r1, [pc, #24]	; (15010 <regulator_fixed_init_onoff+0x2c>)
   14ff8:	f105 0020 	add.w	r0, r5, #32
   14ffc:	f006 ffd9 	bl	1bfb2 <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
   15000:	6860      	ldr	r0, [r4, #4]
   15002:	f006 fbc0 	bl	1b786 <common_init.isra.0>
	}

	LOG_INF("%s onoff: %d", dev->name, rc);

	return rc;
}
   15006:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1500a:	bd38      	pop	{r3, r4, r5, pc}
   1500c:	0001dca8 	.word	0x0001dca8
   15010:	0001b7f1 	.word	0x0001b7f1

00015014 <finalize_transition>:
{
   15014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
   15018:	1e1c      	subs	r4, r3, #0
{
   1501a:	4605      	mov	r5, r0
   1501c:	460f      	mov	r7, r1
   1501e:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
   15020:	db10      	blt.n	15044 <finalize_transition+0x30>
   15022:	b17a      	cbz	r2, 15044 <finalize_transition+0x30>
			return (uint32_t)((t * to_hz + off) / from_hz);
   15024:	ea4f 4952 	mov.w	r9, r2, lsr #17
   15028:	03d6      	lsls	r6, r2, #15
   1502a:	2300      	movs	r3, #0
   1502c:	4a14      	ldr	r2, [pc, #80]	; (15080 <finalize_transition+0x6c>)
   1502e:	4630      	mov	r0, r6
   15030:	4649      	mov	r1, r9
   15032:	f7eb fc23 	bl	87c <__aeabi_uldivmod>
		    || k_is_pre_kernel()
   15036:	b110      	cbz	r0, 1503e <finalize_transition+0x2a>
	return !z_sys_post_kernel;
   15038:	4b12      	ldr	r3, [pc, #72]	; (15084 <finalize_transition+0x70>)
   1503a:	781b      	ldrb	r3, [r3, #0]
   1503c:	b943      	cbnz	r3, 15050 <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
   1503e:	4640      	mov	r0, r8
   15040:	f007 f935 	bl	1c2ae <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
   15044:	4621      	mov	r1, r4
   15046:	1d28      	adds	r0, r5, #4
   15048:	463b      	mov	r3, r7
}
   1504a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
   1504e:	4718      	bx	r3
			return ((t * to_hz + off) / from_hz);
   15050:	480d      	ldr	r0, [pc, #52]	; (15088 <finalize_transition+0x74>)
   15052:	4a0b      	ldr	r2, [pc, #44]	; (15080 <finalize_transition+0x6c>)
			data->notify = notify;
   15054:	652f      	str	r7, [r5, #80]	; 0x50
   15056:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
   15058:	f04f 0303 	mov.w	r3, #3
   1505c:	f149 0100 	adc.w	r1, r9, #0
   15060:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
   15064:	2300      	movs	r3, #0
   15066:	f7eb fc09 	bl	87c <__aeabi_uldivmod>
   1506a:	4602      	mov	r2, r0
   1506c:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
   1506e:	f105 0020 	add.w	r0, r5, #32
   15072:	f002 fad3 	bl	1761c <k_work_schedule>
			if (rc >= 0) {
   15076:	1e04      	subs	r4, r0, #0
   15078:	dbe4      	blt.n	15044 <finalize_transition+0x30>
}
   1507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1507e:	bf00      	nop
   15080:	000f4240 	.word	0x000f4240
   15084:	20002bf6 	.word	0x20002bf6
   15088:	000f423f 	.word	0x000f423f

0001508c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1508c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1508e:	794b      	ldrb	r3, [r1, #5]
   15090:	2b01      	cmp	r3, #1
   15092:	d120      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15094:	798b      	ldrb	r3, [r1, #6]
   15096:	2b03      	cmp	r3, #3
   15098:	d11d      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1509a:	79cc      	ldrb	r4, [r1, #7]
   1509c:	b10c      	cbz	r4, 150a2 <uarte_nrfx_configure+0x16>
   1509e:	2c01      	cmp	r4, #1
   150a0:	d119      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   150a2:	790a      	ldrb	r2, [r1, #4]
   150a4:	b112      	cbz	r2, 150ac <uarte_nrfx_configure+0x20>
   150a6:	2a02      	cmp	r2, #2
   150a8:	d115      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
   150aa:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   150ac:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   150ae:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   150b0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   150b4:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   150b6:	d062      	beq.n	1517e <uarte_nrfx_configure+0xf2>
   150b8:	d82b      	bhi.n	15112 <uarte_nrfx_configure+0x86>
   150ba:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   150be:	d061      	beq.n	15184 <uarte_nrfx_configure+0xf8>
   150c0:	d814      	bhi.n	150ec <uarte_nrfx_configure+0x60>
   150c2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   150c6:	d05f      	beq.n	15188 <uarte_nrfx_configure+0xfc>
   150c8:	d808      	bhi.n	150dc <uarte_nrfx_configure+0x50>
   150ca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   150ce:	d05e      	beq.n	1518e <uarte_nrfx_configure+0x102>
   150d0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   150d4:	d05e      	beq.n	15194 <uarte_nrfx_configure+0x108>
   150d6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   150da:	e04f      	b.n	1517c <uarte_nrfx_configure+0xf0>
   150dc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   150e0:	d05b      	beq.n	1519a <uarte_nrfx_configure+0x10e>
   150e2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   150e6:	d1f6      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   150e8:	4b36      	ldr	r3, [pc, #216]	; (151c4 <uarte_nrfx_configure+0x138>)
   150ea:	e03c      	b.n	15166 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   150ec:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   150f0:	d056      	beq.n	151a0 <uarte_nrfx_configure+0x114>
   150f2:	d807      	bhi.n	15104 <uarte_nrfx_configure+0x78>
   150f4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   150f8:	d054      	beq.n	151a4 <uarte_nrfx_configure+0x118>
   150fa:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   150fe:	d1ea      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   15100:	4b31      	ldr	r3, [pc, #196]	; (151c8 <uarte_nrfx_configure+0x13c>)
   15102:	e030      	b.n	15166 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15104:	f647 2612 	movw	r6, #31250	; 0x7a12
   15108:	42b3      	cmp	r3, r6
   1510a:	d1e4      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1510c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15110:	e029      	b.n	15166 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15112:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15116:	d047      	beq.n	151a8 <uarte_nrfx_configure+0x11c>
   15118:	d813      	bhi.n	15142 <uarte_nrfx_configure+0xb6>
   1511a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1511e:	d046      	beq.n	151ae <uarte_nrfx_configure+0x122>
   15120:	d809      	bhi.n	15136 <uarte_nrfx_configure+0xaa>
   15122:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   15126:	42b3      	cmp	r3, r6
   15128:	d043      	beq.n	151b2 <uarte_nrfx_configure+0x126>
   1512a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1512e:	d1d2      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15130:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15134:	e017      	b.n	15166 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15136:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1513a:	d1cc      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1513c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15140:	e011      	b.n	15166 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15142:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15146:	d037      	beq.n	151b8 <uarte_nrfx_configure+0x12c>
   15148:	d808      	bhi.n	1515c <uarte_nrfx_configure+0xd0>
   1514a:	4e20      	ldr	r6, [pc, #128]	; (151cc <uarte_nrfx_configure+0x140>)
   1514c:	42b3      	cmp	r3, r6
   1514e:	d036      	beq.n	151be <uarte_nrfx_configure+0x132>
   15150:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   15154:	d1bf      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   15156:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1515a:	e004      	b.n	15166 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1515c:	4e1c      	ldr	r6, [pc, #112]	; (151d0 <uarte_nrfx_configure+0x144>)
   1515e:	42b3      	cmp	r3, r6
   15160:	d1b9      	bne.n	150d6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15162:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   15166:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15168:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   1516c:	1d03      	adds	r3, r0, #4
   1516e:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   15170:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   15172:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   15176:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1517a:	2000      	movs	r0, #0
}
   1517c:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1517e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   15182:	e7f0      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15184:	4b13      	ldr	r3, [pc, #76]	; (151d4 <uarte_nrfx_configure+0x148>)
   15186:	e7ee      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15188:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1518c:	e7eb      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1518e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15192:	e7e8      	b.n	15166 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   15194:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15198:	e7e5      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1519a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1519e:	e7e2      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   151a0:	4b0d      	ldr	r3, [pc, #52]	; (151d8 <uarte_nrfx_configure+0x14c>)
   151a2:	e7e0      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   151a4:	4b0d      	ldr	r3, [pc, #52]	; (151dc <uarte_nrfx_configure+0x150>)
   151a6:	e7de      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   151a8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   151ac:	e7db      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   151ae:	4b0c      	ldr	r3, [pc, #48]	; (151e0 <uarte_nrfx_configure+0x154>)
   151b0:	e7d9      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   151b2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   151b6:	e7d6      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   151b8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   151bc:	e7d3      	b.n	15166 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   151be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   151c2:	e7d0      	b.n	15166 <uarte_nrfx_configure+0xda>
   151c4:	0013b000 	.word	0x0013b000
   151c8:	004ea000 	.word	0x004ea000
   151cc:	0003d090 	.word	0x0003d090
   151d0:	000f4240 	.word	0x000f4240
   151d4:	00275000 	.word	0x00275000
   151d8:	0075c000 	.word	0x0075c000
   151dc:	003af000 	.word	0x003af000
   151e0:	013a9000 	.word	0x013a9000

000151e4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   151e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   151e6:	6906      	ldr	r6, [r0, #16]
{
   151e8:	4605      	mov	r5, r0
   151ea:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   151ec:	f006 fd5c 	bl	1bca8 <k_is_in_isr>
   151f0:	b910      	cbnz	r0, 151f8 <uarte_nrfx_poll_out+0x14>
   151f2:	4b2c      	ldr	r3, [pc, #176]	; (152a4 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   151f4:	781b      	ldrb	r3, [r3, #0]
   151f6:	b983      	cbnz	r3, 1521a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   151f8:	f04f 0320 	mov.w	r3, #32
   151fc:	f3ef 8411 	mrs	r4, BASEPRI
   15200:	f383 8812 	msr	BASEPRI_MAX, r3
   15204:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   15208:	6868      	ldr	r0, [r5, #4]
   1520a:	f006 fb8f 	bl	1b92c <is_tx_ready.isra.0>
   1520e:	bb28      	cbnz	r0, 1525c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   15210:	f384 8811 	msr	BASEPRI, r4
   15214:	f3bf 8f6f 	isb	sy
}
   15218:	e7ee      	b.n	151f8 <uarte_nrfx_poll_out+0x14>
{
   1521a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1521c:	6868      	ldr	r0, [r5, #4]
   1521e:	f006 fb85 	bl	1b92c <is_tx_ready.isra.0>
   15222:	b970      	cbnz	r0, 15242 <uarte_nrfx_poll_out+0x5e>
   15224:	2001      	movs	r0, #1
   15226:	f006 fbda 	bl	1b9de <nrfx_busy_wait>
   1522a:	3c01      	subs	r4, #1
   1522c:	d1f6      	bne.n	1521c <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   1522e:	2100      	movs	r1, #0
   15230:	2021      	movs	r0, #33	; 0x21
   15232:	f002 fcbb 	bl	17bac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15236:	e7f0      	b.n	1521a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   15238:	f384 8811 	msr	BASEPRI, r4
   1523c:	f3bf 8f6f 	isb	sy
}
   15240:	e7f5      	b.n	1522e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   15242:	f04f 0320 	mov.w	r3, #32
   15246:	f3ef 8411 	mrs	r4, BASEPRI
   1524a:	f383 8812 	msr	BASEPRI_MAX, r3
   1524e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   15252:	6868      	ldr	r0, [r5, #4]
   15254:	f006 fb6a 	bl	1b92c <is_tx_ready.isra.0>
   15258:	2800      	cmp	r0, #0
   1525a:	d0ed      	beq.n	15238 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   1525c:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   15260:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   15262:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   15264:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15266:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1526a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1526e:	2200      	movs	r2, #0
   15270:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15274:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   15278:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   1527c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15280:	684a      	ldr	r2, [r1, #4]
   15282:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15284:	bf41      	itttt	mi
   15286:	2208      	movmi	r2, #8
   15288:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   1528c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   15290:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15294:	2201      	movs	r2, #1
   15296:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   15298:	f384 8811 	msr	BASEPRI, r4
   1529c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   152a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   152a2:	bf00      	nop
   152a4:	20002bf6 	.word	0x20002bf6

000152a8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   152a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   152ac:	2101      	movs	r1, #1
   152ae:	4606      	mov	r6, r0
   152b0:	2200      	movs	r2, #0
   152b2:	2002      	movs	r0, #2
   152b4:	f7ed ff16 	bl	30e4 <z_arm_irq_priority_set>
   152b8:	2002      	movs	r0, #2
   152ba:	f7ed fee1 	bl	3080 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   152be:	6877      	ldr	r7, [r6, #4]
	struct uarte_nrfx_data *data = dev->data;
   152c0:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
   152c2:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   152c4:	2300      	movs	r3, #0
   152c6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   152ca:	602e      	str	r6, [r5, #0]
	uarte_nrfx_pins_configure(dev, false);
   152cc:	6873      	ldr	r3, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   152ce:	68d8      	ldr	r0, [r3, #12]
   152d0:	1c41      	adds	r1, r0, #1
   152d2:	d00c      	beq.n	152ee <uarte_0_init+0x46>
    *p_pin = pin_number & 0x1F;
   152d4:	f000 021f 	and.w	r2, r0, #31
    p_reg->OUTSET = set_mask;
   152d8:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   152dc:	2101      	movs	r1, #1
   152de:	4091      	lsls	r1, r2
    reg->PIN_CNF[pin_number] = cnf;
   152e0:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   152e4:	f8cc 1508 	str.w	r1, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   152e8:	2103      	movs	r1, #3
   152ea:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   152ee:	6919      	ldr	r1, [r3, #16]
   152f0:	1c4a      	adds	r2, r1, #1
   152f2:	d010      	beq.n	15316 <uarte_0_init+0x6e>
			nrf_gpio_cfg_input(cfg->rx_pin,
   152f4:	7f1a      	ldrb	r2, [r3, #28]
   152f6:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   152f8:	f001 021f 	and.w	r2, r1, #31
   152fc:	bf14      	ite	ne
   152fe:	f04f 0c03 	movne.w	ip, #3
   15302:	f04f 0c00 	moveq.w	ip, #0
    reg->PIN_CNF[pin_number] = cnf;
   15306:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1530a:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1530e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   15312:	f84e c022 	str.w	ip, [lr, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15316:	f8d3 c014 	ldr.w	ip, [r3, #20]
   1531a:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   1531e:	d00f      	beq.n	15340 <uarte_0_init+0x98>
    *p_pin = pin_number & 0x1F;
   15320:	f00c 021f 	and.w	r2, ip, #31
    p_reg->OUTSET = set_mask;
   15324:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15328:	f04f 0e01 	mov.w	lr, #1
   1532c:	fa0e fe02 	lsl.w	lr, lr, r2
    reg->PIN_CNF[pin_number] = cnf;
   15330:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   15334:	f8c8 e508 	str.w	lr, [r8, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   15338:	f04f 0e03 	mov.w	lr, #3
   1533c:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   15340:	f8d3 e018 	ldr.w	lr, [r3, #24]
   15344:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   15348:	d010      	beq.n	1536c <uarte_0_init+0xc4>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1534a:	7f5a      	ldrb	r2, [r3, #29]
   1534c:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   1534e:	f00e 021f 	and.w	r2, lr, #31
   15352:	bf14      	ite	ne
   15354:	f04f 0803 	movne.w	r8, #3
   15358:	f04f 0800 	moveq.w	r8, #0
    reg->PIN_CNF[pin_number] = cnf;
   1535c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   15360:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   15364:	ea4f 0888 	mov.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   15368:	f849 8022 	str.w	r8, [r9, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1536c:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
   1536e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   15372:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &data->uart_config);
   15376:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   15378:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
   1537c:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.CTS = pselcts;
   1537e:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
   15382:	f7ff fe83 	bl	1508c <uarte_nrfx_configure>
	if (err) {
   15386:	4606      	mov	r6, r0
   15388:	2800      	cmp	r0, #0
   1538a:	d143      	bne.n	15414 <uarte_0_init+0x16c>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1538c:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1538e:	0799      	lsls	r1, r3, #30
   15390:	d519      	bpl.n	153c6 <uarte_0_init+0x11e>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   15392:	f105 0012 	add.w	r0, r5, #18
   15396:	f001 f975 	bl	16684 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1539a:	4b21      	ldr	r3, [pc, #132]	; (15420 <uarte_0_init+0x178>)
   1539c:	4298      	cmp	r0, r3
   1539e:	d13c      	bne.n	1541a <uarte_0_init+0x172>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   153a0:	7ca8      	ldrb	r0, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   153a2:	00c3      	lsls	r3, r0, #3
   153a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   153a8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   153ac:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   153b0:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   153b4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   153b8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   153bc:	4a19      	ldr	r2, [pc, #100]	; (15424 <uarte_0_init+0x17c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   153be:	2301      	movs	r3, #1
   153c0:	4083      	lsls	r3, r0
   153c2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   153c6:	2308      	movs	r3, #8
   153c8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   153cc:	7a3b      	ldrb	r3, [r7, #8]
   153ce:	b95b      	cbnz	r3, 153e8 <uarte_0_init+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   153d0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   153d4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   153d8:	f105 0311 	add.w	r3, r5, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   153dc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   153e0:	2301      	movs	r3, #1
   153e2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   153e6:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   153e8:	687b      	ldr	r3, [r7, #4]
   153ea:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   153ec:	bf5c      	itt	pl
   153ee:	f44f 7280 	movpl.w	r2, #256	; 0x100
   153f2:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   153f6:	06db      	lsls	r3, r3, #27
   153f8:	bf44      	itt	mi
   153fa:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   153fe:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   15402:	3510      	adds	r5, #16
    p_reg->TXD.MAXCNT = length;
   15404:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15406:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1540a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1540e:	2301      	movs	r3, #1
   15410:	60a3      	str	r3, [r4, #8]
   15412:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   15414:	4630      	mov	r0, r6
   15416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   1541a:	f06f 0604 	mvn.w	r6, #4
UART_NRF_UARTE_DEVICE(0);
   1541e:	e7f9      	b.n	15414 <uarte_0_init+0x16c>
   15420:	0bad0000 	.word	0x0bad0000
   15424:	4001f000 	.word	0x4001f000

00015428 <random_byte_get>:
	__asm__ volatile(
   15428:	f04f 0320 	mov.w	r3, #32
   1542c:	f3ef 8211 	mrs	r2, BASEPRI
   15430:	f383 8812 	msr	BASEPRI_MAX, r3
   15434:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   15438:	4b09      	ldr	r3, [pc, #36]	; (15460 <random_byte_get+0x38>)
   1543a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1543e:	b161      	cbz	r1, 1545a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15440:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   15442:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15446:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1544a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1544e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   15450:	f382 8811 	msr	BASEPRI, r2
   15454:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   15458:	4770      	bx	lr
	int retval = -EAGAIN;
   1545a:	f06f 000a 	mvn.w	r0, #10
   1545e:	e7f7      	b.n	15450 <random_byte_get+0x28>
   15460:	4000d000 	.word	0x4000d000

00015464 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   15464:	b5f0      	push	{r4, r5, r6, r7, lr}
   15466:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   15468:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1546a:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1546c:	f04f 0020 	mov.w	r0, #32
   15470:	f3ef 8e11 	mrs	lr, BASEPRI
   15474:	f380 8812 	msr	BASEPRI_MAX, r0
   15478:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1547c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1547e:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   15482:	1ba4      	subs	r4, r4, r6
   15484:	403c      	ands	r4, r7
	if (available < len) {
   15486:	42a2      	cmp	r2, r4
		len = available;
   15488:	bf88      	it	hi
   1548a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1548c:	18b0      	adds	r0, r6, r2
   1548e:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   15490:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   15492:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   15494:	f38e 8811 	msr	BASEPRI, lr
   15498:	f3bf 8f6f 	isb	sy
   1549c:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1549e:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   154a0:	4290      	cmp	r0, r2
   154a2:	d119      	bne.n	154d8 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   154a4:	4566      	cmp	r6, ip
   154a6:	d10d      	bne.n	154c4 <rng_pool_get+0x60>
	__asm__ volatile(
   154a8:	f04f 0520 	mov.w	r5, #32
   154ac:	f3ef 8011 	mrs	r0, BASEPRI
   154b0:	f385 8812 	msr	BASEPRI_MAX, r5
   154b4:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   154b8:	781d      	ldrb	r5, [r3, #0]
   154ba:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   154bc:	f380 8811 	msr	BASEPRI, r0
   154c0:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   154c4:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   154c6:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   154c8:	b290      	uxth	r0, r2
	available = available - len;
   154ca:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   154cc:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   154ce:	bf22      	ittt	cs
   154d0:	4b06      	ldrcs	r3, [pc, #24]	; (154ec <rng_pool_get+0x88>)
   154d2:	2201      	movcs	r2, #1
   154d4:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   154d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   154d8:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   154dc:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   154de:	f89e e005 	ldrb.w	lr, [lr, #5]
   154e2:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   154e6:	403d      	ands	r5, r7
   154e8:	e7da      	b.n	154a0 <rng_pool_get+0x3c>
   154ea:	bf00      	nop
   154ec:	4000d000 	.word	0x4000d000

000154f0 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   154f0:	43db      	mvns	r3, r3
{
   154f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   154f6:	f013 0501 	ands.w	r5, r3, #1
{
   154fa:	460e      	mov	r6, r1
   154fc:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   154fe:	d004      	beq.n	1550a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   15500:	4821      	ldr	r0, [pc, #132]	; (15588 <entropy_nrf5_get_entropy_isr+0x98>)
   15502:	f7ff ffaf 	bl	15464 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   15506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1550a:	b3a2      	cbz	r2, 15576 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1550c:	f04f 0320 	mov.w	r3, #32
   15510:	f3ef 8811 	mrs	r8, BASEPRI
   15514:	f383 8812 	msr	BASEPRI_MAX, r3
   15518:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1551c:	200d      	movs	r0, #13
   1551e:	f7ed fdd3 	bl	30c8 <arch_irq_is_enabled>
   15522:	4607      	mov	r7, r0
		irq_disable(IRQN);
   15524:	200d      	movs	r0, #13
   15526:	f7ed fdbb 	bl	30a0 <arch_irq_disable>
	__asm__ volatile(
   1552a:	f388 8811 	msr	BASEPRI, r8
   1552e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15532:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1558c <entropy_nrf5_get_entropy_isr+0x9c>
   15536:	f8df 9058 	ldr.w	r9, [pc, #88]	; 15590 <entropy_nrf5_get_entropy_isr+0xa0>
   1553a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1553e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   15542:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   15546:	2301      	movs	r3, #1
   15548:	f8c8 3000 	str.w	r3, [r8]
   1554c:	4625      	mov	r5, r4
   1554e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   15552:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   15556:	b183      	cbz	r3, 1557a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   15558:	f7ff ff66 	bl	15428 <random_byte_get>
			if (byte < 0) {
   1555c:	1e03      	subs	r3, r0, #0
   1555e:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   15562:	dbf6      	blt.n	15552 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   15564:	3d01      	subs	r5, #1
   15566:	b2ad      	uxth	r5, r5
   15568:	5573      	strb	r3, [r6, r5]
		} while (len);
   1556a:	2d00      	cmp	r5, #0
   1556c:	d1f1      	bne.n	15552 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1556e:	b117      	cbz	r7, 15576 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   15570:	200d      	movs	r0, #13
   15572:	f7ed fd85 	bl	3080 <arch_irq_enable>
	return cnt;
   15576:	4620      	mov	r0, r4
   15578:	e7c5      	b.n	15506 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1557a:	f3bf 8f4f 	dsb	sy
				__WFE();
   1557e:	bf20      	wfe
				__SEV();
   15580:	bf40      	sev
				__WFE();
   15582:	bf20      	wfe
   15584:	e7e5      	b.n	15552 <entropy_nrf5_get_entropy_isr+0x62>
   15586:	bf00      	nop
   15588:	20002600 	.word	0x20002600
   1558c:	4000d000 	.word	0x4000d000
   15590:	e000e100 	.word	0xe000e100

00015594 <entropy_nrf5_get_entropy>:
{
   15594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   15598:	4f13      	ldr	r7, [pc, #76]	; (155e8 <entropy_nrf5_get_entropy+0x54>)
   1559a:	460d      	mov	r5, r1
   1559c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1559e:	f107 0845 	add.w	r8, r7, #69	; 0x45
   155a2:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   155a6:	b914      	cbnz	r4, 155ae <entropy_nrf5_get_entropy+0x1a>
}
   155a8:	4620      	mov	r0, r4
   155aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   155ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   155b6:	4638      	mov	r0, r7
   155b8:	f001 fe82 	bl	172c0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   155bc:	4622      	mov	r2, r4
   155be:	4629      	mov	r1, r5
   155c0:	4640      	mov	r0, r8
   155c2:	f7ff ff4f 	bl	15464 <rng_pool_get>
   155c6:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   155c8:	4638      	mov	r0, r7
   155ca:	f001 fe53 	bl	17274 <z_impl_k_sem_give>
		if (bytes == 0U) {
   155ce:	b93e      	cbnz	r6, 155e0 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   155d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   155d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   155d8:	4648      	mov	r0, r9
   155da:	f001 fe71 	bl	172c0 <z_impl_k_sem_take>
			continue;
   155de:	e7e2      	b.n	155a6 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   155e0:	1ba4      	subs	r4, r4, r6
   155e2:	b2a4      	uxth	r4, r4
		buf += bytes;
   155e4:	4435      	add	r5, r6
   155e6:	e7de      	b.n	155a6 <entropy_nrf5_get_entropy+0x12>
   155e8:	200025d0 	.word	0x200025d0

000155ec <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   155ec:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   155ee:	4c19      	ldr	r4, [pc, #100]	; (15654 <entropy_nrf5_init+0x68>)
   155f0:	2201      	movs	r2, #1
   155f2:	4611      	mov	r1, r2
   155f4:	4620      	mov	r0, r4
   155f6:	f006 fc36 	bl	1be66 <z_impl_k_sem_init>
   155fa:	2201      	movs	r2, #1
   155fc:	2100      	movs	r1, #0
   155fe:	f104 0018 	add.w	r0, r4, #24
   15602:	f006 fc30 	bl	1be66 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   15606:	f240 4307 	movw	r3, #1031	; 0x407
   1560a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1560e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15612:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   15614:	230c      	movs	r3, #12
   15616:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1561a:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1561c:	4b0e      	ldr	r3, [pc, #56]	; (15658 <entropy_nrf5_init+0x6c>)
   1561e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   15622:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   15626:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1562a:	f042 0201 	orr.w	r2, r2, #1
   1562e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   15632:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   15634:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   15638:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1563c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   15640:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   15642:	6019      	str	r1, [r3, #0]
   15644:	200d      	movs	r0, #13
   15646:	f7ed fd4d 	bl	30e4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1564a:	200d      	movs	r0, #13
   1564c:	f7ed fd18 	bl	3080 <arch_irq_enable>

	return 0;
}
   15650:	4628      	mov	r0, r5
   15652:	bd38      	pop	{r3, r4, r5, pc}
   15654:	200025d0 	.word	0x200025d0
   15658:	4000d000 	.word	0x4000d000

0001565c <isr>:
{
   1565c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1565e:	f7ff fee3 	bl	15428 <random_byte_get>
	if (byte < 0) {
   15662:	2800      	cmp	r0, #0
   15664:	db20      	blt.n	156a8 <isr+0x4c>
	uint8_t last  = rngp->last;
   15666:	4b17      	ldr	r3, [pc, #92]	; (156c4 <isr+0x68>)
   15668:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1566c:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   15670:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   15674:	1a51      	subs	r1, r2, r1
   15676:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1567a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1567c:	d10d      	bne.n	1569a <isr+0x3e>
	uint8_t last  = rngp->last;
   1567e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   15682:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   15686:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1568a:	1a51      	subs	r1, r2, r1
   1568c:	ea34 0101 	bics.w	r1, r4, r1
   15690:	d10b      	bne.n	156aa <isr+0x4e>
   15692:	4b0d      	ldr	r3, [pc, #52]	; (156c8 <isr+0x6c>)
   15694:	2201      	movs	r2, #1
   15696:	605a      	str	r2, [r3, #4]
}
   15698:	e00e      	b.n	156b8 <isr+0x5c>
	rngp->buffer[last] = byte;
   1569a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1569c:	3201      	adds	r2, #1
   1569e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   156a0:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   156a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   156a8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   156aa:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   156ac:	3201      	adds	r2, #1
   156ae:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   156b0:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   156b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   156b8:	4804      	ldr	r0, [pc, #16]	; (156cc <isr+0x70>)
}
   156ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   156be:	f001 bdd9 	b.w	17274 <z_impl_k_sem_give>
   156c2:	bf00      	nop
   156c4:	200025d0 	.word	0x200025d0
   156c8:	4000d000 	.word	0x4000d000
   156cc:	200025e8 	.word	0x200025e8

000156d0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   156d0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   156d2:	2301      	movs	r3, #1
   156d4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   156d6:	4a11      	ldr	r2, [pc, #68]	; (1571c <compare_int_lock+0x4c>)
   156d8:	f3bf 8f5b 	dmb	ish
   156dc:	43dc      	mvns	r4, r3
   156de:	e852 1f00 	ldrex	r1, [r2]
   156e2:	ea01 0c04 	and.w	ip, r1, r4
   156e6:	e842 ce00 	strex	lr, ip, [r2]
   156ea:	f1be 0f00 	cmp.w	lr, #0
   156ee:	d1f6      	bne.n	156de <compare_int_lock+0xe>
   156f0:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   156f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   156f8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   156fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15700:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   15704:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   15708:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1570c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   15710:	420b      	tst	r3, r1
}
   15712:	bf14      	ite	ne
   15714:	2001      	movne	r0, #1
   15716:	2000      	moveq	r0, #0
   15718:	bd10      	pop	{r4, pc}
   1571a:	bf00      	nop
   1571c:	20002628 	.word	0x20002628

00015720 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   15720:	4919      	ldr	r1, [pc, #100]	; (15788 <sys_clock_timeout_handler+0x68>)
{
   15722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15724:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   15726:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1572a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1572c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   15730:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   15734:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   15736:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1573a:	d222      	bcs.n	15782 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1573c:	4b13      	ldr	r3, [pc, #76]	; (1578c <sys_clock_timeout_handler+0x6c>)
   1573e:	681b      	ldr	r3, [r3, #0]
   15740:	0a1a      	lsrs	r2, r3, #8
   15742:	061b      	lsls	r3, r3, #24
   15744:	195e      	adds	r6, r3, r5
   15746:	4b12      	ldr	r3, [pc, #72]	; (15790 <sys_clock_timeout_handler+0x70>)
   15748:	f142 0700 	adc.w	r7, r2, #0
   1574c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   15750:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   15752:	f002 fb9f 	bl	17e94 <sys_clock_announce>
    return p_reg->CC[ch];
   15756:	00a3      	lsls	r3, r4, #2
   15758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1575c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   15760:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   15764:	42aa      	cmp	r2, r5
   15766:	d10b      	bne.n	15780 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   15768:	b91e      	cbnz	r6, 15772 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   1576a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1576e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   15772:	4b08      	ldr	r3, [pc, #32]	; (15794 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   15774:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   15778:	fa00 f404 	lsl.w	r4, r0, r4
   1577c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   15780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   15782:	2600      	movs	r6, #0
   15784:	e7e5      	b.n	15752 <sys_clock_timeout_handler+0x32>
   15786:	bf00      	nop
   15788:	20001200 	.word	0x20001200
   1578c:	2000262c 	.word	0x2000262c
   15790:	200011e8 	.word	0x200011e8
   15794:	40011000 	.word	0x40011000

00015798 <compare_int_unlock>:
	if (key) {
   15798:	b319      	cbz	r1, 157e2 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1579a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1579e:	2301      	movs	r3, #1
   157a0:	4a10      	ldr	r2, [pc, #64]	; (157e4 <compare_int_unlock+0x4c>)
   157a2:	4083      	lsls	r3, r0
   157a4:	e852 1f00 	ldrex	r1, [r2]
   157a8:	4319      	orrs	r1, r3
   157aa:	e842 1c00 	strex	ip, r1, [r2]
   157ae:	f1bc 0f00 	cmp.w	ip, #0
   157b2:	d1f7      	bne.n	157a4 <compare_int_unlock+0xc>
   157b4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   157b8:	4a0b      	ldr	r2, [pc, #44]	; (157e8 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   157ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   157be:	4083      	lsls	r3, r0
   157c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   157c4:	4b09      	ldr	r3, [pc, #36]	; (157ec <compare_int_unlock+0x54>)
   157c6:	f3bf 8f5b 	dmb	ish
   157ca:	681b      	ldr	r3, [r3, #0]
   157cc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   157d0:	fa23 f000 	lsr.w	r0, r3, r0
   157d4:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   157d6:	bf42      	ittt	mi
   157d8:	4b05      	ldrmi	r3, [pc, #20]	; (157f0 <compare_int_unlock+0x58>)
   157da:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   157de:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   157e2:	4770      	bx	lr
   157e4:	20002628 	.word	0x20002628
   157e8:	40011000 	.word	0x40011000
   157ec:	20002624 	.word	0x20002624
   157f0:	e000e100 	.word	0xe000e100

000157f4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   157f4:	4b0d      	ldr	r3, [pc, #52]	; (1582c <z_nrf_rtc_timer_read+0x38>)
   157f6:	6818      	ldr	r0, [r3, #0]
   157f8:	0a01      	lsrs	r1, r0, #8
   157fa:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   157fc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   15800:	4b0b      	ldr	r3, [pc, #44]	; (15830 <z_nrf_rtc_timer_read+0x3c>)
   15802:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   15806:	1818      	adds	r0, r3, r0
   15808:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1580c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15810:	d20a      	bcs.n	15828 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   15812:	4b08      	ldr	r3, [pc, #32]	; (15834 <z_nrf_rtc_timer_read+0x40>)
   15814:	e9d3 2300 	ldrd	r2, r3, [r3]
   15818:	4290      	cmp	r0, r2
   1581a:	eb71 0303 	sbcs.w	r3, r1, r3
   1581e:	d203      	bcs.n	15828 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   15820:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   15824:	f141 0100 	adc.w	r1, r1, #0
}
   15828:	4770      	bx	lr
   1582a:	bf00      	nop
   1582c:	2000262c 	.word	0x2000262c
   15830:	40011000 	.word	0x40011000
   15834:	200011e8 	.word	0x200011e8

00015838 <compare_set>:
{
   15838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1583c:	b085      	sub	sp, #20
   1583e:	4616      	mov	r6, r2
   15840:	4698      	mov	r8, r3
   15842:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   15844:	f7ff ff44 	bl	156d0 <compare_int_lock>
   15848:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1584a:	f7ff ffd3 	bl	157f4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1584e:	42b0      	cmp	r0, r6
   15850:	eb71 0308 	sbcs.w	r3, r1, r8
   15854:	d278      	bcs.n	15948 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   15856:	4b46      	ldr	r3, [pc, #280]	; (15970 <compare_set+0x138>)
   15858:	1a30      	subs	r0, r6, r0
   1585a:	eb68 0101 	sbc.w	r1, r8, r1
   1585e:	4298      	cmp	r0, r3
   15860:	f171 0300 	sbcs.w	r3, r1, #0
   15864:	f080 8081 	bcs.w	1596a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   15868:	4b42      	ldr	r3, [pc, #264]	; (15974 <compare_set+0x13c>)
   1586a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1586e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   15872:	45d8      	cmp	r8, fp
   15874:	bf08      	it	eq
   15876:	4556      	cmpeq	r6, sl
   15878:	d051      	beq.n	1591e <compare_set+0xe6>
   1587a:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1587e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   15882:	f105 0750 	add.w	r7, r5, #80	; 0x50
   15886:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   1588a:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1588c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   15890:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15894:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   15896:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   1589a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1589e:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   158a0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   158a4:	4b34      	ldr	r3, [pc, #208]	; (15978 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   158a6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   158aa:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   158ac:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   158b0:	1a40      	subs	r0, r0, r1
   158b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   158b6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   158ba:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   158bc:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   158c0:	d107      	bne.n	158d2 <compare_set+0x9a>
   158c2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   158c6:	2013      	movs	r0, #19
   158c8:	f006 fcf1 	bl	1c2ae <z_impl_k_busy_wait>
   158cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   158d0:	4b29      	ldr	r3, [pc, #164]	; (15978 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   158d2:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   158d6:	eba4 000c 	sub.w	r0, r4, ip
   158da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   158de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   158e2:	bf88      	it	hi
   158e4:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   158e6:	2000      	movs	r0, #0
   158e8:	6038      	str	r0, [r7, #0]
   158ea:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   158ec:	9801      	ldr	r0, [sp, #4]
   158ee:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   158f2:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   158f6:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   158fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   158fe:	4281      	cmp	r1, r0
   15900:	d006      	beq.n	15910 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   15902:	1a20      	subs	r0, r4, r0
   15904:	3802      	subs	r0, #2
   15906:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1590a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1590e:	d819      	bhi.n	15944 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   15910:	1aa4      	subs	r4, r4, r2
   15912:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   15916:	eb14 0a06 	adds.w	sl, r4, r6
   1591a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   1591e:	4915      	ldr	r1, [pc, #84]	; (15974 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   15920:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   15922:	012b      	lsls	r3, r5, #4
   15924:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   15928:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   1592c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1592e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15930:	6053      	str	r3, [r2, #4]
	return ret;
   15932:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   15934:	4628      	mov	r0, r5
   15936:	9900      	ldr	r1, [sp, #0]
   15938:	f7ff ff2e 	bl	15798 <compare_int_unlock>
}
   1593c:	4620      	mov	r0, r4
   1593e:	b005      	add	sp, #20
   15940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15944:	4620      	mov	r0, r4
   15946:	e7b1      	b.n	158ac <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   15948:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1594a:	4a0c      	ldr	r2, [pc, #48]	; (1597c <compare_set+0x144>)
   1594c:	f3bf 8f5b 	dmb	ish
   15950:	40ab      	lsls	r3, r5
   15952:	e852 1f00 	ldrex	r1, [r2]
   15956:	4319      	orrs	r1, r3
   15958:	e842 1000 	strex	r0, r1, [r2]
   1595c:	2800      	cmp	r0, #0
   1595e:	d1f8      	bne.n	15952 <compare_set+0x11a>
   15960:	f3bf 8f5b 	dmb	ish
   15964:	46b2      	mov	sl, r6
   15966:	46c3      	mov	fp, r8
   15968:	e7d9      	b.n	1591e <compare_set+0xe6>
			return -EINVAL;
   1596a:	f06f 0415 	mvn.w	r4, #21
   1596e:	e7e1      	b.n	15934 <compare_set+0xfc>
   15970:	01000001 	.word	0x01000001
   15974:	200011f0 	.word	0x200011f0
   15978:	40011000 	.word	0x40011000
   1597c:	20002624 	.word	0x20002624

00015980 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   15980:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   15982:	4b19      	ldr	r3, [pc, #100]	; (159e8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   15984:	4d19      	ldr	r5, [pc, #100]	; (159ec <sys_clock_driver_init+0x6c>)
   15986:	2400      	movs	r4, #0
   15988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1598c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15990:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   15994:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   15998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1599c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   159a0:	4b13      	ldr	r3, [pc, #76]	; (159f0 <sys_clock_driver_init+0x70>)
   159a2:	2602      	movs	r6, #2
   159a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   159a8:	2101      	movs	r1, #1
   159aa:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   159ae:	2011      	movs	r0, #17
   159b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   159b4:	4622      	mov	r2, r4
   159b6:	f7ed fb95 	bl	30e4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   159ba:	2011      	movs	r0, #17
   159bc:	f7ed fb60 	bl	3080 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   159c0:	4a0c      	ldr	r2, [pc, #48]	; (159f4 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   159c2:	2301      	movs	r3, #1
   159c4:	60ab      	str	r3, [r5, #8]
   159c6:	602b      	str	r3, [r5, #0]
   159c8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   159ca:	4b0b      	ldr	r3, [pc, #44]	; (159f8 <sys_clock_driver_init+0x78>)
   159cc:	4a0b      	ldr	r2, [pc, #44]	; (159fc <sys_clock_driver_init+0x7c>)
   159ce:	9300      	str	r3, [sp, #0]
   159d0:	9401      	str	r4, [sp, #4]
   159d2:	2300      	movs	r3, #0
   159d4:	4620      	mov	r0, r4
   159d6:	f7ff ff2f 	bl	15838 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   159da:	4630      	mov	r0, r6
   159dc:	f7fe fe30 	bl	14640 <z_nrf_clock_control_lf_on>

	return 0;
}
   159e0:	4620      	mov	r0, r4
   159e2:	b002      	add	sp, #8
   159e4:	bd70      	pop	{r4, r5, r6, pc}
   159e6:	bf00      	nop
   159e8:	200011f0 	.word	0x200011f0
   159ec:	40011000 	.word	0x40011000
   159f0:	e000e100 	.word	0xe000e100
   159f4:	20002628 	.word	0x20002628
   159f8:	00015721 	.word	0x00015721
   159fc:	007fffff 	.word	0x007fffff

00015a00 <rtc_nrf_isr>:
{
   15a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   15a04:	4c35      	ldr	r4, [pc, #212]	; (15adc <rtc_nrf_isr+0xdc>)
   15a06:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   15a0a:	079a      	lsls	r2, r3, #30
   15a0c:	d50b      	bpl.n	15a26 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15a0e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   15a12:	b143      	cbz	r3, 15a26 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   15a14:	4a32      	ldr	r2, [pc, #200]	; (15ae0 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15a16:	2300      	movs	r3, #0
   15a18:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   15a1c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   15a20:	6813      	ldr	r3, [r2, #0]
   15a22:	3301      	adds	r3, #1
   15a24:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   15a26:	f04f 0320 	mov.w	r3, #32
   15a2a:	f3ef 8211 	mrs	r2, BASEPRI
   15a2e:	f383 8812 	msr	BASEPRI_MAX, r3
   15a32:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   15a36:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   15a3a:	03db      	lsls	r3, r3, #15
   15a3c:	d512      	bpl.n	15a64 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15a3e:	f3bf 8f5b 	dmb	ish
   15a42:	4b28      	ldr	r3, [pc, #160]	; (15ae4 <rtc_nrf_isr+0xe4>)
   15a44:	e853 1f00 	ldrex	r1, [r3]
   15a48:	f021 0001 	bic.w	r0, r1, #1
   15a4c:	e843 0600 	strex	r6, r0, [r3]
   15a50:	2e00      	cmp	r6, #0
   15a52:	d1f7      	bne.n	15a44 <rtc_nrf_isr+0x44>
   15a54:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   15a58:	2900      	cmp	r1, #0
   15a5a:	d136      	bne.n	15aca <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15a5c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   15a60:	2b00      	cmp	r3, #0
   15a62:	d132      	bne.n	15aca <rtc_nrf_isr+0xca>
{
   15a64:	2300      	movs	r3, #0
	__asm__ volatile(
   15a66:	f382 8811 	msr	BASEPRI, r2
   15a6a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   15a6e:	b34b      	cbz	r3, 15ac4 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   15a70:	f7ff fec0 	bl	157f4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   15a74:	f04f 0320 	mov.w	r3, #32
   15a78:	f3ef 8c11 	mrs	ip, BASEPRI
   15a7c:	f383 8812 	msr	BASEPRI_MAX, r3
   15a80:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   15a84:	4b18      	ldr	r3, [pc, #96]	; (15ae8 <rtc_nrf_isr+0xe8>)
   15a86:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   15a8a:	42b0      	cmp	r0, r6
   15a8c:	eb71 0207 	sbcs.w	r2, r1, r7
   15a90:	f04f 0200 	mov.w	r2, #0
   15a94:	d320      	bcc.n	15ad8 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15a96:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   15a9a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   15a9e:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   15aa2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   15aa6:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   15aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   15aac:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   15ab0:	f38c 8811 	msr	BASEPRI, ip
   15ab4:	f3bf 8f6f 	isb	sy
		if (handler) {
   15ab8:	b121      	cbz	r1, 15ac4 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   15aba:	9500      	str	r5, [sp, #0]
   15abc:	4632      	mov	r2, r6
   15abe:	463b      	mov	r3, r7
   15ac0:	2000      	movs	r0, #0
   15ac2:	4788      	blx	r1
}
   15ac4:	b003      	add	sp, #12
   15ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   15aca:	2300      	movs	r3, #0
   15acc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   15ad0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   15ad4:	2301      	movs	r3, #1
}
   15ad6:	e7c6      	b.n	15a66 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   15ad8:	4611      	mov	r1, r2
   15ada:	e7e9      	b.n	15ab0 <rtc_nrf_isr+0xb0>
   15adc:	40011000 	.word	0x40011000
   15ae0:	2000262c 	.word	0x2000262c
   15ae4:	20002624 	.word	0x20002624
   15ae8:	200011f0 	.word	0x200011f0

00015aec <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15aec:	1c43      	adds	r3, r0, #1
{
   15aee:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15af0:	d021      	beq.n	15b36 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15af2:	2801      	cmp	r0, #1
   15af4:	dd21      	ble.n	15b3a <sys_clock_set_timeout+0x4e>
   15af6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15afa:	da20      	bge.n	15b3e <sys_clock_set_timeout+0x52>
   15afc:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   15afe:	f7ff fe79 	bl	157f4 <z_nrf_rtc_timer_read>
   15b02:	4b10      	ldr	r3, [pc, #64]	; (15b44 <sys_clock_set_timeout+0x58>)
   15b04:	e9d3 1300 	ldrd	r1, r3, [r3]
   15b08:	1a40      	subs	r0, r0, r1
		ticks = 0;
   15b0a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   15b0e:	bf28      	it	cs
   15b10:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   15b12:	3001      	adds	r0, #1
   15b14:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   15b16:	480c      	ldr	r0, [pc, #48]	; (15b48 <sys_clock_set_timeout+0x5c>)
   15b18:	4282      	cmp	r2, r0
   15b1a:	bf28      	it	cs
   15b1c:	4602      	movcs	r2, r0
   15b1e:	1852      	adds	r2, r2, r1
   15b20:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   15b24:	4909      	ldr	r1, [pc, #36]	; (15b4c <sys_clock_set_timeout+0x60>)
   15b26:	9001      	str	r0, [sp, #4]
   15b28:	9100      	str	r1, [sp, #0]
   15b2a:	f143 0300 	adc.w	r3, r3, #0
   15b2e:	f7ff fe83 	bl	15838 <compare_set>
}
   15b32:	b002      	add	sp, #8
   15b34:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   15b36:	4804      	ldr	r0, [pc, #16]	; (15b48 <sys_clock_set_timeout+0x5c>)
   15b38:	e7e0      	b.n	15afc <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   15b3a:	2400      	movs	r4, #0
   15b3c:	e7df      	b.n	15afe <sys_clock_set_timeout+0x12>
   15b3e:	4c02      	ldr	r4, [pc, #8]	; (15b48 <sys_clock_set_timeout+0x5c>)
   15b40:	e7dd      	b.n	15afe <sys_clock_set_timeout+0x12>
   15b42:	bf00      	nop
   15b44:	20001200 	.word	0x20001200
   15b48:	007fffff 	.word	0x007fffff
   15b4c:	00015721 	.word	0x00015721

00015b50 <sys_clock_elapsed>:
{
   15b50:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   15b52:	f7ff fe4f 	bl	157f4 <z_nrf_rtc_timer_read>
   15b56:	4b02      	ldr	r3, [pc, #8]	; (15b60 <sys_clock_elapsed+0x10>)
   15b58:	681b      	ldr	r3, [r3, #0]
}
   15b5a:	1ac0      	subs	r0, r0, r3
   15b5c:	bd08      	pop	{r3, pc}
   15b5e:	bf00      	nop
   15b60:	20001200 	.word	0x20001200

00015b64 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   15b64:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   15b68:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   15b6c:	2a06      	cmp	r2, #6
   15b6e:	d109      	bne.n	15b84 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   15b70:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   15b74:	f3c3 1303 	ubfx	r3, r3, #4, #4
   15b78:	3b03      	subs	r3, #3
   15b7a:	2b04      	cmp	r3, #4
   15b7c:	d802      	bhi.n	15b84 <nrf52_errata_16+0x20>
   15b7e:	4a02      	ldr	r2, [pc, #8]	; (15b88 <nrf52_errata_16+0x24>)
   15b80:	5cd0      	ldrb	r0, [r2, r3]
   15b82:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   15b84:	2000      	movs	r0, #0
    #endif
}
   15b86:	4770      	bx	lr
   15b88:	0001e268 	.word	0x0001e268

00015b8c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   15b8c:	4a02      	ldr	r2, [pc, #8]	; (15b98 <nvmc_wait+0xc>)
   15b8e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   15b92:	2b00      	cmp	r3, #0
   15b94:	d0fb      	beq.n	15b8e <nvmc_wait+0x2>
}
   15b96:	4770      	bx	lr
   15b98:	4001e000 	.word	0x4001e000

00015b9c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   15b9c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   15b9e:	f005 ff0f 	bl	1b9c0 <nrf52_errata_108>
   15ba2:	b140      	cbz	r0, 15bb6 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   15ba4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15ba8:	4a90      	ldr	r2, [pc, #576]	; (15dec <SystemInit+0x250>)
   15baa:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   15bae:	f3c3 2304 	ubfx	r3, r3, #8, #5
   15bb2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   15bb6:	f7ff ffd5 	bl	15b64 <nrf52_errata_16>
   15bba:	b110      	cbz	r0, 15bc2 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   15bbc:	4b8c      	ldr	r3, [pc, #560]	; (15df0 <SystemInit+0x254>)
   15bbe:	4a8d      	ldr	r2, [pc, #564]	; (15df4 <SystemInit+0x258>)
   15bc0:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   15bc2:	f005 fefd 	bl	1b9c0 <nrf52_errata_108>
   15bc6:	b148      	cbz	r0, 15bdc <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   15bc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15bd0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   15bd4:	f3c3 3342 	ubfx	r3, r3, #13, #3
   15bd8:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   15bdc:	f7ff ffc2 	bl	15b64 <nrf52_errata_16>
   15be0:	b130      	cbz	r0, 15bf0 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   15be2:	4a85      	ldr	r2, [pc, #532]	; (15df8 <SystemInit+0x25c>)
   15be4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   15be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   15bec:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   15bf0:	f005 fee6 	bl	1b9c0 <nrf52_errata_108>
   15bf4:	b140      	cbz	r0, 15c08 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   15bf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15bfa:	2200      	movs	r2, #0
   15bfc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   15c00:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   15c04:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   15c08:	f7ff ffac 	bl	15b64 <nrf52_errata_16>
   15c0c:	b120      	cbz	r0, 15c18 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   15c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15c12:	2203      	movs	r2, #3
   15c14:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   15c18:	f7ff ffa4 	bl	15b64 <nrf52_errata_16>
   15c1c:	b160      	cbz	r0, 15c38 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   15c1e:	4b77      	ldr	r3, [pc, #476]	; (15dfc <SystemInit+0x260>)
   15c20:	2205      	movs	r2, #5
   15c22:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   15c26:	2201      	movs	r2, #1
   15c28:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   15c2c:	2200      	movs	r2, #0
   15c2e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   15c32:	223f      	movs	r2, #63	; 0x3f
   15c34:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   15c38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15c3c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   15c40:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   15c42:	bf09      	itett	eq
   15c44:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   15c48:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   15c4c:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   15c50:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   15c54:	bf08      	it	eq
   15c56:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   15c5a:	2a06      	cmp	r2, #6
   15c5c:	d14d      	bne.n	15cfa <SystemInit+0x15e>
            {
                switch(var2)
   15c5e:	3b03      	subs	r3, #3
   15c60:	2b04      	cmp	r3, #4
   15c62:	d803      	bhi.n	15c6c <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   15c64:	4a66      	ldr	r2, [pc, #408]	; (15e00 <SystemInit+0x264>)
   15c66:	5cd3      	ldrb	r3, [r2, r3]
   15c68:	2b00      	cmp	r3, #0
   15c6a:	d046      	beq.n	15cfa <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   15c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15c70:	4b64      	ldr	r3, [pc, #400]	; (15e04 <SystemInit+0x268>)
   15c72:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   15c76:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   15c7a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   15c7e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   15c82:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   15c86:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   15c8a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   15c8e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   15c92:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   15c96:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   15c9a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   15c9e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   15ca2:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   15ca6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   15caa:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   15cae:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   15cb2:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   15cb6:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   15cba:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   15cbe:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   15cc2:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   15cc6:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   15cca:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   15cce:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   15cd2:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   15cd6:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   15cda:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   15cde:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   15ce2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   15ce6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   15cea:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   15cee:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   15cf2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   15cf6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   15cfa:	f005 fe61 	bl	1b9c0 <nrf52_errata_108>
   15cfe:	b148      	cbz	r0, 15d14 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   15d00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   15d08:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   15d0c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   15d10:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   15d14:	f005 fe54 	bl	1b9c0 <nrf52_errata_108>
   15d18:	b148      	cbz	r0, 15d2e <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   15d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15d1e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   15d22:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   15d24:	bf44      	itt	mi
   15d26:	f06f 0201 	mvnmi.w	r2, #1
   15d2a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   15d2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   15d32:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   15d36:	2a06      	cmp	r2, #6
   15d38:	d126      	bne.n	15d88 <SystemInit+0x1ec>
            {
                switch(var2)
   15d3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15d3e:	3b03      	subs	r3, #3
   15d40:	2b04      	cmp	r3, #4
   15d42:	d802      	bhi.n	15d4a <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   15d44:	4a30      	ldr	r2, [pc, #192]	; (15e08 <SystemInit+0x26c>)
   15d46:	5cd3      	ldrb	r3, [r2, r3]
   15d48:	b163      	cbz	r3, 15d64 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   15d4a:	4a30      	ldr	r2, [pc, #192]	; (15e0c <SystemInit+0x270>)
   15d4c:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   15d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   15d54:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   15d58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   15d5c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   15d60:	2b06      	cmp	r3, #6
   15d62:	d111      	bne.n	15d88 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   15d64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   15d68:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   15d6c:	3b03      	subs	r3, #3
   15d6e:	2b04      	cmp	r3, #4
   15d70:	d802      	bhi.n	15d78 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   15d72:	4a27      	ldr	r2, [pc, #156]	; (15e10 <SystemInit+0x274>)
   15d74:	5cd3      	ldrb	r3, [r2, r3]
   15d76:	b13b      	cbz	r3, 15d88 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   15d78:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   15d7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   15d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15d84:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   15d88:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   15d8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   15d90:	2a00      	cmp	r2, #0
   15d92:	db03      	blt.n	15d9c <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   15d94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   15d98:	2b00      	cmp	r3, #0
   15d9a:	da22      	bge.n	15de2 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   15d9c:	491d      	ldr	r1, [pc, #116]	; (15e14 <SystemInit+0x278>)
   15d9e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   15da0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   15da4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   15da8:	2415      	movs	r4, #21
    nvmc_wait();
   15daa:	f7ff feef 	bl	15b8c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   15dae:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   15db2:	f7ff feeb 	bl	15b8c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   15db6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   15dba:	f7ff fee7 	bl	15b8c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   15dbe:	2300      	movs	r3, #0
   15dc0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   15dc4:	f7ff fee2 	bl	15b8c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   15dc8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15dcc:	490a      	ldr	r1, [pc, #40]	; (15df8 <SystemInit+0x25c>)
   15dce:	4b12      	ldr	r3, [pc, #72]	; (15e18 <SystemInit+0x27c>)
   15dd0:	68ca      	ldr	r2, [r1, #12]
   15dd2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15dd6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15dd8:	60cb      	str	r3, [r1, #12]
   15dda:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15dde:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15de0:	e7fd      	b.n	15dde <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   15de2:	4b0e      	ldr	r3, [pc, #56]	; (15e1c <SystemInit+0x280>)
   15de4:	4a0e      	ldr	r2, [pc, #56]	; (15e20 <SystemInit+0x284>)
   15de6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   15de8:	bd10      	pop	{r4, pc}
   15dea:	bf00      	nop
   15dec:	40013000 	.word	0x40013000
   15df0:	4007c000 	.word	0x4007c000
   15df4:	baadf00d 	.word	0xbaadf00d
   15df8:	e000ed00 	.word	0xe000ed00
   15dfc:	40005000 	.word	0x40005000
   15e00:	0001e259 	.word	0x0001e259
   15e04:	4000c000 	.word	0x4000c000
   15e08:	0001e25e 	.word	0x0001e25e
   15e0c:	40001000 	.word	0x40001000
   15e10:	0001e263 	.word	0x0001e263
   15e14:	4001e000 	.word	0x4001e000
   15e18:	05fa0004 	.word	0x05fa0004
   15e1c:	2000070c 	.word	0x2000070c
   15e20:	03d09000 	.word	0x03d09000

00015e24 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   15e24:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   15e26:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   15e28:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   15e2a:	fab2 f382 	clz	r3, r2
   15e2e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   15e32:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   15e34:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   15e36:	d014      	beq.n	15e62 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15e38:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   15e3c:	fa05 f303 	lsl.w	r3, r5, r3
   15e40:	ea22 0303 	bic.w	r3, r2, r3
   15e44:	e850 6f00 	ldrex	r6, [r0]
   15e48:	4296      	cmp	r6, r2
   15e4a:	d104      	bne.n	15e56 <nrfx_flag32_alloc+0x32>
   15e4c:	e840 3c00 	strex	ip, r3, [r0]
   15e50:	f1bc 0f00 	cmp.w	ip, #0
   15e54:	d1f6      	bne.n	15e44 <nrfx_flag32_alloc+0x20>
   15e56:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15e5a:	d1e5      	bne.n	15e28 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   15e5c:	4802      	ldr	r0, [pc, #8]	; (15e68 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   15e5e:	700c      	strb	r4, [r1, #0]
}
   15e60:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   15e62:	4802      	ldr	r0, [pc, #8]	; (15e6c <nrfx_flag32_alloc+0x48>)
   15e64:	e7fc      	b.n	15e60 <nrfx_flag32_alloc+0x3c>
   15e66:	bf00      	nop
   15e68:	0bad0000 	.word	0x0bad0000
   15e6c:	0bad0002 	.word	0x0bad0002

00015e70 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   15e70:	6803      	ldr	r3, [r0, #0]
   15e72:	40cb      	lsrs	r3, r1
   15e74:	07db      	lsls	r3, r3, #31
{
   15e76:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   15e78:	d415      	bmi.n	15ea6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   15e7a:	2301      	movs	r3, #1
   15e7c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   15e80:	6803      	ldr	r3, [r0, #0]
   15e82:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   15e86:	ea41 0203 	orr.w	r2, r1, r3
   15e8a:	e850 4f00 	ldrex	r4, [r0]
   15e8e:	429c      	cmp	r4, r3
   15e90:	d104      	bne.n	15e9c <nrfx_flag32_free+0x2c>
   15e92:	e840 2c00 	strex	ip, r2, [r0]
   15e96:	f1bc 0f00 	cmp.w	ip, #0
   15e9a:	d1f6      	bne.n	15e8a <nrfx_flag32_free+0x1a>
   15e9c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   15ea0:	d1ee      	bne.n	15e80 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   15ea2:	4802      	ldr	r0, [pc, #8]	; (15eac <nrfx_flag32_free+0x3c>)
}
   15ea4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   15ea6:	4802      	ldr	r0, [pc, #8]	; (15eb0 <nrfx_flag32_free+0x40>)
   15ea8:	e7fc      	b.n	15ea4 <nrfx_flag32_free+0x34>
   15eaa:	bf00      	nop
   15eac:	0bad0000 	.word	0x0bad0000
   15eb0:	0bad0004 	.word	0x0bad0004

00015eb4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15eb4:	4b04      	ldr	r3, [pc, #16]	; (15ec8 <nrfx_clock_init+0x14>)
   15eb6:	791a      	ldrb	r2, [r3, #4]
   15eb8:	b922      	cbnz	r2, 15ec4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   15eba:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   15ebc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   15ebe:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   15ec0:	4802      	ldr	r0, [pc, #8]	; (15ecc <nrfx_clock_init+0x18>)
   15ec2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15ec4:	4802      	ldr	r0, [pc, #8]	; (15ed0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15ec6:	4770      	bx	lr
   15ec8:	20002630 	.word	0x20002630
   15ecc:	0bad0000 	.word	0x0bad0000
   15ed0:	0bad000c 	.word	0x0bad000c

00015ed4 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   15ed4:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   15ed6:	b110      	cbz	r0, 15ede <nrfx_clock_start+0xa>
   15ed8:	2801      	cmp	r0, #1
   15eda:	d034      	beq.n	15f46 <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   15edc:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15ee2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15ee6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   15eea:	03c9      	lsls	r1, r1, #15
   15eec:	d529      	bpl.n	15f42 <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   15eee:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   15ef2:	2a01      	cmp	r2, #1
   15ef4:	d125      	bne.n	15f42 <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15ef6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15efe:	2200      	movs	r2, #0
   15f00:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15f04:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   15f08:	2202      	movs	r2, #2
   15f0a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   15f0e:	4a13      	ldr	r2, [pc, #76]	; (15f5c <nrfx_clock_start+0x88>)
   15f10:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   15f14:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   15f18:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   15f1c:	4b10      	ldr	r3, [pc, #64]	; (15f60 <nrfx_clock_start+0x8c>)
   15f1e:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   15f20:	f044 0101 	orr.w	r1, r4, #1
   15f24:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   15f26:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   15f28:	6859      	ldr	r1, [r3, #4]
   15f2a:	1b49      	subs	r1, r1, r5
   15f2c:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   15f30:	d3fa      	bcc.n	15f28 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
   15f32:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   15f38:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   15f3c:	2201      	movs	r2, #1
   15f3e:	609a      	str	r2, [r3, #8]
}
   15f40:	e7cc      	b.n	15edc <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15f42:	2200      	movs	r2, #0
   15f44:	e7d7      	b.n	15ef6 <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15f4a:	2200      	movs	r2, #0
   15f4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15f50:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15f54:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f58:	6018      	str	r0, [r3, #0]
}
   15f5a:	e7bf      	b.n	15edc <nrfx_clock_start+0x8>
   15f5c:	e000ed00 	.word	0xe000ed00
   15f60:	e0001000 	.word	0xe0001000

00015f64 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   15f64:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   15f66:	b110      	cbz	r0, 15f6e <nrfx_clock_stop+0xa>
   15f68:	2801      	cmp	r0, #1
   15f6a:	d017      	beq.n	15f9c <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15f6c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   15f6e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   15f72:	2302      	movs	r3, #2
   15f74:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f78:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   15f7c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f80:	2301      	movs	r3, #1
   15f82:	60e3      	str	r3, [r4, #12]
   15f84:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15f88:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   15f8c:	03db      	lsls	r3, r3, #15
   15f8e:	d5ed      	bpl.n	15f6c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   15f90:	2001      	movs	r0, #1
   15f92:	f005 fd24 	bl	1b9de <nrfx_busy_wait>
   15f96:	3d01      	subs	r5, #1
   15f98:	d1f6      	bne.n	15f88 <nrfx_clock_stop+0x24>
   15f9a:	e7e7      	b.n	15f6c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   15f9c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15fa0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   15fa2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15fa6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   15faa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15fae:	6060      	str	r0, [r4, #4]
   15fb0:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15fb4:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15fb8:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   15fbc:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15fbe:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15fc2:	d505      	bpl.n	15fd0 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   15fc4:	b123      	cbz	r3, 15fd0 <nrfx_clock_stop+0x6c>
   15fc6:	2001      	movs	r0, #1
   15fc8:	f005 fd09 	bl	1b9de <nrfx_busy_wait>
   15fcc:	3d01      	subs	r5, #1
   15fce:	d1f1      	bne.n	15fb4 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   15fd0:	4b01      	ldr	r3, [pc, #4]	; (15fd8 <nrfx_clock_stop+0x74>)
   15fd2:	2200      	movs	r2, #0
   15fd4:	715a      	strb	r2, [r3, #5]
   15fd6:	e7c9      	b.n	15f6c <nrfx_clock_stop+0x8>
   15fd8:	20002630 	.word	0x20002630

00015fdc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   15fe0:	b510      	push	{r4, lr}
   15fe2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   15fe6:	b16a      	cbz	r2, 16004 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15fe8:	2200      	movs	r2, #0
   15fea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15fee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   15ff2:	2201      	movs	r2, #1
   15ff4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   15ff8:	4b11      	ldr	r3, [pc, #68]	; (16040 <nrfx_power_clock_irq_handler+0x64>)
   15ffa:	7958      	ldrb	r0, [r3, #5]
   15ffc:	b910      	cbnz	r0, 16004 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   15ffe:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16000:	681b      	ldr	r3, [r3, #0]
   16002:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16008:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1600c:	b172      	cbz	r2, 1602c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1600e:	2200      	movs	r2, #0
   16010:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16014:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16018:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1601c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   16020:	0792      	lsls	r2, r2, #30
   16022:	d104      	bne.n	1602e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16024:	2201      	movs	r2, #1
   16026:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1602a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1602c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1602e:	2202      	movs	r2, #2
   16030:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16034:	4b02      	ldr	r3, [pc, #8]	; (16040 <nrfx_power_clock_irq_handler+0x64>)
}
   16036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1603a:	681b      	ldr	r3, [r3, #0]
   1603c:	2001      	movs	r0, #1
   1603e:	4718      	bx	r3
   16040:	20002630 	.word	0x20002630

00016044 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   16044:	4b03      	ldr	r3, [pc, #12]	; (16054 <pin_in_use_by_te+0x10>)
   16046:	3008      	adds	r0, #8
   16048:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1604c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   16050:	4770      	bx	lr
   16052:	bf00      	nop
   16054:	20000710 	.word	0x20000710

00016058 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   16058:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1605a:	f100 0308 	add.w	r3, r0, #8
   1605e:	4c0c      	ldr	r4, [pc, #48]	; (16090 <call_handler+0x38>)
   16060:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   16064:	05da      	lsls	r2, r3, #23
{
   16066:	4605      	mov	r5, r0
   16068:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1606a:	d507      	bpl.n	1607c <call_handler+0x24>
   1606c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   16070:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   16074:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   16078:	6852      	ldr	r2, [r2, #4]
   1607a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1607c:	68a3      	ldr	r3, [r4, #8]
   1607e:	b12b      	cbz	r3, 1608c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   16080:	68e2      	ldr	r2, [r4, #12]
   16082:	4631      	mov	r1, r6
   16084:	4628      	mov	r0, r5
    }
}
   16086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1608a:	4718      	bx	r3
}
   1608c:	bd70      	pop	{r4, r5, r6, pc}
   1608e:	bf00      	nop
   16090:	20000710 	.word	0x20000710

00016094 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   16094:	4a12      	ldr	r2, [pc, #72]	; (160e0 <release_handler+0x4c>)
   16096:	3008      	adds	r0, #8
{
   16098:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1609a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1609e:	05d9      	lsls	r1, r3, #23
   160a0:	d51b      	bpl.n	160da <release_handler+0x46>
   160a2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   160a6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   160aa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   160ae:	f102 0410 	add.w	r4, r2, #16
   160b2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   160b4:	f834 3b02 	ldrh.w	r3, [r4], #2
   160b8:	f413 7f80 	tst.w	r3, #256	; 0x100
   160bc:	d003      	beq.n	160c6 <release_handler+0x32>
   160be:	f3c3 2343 	ubfx	r3, r3, #9, #4
   160c2:	4299      	cmp	r1, r3
   160c4:	d009      	beq.n	160da <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   160c6:	3001      	adds	r0, #1
   160c8:	2820      	cmp	r0, #32
   160ca:	d1f3      	bne.n	160b4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   160cc:	2300      	movs	r3, #0
   160ce:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   160d2:	4804      	ldr	r0, [pc, #16]	; (160e4 <release_handler+0x50>)
}
   160d4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   160d6:	f7ff becb 	b.w	15e70 <nrfx_flag32_free>
}
   160da:	bc10      	pop	{r4}
   160dc:	4770      	bx	lr
   160de:	bf00      	nop
   160e0:	20000710 	.word	0x20000710
   160e4:	20000764 	.word	0x20000764

000160e8 <pin_handler_trigger_uninit>:
{
   160e8:	b538      	push	{r3, r4, r5, lr}
   160ea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   160ec:	f7ff ffaa 	bl	16044 <pin_in_use_by_te>
   160f0:	4c09      	ldr	r4, [pc, #36]	; (16118 <pin_handler_trigger_uninit+0x30>)
   160f2:	f102 0508 	add.w	r5, r2, #8
   160f6:	b140      	cbz	r0, 1610a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   160f8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   160fc:	4907      	ldr	r1, [pc, #28]	; (1611c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   160fe:	0b5b      	lsrs	r3, r3, #13
   16100:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   16104:	2000      	movs	r0, #0
   16106:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1610a:	4610      	mov	r0, r2
   1610c:	f7ff ffc2 	bl	16094 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   16110:	2300      	movs	r3, #0
   16112:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   16116:	bd38      	pop	{r3, r4, r5, pc}
   16118:	20000710 	.word	0x20000710
   1611c:	40006000 	.word	0x40006000

00016120 <nrfx_gpiote_input_configure>:
{
   16120:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16124:	4604      	mov	r4, r0
   16126:	461e      	mov	r6, r3
    if (p_input_config)
   16128:	b309      	cbz	r1, 1616e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1612a:	4f4d      	ldr	r7, [pc, #308]	; (16260 <nrfx_gpiote_input_configure+0x140>)
   1612c:	f100 0808 	add.w	r8, r0, #8
   16130:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   16134:	07ab      	lsls	r3, r5, #30
   16136:	d506      	bpl.n	16146 <nrfx_gpiote_input_configure+0x26>
   16138:	f7ff ff84 	bl	16044 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   1613c:	b118      	cbz	r0, 16146 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   1613e:	4849      	ldr	r0, [pc, #292]	; (16264 <nrfx_gpiote_input_configure+0x144>)
}
   16140:	b002      	add	sp, #8
   16142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
   16146:	f004 001f 	and.w	r0, r4, #31
   1614a:	0080      	lsls	r0, r0, #2
   1614c:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   16150:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   16152:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   16156:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
   1615a:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1615e:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   16162:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
   16166:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   1616a:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
   1616e:	b192      	cbz	r2, 16196 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   16170:	4b3b      	ldr	r3, [pc, #236]	; (16260 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   16172:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   16174:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   16176:	f104 0008 	add.w	r0, r4, #8
   1617a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   1617e:	078f      	lsls	r7, r1, #30
   16180:	d50c      	bpl.n	1619c <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
   16182:	2a00      	cmp	r2, #0
   16184:	d1db      	bne.n	1613e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   16186:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   1618a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1618e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
   16192:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   16196:	bbce      	cbnz	r6, 1620c <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
   16198:	4833      	ldr	r0, [pc, #204]	; (16268 <nrfx_gpiote_input_configure+0x148>)
   1619a:	e7d1      	b.n	16140 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1619c:	f021 0120 	bic.w	r1, r1, #32
   161a0:	04c9      	lsls	r1, r1, #19
   161a2:	0cc9      	lsrs	r1, r1, #19
   161a4:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   161a8:	2a00      	cmp	r2, #0
   161aa:	d0ec      	beq.n	16186 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
   161ac:	2d03      	cmp	r5, #3
   161ae:	d8c6      	bhi.n	1613e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   161b0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   161b2:	b92d      	cbnz	r5, 161c0 <nrfx_gpiote_input_configure+0xa0>
   161b4:	4a2d      	ldr	r2, [pc, #180]	; (1626c <nrfx_gpiote_input_configure+0x14c>)
   161b6:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   161ba:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   161be:	e7e2      	b.n	16186 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   161c0:	00ba      	lsls	r2, r7, #2
   161c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   161c6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   161ca:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   161ce:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   161d2:	f02c 0c03 	bic.w	ip, ip, #3
   161d6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   161da:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   161de:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
   161e2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   161e6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   161ea:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   161ee:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   161f2:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
   161f6:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
   161fa:	ea4c 0c0e 	orr.w	ip, ip, lr
   161fe:	f041 0120 	orr.w	r1, r1, #32
   16202:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   16206:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   1620a:	e7bc      	b.n	16186 <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1620c:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
   16210:	4620      	mov	r0, r4
   16212:	f7ff ff3f 	bl	16094 <release_handler>
    if (!handler)
   16216:	2f00      	cmp	r7, #0
   16218:	d0be      	beq.n	16198 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1621a:	4d11      	ldr	r5, [pc, #68]	; (16260 <nrfx_gpiote_input_configure+0x140>)
   1621c:	682b      	ldr	r3, [r5, #0]
   1621e:	429f      	cmp	r7, r3
   16220:	d104      	bne.n	1622c <nrfx_gpiote_input_configure+0x10c>
   16222:	686b      	ldr	r3, [r5, #4]
   16224:	429e      	cmp	r6, r3
   16226:	d101      	bne.n	1622c <nrfx_gpiote_input_configure+0x10c>
   16228:	2200      	movs	r2, #0
   1622a:	e009      	b.n	16240 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1622c:	4810      	ldr	r0, [pc, #64]	; (16270 <nrfx_gpiote_input_configure+0x150>)
   1622e:	f10d 0107 	add.w	r1, sp, #7
   16232:	f7ff fdf7 	bl	15e24 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   16236:	4b0c      	ldr	r3, [pc, #48]	; (16268 <nrfx_gpiote_input_configure+0x148>)
   16238:	4298      	cmp	r0, r3
   1623a:	d181      	bne.n	16140 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   1623c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   16240:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   16244:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   16248:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1624a:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1624c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   16250:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   16254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16258:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   1625c:	e79c      	b.n	16198 <nrfx_gpiote_input_configure+0x78>
   1625e:	bf00      	nop
   16260:	20000710 	.word	0x20000710
   16264:	0bad0004 	.word	0x0bad0004
   16268:	0bad0000 	.word	0x0bad0000
   1626c:	40006000 	.word	0x40006000
   16270:	20000764 	.word	0x20000764

00016274 <nrfx_gpiote_output_configure>:
{
   16274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16276:	4604      	mov	r4, r0
    if (p_config)
   16278:	b371      	cbz	r1, 162d8 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1627a:	4e37      	ldr	r6, [pc, #220]	; (16358 <nrfx_gpiote_output_configure+0xe4>)
   1627c:	f100 0708 	add.w	r7, r0, #8
   16280:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   16284:	07ab      	lsls	r3, r5, #30
   16286:	d404      	bmi.n	16292 <nrfx_gpiote_output_configure+0x1e>
   16288:	f7ff fedc 	bl	16044 <pin_in_use_by_te>
   1628c:	b108      	cbz	r0, 16292 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
   1628e:	4833      	ldr	r0, [pc, #204]	; (1635c <nrfx_gpiote_output_configure+0xe8>)
}
   16290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   16292:	f015 0f1c 	tst.w	r5, #28
   16296:	784b      	ldrb	r3, [r1, #1]
   16298:	d001      	beq.n	1629e <nrfx_gpiote_output_configure+0x2a>
   1629a:	2b01      	cmp	r3, #1
   1629c:	d0f7      	beq.n	1628e <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
   1629e:	f004 001f 	and.w	r0, r4, #31
   162a2:	0080      	lsls	r0, r0, #2
   162a4:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   162a8:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   162ac:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   162b0:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   162b2:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   162b4:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
   162b8:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   162bc:	f02c 0c07 	bic.w	ip, ip, #7
   162c0:	ea43 030c 	orr.w	r3, r3, ip
   162c4:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   162c8:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   162cc:	f043 0301 	orr.w	r3, r3, #1
   162d0:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   162d4:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
   162d8:	b90a      	cbnz	r2, 162de <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
   162da:	4821      	ldr	r0, [pc, #132]	; (16360 <nrfx_gpiote_output_configure+0xec>)
   162dc:	e7d8      	b.n	16290 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   162de:	4e1e      	ldr	r6, [pc, #120]	; (16358 <nrfx_gpiote_output_configure+0xe4>)
   162e0:	f104 0708 	add.w	r7, r4, #8
   162e4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   162e8:	0783      	lsls	r3, r0, #30
   162ea:	d5d0      	bpl.n	1628e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   162ec:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   162f0:	4661      	mov	r1, ip
   162f2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   162f4:	f020 0020 	bic.w	r0, r0, #32
   162f8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   162fc:	04c0      	lsls	r0, r0, #19
   162fe:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   16302:	0cc0      	lsrs	r0, r0, #19
   16304:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   16308:	2300      	movs	r3, #0
   1630a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1630e:	7855      	ldrb	r5, [r2, #1]
   16310:	2d00      	cmp	r5, #0
   16312:	d0e2      	beq.n	162da <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   16314:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   16318:	7892      	ldrb	r2, [r2, #2]
   1631a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1631e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   16322:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16326:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1632a:	0223      	lsls	r3, r4, #8
   1632c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   16330:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16332:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   16336:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1633a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1633c:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1633e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   16342:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   16346:	4313      	orrs	r3, r2
   16348:	f040 0020 	orr.w	r0, r0, #32
   1634c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   16350:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   16354:	e7c1      	b.n	162da <nrfx_gpiote_output_configure+0x66>
   16356:	bf00      	nop
   16358:	20000710 	.word	0x20000710
   1635c:	0bad0004 	.word	0x0bad0004
   16360:	0bad0000 	.word	0x0bad0000

00016364 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   16364:	4b01      	ldr	r3, [pc, #4]	; (1636c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   16366:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1636a:	4770      	bx	lr
   1636c:	20000710 	.word	0x20000710

00016370 <nrfx_gpiote_channel_get>:
{
   16370:	b508      	push	{r3, lr}
   16372:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   16374:	f7ff fe66 	bl	16044 <pin_in_use_by_te>
   16378:	b138      	cbz	r0, 1638a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1637a:	4b05      	ldr	r3, [pc, #20]	; (16390 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1637c:	4805      	ldr	r0, [pc, #20]	; (16394 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1637e:	3208      	adds	r2, #8
   16380:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16384:	0b5b      	lsrs	r3, r3, #13
   16386:	700b      	strb	r3, [r1, #0]
}
   16388:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1638a:	4803      	ldr	r0, [pc, #12]	; (16398 <nrfx_gpiote_channel_get+0x28>)
   1638c:	e7fc      	b.n	16388 <nrfx_gpiote_channel_get+0x18>
   1638e:	bf00      	nop
   16390:	20000710 	.word	0x20000710
   16394:	0bad0000 	.word	0x0bad0000
   16398:	0bad0004 	.word	0x0bad0004

0001639c <nrfx_gpiote_init>:
{
   1639c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1639e:	4c0f      	ldr	r4, [pc, #60]	; (163dc <nrfx_gpiote_init+0x40>)
   163a0:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   163a4:	b9bd      	cbnz	r5, 163d6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   163a6:	2240      	movs	r2, #64	; 0x40
   163a8:	4629      	mov	r1, r5
   163aa:	f104 0010 	add.w	r0, r4, #16
   163ae:	f002 fd32 	bl	18e16 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   163b2:	2006      	movs	r0, #6
   163b4:	f7ec fe64 	bl	3080 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   163b8:	4b09      	ldr	r3, [pc, #36]	; (163e0 <nrfx_gpiote_init+0x44>)
    return err_code;
   163ba:	480a      	ldr	r0, [pc, #40]	; (163e4 <nrfx_gpiote_init+0x48>)
   163bc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   163c0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   163c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   163c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   163cc:	2301      	movs	r3, #1
   163ce:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   163d2:	6563      	str	r3, [r4, #84]	; 0x54
}
   163d4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   163d6:	4804      	ldr	r0, [pc, #16]	; (163e8 <nrfx_gpiote_init+0x4c>)
   163d8:	e7fc      	b.n	163d4 <nrfx_gpiote_init+0x38>
   163da:	bf00      	nop
   163dc:	20000710 	.word	0x20000710
   163e0:	40006000 	.word	0x40006000
   163e4:	0bad0000 	.word	0x0bad0000
   163e8:	0bad0005 	.word	0x0bad0005

000163ec <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   163ec:	4b03      	ldr	r3, [pc, #12]	; (163fc <nrfx_gpiote_is_init+0x10>)
   163ee:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   163f2:	3800      	subs	r0, #0
   163f4:	bf18      	it	ne
   163f6:	2001      	movne	r0, #1
   163f8:	4770      	bx	lr
   163fa:	bf00      	nop
   163fc:	20000710 	.word	0x20000710

00016400 <nrfx_gpiote_channel_free>:
{
   16400:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   16402:	4801      	ldr	r0, [pc, #4]	; (16408 <nrfx_gpiote_channel_free+0x8>)
   16404:	f7ff bd34 	b.w	15e70 <nrfx_flag32_free>
   16408:	20000760 	.word	0x20000760

0001640c <nrfx_gpiote_channel_alloc>:
{
   1640c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1640e:	4801      	ldr	r0, [pc, #4]	; (16414 <nrfx_gpiote_channel_alloc+0x8>)
   16410:	f7ff bd08 	b.w	15e24 <nrfx_flag32_alloc>
   16414:	20000760 	.word	0x20000760

00016418 <nrfx_gpiote_trigger_enable>:
{
   16418:	b510      	push	{r4, lr}
   1641a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1641c:	f7ff fe12 	bl	16044 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   16420:	f102 0408 	add.w	r4, r2, #8
   16424:	4b1c      	ldr	r3, [pc, #112]	; (16498 <nrfx_gpiote_trigger_enable+0x80>)
   16426:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1642a:	b1e0      	cbz	r0, 16466 <nrfx_gpiote_trigger_enable+0x4e>
   1642c:	f013 0402 	ands.w	r4, r3, #2
   16430:	d119      	bne.n	16466 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   16432:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   16434:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   16436:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1643a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1643e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16442:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16446:	6004      	str	r4, [r0, #0]
   16448:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1644a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1644e:	f040 0001 	orr.w	r0, r0, #1
   16452:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   16456:	b129      	cbz	r1, 16464 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   16458:	2201      	movs	r2, #1
   1645a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1645e:	4a0f      	ldr	r2, [pc, #60]	; (1649c <nrfx_gpiote_trigger_enable+0x84>)
   16460:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16464:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   16466:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1646a:	2b04      	cmp	r3, #4
   1646c:	d010      	beq.n	16490 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1646e:	2b05      	cmp	r3, #5
   16470:	d010      	beq.n	16494 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
   16472:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   16476:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   1647a:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1647e:	40d9      	lsrs	r1, r3
   16480:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   16484:	3102      	adds	r1, #2
}
   16486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1648a:	4610      	mov	r0, r2
   1648c:	f005 bab3 	b.w	1b9f6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   16490:	2103      	movs	r1, #3
   16492:	e7f8      	b.n	16486 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   16494:	2102      	movs	r1, #2
   16496:	e7f6      	b.n	16486 <nrfx_gpiote_trigger_enable+0x6e>
   16498:	20000710 	.word	0x20000710
   1649c:	40006000 	.word	0x40006000

000164a0 <nrfx_gpiote_trigger_disable>:
{
   164a0:	b508      	push	{r3, lr}
   164a2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   164a4:	f7ff fdce 	bl	16044 <pin_in_use_by_te>
   164a8:	b1c0      	cbz	r0, 164dc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   164aa:	f102 0108 	add.w	r1, r2, #8
   164ae:	4b0e      	ldr	r3, [pc, #56]	; (164e8 <nrfx_gpiote_trigger_disable+0x48>)
   164b0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   164b4:	0799      	lsls	r1, r3, #30
   164b6:	d411      	bmi.n	164dc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   164b8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   164ba:	2201      	movs	r2, #1
   164bc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   164be:	009b      	lsls	r3, r3, #2
   164c0:	490a      	ldr	r1, [pc, #40]	; (164ec <nrfx_gpiote_trigger_disable+0x4c>)
   164c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   164c6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   164ca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   164ce:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   164d2:	f022 0203 	bic.w	r2, r2, #3
   164d6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   164da:	bd08      	pop	{r3, pc}
   164dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   164e0:	2100      	movs	r1, #0
   164e2:	4610      	mov	r0, r2
   164e4:	f005 ba87 	b.w	1b9f6 <nrf_gpio_cfg_sense_set>
   164e8:	20000710 	.word	0x20000710
   164ec:	40006000 	.word	0x40006000

000164f0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   164f0:	4b0d      	ldr	r3, [pc, #52]	; (16528 <nrfx_gpiote_pin_uninit+0x38>)
   164f2:	f100 0208 	add.w	r2, r0, #8
{
   164f6:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   164f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   164fc:	07db      	lsls	r3, r3, #31
{
   164fe:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   16500:	d50f      	bpl.n	16522 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   16502:	f7ff ffcd 	bl	164a0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   16506:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   16508:	f004 041f 	and.w	r4, r4, #31
   1650c:	f7ff fdec 	bl	160e8 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   16510:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   16514:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   16518:	2202      	movs	r2, #2
   1651a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1651e:	4803      	ldr	r0, [pc, #12]	; (1652c <nrfx_gpiote_pin_uninit+0x3c>)
}
   16520:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   16522:	4803      	ldr	r0, [pc, #12]	; (16530 <nrfx_gpiote_pin_uninit+0x40>)
   16524:	e7fc      	b.n	16520 <nrfx_gpiote_pin_uninit+0x30>
   16526:	bf00      	nop
   16528:	20000710 	.word	0x20000710
   1652c:	0bad0000 	.word	0x0bad0000
   16530:	0bad0004 	.word	0x0bad0004

00016534 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   16534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16538:	4b4e      	ldr	r3, [pc, #312]	; (16674 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   1653a:	484f      	ldr	r0, [pc, #316]	; (16678 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1653c:	494f      	ldr	r1, [pc, #316]	; (1667c <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
   1653e:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   16540:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16542:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16544:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   16546:	b136      	cbz	r6, 16556 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   16548:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   1654c:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1654e:	bf1e      	ittt	ne
   16550:	601c      	strne	r4, [r3, #0]
   16552:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   16554:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   16556:	3304      	adds	r3, #4
   16558:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1655a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1655e:	d1f1      	bne.n	16544 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16560:	4b45      	ldr	r3, [pc, #276]	; (16678 <nrfx_gpiote_irq_handler+0x144>)
   16562:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   16566:	b1bb      	cbz	r3, 16598 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   16568:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1656c:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   16570:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   16572:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   16576:	af01      	add	r7, sp, #4
   16578:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   1657c:	9c01      	ldr	r4, [sp, #4]
   1657e:	b96c      	cbnz	r4, 1659c <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16580:	4b3d      	ldr	r3, [pc, #244]	; (16678 <nrfx_gpiote_irq_handler+0x144>)
   16582:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   16586:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   1658a:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   1658e:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   16590:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
   16594:	2b00      	cmp	r3, #0
   16596:	d1ee      	bne.n	16576 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   16598:	2401      	movs	r4, #1
   1659a:	e066      	b.n	1666a <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
   1659c:	fa94 f4a4 	rbit	r4, r4
   165a0:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   165a4:	4a36      	ldr	r2, [pc, #216]	; (16680 <nrfx_gpiote_irq_handler+0x14c>)
   165a6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   165aa:	08e0      	lsrs	r0, r4, #3
   165ac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   165b0:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   165b4:	fa08 f203 	lsl.w	r2, r8, r3
   165b8:	5c3b      	ldrb	r3, [r7, r0]
   165ba:	ea23 0302 	bic.w	r3, r3, r2
   165be:	543b      	strb	r3, [r7, r0]
   165c0:	00a3      	lsls	r3, r4, #2
   165c2:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
   165c6:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   165ca:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
   165ce:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   165d0:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   165d2:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   165d6:	d518      	bpl.n	1660a <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
   165d8:	4659      	mov	r1, fp
   165da:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   165dc:	fa5f fa82 	uxtb.w	sl, r2
   165e0:	f7ff fd3a 	bl	16058 <call_handler>
   165e4:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   165e8:	f3c3 4301 	ubfx	r3, r3, #16, #2
   165ec:	459a      	cmp	sl, r3
   165ee:	d107      	bne.n	16600 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   165f0:	2100      	movs	r1, #0
   165f2:	4620      	mov	r0, r4
   165f4:	f005 f9ff 	bl	1b9f6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   165f8:	4651      	mov	r1, sl
   165fa:	4620      	mov	r0, r4
   165fc:	f005 f9fb 	bl	1b9f6 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   16600:	fa08 f404 	lsl.w	r4, r8, r4
   16604:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
   16608:	e7b8      	b.n	1657c <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1660a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1660c:	bf0c      	ite	eq
   1660e:	2103      	moveq	r1, #3
   16610:	2102      	movne	r1, #2
   16612:	4620      	mov	r0, r4
   16614:	f005 f9ef 	bl	1b9f6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   16618:	f1ba 0f03 	cmp.w	sl, #3
   1661c:	d004      	beq.n	16628 <nrfx_gpiote_irq_handler+0xf4>
   1661e:	2a02      	cmp	r2, #2
   16620:	d107      	bne.n	16632 <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   16622:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   16626:	d1eb      	bne.n	16600 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
   16628:	4659      	mov	r1, fp
   1662a:	4620      	mov	r0, r4
   1662c:	f7ff fd14 	bl	16058 <call_handler>
   16630:	e7e6      	b.n	16600 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   16632:	2a03      	cmp	r2, #3
   16634:	d1e4      	bne.n	16600 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   16636:	f1ba 0f02 	cmp.w	sl, #2
   1663a:	e7f4      	b.n	16626 <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
   1663c:	fa95 f3a5 	rbit	r3, r5
   16640:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   16644:	fa04 f203 	lsl.w	r2, r4, r3
   16648:	009b      	lsls	r3, r3, #2
   1664a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1664e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   16652:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16656:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1665a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1665e:	f3c0 2004 	ubfx	r0, r0, #8, #5
   16662:	f3c1 4101 	ubfx	r1, r1, #16, #2
   16666:	f7ff fcf7 	bl	16058 <call_handler>
    while (mask)
   1666a:	2d00      	cmp	r5, #0
   1666c:	d1e6      	bne.n	1663c <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1666e:	b003      	add	sp, #12
   16670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16674:	40006100 	.word	0x40006100
   16678:	40006000 	.word	0x40006000
   1667c:	40006120 	.word	0x40006120
   16680:	20000710 	.word	0x20000710

00016684 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   16684:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   16686:	4801      	ldr	r0, [pc, #4]	; (1668c <nrfx_ppi_channel_alloc+0x8>)
   16688:	f7ff bbcc 	b.w	15e24 <nrfx_flag32_alloc>
   1668c:	2000076c 	.word	0x2000076c

00016690 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   16690:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16692:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   16696:	b087      	sub	sp, #28
   16698:	4604      	mov	r4, r0
   1669a:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   1669c:	b1f3      	cbz	r3, 166dc <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1669e:	2300      	movs	r3, #0
   166a0:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   166a4:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   166a8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   166ac:	b9b3      	cbnz	r3, 166dc <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   166ae:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
   166b0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   166b4:	2302      	movs	r3, #2
   166b6:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   166b8:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   166ba:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   166be:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   166c2:	b11b      	cbz	r3, 166cc <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   166c4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   166c8:	059f      	lsls	r7, r3, #22
   166ca:	d402      	bmi.n	166d2 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   166cc:	2301      	movs	r3, #1
   166ce:	6223      	str	r3, [r4, #32]
   166d0:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   166d2:	2301      	movs	r3, #1
   166d4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   166d8:	b007      	add	sp, #28
   166da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   166dc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   166e0:	2b00      	cmp	r3, #0
   166e2:	d044      	beq.n	1676e <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   166e4:	2300      	movs	r3, #0
   166e6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   166ea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   166ee:	6a2b      	ldr	r3, [r5, #32]
   166f0:	065e      	lsls	r6, r3, #25
   166f2:	d40a      	bmi.n	1670a <twim_irq_handler+0x7a>
   166f4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   166f8:	b93b      	cbnz	r3, 1670a <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   166fa:	4629      	mov	r1, r5
   166fc:	4620      	mov	r0, r4
   166fe:	f005 f988 	bl	1ba12 <xfer_completeness_check>
   16702:	f080 0001 	eor.w	r0, r0, #1
   16706:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   1670a:	6a2b      	ldr	r3, [r5, #32]
   1670c:	f013 0c04 	ands.w	ip, r3, #4
   16710:	d13e      	bne.n	16790 <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
   16712:	f105 070c 	add.w	r7, r5, #12
   16716:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   16718:	ae01      	add	r6, sp, #4
   1671a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
   1671c:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   16720:	683b      	ldr	r3, [r7, #0]
   16722:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   16726:	6033      	str	r3, [r6, #0]
   16728:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   1672c:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   16730:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   16734:	f1be 0f00 	cmp.w	lr, #0
   16738:	d002      	beq.n	16740 <twim_irq_handler+0xb0>
   1673a:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   1673e:	b33b      	cbz	r3, 16790 <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
   16740:	2300      	movs	r3, #0
   16742:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   16746:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   16748:	4b2e      	ldr	r3, [pc, #184]	; (16804 <twim_irq_handler+0x174>)
   1674a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1674e:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   16752:	2b00      	cmp	r3, #0
   16754:	ea4f 3214 	mov.w	r2, r4, lsr #12
   16758:	db1a      	blt.n	16790 <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1675a:	f002 011f 	and.w	r1, r2, #31
   1675e:	095b      	lsrs	r3, r3, #5
   16760:	2201      	movs	r2, #1
   16762:	408a      	lsls	r2, r1
   16764:	3360      	adds	r3, #96	; 0x60
   16766:	4928      	ldr	r1, [pc, #160]	; (16808 <twim_irq_handler+0x178>)
   16768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1676c:	e010      	b.n	16790 <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1676e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   16772:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   16776:	7b2b      	ldrb	r3, [r5, #12]
   16778:	bb23      	cbnz	r3, 167c4 <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
   1677a:	f105 070c 	add.w	r7, r5, #12
   1677e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   16780:	ae01      	add	r6, sp, #4
   16782:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   16784:	683b      	ldr	r3, [r7, #0]
   16786:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   16788:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1678c:	2b00      	cmp	r3, #0
   1678e:	d0d8      	beq.n	16742 <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
   16790:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   16794:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   16798:	0798      	lsls	r0, r3, #30
   1679a:	d525      	bpl.n	167e8 <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   1679c:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   1679e:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   167a2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   167a6:	b90b      	cbnz	r3, 167ac <twim_irq_handler+0x11c>
        p_cb->busy = false;
   167a8:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   167ac:	6a2b      	ldr	r3, [r5, #32]
   167ae:	075b      	lsls	r3, r3, #29
   167b0:	d503      	bpl.n	167ba <twim_irq_handler+0x12a>
   167b2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   167b6:	2b00      	cmp	r3, #0
   167b8:	d08e      	beq.n	166d8 <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
   167ba:	e9d5 3100 	ldrd	r3, r1, [r5]
   167be:	4668      	mov	r0, sp
   167c0:	4798      	blx	r3
   167c2:	e789      	b.n	166d8 <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
   167c4:	f44f 7300 	mov.w	r3, #512	; 0x200
   167c8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   167cc:	f240 2302 	movw	r3, #514	; 0x202
   167d0:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   167d2:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   167d6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   167da:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   167dc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   167e0:	2301      	movs	r3, #1
   167e2:	60a3      	str	r3, [r4, #8]
   167e4:	6223      	str	r3, [r4, #32]
            return;
   167e6:	e777      	b.n	166d8 <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   167e8:	0759      	lsls	r1, r3, #29
   167ea:	d501      	bpl.n	167f0 <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   167ec:	2302      	movs	r3, #2
   167ee:	e7d6      	b.n	1679e <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   167f0:	07da      	lsls	r2, r3, #31
   167f2:	d501      	bpl.n	167f8 <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   167f4:	2303      	movs	r3, #3
   167f6:	e7d2      	b.n	1679e <twim_irq_handler+0x10e>
    else if (p_cb->error)
   167f8:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   167fc:	2b00      	cmp	r3, #0
   167fe:	d0ce      	beq.n	1679e <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   16800:	2304      	movs	r3, #4
   16802:	e7cc      	b.n	1679e <twim_irq_handler+0x10e>
   16804:	019c0202 	.word	0x019c0202
   16808:	e000e100 	.word	0xe000e100

0001680c <nrfx_twim_init>:
{
   1680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1680e:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   16810:	4d23      	ldr	r5, [pc, #140]	; (168a0 <nrfx_twim_init+0x94>)
   16812:	f04f 0c34 	mov.w	ip, #52	; 0x34
   16816:	fb0c fc06 	mul.w	ip, ip, r6
   1681a:	eb05 040c 	add.w	r4, r5, ip
   1681e:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   16822:	2f00      	cmp	r7, #0
   16824:	d13a      	bne.n	1689c <nrfx_twim_init+0x90>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   16826:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   16828:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1682a:	7b4b      	ldrb	r3, [r1, #13]
   1682c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   16830:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
   16832:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   16834:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   16838:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1683c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    p_cb->handler         = event_handler;
   16840:	f845 200c 	str.w	r2, [r5, ip]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   16844:	7bcc      	ldrb	r4, [r1, #15]
   16846:	b1b3      	cbz	r3, 16876 <nrfx_twim_init+0x6a>
   16848:	b92c      	cbnz	r4, 16856 <nrfx_twim_init+0x4a>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   1684a:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   1684e:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   16852:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   16856:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   16858:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   1685c:	b11a      	cbz	r2, 16866 <nrfx_twim_init+0x5a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   1685e:	f340 3007 	sbfx	r0, r0, #12, #8
   16862:	f7ec fc0d 	bl	3080 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   16866:	2334      	movs	r3, #52	; 0x34
   16868:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   1686c:	480d      	ldr	r0, [pc, #52]	; (168a4 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1686e:	2301      	movs	r3, #1
   16870:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   16874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   16876:	680b      	ldr	r3, [r1, #0]
   16878:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   1687c:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   16880:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16884:	f240 6c0c 	movw	ip, #1548	; 0x60c
   16888:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   1688c:	684b      	ldr	r3, [r1, #4]
   1688e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   16892:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16896:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   1689a:	e7d5      	b.n	16848 <nrfx_twim_init+0x3c>
        return err_code;
   1689c:	4802      	ldr	r0, [pc, #8]	; (168a8 <nrfx_twim_init+0x9c>)
   1689e:	e7e9      	b.n	16874 <nrfx_twim_init+0x68>
   168a0:	20002638 	.word	0x20002638
   168a4:	0bad0000 	.word	0x0bad0000
   168a8:	0bad0005 	.word	0x0bad0005

000168ac <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
   168ac:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   168ae:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   168b0:	2106      	movs	r1, #6
   168b2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   168b6:	4b04      	ldr	r3, [pc, #16]	; (168c8 <nrfx_twim_enable+0x1c>)
   168b8:	2134      	movs	r1, #52	; 0x34
   168ba:	fb01 3302 	mla	r3, r1, r2, r3
   168be:	2202      	movs	r2, #2
   168c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   168c4:	4770      	bx	lr
   168c6:	bf00      	nop
   168c8:	20002638 	.word	0x20002638

000168cc <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   168cc:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
   168ce:	4b0c      	ldr	r3, [pc, #48]	; (16900 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   168d0:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   168d2:	2034      	movs	r0, #52	; 0x34
   168d4:	fb00 3301 	mla	r3, r0, r1, r3
   168d8:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   168da:	480a      	ldr	r0, [pc, #40]	; (16904 <nrfx_twim_disable+0x38>)
   168dc:	6099      	str	r1, [r3, #8]
   168de:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   168e2:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   168e6:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   168ea:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   168ee:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   168f2:	2201      	movs	r2, #1
   168f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   168f8:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   168fc:	4770      	bx	lr
   168fe:	bf00      	nop
   16900:	20002638 	.word	0x20002638
   16904:	019c0202 	.word	0x019c0202

00016908 <nrfx_twim_xfer>:
{
   16908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   1690c:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 16be0 <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   16910:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   16914:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   16916:	2334      	movs	r3, #52	; 0x34
   16918:	fb03 c30e 	mla	r3, r3, lr, ip
{
   1691c:	4617      	mov	r7, r2
    p_cb->error = false;
   1691e:	2200      	movs	r2, #0
   16920:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   16924:	684b      	ldr	r3, [r1, #4]
{
   16926:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   16928:	b14b      	cbz	r3, 1693e <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1692a:	68cb      	ldr	r3, [r1, #12]
   1692c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   16930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   16934:	d003      	beq.n	1693e <nrfx_twim_xfer+0x36>
        return err_code;
   16936:	4eab      	ldr	r6, [pc, #684]	; (16be4 <nrfx_twim_xfer+0x2dc>)
}
   16938:	4630      	mov	r0, r6
   1693a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   1693e:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   16940:	4ba9      	ldr	r3, [pc, #676]	; (16be8 <nrfx_twim_xfer+0x2e0>)
   16942:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   16946:	fb06 c60e 	mla	r6, r6, lr, ip
   1694a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1694e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   16952:	b123      	cbz	r3, 1695e <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   16954:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   16956:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   1695a:	4ea4      	ldr	r6, [pc, #656]	; (16bec <nrfx_twim_xfer+0x2e4>)
   1695c:	e7ec      	b.n	16938 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   1695e:	f017 0f14 	tst.w	r7, #20
   16962:	bf0c      	ite	eq
   16964:	2301      	moveq	r3, #1
   16966:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   16968:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   1696c:	46a9      	mov	r9, r5
   1696e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   16972:	f106 080c 	add.w	r8, r6, #12
   16976:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   1697a:	f8d9 3000 	ldr.w	r3, [r9]
   1697e:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   16982:	f3c7 1300 	ubfx	r3, r7, #4, #1
   16986:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   1698a:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
   1698c:	786b      	ldrb	r3, [r5, #1]
   1698e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16992:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   16996:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1699a:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   1699e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   169a2:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   169a6:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   169aa:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   169ae:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   169b2:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   169b6:	bf18      	it	ne
   169b8:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   169ba:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   169be:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   169c2:	bf18      	it	ne
   169c4:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   169c6:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   169ca:	782a      	ldrb	r2, [r5, #0]
   169cc:	2a03      	cmp	r2, #3
   169ce:	f200 80b5 	bhi.w	16b3c <nrfx_twim_xfer+0x234>
   169d2:	e8df f002 	tbb	[pc, r2]
   169d6:	a084      	.short	0xa084
   169d8:	0269      	.short	0x0269
   169da:	692b      	ldr	r3, [r5, #16]
   169dc:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   169e0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   169e4:	d1a7      	bne.n	16936 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   169e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   169ea:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   169ee:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   169f0:	6869      	ldr	r1, [r5, #4]
   169f2:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   169f6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   169fa:	2100      	movs	r1, #0
   169fc:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   16a00:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16a04:	2001      	movs	r0, #1
   16a06:	6220      	str	r0, [r4, #32]
   16a08:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16a0a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   16a0e:	2800      	cmp	r0, #0
   16a10:	d0fb      	beq.n	16a0a <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16a12:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   16a16:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   16a1a:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16a1c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   16a20:	2334      	movs	r3, #52	; 0x34
   16a22:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
   16a26:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
   16a2a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   16a2e:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   16a30:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   16a32:	4e6f      	ldr	r6, [pc, #444]	; (16bf0 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   16a34:	0739      	lsls	r1, r7, #28
   16a36:	d406      	bmi.n	16a46 <nrfx_twim_xfer+0x13e>
   16a38:	2a03      	cmp	r2, #3
   16a3a:	d004      	beq.n	16a46 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16a3c:	2201      	movs	r2, #1
   16a3e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   16a40:	686b      	ldr	r3, [r5, #4]
   16a42:	b903      	cbnz	r3, 16a46 <nrfx_twim_xfer+0x13e>
   16a44:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   16a46:	2334      	movs	r3, #52	; 0x34
   16a48:	fb03 f30e 	mul.w	r3, r3, lr
   16a4c:	eb0c 0103 	add.w	r1, ip, r3
   16a50:	f85c 2003 	ldr.w	r2, [ip, r3]
   16a54:	2a00      	cmp	r2, #0
   16a56:	d174      	bne.n	16b42 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   16a58:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16a5a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   16a5e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   16a62:	2800      	cmp	r0, #0
   16a64:	f040 8088 	bne.w	16b78 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   16a68:	3b00      	subs	r3, #0
   16a6a:	bf18      	it	ne
   16a6c:	2301      	movne	r3, #1
   16a6e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   16a72:	2800      	cmp	r0, #0
   16a74:	f000 8086 	beq.w	16b84 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16a78:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   16a7c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16a80:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   16a84:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   16a88:	b115      	cbz	r5, 16a90 <nrfx_twim_xfer+0x188>
   16a8a:	f410 7f00 	tst.w	r0, #512	; 0x200
   16a8e:	d104      	bne.n	16a9a <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16a90:	6221      	str	r1, [r4, #32]
   16a92:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   16a94:	2d00      	cmp	r5, #0
   16a96:	d0e0      	beq.n	16a5a <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   16a98:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   16a9a:	05c0      	lsls	r0, r0, #23
   16a9c:	d572      	bpl.n	16b84 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16a9e:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   16aa2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   16aa6:	e7d8      	b.n	16a5a <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   16aa8:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16aaa:	68e9      	ldr	r1, [r5, #12]
   16aac:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16ab0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   16ab4:	692b      	ldr	r3, [r5, #16]
   16ab6:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   16aba:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   16abe:	f47f af3a 	bne.w	16936 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   16ac2:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16ac4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   16ac8:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   16acc:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   16ad0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   16ad4:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   16ad6:	fb03 c30e 	mla	r3, r3, lr, ip
   16ada:	2102      	movs	r1, #2
   16adc:	e012      	b.n	16b04 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   16ade:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16ae0:	68e9      	ldr	r1, [r5, #12]
   16ae2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   16ae6:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   16aea:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   16aee:	f04f 0334 	mov.w	r3, #52	; 0x34
   16af2:	d00b      	beq.n	16b0c <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   16af4:	f44f 7180 	mov.w	r1, #256	; 0x100
   16af8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   16afc:	fb03 c30e 	mla	r3, r3, lr, ip
   16b00:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   16b04:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b06:	2301      	movs	r3, #1
   16b08:	6223      	str	r3, [r4, #32]
   16b0a:	e791      	b.n	16a30 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   16b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
   16b10:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   16b14:	e7df      	b.n	16ad6 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   16b16:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   16b18:	68e9      	ldr	r1, [r5, #12]
   16b1a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   16b1e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   16b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16b26:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   16b2a:	2334      	movs	r3, #52	; 0x34
   16b2c:	fb03 c30e 	mla	r3, r3, lr, ip
   16b30:	2102      	movs	r1, #2
   16b32:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b34:	2301      	movs	r3, #1
   16b36:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   16b38:	2300      	movs	r3, #0
   16b3a:	e77a      	b.n	16a32 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   16b3c:	4e2d      	ldr	r6, [pc, #180]	; (16bf4 <nrfx_twim_xfer+0x2ec>)
   16b3e:	2308      	movs	r3, #8
   16b40:	e778      	b.n	16a34 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   16b42:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
   16b44:	bf44      	itt	mi
   16b46:	2300      	movmi	r3, #0
   16b48:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   16b4a:	067b      	lsls	r3, r7, #25
   16b4c:	d406      	bmi.n	16b5c <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   16b4e:	2334      	movs	r3, #52	; 0x34
   16b50:	fb03 c30e 	mla	r3, r3, lr, ip
   16b54:	689a      	ldr	r2, [r3, #8]
   16b56:	f042 0202 	orr.w	r2, r2, #2
   16b5a:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   16b5c:	2334      	movs	r3, #52	; 0x34
   16b5e:	fb03 cc0e 	mla	ip, r3, lr, ip
   16b62:	f8dc 3008 	ldr.w	r3, [ip, #8]
   16b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   16b6a:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   16b6e:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
   16b72:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   16b76:	e6df      	b.n	16938 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16b78:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   16b7c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   16b80:	2301      	movs	r3, #1
   16b82:	e774      	b.n	16a6e <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   16b84:	2b00      	cmp	r3, #0
   16b86:	f43f af68 	beq.w	16a5a <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   16b8a:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   16b8c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   16b90:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   16b94:	fb01 c20e 	mla	r2, r1, lr, ip
   16b98:	2000      	movs	r0, #0
   16b9a:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   16b9e:	b18b      	cbz	r3, 16bc4 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   16ba0:	4a15      	ldr	r2, [pc, #84]	; (16bf8 <nrfx_twim_xfer+0x2f0>)
   16ba2:	4e16      	ldr	r6, [pc, #88]	; (16bfc <nrfx_twim_xfer+0x2f4>)
   16ba4:	f013 0f01 	tst.w	r3, #1
   16ba8:	bf18      	it	ne
   16baa:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   16bac:	f013 0f02 	tst.w	r3, #2
   16bb0:	f102 0201 	add.w	r2, r2, #1
   16bb4:	bf18      	it	ne
   16bb6:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   16bb8:	f013 0f04 	tst.w	r3, #4
   16bbc:	4b10      	ldr	r3, [pc, #64]	; (16c00 <nrfx_twim_xfer+0x2f8>)
   16bbe:	bf18      	it	ne
   16bc0:	461e      	movne	r6, r3
   16bc2:	e6b9      	b.n	16938 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   16bc4:	067b      	lsls	r3, r7, #25
   16bc6:	f53f aeb7 	bmi.w	16938 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   16bca:	fb0e c101 	mla	r1, lr, r1, ip
   16bce:	4620      	mov	r0, r4
   16bd0:	f004 ff1f 	bl	1ba12 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   16bd4:	4b09      	ldr	r3, [pc, #36]	; (16bfc <nrfx_twim_xfer+0x2f4>)
   16bd6:	2800      	cmp	r0, #0
   16bd8:	bf08      	it	eq
   16bda:	461e      	moveq	r6, r3
   16bdc:	e6ac      	b.n	16938 <nrfx_twim_xfer+0x30>
   16bde:	bf00      	nop
   16be0:	20002638 	.word	0x20002638
   16be4:	0bad000a 	.word	0x0bad000a
   16be8:	019c0202 	.word	0x019c0202
   16bec:	0bad000b 	.word	0x0bad000b
   16bf0:	0bad0000 	.word	0x0bad0000
   16bf4:	0bad0004 	.word	0x0bad0004
   16bf8:	0bae0000 	.word	0x0bae0000
   16bfc:	0bad0001 	.word	0x0bad0001
   16c00:	0bae0002 	.word	0x0bae0002

00016c04 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   16c04:	4901      	ldr	r1, [pc, #4]	; (16c0c <nrfx_twim_0_irq_handler+0x8>)
   16c06:	4802      	ldr	r0, [pc, #8]	; (16c10 <nrfx_twim_0_irq_handler+0xc>)
   16c08:	f7ff bd42 	b.w	16690 <twim_irq_handler>
   16c0c:	20002638 	.word	0x20002638
   16c10:	40003000 	.word	0x40003000

00016c14 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   16c14:	4902      	ldr	r1, [pc, #8]	; (16c20 <nrfx_twim_1_irq_handler+0xc>)
   16c16:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   16c1a:	f7ff bd39 	b.w	16690 <twim_irq_handler>
   16c1e:	bf00      	nop
   16c20:	2000266c 	.word	0x2000266c

00016c24 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   16c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   16c28:	f000 001f 	and.w	r0, r0, #31
   16c2c:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16c30:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
   16c32:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16c36:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
   16c3a:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   16c3e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   16c42:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16c46:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
   16c48:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
   16c4c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   16c50:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
   16c54:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   16c58:	2004      	movs	r0, #4
   16c5a:	f004 fec0 	bl	1b9de <nrfx_busy_wait>
   16c5e:	2709      	movs	r7, #9
    return p_reg->IN;
   16c60:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   16c64:	421c      	tst	r4, r3
   16c66:	d10d      	bne.n	16c84 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   16c68:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   16c6a:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
   16c6e:	f004 feb6 	bl	1b9de <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   16c72:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
   16c74:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   16c78:	2004      	movs	r0, #4
   16c7a:	f004 feb0 	bl	1b9de <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   16c7e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   16c82:	d1ed      	bne.n	16c60 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
   16c84:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   16c88:	2004      	movs	r0, #4
   16c8a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
   16c8e:	f004 fea6 	bl	1b9de <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   16c92:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   16c96:	2004      	movs	r0, #4
   16c98:	f004 fea1 	bl	1b9de <nrfx_busy_wait>
    return p_reg->IN;
   16c9c:	f8d5 1510 	ldr.w	r1, [r5, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
   16ca0:	4803      	ldr	r0, [pc, #12]	; (16cb0 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   16ca2:	fa21 f606 	lsr.w	r6, r1, r6
   16ca6:	f006 0601 	and.w	r6, r6, #1
   16caa:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   16cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16cb0:	0bad0001 	.word	0x0bad0001

00016cb4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   16cb4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   16cb6:	4c14      	ldr	r4, [pc, #80]	; (16d08 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   16cb8:	4a14      	ldr	r2, [pc, #80]	; (16d0c <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   16cba:	4915      	ldr	r1, [pc, #84]	; (16d10 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   16cbc:	2303      	movs	r3, #3
   16cbe:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   16cc0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   16cc2:	4b14      	ldr	r3, [pc, #80]	; (16d14 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   16cc4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   16cc6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   16cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   16ccc:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   16cce:	2300      	movs	r3, #0
   16cd0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   16cd2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   16cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   16cd6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   16cd8:	4a0f      	ldr	r2, [pc, #60]	; (16d18 <_DoInit+0x64>)
   16cda:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   16cdc:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   16cde:	2210      	movs	r2, #16
   16ce0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   16ce2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   16ce4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   16ce6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   16ce8:	f002 f841 	bl	18d6e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   16cec:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   16cf0:	490a      	ldr	r1, [pc, #40]	; (16d1c <_DoInit+0x68>)
   16cf2:	4620      	mov	r0, r4
   16cf4:	f002 f83b 	bl	18d6e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   16cf8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   16cfc:	2320      	movs	r3, #32
   16cfe:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   16d00:	f3bf 8f5f 	dmb	sy
}
   16d04:	bd10      	pop	{r4, pc}
   16d06:	bf00      	nop
   16d08:	200026a0 	.word	0x200026a0
   16d0c:	0001e26d 	.word	0x0001e26d
   16d10:	0001e276 	.word	0x0001e276
   16d14:	200027f6 	.word	0x200027f6
   16d18:	200027e6 	.word	0x200027e6
   16d1c:	0001e27a 	.word	0x0001e27a

00016d20 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16d20:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   16d22:	4b16      	ldr	r3, [pc, #88]	; (16d7c <SEGGER_RTT_WriteNoLock+0x5c>)
   16d24:	2418      	movs	r4, #24
   16d26:	fb00 4504 	mla	r5, r0, r4, r4
   16d2a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   16d2c:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   16d30:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   16d32:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   16d34:	2c01      	cmp	r4, #1
   16d36:	d00e      	beq.n	16d56 <SEGGER_RTT_WriteNoLock+0x36>
   16d38:	2c02      	cmp	r4, #2
   16d3a:	d018      	beq.n	16d6e <SEGGER_RTT_WriteNoLock+0x4e>
   16d3c:	b9e4      	cbnz	r4, 16d78 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   16d3e:	4628      	mov	r0, r5
   16d40:	f004 fe97 	bl	1ba72 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   16d44:	4286      	cmp	r6, r0
   16d46:	d804      	bhi.n	16d52 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   16d48:	4632      	mov	r2, r6
   16d4a:	4628      	mov	r0, r5
   16d4c:	f004 fe9a 	bl	1ba84 <_WriteNoCheck>
   16d50:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   16d52:	4620      	mov	r0, r4
   16d54:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   16d56:	4628      	mov	r0, r5
   16d58:	f004 fe8b 	bl	1ba72 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   16d5c:	4286      	cmp	r6, r0
   16d5e:	4634      	mov	r4, r6
   16d60:	bf28      	it	cs
   16d62:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   16d64:	4622      	mov	r2, r4
   16d66:	4628      	mov	r0, r5
   16d68:	f004 fe8c 	bl	1ba84 <_WriteNoCheck>
    break;
   16d6c:	e7f1      	b.n	16d52 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   16d6e:	4628      	mov	r0, r5
}
   16d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   16d74:	f004 bea4 	b.w	1bac0 <_WriteBlocking>
  switch (pRing->Flags) {
   16d78:	2400      	movs	r4, #0
  return Status;
   16d7a:	e7ea      	b.n	16d52 <SEGGER_RTT_WriteNoLock+0x32>
   16d7c:	200026a0 	.word	0x200026a0

00016d80 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16d80:	4b0e      	ldr	r3, [pc, #56]	; (16dbc <z_sys_init_run_level+0x3c>)
{
   16d82:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16d84:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   16d88:	3001      	adds	r0, #1
   16d8a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   16d8e:	42a6      	cmp	r6, r4
   16d90:	d800      	bhi.n	16d94 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   16d92:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   16d94:	e9d4 3500 	ldrd	r3, r5, [r4]
   16d98:	4628      	mov	r0, r5
   16d9a:	4798      	blx	r3
		if (dev != NULL) {
   16d9c:	b165      	cbz	r5, 16db8 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   16d9e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   16da0:	b130      	cbz	r0, 16db0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   16da2:	2800      	cmp	r0, #0
   16da4:	bfb8      	it	lt
   16da6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   16da8:	28ff      	cmp	r0, #255	; 0xff
   16daa:	bfa8      	it	ge
   16dac:	20ff      	movge	r0, #255	; 0xff
   16dae:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   16db0:	785a      	ldrb	r2, [r3, #1]
   16db2:	f042 0201 	orr.w	r2, r2, #1
   16db6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16db8:	3408      	adds	r4, #8
   16dba:	e7e8      	b.n	16d8e <z_sys_init_run_level+0xe>
   16dbc:	0001dcf0 	.word	0x0001dcf0

00016dc0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   16dc0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   16dc2:	4605      	mov	r5, r0
   16dc4:	b910      	cbnz	r0, 16dcc <z_impl_device_get_binding+0xc>
		return NULL;
   16dc6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   16dc8:	4620      	mov	r0, r4
   16dca:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   16dcc:	7803      	ldrb	r3, [r0, #0]
   16dce:	2b00      	cmp	r3, #0
   16dd0:	d0f9      	beq.n	16dc6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   16dd2:	4c0e      	ldr	r4, [pc, #56]	; (16e0c <z_impl_device_get_binding+0x4c>)
   16dd4:	4e0e      	ldr	r6, [pc, #56]	; (16e10 <z_impl_device_get_binding+0x50>)
   16dd6:	42b4      	cmp	r4, r6
   16dd8:	d108      	bne.n	16dec <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   16dda:	4c0c      	ldr	r4, [pc, #48]	; (16e0c <z_impl_device_get_binding+0x4c>)
   16ddc:	42b4      	cmp	r4, r6
   16dde:	d0f2      	beq.n	16dc6 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16de0:	4620      	mov	r0, r4
   16de2:	f004 fea1 	bl	1bb28 <z_device_is_ready>
   16de6:	b950      	cbnz	r0, 16dfe <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   16de8:	3418      	adds	r4, #24
   16dea:	e7f7      	b.n	16ddc <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   16dec:	4620      	mov	r0, r4
   16dee:	f004 fe9b 	bl	1bb28 <z_device_is_ready>
   16df2:	b110      	cbz	r0, 16dfa <z_impl_device_get_binding+0x3a>
   16df4:	6823      	ldr	r3, [r4, #0]
   16df6:	42ab      	cmp	r3, r5
   16df8:	d0e6      	beq.n	16dc8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   16dfa:	3418      	adds	r4, #24
   16dfc:	e7eb      	b.n	16dd6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16dfe:	6821      	ldr	r1, [r4, #0]
   16e00:	4628      	mov	r0, r5
   16e02:	f001 ffe0 	bl	18dc6 <strcmp>
   16e06:	2800      	cmp	r0, #0
   16e08:	d1ee      	bne.n	16de8 <z_impl_device_get_binding+0x28>
   16e0a:	e7dd      	b.n	16dc8 <z_impl_device_get_binding+0x8>
   16e0c:	0001c680 	.word	0x0001c680
   16e10:	0001c800 	.word	0x0001c800

00016e14 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   16e14:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   16e16:	2300      	movs	r3, #0
{
   16e18:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   16e1a:	2201      	movs	r2, #1
   16e1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   16e20:	220f      	movs	r2, #15
   16e22:	e9cd 3202 	strd	r3, r2, [sp, #8]
   16e26:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   16e28:	4c0c      	ldr	r4, [pc, #48]	; (16e5c <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   16e2a:	4b0d      	ldr	r3, [pc, #52]	; (16e60 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   16e2c:	490d      	ldr	r1, [pc, #52]	; (16e64 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   16e2e:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   16e30:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   16e34:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   16e38:	f44f 75b0 	mov.w	r5, #352	; 0x160
   16e3c:	9300      	str	r3, [sp, #0]
   16e3e:	fb05 1100 	mla	r1, r5, r0, r1
   16e42:	4b09      	ldr	r3, [pc, #36]	; (16e68 <init_idle_thread+0x54>)
   16e44:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16e48:	4620      	mov	r0, r4
   16e4a:	f000 f909 	bl	17060 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16e4e:	7b63      	ldrb	r3, [r4, #13]
   16e50:	f023 0304 	bic.w	r3, r3, #4
   16e54:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   16e56:	b007      	add	sp, #28
   16e58:	bd30      	pop	{r4, r5, pc}
   16e5a:	bf00      	nop
   16e5c:	20001208 	.word	0x20001208
   16e60:	20002748 	.word	0x20002748
   16e64:	200038c0 	.word	0x200038c0
   16e68:	000171d5 	.word	0x000171d5

00016e6c <bg_thread_main>:
{
   16e6c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   16e6e:	4b0a      	ldr	r3, [pc, #40]	; (16e98 <bg_thread_main+0x2c>)
   16e70:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16e72:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   16e74:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16e76:	f7ff ff83 	bl	16d80 <z_sys_init_run_level>
	boot_banner();
   16e7a:	f001 f923 	bl	180c4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   16e7e:	2003      	movs	r0, #3
   16e80:	f7ff ff7e 	bl	16d80 <z_sys_init_run_level>
	z_init_static_threads();
   16e84:	f000 f94a 	bl	1711c <z_init_static_threads>
	main();
   16e88:	f7e9 fe66 	bl	b58 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16e8c:	4a03      	ldr	r2, [pc, #12]	; (16e9c <bg_thread_main+0x30>)
   16e8e:	7b13      	ldrb	r3, [r2, #12]
   16e90:	f023 0301 	bic.w	r3, r3, #1
   16e94:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   16e96:	bd08      	pop	{r3, pc}
   16e98:	20002bf6 	.word	0x20002bf6
   16e9c:	20001288 	.word	0x20001288

00016ea0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   16ea0:	4802      	ldr	r0, [pc, #8]	; (16eac <z_bss_zero+0xc>)
   16ea2:	4a03      	ldr	r2, [pc, #12]	; (16eb0 <z_bss_zero+0x10>)
   16ea4:	2100      	movs	r1, #0
   16ea6:	1a12      	subs	r2, r2, r0
   16ea8:	f001 bfb5 	b.w	18e16 <memset>
   16eac:	200009d8 	.word	0x200009d8
   16eb0:	20002bf8 	.word	0x20002bf8

00016eb4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   16eb4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   16eb6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 16f7c <z_cstart+0xc8>
   16eba:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   16ebc:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   16ec0:	4d2f      	ldr	r5, [pc, #188]	; (16f80 <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   16ec2:	4e30      	ldr	r6, [pc, #192]	; (16f84 <z_cstart+0xd0>)
   16ec4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16ec6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 16f88 <z_cstart+0xd4>
   16eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16ece:	2400      	movs	r4, #0
   16ed0:	616b      	str	r3, [r5, #20]
   16ed2:	23e0      	movs	r3, #224	; 0xe0
   16ed4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   16ed8:	77ec      	strb	r4, [r5, #31]
   16eda:	762c      	strb	r4, [r5, #24]
   16edc:	766c      	strb	r4, [r5, #25]
   16ede:	76ac      	strb	r4, [r5, #26]
   16ee0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   16ee4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16ee6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   16eea:	626b      	str	r3, [r5, #36]	; 0x24
   16eec:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   16ef0:	f7ec faf8 	bl	34e4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   16ef4:	f7ec f8a6 	bl	3044 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   16ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16efc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   16efe:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   16f00:	f7ec fbce 	bl	36a0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   16f04:	f7ec fb36 	bl	3574 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   16f08:	f240 1301 	movw	r3, #257	; 0x101
   16f0c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   16f10:	ab06      	add	r3, sp, #24
   16f12:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   16f14:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   16f18:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   16f1a:	f004 fe04 	bl	1bb26 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   16f1e:	4620      	mov	r0, r4
   16f20:	f7ff ff2e 	bl	16d80 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   16f24:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   16f26:	4d19      	ldr	r5, [pc, #100]	; (16f8c <z_cstart+0xd8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   16f28:	f7ff ff2a 	bl	16d80 <z_sys_init_run_level>
	z_sched_init();
   16f2c:	f000 fdaa 	bl	17a84 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16f30:	4b17      	ldr	r3, [pc, #92]	; (16f90 <z_cstart+0xdc>)
   16f32:	9305      	str	r3, [sp, #20]
   16f34:	2301      	movs	r3, #1
   16f36:	4917      	ldr	r1, [pc, #92]	; (16f94 <z_cstart+0xe0>)
   16f38:	9400      	str	r4, [sp, #0]
   16f3a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   16f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16f42:	464b      	mov	r3, r9
   16f44:	e9cd 4401 	strd	r4, r4, [sp, #4]
   16f48:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   16f4a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16f4c:	f000 f888 	bl	17060 <z_setup_new_thread>
   16f50:	7b6a      	ldrb	r2, [r5, #13]
   16f52:	4607      	mov	r7, r0
   16f54:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   16f58:	4628      	mov	r0, r5
   16f5a:	736a      	strb	r2, [r5, #13]
   16f5c:	f005 f8c0 	bl	1c0e0 <z_ready_thread>
		init_idle_thread(i);
   16f60:	4620      	mov	r0, r4
   16f62:	f7ff ff57 	bl	16e14 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   16f66:	4b0c      	ldr	r3, [pc, #48]	; (16f98 <z_cstart+0xe4>)
   16f68:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16f6a:	464a      	mov	r2, r9
   16f6c:	4639      	mov	r1, r7
   16f6e:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   16f70:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   16f72:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16f76:	f7ec f989 	bl	328c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16f7a:	bf00      	nop
   16f7c:	20004240 	.word	0x20004240
   16f80:	e000ed00 	.word	0xe000ed00
   16f84:	20002748 	.word	0x20002748
   16f88:	00016e6d 	.word	0x00016e6d
   16f8c:	20001288 	.word	0x20001288
   16f90:	0001e281 	.word	0x0001e281
   16f94:	200034a0 	.word	0x200034a0
   16f98:	20001208 	.word	0x20001208

00016f9c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   16f9c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   16f9e:	4c06      	ldr	r4, [pc, #24]	; (16fb8 <statics_init+0x1c>)
   16fa0:	4d06      	ldr	r5, [pc, #24]	; (16fbc <statics_init+0x20>)
   16fa2:	42ac      	cmp	r4, r5
   16fa4:	d301      	bcc.n	16faa <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   16fa6:	2000      	movs	r0, #0
   16fa8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   16faa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   16fae:	4620      	mov	r0, r4
   16fb0:	f004 fdeb 	bl	1bb8a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   16fb4:	3414      	adds	r4, #20
   16fb6:	e7f4      	b.n	16fa2 <statics_init+0x6>
   16fb8:	20000884 	.word	0x20000884
   16fbc:	20000884 	.word	0x20000884

00016fc0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   16fc0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16fc2:	4b0e      	ldr	r3, [pc, #56]	; (16ffc <init_mem_slab_module+0x3c>)
   16fc4:	4c0e      	ldr	r4, [pc, #56]	; (17000 <init_mem_slab_module+0x40>)
   16fc6:	42a3      	cmp	r3, r4
   16fc8:	d301      	bcc.n	16fce <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   16fca:	2000      	movs	r0, #0
	return rc;
}
   16fcc:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   16fce:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   16fd2:	ea41 0200 	orr.w	r2, r1, r0
   16fd6:	f012 0203 	ands.w	r2, r2, #3
   16fda:	d10b      	bne.n	16ff4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   16fdc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   16fde:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16fe0:	42aa      	cmp	r2, r5
   16fe2:	d101      	bne.n	16fe8 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16fe4:	331c      	adds	r3, #28
   16fe6:	e7ee      	b.n	16fc6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   16fe8:	695e      	ldr	r6, [r3, #20]
   16fea:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   16fec:	3201      	adds	r2, #1
		slab->free_list = p;
   16fee:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   16ff0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   16ff2:	e7f5      	b.n	16fe0 <init_mem_slab_module+0x20>
	return rc;
   16ff4:	f06f 0015 	mvn.w	r0, #21
   16ff8:	e7e8      	b.n	16fcc <init_mem_slab_module+0xc>
   16ffa:	bf00      	nop
   16ffc:	20000830 	.word	0x20000830
   17000:	20000884 	.word	0x20000884

00017004 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   17004:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17006:	460c      	mov	r4, r1
	__asm__ volatile(
   17008:	f04f 0520 	mov.w	r5, #32
   1700c:	f3ef 8111 	mrs	r1, BASEPRI
   17010:	f385 8812 	msr	BASEPRI_MAX, r5
   17014:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   17018:	6945      	ldr	r5, [r0, #20]
   1701a:	b15d      	cbz	r5, 17034 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1701c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1701e:	682b      	ldr	r3, [r5, #0]
   17020:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   17022:	6983      	ldr	r3, [r0, #24]
   17024:	3301      	adds	r3, #1
   17026:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   17028:	2000      	movs	r0, #0
	__asm__ volatile(
   1702a:	f381 8811 	msr	BASEPRI, r1
   1702e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   17032:	e011      	b.n	17058 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   17034:	ea52 0c03 	orrs.w	ip, r2, r3
   17038:	d103      	bne.n	17042 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1703a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1703c:	f06f 000b 	mvn.w	r0, #11
   17040:	e7f3      	b.n	1702a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   17042:	e9cd 2300 	strd	r2, r3, [sp]
   17046:	4602      	mov	r2, r0
   17048:	3008      	adds	r0, #8
   1704a:	f000 fcb9 	bl	179c0 <z_pend_curr>
		if (result == 0) {
   1704e:	b918      	cbnz	r0, 17058 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   17050:	4b02      	ldr	r3, [pc, #8]	; (1705c <k_mem_slab_alloc+0x58>)
   17052:	689b      	ldr	r3, [r3, #8]
   17054:	695b      	ldr	r3, [r3, #20]
   17056:	6023      	str	r3, [r4, #0]
}
   17058:	b003      	add	sp, #12
   1705a:	bd30      	pop	{r4, r5, pc}
   1705c:	20002748 	.word	0x20002748

00017060 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   17060:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   17064:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   17066:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   17068:	2604      	movs	r6, #4
   1706a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1706c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1706e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   17070:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   17074:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17076:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   17078:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1707c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1707e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17080:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   17084:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   17086:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1708a:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1708e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   17090:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   17092:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   17094:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   17098:	9202      	str	r2, [sp, #8]
   1709a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1709c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1709e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   170a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   170a2:	9200      	str	r2, [sp, #0]
   170a4:	4642      	mov	r2, r8
{
   170a6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   170a8:	f7ec f8be 	bl	3228 <arch_new_thread>
	if (!_current) {
   170ac:	4b04      	ldr	r3, [pc, #16]	; (170c0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   170ae:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   170b0:	689b      	ldr	r3, [r3, #8]
   170b2:	b103      	cbz	r3, 170b6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   170b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   170b6:	6763      	str	r3, [r4, #116]	; 0x74
}
   170b8:	4640      	mov	r0, r8
   170ba:	b004      	add	sp, #16
   170bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   170c0:	20002748 	.word	0x20002748

000170c4 <z_impl_k_thread_create>:
{
   170c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   170c6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   170c8:	2700      	movs	r7, #0
   170ca:	9705      	str	r7, [sp, #20]
   170cc:	9f10      	ldr	r7, [sp, #64]	; 0x40
   170ce:	9704      	str	r7, [sp, #16]
   170d0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   170d2:	9703      	str	r7, [sp, #12]
   170d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   170d6:	9702      	str	r7, [sp, #8]
{
   170d8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   170dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   170de:	9701      	str	r7, [sp, #4]
   170e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   170e2:	9700      	str	r7, [sp, #0]
{
   170e4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   170e6:	f7ff ffbb 	bl	17060 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   170ea:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   170ee:	bf08      	it	eq
   170f0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   170f4:	d005      	beq.n	17102 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   170f6:	ea55 0306 	orrs.w	r3, r5, r6
   170fa:	d105      	bne.n	17108 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   170fc:	4620      	mov	r0, r4
   170fe:	f000 fc03 	bl	17908 <z_sched_start>
}
   17102:	4620      	mov	r0, r4
   17104:	b007      	add	sp, #28
   17106:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17108:	4903      	ldr	r1, [pc, #12]	; (17118 <z_impl_k_thread_create+0x54>)
   1710a:	4632      	mov	r2, r6
   1710c:	462b      	mov	r3, r5
   1710e:	f104 0018 	add.w	r0, r4, #24
   17112:	f000 fe45 	bl	17da0 <z_add_timeout>
   17116:	e7f4      	b.n	17102 <z_impl_k_thread_create+0x3e>
   17118:	0001c101 	.word	0x0001c101

0001711c <z_init_static_threads>:
{
   1711c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17120:	4c29      	ldr	r4, [pc, #164]	; (171c8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   17122:	4d2a      	ldr	r5, [pc, #168]	; (171cc <z_init_static_threads+0xb0>)
{
   17124:	b087      	sub	sp, #28
   17126:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   17128:	42ae      	cmp	r6, r5
   1712a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1712e:	d30f      	bcc.n	17150 <z_init_static_threads+0x34>
	k_sched_lock();
   17130:	f000 fb06 	bl	17740 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   17134:	4c24      	ldr	r4, [pc, #144]	; (171c8 <z_init_static_threads+0xac>)
   17136:	f8df 9098 	ldr.w	r9, [pc, #152]	; 171d0 <z_init_static_threads+0xb4>
   1713a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1713e:	f240 37e7 	movw	r7, #999	; 0x3e7
   17142:	42ac      	cmp	r4, r5
   17144:	d320      	bcc.n	17188 <z_init_static_threads+0x6c>
}
   17146:	b007      	add	sp, #28
   17148:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1714c:	f000 bc7e 	b.w	17a4c <k_sched_unlock>
		z_setup_new_thread(
   17150:	f854 3c04 	ldr.w	r3, [r4, #-4]
   17154:	9305      	str	r3, [sp, #20]
   17156:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1715a:	9304      	str	r3, [sp, #16]
   1715c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   17160:	9303      	str	r3, [sp, #12]
   17162:	f854 3c18 	ldr.w	r3, [r4, #-24]
   17166:	9302      	str	r3, [sp, #8]
   17168:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1716c:	9301      	str	r3, [sp, #4]
   1716e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   17172:	9300      	str	r3, [sp, #0]
   17174:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   17178:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1717c:	f7ff ff70 	bl	17060 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   17180:	f854 3c30 	ldr.w	r3, [r4, #-48]
   17184:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   17186:	e7ce      	b.n	17126 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   17188:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1718a:	1c5a      	adds	r2, r3, #1
   1718c:	d00d      	beq.n	171aa <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1718e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17192:	2100      	movs	r1, #0
   17194:	4638      	mov	r0, r7
   17196:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1719a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1719e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   171a2:	d104      	bne.n	171ae <z_init_static_threads+0x92>
	z_sched_start(thread);
   171a4:	4640      	mov	r0, r8
   171a6:	f000 fbaf 	bl	17908 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   171aa:	3430      	adds	r4, #48	; 0x30
   171ac:	e7c9      	b.n	17142 <z_init_static_threads+0x26>
   171ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   171b2:	2300      	movs	r3, #0
   171b4:	f7e9 fb62 	bl	87c <__aeabi_uldivmod>
   171b8:	4602      	mov	r2, r0
   171ba:	460b      	mov	r3, r1
   171bc:	f108 0018 	add.w	r0, r8, #24
   171c0:	4649      	mov	r1, r9
   171c2:	f000 fded 	bl	17da0 <z_add_timeout>
   171c6:	e7f0      	b.n	171aa <z_init_static_threads+0x8e>
   171c8:	20000830 	.word	0x20000830
   171cc:	20000830 	.word	0x20000830
   171d0:	0001c101 	.word	0x0001c101

000171d4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   171d4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   171d6:	4c0b      	ldr	r4, [pc, #44]	; (17204 <idle+0x30>)
	return !z_sys_post_kernel;
   171d8:	4d0b      	ldr	r5, [pc, #44]	; (17208 <idle+0x34>)
	__asm__ volatile(
   171da:	f04f 0220 	mov.w	r2, #32
   171de:	f3ef 8311 	mrs	r3, BASEPRI
   171e2:	f382 8812 	msr	BASEPRI_MAX, r2
   171e6:	f3bf 8f6f 	isb	sy
   171ea:	f005 f830 	bl	1c24e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   171ee:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   171f0:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   171f2:	b913      	cbnz	r3, 171fa <idle+0x26>
	arch_cpu_idle();
   171f4:	f7eb ff2c 	bl	3050 <arch_cpu_idle>
}
   171f8:	e7ef      	b.n	171da <idle+0x6>
   171fa:	f7eb fded 	bl	2dd8 <pm_system_suspend>
   171fe:	2800      	cmp	r0, #0
   17200:	d1eb      	bne.n	171da <idle+0x6>
   17202:	e7f7      	b.n	171f4 <idle+0x20>
   17204:	20002748 	.word	0x20002748
   17208:	20002bf6 	.word	0x20002bf6

0001720c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1720c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1720e:	4611      	mov	r1, r2
   17210:	f04f 0220 	mov.w	r2, #32
   17214:	f3ef 8511 	mrs	r5, BASEPRI
   17218:	f382 8812 	msr	BASEPRI_MAX, r2
   1721c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   17220:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   17222:	b19c      	cbz	r4, 1724c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17224:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17226:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17228:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1722c:	4294      	cmp	r4, r2
	list->head = node;
   1722e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   17230:	bf08      	it	eq
   17232:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   17234:	2101      	movs	r1, #1
   17236:	4620      	mov	r0, r4
   17238:	f004 fdac 	bl	1bd94 <z_queue_node_peek>
   1723c:	4604      	mov	r4, r0
	__asm__ volatile(
   1723e:	f385 8811 	msr	BASEPRI, r5
   17242:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   17246:	4620      	mov	r0, r4
   17248:	b003      	add	sp, #12
   1724a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1724c:	ea51 0203 	orrs.w	r2, r1, r3
   17250:	d0f5      	beq.n	1723e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17252:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   17256:	e9cd 1300 	strd	r1, r3, [sp]
   1725a:	4610      	mov	r0, r2
   1725c:	4629      	mov	r1, r5
   1725e:	f000 fbaf 	bl	179c0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   17262:	2800      	cmp	r0, #0
   17264:	d1ef      	bne.n	17246 <z_impl_k_queue_get+0x3a>
   17266:	4b02      	ldr	r3, [pc, #8]	; (17270 <z_impl_k_queue_get+0x64>)
   17268:	689b      	ldr	r3, [r3, #8]
   1726a:	695c      	ldr	r4, [r3, #20]
   1726c:	e7eb      	b.n	17246 <z_impl_k_queue_get+0x3a>
   1726e:	bf00      	nop
   17270:	20002748 	.word	0x20002748

00017274 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   17274:	b538      	push	{r3, r4, r5, lr}
   17276:	4604      	mov	r4, r0
	__asm__ volatile(
   17278:	f04f 0320 	mov.w	r3, #32
   1727c:	f3ef 8511 	mrs	r5, BASEPRI
   17280:	f383 8812 	msr	BASEPRI_MAX, r3
   17284:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   17288:	f004 ff86 	bl	1c198 <z_unpend_first_thread>

	if (thread != NULL) {
   1728c:	b148      	cbz	r0, 172a2 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1728e:	2200      	movs	r2, #0
   17290:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   17292:	f004 ff25 	bl	1c0e0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   17296:	4629      	mov	r1, r5
   17298:	4808      	ldr	r0, [pc, #32]	; (172bc <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1729a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1729e:	f000 ba3d 	b.w	1771c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   172a2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   172a6:	429a      	cmp	r2, r3
   172a8:	bf18      	it	ne
   172aa:	3301      	addne	r3, #1
   172ac:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   172ae:	2102      	movs	r1, #2
   172b0:	f104 0010 	add.w	r0, r4, #16
   172b4:	f005 f968 	bl	1c588 <z_handle_obj_poll_events>
}
   172b8:	e7ed      	b.n	17296 <z_impl_k_sem_give+0x22>
   172ba:	bf00      	nop
   172bc:	20002bf7 	.word	0x20002bf7

000172c0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   172c0:	b513      	push	{r0, r1, r4, lr}
   172c2:	f04f 0420 	mov.w	r4, #32
   172c6:	f3ef 8111 	mrs	r1, BASEPRI
   172ca:	f384 8812 	msr	BASEPRI_MAX, r4
   172ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   172d2:	6884      	ldr	r4, [r0, #8]
   172d4:	b144      	cbz	r4, 172e8 <z_impl_k_sem_take+0x28>
		sem->count--;
   172d6:	3c01      	subs	r4, #1
   172d8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   172da:	f381 8811 	msr	BASEPRI, r1
   172de:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   172e2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   172e4:	b002      	add	sp, #8
   172e6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   172e8:	ea52 0403 	orrs.w	r4, r2, r3
   172ec:	d106      	bne.n	172fc <z_impl_k_sem_take+0x3c>
   172ee:	f381 8811 	msr	BASEPRI, r1
   172f2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   172f6:	f06f 000f 	mvn.w	r0, #15
   172fa:	e7f3      	b.n	172e4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   172fc:	e9cd 2300 	strd	r2, r3, [sp]
   17300:	4602      	mov	r2, r0
   17302:	4802      	ldr	r0, [pc, #8]	; (1730c <z_impl_k_sem_take+0x4c>)
   17304:	f000 fb5c 	bl	179c0 <z_pend_curr>
	return ret;
   17308:	e7ec      	b.n	172e4 <z_impl_k_sem_take+0x24>
   1730a:	bf00      	nop
   1730c:	20002bf7 	.word	0x20002bf7

00017310 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   17310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   17312:	4b09      	ldr	r3, [pc, #36]	; (17338 <k_sys_work_q_init+0x28>)
   17314:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   17316:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   17318:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1731a:	9300      	str	r3, [sp, #0]
   1731c:	4907      	ldr	r1, [pc, #28]	; (1733c <k_sys_work_q_init+0x2c>)
   1731e:	4808      	ldr	r0, [pc, #32]	; (17340 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   17320:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   17324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17328:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1732c:	f000 f914 	bl	17558 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   17330:	4620      	mov	r0, r4
   17332:	b004      	add	sp, #16
   17334:	bd10      	pop	{r4, pc}
   17336:	bf00      	nop
   17338:	0001e286 	.word	0x0001e286
   1733c:	20004240 	.word	0x20004240
   17340:	20001308 	.word	0x20001308

00017344 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   17344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   17348:	4e47      	ldr	r6, [pc, #284]	; (17468 <work_queue_main+0x124>)
   1734a:	b085      	sub	sp, #20
   1734c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1734e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17352:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   17356:	f04f 0320 	mov.w	r3, #32
   1735a:	f3ef 8711 	mrs	r7, BASEPRI
   1735e:	f383 8812 	msr	BASEPRI_MAX, r3
   17362:	f3bf 8f6f 	isb	sy
   17366:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1736a:	b98d      	cbnz	r5, 17390 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1736c:	2102      	movs	r1, #2
   1736e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   17372:	f004 fd88 	bl	1be86 <flag_test_and_clear>
   17376:	2800      	cmp	r0, #0
   17378:	d135      	bne.n	173e6 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1737a:	2300      	movs	r3, #0
   1737c:	e9cd 8900 	strd	r8, r9, [sp]
   17380:	9302      	str	r3, [sp, #8]
   17382:	f104 0288 	add.w	r2, r4, #136	; 0x88
   17386:	4639      	mov	r1, r7
   17388:	4838      	ldr	r0, [pc, #224]	; (1746c <work_queue_main+0x128>)
   1738a:	f000 fc91 	bl	17cb0 <z_sched_wait>
			continue;
   1738e:	e7e2      	b.n	17356 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17390:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   17394:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   17396:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1739a:	4295      	cmp	r5, r2
   1739c:	d101      	bne.n	173a2 <work_queue_main+0x5e>
	list->tail = node;
   1739e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   173a2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   173a6:	f043 0302 	orr.w	r3, r3, #2
   173aa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   173ae:	68eb      	ldr	r3, [r5, #12]
   173b0:	f023 0304 	bic.w	r3, r3, #4
   173b4:	f043 0301 	orr.w	r3, r3, #1
   173b8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   173ba:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   173bc:	f387 8811 	msr	BASEPRI, r7
   173c0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   173c4:	4628      	mov	r0, r5
   173c6:	4798      	blx	r3
	__asm__ volatile(
   173c8:	f04f 0320 	mov.w	r3, #32
   173cc:	f3ef 8b11 	mrs	fp, BASEPRI
   173d0:	f383 8812 	msr	BASEPRI_MAX, r3
   173d4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   173d8:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   173da:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   173dc:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   173e0:	d40b      	bmi.n	173fa <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   173e2:	60ea      	str	r2, [r5, #12]
   173e4:	e00e      	b.n	17404 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   173e6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   173ea:	2200      	movs	r2, #0
   173ec:	2101      	movs	r1, #1
   173ee:	4628      	mov	r0, r5
   173f0:	f004 fefa 	bl	1c1e8 <z_sched_wake>
   173f4:	2800      	cmp	r0, #0
   173f6:	d1f8      	bne.n	173ea <work_queue_main+0xa6>
   173f8:	e7bf      	b.n	1737a <work_queue_main+0x36>
	return list->head;
   173fa:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   173fc:	f023 0303 	bic.w	r3, r3, #3
   17400:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   17402:	b970      	cbnz	r0, 17422 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   17404:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   17408:	f023 0302 	bic.w	r3, r3, #2
   1740c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   17410:	f38b 8811 	msr	BASEPRI, fp
   17414:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   17418:	05d8      	lsls	r0, r3, #23
   1741a:	d49c      	bmi.n	17356 <work_queue_main+0x12>
	z_impl_k_yield();
   1741c:	f000 fb3e 	bl	17a9c <z_impl_k_yield>
}
   17420:	e799      	b.n	17356 <work_queue_main+0x12>
	return node->next;
   17422:	2700      	movs	r7, #0
   17424:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   17428:	463b      	mov	r3, r7
		if (wc->work == work) {
   1742a:	6842      	ldr	r2, [r0, #4]
   1742c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1742e:	4601      	mov	r1, r0
		if (wc->work == work) {
   17430:	d10c      	bne.n	1744c <work_queue_main+0x108>
	return node->next;
   17432:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   17434:	b997      	cbnz	r7, 1745c <work_queue_main+0x118>
   17436:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   17438:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1743a:	4282      	cmp	r2, r0
   1743c:	d100      	bne.n	17440 <work_queue_main+0xfc>
	list->tail = node;
   1743e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   17440:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   17444:	f7ff ff16 	bl	17274 <z_impl_k_sem_give>
}
   17448:	4639      	mov	r1, r7
   1744a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1744c:	f1ba 0f00 	cmp.w	sl, #0
   17450:	d0d8      	beq.n	17404 <work_queue_main+0xc0>
	return node->next;
   17452:	4650      	mov	r0, sl
   17454:	460f      	mov	r7, r1
   17456:	f8da a000 	ldr.w	sl, [sl]
   1745a:	e7e6      	b.n	1742a <work_queue_main+0xe6>
	return list->tail;
   1745c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1745e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   17460:	4290      	cmp	r0, r2
	list->tail = node;
   17462:	bf08      	it	eq
   17464:	6077      	streq	r7, [r6, #4]
}
   17466:	e7eb      	b.n	17440 <work_queue_main+0xfc>
   17468:	20002770 	.word	0x20002770
   1746c:	20002bf7 	.word	0x20002bf7

00017470 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   17470:	68c3      	ldr	r3, [r0, #12]
{
   17472:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   17474:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   17478:	079b      	lsls	r3, r3, #30
{
   1747a:	4605      	mov	r5, r0
   1747c:	460c      	mov	r4, r1
	if (ret) {
   1747e:	d50d      	bpl.n	1749c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17480:	2201      	movs	r2, #1
   17482:	2100      	movs	r1, #0
   17484:	f104 0008 	add.w	r0, r4, #8
   17488:	f004 fced 	bl	1be66 <z_impl_k_sem_init>
	parent->next = child;
   1748c:	2300      	movs	r3, #0
   1748e:	6023      	str	r3, [r4, #0]
	return list->tail;
   17490:	4b05      	ldr	r3, [pc, #20]	; (174a8 <cancel_sync_locked+0x38>)
	canceler->work = work;
   17492:	6065      	str	r5, [r4, #4]
   17494:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   17496:	b91a      	cbnz	r2, 174a0 <cancel_sync_locked+0x30>
	list->head = node;
   17498:	e9c3 4400 	strd	r4, r4, [r3]
}
   1749c:	4630      	mov	r0, r6
   1749e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   174a0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   174a2:	605c      	str	r4, [r3, #4]
}
   174a4:	e7fa      	b.n	1749c <cancel_sync_locked+0x2c>
   174a6:	bf00      	nop
   174a8:	20002770 	.word	0x20002770

000174ac <submit_to_queue_locked>:
{
   174ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   174ae:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   174b0:	079a      	lsls	r2, r3, #30
{
   174b2:	4604      	mov	r4, r0
   174b4:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   174b6:	f3c3 0540 	ubfx	r5, r3, #1, #1
   174ba:	d41f      	bmi.n	174fc <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   174bc:	075f      	lsls	r7, r3, #29
   174be:	d41f      	bmi.n	17500 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   174c0:	680a      	ldr	r2, [r1, #0]
   174c2:	b90a      	cbnz	r2, 174c8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   174c4:	6882      	ldr	r2, [r0, #8]
   174c6:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   174c8:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   174ca:	bf44      	itt	mi
   174cc:	68a3      	ldrmi	r3, [r4, #8]
   174ce:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   174d0:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   174d2:	bf4c      	ite	mi
   174d4:	2502      	movmi	r5, #2
		ret = 1;
   174d6:	2501      	movpl	r5, #1
	if (queue == NULL) {
   174d8:	b37f      	cbz	r7, 1753a <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   174da:	4b1b      	ldr	r3, [pc, #108]	; (17548 <submit_to_queue_locked+0x9c>)
   174dc:	689b      	ldr	r3, [r3, #8]
   174de:	42bb      	cmp	r3, r7
   174e0:	d111      	bne.n	17506 <submit_to_queue_locked+0x5a>
   174e2:	f004 fbe1 	bl	1bca8 <k_is_in_isr>
   174e6:	f080 0001 	eor.w	r0, r0, #1
   174ea:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   174ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   174f0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   174f2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   174f6:	d523      	bpl.n	17540 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   174f8:	b13a      	cbz	r2, 1750a <submit_to_queue_locked+0x5e>
   174fa:	b940      	cbnz	r0, 1750e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   174fc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   17500:	2300      	movs	r3, #0
   17502:	6033      	str	r3, [r6, #0]
	return ret;
   17504:	e013      	b.n	1752e <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   17506:	2000      	movs	r0, #0
   17508:	e7f0      	b.n	174ec <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1750a:	071b      	lsls	r3, r3, #28
   1750c:	d4f6      	bmi.n	174fc <submit_to_queue_locked+0x50>
	parent->next = child;
   1750e:	2300      	movs	r3, #0
   17510:	6023      	str	r3, [r4, #0]
	return list->tail;
   17512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   17516:	b963      	cbnz	r3, 17532 <submit_to_queue_locked+0x86>
	list->head = node;
   17518:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1751c:	4638      	mov	r0, r7
   1751e:	f004 fccb 	bl	1beb8 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   17522:	68e3      	ldr	r3, [r4, #12]
   17524:	f043 0304 	orr.w	r3, r3, #4
   17528:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1752a:	6833      	ldr	r3, [r6, #0]
   1752c:	60a3      	str	r3, [r4, #8]
}
   1752e:	4628      	mov	r0, r5
   17530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   17532:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17534:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   17538:	e7f0      	b.n	1751c <submit_to_queue_locked+0x70>
		return -EINVAL;
   1753a:	f06f 0515 	mvn.w	r5, #21
   1753e:	e7df      	b.n	17500 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   17540:	f06f 0512 	mvn.w	r5, #18
   17544:	e7dc      	b.n	17500 <submit_to_queue_locked+0x54>
   17546:	bf00      	nop
   17548:	20002748 	.word	0x20002748

0001754c <k_work_submit>:
{
   1754c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1754e:	4801      	ldr	r0, [pc, #4]	; (17554 <k_work_submit+0x8>)
   17550:	f004 bd12 	b.w	1bf78 <k_work_submit_to_queue>
   17554:	20001308 	.word	0x20001308

00017558 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   17558:	b5f0      	push	{r4, r5, r6, r7, lr}
   1755a:	b089      	sub	sp, #36	; 0x24
   1755c:	4604      	mov	r4, r0
	list->head = NULL;
   1755e:	2000      	movs	r0, #0
	list->tail = NULL;
   17560:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   17564:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   17566:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1756a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1756e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   17572:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   17576:	b31d      	cbz	r5, 175c0 <k_work_queue_start+0x68>
   17578:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1757a:	2800      	cmp	r0, #0
   1757c:	f240 1001 	movw	r0, #257	; 0x101
   17580:	bf08      	it	eq
   17582:	2001      	moveq	r0, #1
	*flagp = flags;
   17584:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17588:	2000      	movs	r0, #0
   1758a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1758e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   17592:	e9cd 3003 	strd	r3, r0, [sp, #12]
   17596:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1759a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1759e:	4b09      	ldr	r3, [pc, #36]	; (175c4 <k_work_queue_start+0x6c>)
   175a0:	9400      	str	r4, [sp, #0]
   175a2:	4620      	mov	r0, r4
   175a4:	f7ff fd8e 	bl	170c4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   175a8:	b125      	cbz	r5, 175b4 <k_work_queue_start+0x5c>
   175aa:	6829      	ldr	r1, [r5, #0]
   175ac:	b111      	cbz	r1, 175b4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   175ae:	4620      	mov	r0, r4
   175b0:	f004 fb80 	bl	1bcb4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   175b4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   175b6:	b009      	add	sp, #36	; 0x24
   175b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   175bc:	f004 bb7d 	b.w	1bcba <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   175c0:	2001      	movs	r0, #1
   175c2:	e7df      	b.n	17584 <k_work_queue_start+0x2c>
   175c4:	00017345 	.word	0x00017345

000175c8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   175c8:	b513      	push	{r0, r1, r4, lr}
   175ca:	9001      	str	r0, [sp, #4]
   175cc:	4608      	mov	r0, r1
	__asm__ volatile(
   175ce:	f04f 0120 	mov.w	r1, #32
   175d2:	f3ef 8411 	mrs	r4, BASEPRI
   175d6:	f381 8812 	msr	BASEPRI_MAX, r1
   175da:	f3bf 8f6f 	isb	sy
	return *flagp;
   175de:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   175e0:	f011 0f0e 	tst.w	r1, #14
   175e4:	d116      	bne.n	17614 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   175e6:	ea53 0c02 	orrs.w	ip, r3, r2
   175ea:	d108      	bne.n	175fe <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   175ec:	a901      	add	r1, sp, #4
   175ee:	f7ff ff5d 	bl	174ac <submit_to_queue_locked>
	__asm__ volatile(
   175f2:	f384 8811 	msr	BASEPRI, r4
   175f6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   175fa:	b002      	add	sp, #8
   175fc:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   175fe:	f041 0108 	orr.w	r1, r1, #8
   17602:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   17604:	9901      	ldr	r1, [sp, #4]
   17606:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17608:	3010      	adds	r0, #16
   1760a:	4903      	ldr	r1, [pc, #12]	; (17618 <k_work_schedule_for_queue+0x50>)
   1760c:	f000 fbc8 	bl	17da0 <z_add_timeout>
	return ret;
   17610:	2001      	movs	r0, #1
   17612:	e7ee      	b.n	175f2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   17614:	2000      	movs	r0, #0
   17616:	e7ec      	b.n	175f2 <k_work_schedule_for_queue+0x2a>
   17618:	0001bf29 	.word	0x0001bf29

0001761c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1761c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1761e:	4801      	ldr	r0, [pc, #4]	; (17624 <k_work_schedule+0x8>)
   17620:	f7ff bfd2 	b.w	175c8 <k_work_schedule_for_queue>
   17624:	20001308 	.word	0x20001308

00017628 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   17628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1762a:	460c      	mov	r4, r1
   1762c:	9001      	str	r0, [sp, #4]
   1762e:	4616      	mov	r6, r2
   17630:	461d      	mov	r5, r3
	__asm__ volatile(
   17632:	f04f 0320 	mov.w	r3, #32
   17636:	f3ef 8711 	mrs	r7, BASEPRI
   1763a:	f383 8812 	msr	BASEPRI_MAX, r3
   1763e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   17642:	4608      	mov	r0, r1
   17644:	f004 fc2a 	bl	1be9c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   17648:	ea55 0306 	orrs.w	r3, r5, r6
   1764c:	d109      	bne.n	17662 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1764e:	a901      	add	r1, sp, #4
   17650:	4620      	mov	r0, r4
   17652:	f7ff ff2b 	bl	174ac <submit_to_queue_locked>
	__asm__ volatile(
   17656:	f387 8811 	msr	BASEPRI, r7
   1765a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1765e:	b003      	add	sp, #12
   17660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   17662:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17664:	4906      	ldr	r1, [pc, #24]	; (17680 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   17666:	f043 0308 	orr.w	r3, r3, #8
   1766a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1766c:	9b01      	ldr	r3, [sp, #4]
   1766e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   17670:	f104 0010 	add.w	r0, r4, #16
   17674:	4632      	mov	r2, r6
   17676:	462b      	mov	r3, r5
   17678:	f000 fb92 	bl	17da0 <z_add_timeout>
	return ret;
   1767c:	2001      	movs	r0, #1
   1767e:	e7ea      	b.n	17656 <k_work_reschedule_for_queue+0x2e>
   17680:	0001bf29 	.word	0x0001bf29

00017684 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   17684:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   17686:	4801      	ldr	r0, [pc, #4]	; (1768c <k_work_reschedule+0x8>)
   17688:	f7ff bfce 	b.w	17628 <k_work_reschedule_for_queue>
   1768c:	20001308 	.word	0x20001308

00017690 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   17690:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   17692:	4c08      	ldr	r4, [pc, #32]	; (176b4 <z_reset_time_slice+0x24>)
   17694:	6823      	ldr	r3, [r4, #0]
   17696:	b15b      	cbz	r3, 176b0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   17698:	f7fe fa5a 	bl	15b50 <sys_clock_elapsed>
   1769c:	4603      	mov	r3, r0
   1769e:	6820      	ldr	r0, [r4, #0]
   176a0:	4a05      	ldr	r2, [pc, #20]	; (176b8 <z_reset_time_slice+0x28>)
   176a2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   176a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   176a8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   176aa:	2100      	movs	r1, #0
   176ac:	f004 bddf 	b.w	1c26e <z_set_timeout_expiry>
}
   176b0:	bd10      	pop	{r4, pc}
   176b2:	bf00      	nop
   176b4:	20002780 	.word	0x20002780
   176b8:	20002748 	.word	0x20002748

000176bc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   176bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   176be:	4604      	mov	r4, r0
   176c0:	460d      	mov	r5, r1
	__asm__ volatile(
   176c2:	f04f 0320 	mov.w	r3, #32
   176c6:	f3ef 8611 	mrs	r6, BASEPRI
   176ca:	f383 8812 	msr	BASEPRI_MAX, r3
   176ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   176d2:	4b0f      	ldr	r3, [pc, #60]	; (17710 <k_sched_time_slice_set+0x54>)
   176d4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   176d6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   176da:	f240 30e7 	movw	r0, #999	; 0x3e7
   176de:	6119      	str	r1, [r3, #16]
   176e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   176e4:	2300      	movs	r3, #0
   176e6:	fbe4 0107 	umlal	r0, r1, r4, r7
   176ea:	f7e9 f8c7 	bl	87c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   176ee:	2c00      	cmp	r4, #0
   176f0:	4b08      	ldr	r3, [pc, #32]	; (17714 <k_sched_time_slice_set+0x58>)
   176f2:	dc09      	bgt.n	17708 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   176f4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   176f6:	4b08      	ldr	r3, [pc, #32]	; (17718 <k_sched_time_slice_set+0x5c>)
   176f8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   176fa:	f7ff ffc9 	bl	17690 <z_reset_time_slice>
	__asm__ volatile(
   176fe:	f386 8811 	msr	BASEPRI, r6
   17702:	f3bf 8f6f 	isb	sy
	}
}
   17706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   17708:	2802      	cmp	r0, #2
   1770a:	bfb8      	it	lt
   1770c:	2002      	movlt	r0, #2
   1770e:	e7f1      	b.n	176f4 <k_sched_time_slice_set+0x38>
   17710:	20002748 	.word	0x20002748
   17714:	20002780 	.word	0x20002780
   17718:	2000277c 	.word	0x2000277c

0001771c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1771c:	b949      	cbnz	r1, 17732 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1771e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   17722:	b930      	cbnz	r0, 17732 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   17724:	4b05      	ldr	r3, [pc, #20]	; (1773c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   17726:	69da      	ldr	r2, [r3, #28]
   17728:	689b      	ldr	r3, [r3, #8]
   1772a:	429a      	cmp	r2, r3
   1772c:	d001      	beq.n	17732 <z_reschedule+0x16>
	ret = arch_swap(key);
   1772e:	f7eb bd27 	b.w	3180 <arch_swap>
   17732:	f381 8811 	msr	BASEPRI, r1
   17736:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1773a:	4770      	bx	lr
   1773c:	20002748 	.word	0x20002748

00017740 <k_sched_lock>:
	__asm__ volatile(
   17740:	f04f 0320 	mov.w	r3, #32
   17744:	f3ef 8111 	mrs	r1, BASEPRI
   17748:	f383 8812 	msr	BASEPRI_MAX, r3
   1774c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   17750:	4b04      	ldr	r3, [pc, #16]	; (17764 <k_sched_lock+0x24>)
   17752:	689a      	ldr	r2, [r3, #8]
   17754:	7bd3      	ldrb	r3, [r2, #15]
   17756:	3b01      	subs	r3, #1
   17758:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1775a:	f381 8811 	msr	BASEPRI, r1
   1775e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   17762:	4770      	bx	lr
   17764:	20002748 	.word	0x20002748

00017768 <update_cache>:
{
   17768:	b538      	push	{r3, r4, r5, lr}
   1776a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   1776c:	480c      	ldr	r0, [pc, #48]	; (177a0 <update_cache+0x38>)
   1776e:	4d0d      	ldr	r5, [pc, #52]	; (177a4 <update_cache+0x3c>)
   17770:	f004 fcb0 	bl	1c0d4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   17774:	4604      	mov	r4, r0
   17776:	b900      	cbnz	r0, 1777a <update_cache+0x12>
   17778:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1777a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1777c:	b94a      	cbnz	r2, 17792 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1777e:	7b5a      	ldrb	r2, [r3, #13]
   17780:	06d2      	lsls	r2, r2, #27
   17782:	d106      	bne.n	17792 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   17784:	69a2      	ldr	r2, [r4, #24]
   17786:	b922      	cbnz	r2, 17792 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   17788:	89da      	ldrh	r2, [r3, #14]
   1778a:	2a7f      	cmp	r2, #127	; 0x7f
   1778c:	d901      	bls.n	17792 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1778e:	61eb      	str	r3, [r5, #28]
}
   17790:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   17792:	429c      	cmp	r4, r3
   17794:	d001      	beq.n	1779a <update_cache+0x32>
			z_reset_time_slice();
   17796:	f7ff ff7b 	bl	17690 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1779a:	61ec      	str	r4, [r5, #28]
}
   1779c:	e7f8      	b.n	17790 <update_cache+0x28>
   1779e:	bf00      	nop
   177a0:	20002768 	.word	0x20002768
   177a4:	20002748 	.word	0x20002748

000177a8 <move_thread_to_end_of_prio_q>:
{
   177a8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   177aa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   177ae:	7b43      	ldrb	r3, [r0, #13]
   177b0:	2a00      	cmp	r2, #0
{
   177b2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   177b4:	da04      	bge.n	177c0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   177b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   177ba:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   177bc:	f004 fc45 	bl	1c04a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   177c0:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   177c2:	4a15      	ldr	r2, [pc, #84]	; (17818 <move_thread_to_end_of_prio_q+0x70>)
   177c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   177c8:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   177ca:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   177ce:	f102 0520 	add.w	r5, r2, #32
   177d2:	42ab      	cmp	r3, r5
   177d4:	d01b      	beq.n	1780e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   177d6:	b1d3      	cbz	r3, 1780e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   177d8:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   177dc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   177e0:	4286      	cmp	r6, r0
   177e2:	d00f      	beq.n	17804 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   177e4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   177e6:	2800      	cmp	r0, #0
   177e8:	dd0c      	ble.n	17804 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   177ea:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   177ec:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   177f0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   177f2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   177f4:	6890      	ldr	r0, [r2, #8]
   177f6:	1a43      	subs	r3, r0, r1
   177f8:	4258      	negs	r0, r3
}
   177fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   177fe:	4158      	adcs	r0, r3
   17800:	f7ff bfb2 	b.w	17768 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17804:	42a3      	cmp	r3, r4
   17806:	d002      	beq.n	1780e <move_thread_to_end_of_prio_q+0x66>
   17808:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1780a:	2b00      	cmp	r3, #0
   1780c:	d1e6      	bne.n	177dc <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1780e:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   17812:	6021      	str	r1, [r4, #0]
	list->tail = node;
   17814:	6251      	str	r1, [r2, #36]	; 0x24
}
   17816:	e7ed      	b.n	177f4 <move_thread_to_end_of_prio_q+0x4c>
   17818:	20002748 	.word	0x20002748

0001781c <z_time_slice>:
{
   1781c:	b538      	push	{r3, r4, r5, lr}
   1781e:	4601      	mov	r1, r0
	__asm__ volatile(
   17820:	f04f 0320 	mov.w	r3, #32
   17824:	f3ef 8411 	mrs	r4, BASEPRI
   17828:	f383 8812 	msr	BASEPRI_MAX, r3
   1782c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   17830:	4b15      	ldr	r3, [pc, #84]	; (17888 <z_time_slice+0x6c>)
   17832:	4a16      	ldr	r2, [pc, #88]	; (1788c <z_time_slice+0x70>)
   17834:	6898      	ldr	r0, [r3, #8]
   17836:	6815      	ldr	r5, [r2, #0]
   17838:	42a8      	cmp	r0, r5
   1783a:	d106      	bne.n	1784a <z_time_slice+0x2e>
			z_reset_time_slice();
   1783c:	f7ff ff28 	bl	17690 <z_reset_time_slice>
	__asm__ volatile(
   17840:	f384 8811 	msr	BASEPRI, r4
   17844:	f3bf 8f6f 	isb	sy
}
   17848:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1784a:	2500      	movs	r5, #0
   1784c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1784e:	4a10      	ldr	r2, [pc, #64]	; (17890 <z_time_slice+0x74>)
   17850:	6812      	ldr	r2, [r2, #0]
   17852:	b1ba      	cbz	r2, 17884 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   17854:	89c2      	ldrh	r2, [r0, #14]
   17856:	2a7f      	cmp	r2, #127	; 0x7f
   17858:	d814      	bhi.n	17884 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1785a:	7b42      	ldrb	r2, [r0, #13]
   1785c:	06d2      	lsls	r2, r2, #27
   1785e:	d111      	bne.n	17884 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   17860:	4a0c      	ldr	r2, [pc, #48]	; (17894 <z_time_slice+0x78>)
   17862:	f990 500e 	ldrsb.w	r5, [r0, #14]
   17866:	6812      	ldr	r2, [r2, #0]
   17868:	4295      	cmp	r5, r2
   1786a:	db0b      	blt.n	17884 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1786c:	4a0a      	ldr	r2, [pc, #40]	; (17898 <z_time_slice+0x7c>)
   1786e:	4290      	cmp	r0, r2
   17870:	d008      	beq.n	17884 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   17872:	691a      	ldr	r2, [r3, #16]
   17874:	428a      	cmp	r2, r1
   17876:	dc02      	bgt.n	1787e <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   17878:	f7ff ff96 	bl	177a8 <move_thread_to_end_of_prio_q>
   1787c:	e7de      	b.n	1783c <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1787e:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   17880:	611a      	str	r2, [r3, #16]
   17882:	e7dd      	b.n	17840 <z_time_slice+0x24>
   17884:	2200      	movs	r2, #0
   17886:	e7fb      	b.n	17880 <z_time_slice+0x64>
   17888:	20002748 	.word	0x20002748
   1788c:	20002778 	.word	0x20002778
   17890:	20002780 	.word	0x20002780
   17894:	2000277c 	.word	0x2000277c
   17898:	20001208 	.word	0x20001208

0001789c <ready_thread>:
{
   1789c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1789e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   178a2:	7b43      	ldrb	r3, [r0, #13]
   178a4:	2a00      	cmp	r2, #0
   178a6:	db2a      	blt.n	178fe <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   178a8:	06da      	lsls	r2, r3, #27
   178aa:	d128      	bne.n	178fe <ready_thread+0x62>
   178ac:	6982      	ldr	r2, [r0, #24]
   178ae:	bb32      	cbnz	r2, 178fe <ready_thread+0x62>
	return list->head == list;
   178b0:	4a14      	ldr	r2, [pc, #80]	; (17904 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   178b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   178b6:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   178b8:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   178bc:	f102 0520 	add.w	r5, r2, #32
   178c0:	42ab      	cmp	r3, r5
   178c2:	d017      	beq.n	178f4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   178c4:	b1b3      	cbz	r3, 178f4 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   178c6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   178ca:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   178ce:	428e      	cmp	r6, r1
   178d0:	d00b      	beq.n	178ea <ready_thread+0x4e>
		return b2 - b1;
   178d2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   178d4:	2900      	cmp	r1, #0
   178d6:	dd08      	ble.n	178ea <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   178d8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   178da:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   178de:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   178e0:	6058      	str	r0, [r3, #4]
}
   178e2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   178e4:	2000      	movs	r0, #0
   178e6:	f7ff bf3f 	b.w	17768 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   178ea:	42a3      	cmp	r3, r4
   178ec:	d002      	beq.n	178f4 <ready_thread+0x58>
   178ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   178f0:	2b00      	cmp	r3, #0
   178f2:	d1ea      	bne.n	178ca <ready_thread+0x2e>
	node->prev = tail;
   178f4:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   178f8:	6020      	str	r0, [r4, #0]
	list->tail = node;
   178fa:	6250      	str	r0, [r2, #36]	; 0x24
}
   178fc:	e7f1      	b.n	178e2 <ready_thread+0x46>
}
   178fe:	bc70      	pop	{r4, r5, r6}
   17900:	4770      	bx	lr
   17902:	bf00      	nop
   17904:	20002748 	.word	0x20002748

00017908 <z_sched_start>:
{
   17908:	b510      	push	{r4, lr}
	__asm__ volatile(
   1790a:	f04f 0220 	mov.w	r2, #32
   1790e:	f3ef 8411 	mrs	r4, BASEPRI
   17912:	f382 8812 	msr	BASEPRI_MAX, r2
   17916:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1791a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1791c:	0751      	lsls	r1, r2, #29
   1791e:	d404      	bmi.n	1792a <z_sched_start+0x22>
	__asm__ volatile(
   17920:	f384 8811 	msr	BASEPRI, r4
   17924:	f3bf 8f6f 	isb	sy
}
   17928:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1792a:	f022 0204 	bic.w	r2, r2, #4
   1792e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   17930:	f7ff ffb4 	bl	1789c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   17934:	4621      	mov	r1, r4
   17936:	4802      	ldr	r0, [pc, #8]	; (17940 <z_sched_start+0x38>)
}
   17938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1793c:	f7ff beee 	b.w	1771c <z_reschedule>
   17940:	20002bf7 	.word	0x20002bf7

00017944 <unready_thread>:
{
   17944:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   17946:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1794a:	7b43      	ldrb	r3, [r0, #13]
   1794c:	2a00      	cmp	r2, #0
{
   1794e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   17950:	da04      	bge.n	1795c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17956:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17958:	f004 fb77 	bl	1c04a <sys_dlist_remove>
	update_cache(thread == _current);
   1795c:	4b04      	ldr	r3, [pc, #16]	; (17970 <unready_thread+0x2c>)
   1795e:	6898      	ldr	r0, [r3, #8]
   17960:	1a43      	subs	r3, r0, r1
   17962:	4258      	negs	r0, r3
   17964:	4158      	adcs	r0, r3
}
   17966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1796a:	f7ff befd 	b.w	17768 <update_cache>
   1796e:	bf00      	nop
   17970:	20002748 	.word	0x20002748

00017974 <pend>:
{
   17974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17978:	4606      	mov	r6, r0
   1797a:	4615      	mov	r5, r2
   1797c:	461c      	mov	r4, r3
	__asm__ volatile(
   1797e:	f04f 0320 	mov.w	r3, #32
   17982:	f3ef 8711 	mrs	r7, BASEPRI
   17986:	f383 8812 	msr	BASEPRI_MAX, r3
   1798a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1798e:	f004 fbd9 	bl	1c144 <add_to_waitq_locked>
	__asm__ volatile(
   17992:	f387 8811 	msr	BASEPRI, r7
   17996:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1799a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1799e:	bf08      	it	eq
   179a0:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   179a4:	d008      	beq.n	179b8 <pend+0x44>
   179a6:	462a      	mov	r2, r5
   179a8:	4623      	mov	r3, r4
   179aa:	f106 0018 	add.w	r0, r6, #24
   179ae:	4903      	ldr	r1, [pc, #12]	; (179bc <pend+0x48>)
}
   179b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   179b4:	f000 b9f4 	b.w	17da0 <z_add_timeout>
   179b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   179bc:	0001c101 	.word	0x0001c101

000179c0 <z_pend_curr>:
{
   179c0:	b510      	push	{r4, lr}
	pending_current = _current;
   179c2:	4b07      	ldr	r3, [pc, #28]	; (179e0 <z_pend_curr+0x20>)
   179c4:	6898      	ldr	r0, [r3, #8]
   179c6:	4b07      	ldr	r3, [pc, #28]	; (179e4 <z_pend_curr+0x24>)
{
   179c8:	460c      	mov	r4, r1
	pending_current = _current;
   179ca:	6018      	str	r0, [r3, #0]
{
   179cc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   179ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   179d2:	f7ff ffcf 	bl	17974 <pend>
   179d6:	4620      	mov	r0, r4
}
   179d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   179dc:	f7eb bbd0 	b.w	3180 <arch_swap>
   179e0:	20002748 	.word	0x20002748
   179e4:	20002778 	.word	0x20002778

000179e8 <z_impl_k_thread_suspend>:
{
   179e8:	b570      	push	{r4, r5, r6, lr}
   179ea:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   179ec:	3018      	adds	r0, #24
   179ee:	f004 fc18 	bl	1c222 <z_abort_timeout>
	__asm__ volatile(
   179f2:	f04f 0320 	mov.w	r3, #32
   179f6:	f3ef 8611 	mrs	r6, BASEPRI
   179fa:	f383 8812 	msr	BASEPRI_MAX, r3
   179fe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   17a02:	f994 200d 	ldrsb.w	r2, [r4, #13]
   17a06:	7b63      	ldrb	r3, [r4, #13]
   17a08:	2a00      	cmp	r2, #0
   17a0a:	da05      	bge.n	17a18 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17a10:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17a12:	4620      	mov	r0, r4
   17a14:	f004 fb19 	bl	1c04a <sys_dlist_remove>
		update_cache(thread == _current);
   17a18:	4d0b      	ldr	r5, [pc, #44]	; (17a48 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17a1a:	7b63      	ldrb	r3, [r4, #13]
   17a1c:	68a8      	ldr	r0, [r5, #8]
   17a1e:	f043 0310 	orr.w	r3, r3, #16
   17a22:	7363      	strb	r3, [r4, #13]
   17a24:	1b03      	subs	r3, r0, r4
   17a26:	4258      	negs	r0, r3
   17a28:	4158      	adcs	r0, r3
   17a2a:	f7ff fe9d 	bl	17768 <update_cache>
	__asm__ volatile(
   17a2e:	f386 8811 	msr	BASEPRI, r6
   17a32:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   17a36:	68ab      	ldr	r3, [r5, #8]
   17a38:	42a3      	cmp	r3, r4
   17a3a:	d103      	bne.n	17a44 <z_impl_k_thread_suspend+0x5c>
}
   17a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   17a40:	f004 bb3e 	b.w	1c0c0 <z_reschedule_unlocked>
}
   17a44:	bd70      	pop	{r4, r5, r6, pc}
   17a46:	bf00      	nop
   17a48:	20002748 	.word	0x20002748

00017a4c <k_sched_unlock>:
{
   17a4c:	b510      	push	{r4, lr}
	__asm__ volatile(
   17a4e:	f04f 0320 	mov.w	r3, #32
   17a52:	f3ef 8411 	mrs	r4, BASEPRI
   17a56:	f383 8812 	msr	BASEPRI_MAX, r3
   17a5a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   17a5e:	4b08      	ldr	r3, [pc, #32]	; (17a80 <k_sched_unlock+0x34>)
   17a60:	689a      	ldr	r2, [r3, #8]
   17a62:	7bd3      	ldrb	r3, [r2, #15]
   17a64:	3301      	adds	r3, #1
   17a66:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   17a68:	2000      	movs	r0, #0
   17a6a:	f7ff fe7d 	bl	17768 <update_cache>
	__asm__ volatile(
   17a6e:	f384 8811 	msr	BASEPRI, r4
   17a72:	f3bf 8f6f 	isb	sy
}
   17a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   17a7a:	f004 bb21 	b.w	1c0c0 <z_reschedule_unlocked>
   17a7e:	bf00      	nop
   17a80:	20002748 	.word	0x20002748

00017a84 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   17a84:	4b04      	ldr	r3, [pc, #16]	; (17a98 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   17a86:	2100      	movs	r1, #0
   17a88:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   17a8c:	e9c3 2208 	strd	r2, r2, [r3, #32]
   17a90:	4608      	mov	r0, r1
   17a92:	f7ff be13 	b.w	176bc <k_sched_time_slice_set>
   17a96:	bf00      	nop
   17a98:	20002748 	.word	0x20002748

00017a9c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   17a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   17a9e:	f04f 0320 	mov.w	r3, #32
   17aa2:	f3ef 8511 	mrs	r5, BASEPRI
   17aa6:	f383 8812 	msr	BASEPRI_MAX, r3
   17aaa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   17aae:	491a      	ldr	r1, [pc, #104]	; (17b18 <z_impl_k_yield+0x7c>)
   17ab0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17ab2:	7b43      	ldrb	r3, [r0, #13]
   17ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17ab8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17aba:	f004 fac6 	bl	1c04a <sys_dlist_remove>
	}
	queue_thread(_current);
   17abe:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   17ac0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   17ac2:	4608      	mov	r0, r1
   17ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17ac8:	735a      	strb	r2, [r3, #13]
   17aca:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17ace:	4282      	cmp	r2, r0
   17ad0:	d01c      	beq.n	17b0c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17ad2:	b1da      	cbz	r2, 17b0c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   17ad4:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   17ad6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   17ada:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   17ade:	42a6      	cmp	r6, r4
   17ae0:	d00f      	beq.n	17b02 <z_impl_k_yield+0x66>
		return b2 - b1;
   17ae2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   17ae4:	2c00      	cmp	r4, #0
   17ae6:	dd0c      	ble.n	17b02 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   17ae8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   17aea:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   17aee:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   17af0:	6053      	str	r3, [r2, #4]
	update_cache(1);
   17af2:	2001      	movs	r0, #1
   17af4:	f7ff fe38 	bl	17768 <update_cache>
   17af8:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   17afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   17afe:	f7eb bb3f 	b.w	3180 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   17b02:	42ba      	cmp	r2, r7
   17b04:	d002      	beq.n	17b0c <z_impl_k_yield+0x70>
   17b06:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17b08:	2a00      	cmp	r2, #0
   17b0a:	d1e6      	bne.n	17ada <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   17b0c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   17b0e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   17b12:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17b14:	624b      	str	r3, [r1, #36]	; 0x24
}
   17b16:	e7ec      	b.n	17af2 <z_impl_k_yield+0x56>
   17b18:	20002748 	.word	0x20002748

00017b1c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   17b1c:	ea50 0301 	orrs.w	r3, r0, r1
{
   17b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b24:	4605      	mov	r5, r0
   17b26:	460e      	mov	r6, r1
	if (ticks == 0) {
   17b28:	d103      	bne.n	17b32 <z_tick_sleep+0x16>
	z_impl_k_yield();
   17b2a:	f7ff ffb7 	bl	17a9c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   17b2e:	2000      	movs	r0, #0
   17b30:	e033      	b.n	17b9a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   17b32:	f06f 0401 	mvn.w	r4, #1
   17b36:	1a24      	subs	r4, r4, r0
   17b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17b3c:	eb63 0301 	sbc.w	r3, r3, r1
   17b40:	2c01      	cmp	r4, #1
   17b42:	f173 0300 	sbcs.w	r3, r3, #0
   17b46:	da02      	bge.n	17b4e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   17b48:	f004 fbab 	bl	1c2a2 <sys_clock_tick_get_32>
   17b4c:	1944      	adds	r4, r0, r5
   17b4e:	f04f 0320 	mov.w	r3, #32
   17b52:	f3ef 8811 	mrs	r8, BASEPRI
   17b56:	f383 8812 	msr	BASEPRI_MAX, r3
   17b5a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   17b5e:	4f10      	ldr	r7, [pc, #64]	; (17ba0 <z_tick_sleep+0x84>)
   17b60:	4b10      	ldr	r3, [pc, #64]	; (17ba4 <z_tick_sleep+0x88>)
   17b62:	68b8      	ldr	r0, [r7, #8]
   17b64:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   17b66:	f7ff feed 	bl	17944 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   17b6a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   17b6c:	490e      	ldr	r1, [pc, #56]	; (17ba8 <z_tick_sleep+0x8c>)
   17b6e:	462a      	mov	r2, r5
   17b70:	4633      	mov	r3, r6
   17b72:	3018      	adds	r0, #24
   17b74:	f000 f914 	bl	17da0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   17b78:	68ba      	ldr	r2, [r7, #8]
   17b7a:	7b53      	ldrb	r3, [r2, #13]
   17b7c:	f043 0310 	orr.w	r3, r3, #16
   17b80:	7353      	strb	r3, [r2, #13]
   17b82:	4640      	mov	r0, r8
   17b84:	f7eb fafc 	bl	3180 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   17b88:	f004 fb8b 	bl	1c2a2 <sys_clock_tick_get_32>
   17b8c:	1a20      	subs	r0, r4, r0
   17b8e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   17b92:	2801      	cmp	r0, #1
   17b94:	f173 0300 	sbcs.w	r3, r3, #0
   17b98:	dbc9      	blt.n	17b2e <z_tick_sleep+0x12>
}
   17b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b9e:	bf00      	nop
   17ba0:	20002748 	.word	0x20002748
   17ba4:	20002778 	.word	0x20002778
   17ba8:	0001c101 	.word	0x0001c101

00017bac <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17bac:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   17bb0:	bf08      	it	eq
   17bb2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   17bb6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17bb8:	d106      	bne.n	17bc8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   17bba:	4b08      	ldr	r3, [pc, #32]	; (17bdc <z_impl_k_sleep+0x30>)
   17bbc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   17bbe:	f7ff ff13 	bl	179e8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   17bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   17bc6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   17bc8:	f7ff ffa8 	bl	17b1c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   17bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17bd0:	fb80 0303 	smull	r0, r3, r0, r3
   17bd4:	0bc0      	lsrs	r0, r0, #15
   17bd6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   17bda:	e7f4      	b.n	17bc6 <z_impl_k_sleep+0x1a>
   17bdc:	20002748 	.word	0x20002748

00017be0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   17be0:	4b01      	ldr	r3, [pc, #4]	; (17be8 <z_impl_z_current_get+0x8>)
   17be2:	6898      	ldr	r0, [r3, #8]
   17be4:	4770      	bx	lr
   17be6:	bf00      	nop
   17be8:	20002748 	.word	0x20002748

00017bec <z_impl_k_is_preempt_thread>:
   17bec:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   17bf0:	b93b      	cbnz	r3, 17c02 <z_impl_k_is_preempt_thread+0x16>
   17bf2:	4b05      	ldr	r3, [pc, #20]	; (17c08 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   17bf4:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   17bf6:	89d8      	ldrh	r0, [r3, #14]
   17bf8:	287f      	cmp	r0, #127	; 0x7f
   17bfa:	bf8c      	ite	hi
   17bfc:	2000      	movhi	r0, #0
   17bfe:	2001      	movls	r0, #1
   17c00:	4770      	bx	lr
   17c02:	2000      	movs	r0, #0
}
   17c04:	4770      	bx	lr
   17c06:	bf00      	nop
   17c08:	20002748 	.word	0x20002748

00017c0c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   17c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c10:	4604      	mov	r4, r0
   17c12:	f04f 0320 	mov.w	r3, #32
   17c16:	f3ef 8611 	mrs	r6, BASEPRI
   17c1a:	f383 8812 	msr	BASEPRI_MAX, r3
   17c1e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   17c22:	7b43      	ldrb	r3, [r0, #13]
   17c24:	071a      	lsls	r2, r3, #28
   17c26:	d505      	bpl.n	17c34 <z_thread_abort+0x28>
	__asm__ volatile(
   17c28:	f386 8811 	msr	BASEPRI, r6
   17c2c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   17c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   17c34:	f023 0220 	bic.w	r2, r3, #32
   17c38:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   17c3c:	09d2      	lsrs	r2, r2, #7
   17c3e:	d120      	bne.n	17c82 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   17c40:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   17c42:	68a3      	ldr	r3, [r4, #8]
   17c44:	b113      	cbz	r3, 17c4c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   17c46:	4620      	mov	r0, r4
   17c48:	f004 fa07 	bl	1c05a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   17c4c:	f104 0018 	add.w	r0, r4, #24
   17c50:	f004 fae7 	bl	1c222 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   17c54:	f104 0758 	add.w	r7, r4, #88	; 0x58
   17c58:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   17c5c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17c5e:	42bd      	cmp	r5, r7
   17c60:	d000      	beq.n	17c64 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   17c62:	b9b5      	cbnz	r5, 17c92 <z_thread_abort+0x86>
		update_cache(1);
   17c64:	2001      	movs	r0, #1
   17c66:	f7ff fd7f 	bl	17768 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   17c6a:	4b10      	ldr	r3, [pc, #64]	; (17cac <z_thread_abort+0xa0>)
   17c6c:	689b      	ldr	r3, [r3, #8]
   17c6e:	42a3      	cmp	r3, r4
   17c70:	d1da      	bne.n	17c28 <z_thread_abort+0x1c>
   17c72:	f3ef 8305 	mrs	r3, IPSR
   17c76:	2b00      	cmp	r3, #0
   17c78:	d1d6      	bne.n	17c28 <z_thread_abort+0x1c>
   17c7a:	4630      	mov	r0, r6
   17c7c:	f7eb fa80 	bl	3180 <arch_swap>
	return ret;
   17c80:	e7d2      	b.n	17c28 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   17c82:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   17c86:	f043 0308 	orr.w	r3, r3, #8
   17c8a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   17c8c:	f004 f9dd 	bl	1c04a <sys_dlist_remove>
}
   17c90:	e7d7      	b.n	17c42 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   17c92:	4628      	mov	r0, r5
   17c94:	f004 f9e1 	bl	1c05a <unpend_thread_no_timeout>
   17c98:	f105 0018 	add.w	r0, r5, #24
   17c9c:	f004 fac1 	bl	1c222 <z_abort_timeout>
   17ca0:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   17ca4:	4628      	mov	r0, r5
   17ca6:	f7ff fdf9 	bl	1789c <ready_thread>
   17caa:	e7d7      	b.n	17c5c <z_thread_abort+0x50>
   17cac:	20002748 	.word	0x20002748

00017cb0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   17cb0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   17cb2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   17cb6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   17cb8:	e9cd 6700 	strd	r6, r7, [sp]
   17cbc:	f7ff fe80 	bl	179c0 <z_pend_curr>

	if (data != NULL) {
   17cc0:	b11c      	cbz	r4, 17cca <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   17cc2:	4b03      	ldr	r3, [pc, #12]	; (17cd0 <z_sched_wait+0x20>)
   17cc4:	689b      	ldr	r3, [r3, #8]
   17cc6:	695b      	ldr	r3, [r3, #20]
   17cc8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   17cca:	b002      	add	sp, #8
   17ccc:	bdd0      	pop	{r4, r6, r7, pc}
   17cce:	bf00      	nop
   17cd0:	20002748 	.word	0x20002748

00017cd4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   17cd4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   17cd6:	4806      	ldr	r0, [pc, #24]	; (17cf0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   17cd8:	4a06      	ldr	r2, [pc, #24]	; (17cf4 <z_data_copy+0x20>)
   17cda:	4907      	ldr	r1, [pc, #28]	; (17cf8 <z_data_copy+0x24>)
   17cdc:	1a12      	subs	r2, r2, r0
   17cde:	f001 f88f 	bl	18e00 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   17ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   17ce6:	4a05      	ldr	r2, [pc, #20]	; (17cfc <z_data_copy+0x28>)
   17ce8:	4905      	ldr	r1, [pc, #20]	; (17d00 <z_data_copy+0x2c>)
   17cea:	4806      	ldr	r0, [pc, #24]	; (17d04 <z_data_copy+0x30>)
   17cec:	f001 b888 	b.w	18e00 <memcpy>
   17cf0:	20000000 	.word	0x20000000
   17cf4:	200009d4 	.word	0x200009d4
   17cf8:	0001e2d4 	.word	0x0001e2d4
   17cfc:	00000000 	.word	0x00000000
   17d00:	0001e2d4 	.word	0x0001e2d4
   17d04:	20000000 	.word	0x20000000

00017d08 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   17d08:	4b03      	ldr	r3, [pc, #12]	; (17d18 <elapsed+0x10>)
   17d0a:	681b      	ldr	r3, [r3, #0]
   17d0c:	b90b      	cbnz	r3, 17d12 <elapsed+0xa>
   17d0e:	f7fd bf1f 	b.w	15b50 <sys_clock_elapsed>
}
   17d12:	2000      	movs	r0, #0
   17d14:	4770      	bx	lr
   17d16:	bf00      	nop
   17d18:	20002784 	.word	0x20002784

00017d1c <next_timeout>:
	return list->head == list;
   17d1c:	4b11      	ldr	r3, [pc, #68]	; (17d64 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   17d1e:	b510      	push	{r4, lr}
   17d20:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17d22:	429c      	cmp	r4, r3
   17d24:	bf08      	it	eq
   17d26:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   17d28:	f7ff ffee 	bl	17d08 <elapsed>
   17d2c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   17d2e:	b16c      	cbz	r4, 17d4c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   17d30:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   17d34:	1ac0      	subs	r0, r0, r3
   17d36:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   17d3a:	2801      	cmp	r0, #1
   17d3c:	f173 0200 	sbcs.w	r2, r3, #0
   17d40:	db0d      	blt.n	17d5e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   17d42:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   17d46:	f173 0300 	sbcs.w	r3, r3, #0
   17d4a:	db01      	blt.n	17d50 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   17d4c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   17d50:	4b05      	ldr	r3, [pc, #20]	; (17d68 <next_timeout+0x4c>)
   17d52:	691b      	ldr	r3, [r3, #16]
   17d54:	b113      	cbz	r3, 17d5c <next_timeout+0x40>
   17d56:	4298      	cmp	r0, r3
   17d58:	bfa8      	it	ge
   17d5a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   17d5c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   17d5e:	2000      	movs	r0, #0
   17d60:	e7f6      	b.n	17d50 <next_timeout+0x34>
   17d62:	bf00      	nop
   17d64:	20000770 	.word	0x20000770
   17d68:	20002748 	.word	0x20002748

00017d6c <remove_timeout>:
{
   17d6c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   17d6e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   17d70:	b168      	cbz	r0, 17d8e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   17d72:	4a0a      	ldr	r2, [pc, #40]	; (17d9c <remove_timeout+0x30>)
   17d74:	6852      	ldr	r2, [r2, #4]
   17d76:	4290      	cmp	r0, r2
   17d78:	d009      	beq.n	17d8e <remove_timeout+0x22>
	if (next(t) != NULL) {
   17d7a:	b143      	cbz	r3, 17d8e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   17d7c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   17d80:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   17d84:	1912      	adds	r2, r2, r4
   17d86:	eb41 0105 	adc.w	r1, r1, r5
   17d8a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   17d8e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   17d90:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   17d92:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17d94:	2300      	movs	r3, #0
	node->prev = NULL;
   17d96:	e9c0 3300 	strd	r3, r3, [r0]
}
   17d9a:	bd30      	pop	{r4, r5, pc}
   17d9c:	20000770 	.word	0x20000770

00017da0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   17da4:	bf08      	it	eq
   17da6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   17daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17dac:	4604      	mov	r4, r0
   17dae:	461f      	mov	r7, r3
   17db0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   17db2:	d067      	beq.n	17e84 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   17db4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   17db6:	f04f 0320 	mov.w	r3, #32
   17dba:	f3ef 8611 	mrs	r6, BASEPRI
   17dbe:	f383 8812 	msr	BASEPRI_MAX, r3
   17dc2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   17dc6:	f06f 0201 	mvn.w	r2, #1
   17dca:	1b53      	subs	r3, r2, r5
   17dcc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   17dd0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   17dd4:	2b00      	cmp	r3, #0
   17dd6:	db1b      	blt.n	17e10 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   17dd8:	4b2b      	ldr	r3, [pc, #172]	; (17e88 <z_add_timeout+0xe8>)
   17dda:	e9d3 1300 	ldrd	r1, r3, [r3]
   17dde:	1a52      	subs	r2, r2, r1
   17de0:	eb6c 0303 	sbc.w	r3, ip, r3
   17de4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   17de6:	eb63 0307 	sbc.w	r3, r3, r7
   17dea:	2d01      	cmp	r5, #1
   17dec:	f173 0200 	sbcs.w	r2, r3, #0
   17df0:	bfbc      	itt	lt
   17df2:	2501      	movlt	r5, #1
   17df4:	2300      	movlt	r3, #0
   17df6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   17dfa:	4824      	ldr	r0, [pc, #144]	; (17e8c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   17dfc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17e00:	4283      	cmp	r3, r0
   17e02:	d118      	bne.n	17e36 <z_add_timeout+0x96>
	node->prev = tail;
   17e04:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   17e08:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   17e0c:	6044      	str	r4, [r0, #4]
}
   17e0e:	e026      	b.n	17e5e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   17e10:	f7ff ff7a 	bl	17d08 <elapsed>
   17e14:	3501      	adds	r5, #1
   17e16:	f147 0700 	adc.w	r7, r7, #0
   17e1a:	182d      	adds	r5, r5, r0
   17e1c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   17e20:	e9c4 5704 	strd	r5, r7, [r4, #16]
   17e24:	e7e9      	b.n	17dfa <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   17e26:	1a52      	subs	r2, r2, r1
   17e28:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   17e2c:	459c      	cmp	ip, r3
   17e2e:	e9c4 2504 	strd	r2, r5, [r4, #16]
   17e32:	d0e7      	beq.n	17e04 <z_add_timeout+0x64>
   17e34:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   17e36:	2b00      	cmp	r3, #0
   17e38:	d0e4      	beq.n	17e04 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   17e3a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   17e3e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   17e42:	428a      	cmp	r2, r1
   17e44:	eb75 0e07 	sbcs.w	lr, r5, r7
   17e48:	daed      	bge.n	17e26 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   17e4a:	1a8a      	subs	r2, r1, r2
   17e4c:	eb67 0505 	sbc.w	r5, r7, r5
   17e50:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   17e54:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17e56:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   17e5a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17e5c:	605c      	str	r4, [r3, #4]
	return list->head == list;
   17e5e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17e60:	4283      	cmp	r3, r0
   17e62:	d00b      	beq.n	17e7c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   17e64:	429c      	cmp	r4, r3
   17e66:	d109      	bne.n	17e7c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   17e68:	f7ff ff58 	bl	17d1c <next_timeout>

			if (next_time == 0 ||
   17e6c:	b118      	cbz	r0, 17e76 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   17e6e:	4b08      	ldr	r3, [pc, #32]	; (17e90 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   17e70:	691b      	ldr	r3, [r3, #16]
   17e72:	4283      	cmp	r3, r0
   17e74:	d002      	beq.n	17e7c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   17e76:	2100      	movs	r1, #0
   17e78:	f7fd fe38 	bl	15aec <sys_clock_set_timeout>
	__asm__ volatile(
   17e7c:	f386 8811 	msr	BASEPRI, r6
   17e80:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   17e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17e86:	bf00      	nop
   17e88:	200013a8 	.word	0x200013a8
   17e8c:	20000770 	.word	0x20000770
   17e90:	20002748 	.word	0x20002748

00017e94 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   17e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17e98:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   17e9a:	f7ff fcbf 	bl	1781c <z_time_slice>
	__asm__ volatile(
   17e9e:	f04f 0320 	mov.w	r3, #32
   17ea2:	f3ef 8411 	mrs	r4, BASEPRI
   17ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   17eaa:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   17eae:	4e24      	ldr	r6, [pc, #144]	; (17f40 <sys_clock_announce+0xac>)
	return list->head == list;
   17eb0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 17f44 <sys_clock_announce+0xb0>
   17eb4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   17eb6:	4d24      	ldr	r5, [pc, #144]	; (17f48 <sys_clock_announce+0xb4>)
   17eb8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   17ebc:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17ebe:	4540      	cmp	r0, r8
		curr_tick += dt;
   17ec0:	e9d5 1e00 	ldrd	r1, lr, [r5]
   17ec4:	ea4f 77e2 	mov.w	r7, r2, asr #31
   17ec8:	d00b      	beq.n	17ee2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   17eca:	b150      	cbz	r0, 17ee2 <sys_clock_announce+0x4e>
   17ecc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   17ed0:	429a      	cmp	r2, r3
   17ed2:	eb77 090c 	sbcs.w	r9, r7, ip
   17ed6:	da16      	bge.n	17f06 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   17ed8:	1a9b      	subs	r3, r3, r2
   17eda:	eb6c 0c07 	sbc.w	ip, ip, r7
   17ede:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   17ee2:	1852      	adds	r2, r2, r1
   17ee4:	eb4e 0707 	adc.w	r7, lr, r7
   17ee8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   17eec:	2500      	movs	r5, #0
   17eee:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   17ef0:	f7ff ff14 	bl	17d1c <next_timeout>
   17ef4:	4629      	mov	r1, r5
   17ef6:	f7fd fdf9 	bl	15aec <sys_clock_set_timeout>
	__asm__ volatile(
   17efa:	f384 8811 	msr	BASEPRI, r4
   17efe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   17f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   17f06:	1859      	adds	r1, r3, r1
   17f08:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   17f0c:	1ad3      	subs	r3, r2, r3
   17f0e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   17f10:	2200      	movs	r2, #0
   17f12:	2300      	movs	r3, #0
   17f14:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   17f18:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   17f1c:	f7ff ff26 	bl	17d6c <remove_timeout>
   17f20:	f384 8811 	msr	BASEPRI, r4
   17f24:	f3bf 8f6f 	isb	sy
		t->fn(t);
   17f28:	6883      	ldr	r3, [r0, #8]
   17f2a:	4798      	blx	r3
	__asm__ volatile(
   17f2c:	f04f 0320 	mov.w	r3, #32
   17f30:	f3ef 8411 	mrs	r4, BASEPRI
   17f34:	f383 8812 	msr	BASEPRI_MAX, r3
   17f38:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   17f3c:	e7bc      	b.n	17eb8 <sys_clock_announce+0x24>
   17f3e:	bf00      	nop
   17f40:	20002784 	.word	0x20002784
   17f44:	20000770 	.word	0x20000770
   17f48:	200013a8 	.word	0x200013a8

00017f4c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   17f4c:	b510      	push	{r4, lr}
   17f4e:	f04f 0320 	mov.w	r3, #32
   17f52:	f3ef 8411 	mrs	r4, BASEPRI
   17f56:	f383 8812 	msr	BASEPRI_MAX, r3
   17f5a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   17f5e:	f7fd fdf7 	bl	15b50 <sys_clock_elapsed>
   17f62:	4a05      	ldr	r2, [pc, #20]	; (17f78 <sys_clock_tick_get+0x2c>)
   17f64:	e9d2 3100 	ldrd	r3, r1, [r2]
   17f68:	18c0      	adds	r0, r0, r3
   17f6a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   17f6e:	f384 8811 	msr	BASEPRI, r4
   17f72:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   17f76:	bd10      	pop	{r4, pc}
   17f78:	200013a8 	.word	0x200013a8

00017f7c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   17f7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17f80:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   17f82:	4b29      	ldr	r3, [pc, #164]	; (18028 <z_impl_k_poll+0xac>)
   17f84:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   17f86:	2301      	movs	r3, #1
   17f88:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   17f8c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   17f90:	ea52 0305 	orrs.w	r3, r2, r5
{
   17f94:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   17f96:	bf0c      	ite	eq
   17f98:	2301      	moveq	r3, #1
   17f9a:	2300      	movne	r3, #0
   17f9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   17fa0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   17fa2:	f004 f9e2 	bl	1c36a <register_events>
   17fa6:	4681      	mov	r9, r0
	__asm__ volatile(
   17fa8:	f04f 0320 	mov.w	r3, #32
   17fac:	f3ef 8a11 	mrs	sl, BASEPRI
   17fb0:	f383 8812 	msr	BASEPRI_MAX, r3
   17fb4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   17fb8:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   17fbc:	b964      	cbnz	r4, 17fd8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   17fbe:	4601      	mov	r1, r0
   17fc0:	4652      	mov	r2, sl
   17fc2:	4640      	mov	r0, r8
   17fc4:	f004 faa2 	bl	1c50c <clear_event_registrations>
	__asm__ volatile(
   17fc8:	f38a 8811 	msr	BASEPRI, sl
   17fcc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   17fd0:	4620      	mov	r0, r4
   17fd2:	b002      	add	sp, #8
   17fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   17fd8:	2300      	movs	r3, #0
   17fda:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17fde:	ea56 0305 	orrs.w	r3, r6, r5
   17fe2:	d106      	bne.n	17ff2 <z_impl_k_poll+0x76>
   17fe4:	f38a 8811 	msr	BASEPRI, sl
   17fe8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   17fec:	f06f 040a 	mvn.w	r4, #10
   17ff0:	e7ee      	b.n	17fd0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   17ff2:	e9cd 6500 	strd	r6, r5, [sp]
   17ff6:	4a0d      	ldr	r2, [pc, #52]	; (1802c <z_impl_k_poll+0xb0>)
   17ff8:	480d      	ldr	r0, [pc, #52]	; (18030 <z_impl_k_poll+0xb4>)
   17ffa:	4651      	mov	r1, sl
   17ffc:	f7ff fce0 	bl	179c0 <z_pend_curr>
   18000:	4604      	mov	r4, r0
	__asm__ volatile(
   18002:	f04f 0320 	mov.w	r3, #32
   18006:	f3ef 8511 	mrs	r5, BASEPRI
   1800a:	f383 8812 	msr	BASEPRI_MAX, r3
   1800e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   18012:	462a      	mov	r2, r5
   18014:	4649      	mov	r1, r9
   18016:	4640      	mov	r0, r8
   18018:	f004 fa78 	bl	1c50c <clear_event_registrations>
	__asm__ volatile(
   1801c:	f385 8811 	msr	BASEPRI, r5
   18020:	f3bf 8f6f 	isb	sy
	return swap_rc;
   18024:	e7d4      	b.n	17fd0 <z_impl_k_poll+0x54>
   18026:	bf00      	nop
   18028:	20002748 	.word	0x20002748
   1802c:	20000778 	.word	0x20000778
   18030:	20002bf7 	.word	0x20002bf7

00018034 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   18034:	b538      	push	{r3, r4, r5, lr}
   18036:	4603      	mov	r3, r0
	__asm__ volatile(
   18038:	f04f 0220 	mov.w	r2, #32
   1803c:	f3ef 8511 	mrs	r5, BASEPRI
   18040:	f382 8812 	msr	BASEPRI_MAX, r2
   18044:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   18048:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1804a:	2101      	movs	r1, #1
   1804c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1804e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   18050:	4283      	cmp	r3, r0
   18052:	d106      	bne.n	18062 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   18054:	f385 8811 	msr	BASEPRI, r5
   18058:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1805c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1805e:	4620      	mov	r0, r4
   18060:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   18062:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   18066:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   18068:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1806a:	2300      	movs	r3, #0
	node->prev = NULL;
   1806c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18070:	f004 f9f2 	bl	1c458 <signal_poll_event>
	z_reschedule(&lock, key);
   18074:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   18076:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   18078:	4801      	ldr	r0, [pc, #4]	; (18080 <z_impl_k_poll_signal_raise+0x4c>)
   1807a:	f7ff fb4f 	bl	1771c <z_reschedule>
	return rc;
   1807e:	e7ee      	b.n	1805e <z_impl_k_poll_signal_raise+0x2a>
   18080:	20002bf7 	.word	0x20002bf7

00018084 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   18084:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18086:	4606      	mov	r6, r0
   18088:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1808a:	f003 fe0d 	bl	1bca8 <k_is_in_isr>
   1808e:	b978      	cbnz	r0, 180b0 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   18090:	4b0b      	ldr	r3, [pc, #44]	; (180c0 <z_thread_aligned_alloc+0x3c>)
   18092:	689b      	ldr	r3, [r3, #8]
   18094:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   18096:	b17c      	cbz	r4, 180b8 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   18098:	1d2a      	adds	r2, r5, #4
   1809a:	d209      	bcs.n	180b0 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1809c:	2000      	movs	r0, #0
   1809e:	2100      	movs	r1, #0
   180a0:	e9cd 0100 	strd	r0, r1, [sp]
   180a4:	f046 0104 	orr.w	r1, r6, #4
   180a8:	4620      	mov	r0, r4
   180aa:	f003 fd76 	bl	1bb9a <k_heap_aligned_alloc>
	if (mem == NULL) {
   180ae:	b908      	cbnz	r0, 180b4 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   180b0:	2400      	movs	r4, #0
	}

	return ret;
   180b2:	e001      	b.n	180b8 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   180b4:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   180b6:	1d04      	adds	r4, r0, #4
}
   180b8:	4620      	mov	r0, r4
   180ba:	b002      	add	sp, #8
   180bc:	bd70      	pop	{r4, r5, r6, pc}
   180be:	bf00      	nop
   180c0:	20002748 	.word	0x20002748

000180c4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   180c4:	4a02      	ldr	r2, [pc, #8]	; (180d0 <boot_banner+0xc>)
   180c6:	4903      	ldr	r1, [pc, #12]	; (180d4 <boot_banner+0x10>)
   180c8:	4803      	ldr	r0, [pc, #12]	; (180d8 <boot_banner+0x14>)
   180ca:	f000 b84d 	b.w	18168 <printk>
   180ce:	bf00      	nop
   180d0:	0001e093 	.word	0x0001e093
   180d4:	0001e28f 	.word	0x0001e28f
   180d8:	0001e2ab 	.word	0x0001e2ab

000180dc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   180dc:	4770      	bx	lr

000180de <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   180de:	6883      	ldr	r3, [r0, #8]
   180e0:	691b      	ldr	r3, [r3, #16]
   180e2:	4718      	bx	r3

000180e4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   180e4:	4603      	mov	r3, r0
   180e6:	b140      	cbz	r0, 180fa <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   180e8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   180ea:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   180ee:	2a02      	cmp	r2, #2
   180f0:	d006      	beq.n	18100 <sys_notify_validate+0x1c>
   180f2:	2a03      	cmp	r2, #3
   180f4:	d004      	beq.n	18100 <sys_notify_validate+0x1c>
   180f6:	2a01      	cmp	r2, #1
   180f8:	d005      	beq.n	18106 <sys_notify_validate+0x22>
		return -EINVAL;
   180fa:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   180fe:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   18100:	681a      	ldr	r2, [r3, #0]
   18102:	2a00      	cmp	r2, #0
   18104:	d0f9      	beq.n	180fa <sys_notify_validate+0x16>
		notify->result = 0;
   18106:	2000      	movs	r0, #0
   18108:	6098      	str	r0, [r3, #8]
   1810a:	4770      	bx	lr

0001810c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1810c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1810e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   18112:	2a02      	cmp	r2, #2
{
   18114:	b510      	push	{r4, lr}
   18116:	4603      	mov	r3, r0
	notify->result = res;
   18118:	6081      	str	r1, [r0, #8]
	switch (method) {
   1811a:	d00a      	beq.n	18132 <sys_notify_finalize+0x26>
   1811c:	2a03      	cmp	r2, #3
   1811e:	d10b      	bne.n	18138 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   18120:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   18122:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   18124:	2200      	movs	r2, #0
   18126:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   18128:	b108      	cbz	r0, 1812e <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1812a:	f7ff ff83 	bl	18034 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1812e:	4620      	mov	r0, r4
   18130:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   18132:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   18134:	2400      	movs	r4, #0
		break;
   18136:	e7f5      	b.n	18124 <sys_notify_finalize+0x18>
	switch (method) {
   18138:	2400      	movs	r4, #0
   1813a:	4620      	mov	r0, r4
   1813c:	e7f2      	b.n	18124 <sys_notify_finalize+0x18>

0001813e <arch_printk_char_out>:
}
   1813e:	2000      	movs	r0, #0
   18140:	4770      	bx	lr

00018142 <str_out>:
{
   18142:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   18144:	688a      	ldr	r2, [r1, #8]
   18146:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   18148:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1814a:	b114      	cbz	r4, 18152 <str_out+0x10>
   1814c:	684b      	ldr	r3, [r1, #4]
   1814e:	4293      	cmp	r3, r2
   18150:	dc01      	bgt.n	18156 <str_out+0x14>
		ctx->count++;
   18152:	608d      	str	r5, [r1, #8]
}
   18154:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   18156:	3b01      	subs	r3, #1
   18158:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1815a:	bf08      	it	eq
   1815c:	2200      	moveq	r2, #0
   1815e:	608d      	str	r5, [r1, #8]
   18160:	bf0c      	ite	eq
   18162:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   18164:	54a0      	strbne	r0, [r4, r2]
   18166:	e7f5      	b.n	18154 <str_out+0x12>

00018168 <printk>:
{
   18168:	b40f      	push	{r0, r1, r2, r3}
   1816a:	b507      	push	{r0, r1, r2, lr}
   1816c:	a904      	add	r1, sp, #16
   1816e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   18172:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   18174:	f7e9 fe1c 	bl	1db0 <vprintk>
}
   18178:	b003      	add	sp, #12
   1817a:	f85d eb04 	ldr.w	lr, [sp], #4
   1817e:	b004      	add	sp, #16
   18180:	4770      	bx	lr

00018182 <snprintk>:
{
   18182:	b40c      	push	{r2, r3}
   18184:	b507      	push	{r0, r1, r2, lr}
   18186:	ab04      	add	r3, sp, #16
   18188:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1818c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1818e:	f7e9 fe1d 	bl	1dcc <vsnprintk>
}
   18192:	b003      	add	sp, #12
   18194:	f85d eb04 	ldr.w	lr, [sp], #4
   18198:	b002      	add	sp, #8
   1819a:	4770      	bx	lr

0001819c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1819c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1819e:	f013 0307 	ands.w	r3, r3, #7
   181a2:	d105      	bne.n	181b0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   181a4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   181a6:	2b00      	cmp	r3, #0
   181a8:	bf0c      	ite	eq
   181aa:	2000      	moveq	r0, #0
   181ac:	2003      	movne	r0, #3
   181ae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   181b0:	2b02      	cmp	r3, #2
   181b2:	d105      	bne.n	181c0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   181b4:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   181b6:	2b00      	cmp	r3, #0
   181b8:	bf14      	ite	ne
   181ba:	2000      	movne	r0, #0
   181bc:	2004      	moveq	r0, #4
   181be:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   181c0:	2b01      	cmp	r3, #1
   181c2:	d105      	bne.n	181d0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   181c4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   181c6:	2b00      	cmp	r3, #0
   181c8:	bf0c      	ite	eq
   181ca:	2000      	moveq	r0, #0
   181cc:	2005      	movne	r0, #5
   181ce:	4770      	bx	lr
	int evt = EVT_NOP;
   181d0:	2000      	movs	r0, #0
}
   181d2:	4770      	bx	lr

000181d4 <notify_one>:
{
   181d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181d8:	460d      	mov	r5, r1
   181da:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   181dc:	4619      	mov	r1, r3
   181de:	1d28      	adds	r0, r5, #4
{
   181e0:	4690      	mov	r8, r2
   181e2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   181e4:	f7ff ff92 	bl	1810c <sys_notify_finalize>
	if (cb) {
   181e8:	4604      	mov	r4, r0
   181ea:	b138      	cbz	r0, 181fc <notify_one+0x28>
		cb(mgr, cli, state, res);
   181ec:	4633      	mov	r3, r6
   181ee:	4642      	mov	r2, r8
   181f0:	4629      	mov	r1, r5
   181f2:	4638      	mov	r0, r7
   181f4:	46a4      	mov	ip, r4
}
   181f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   181fa:	4760      	bx	ip
}
   181fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018200 <transition_complete>:
{
   18200:	b410      	push	{r4}
	__asm__ volatile(
   18202:	f04f 0420 	mov.w	r4, #32
   18206:	f3ef 8211 	mrs	r2, BASEPRI
   1820a:	f384 8812 	msr	BASEPRI_MAX, r4
   1820e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   18212:	6141      	str	r1, [r0, #20]
}
   18214:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   18216:	2101      	movs	r1, #1
   18218:	f7e9 bdec 	b.w	1df4 <process_event>

0001821c <validate_args>:
{
   1821c:	b510      	push	{r4, lr}
   1821e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   18220:	b140      	cbz	r0, 18234 <validate_args+0x18>
   18222:	b139      	cbz	r1, 18234 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   18224:	1d08      	adds	r0, r1, #4
   18226:	f7ff ff5d 	bl	180e4 <sys_notify_validate>
	if ((rv == 0)
   1822a:	b928      	cbnz	r0, 18238 <validate_args+0x1c>
	    && ((cli->notify.flags
   1822c:	68a3      	ldr	r3, [r4, #8]
   1822e:	f033 0303 	bics.w	r3, r3, #3
   18232:	d001      	beq.n	18238 <validate_args+0x1c>
		rv = -EINVAL;
   18234:	f06f 0015 	mvn.w	r0, #21
}
   18238:	bd10      	pop	{r4, pc}

0001823a <onoff_manager_init>:
{
   1823a:	b538      	push	{r3, r4, r5, lr}
   1823c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1823e:	4605      	mov	r5, r0
   18240:	b158      	cbz	r0, 1825a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   18242:	b151      	cbz	r1, 1825a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   18244:	680b      	ldr	r3, [r1, #0]
   18246:	b143      	cbz	r3, 1825a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   18248:	684b      	ldr	r3, [r1, #4]
   1824a:	b133      	cbz	r3, 1825a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1824c:	221c      	movs	r2, #28
   1824e:	2100      	movs	r1, #0
   18250:	f000 fde1 	bl	18e16 <memset>
   18254:	612c      	str	r4, [r5, #16]
	return 0;
   18256:	2000      	movs	r0, #0
}
   18258:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1825a:	f06f 0015 	mvn.w	r0, #21
   1825e:	e7fb      	b.n	18258 <onoff_manager_init+0x1e>

00018260 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   18260:	b570      	push	{r4, r5, r6, lr}
   18262:	4604      	mov	r4, r0
   18264:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   18266:	f7ff ffd9 	bl	1821c <validate_args>

	if (rv < 0) {
   1826a:	1e05      	subs	r5, r0, #0
   1826c:	db31      	blt.n	182d2 <onoff_request+0x72>
   1826e:	f04f 0320 	mov.w	r3, #32
   18272:	f3ef 8111 	mrs	r1, BASEPRI
   18276:	f383 8812 	msr	BASEPRI_MAX, r3
   1827a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1827e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18280:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   18282:	f64f 75ff 	movw	r5, #65535	; 0xffff
   18286:	42ab      	cmp	r3, r5
   18288:	f000 0207 	and.w	r2, r0, #7
   1828c:	d02e      	beq.n	182ec <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1828e:	2a02      	cmp	r2, #2
   18290:	d10e      	bne.n	182b0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   18292:	3301      	adds	r3, #1
   18294:	8363      	strh	r3, [r4, #26]
	rv = state;
   18296:	4615      	mov	r5, r2
		notify = true;
   18298:	2301      	movs	r3, #1
	__asm__ volatile(
   1829a:	f381 8811 	msr	BASEPRI, r1
   1829e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   182a2:	b1b3      	cbz	r3, 182d2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   182a4:	2300      	movs	r3, #0
   182a6:	4631      	mov	r1, r6
   182a8:	4620      	mov	r0, r4
   182aa:	f7ff ff93 	bl	181d4 <notify_one>
   182ae:	e010      	b.n	182d2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   182b0:	0783      	lsls	r3, r0, #30
   182b2:	d001      	beq.n	182b8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   182b4:	2a06      	cmp	r2, #6
   182b6:	d10e      	bne.n	182d6 <onoff_request+0x76>
	parent->next = child;
   182b8:	2300      	movs	r3, #0
   182ba:	6033      	str	r3, [r6, #0]
	return list->tail;
   182bc:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   182be:	b993      	cbnz	r3, 182e6 <onoff_request+0x86>
	list->head = node;
   182c0:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   182c4:	4615      	mov	r5, r2
   182c6:	b962      	cbnz	r2, 182e2 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   182c8:	460a      	mov	r2, r1
   182ca:	4620      	mov	r0, r4
   182cc:	2102      	movs	r1, #2
   182ce:	f7e9 fd91 	bl	1df4 <process_event>
		}
	}

	return rv;
}
   182d2:	4628      	mov	r0, r5
   182d4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   182d6:	2a05      	cmp	r2, #5
   182d8:	bf0c      	ite	eq
   182da:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   182de:	f06f 0504 	mvnne.w	r5, #4
   182e2:	2300      	movs	r3, #0
   182e4:	e7d9      	b.n	1829a <onoff_request+0x3a>
	parent->next = child;
   182e6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   182e8:	6066      	str	r6, [r4, #4]
}
   182ea:	e7eb      	b.n	182c4 <onoff_request+0x64>
		rv = -EAGAIN;
   182ec:	f06f 050a 	mvn.w	r5, #10
   182f0:	e7f7      	b.n	182e2 <onoff_request+0x82>

000182f2 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   182f2:	b510      	push	{r4, lr}
	__asm__ volatile(
   182f4:	f04f 0320 	mov.w	r3, #32
   182f8:	f3ef 8211 	mrs	r2, BASEPRI
   182fc:	f383 8812 	msr	BASEPRI_MAX, r3
   18300:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   18304:	8b04      	ldrh	r4, [r0, #24]
   18306:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1830a:	2c02      	cmp	r4, #2
   1830c:	d00a      	beq.n	18324 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1830e:	2c01      	cmp	r4, #1
   18310:	bf0c      	ite	eq
   18312:	f06f 0004 	mvneq.w	r0, #4
   18316:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1831a:	f382 8811 	msr	BASEPRI, r2
   1831e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   18322:	e008      	b.n	18336 <onoff_release+0x44>
	mgr->refs -= 1U;
   18324:	8b43      	ldrh	r3, [r0, #26]
   18326:	3b01      	subs	r3, #1
   18328:	b29b      	uxth	r3, r3
   1832a:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1832c:	b923      	cbnz	r3, 18338 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1832e:	4621      	mov	r1, r4
   18330:	f7e9 fd60 	bl	1df4 <process_event>
	int rv = state;
   18334:	4620      	mov	r0, r4
}
   18336:	bd10      	pop	{r4, pc}
	int rv = state;
   18338:	4620      	mov	r0, r4
   1833a:	e7ee      	b.n	1831a <onoff_release+0x28>

0001833c <onoff_sync_lock>:
	__asm__ volatile(
   1833c:	f04f 0220 	mov.w	r2, #32
   18340:	f3ef 8311 	mrs	r3, BASEPRI
   18344:	f382 8812 	msr	BASEPRI_MAX, r2
   18348:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
   1834c:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
   1834e:	600b      	str	r3, [r1, #0]
}
   18350:	4770      	bx	lr

00018352 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
   18352:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
   18354:	6804      	ldr	r4, [r0, #0]
   18356:	2c00      	cmp	r4, #0
		srv->count = 0;
   18358:	bfbc      	itt	lt
   1835a:	2400      	movlt	r4, #0
   1835c:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
   1835e:	2b00      	cmp	r3, #0
{
   18360:	460d      	mov	r5, r1
   18362:	4611      	mov	r1, r2
   18364:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
   18368:	da0c      	bge.n	18384 <onoff_sync_finalize+0x32>
		srv->count = res;
   1836a:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
   1836c:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
   1836e:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
   18370:	f385 8811 	msr	BASEPRI, r5
   18374:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
   18378:	b111      	cbz	r1, 18380 <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
   1837a:	2000      	movs	r0, #0
   1837c:	f7ff ff2a 	bl	181d4 <notify_one>
	}

	return rv;
}
   18380:	4620      	mov	r0, r4
   18382:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
   18384:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
   18386:	b11a      	cbz	r2, 18390 <onoff_sync_finalize+0x3e>
		srv->count += 1;
   18388:	3401      	adds	r4, #1
		srv->count -= 1;
   1838a:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
   1838c:	2202      	movs	r2, #2
   1838e:	e7ee      	b.n	1836e <onoff_sync_finalize+0x1c>
		srv->count -= 1;
   18390:	3c01      	subs	r4, #1
   18392:	e7fa      	b.n	1838a <onoff_sync_finalize+0x38>

00018394 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   18394:	4604      	mov	r4, r0
   18396:	b508      	push	{r3, lr}
   18398:	4608      	mov	r0, r1
   1839a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1839c:	461a      	mov	r2, r3
   1839e:	47a0      	blx	r4
	return z_impl_z_current_get();
   183a0:	f7ff fc1e 	bl	17be0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   183a4:	f7eb f8d4 	bl	3550 <z_impl_k_thread_abort>

000183a8 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   183a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   183ac:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   183ae:	0840      	lsrs	r0, r0, #1
   183b0:	4770      	bx	lr

000183b2 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   183b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   183b4:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   183b6:	f7ff fff7 	bl	183a8 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   183ba:	fab0 f080 	clz	r0, r0
   183be:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   183c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   183c6:	00ca      	lsls	r2, r1, #3
   183c8:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   183cc:	1d17      	adds	r7, r2, #4
{
   183ce:	460c      	mov	r4, r1
   183d0:	3206      	adds	r2, #6
   183d2:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   183d4:	b956      	cbnz	r6, 183ec <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   183d6:	2101      	movs	r1, #1
   183d8:	fa01 f000 	lsl.w	r0, r1, r0
   183dc:	68d9      	ldr	r1, [r3, #12]
   183de:	4301      	orrs	r1, r0
   183e0:	60d9      	str	r1, [r3, #12]
		b->next = c;
   183e2:	f8cc 4010 	str.w	r4, [ip, #16]
   183e6:	53dd      	strh	r5, [r3, r7]
   183e8:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   183ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   183ec:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   183ee:	3104      	adds	r1, #4
   183f0:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   183f2:	53d8      	strh	r0, [r3, r7]
   183f4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   183f8:	529e      	strh	r6, [r3, r2]
   183fa:	80c5      	strh	r5, [r0, #6]
   183fc:	525d      	strh	r5, [r3, r1]
   183fe:	e7f4      	b.n	183ea <free_list_add+0x38>

00018400 <free_list_remove_bidx>:
{
   18400:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   18402:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   18406:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   18408:	4299      	cmp	r1, r3
   1840a:	f102 0104 	add.w	r1, r2, #4
   1840e:	d10a      	bne.n	18426 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   18410:	2301      	movs	r3, #1
   18412:	fa03 f202 	lsl.w	r2, r3, r2
   18416:	68c3      	ldr	r3, [r0, #12]
   18418:	ea23 0302 	bic.w	r3, r3, r2
   1841c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1841e:	2300      	movs	r3, #0
   18420:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   18424:	bd10      	pop	{r4, pc}
   18426:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   18428:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1842c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   18430:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   18434:	80cb      	strh	r3, [r1, #6]
   18436:	8082      	strh	r2, [r0, #4]
}
   18438:	e7f4      	b.n	18424 <free_list_remove_bidx+0x24>

0001843a <free_list_remove>:
{
   1843a:	b508      	push	{r3, lr}
   1843c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1843e:	f7ff ffb3 	bl	183a8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   18442:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   18446:	f1c2 021f 	rsb	r2, r2, #31
   1844a:	4618      	mov	r0, r3
}
   1844c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   18450:	f7ff bfd6 	b.w	18400 <free_list_remove_bidx>

00018454 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   18454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18458:	fab1 f581 	clz	r5, r1
   1845c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   18460:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   18464:	4603      	mov	r3, r0
	if (b->next) {
   18466:	693a      	ldr	r2, [r7, #16]
{
   18468:	460e      	mov	r6, r1
	if (b->next) {
   1846a:	b1c2      	cbz	r2, 1849e <alloc_chunk+0x4a>
   1846c:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   18470:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   18472:	4618      	mov	r0, r3
   18474:	4621      	mov	r1, r4
   18476:	f7ff ff97 	bl	183a8 <chunk_size>
   1847a:	42b0      	cmp	r0, r6
   1847c:	d306      	bcc.n	1848c <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   1847e:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   18480:	4618      	mov	r0, r3
   18482:	f7ff ffbd 	bl	18400 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   18486:	4620      	mov	r0, r4
   18488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1848c:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   18490:	f1b8 0801 	subs.w	r8, r8, #1
   18494:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   18496:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   18498:	d001      	beq.n	1849e <alloc_chunk+0x4a>
   1849a:	4282      	cmp	r2, r0
   1849c:	d1e8      	bne.n	18470 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1849e:	f1c5 0220 	rsb	r2, r5, #32
   184a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   184a6:	4094      	lsls	r4, r2
   184a8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   184aa:	4014      	ands	r4, r2
   184ac:	d0eb      	beq.n	18486 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   184ae:	fa94 f2a4 	rbit	r2, r4
   184b2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   184b6:	1d11      	adds	r1, r2, #4
   184b8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   184bc:	4621      	mov	r1, r4
   184be:	e7df      	b.n	18480 <alloc_chunk+0x2c>

000184c0 <merge_chunks>:
{
   184c0:	b538      	push	{r3, r4, r5, lr}
   184c2:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   184c4:	f7ff ff70 	bl	183a8 <chunk_size>
{
   184c8:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   184ca:	4604      	mov	r4, r0
   184cc:	4611      	mov	r1, r2
   184ce:	4618      	mov	r0, r3
   184d0:	f7ff ff6a 	bl	183a8 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   184d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   184d8:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   184da:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   184dc:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   184de:	4618      	mov	r0, r3
   184e0:	f7ff ff62 	bl	183a8 <chunk_size>
	void *cmem = &buf[c];
   184e4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   184e6:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   184ea:	bd38      	pop	{r3, r4, r5, pc}

000184ec <split_chunks>:
{
   184ec:	b538      	push	{r3, r4, r5, lr}
   184ee:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   184f0:	f7ff ff5a 	bl	183a8 <chunk_size>
{
   184f4:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   184f6:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   184f8:	1a51      	subs	r1, r2, r1
   184fa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   184fe:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18500:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   18502:	8060      	strh	r0, [r4, #2]
   18504:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   18508:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1850a:	8044      	strh	r4, [r0, #2]
   1850c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   18510:	4618      	mov	r0, r3
   18512:	4611      	mov	r1, r2
   18514:	f7ff ff48 	bl	183a8 <chunk_size>
	void *cmem = &buf[c];
   18518:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1851a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1851e:	bd38      	pop	{r3, r4, r5, pc}

00018520 <free_chunk>:
{
   18520:	b538      	push	{r3, r4, r5, lr}
   18522:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   18524:	f7ff ff40 	bl	183a8 <chunk_size>
   18528:	460c      	mov	r4, r1
   1852a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1852c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   18530:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   18532:	07da      	lsls	r2, r3, #31
   18534:	d40a      	bmi.n	1854c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   18536:	4628      	mov	r0, r5
   18538:	f7ff ff7f 	bl	1843a <free_list_remove>
	return c + chunk_size(h, c);
   1853c:	4621      	mov	r1, r4
   1853e:	4628      	mov	r0, r5
   18540:	f7ff ff32 	bl	183a8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   18544:	1822      	adds	r2, r4, r0
   18546:	4628      	mov	r0, r5
   18548:	f7ff ffba 	bl	184c0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1854c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   18550:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   18552:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   18556:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   18558:	07db      	lsls	r3, r3, #31
   1855a:	d40c      	bmi.n	18576 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1855c:	4628      	mov	r0, r5
   1855e:	f7ff ff6c 	bl	1843a <free_list_remove>
		return ((uint16_t *)cmem)[f];
   18562:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   18566:	4622      	mov	r2, r4
   18568:	1a61      	subs	r1, r4, r1
   1856a:	4628      	mov	r0, r5
   1856c:	f7ff ffa8 	bl	184c0 <merge_chunks>
   18570:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   18574:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   18576:	4621      	mov	r1, r4
   18578:	4628      	mov	r0, r5
}
   1857a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1857e:	f7ff bf18 	b.w	183b2 <free_list_add>

00018582 <sys_heap_free>:
	if (mem == NULL) {
   18582:	b161      	cbz	r1, 1859e <sys_heap_free+0x1c>
   18584:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   18586:	3904      	subs	r1, #4
   18588:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1858a:	f021 0307 	bic.w	r3, r1, #7
   1858e:	4403      	add	r3, r0
	free_chunk(h, c);
   18590:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   18592:	885a      	ldrh	r2, [r3, #2]
   18594:	f022 0201 	bic.w	r2, r2, #1
   18598:	805a      	strh	r2, [r3, #2]
   1859a:	f7ff bfc1 	b.w	18520 <free_chunk>
}
   1859e:	4770      	bx	lr

000185a0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   185a0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   185a2:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   185a4:	b909      	cbnz	r1, 185aa <sys_heap_alloc+0xa>
		return NULL;
   185a6:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   185a8:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   185aa:	68ab      	ldr	r3, [r5, #8]
   185ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   185b0:	d9f9      	bls.n	185a6 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   185b2:	310b      	adds	r1, #11
   185b4:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   185b6:	4621      	mov	r1, r4
   185b8:	4628      	mov	r0, r5
   185ba:	f7ff ff4b 	bl	18454 <alloc_chunk>
	if (c == 0U) {
   185be:	4606      	mov	r6, r0
   185c0:	2800      	cmp	r0, #0
   185c2:	d0f0      	beq.n	185a6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   185c4:	4601      	mov	r1, r0
   185c6:	4628      	mov	r0, r5
   185c8:	f7ff feee 	bl	183a8 <chunk_size>
   185cc:	42a0      	cmp	r0, r4
   185ce:	d907      	bls.n	185e0 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   185d0:	1932      	adds	r2, r6, r4
   185d2:	4628      	mov	r0, r5
   185d4:	f7ff ff8a 	bl	184ec <split_chunks>
		free_list_add(h, c + chunk_sz);
   185d8:	4611      	mov	r1, r2
   185da:	4628      	mov	r0, r5
   185dc:	f7ff fee9 	bl	183b2 <free_list_add>
	void *cmem = &buf[c];
   185e0:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   185e4:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   185e6:	8853      	ldrh	r3, [r2, #2]
   185e8:	f043 0301 	orr.w	r3, r3, #1
   185ec:	8053      	strh	r3, [r2, #2]
   185ee:	3004      	adds	r0, #4
	return mem;
   185f0:	e7da      	b.n	185a8 <sys_heap_alloc+0x8>

000185f2 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   185f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   185f6:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   185f8:	424a      	negs	r2, r1
   185fa:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   185fe:	ea31 0202 	bics.w	r2, r1, r2
{
   18602:	4603      	mov	r3, r0
	if (align != rew) {
   18604:	d00a      	beq.n	1861c <sys_heap_aligned_alloc+0x2a>
		return false;
   18606:	2f04      	cmp	r7, #4
   18608:	463a      	mov	r2, r7
   1860a:	46b9      	mov	r9, r7
   1860c:	bf28      	it	cs
   1860e:	2204      	movcs	r2, #4
		align -= rew;
   18610:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   18612:	b974      	cbnz	r4, 18632 <sys_heap_aligned_alloc+0x40>
		return NULL;
   18614:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   18616:	4628      	mov	r0, r5
   18618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1861c:	2904      	cmp	r1, #4
   1861e:	d804      	bhi.n	1862a <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   18620:	4621      	mov	r1, r4
}
   18622:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   18626:	f7ff bfbb 	b.w	185a0 <sys_heap_alloc>
		rew = 0;
   1862a:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   1862e:	2204      	movs	r2, #4
   18630:	e7ef      	b.n	18612 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   18632:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   18634:	68b3      	ldr	r3, [r6, #8]
   18636:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1863a:	d9eb      	bls.n	18614 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1863c:	f104 010b 	add.w	r1, r4, #11
   18640:	4439      	add	r1, r7
   18642:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   18644:	08c9      	lsrs	r1, r1, #3
   18646:	4630      	mov	r0, r6
   18648:	f7ff ff04 	bl	18454 <alloc_chunk>
	if (c0 == 0) {
   1864c:	4680      	mov	r8, r0
   1864e:	2800      	cmp	r0, #0
   18650:	d0e0      	beq.n	18614 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   18652:	f109 0504 	add.w	r5, r9, #4
   18656:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1865a:	1e7b      	subs	r3, r7, #1
   1865c:	4435      	add	r5, r6
   1865e:	441d      	add	r5, r3
   18660:	427f      	negs	r7, r7
   18662:	403d      	ands	r5, r7
   18664:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18668:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1866a:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1866c:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1866e:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   18670:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   18674:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   18676:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1867a:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1867e:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   18682:	d208      	bcs.n	18696 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   18684:	4601      	mov	r1, r0
   18686:	463a      	mov	r2, r7
   18688:	4630      	mov	r0, r6
   1868a:	f7ff ff2f 	bl	184ec <split_chunks>
		free_list_add(h, c0);
   1868e:	4641      	mov	r1, r8
   18690:	4630      	mov	r0, r6
   18692:	f7ff fe8e 	bl	183b2 <free_list_add>
	return c + chunk_size(h, c);
   18696:	4639      	mov	r1, r7
   18698:	4630      	mov	r0, r6
   1869a:	f7ff fe85 	bl	183a8 <chunk_size>
   1869e:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   186a0:	4284      	cmp	r4, r0
   186a2:	d207      	bcs.n	186b4 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   186a4:	4630      	mov	r0, r6
   186a6:	4622      	mov	r2, r4
   186a8:	f7ff ff20 	bl	184ec <split_chunks>
		free_list_add(h, c_end);
   186ac:	4621      	mov	r1, r4
   186ae:	4630      	mov	r0, r6
   186b0:	f7ff fe7f 	bl	183b2 <free_list_add>
	void *cmem = &buf[c];
   186b4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   186b8:	8873      	ldrh	r3, [r6, #2]
   186ba:	f043 0301 	orr.w	r3, r3, #1
   186be:	8073      	strh	r3, [r6, #2]
   186c0:	e7a9      	b.n	18616 <sys_heap_aligned_alloc+0x24>

000186c2 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   186c2:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   186c4:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   186c6:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   186c8:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   186cc:	f021 0107 	bic.w	r1, r1, #7
{
   186d0:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   186d2:	1acd      	subs	r5, r1, r3
   186d4:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   186d6:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   186d8:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   186dc:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   186e0:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   186e2:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   186e4:	2600      	movs	r6, #0
   186e6:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   186e8:	f1c0 0020 	rsb	r0, r0, #32
   186ec:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   186f0:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   186f2:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   186f4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   186f8:	4284      	cmp	r4, r0
   186fa:	d118      	bne.n	1872e <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   186fc:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   186fe:	f040 0001 	orr.w	r0, r0, #1
   18702:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   18704:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   18708:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1870a:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   1870c:	801e      	strh	r6, [r3, #0]
   1870e:	8067      	strh	r7, [r4, #2]
   18710:	195c      	adds	r4, r3, r5
   18712:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   18716:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   1871a:	8066      	strh	r6, [r4, #2]
   1871c:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1871e:	8850      	ldrh	r0, [r2, #2]
   18720:	f040 0001 	orr.w	r0, r0, #1
   18724:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   18726:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   18728:	4618      	mov	r0, r3
   1872a:	f7ff be42 	b.w	183b2 <free_list_add>
		h->buckets[i].next = 0;
   1872e:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   18732:	e7e1      	b.n	186f8 <sys_heap_init+0x36>

00018734 <_ldiv5>:
	uint32_t v_lo = *v;
   18734:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   18738:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   1873a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   1873e:	fba2 2403 	umull	r2, r4, r2, r3
   18742:	18d5      	adds	r5, r2, r3
   18744:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   18748:	fba1 1303 	umull	r1, r3, r1, r3
   1874c:	1852      	adds	r2, r2, r1
   1874e:	eb44 0403 	adc.w	r4, r4, r3
   18752:	1952      	adds	r2, r2, r5
   18754:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   18758:	1889      	adds	r1, r1, r2
   1875a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   1875e:	e9c0 1300 	strd	r1, r3, [r0]
}
   18762:	bd30      	pop	{r4, r5, pc}

00018764 <_get_digit>:
	if (*digit_count > 0) {
   18764:	680a      	ldr	r2, [r1, #0]
   18766:	2a00      	cmp	r2, #0
{
   18768:	b510      	push	{r4, lr}
   1876a:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   1876c:	dd0f      	ble.n	1878e <_get_digit+0x2a>
		--*digit_count;
   1876e:	3a01      	subs	r2, #1
   18770:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   18772:	681a      	ldr	r2, [r3, #0]
   18774:	6844      	ldr	r4, [r0, #4]
   18776:	200a      	movs	r0, #10
   18778:	fba2 1200 	umull	r1, r2, r2, r0
   1877c:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   18780:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   18782:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   18786:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   1878a:	3030      	adds	r0, #48	; 0x30
}
   1878c:	bd10      	pop	{r4, pc}
		rval = '0';
   1878e:	2030      	movs	r0, #48	; 0x30
   18790:	e7fc      	b.n	1878c <_get_digit+0x28>

00018792 <encode_uint>:
{
   18792:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18796:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   18798:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1879a:	2b6f      	cmp	r3, #111	; 0x6f
{
   1879c:	4680      	mov	r8, r0
   1879e:	460f      	mov	r7, r1
   187a0:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   187a2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   187a6:	d029      	beq.n	187fc <encode_uint+0x6a>
   187a8:	d824      	bhi.n	187f4 <encode_uint+0x62>
		return 16;
   187aa:	2b58      	cmp	r3, #88	; 0x58
   187ac:	bf14      	ite	ne
   187ae:	260a      	movne	r6, #10
   187b0:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   187b2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   187b6:	4632      	mov	r2, r6
   187b8:	2300      	movs	r3, #0
   187ba:	4640      	mov	r0, r8
   187bc:	4639      	mov	r1, r7
   187be:	f7e8 f85d 	bl	87c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   187c2:	2a09      	cmp	r2, #9
   187c4:	b2d4      	uxtb	r4, r2
   187c6:	d81e      	bhi.n	18806 <encode_uint+0x74>
   187c8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   187ca:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   187cc:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   187ce:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   187d2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   187d6:	d301      	bcc.n	187dc <encode_uint+0x4a>
   187d8:	45d1      	cmp	r9, sl
   187da:	d811      	bhi.n	18800 <encode_uint+0x6e>
	if (conv->flag_hash) {
   187dc:	782b      	ldrb	r3, [r5, #0]
   187de:	069b      	lsls	r3, r3, #26
   187e0:	d505      	bpl.n	187ee <encode_uint+0x5c>
		if (radix == 8) {
   187e2:	2e08      	cmp	r6, #8
   187e4:	d115      	bne.n	18812 <encode_uint+0x80>
			conv->altform_0 = true;
   187e6:	78ab      	ldrb	r3, [r5, #2]
   187e8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   187ec:	70ab      	strb	r3, [r5, #2]
}
   187ee:	4648      	mov	r0, r9
   187f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   187f4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   187f8:	2b70      	cmp	r3, #112	; 0x70
   187fa:	e7d7      	b.n	187ac <encode_uint+0x1a>
	switch (specifier) {
   187fc:	2608      	movs	r6, #8
   187fe:	e7d8      	b.n	187b2 <encode_uint+0x20>
		value /= radix;
   18800:	4680      	mov	r8, r0
   18802:	460f      	mov	r7, r1
   18804:	e7d7      	b.n	187b6 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   18806:	f1bb 0f19 	cmp.w	fp, #25
   1880a:	bf94      	ite	ls
   1880c:	3437      	addls	r4, #55	; 0x37
   1880e:	3457      	addhi	r4, #87	; 0x57
   18810:	e7db      	b.n	187ca <encode_uint+0x38>
		} else if (radix == 16) {
   18812:	2e10      	cmp	r6, #16
   18814:	d1eb      	bne.n	187ee <encode_uint+0x5c>
			conv->altform_0c = true;
   18816:	78ab      	ldrb	r3, [r5, #2]
   18818:	f043 0310 	orr.w	r3, r3, #16
   1881c:	e7e6      	b.n	187ec <encode_uint+0x5a>

0001881e <outs>:
{
   1881e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18822:	4607      	mov	r7, r0
   18824:	4688      	mov	r8, r1
   18826:	4615      	mov	r5, r2
   18828:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1882a:	4614      	mov	r4, r2
   1882c:	42b4      	cmp	r4, r6
   1882e:	eba4 0005 	sub.w	r0, r4, r5
   18832:	d302      	bcc.n	1883a <outs+0x1c>
   18834:	b93e      	cbnz	r6, 18846 <outs+0x28>
   18836:	7823      	ldrb	r3, [r4, #0]
   18838:	b12b      	cbz	r3, 18846 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1883a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1883e:	4641      	mov	r1, r8
   18840:	47b8      	blx	r7
		if (rc < 0) {
   18842:	2800      	cmp	r0, #0
   18844:	daf2      	bge.n	1882c <outs+0xe>
}
   18846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001884a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1884a:	4770      	bx	lr

0001884c <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
   1884c:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1884e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
   18852:	46a4      	mov	ip, r4

  return ret;
}
   18854:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   18856:	4760      	bx	ip

00018858 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   18858:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   1885a:	6804      	ldr	r4, [r0, #0]
   1885c:	6880      	ldr	r0, [r0, #8]
   1885e:	46a4      	mov	ip, r4

  return ret;
}
   18860:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   18862:	4760      	bx	ip

00018864 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
   18864:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   18866:	2301      	movs	r3, #1
{
   18868:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1886a:	aa01      	add	r2, sp, #4
   1886c:	2120      	movs	r1, #32
{
   1886e:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   18870:	f7ff ffec 	bl	1884c <hts221_read_reg>

  if (ret == 0)
   18874:	b958      	cbnz	r0, 1888e <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
   18876:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1887a:	f365 0301 	bfi	r3, r5, #0, #2
   1887e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   18882:	aa01      	add	r2, sp, #4
   18884:	2301      	movs	r3, #1
   18886:	2120      	movs	r1, #32
   18888:	4620      	mov	r0, r4
   1888a:	f7ff ffe5 	bl	18858 <hts221_write_reg>
  }

  return ret;
}
   1888e:	b003      	add	sp, #12
   18890:	bd30      	pop	{r4, r5, pc}

00018892 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   18892:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   18894:	2301      	movs	r3, #1
{
   18896:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   18898:	aa01      	add	r2, sp, #4
   1889a:	2120      	movs	r1, #32
{
   1889c:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   1889e:	f7ff ffd5 	bl	1884c <hts221_read_reg>

  if (ret == 0)
   188a2:	b958      	cbnz	r0, 188bc <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
   188a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   188a8:	f365 0382 	bfi	r3, r5, #2, #1
   188ac:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   188b0:	aa01      	add	r2, sp, #4
   188b2:	2301      	movs	r3, #1
   188b4:	2120      	movs	r1, #32
   188b6:	4620      	mov	r0, r4
   188b8:	f7ff ffce 	bl	18858 <hts221_write_reg>
  }

  return ret;
}
   188bc:	b003      	add	sp, #12
   188be:	bd30      	pop	{r4, r5, pc}

000188c0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   188c0:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
   188c2:	2301      	movs	r3, #1
   188c4:	210f      	movs	r1, #15
   188c6:	f7ff bfc1 	b.w	1884c <hts221_read_reg>

000188ca <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
   188ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   188cc:	2301      	movs	r3, #1
{
   188ce:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   188d0:	aa01      	add	r2, sp, #4
   188d2:	2120      	movs	r1, #32
{
   188d4:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   188d6:	f7ff ffb9 	bl	1884c <hts221_read_reg>

  if (ret == 0)
   188da:	b958      	cbnz	r0, 188f4 <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
   188dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   188e0:	f365 13c7 	bfi	r3, r5, #7, #1
   188e4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   188e8:	aa01      	add	r2, sp, #4
   188ea:	2301      	movs	r3, #1
   188ec:	2120      	movs	r1, #32
   188ee:	4620      	mov	r0, r4
   188f0:	f7ff ffb2 	bl	18858 <hts221_write_reg>
  }

  return ret;
}
   188f4:	b003      	add	sp, #12
   188f6:	bd30      	pop	{r4, r5, pc}

000188f8 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   188f8:	b538      	push	{r3, r4, r5, lr}
   188fa:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   188fc:	42ab      	cmp	r3, r5
{
   188fe:	4611      	mov	r1, r2
   18900:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   18902:	d804      	bhi.n	1890e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   18904:	461a      	mov	r2, r3
   18906:	f000 fa7b 	bl	18e00 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1890a:	4620      	mov	r0, r4
   1890c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1890e:	2400      	movs	r4, #0
   18910:	e7fb      	b.n	1890a <_copy+0x12>

00018912 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   18912:	f000 ba80 	b.w	18e16 <memset>

00018916 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   18916:	09c3      	lsrs	r3, r0, #7
   18918:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1891c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   18920:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   18924:	b2c0      	uxtb	r0, r0
   18926:	4770      	bx	lr

00018928 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   18928:	78cb      	ldrb	r3, [r1, #3]
   1892a:	7802      	ldrb	r2, [r0, #0]
   1892c:	4053      	eors	r3, r2
   1892e:	7003      	strb	r3, [r0, #0]
   18930:	884b      	ldrh	r3, [r1, #2]
   18932:	7842      	ldrb	r2, [r0, #1]
   18934:	4053      	eors	r3, r2
   18936:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   18938:	680a      	ldr	r2, [r1, #0]
   1893a:	7883      	ldrb	r3, [r0, #2]
   1893c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   18940:	7083      	strb	r3, [r0, #2]
   18942:	680a      	ldr	r2, [r1, #0]
   18944:	78c3      	ldrb	r3, [r0, #3]
   18946:	4053      	eors	r3, r2
   18948:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1894a:	79cb      	ldrb	r3, [r1, #7]
   1894c:	7902      	ldrb	r2, [r0, #4]
   1894e:	4053      	eors	r3, r2
   18950:	7103      	strb	r3, [r0, #4]
   18952:	88cb      	ldrh	r3, [r1, #6]
   18954:	7942      	ldrb	r2, [r0, #5]
   18956:	4053      	eors	r3, r2
   18958:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1895a:	684a      	ldr	r2, [r1, #4]
   1895c:	7983      	ldrb	r3, [r0, #6]
   1895e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   18962:	7183      	strb	r3, [r0, #6]
   18964:	684a      	ldr	r2, [r1, #4]
   18966:	79c3      	ldrb	r3, [r0, #7]
   18968:	4053      	eors	r3, r2
   1896a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1896c:	7acb      	ldrb	r3, [r1, #11]
   1896e:	7a02      	ldrb	r2, [r0, #8]
   18970:	4053      	eors	r3, r2
   18972:	7203      	strb	r3, [r0, #8]
   18974:	7a42      	ldrb	r2, [r0, #9]
   18976:	894b      	ldrh	r3, [r1, #10]
   18978:	4053      	eors	r3, r2
   1897a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1897c:	688a      	ldr	r2, [r1, #8]
   1897e:	7a83      	ldrb	r3, [r0, #10]
   18980:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   18984:	7283      	strb	r3, [r0, #10]
   18986:	688a      	ldr	r2, [r1, #8]
   18988:	7ac3      	ldrb	r3, [r0, #11]
   1898a:	4053      	eors	r3, r2
   1898c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1898e:	7bcb      	ldrb	r3, [r1, #15]
   18990:	7b02      	ldrb	r2, [r0, #12]
   18992:	4053      	eors	r3, r2
   18994:	7303      	strb	r3, [r0, #12]
   18996:	89cb      	ldrh	r3, [r1, #14]
   18998:	7b42      	ldrb	r2, [r0, #13]
   1899a:	4053      	eors	r3, r2
   1899c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1899e:	68ca      	ldr	r2, [r1, #12]
   189a0:	7b83      	ldrb	r3, [r0, #14]
   189a2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   189a6:	7383      	strb	r3, [r0, #14]
   189a8:	68ca      	ldr	r2, [r1, #12]
   189aa:	7bc3      	ldrb	r3, [r0, #15]
   189ac:	4053      	eors	r3, r2
   189ae:	73c3      	strb	r3, [r0, #15]
}
   189b0:	4770      	bx	lr

000189b2 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   189b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   189b4:	7802      	ldrb	r2, [r0, #0]
   189b6:	f88d 2000 	strb.w	r2, [sp]
   189ba:	7942      	ldrb	r2, [r0, #5]
   189bc:	f88d 2001 	strb.w	r2, [sp, #1]
   189c0:	7a82      	ldrb	r2, [r0, #10]
   189c2:	f88d 2002 	strb.w	r2, [sp, #2]
   189c6:	7bc2      	ldrb	r2, [r0, #15]
   189c8:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   189cc:	7902      	ldrb	r2, [r0, #4]
   189ce:	f88d 2004 	strb.w	r2, [sp, #4]
   189d2:	7a42      	ldrb	r2, [r0, #9]
   189d4:	f88d 2005 	strb.w	r2, [sp, #5]
   189d8:	7b82      	ldrb	r2, [r0, #14]
   189da:	f88d 2006 	strb.w	r2, [sp, #6]
   189de:	78c2      	ldrb	r2, [r0, #3]
   189e0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   189e4:	7a02      	ldrb	r2, [r0, #8]
   189e6:	f88d 2008 	strb.w	r2, [sp, #8]
   189ea:	7b42      	ldrb	r2, [r0, #13]
   189ec:	f88d 2009 	strb.w	r2, [sp, #9]
   189f0:	7882      	ldrb	r2, [r0, #2]
   189f2:	f88d 200a 	strb.w	r2, [sp, #10]
   189f6:	79c2      	ldrb	r2, [r0, #7]
   189f8:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   189fc:	7b02      	ldrb	r2, [r0, #12]
   189fe:	f88d 200c 	strb.w	r2, [sp, #12]
   18a02:	7842      	ldrb	r2, [r0, #1]
   18a04:	7ac3      	ldrb	r3, [r0, #11]
   18a06:	f88d 200d 	strb.w	r2, [sp, #13]
   18a0a:	7982      	ldrb	r2, [r0, #6]
   18a0c:	f88d 200e 	strb.w	r2, [sp, #14]
   18a10:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   18a14:	2310      	movs	r3, #16
   18a16:	466a      	mov	r2, sp
   18a18:	4619      	mov	r1, r3
   18a1a:	f7ff ff6d 	bl	188f8 <_copy>
}
   18a1e:	b005      	add	sp, #20
   18a20:	f85d fb04 	ldr.w	pc, [sp], #4

00018a24 <mult_row_column>:
{
   18a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a26:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18a28:	7808      	ldrb	r0, [r1, #0]
{
   18a2a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18a2c:	f7ff ff73 	bl	18916 <_double_byte>
   18a30:	4605      	mov	r5, r0
   18a32:	7860      	ldrb	r0, [r4, #1]
   18a34:	f7ff ff6f 	bl	18916 <_double_byte>
   18a38:	78a2      	ldrb	r2, [r4, #2]
   18a3a:	7863      	ldrb	r3, [r4, #1]
   18a3c:	4053      	eors	r3, r2
   18a3e:	78e2      	ldrb	r2, [r4, #3]
   18a40:	4053      	eors	r3, r2
   18a42:	405d      	eors	r5, r3
   18a44:	4045      	eors	r5, r0
   18a46:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   18a48:	7860      	ldrb	r0, [r4, #1]
   18a4a:	7827      	ldrb	r7, [r4, #0]
   18a4c:	f7ff ff63 	bl	18916 <_double_byte>
   18a50:	4605      	mov	r5, r0
   18a52:	78a0      	ldrb	r0, [r4, #2]
   18a54:	f7ff ff5f 	bl	18916 <_double_byte>
   18a58:	78a3      	ldrb	r3, [r4, #2]
   18a5a:	405f      	eors	r7, r3
   18a5c:	78e3      	ldrb	r3, [r4, #3]
   18a5e:	405f      	eors	r7, r3
   18a60:	407d      	eors	r5, r7
   18a62:	4045      	eors	r5, r0
   18a64:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18a66:	78a0      	ldrb	r0, [r4, #2]
   18a68:	7865      	ldrb	r5, [r4, #1]
   18a6a:	7827      	ldrb	r7, [r4, #0]
   18a6c:	f7ff ff53 	bl	18916 <_double_byte>
   18a70:	406f      	eors	r7, r5
   18a72:	4605      	mov	r5, r0
   18a74:	78e0      	ldrb	r0, [r4, #3]
   18a76:	f7ff ff4e 	bl	18916 <_double_byte>
   18a7a:	78e3      	ldrb	r3, [r4, #3]
   18a7c:	405f      	eors	r7, r3
   18a7e:	407d      	eors	r5, r7
   18a80:	4045      	eors	r5, r0
   18a82:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   18a84:	7820      	ldrb	r0, [r4, #0]
   18a86:	f7ff ff46 	bl	18916 <_double_byte>
   18a8a:	7863      	ldrb	r3, [r4, #1]
   18a8c:	7825      	ldrb	r5, [r4, #0]
   18a8e:	405d      	eors	r5, r3
   18a90:	78a3      	ldrb	r3, [r4, #2]
   18a92:	405d      	eors	r5, r3
   18a94:	4045      	eors	r5, r0
   18a96:	78e0      	ldrb	r0, [r4, #3]
   18a98:	f7ff ff3d 	bl	18916 <_double_byte>
   18a9c:	b2ed      	uxtb	r5, r5
   18a9e:	4045      	eors	r5, r0
   18aa0:	70f5      	strb	r5, [r6, #3]
}
   18aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018aa4 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   18aa4:	b570      	push	{r4, r5, r6, lr}
   18aa6:	4614      	mov	r4, r2
   18aa8:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   18aaa:	4605      	mov	r5, r0
   18aac:	2800      	cmp	r0, #0
   18aae:	d049      	beq.n	18b44 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   18ab0:	2900      	cmp	r1, #0
   18ab2:	d049      	beq.n	18b48 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   18ab4:	2a00      	cmp	r2, #0
   18ab6:	d049      	beq.n	18b4c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   18ab8:	2310      	movs	r3, #16
   18aba:	460a      	mov	r2, r1
   18abc:	4668      	mov	r0, sp
   18abe:	4619      	mov	r1, r3
   18ac0:	f7ff ff1a 	bl	188f8 <_copy>
	add_round_key(state, s->words);
   18ac4:	4621      	mov	r1, r4
   18ac6:	4668      	mov	r0, sp
   18ac8:	f7ff ff2e 	bl	18928 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   18acc:	3410      	adds	r4, #16
   18ace:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   18ad2:	4668      	mov	r0, sp
   18ad4:	f7ea fa58 	bl	2f88 <sub_bytes>
		shift_rows(state);
   18ad8:	4668      	mov	r0, sp
   18ada:	f7ff ff6a 	bl	189b2 <shift_rows>
	mult_row_column(t, s);
   18ade:	4669      	mov	r1, sp
   18ae0:	a804      	add	r0, sp, #16
   18ae2:	f7ff ff9f 	bl	18a24 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   18ae6:	a901      	add	r1, sp, #4
   18ae8:	a805      	add	r0, sp, #20
   18aea:	f7ff ff9b 	bl	18a24 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   18aee:	a902      	add	r1, sp, #8
   18af0:	a806      	add	r0, sp, #24
   18af2:	f7ff ff97 	bl	18a24 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   18af6:	a903      	add	r1, sp, #12
   18af8:	a807      	add	r0, sp, #28
   18afa:	f7ff ff93 	bl	18a24 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   18afe:	2310      	movs	r3, #16
   18b00:	4619      	mov	r1, r3
   18b02:	eb0d 0203 	add.w	r2, sp, r3
   18b06:	4668      	mov	r0, sp
   18b08:	f7ff fef6 	bl	188f8 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   18b0c:	4621      	mov	r1, r4
   18b0e:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   18b10:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   18b12:	f7ff ff09 	bl	18928 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   18b16:	42a6      	cmp	r6, r4
   18b18:	d1db      	bne.n	18ad2 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   18b1a:	f7ea fa35 	bl	2f88 <sub_bytes>
	shift_rows(state);
   18b1e:	4668      	mov	r0, sp
   18b20:	f7ff ff47 	bl	189b2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   18b24:	4631      	mov	r1, r6
   18b26:	4668      	mov	r0, sp
   18b28:	f7ff fefe 	bl	18928 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   18b2c:	2310      	movs	r3, #16
   18b2e:	4619      	mov	r1, r3
   18b30:	466a      	mov	r2, sp
   18b32:	4628      	mov	r0, r5
   18b34:	f7ff fee0 	bl	188f8 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   18b38:	4668      	mov	r0, sp
   18b3a:	2210      	movs	r2, #16
   18b3c:	2100      	movs	r1, #0
   18b3e:	f7ff fee8 	bl	18912 <_set>

	return TC_CRYPTO_SUCCESS;
   18b42:	2001      	movs	r0, #1
}
   18b44:	b008      	add	sp, #32
   18b46:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   18b48:	4608      	mov	r0, r1
   18b4a:	e7fb      	b.n	18b44 <tc_aes_encrypt+0xa0>
   18b4c:	4610      	mov	r0, r2
   18b4e:	e7f9      	b.n	18b44 <tc_aes_encrypt+0xa0>

00018b50 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   18b50:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   18b52:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   18b54:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   18b56:	f912 3b10 	ldrsb.w	r3, [r2], #16
   18b5a:	2b00      	cmp	r3, #0
   18b5c:	bfb4      	ite	lt
   18b5e:	2387      	movlt	r3, #135	; 0x87
   18b60:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   18b62:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   18b66:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   18b6a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   18b6c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   18b70:	d002      	beq.n	18b78 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   18b72:	7813      	ldrb	r3, [r2, #0]
   18b74:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   18b76:	e7f4      	b.n	18b62 <gf_double+0x12>
	}
}
   18b78:	bd10      	pop	{r4, pc}

00018b7a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   18b7a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   18b7c:	b120      	cbz	r0, 18b88 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   18b7e:	2258      	movs	r2, #88	; 0x58
   18b80:	2100      	movs	r1, #0
   18b82:	f7ff fec6 	bl	18912 <_set>
   18b86:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   18b88:	bd08      	pop	{r3, pc}

00018b8a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   18b8a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   18b8c:	4604      	mov	r4, r0
   18b8e:	b188      	cbz	r0, 18bb4 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   18b90:	2210      	movs	r2, #16
   18b92:	2100      	movs	r1, #0
   18b94:	f7ff febd 	bl	18912 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   18b98:	2210      	movs	r2, #16
   18b9a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   18b9e:	2100      	movs	r1, #0
   18ba0:	f7ff feb7 	bl	18912 <_set>
	s->leftover_offset = 0;
   18ba4:	2300      	movs	r3, #0
   18ba6:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   18ba8:	2200      	movs	r2, #0
   18baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   18bae:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   18bb2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   18bb4:	bd10      	pop	{r4, pc}

00018bb6 <tc_cmac_setup>:
{
   18bb6:	b570      	push	{r4, r5, r6, lr}
   18bb8:	460d      	mov	r5, r1
   18bba:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   18bbc:	4604      	mov	r4, r0
   18bbe:	b310      	cbz	r0, 18c06 <tc_cmac_setup+0x50>
   18bc0:	b311      	cbz	r1, 18c08 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   18bc2:	2258      	movs	r2, #88	; 0x58
   18bc4:	2100      	movs	r1, #0
   18bc6:	f7ff fea4 	bl	18912 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   18bca:	4629      	mov	r1, r5
	s->sched = sched;
   18bcc:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   18bce:	4630      	mov	r0, r6
   18bd0:	f7ea f9e6 	bl	2fa0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   18bd4:	2210      	movs	r2, #16
   18bd6:	2100      	movs	r1, #0
   18bd8:	4620      	mov	r0, r4
   18bda:	f7ff fe9a 	bl	18912 <_set>
	gf_double (s->K1, s->iv);
   18bde:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   18be2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18be4:	4621      	mov	r1, r4
   18be6:	4620      	mov	r0, r4
   18be8:	f7ff ff5c 	bl	18aa4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   18bec:	4621      	mov	r1, r4
   18bee:	4628      	mov	r0, r5
   18bf0:	f7ff ffae 	bl	18b50 <gf_double>
	gf_double (s->K2, s->K1);
   18bf4:	4629      	mov	r1, r5
   18bf6:	f104 0020 	add.w	r0, r4, #32
   18bfa:	f7ff ffa9 	bl	18b50 <gf_double>
	tc_cmac_init(s);
   18bfe:	4620      	mov	r0, r4
   18c00:	f7ff ffc3 	bl	18b8a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   18c04:	2001      	movs	r0, #1
}
   18c06:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   18c08:	4608      	mov	r0, r1
   18c0a:	e7fc      	b.n	18c06 <tc_cmac_setup+0x50>

00018c0c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   18c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c10:	460d      	mov	r5, r1
   18c12:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   18c14:	4604      	mov	r4, r0
   18c16:	2800      	cmp	r0, #0
   18c18:	d061      	beq.n	18cde <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   18c1a:	b912      	cbnz	r2, 18c22 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   18c1c:	2001      	movs	r0, #1
}
   18c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   18c22:	2900      	cmp	r1, #0
   18c24:	d05b      	beq.n	18cde <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   18c26:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   18c2a:	ea53 0102 	orrs.w	r1, r3, r2
   18c2e:	d056      	beq.n	18cde <tc_cmac_update+0xd2>
	s->countdown--;
   18c30:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   18c32:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   18c36:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   18c3a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   18c3e:	f1b8 0f00 	cmp.w	r8, #0
   18c42:	d02a      	beq.n	18c9a <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   18c44:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   18c48:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   18c4c:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   18c4e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   18c50:	d208      	bcs.n	18c64 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   18c52:	462a      	mov	r2, r5
   18c54:	4633      	mov	r3, r6
   18c56:	4631      	mov	r1, r6
   18c58:	f7ff fe4e 	bl	188f8 <_copy>
			s->leftover_offset += data_length;
   18c5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   18c5e:	4432      	add	r2, r6
   18c60:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   18c62:	e7db      	b.n	18c1c <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   18c64:	463b      	mov	r3, r7
   18c66:	462a      	mov	r2, r5
   18c68:	4639      	mov	r1, r7
   18c6a:	f7ff fe45 	bl	188f8 <_copy>
		data_length -= remaining_space;
   18c6e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   18c70:	2300      	movs	r3, #0
   18c72:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   18c74:	4446      	add	r6, r8
		data += remaining_space;
   18c76:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18c78:	1e63      	subs	r3, r4, #1
   18c7a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   18c7e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   18c82:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18c86:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   18c88:	ea82 0200 	eor.w	r2, r2, r0
   18c8c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18c8e:	d1f6      	bne.n	18c7e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   18c90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18c92:	4621      	mov	r1, r4
   18c94:	4620      	mov	r0, r4
   18c96:	f7ff ff05 	bl	18aa4 <tc_aes_encrypt>
   18c9a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   18c9e:	2e10      	cmp	r6, #16
   18ca0:	d80a      	bhi.n	18cb8 <tc_cmac_update+0xac>
	if (data_length > 0) {
   18ca2:	2e00      	cmp	r6, #0
   18ca4:	d0ba      	beq.n	18c1c <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   18ca6:	4633      	mov	r3, r6
   18ca8:	462a      	mov	r2, r5
   18caa:	4631      	mov	r1, r6
   18cac:	f104 0030 	add.w	r0, r4, #48	; 0x30
   18cb0:	f7ff fe22 	bl	188f8 <_copy>
		s->leftover_offset = data_length;
   18cb4:	6466      	str	r6, [r4, #68]	; 0x44
   18cb6:	e7b1      	b.n	18c1c <tc_cmac_update+0x10>
   18cb8:	1e63      	subs	r3, r4, #1
   18cba:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   18cbc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   18cc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18cc4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   18cc6:	ea82 0200 	eor.w	r2, r2, r0
   18cca:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18ccc:	d1f6      	bne.n	18cbc <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   18cce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18cd0:	4621      	mov	r1, r4
   18cd2:	4620      	mov	r0, r4
   18cd4:	f7ff fee6 	bl	18aa4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   18cd8:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   18cda:	3e10      	subs	r6, #16
   18cdc:	e7df      	b.n	18c9e <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   18cde:	2000      	movs	r0, #0
   18ce0:	e79d      	b.n	18c1e <tc_cmac_update+0x12>

00018ce2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   18ce2:	b570      	push	{r4, r5, r6, lr}
   18ce4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   18ce6:	4605      	mov	r5, r0
   18ce8:	b1e8      	cbz	r0, 18d26 <tc_cmac_final+0x44>
   18cea:	b369      	cbz	r1, 18d48 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   18cec:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   18cee:	2a10      	cmp	r2, #16
   18cf0:	d11a      	bne.n	18d28 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   18cf2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18cf4:	1e63      	subs	r3, r4, #1
   18cf6:	3901      	subs	r1, #1
   18cf8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   18cfc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   18d00:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   18d04:	4072      	eors	r2, r6
   18d06:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18d0a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   18d0c:	ea82 0206 	eor.w	r2, r2, r6
   18d10:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   18d12:	d1f3      	bne.n	18cfc <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   18d14:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   18d16:	4621      	mov	r1, r4
   18d18:	4628      	mov	r0, r5
   18d1a:	f7ff fec3 	bl	18aa4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   18d1e:	4620      	mov	r0, r4
   18d20:	f7ff ff2b 	bl	18b7a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   18d24:	2001      	movs	r0, #1
}
   18d26:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   18d28:	f102 0030 	add.w	r0, r2, #48	; 0x30
   18d2c:	2100      	movs	r1, #0
   18d2e:	f1c2 0210 	rsb	r2, r2, #16
   18d32:	4420      	add	r0, r4
   18d34:	f7ff fded 	bl	18912 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   18d38:	6c63      	ldr	r3, [r4, #68]	; 0x44
   18d3a:	4423      	add	r3, r4
   18d3c:	2280      	movs	r2, #128	; 0x80
   18d3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   18d42:	f104 0120 	add.w	r1, r4, #32
   18d46:	e7d5      	b.n	18cf4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   18d48:	4608      	mov	r0, r1
   18d4a:	e7ec      	b.n	18d26 <tc_cmac_final+0x44>

00018d4c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   18d4c:	f002 bf02 	b.w	1bb54 <z_fatal_error>

00018d50 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   18d50:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   18d52:	6800      	ldr	r0, [r0, #0]
   18d54:	f002 befe 	b.w	1bb54 <z_fatal_error>

00018d58 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   18d58:	2100      	movs	r1, #0
   18d5a:	2001      	movs	r0, #1
   18d5c:	f7ff bff6 	b.w	18d4c <z_arm_fatal_error>

00018d60 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   18d60:	b508      	push	{r3, lr}
	handler();
   18d62:	f7ea f9e5 	bl	3130 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   18d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   18d6a:	f7ea bac5 	b.w	32f8 <z_arm_exc_exit>

00018d6e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   18d6e:	3901      	subs	r1, #1
   18d70:	4603      	mov	r3, r0
   18d72:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   18d76:	b90a      	cbnz	r2, 18d7c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   18d78:	701a      	strb	r2, [r3, #0]

	return dest;
}
   18d7a:	4770      	bx	lr
		*d = *s;
   18d7c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   18d80:	e7f7      	b.n	18d72 <strcpy+0x4>

00018d82 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   18d82:	b570      	push	{r4, r5, r6, lr}
   18d84:	4605      	mov	r5, r0
   18d86:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   18d88:	b142      	cbz	r2, 18d9c <strncpy+0x1a>
   18d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   18d8e:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   18d90:	b92c      	cbnz	r4, 18d9e <strncpy+0x1c>
   18d92:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   18d94:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   18d98:	429a      	cmp	r2, r3
   18d9a:	d1fb      	bne.n	18d94 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   18d9c:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   18d9e:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   18da2:	4632      	mov	r2, r6
   18da4:	e7ef      	b.n	18d86 <strncpy+0x4>

00018da6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   18da6:	4603      	mov	r3, r0
	size_t n = 0;
   18da8:	2000      	movs	r0, #0

	while (*s != '\0') {
   18daa:	5c1a      	ldrb	r2, [r3, r0]
   18dac:	b902      	cbnz	r2, 18db0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   18dae:	4770      	bx	lr
		n++;
   18db0:	3001      	adds	r0, #1
   18db2:	e7fa      	b.n	18daa <strlen+0x4>

00018db4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   18db4:	4603      	mov	r3, r0
	size_t n = 0;
   18db6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   18db8:	5c1a      	ldrb	r2, [r3, r0]
   18dba:	b10a      	cbz	r2, 18dc0 <strnlen+0xc>
   18dbc:	4288      	cmp	r0, r1
   18dbe:	d100      	bne.n	18dc2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   18dc0:	4770      	bx	lr
		n++;
   18dc2:	3001      	adds	r0, #1
   18dc4:	e7f8      	b.n	18db8 <strnlen+0x4>

00018dc6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   18dc6:	1e43      	subs	r3, r0, #1
   18dc8:	3901      	subs	r1, #1
   18dca:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   18dce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   18dd2:	4282      	cmp	r2, r0
   18dd4:	d101      	bne.n	18dda <strcmp+0x14>
   18dd6:	2a00      	cmp	r2, #0
   18dd8:	d1f7      	bne.n	18dca <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   18dda:	1a10      	subs	r0, r2, r0
   18ddc:	4770      	bx	lr

00018dde <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   18dde:	b510      	push	{r4, lr}
   18de0:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   18de2:	b15a      	cbz	r2, 18dfc <memcmp+0x1e>
   18de4:	3901      	subs	r1, #1
   18de6:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   18de8:	f813 0b01 	ldrb.w	r0, [r3], #1
   18dec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   18df0:	42a3      	cmp	r3, r4
   18df2:	d001      	beq.n	18df8 <memcmp+0x1a>
   18df4:	4290      	cmp	r0, r2
   18df6:	d0f7      	beq.n	18de8 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   18df8:	1a80      	subs	r0, r0, r2
}
   18dfa:	bd10      	pop	{r4, pc}
		return 0;
   18dfc:	4610      	mov	r0, r2
   18dfe:	e7fc      	b.n	18dfa <memcmp+0x1c>

00018e00 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   18e00:	b510      	push	{r4, lr}
   18e02:	1e43      	subs	r3, r0, #1
   18e04:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   18e06:	4291      	cmp	r1, r2
   18e08:	d100      	bne.n	18e0c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   18e0a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   18e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
   18e10:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   18e14:	e7f7      	b.n	18e06 <memcpy+0x6>

00018e16 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   18e16:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   18e18:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   18e1a:	4603      	mov	r3, r0
	while (n > 0) {
   18e1c:	4293      	cmp	r3, r2
   18e1e:	d100      	bne.n	18e22 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   18e20:	4770      	bx	lr
		*(d_byte++) = c_byte;
   18e22:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   18e26:	e7f9      	b.n	18e1c <memset+0x6>

00018e28 <_stdout_hook_default>:
}
   18e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e2c:	4770      	bx	lr

00018e2e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   18e2e:	b084      	sub	sp, #16
   18e30:	ab04      	add	r3, sp, #16
   18e32:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   18e36:	f89d 3004 	ldrb.w	r3, [sp, #4]
   18e3a:	2b06      	cmp	r3, #6
   18e3c:	d108      	bne.n	18e50 <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   18e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18e42:	2201      	movs	r2, #1
   18e44:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   18e48:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   18e4c:	bf20      	wfe
    while (true)
   18e4e:	e7fd      	b.n	18e4c <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   18e50:	b004      	add	sp, #16
   18e52:	4770      	bx	lr

00018e54 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   18e54:	b084      	sub	sp, #16
   18e56:	ab04      	add	r3, sp, #16
   18e58:	e903 0007 	stmdb	r3, {r0, r1, r2}
   18e5c:	2300      	movs	r3, #0
   18e5e:	f383 8811 	msr	BASEPRI, r3
   18e62:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   18e66:	b004      	add	sp, #16
   18e68:	4770      	bx	lr

00018e6a <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   18e6a:	b530      	push	{r4, r5, lr}
   18e6c:	b085      	sub	sp, #20
   18e6e:	4604      	mov	r4, r0
   18e70:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   18e72:	4668      	mov	r0, sp
   18e74:	2203      	movs	r2, #3
   18e76:	f7ff ffc3 	bl	18e00 <memcpy>
	(void)memset(res + 3, 0, 13);
   18e7a:	220d      	movs	r2, #13
   18e7c:	2100      	movs	r1, #0
   18e7e:	f10d 0003 	add.w	r0, sp, #3
   18e82:	f7ff ffc8 	bl	18e16 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   18e86:	4620      	mov	r0, r4
   18e88:	466a      	mov	r2, sp
   18e8a:	4669      	mov	r1, sp
   18e8c:	f7f0 fce8 	bl	9860 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   18e90:	4604      	mov	r4, r0
   18e92:	b920      	cbnz	r0, 18e9e <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   18e94:	2203      	movs	r2, #3
   18e96:	4669      	mov	r1, sp
   18e98:	4628      	mov	r0, r5
   18e9a:	f7ff ffb1 	bl	18e00 <memcpy>

	return 0;
}
   18e9e:	4620      	mov	r0, r4
   18ea0:	b005      	add	sp, #20
   18ea2:	bd30      	pop	{r4, r5, pc}

00018ea4 <bt_rpa_create>:
}
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   18ea4:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   18ea6:	1cce      	adds	r6, r1, #3
{
   18ea8:	4605      	mov	r5, r0
   18eaa:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   18eac:	4630      	mov	r0, r6
   18eae:	2103      	movs	r1, #3
   18eb0:	f7f0 fcd4 	bl	985c <bt_rand>
	if (err) {
   18eb4:	b960      	cbnz	r0, 18ed0 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   18eb6:	7963      	ldrb	r3, [r4, #5]
   18eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   18ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18ec0:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   18ec2:	4622      	mov	r2, r4
   18ec4:	4631      	mov	r1, r6
   18ec6:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   18ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   18ecc:	f7ff bfcd 	b.w	18e6a <ah>
}
   18ed0:	bd70      	pop	{r4, r5, r6, pc}

00018ed2 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   18ed2:	b510      	push	{r4, lr}
   18ed4:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   18ed6:	7801      	ldrb	r1, [r0, #0]
   18ed8:	7822      	ldrb	r2, [r4, #0]
   18eda:	428a      	cmp	r2, r1
{
   18edc:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   18ede:	d00f      	beq.n	18f00 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   18ee0:	4669      	mov	r1, sp
   18ee2:	f7ea fc55 	bl	3790 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   18ee6:	a905      	add	r1, sp, #20
   18ee8:	4620      	mov	r0, r4
   18eea:	f7ea fc51 	bl	3790 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   18eee:	2210      	movs	r2, #16
   18ef0:	f10d 0115 	add.w	r1, sp, #21
   18ef4:	f10d 0001 	add.w	r0, sp, #1
   18ef8:	f7ff ff71 	bl	18dde <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   18efc:	b00a      	add	sp, #40	; 0x28
   18efe:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   18f00:	2a01      	cmp	r2, #1
   18f02:	d006      	beq.n	18f12 <bt_uuid_cmp+0x40>
   18f04:	2a02      	cmp	r2, #2
   18f06:	d007      	beq.n	18f18 <bt_uuid_cmp+0x46>
   18f08:	b972      	cbnz	r2, 18f28 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   18f0a:	8840      	ldrh	r0, [r0, #2]
   18f0c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   18f0e:	1ac0      	subs	r0, r0, r3
   18f10:	e7f4      	b.n	18efc <bt_uuid_cmp+0x2a>
   18f12:	6840      	ldr	r0, [r0, #4]
   18f14:	6863      	ldr	r3, [r4, #4]
   18f16:	e7fa      	b.n	18f0e <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   18f18:	2210      	movs	r2, #16
   18f1a:	1c61      	adds	r1, r4, #1
   18f1c:	3001      	adds	r0, #1
}
   18f1e:	b00a      	add	sp, #40	; 0x28
   18f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   18f24:	f7ff bf5b 	b.w	18dde <memcmp>
	switch (u1->type) {
   18f28:	f06f 0015 	mvn.w	r0, #21
   18f2c:	e7e6      	b.n	18efc <bt_uuid_cmp+0x2a>

00018f2e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   18f2e:	2a04      	cmp	r2, #4
{
   18f30:	b510      	push	{r4, lr}
	switch (data_len) {
   18f32:	d00a      	beq.n	18f4a <bt_uuid_create+0x1c>
   18f34:	2a10      	cmp	r2, #16
   18f36:	d00d      	beq.n	18f54 <bt_uuid_create+0x26>
   18f38:	2a02      	cmp	r2, #2
   18f3a:	f04f 0300 	mov.w	r3, #0
   18f3e:	d10f      	bne.n	18f60 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   18f40:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   18f42:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   18f44:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   18f46:	2001      	movs	r0, #1
}
   18f48:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   18f4a:	2301      	movs	r3, #1
   18f4c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   18f4e:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   18f50:	6042      	str	r2, [r0, #4]
		break;
   18f52:	e7f8      	b.n	18f46 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   18f54:	2302      	movs	r3, #2
   18f56:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   18f5a:	f7ff ff51 	bl	18e00 <memcpy>
		break;
   18f5e:	e7f2      	b.n	18f46 <bt_uuid_create+0x18>
	switch (data_len) {
   18f60:	4618      	mov	r0, r3
   18f62:	e7f1      	b.n	18f48 <bt_uuid_create+0x1a>

00018f64 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   18f64:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   18f66:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   18f68:	2106      	movs	r1, #6
{
   18f6a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   18f6c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   18f70:	f7f0 fc74 	bl	985c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   18f74:	b918      	cbnz	r0, 18f7e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   18f76:	79a3      	ldrb	r3, [r4, #6]
   18f78:	f063 033f 	orn	r3, r3, #63	; 0x3f
   18f7c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   18f7e:	bd10      	pop	{r4, pc}

00018f80 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   18f80:	280f      	cmp	r0, #15
   18f82:	d806      	bhi.n	18f92 <bt_hci_evt_get_flags+0x12>
   18f84:	280d      	cmp	r0, #13
   18f86:	d80b      	bhi.n	18fa0 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   18f88:	2805      	cmp	r0, #5
   18f8a:	bf14      	ite	ne
   18f8c:	2002      	movne	r0, #2
   18f8e:	2003      	moveq	r0, #3
   18f90:	4770      	bx	lr
	switch (evt) {
   18f92:	2813      	cmp	r0, #19
   18f94:	d004      	beq.n	18fa0 <bt_hci_evt_get_flags+0x20>
   18f96:	281a      	cmp	r0, #26
   18f98:	bf14      	ite	ne
   18f9a:	2002      	movne	r0, #2
   18f9c:	2001      	moveq	r0, #1
   18f9e:	4770      	bx	lr
   18fa0:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   18fa2:	4770      	bx	lr

00018fa4 <handle_event>:
{
   18fa4:	b410      	push	{r4}
   18fa6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18faa:	4604      	mov	r4, r0
   18fac:	4608      	mov	r0, r1
		if (handler->event != event) {
   18fae:	7811      	ldrb	r1, [r2, #0]
   18fb0:	42a1      	cmp	r1, r4
   18fb2:	d004      	beq.n	18fbe <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   18fb4:	3208      	adds	r2, #8
   18fb6:	429a      	cmp	r2, r3
   18fb8:	d1f9      	bne.n	18fae <handle_event+0xa>
}
   18fba:	bc10      	pop	{r4}
   18fbc:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   18fbe:	8981      	ldrh	r1, [r0, #12]
   18fc0:	7853      	ldrb	r3, [r2, #1]
   18fc2:	4299      	cmp	r1, r3
   18fc4:	d3f9      	bcc.n	18fba <handle_event+0x16>
		handler->handler(buf);
   18fc6:	6853      	ldr	r3, [r2, #4]
}
   18fc8:	bc10      	pop	{r4}
		handler->handler(buf);
   18fca:	4718      	bx	r3

00018fcc <hci_data_buf_overflow>:
}
   18fcc:	4770      	bx	lr

00018fce <atomic_or>:
{
   18fce:	4603      	mov	r3, r0
}
   18fd0:	f3bf 8f5b 	dmb	ish
   18fd4:	e853 0f00 	ldrex	r0, [r3]
   18fd8:	ea40 0201 	orr.w	r2, r0, r1
   18fdc:	e843 2c00 	strex	ip, r2, [r3]
   18fe0:	f1bc 0f00 	cmp.w	ip, #0
   18fe4:	d1f6      	bne.n	18fd4 <atomic_or+0x6>
   18fe6:	f3bf 8f5b 	dmb	ish
   18fea:	4770      	bx	lr

00018fec <hci_disconn_complete>:
{
   18fec:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   18fee:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   18ff0:	782e      	ldrb	r6, [r5, #0]
   18ff2:	b97e      	cbnz	r6, 19014 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   18ff4:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   18ff8:	f7ec f8f2 	bl	51e0 <bt_conn_lookup_handle>
	if (!conn) {
   18ffc:	4604      	mov	r4, r0
   18ffe:	b148      	cbz	r0, 19014 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   19000:	78eb      	ldrb	r3, [r5, #3]
   19002:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19004:	4631      	mov	r1, r6
   19006:	f7ec f8f3 	bl	51f0 <bt_conn_set_state>
		bt_conn_unref(conn);
   1900a:	4620      	mov	r0, r4
}
   1900c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   19010:	f000 bc8b 	b.w	1992a <bt_conn_unref>
}
   19014:	bd70      	pop	{r4, r5, r6, pc}

00019016 <le_data_len_change>:
{
   19016:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19018:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1901a:	8818      	ldrh	r0, [r3, #0]
   1901c:	f7ec f8e0 	bl	51e0 <bt_conn_lookup_handle>
	if (!conn) {
   19020:	b118      	cbz	r0, 1902a <le_data_len_change+0x14>
}
   19022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   19026:	f000 bc80 	b.w	1992a <bt_conn_unref>
}
   1902a:	bd08      	pop	{r3, pc}

0001902c <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   1902c:	2101      	movs	r1, #1
   1902e:	3008      	adds	r0, #8
   19030:	f001 bee8 	b.w	1ae04 <net_buf_simple_pull_mem>

00019034 <le_conn_update_complete>:
{
   19034:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   19036:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   19038:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1903c:	f7ec f8d0 	bl	51e0 <bt_conn_lookup_handle>
	if (!conn) {
   19040:	4604      	mov	r4, r0
   19042:	2800      	cmp	r0, #0
   19044:	d03c      	beq.n	190c0 <le_conn_update_complete+0x8c>
	if (!evt->status) {
   19046:	782b      	ldrb	r3, [r5, #0]
   19048:	b9cb      	cbnz	r3, 1907e <le_conn_update_complete+0x4a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1904a:	792a      	ldrb	r2, [r5, #4]
   1904c:	78eb      	ldrb	r3, [r5, #3]
   1904e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19052:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   19056:	79aa      	ldrb	r2, [r5, #6]
   19058:	796b      	ldrb	r3, [r5, #5]
   1905a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1905e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   19062:	79eb      	ldrb	r3, [r5, #7]
   19064:	7a2a      	ldrb	r2, [r5, #8]
   19066:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1906a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1906e:	f7ec f985 	bl	537c <notify_le_param_updated>
	bt_conn_unref(conn);
   19072:	4620      	mov	r0, r4
}
   19074:	b003      	add	sp, #12
   19076:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   1907a:	f000 bc56 	b.w	1992a <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1907e:	2b1a      	cmp	r3, #26
   19080:	d1f7      	bne.n	19072 <le_conn_update_complete+0x3e>
   19082:	78c3      	ldrb	r3, [r0, #3]
   19084:	2b01      	cmp	r3, #1
   19086:	d1f4      	bne.n	19072 <le_conn_update_complete+0x3e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   19088:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1908c:	3004      	adds	r0, #4
   1908e:	f7ff ff9e 	bl	18fce <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   19092:	0543      	lsls	r3, r0, #21
   19094:	d4ed      	bmi.n	19072 <le_conn_update_complete+0x3e>
		param.interval_min = conn->le.interval_min;
   19096:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   1909a:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   1909e:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   190a2:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   190a6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   190aa:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   190ae:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   190b0:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   190b4:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   190b8:	4620      	mov	r0, r4
   190ba:	f7ec fc15 	bl	58e8 <bt_l2cap_update_conn_param>
   190be:	e7d8      	b.n	19072 <le_conn_update_complete+0x3e>
}
   190c0:	b003      	add	sp, #12
   190c2:	bd30      	pop	{r4, r5, pc}

000190c4 <hci_vendor_event>:
   190c4:	4770      	bx	lr

000190c6 <hci_num_completed_packets>:
{
   190c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   190ca:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   190cc:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   190ce:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   190d0:	783b      	ldrb	r3, [r7, #0]
   190d2:	429d      	cmp	r5, r3
   190d4:	db01      	blt.n	190da <hci_num_completed_packets+0x14>
}
   190d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   190da:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   190de:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   190e2:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   190e6:	f7ec f87b 	bl	51e0 <bt_conn_lookup_handle>
		if (!conn) {
   190ea:	4604      	mov	r4, r0
   190ec:	b350      	cbz	r0, 19144 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   190ee:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   190f2:	b326      	cbz	r6, 1913e <hci_num_completed_packets+0x78>
	__asm__ volatile(
   190f4:	f04f 0320 	mov.w	r3, #32
   190f8:	f3ef 8211 	mrs	r2, BASEPRI
   190fc:	f383 8812 	msr	BASEPRI_MAX, r3
   19100:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   19104:	69e3      	ldr	r3, [r4, #28]
   19106:	b16b      	cbz	r3, 19124 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   19108:	3b01      	subs	r3, #1
   1910a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1910c:	f382 8811 	msr	BASEPRI, r2
   19110:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   19114:	4620      	mov	r0, r4
   19116:	f7eb ffb7 	bl	5088 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1911a:	3e01      	subs	r6, #1
   1911c:	f7fe f8aa 	bl	17274 <z_impl_k_sem_give>
   19120:	b2b6      	uxth	r6, r6
   19122:	e7e6      	b.n	190f2 <hci_num_completed_packets+0x2c>
	return list->head;
   19124:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   19126:	b12b      	cbz	r3, 19134 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19128:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1912a:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1912c:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1912e:	428b      	cmp	r3, r1
	list->tail = node;
   19130:	bf08      	it	eq
   19132:	61a0      	streq	r0, [r4, #24]
   19134:	f382 8811 	msr	BASEPRI, r2
   19138:	f3bf 8f6f 	isb	sy
			if (!node) {
   1913c:	b923      	cbnz	r3, 19148 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   1913e:	4620      	mov	r0, r4
   19140:	f000 fbf3 	bl	1992a <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   19144:	3501      	adds	r5, #1
   19146:	e7c3      	b.n	190d0 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   19148:	f04f 0220 	mov.w	r2, #32
   1914c:	f3ef 8111 	mrs	r1, BASEPRI
   19150:	f382 8812 	msr	BASEPRI_MAX, r2
   19154:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   19158:	68da      	ldr	r2, [r3, #12]
   1915a:	61e2      	str	r2, [r4, #28]
	return list->tail;
   1915c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   1915e:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   19162:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   19166:	b94a      	cbnz	r2, 1917c <hci_num_completed_packets+0xb6>
	list->head = node;
   19168:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1916c:	f381 8811 	msr	BASEPRI, r1
   19170:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   19174:	4648      	mov	r0, r9
   19176:	f7fe f9e9 	bl	1754c <k_work_submit>
   1917a:	e7cb      	b.n	19114 <hci_num_completed_packets+0x4e>
	parent->next = child;
   1917c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1917e:	6263      	str	r3, [r4, #36]	; 0x24
}
   19180:	e7f4      	b.n	1916c <hci_num_completed_packets+0xa6>

00019182 <hci_le_read_max_data_len>:
{
   19182:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19184:	4606      	mov	r6, r0
   19186:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   19188:	aa01      	add	r2, sp, #4
   1918a:	2100      	movs	r1, #0
   1918c:	f242 002f 	movw	r0, #8239	; 0x202f
   19190:	f7ea fcb6 	bl	3b00 <bt_hci_cmd_send_sync>
	if (err) {
   19194:	4604      	mov	r4, r0
   19196:	b948      	cbnz	r0, 191ac <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   19198:	9801      	ldr	r0, [sp, #4]
   1919a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1919c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   191a0:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   191a2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   191a6:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   191a8:	f7fb f8da 	bl	14360 <net_buf_unref>
}
   191ac:	4620      	mov	r0, r4
   191ae:	b002      	add	sp, #8
   191b0:	bd70      	pop	{r4, r5, r6, pc}

000191b2 <bt_hci_disconnect>:
{
   191b2:	b570      	push	{r4, r5, r6, lr}
   191b4:	4606      	mov	r6, r0
   191b6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   191b8:	f240 4006 	movw	r0, #1030	; 0x406
   191bc:	2103      	movs	r1, #3
   191be:	f7ea fc65 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
   191c2:	4604      	mov	r4, r0
   191c4:	b168      	cbz	r0, 191e2 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   191c6:	2103      	movs	r1, #3
   191c8:	3008      	adds	r0, #8
   191ca:	f001 fdf4 	bl	1adb6 <net_buf_simple_add>
	disconn->reason = reason;
   191ce:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   191d0:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   191d2:	4621      	mov	r1, r4
   191d4:	2200      	movs	r2, #0
}
   191d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   191da:	f240 4006 	movw	r0, #1030	; 0x406
   191de:	f7ea bc8f 	b.w	3b00 <bt_hci_cmd_send_sync>
}
   191e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   191e6:	bd70      	pop	{r4, r5, r6, pc}

000191e8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   191e8:	8803      	ldrh	r3, [r0, #0]
   191ea:	8842      	ldrh	r2, [r0, #2]
   191ec:	4293      	cmp	r3, r2
{
   191ee:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   191f0:	d819      	bhi.n	19226 <bt_le_conn_params_valid+0x3e>
   191f2:	2b05      	cmp	r3, #5
   191f4:	d917      	bls.n	19226 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   191f6:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   191fa:	d814      	bhi.n	19226 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   191fc:	8883      	ldrh	r3, [r0, #4]
   191fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   19202:	d210      	bcs.n	19226 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   19204:	88c0      	ldrh	r0, [r0, #6]
   19206:	f1a0 010a 	sub.w	r1, r0, #10
   1920a:	b289      	uxth	r1, r1
   1920c:	f640 4476 	movw	r4, #3190	; 0xc76
   19210:	42a1      	cmp	r1, r4
   19212:	d808      	bhi.n	19226 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   19214:	3301      	adds	r3, #1
   19216:	b29b      	uxth	r3, r3
   19218:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1921a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1921e:	bf34      	ite	cc
   19220:	2001      	movcc	r0, #1
   19222:	2000      	movcs	r0, #0
}
   19224:	bd10      	pop	{r4, pc}
		return false;
   19226:	2000      	movs	r0, #0
   19228:	e7fc      	b.n	19224 <bt_le_conn_params_valid+0x3c>

0001922a <bt_le_set_data_len>:
{
   1922a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1922c:	4607      	mov	r7, r0
   1922e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   19230:	f242 0022 	movw	r0, #8226	; 0x2022
   19234:	2106      	movs	r1, #6
{
   19236:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   19238:	f7ea fc28 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
   1923c:	4604      	mov	r4, r0
   1923e:	b170      	cbz	r0, 1925e <bt_le_set_data_len+0x34>
   19240:	2106      	movs	r1, #6
   19242:	3008      	adds	r0, #8
   19244:	f001 fdb7 	bl	1adb6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   19248:	883b      	ldrh	r3, [r7, #0]
   1924a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1924c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1924e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   19250:	4621      	mov	r1, r4
   19252:	f242 0022 	movw	r0, #8226	; 0x2022
}
   19256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1925a:	f7ea bcbb 	b.w	3bd4 <bt_hci_cmd_send>
}
   1925e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019264 <bt_le_set_phy>:
{
   19264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19268:	4680      	mov	r8, r0
   1926a:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1926c:	f242 0032 	movw	r0, #8242	; 0x2032
   19270:	2107      	movs	r1, #7
{
   19272:	f89d 9020 	ldrb.w	r9, [sp, #32]
   19276:	4616      	mov	r6, r2
   19278:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1927a:	f7ea fc07 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
   1927e:	4604      	mov	r4, r0
   19280:	b190      	cbz	r0, 192a8 <bt_le_set_phy+0x44>
   19282:	2107      	movs	r1, #7
   19284:	3008      	adds	r0, #8
   19286:	f001 fd96 	bl	1adb6 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1928a:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1928e:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   19290:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   19292:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   19294:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   19296:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1929a:	4621      	mov	r1, r4
   1929c:	f242 0032 	movw	r0, #8242	; 0x2032
}
   192a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   192a4:	f7ea bc96 	b.w	3bd4 <bt_hci_cmd_send>
}
   192a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   192ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000192b0 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   192b0:	6880      	ldr	r0, [r0, #8]
   192b2:	f7ea bd13 	b.w	3cdc <bt_hci_le_enh_conn_complete>

000192b6 <le_legacy_conn_complete>:
{
   192b6:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   192b8:	6881      	ldr	r1, [r0, #8]
{
   192ba:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   192bc:	780b      	ldrb	r3, [r1, #0]
   192be:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   192c2:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   192c6:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   192ca:	78cb      	ldrb	r3, [r1, #3]
   192cc:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   192d0:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   192d4:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   192d8:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   192dc:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   192e0:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   192e4:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   192e8:	7c4b      	ldrb	r3, [r1, #17]
   192ea:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   192ee:	2207      	movs	r2, #7
   192f0:	3104      	adds	r1, #4
   192f2:	a803      	add	r0, sp, #12
   192f4:	f7ff fd84 	bl	18e00 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   192f8:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   192fa:	4669      	mov	r1, sp
   192fc:	2206      	movs	r2, #6
   192fe:	f10d 0013 	add.w	r0, sp, #19
   19302:	9400      	str	r4, [sp, #0]
   19304:	f8ad 4004 	strh.w	r4, [sp, #4]
   19308:	f7ff fd7a 	bl	18e00 <memcpy>
   1930c:	2206      	movs	r2, #6
   1930e:	4669      	mov	r1, sp
   19310:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   19314:	9400      	str	r4, [sp, #0]
   19316:	f8ad 4004 	strh.w	r4, [sp, #4]
   1931a:	f7ff fd71 	bl	18e00 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1931e:	a802      	add	r0, sp, #8
   19320:	f7ea fcdc 	bl	3cdc <bt_hci_le_enh_conn_complete>
}
   19324:	b00a      	add	sp, #40	; 0x28
   19326:	bd10      	pop	{r4, pc}

00019328 <le_phy_update_complete>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19328:	6883      	ldr	r3, [r0, #8]
{
   1932a:	b510      	push	{r4, lr}
	conn = bt_conn_lookup_handle(handle);
   1932c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   19330:	f7eb ff56 	bl	51e0 <bt_conn_lookup_handle>
	if (!conn) {
   19334:	4604      	mov	r4, r0
   19336:	b1d0      	cbz	r0, 1936e <le_phy_update_complete+0x46>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19338:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1933c:	3004      	adds	r0, #4
   1933e:	e850 3f00 	ldrex	r3, [r0]
   19342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   19346:	e840 2100 	strex	r1, r2, [r0]
   1934a:	2900      	cmp	r1, #0
   1934c:	d1f7      	bne.n	1933e <le_phy_update_complete+0x16>
   1934e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   19352:	061b      	lsls	r3, r3, #24
   19354:	d506      	bpl.n	19364 <le_phy_update_complete+0x3c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   19356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1935a:	f7ff fe38 	bl	18fce <atomic_or>
		conn_auto_initiate(conn);
   1935e:	4620      	mov	r0, r4
   19360:	f7ea fc5a 	bl	3c18 <conn_auto_initiate>
	bt_conn_unref(conn);
   19364:	4620      	mov	r0, r4
}
   19366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1936a:	f000 bade 	b.w	1992a <bt_conn_unref>
}
   1936e:	bd10      	pop	{r4, pc}

00019370 <le_remote_feat_complete>:
{
   19370:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   19372:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   19374:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   19378:	f7eb ff32 	bl	51e0 <bt_conn_lookup_handle>
	if (!conn) {
   1937c:	4604      	mov	r4, r0
   1937e:	b198      	cbz	r0, 193a8 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   19380:	782b      	ldrb	r3, [r5, #0]
   19382:	b923      	cbnz	r3, 1938e <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   19384:	2208      	movs	r2, #8
   19386:	1ce9      	adds	r1, r5, #3
   19388:	30ac      	adds	r0, #172	; 0xac
   1938a:	f7ff fd39 	bl	18e00 <memcpy>
   1938e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   19392:	1d20      	adds	r0, r4, #4
   19394:	f7ff fe1b 	bl	18fce <atomic_or>
	conn_auto_initiate(conn);
   19398:	4620      	mov	r0, r4
   1939a:	f7ea fc3d 	bl	3c18 <conn_auto_initiate>
	bt_conn_unref(conn);
   1939e:	4620      	mov	r0, r4
}
   193a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   193a4:	f000 bac1 	b.w	1992a <bt_conn_unref>
}
   193a8:	bd38      	pop	{r3, r4, r5, pc}

000193aa <le_conn_param_neg_reply>:
{
   193aa:	b570      	push	{r4, r5, r6, lr}
   193ac:	4606      	mov	r6, r0
   193ae:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   193b0:	f242 0021 	movw	r0, #8225	; 0x2021
   193b4:	2103      	movs	r1, #3
   193b6:	f7ea fb69 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
   193ba:	4604      	mov	r4, r0
   193bc:	b160      	cbz	r0, 193d8 <le_conn_param_neg_reply+0x2e>
   193be:	2103      	movs	r1, #3
   193c0:	3008      	adds	r0, #8
   193c2:	f001 fcf8 	bl	1adb6 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   193c6:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   193c8:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   193ca:	4621      	mov	r1, r4
   193cc:	f242 0021 	movw	r0, #8225	; 0x2021
}
   193d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   193d4:	f7ea bbfe 	b.w	3bd4 <bt_hci_cmd_send>
}
   193d8:	bd70      	pop	{r4, r5, r6, pc}

000193da <le_conn_param_req>:
{
   193da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   193dc:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   193de:	78d9      	ldrb	r1, [r3, #3]
   193e0:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   193e2:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   193e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   193e8:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   193ec:	7959      	ldrb	r1, [r3, #5]
   193ee:	791a      	ldrb	r2, [r3, #4]
   193f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   193f4:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   193f8:	799a      	ldrb	r2, [r3, #6]
   193fa:	79d9      	ldrb	r1, [r3, #7]
   193fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19400:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   19404:	7a1a      	ldrb	r2, [r3, #8]
   19406:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   19408:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1940a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1940e:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   19410:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   19414:	f7eb fee4 	bl	51e0 <bt_conn_lookup_handle>
	if (!conn) {
   19418:	4606      	mov	r6, r0
   1941a:	b928      	cbnz	r0, 19428 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1941c:	2102      	movs	r1, #2
   1941e:	4620      	mov	r0, r4
   19420:	f7ff ffc3 	bl	193aa <le_conn_param_neg_reply>
}
   19424:	b003      	add	sp, #12
   19426:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   19428:	4669      	mov	r1, sp
   1942a:	f7eb fff3 	bl	5414 <le_param_req>
   1942e:	b938      	cbnz	r0, 19440 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   19430:	211e      	movs	r1, #30
   19432:	4620      	mov	r0, r4
   19434:	f7ff ffb9 	bl	193aa <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   19438:	4630      	mov	r0, r6
   1943a:	f000 fa76 	bl	1992a <bt_conn_unref>
   1943e:	e7f1      	b.n	19424 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   19440:	210e      	movs	r1, #14
   19442:	f242 0020 	movw	r0, #8224	; 0x2020
   19446:	f7ea fb21 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
   1944a:	4605      	mov	r5, r0
   1944c:	2800      	cmp	r0, #0
   1944e:	d0f3      	beq.n	19438 <le_conn_param_req+0x5e>
   19450:	210e      	movs	r1, #14
   19452:	3008      	adds	r0, #8
   19454:	f001 fcaf 	bl	1adb6 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   19458:	220e      	movs	r2, #14
   1945a:	4604      	mov	r4, r0
   1945c:	2100      	movs	r1, #0
   1945e:	f7ff fcda 	bl	18e16 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   19462:	f8bd 3000 	ldrh.w	r3, [sp]
   19466:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   19468:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1946c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1946e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   19472:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   19474:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   19478:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1947a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1947c:	4629      	mov	r1, r5
   1947e:	f242 0020 	movw	r0, #8224	; 0x2020
   19482:	f7ea fba7 	bl	3bd4 <bt_hci_cmd_send>
   19486:	e7d7      	b.n	19438 <le_conn_param_req+0x5e>

00019488 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   19488:	2000      	movs	r0, #0
   1948a:	4770      	bx	lr

0001948c <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1948c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1948e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   19492:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   19494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19498:	2100      	movs	r1, #0
{
   1949a:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1949c:	f7ea f9d8 	bl	3850 <bt_buf_get_evt>
   194a0:	2102      	movs	r1, #2
   194a2:	4604      	mov	r4, r0
   194a4:	3008      	adds	r0, #8
   194a6:	f001 fc86 	bl	1adb6 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   194aa:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   194ac:	7045      	strb	r5, [r0, #1]

	return buf;
}
   194ae:	4620      	mov	r0, r4
   194b0:	bd70      	pop	{r4, r5, r6, pc}

000194b2 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   194b2:	3103      	adds	r1, #3
{
   194b4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   194b6:	b2c9      	uxtb	r1, r1
{
   194b8:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   194ba:	200e      	movs	r0, #14
   194bc:	f7ff ffe6 	bl	1948c <bt_hci_evt_create>
   194c0:	2103      	movs	r1, #3
   194c2:	4604      	mov	r4, r0
   194c4:	3008      	adds	r0, #8
   194c6:	f001 fc76 	bl	1adb6 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   194ca:	2301      	movs	r3, #1
   194cc:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   194ce:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   194d2:	4620      	mov	r0, r4
   194d4:	bd38      	pop	{r3, r4, r5, pc}

000194d6 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   194d6:	b570      	push	{r4, r5, r6, lr}
   194d8:	4605      	mov	r5, r0
   194da:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   194dc:	200f      	movs	r0, #15
   194de:	2104      	movs	r1, #4
   194e0:	f7ff ffd4 	bl	1948c <bt_hci_evt_create>
   194e4:	2104      	movs	r1, #4
   194e6:	4604      	mov	r4, r0
   194e8:	3008      	adds	r0, #8
   194ea:	f001 fc64 	bl	1adb6 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   194ee:	2201      	movs	r2, #1
	cs->status = status;
   194f0:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   194f2:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   194f4:	8045      	strh	r5, [r0, #2]

	return buf;
}
   194f6:	4620      	mov	r0, r4
   194f8:	bd70      	pop	{r4, r5, r6, pc}

000194fa <bt_lookup_id_addr>:
}
   194fa:	4608      	mov	r0, r1
   194fc:	4770      	bx	lr

000194fe <bt_id_set_adv_private_addr>:
{
   194fe:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   19500:	2106      	movs	r1, #6
   19502:	4668      	mov	r0, sp
   19504:	f7f0 f9aa 	bl	985c <bt_rand>
	if (err) {
   19508:	b940      	cbnz	r0, 1951c <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1950a:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1950e:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   19510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19514:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   19518:	f7eb f8cc 	bl	46b4 <set_random_address>
}
   1951c:	b003      	add	sp, #12
   1951e:	f85d fb04 	ldr.w	pc, [sp], #4

00019522 <bt_id_adv_random_addr_check>:
}
   19522:	2001      	movs	r0, #1
   19524:	4770      	bx	lr

00019526 <get_adv_channel_map>:
{
   19526:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   19528:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1952c:	bf0c      	ite	eq
   1952e:	2007      	moveq	r0, #7
   19530:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   19532:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   19534:	bf48      	it	mi
   19536:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1953a:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1953c:	bf48      	it	mi
   1953e:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   19542:	4770      	bx	lr

00019544 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19544:	f3bf 8f5b 	dmb	ish
   19548:	6800      	ldr	r0, [r0, #0]
   1954a:	f3bf 8f5b 	dmb	ish
}
   1954e:	4770      	bx	lr

00019550 <atomic_and>:
{
   19550:	4603      	mov	r3, r0
}
   19552:	f3bf 8f5b 	dmb	ish
   19556:	e853 0f00 	ldrex	r0, [r3]
   1955a:	ea00 0201 	and.w	r2, r0, r1
   1955e:	e843 2c00 	strex	ip, r2, [r3]
   19562:	f1bc 0f00 	cmp.w	ip, #0
   19566:	d1f6      	bne.n	19556 <atomic_and+0x6>
   19568:	f3bf 8f5b 	dmb	ish
   1956c:	4770      	bx	lr

0001956e <hci_set_ad>:
{
   1956e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19572:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   19574:	2120      	movs	r1, #32
{
   19576:	4682      	mov	sl, r0
   19578:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1957a:	f7ea fa87 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
   1957e:	4605      	mov	r5, r0
   19580:	2800      	cmp	r0, #0
   19582:	d04a      	beq.n	1961a <hci_set_ad+0xac>
   19584:	2120      	movs	r1, #32
   19586:	3008      	adds	r0, #8
   19588:	f001 fc15 	bl	1adb6 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1958c:	2220      	movs	r2, #32
   1958e:	2100      	movs	r1, #0
   19590:	4681      	mov	r9, r0
   19592:	f7ff fc40 	bl	18e16 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   19596:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   1959a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1959e:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   195a0:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   195a2:	f8d4 8000 	ldr.w	r8, [r4]
   195a6:	2300      	movs	r3, #0
   195a8:	6862      	ldr	r2, [r4, #4]
   195aa:	4293      	cmp	r3, r2
   195ac:	d30d      	bcc.n	195ca <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   195ae:	9b00      	ldr	r3, [sp, #0]
   195b0:	3408      	adds	r4, #8
   195b2:	42a3      	cmp	r3, r4
   195b4:	d1f5      	bne.n	195a2 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   195b6:	2200      	movs	r2, #0
   195b8:	4629      	mov	r1, r5
   195ba:	4650      	mov	r0, sl
	*data_len = set_data_len;
   195bc:	f889 6000 	strb.w	r6, [r9]
}
   195c0:	b003      	add	sp, #12
   195c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   195c6:	f7ea ba9b 	b.w	3b00 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   195ca:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   195ce:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   195d2:	1cb0      	adds	r0, r6, #2
   195d4:	1811      	adds	r1, r2, r0
   195d6:	291f      	cmp	r1, #31
   195d8:	d908      	bls.n	195ec <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   195da:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   195de:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   195e2:	d11f      	bne.n	19624 <hci_set_ad+0xb6>
   195e4:	2a00      	cmp	r2, #0
   195e6:	dd1d      	ble.n	19624 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   195e8:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   195ec:	b2d7      	uxtb	r7, r2
   195ee:	1c79      	adds	r1, r7, #1
   195f0:	f80b 1006 	strb.w	r1, [fp, r6]
   195f4:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   195f6:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   195f8:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   195fc:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   19600:	f8d8 1004 	ldr.w	r1, [r8, #4]
   19604:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   19606:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   19608:	f7ff fbfa 	bl	18e00 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1960c:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   1960e:	443e      	add	r6, r7
   19610:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
   19612:	3301      	adds	r3, #1
   19614:	f108 0808 	add.w	r8, r8, #8
   19618:	e7c6      	b.n	195a8 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1961a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1961e:	b003      	add	sp, #12
   19620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   19624:	4628      	mov	r0, r5
   19626:	f7fa fe9b 	bl	14360 <net_buf_unref>
		return err;
   1962a:	f06f 0015 	mvn.w	r0, #21
   1962e:	e7f6      	b.n	1961e <hci_set_ad+0xb0>

00019630 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   19630:	2301      	movs	r3, #1
{
   19632:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   19634:	fa03 f101 	lsl.w	r1, r3, r1
{
   19638:	4604      	mov	r4, r0
	if (val) {
   1963a:	b162      	cbz	r2, 19656 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1963c:	f3bf 8f5b 	dmb	ish
   19640:	e854 3f00 	ldrex	r3, [r4]
   19644:	430b      	orrs	r3, r1
   19646:	e844 3200 	strex	r2, r3, [r4]
   1964a:	2a00      	cmp	r2, #0
   1964c:	d1f8      	bne.n	19640 <atomic_set_bit_to+0x10>
   1964e:	f3bf 8f5b 	dmb	ish
	}
}
   19652:	bc10      	pop	{r4}
   19654:	4770      	bx	lr
   19656:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19658:	43c9      	mvns	r1, r1
   1965a:	f7ff bf79 	b.w	19550 <atomic_and>

0001965e <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1965e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19662:	b087      	sub	sp, #28
   19664:	4605      	mov	r5, r0
   19666:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   1966a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   1966e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   19672:	460c      	mov	r4, r1
   19674:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   19676:	2100      	movs	r1, #0
   19678:	2210      	movs	r2, #16
   1967a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1967c:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   1967e:	f7ff fbca 	bl	18e16 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   19682:	b186      	cbz	r6, 196a6 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   19684:	f7ea fff8 	bl	4678 <bt_get_name>
   19688:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1968a:	2c00      	cmp	r4, #0
   1968c:	d139      	bne.n	19702 <le_adv_update.constprop.0+0xa4>
   1968e:	2f00      	cmp	r7, #0
   19690:	d142      	bne.n	19718 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   19692:	4658      	mov	r0, fp
   19694:	f7ff fb87 	bl	18da6 <strlen>
   19698:	2309      	movs	r3, #9
   1969a:	f88d 3000 	strb.w	r3, [sp]
   1969e:	f88d 0001 	strb.w	r0, [sp, #1]
   196a2:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   196a6:	2e01      	cmp	r6, #1
			d_len = 2;
   196a8:	bf0c      	ite	eq
   196aa:	2202      	moveq	r2, #2
		d_len = 1;
   196ac:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   196ae:	a902      	add	r1, sp, #8
   196b0:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   196b4:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   196b8:	bf04      	itt	eq
   196ba:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   196be:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   196c0:	f7ff ff55 	bl	1956e <hci_set_ad>
		if (err) {
   196c4:	4604      	mov	r4, r0
   196c6:	b978      	cbnz	r0, 196e8 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   196c8:	f1ba 0f00 	cmp.w	sl, #0
   196cc:	d126      	bne.n	1971c <le_adv_update.constprop.0+0xbe>
   196ce:	3510      	adds	r5, #16
   196d0:	f3bf 8f5b 	dmb	ish
   196d4:	e855 3f00 	ldrex	r3, [r5]
   196d8:	f043 0304 	orr.w	r3, r3, #4
   196dc:	e845 3200 	strex	r2, r3, [r5]
   196e0:	2a00      	cmp	r2, #0
   196e2:	d1f7      	bne.n	196d4 <le_adv_update.constprop.0+0x76>
   196e4:	f3bf 8f5b 	dmb	ish
}
   196e8:	4620      	mov	r0, r4
   196ea:	b007      	add	sp, #28
   196ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   196f0:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   196f4:	3a08      	subs	r2, #8
   196f6:	2a01      	cmp	r2, #1
   196f8:	d925      	bls.n	19746 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   196fa:	3301      	adds	r3, #1
   196fc:	4598      	cmp	r8, r3
   196fe:	d1f7      	bne.n	196f0 <le_adv_update.constprop.0+0x92>
   19700:	e7c5      	b.n	1968e <le_adv_update.constprop.0+0x30>
   19702:	2300      	movs	r3, #0
   19704:	e7fa      	b.n	196fc <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   19706:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   1970a:	3a08      	subs	r2, #8
   1970c:	2a01      	cmp	r2, #1
   1970e:	d91a      	bls.n	19746 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   19710:	3301      	adds	r3, #1
   19712:	4599      	cmp	r9, r3
   19714:	d1f7      	bne.n	19706 <le_adv_update.constprop.0+0xa8>
   19716:	e7bc      	b.n	19692 <le_adv_update.constprop.0+0x34>
   19718:	2300      	movs	r3, #0
   1971a:	e7fa      	b.n	19712 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   1971c:	2e02      	cmp	r6, #2
   1971e:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   19722:	bf08      	it	eq
   19724:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   19726:	a902      	add	r1, sp, #8
			d_len = 2;
   19728:	bf08      	it	eq
   1972a:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1972c:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   19730:	bf08      	it	eq
   19732:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   19736:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1973a:	f7ff ff18 	bl	1956e <hci_set_ad>
		if (err) {
   1973e:	2800      	cmp	r0, #0
   19740:	d0c5      	beq.n	196ce <le_adv_update.constprop.0+0x70>
   19742:	4604      	mov	r4, r0
   19744:	e7d0      	b.n	196e8 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   19746:	f06f 0415 	mvn.w	r4, #21
   1974a:	e7cd      	b.n	196e8 <le_adv_update.constprop.0+0x8a>

0001974c <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1974c:	6843      	ldr	r3, [r0, #4]
   1974e:	f013 0008 	ands.w	r0, r3, #8
   19752:	d00a      	beq.n	1976a <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   19754:	035a      	lsls	r2, r3, #13
   19756:	d407      	bmi.n	19768 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   19758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   1975c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   19760:	bf0c      	ite	eq
   19762:	2001      	moveq	r0, #1
   19764:	2002      	movne	r0, #2
   19766:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   19768:	2001      	movs	r0, #1
}
   1976a:	4770      	bx	lr

0001976c <bt_le_adv_set_enable_legacy>:
{
   1976c:	b570      	push	{r4, r5, r6, lr}
   1976e:	4606      	mov	r6, r0
   19770:	b086      	sub	sp, #24
   19772:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   19774:	f242 000a 	movw	r0, #8202	; 0x200a
   19778:	2101      	movs	r1, #1
   1977a:	f7ea f987 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
   1977e:	4604      	mov	r4, r0
   19780:	b1b0      	cbz	r0, 197b0 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   19782:	3008      	adds	r0, #8
	if (enable) {
   19784:	b195      	cbz	r5, 197ac <bt_le_adv_set_enable_legacy+0x40>
   19786:	2101      	movs	r1, #1
   19788:	f001 fb24 	bl	1add4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1978c:	f106 0210 	add.w	r2, r6, #16
   19790:	a903      	add	r1, sp, #12
   19792:	4620      	mov	r0, r4
   19794:	9500      	str	r5, [sp, #0]
   19796:	2306      	movs	r3, #6
   19798:	f7ea f966 	bl	3a68 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1979c:	2200      	movs	r2, #0
   1979e:	4621      	mov	r1, r4
   197a0:	f242 000a 	movw	r0, #8202	; 0x200a
   197a4:	f7ea f9ac 	bl	3b00 <bt_hci_cmd_send_sync>
}
   197a8:	b006      	add	sp, #24
   197aa:	bd70      	pop	{r4, r5, r6, pc}
   197ac:	4629      	mov	r1, r5
   197ae:	e7eb      	b.n	19788 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   197b0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   197b4:	e7f8      	b.n	197a8 <bt_le_adv_set_enable_legacy+0x3c>

000197b6 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   197b6:	3018      	adds	r0, #24
   197b8:	f002 bc07 	b.w	1bfca <k_work_cancel_delayable>

000197bc <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   197bc:	f7eb bb1e 	b.w	4dfc <bt_le_adv_stop>

000197c0 <tx_notify>:
{
   197c0:	b570      	push	{r4, r5, r6, lr}
   197c2:	4604      	mov	r4, r0
	__asm__ volatile(
   197c4:	f04f 0220 	mov.w	r2, #32
   197c8:	f3ef 8311 	mrs	r3, BASEPRI
   197cc:	f382 8812 	msr	BASEPRI_MAX, r2
   197d0:	f3bf 8f6f 	isb	sy
	return list->head;
   197d4:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   197d6:	b920      	cbnz	r0, 197e2 <tx_notify+0x22>
	__asm__ volatile(
   197d8:	f383 8811 	msr	BASEPRI, r3
   197dc:	f3bf 8f6f 	isb	sy
}
   197e0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   197e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   197e4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   197e6:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   197e8:	4288      	cmp	r0, r1
	list->tail = node;
   197ea:	bf08      	it	eq
   197ec:	6262      	streq	r2, [r4, #36]	; 0x24
   197ee:	f383 8811 	msr	BASEPRI, r3
   197f2:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   197f6:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   197fa:	f7eb fb8f 	bl	4f1c <tx_free>
		cb(conn, user_data);
   197fe:	4631      	mov	r1, r6
   19800:	4620      	mov	r0, r4
   19802:	47a8      	blx	r5
	while (1) {
   19804:	e7de      	b.n	197c4 <tx_notify+0x4>

00019806 <tx_complete_work>:
	tx_notify(conn);
   19806:	3828      	subs	r0, #40	; 0x28
   19808:	f7ff bfda 	b.w	197c0 <tx_notify>

0001980c <bt_conn_reset_rx_state>:
{
   1980c:	b510      	push	{r4, lr}
   1980e:	4604      	mov	r4, r0
	if (!conn->rx) {
   19810:	6900      	ldr	r0, [r0, #16]
   19812:	b118      	cbz	r0, 1981c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   19814:	f7fa fda4 	bl	14360 <net_buf_unref>
	conn->rx = NULL;
   19818:	2300      	movs	r3, #0
   1981a:	6123      	str	r3, [r4, #16]
}
   1981c:	bd10      	pop	{r4, pc}

0001981e <conn_cleanup>:
{
   1981e:	b570      	push	{r4, r5, r6, lr}
   19820:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   19822:	f100 0638 	add.w	r6, r0, #56	; 0x38
   19826:	2200      	movs	r2, #0
   19828:	2300      	movs	r3, #0
   1982a:	4630      	mov	r0, r6
   1982c:	f001 fa66 	bl	1acfc <net_buf_get>
   19830:	4605      	mov	r5, r0
   19832:	b950      	cbnz	r0, 1984a <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   19834:	4620      	mov	r0, r4
   19836:	f7ff ffe9 	bl	1980c <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1983a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1983e:	2200      	movs	r2, #0
}
   19840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   19844:	2300      	movs	r3, #0
   19846:	f7fd bf1d 	b.w	17684 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1984a:	6968      	ldr	r0, [r5, #20]
   1984c:	b108      	cbz	r0, 19852 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1984e:	f7eb fb65 	bl	4f1c <tx_free>
		net_buf_unref(buf);
   19852:	4628      	mov	r0, r5
   19854:	f7fa fd84 	bl	14360 <net_buf_unref>
   19858:	e7e5      	b.n	19826 <conn_cleanup+0x8>

0001985a <bt_conn_recv>:
{
   1985a:	b570      	push	{r4, r5, r6, lr}
   1985c:	4616      	mov	r6, r2
   1985e:	4604      	mov	r4, r0
   19860:	460d      	mov	r5, r1
	tx_notify(conn);
   19862:	f7ff ffad 	bl	197c0 <tx_notify>
	switch (flags) {
   19866:	2e01      	cmp	r6, #1
   19868:	d017      	beq.n	1989a <bt_conn_recv+0x40>
   1986a:	2e02      	cmp	r6, #2
   1986c:	d117      	bne.n	1989e <bt_conn_recv+0x44>
		if (conn->rx) {
   1986e:	6923      	ldr	r3, [r4, #16]
   19870:	b113      	cbz	r3, 19878 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   19872:	4620      	mov	r0, r4
   19874:	f7ff ffca 	bl	1980c <bt_conn_reset_rx_state>
		conn->rx = buf;
   19878:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1987a:	6921      	ldr	r1, [r4, #16]
   1987c:	898a      	ldrh	r2, [r1, #12]
   1987e:	2a01      	cmp	r2, #1
   19880:	d937      	bls.n	198f2 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   19882:	688b      	ldr	r3, [r1, #8]
   19884:	881b      	ldrh	r3, [r3, #0]
   19886:	3304      	adds	r3, #4
   19888:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1988a:	429a      	cmp	r2, r3
   1988c:	d331      	bcc.n	198f2 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   1988e:	d928      	bls.n	198e2 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   19890:	4620      	mov	r0, r4
}
   19892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   19896:	f7ff bfb9 	b.w	1980c <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1989a:	6920      	ldr	r0, [r4, #16]
   1989c:	b918      	cbnz	r0, 198a6 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   1989e:	4620      	mov	r0, r4
   198a0:	f7ff ffb4 	bl	1980c <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   198a4:	e001      	b.n	198aa <bt_conn_recv+0x50>
		if (!buf->len) {
   198a6:	89ae      	ldrh	r6, [r5, #12]
   198a8:	b926      	cbnz	r6, 198b4 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   198aa:	4628      	mov	r0, r5
}
   198ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   198b0:	f7fa bd56 	b.w	14360 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   198b4:	3008      	adds	r0, #8
   198b6:	f001 fab9 	bl	1ae2c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   198ba:	4286      	cmp	r6, r0
   198bc:	d907      	bls.n	198ce <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   198be:	6921      	ldr	r1, [r4, #16]
   198c0:	2200      	movs	r2, #0
   198c2:	4620      	mov	r0, r4
   198c4:	f000 f998 	bl	19bf8 <bt_l2cap_recv>
			conn->rx = NULL;
   198c8:	2300      	movs	r3, #0
   198ca:	6123      	str	r3, [r4, #16]
   198cc:	e7ed      	b.n	198aa <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   198ce:	6920      	ldr	r0, [r4, #16]
   198d0:	89aa      	ldrh	r2, [r5, #12]
   198d2:	68a9      	ldr	r1, [r5, #8]
   198d4:	3008      	adds	r0, #8
   198d6:	f001 fa74 	bl	1adc2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   198da:	4628      	mov	r0, r5
   198dc:	f7fa fd40 	bl	14360 <net_buf_unref>
		break;
   198e0:	e7cb      	b.n	1987a <bt_conn_recv+0x20>
	conn->rx = NULL;
   198e2:	2300      	movs	r3, #0
   198e4:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   198e6:	4620      	mov	r0, r4
   198e8:	2201      	movs	r2, #1
}
   198ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   198ee:	f000 b983 	b.w	19bf8 <bt_l2cap_recv>
}
   198f2:	bd70      	pop	{r4, r5, r6, pc}

000198f4 <bt_conn_ref>:
{
   198f4:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   198f6:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   198fa:	f3bf 8f5b 	dmb	ish
   198fe:	6813      	ldr	r3, [r2, #0]
   19900:	f3bf 8f5b 	dmb	ish
		if (!old) {
   19904:	b17b      	cbz	r3, 19926 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19906:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1990a:	1c59      	adds	r1, r3, #1
   1990c:	e852 4f00 	ldrex	r4, [r2]
   19910:	429c      	cmp	r4, r3
   19912:	d104      	bne.n	1991e <bt_conn_ref+0x2a>
   19914:	e842 1c00 	strex	ip, r1, [r2]
   19918:	f1bc 0f00 	cmp.w	ip, #0
   1991c:	d1f6      	bne.n	1990c <bt_conn_ref+0x18>
   1991e:	f3bf 8f5b 	dmb	ish
   19922:	d1ea      	bne.n	198fa <bt_conn_ref+0x6>
}
   19924:	bd10      	pop	{r4, pc}
			return NULL;
   19926:	4618      	mov	r0, r3
   19928:	e7fc      	b.n	19924 <bt_conn_ref+0x30>

0001992a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1992a:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1992e:	f3bf 8f5b 	dmb	ish
   19932:	e853 2f00 	ldrex	r2, [r3]
   19936:	3a01      	subs	r2, #1
   19938:	e843 2100 	strex	r1, r2, [r3]
   1993c:	2900      	cmp	r1, #0
   1993e:	d1f8      	bne.n	19932 <bt_conn_unref+0x8>
   19940:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   19944:	7883      	ldrb	r3, [r0, #2]
   19946:	2b01      	cmp	r3, #1
   19948:	d108      	bne.n	1995c <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1994a:	f3bf 8f5b 	dmb	ish
   1994e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   19952:	f3bf 8f5b 	dmb	ish
   19956:	b90b      	cbnz	r3, 1995c <bt_conn_unref+0x32>
		bt_le_adv_resume();
   19958:	f7eb baa0 	b.w	4e9c <bt_le_adv_resume>
}
   1995c:	4770      	bx	lr

0001995e <conn_lookup_handle>:
{
   1995e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19962:	4607      	mov	r7, r0
   19964:	460e      	mov	r6, r1
   19966:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   19968:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1996a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1996e:	42b4      	cmp	r4, r6
   19970:	d103      	bne.n	1997a <conn_lookup_handle+0x1c>
	return NULL;
   19972:	2300      	movs	r3, #0
}
   19974:	4618      	mov	r0, r3
   19976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1997a:	fb09 7004 	mla	r0, r9, r4, r7
   1997e:	f7ff ffb9 	bl	198f4 <bt_conn_ref>
   19982:	4603      	mov	r3, r0
		if (!conn) {
   19984:	b158      	cbz	r0, 1999e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   19986:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   19988:	2d01      	cmp	r5, #1
   1998a:	d002      	beq.n	19992 <conn_lookup_handle+0x34>
   1998c:	3d07      	subs	r5, #7
   1998e:	2d01      	cmp	r5, #1
   19990:	d803      	bhi.n	1999a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   19992:	881a      	ldrh	r2, [r3, #0]
   19994:	4542      	cmp	r2, r8
   19996:	d0ed      	beq.n	19974 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   19998:	4618      	mov	r0, r3
   1999a:	f7ff ffc6 	bl	1992a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1999e:	3401      	adds	r4, #1
   199a0:	e7e5      	b.n	1996e <conn_lookup_handle+0x10>

000199a2 <bt_conn_connected>:
{
   199a2:	b510      	push	{r4, lr}
   199a4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   199a6:	f7eb ff43 	bl	5830 <bt_l2cap_connected>
	notify_connected(conn);
   199aa:	4620      	mov	r0, r4
}
   199ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   199b0:	f7eb babe 	b.w	4f30 <notify_connected>

000199b4 <bt_conn_get_security>:
}
   199b4:	2001      	movs	r0, #1
   199b6:	4770      	bx	lr

000199b8 <bt_conn_is_peer_addr_le>:
{
   199b8:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   199ba:	7a03      	ldrb	r3, [r0, #8]
   199bc:	428b      	cmp	r3, r1
{
   199be:	4604      	mov	r4, r0
   199c0:	4615      	mov	r5, r2
	if (id != conn->id) {
   199c2:	d115      	bne.n	199f0 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   199c4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   199c8:	2207      	movs	r2, #7
   199ca:	4628      	mov	r0, r5
   199cc:	f7ff fa07 	bl	18dde <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   199d0:	b180      	cbz	r0, 199f4 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   199d2:	78e3      	ldrb	r3, [r4, #3]
   199d4:	2207      	movs	r2, #7
   199d6:	b943      	cbnz	r3, 199ea <bt_conn_is_peer_addr_le+0x32>
   199d8:	f104 0196 	add.w	r1, r4, #150	; 0x96
   199dc:	4628      	mov	r0, r5
   199de:	f7ff f9fe 	bl	18dde <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   199e2:	fab0 f080 	clz	r0, r0
   199e6:	0940      	lsrs	r0, r0, #5
}
   199e8:	bd38      	pop	{r3, r4, r5, pc}
   199ea:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   199ee:	e7f5      	b.n	199dc <bt_conn_is_peer_addr_le+0x24>
		return false;
   199f0:	2000      	movs	r0, #0
   199f2:	e7f9      	b.n	199e8 <bt_conn_is_peer_addr_le+0x30>
		return true;
   199f4:	2001      	movs	r0, #1
   199f6:	e7f7      	b.n	199e8 <bt_conn_is_peer_addr_le+0x30>

000199f8 <bt_conn_exists_le>:
{
   199f8:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   199fa:	f7eb fd67 	bl	54cc <bt_conn_lookup_addr_le>
	if (conn) {
   199fe:	b110      	cbz	r0, 19a06 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   19a00:	f7ff ff93 	bl	1992a <bt_conn_unref>
		return true;
   19a04:	2001      	movs	r0, #1
}
   19a06:	bd08      	pop	{r3, pc}

00019a08 <bt_conn_get_dst>:
}
   19a08:	3088      	adds	r0, #136	; 0x88
   19a0a:	4770      	bx	lr

00019a0c <bt_conn_le_conn_update>:
{
   19a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a0e:	4607      	mov	r7, r0
   19a10:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   19a12:	f242 0013 	movw	r0, #8211	; 0x2013
   19a16:	210e      	movs	r1, #14
   19a18:	f7ea f838 	bl	3a8c <bt_hci_cmd_create>
	if (!buf) {
   19a1c:	4606      	mov	r6, r0
   19a1e:	b1d0      	cbz	r0, 19a56 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   19a20:	210e      	movs	r1, #14
   19a22:	3008      	adds	r0, #8
   19a24:	f001 f9c7 	bl	1adb6 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   19a28:	220e      	movs	r2, #14
   19a2a:	4604      	mov	r4, r0
   19a2c:	2100      	movs	r1, #0
   19a2e:	f7ff f9f2 	bl	18e16 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   19a32:	883b      	ldrh	r3, [r7, #0]
   19a34:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   19a36:	882b      	ldrh	r3, [r5, #0]
   19a38:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   19a3a:	886b      	ldrh	r3, [r5, #2]
   19a3c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   19a3e:	88ab      	ldrh	r3, [r5, #4]
   19a40:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   19a42:	88eb      	ldrh	r3, [r5, #6]
   19a44:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   19a46:	4631      	mov	r1, r6
   19a48:	2200      	movs	r2, #0
}
   19a4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   19a4e:	f242 0013 	movw	r0, #8211	; 0x2013
   19a52:	f7ea b855 	b.w	3b00 <bt_hci_cmd_send_sync>
}
   19a56:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019a5c <l2cap_connected>:
}
   19a5c:	4770      	bx	lr

00019a5e <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   19a5e:	3010      	adds	r0, #16
   19a60:	f002 bab3 	b.w	1bfca <k_work_cancel_delayable>

00019a64 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   19a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a66:	4607      	mov	r7, r0
   19a68:	460e      	mov	r6, r1
   19a6a:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   19a6c:	2300      	movs	r3, #0
   19a6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19a72:	2104      	movs	r1, #4
   19a74:	2000      	movs	r0, #0
   19a76:	f7eb fc6f 	bl	5358 <bt_conn_create_pdu_timeout>
	if (!buf) {
   19a7a:	4604      	mov	r4, r0
   19a7c:	b130      	cbz	r0, 19a8c <l2cap_create_le_sig_pdu.constprop.0+0x28>
   19a7e:	2104      	movs	r1, #4
   19a80:	3008      	adds	r0, #8
   19a82:	f001 f998 	bl	1adb6 <net_buf_simple_add>
	hdr->code = code;
   19a86:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   19a88:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   19a8a:	8045      	strh	r5, [r0, #2]
}
   19a8c:	4620      	mov	r0, r4
   19a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019a90 <bt_l2cap_chan_remove>:
	return list->head;
   19a90:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   19a92:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19a94:	b173      	cbz	r3, 19ab4 <bt_l2cap_chan_remove+0x24>
   19a96:	3b08      	subs	r3, #8
   19a98:	2500      	movs	r5, #0
	return node->next;
   19a9a:	461a      	mov	r2, r3
		if (chan == ch) {
   19a9c:	4299      	cmp	r1, r3
   19a9e:	f852 4f08 	ldr.w	r4, [r2, #8]!
   19aa2:	d10d      	bne.n	19ac0 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   19aa4:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   19aa6:	b935      	cbnz	r5, 19ab6 <bt_l2cap_chan_remove+0x26>
   19aa8:	4291      	cmp	r1, r2
	list->head = node;
   19aaa:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   19aac:	d100      	bne.n	19ab0 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   19aae:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   19ab0:	2200      	movs	r2, #0
   19ab2:	609a      	str	r2, [r3, #8]
}
   19ab4:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   19ab6:	4291      	cmp	r1, r2
	parent->next = child;
   19ab8:	602c      	str	r4, [r5, #0]
	list->tail = node;
   19aba:	bf08      	it	eq
   19abc:	6545      	streq	r5, [r0, #84]	; 0x54
}
   19abe:	e7f7      	b.n	19ab0 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19ac0:	2c00      	cmp	r4, #0
   19ac2:	d0f7      	beq.n	19ab4 <bt_l2cap_chan_remove+0x24>
   19ac4:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   19ac8:	4615      	mov	r5, r2
   19aca:	e7e6      	b.n	19a9a <bt_l2cap_chan_remove+0xa>

00019acc <bt_l2cap_chan_del>:
{
   19acc:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   19ace:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   19ad2:	4604      	mov	r4, r0
	if (!chan->conn) {
   19ad4:	b123      	cbz	r3, 19ae0 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   19ad6:	686b      	ldr	r3, [r5, #4]
   19ad8:	b103      	cbz	r3, 19adc <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   19ada:	4798      	blx	r3
	chan->conn = NULL;
   19adc:	2300      	movs	r3, #0
   19ade:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   19ae0:	68e3      	ldr	r3, [r4, #12]
   19ae2:	b10b      	cbz	r3, 19ae8 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   19ae4:	4620      	mov	r0, r4
   19ae6:	4798      	blx	r3
	if (ops->released) {
   19ae8:	69eb      	ldr	r3, [r5, #28]
   19aea:	b11b      	cbz	r3, 19af4 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   19aec:	4620      	mov	r0, r4
}
   19aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   19af2:	4718      	bx	r3
}
   19af4:	bd70      	pop	{r4, r5, r6, pc}

00019af6 <l2cap_rtx_timeout>:
{
   19af6:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   19af8:	f1a0 0410 	sub.w	r4, r0, #16
   19afc:	4621      	mov	r1, r4
   19afe:	f850 0c10 	ldr.w	r0, [r0, #-16]
   19b02:	f7ff ffc5 	bl	19a90 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   19b06:	4620      	mov	r0, r4
}
   19b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   19b0c:	f7ff bfde 	b.w	19acc <bt_l2cap_chan_del>

00019b10 <bt_l2cap_disconnected>:
	return list->head;
   19b10:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   19b12:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19b14:	b160      	cbz	r0, 19b30 <bt_l2cap_disconnected+0x20>
	return node->next;
   19b16:	f850 4908 	ldr.w	r4, [r0], #-8
   19b1a:	b104      	cbz	r4, 19b1e <bt_l2cap_disconnected+0xe>
   19b1c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   19b1e:	f7ff ffd5 	bl	19acc <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   19b22:	b12c      	cbz	r4, 19b30 <bt_l2cap_disconnected+0x20>
   19b24:	68a3      	ldr	r3, [r4, #8]
   19b26:	b103      	cbz	r3, 19b2a <bt_l2cap_disconnected+0x1a>
   19b28:	3b08      	subs	r3, #8
{
   19b2a:	4620      	mov	r0, r4
   19b2c:	461c      	mov	r4, r3
   19b2e:	e7f6      	b.n	19b1e <bt_l2cap_disconnected+0xe>
}
   19b30:	bd10      	pop	{r4, pc}

00019b32 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   19b32:	3104      	adds	r1, #4
   19b34:	f7eb bc10 	b.w	5358 <bt_conn_create_pdu_timeout>

00019b38 <bt_l2cap_send_cb>:
{
   19b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b3c:	4614      	mov	r4, r2
   19b3e:	4605      	mov	r5, r0
   19b40:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   19b42:	f102 0008 	add.w	r0, r2, #8
   19b46:	2104      	movs	r1, #4
   19b48:	461e      	mov	r6, r3
   19b4a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   19b4e:	f001 f949 	bl	1ade4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19b52:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   19b54:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19b56:	3a04      	subs	r2, #4
   19b58:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   19b5a:	4643      	mov	r3, r8
   19b5c:	4632      	mov	r2, r6
   19b5e:	4621      	mov	r1, r4
   19b60:	4628      	mov	r0, r5
}
   19b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   19b66:	f7eb bac7 	b.w	50f8 <bt_conn_send_cb>

00019b6a <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   19b6a:	898b      	ldrh	r3, [r1, #12]
   19b6c:	2b03      	cmp	r3, #3
{
   19b6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   19b70:	4605      	mov	r5, r0
   19b72:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19b74:	d927      	bls.n	19bc6 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   19b76:	2104      	movs	r1, #4
   19b78:	f104 0008 	add.w	r0, r4, #8
   19b7c:	f001 f942 	bl	1ae04 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   19b80:	89a3      	ldrh	r3, [r4, #12]
   19b82:	8842      	ldrh	r2, [r0, #2]
   19b84:	429a      	cmp	r2, r3
   19b86:	d11e      	bne.n	19bc6 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   19b88:	7841      	ldrb	r1, [r0, #1]
   19b8a:	b1e1      	cbz	r1, 19bc6 <l2cap_recv+0x5c>
	switch (hdr->code) {
   19b8c:	7803      	ldrb	r3, [r0, #0]
   19b8e:	2b01      	cmp	r3, #1
   19b90:	d019      	beq.n	19bc6 <l2cap_recv+0x5c>
   19b92:	2b13      	cmp	r3, #19
   19b94:	d017      	beq.n	19bc6 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19b96:	2202      	movs	r2, #2
   19b98:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   19b9a:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19b9c:	f7ff ff62 	bl	19a64 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   19ba0:	4604      	mov	r4, r0
   19ba2:	b180      	cbz	r0, 19bc6 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   19ba4:	2102      	movs	r1, #2
   19ba6:	3008      	adds	r0, #8
   19ba8:	f001 f905 	bl	1adb6 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   19bac:	2300      	movs	r3, #0
   19bae:	7003      	strb	r3, [r0, #0]
   19bb0:	7043      	strb	r3, [r0, #1]
   19bb2:	4622      	mov	r2, r4
   19bb4:	9300      	str	r3, [sp, #0]
   19bb6:	2105      	movs	r1, #5
   19bb8:	4628      	mov	r0, r5
   19bba:	f7ff ffbd 	bl	19b38 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   19bbe:	b110      	cbz	r0, 19bc6 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   19bc0:	4620      	mov	r0, r4
   19bc2:	f7fa fbcd 	bl	14360 <net_buf_unref>
}
   19bc6:	2000      	movs	r0, #0
   19bc8:	b003      	add	sp, #12
   19bca:	bd30      	pop	{r4, r5, pc}

00019bcc <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   19bcc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19bce:	b138      	cbz	r0, 19be0 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   19bd0:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   19bd4:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19bd6:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   19bda:	d001      	beq.n	19be0 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   19bdc:	6880      	ldr	r0, [r0, #8]
   19bde:	e7f6      	b.n	19bce <bt_l2cap_le_lookup_tx_cid+0x2>
}
   19be0:	4770      	bx	lr

00019be2 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   19be2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19be4:	b138      	cbz	r0, 19bf6 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   19be6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   19bea:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   19bec:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   19bf0:	d001      	beq.n	19bf6 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   19bf2:	6880      	ldr	r0, [r0, #8]
   19bf4:	e7f6      	b.n	19be4 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   19bf6:	4770      	bx	lr

00019bf8 <bt_l2cap_recv>:
{
   19bf8:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   19bfa:	898b      	ldrh	r3, [r1, #12]
   19bfc:	2b03      	cmp	r3, #3
{
   19bfe:	4605      	mov	r5, r0
   19c00:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19c02:	d804      	bhi.n	19c0e <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   19c04:	4620      	mov	r0, r4
}
   19c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   19c0a:	f7fa bba9 	b.w	14360 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   19c0e:	2104      	movs	r1, #4
   19c10:	f104 0008 	add.w	r0, r4, #8
   19c14:	f001 f8f6 	bl	1ae04 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   19c18:	8841      	ldrh	r1, [r0, #2]
   19c1a:	4628      	mov	r0, r5
   19c1c:	f7ff ffe1 	bl	19be2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19c20:	2800      	cmp	r0, #0
   19c22:	d0ef      	beq.n	19c04 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   19c24:	6843      	ldr	r3, [r0, #4]
   19c26:	4621      	mov	r1, r4
   19c28:	691b      	ldr	r3, [r3, #16]
   19c2a:	4798      	blx	r3
   19c2c:	e7ea      	b.n	19c04 <bt_l2cap_recv+0xc>

00019c2e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   19c2e:	4770      	bx	lr

00019c30 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   19c30:	4603      	mov	r3, r0
	return list->head;
   19c32:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   19c34:	b128      	cbz	r0, 19c42 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19c36:	6859      	ldr	r1, [r3, #4]
	return node->next;
   19c38:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   19c3a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19c3c:	4288      	cmp	r0, r1
	list->tail = node;
   19c3e:	bf08      	it	eq
   19c40:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   19c42:	4770      	bx	lr

00019c44 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   19c44:	4603      	mov	r3, r0
	size_t bytes = 0;
   19c46:	2000      	movs	r0, #0

	while (buf) {
   19c48:	b903      	cbnz	r3, 19c4c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   19c4a:	4770      	bx	lr
		bytes += buf->len;
   19c4c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   19c4e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   19c50:	4410      	add	r0, r2
		buf = buf->frags;
   19c52:	e7f9      	b.n	19c48 <net_buf_frags_len+0x4>

00019c54 <att_sent>:
	if (chan->ops->sent) {
   19c54:	684b      	ldr	r3, [r1, #4]
   19c56:	695b      	ldr	r3, [r3, #20]
{
   19c58:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   19c5a:	b103      	cbz	r3, 19c5e <att_sent+0xa>
		chan->ops->sent(chan);
   19c5c:	4718      	bx	r3
}
   19c5e:	4770      	bx	lr

00019c60 <attr_read_type_cb>:
{
   19c60:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   19c62:	68d4      	ldr	r4, [r2, #12]
   19c64:	7823      	ldrb	r3, [r4, #0]
   19c66:	3102      	adds	r1, #2
   19c68:	b913      	cbnz	r3, 19c70 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   19c6a:	7021      	strb	r1, [r4, #0]
	return true;
   19c6c:	2001      	movs	r0, #1
   19c6e:	e006      	b.n	19c7e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   19c70:	428b      	cmp	r3, r1
   19c72:	d0fb      	beq.n	19c6c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   19c74:	8983      	ldrh	r3, [r0, #12]
   19c76:	3b02      	subs	r3, #2
   19c78:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   19c7a:	2000      	movs	r0, #0
   19c7c:	6110      	str	r0, [r2, #16]
}
   19c7e:	bd10      	pop	{r4, pc}

00019c80 <att_prepare_write_req>:
}
   19c80:	2006      	movs	r0, #6
   19c82:	4770      	bx	lr

00019c84 <att_op_get_type>:
	switch (op) {
   19c84:	281e      	cmp	r0, #30
   19c86:	d816      	bhi.n	19cb6 <att_op_get_type+0x32>
   19c88:	b308      	cbz	r0, 19cce <att_op_get_type+0x4a>
   19c8a:	1e43      	subs	r3, r0, #1
   19c8c:	2b1d      	cmp	r3, #29
   19c8e:	d81e      	bhi.n	19cce <att_op_get_type+0x4a>
   19c90:	e8df f003 	tbb	[pc, r3]
   19c94:	23172317 	.word	0x23172317
   19c98:	23172317 	.word	0x23172317
   19c9c:	23172317 	.word	0x23172317
   19ca0:	23172317 	.word	0x23172317
   19ca4:	1d172317 	.word	0x1d172317
   19ca8:	2317231d 	.word	0x2317231d
   19cac:	1d191d17 	.word	0x1d191d17
   19cb0:	0f1b      	.short	0x0f1b
   19cb2:	2004      	movs	r0, #4
   19cb4:	4770      	bx	lr
   19cb6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   19cba:	2b52      	cmp	r3, #82	; 0x52
   19cbc:	d107      	bne.n	19cce <att_op_get_type+0x4a>
		return ATT_COMMAND;
   19cbe:	2000      	movs	r0, #0
}
   19cc0:	4770      	bx	lr
		return ATT_RESPONSE;
   19cc2:	2002      	movs	r0, #2
   19cc4:	4770      	bx	lr
		return ATT_NOTIFICATION;
   19cc6:	2003      	movs	r0, #3
   19cc8:	4770      	bx	lr
		return ATT_INDICATION;
   19cca:	2005      	movs	r0, #5
   19ccc:	4770      	bx	lr
		return ATT_COMMAND;
   19cce:	f010 0f40 	tst.w	r0, #64	; 0x40
   19cd2:	bf0c      	ite	eq
   19cd4:	2006      	moveq	r0, #6
   19cd6:	2000      	movne	r0, #0
   19cd8:	4770      	bx	lr
		return ATT_REQUEST;
   19cda:	2001      	movs	r0, #1
   19cdc:	4770      	bx	lr

00019cde <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   19cde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   19ce0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   19ce4:	2300      	movs	r3, #0
   19ce6:	9300      	str	r3, [sp, #0]
   19ce8:	461a      	mov	r2, r3
   19cea:	f7ec fcb7 	bl	665c <bt_gatt_foreach_attr_type>
				  user_data);
}
   19cee:	b005      	add	sp, #20
   19cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00019cf4 <find_type_cb>:
{
   19cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   19cf8:	f8d2 9000 	ldr.w	r9, [r2]
{
   19cfc:	b091      	sub	sp, #68	; 0x44
   19cfe:	4607      	mov	r7, r0
   19d00:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19d02:	2500      	movs	r5, #0
   19d04:	f642 0301 	movw	r3, #10241	; 0x2801
   19d08:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   19d0a:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19d0e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   19d12:	a90b      	add	r1, sp, #44	; 0x2c
{
   19d14:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19d16:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   19d1a:	f7ff f8da 	bl	18ed2 <bt_uuid_cmp>
   19d1e:	2800      	cmp	r0, #0
   19d20:	d079      	beq.n	19e16 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   19d22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19d26:	6838      	ldr	r0, [r7, #0]
   19d28:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   19d2c:	a90b      	add	r1, sp, #44	; 0x2c
   19d2e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   19d32:	f7ff f8ce 	bl	18ed2 <bt_uuid_cmp>
   19d36:	b138      	cbz	r0, 19d48 <find_type_cb+0x54>
		if (data->group &&
   19d38:	68a3      	ldr	r3, [r4, #8]
   19d3a:	b11b      	cbz	r3, 19d44 <find_type_cb+0x50>
   19d3c:	885a      	ldrh	r2, [r3, #2]
   19d3e:	42b2      	cmp	r2, r6
   19d40:	d200      	bcs.n	19d44 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   19d42:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   19d44:	2001      	movs	r0, #1
   19d46:	e009      	b.n	19d5c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   19d48:	6861      	ldr	r1, [r4, #4]
   19d4a:	4608      	mov	r0, r1
   19d4c:	f7ff ff7a 	bl	19c44 <net_buf_frags_len>
   19d50:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   19d54:	1a1b      	subs	r3, r3, r0
   19d56:	2b03      	cmp	r3, #3
   19d58:	d803      	bhi.n	19d62 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   19d5a:	2000      	movs	r0, #0
}
   19d5c:	b011      	add	sp, #68	; 0x44
   19d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   19d62:	4608      	mov	r0, r1
   19d64:	f000 fff9 	bl	1ad5a <net_buf_frag_last>
   19d68:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   19d6a:	6860      	ldr	r0, [r4, #4]
   19d6c:	f7ff ff6a 	bl	19c44 <net_buf_frags_len>
   19d70:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   19d74:	f105 0b08 	add.w	fp, r5, #8
   19d78:	ebaa 0a00 	sub.w	sl, sl, r0
   19d7c:	4658      	mov	r0, fp
   19d7e:	f001 f855 	bl	1ae2c <net_buf_simple_tailroom>
   19d82:	4582      	cmp	sl, r0
   19d84:	d23f      	bcs.n	19e06 <find_type_cb+0x112>
   19d86:	6860      	ldr	r0, [r4, #4]
   19d88:	f7ff ff5c 	bl	19c44 <net_buf_frags_len>
   19d8c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   19d90:	1a18      	subs	r0, r3, r0
	if (!len) {
   19d92:	b970      	cbnz	r0, 19db2 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   19d94:	6863      	ldr	r3, [r4, #4]
   19d96:	7998      	ldrb	r0, [r3, #6]
   19d98:	f7fa fa1e 	bl	141d8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   19d9c:	2200      	movs	r2, #0
   19d9e:	2300      	movs	r3, #0
   19da0:	f000 ffa7 	bl	1acf2 <net_buf_alloc_fixed>
		if (!frag) {
   19da4:	4605      	mov	r5, r0
   19da6:	2800      	cmp	r0, #0
   19da8:	d0d7      	beq.n	19d5a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   19daa:	4601      	mov	r1, r0
   19dac:	6860      	ldr	r0, [r4, #4]
   19dae:	f000 ffe5 	bl	1ad7c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   19db2:	2300      	movs	r3, #0
   19db4:	9300      	str	r3, [sp, #0]
   19db6:	f8d7 9004 	ldr.w	r9, [r7, #4]
   19dba:	4639      	mov	r1, r7
   19dbc:	2310      	movs	r3, #16
   19dbe:	aa02      	add	r2, sp, #8
   19dc0:	4640      	mov	r0, r8
   19dc2:	47c8      	blx	r9
	if (read < 0) {
   19dc4:	1e07      	subs	r7, r0, #0
   19dc6:	db26      	blt.n	19e16 <find_type_cb+0x122>
	if (read != data->value_len) {
   19dc8:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19dca:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   19dcc:	42ba      	cmp	r2, r7
   19dce:	d01e      	beq.n	19e0e <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19dd0:	4601      	mov	r1, r0
   19dd2:	a80b      	add	r0, sp, #44	; 0x2c
   19dd4:	f7ff f8ab 	bl	18f2e <bt_uuid_create>
   19dd8:	b1e8      	cbz	r0, 19e16 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   19dda:	b2fa      	uxtb	r2, r7
   19ddc:	a902      	add	r1, sp, #8
   19dde:	a806      	add	r0, sp, #24
   19de0:	f7ff f8a5 	bl	18f2e <bt_uuid_create>
   19de4:	b1b8      	cbz	r0, 19e16 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   19de6:	a906      	add	r1, sp, #24
   19de8:	a80b      	add	r0, sp, #44	; 0x2c
   19dea:	f7ff f872 	bl	18ed2 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   19dee:	b990      	cbnz	r0, 19e16 <find_type_cb+0x122>
	data->err = 0x00;
   19df0:	2300      	movs	r3, #0
   19df2:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   19df4:	2104      	movs	r1, #4
   19df6:	f105 0008 	add.w	r0, r5, #8
   19dfa:	f000 ffdc 	bl	1adb6 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   19dfe:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19e00:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19e02:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   19e04:	e79e      	b.n	19d44 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   19e06:	4658      	mov	r0, fp
   19e08:	f001 f810 	bl	1ae2c <net_buf_simple_tailroom>
   19e0c:	e7c1      	b.n	19d92 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   19e0e:	a902      	add	r1, sp, #8
   19e10:	f7fe ffe5 	bl	18dde <memcmp>
   19e14:	e7eb      	b.n	19dee <find_type_cb+0xfa>
	data->group = NULL;
   19e16:	2300      	movs	r3, #0
   19e18:	60a3      	str	r3, [r4, #8]
   19e1a:	e793      	b.n	19d44 <find_type_cb+0x50>

00019e1c <find_info_cb>:
{
   19e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   19e1e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   19e20:	6817      	ldr	r7, [r2, #0]
{
   19e22:	4605      	mov	r5, r0
   19e24:	460e      	mov	r6, r1
   19e26:	4614      	mov	r4, r2
	if (!data->rsp) {
   19e28:	b963      	cbnz	r3, 19e44 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   19e2a:	6850      	ldr	r0, [r2, #4]
   19e2c:	2101      	movs	r1, #1
   19e2e:	3008      	adds	r0, #8
   19e30:	f000 ffc1 	bl	1adb6 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   19e34:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   19e36:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   19e38:	781b      	ldrb	r3, [r3, #0]
   19e3a:	2b00      	cmp	r3, #0
   19e3c:	bf0c      	ite	eq
   19e3e:	2301      	moveq	r3, #1
   19e40:	2302      	movne	r3, #2
   19e42:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   19e44:	68a3      	ldr	r3, [r4, #8]
   19e46:	781b      	ldrb	r3, [r3, #0]
   19e48:	2b01      	cmp	r3, #1
   19e4a:	d003      	beq.n	19e54 <find_info_cb+0x38>
   19e4c:	2b02      	cmp	r3, #2
   19e4e:	d019      	beq.n	19e84 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   19e50:	2000      	movs	r0, #0
   19e52:	e016      	b.n	19e82 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   19e54:	682b      	ldr	r3, [r5, #0]
   19e56:	781b      	ldrb	r3, [r3, #0]
   19e58:	2b00      	cmp	r3, #0
   19e5a:	d1f9      	bne.n	19e50 <find_info_cb+0x34>
   19e5c:	6860      	ldr	r0, [r4, #4]
   19e5e:	2104      	movs	r1, #4
   19e60:	3008      	adds	r0, #8
   19e62:	f000 ffa8 	bl	1adb6 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   19e66:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   19e68:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   19e6a:	885b      	ldrh	r3, [r3, #2]
   19e6c:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   19e6e:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   19e70:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   19e72:	899b      	ldrh	r3, [r3, #12]
   19e74:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   19e78:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   19e7a:	2804      	cmp	r0, #4
   19e7c:	bf94      	ite	ls
   19e7e:	2000      	movls	r0, #0
   19e80:	2001      	movhi	r0, #1
}
   19e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   19e84:	682b      	ldr	r3, [r5, #0]
   19e86:	781b      	ldrb	r3, [r3, #0]
   19e88:	2b02      	cmp	r3, #2
   19e8a:	d1e1      	bne.n	19e50 <find_info_cb+0x34>
   19e8c:	6860      	ldr	r0, [r4, #4]
   19e8e:	2112      	movs	r1, #18
   19e90:	3008      	adds	r0, #8
   19e92:	f000 ff90 	bl	1adb6 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   19e96:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   19e98:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   19e9a:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   19e9c:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   19ea0:	3101      	adds	r1, #1
   19ea2:	f7fe ffad 	bl	18e00 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   19ea6:	6863      	ldr	r3, [r4, #4]
   19ea8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   19eac:	899b      	ldrh	r3, [r3, #12]
   19eae:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   19eb0:	2812      	cmp	r0, #18
   19eb2:	e7e3      	b.n	19e7c <find_info_cb+0x60>

00019eb4 <att_chan_mtu_updated>:
{
   19eb4:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   19eb6:	6806      	ldr	r6, [r0, #0]
	return list->head;
   19eb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19eba:	b1e3      	cbz	r3, 19ef6 <att_chan_mtu_updated+0x42>
	return node->next;
   19ebc:	681a      	ldr	r2, [r3, #0]
   19ebe:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   19ec2:	b10a      	cbz	r2, 19ec8 <att_chan_mtu_updated+0x14>
   19ec4:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   19ec8:	2300      	movs	r3, #0
   19eca:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   19ecc:	42a8      	cmp	r0, r5
   19ece:	d009      	beq.n	19ee4 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   19ed0:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   19ed4:	42a1      	cmp	r1, r4
   19ed6:	bf38      	it	cc
   19ed8:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   19eda:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   19ede:	42a3      	cmp	r3, r4
   19ee0:	bf38      	it	cc
   19ee2:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19ee4:	b142      	cbz	r2, 19ef8 <att_chan_mtu_updated+0x44>
   19ee6:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   19eea:	b10c      	cbz	r4, 19ef0 <att_chan_mtu_updated+0x3c>
   19eec:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   19ef0:	4615      	mov	r5, r2
   19ef2:	4622      	mov	r2, r4
   19ef4:	e7ea      	b.n	19ecc <att_chan_mtu_updated+0x18>
   19ef6:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   19ef8:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   19efc:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   19f00:	428c      	cmp	r4, r1
   19f02:	d801      	bhi.n	19f08 <att_chan_mtu_updated+0x54>
   19f04:	429a      	cmp	r2, r3
   19f06:	d909      	bls.n	19f1c <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   19f08:	429a      	cmp	r2, r3
   19f0a:	bf38      	it	cc
   19f0c:	461a      	movcc	r2, r3
   19f0e:	42a1      	cmp	r1, r4
   19f10:	6830      	ldr	r0, [r6, #0]
   19f12:	bf38      	it	cc
   19f14:	4621      	movcc	r1, r4
}
   19f16:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   19f18:	f7ec bd9c 	b.w	6a54 <bt_gatt_att_max_mtu_changed>
}
   19f1c:	bc70      	pop	{r4, r5, r6}
   19f1e:	4770      	bx	lr

00019f20 <attr_read_group_cb>:
	if (!data->rsp->len) {
   19f20:	68d0      	ldr	r0, [r2, #12]
   19f22:	7803      	ldrb	r3, [r0, #0]
   19f24:	3104      	adds	r1, #4
   19f26:	b913      	cbnz	r3, 19f2e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   19f28:	7001      	strb	r1, [r0, #0]
	return true;
   19f2a:	2001      	movs	r0, #1
}
   19f2c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   19f2e:	428b      	cmp	r3, r1
   19f30:	d0fb      	beq.n	19f2a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   19f32:	6891      	ldr	r1, [r2, #8]
   19f34:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   19f36:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   19f38:	3b04      	subs	r3, #4
   19f3a:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   19f3c:	6110      	str	r0, [r2, #16]
		return false;
   19f3e:	4770      	bx	lr

00019f40 <att_get>:
{
   19f40:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   19f42:	7a83      	ldrb	r3, [r0, #10]
   19f44:	2b07      	cmp	r3, #7
   19f46:	d001      	beq.n	19f4c <att_get+0xc>
		return NULL;
   19f48:	2000      	movs	r0, #0
}
   19f4a:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19f4c:	2104      	movs	r1, #4
   19f4e:	f7ff fe48 	bl	19be2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19f52:	2800      	cmp	r0, #0
   19f54:	d0f8      	beq.n	19f48 <att_get+0x8>
   19f56:	f3bf 8f5b 	dmb	ish
   19f5a:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   19f5e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   19f62:	075b      	lsls	r3, r3, #29
   19f64:	d4f0      	bmi.n	19f48 <att_get+0x8>
	return att_chan->att;
   19f66:	f850 0c08 	ldr.w	r0, [r0, #-8]
   19f6a:	e7ee      	b.n	19f4a <att_get+0xa>

00019f6c <chan_req_sent>:
	if (chan->req) {
   19f6c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   19f70:	b133      	cbz	r3, 19f80 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   19f72:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   19f76:	2300      	movs	r3, #0
   19f78:	f500 7088 	add.w	r0, r0, #272	; 0x110
   19f7c:	f7fd bb82 	b.w	17684 <k_work_reschedule>
}
   19f80:	4770      	bx	lr

00019f82 <write_cb>:
{
   19f82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19f84:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   19f86:	4601      	mov	r1, r0
{
   19f88:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   19f8a:	222a      	movs	r2, #42	; 0x2a
   19f8c:	6820      	ldr	r0, [r4, #0]
   19f8e:	f000 fdfb 	bl	1ab88 <bt_gatt_check_perm>
   19f92:	4605      	mov	r5, r0
   19f94:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   19f96:	bb20      	cbnz	r0, 19fe2 <write_cb+0x60>
	if (!data->req) {
   19f98:	7a23      	ldrb	r3, [r4, #8]
   19f9a:	b1ab      	cbz	r3, 19fc8 <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   19f9c:	2b18      	cmp	r3, #24
   19f9e:	bf14      	ite	ne
   19fa0:	2300      	movne	r3, #0
   19fa2:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   19fa4:	9301      	str	r3, [sp, #4]
   19fa6:	8a63      	ldrh	r3, [r4, #18]
   19fa8:	9300      	str	r3, [sp, #0]
   19faa:	68b7      	ldr	r7, [r6, #8]
   19fac:	8a23      	ldrh	r3, [r4, #16]
   19fae:	68e2      	ldr	r2, [r4, #12]
   19fb0:	6820      	ldr	r0, [r4, #0]
   19fb2:	4631      	mov	r1, r6
   19fb4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   19fb6:	1e03      	subs	r3, r0, #0
   19fb8:	db08      	blt.n	19fcc <write_cb+0x4a>
   19fba:	8a22      	ldrh	r2, [r4, #16]
   19fbc:	4293      	cmp	r3, r2
   19fbe:	d10e      	bne.n	19fde <write_cb+0x5c>
	data->err = 0U;
   19fc0:	2300      	movs	r3, #0
   19fc2:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   19fc4:	2501      	movs	r5, #1
   19fc6:	e007      	b.n	19fd8 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   19fc8:	2302      	movs	r3, #2
   19fca:	e7eb      	b.n	19fa4 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   19fcc:	f113 0fff 	cmn.w	r3, #255	; 0xff
   19fd0:	d305      	bcc.n	19fde <write_cb+0x5c>
		return -err;
   19fd2:	425b      	negs	r3, r3
   19fd4:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   19fd6:	7523      	strb	r3, [r4, #20]
}
   19fd8:	4628      	mov	r0, r5
   19fda:	b003      	add	sp, #12
   19fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   19fde:	230e      	movs	r3, #14
   19fe0:	e7f9      	b.n	19fd6 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   19fe2:	2500      	movs	r5, #0
   19fe4:	e7f8      	b.n	19fd8 <write_cb+0x56>

00019fe6 <att_chan_read>:
{
   19fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fea:	4680      	mov	r8, r0
   19fec:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   19fee:	4610      	mov	r0, r2
{
   19ff0:	4699      	mov	r9, r3
   19ff2:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   19ff4:	f7ff fe26 	bl	19c44 <net_buf_frags_len>
   19ff8:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   19ffc:	4283      	cmp	r3, r0
{
   19ffe:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1a000:	d97a      	bls.n	1a0f8 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a002:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1a006:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1a008:	4630      	mov	r0, r6
   1a00a:	f000 fea6 	bl	1ad5a <net_buf_frag_last>
	size_t len, total = 0;
   1a00e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1a012:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1a014:	4630      	mov	r0, r6
   1a016:	f7ff fe15 	bl	19c44 <net_buf_frags_len>
   1a01a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1a01e:	f105 0708 	add.w	r7, r5, #8
   1a022:	1a24      	subs	r4, r4, r0
   1a024:	4638      	mov	r0, r7
   1a026:	f000 ff01 	bl	1ae2c <net_buf_simple_tailroom>
   1a02a:	4284      	cmp	r4, r0
   1a02c:	d211      	bcs.n	1a052 <att_chan_read+0x6c>
   1a02e:	4630      	mov	r0, r6
   1a030:	f7ff fe08 	bl	19c44 <net_buf_frags_len>
   1a034:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1a038:	1a24      	subs	r4, r4, r0
		if (!len) {
   1a03a:	bb34      	cbnz	r4, 1a08a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1a03c:	79b0      	ldrb	r0, [r6, #6]
   1a03e:	f7fa f8cb 	bl	141d8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1a042:	2200      	movs	r2, #0
   1a044:	2300      	movs	r3, #0
   1a046:	f000 fe54 	bl	1acf2 <net_buf_alloc_fixed>
			if (!frag) {
   1a04a:	4605      	mov	r5, r0
   1a04c:	b930      	cbnz	r0, 1a05c <att_chan_read+0x76>
	return total;
   1a04e:	4657      	mov	r7, sl
   1a050:	e02c      	b.n	1a0ac <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1a052:	4638      	mov	r0, r7
   1a054:	f000 feea 	bl	1ae2c <net_buf_simple_tailroom>
   1a058:	4604      	mov	r4, r0
   1a05a:	e7ee      	b.n	1a03a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1a05c:	4601      	mov	r1, r0
   1a05e:	4630      	mov	r0, r6
   1a060:	f000 fe8c 	bl	1ad7c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1a064:	4630      	mov	r0, r6
   1a066:	f7ff fded 	bl	19c44 <net_buf_frags_len>
   1a06a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1a06e:	f105 0708 	add.w	r7, r5, #8
   1a072:	1a24      	subs	r4, r4, r0
   1a074:	4638      	mov	r0, r7
   1a076:	f000 fed9 	bl	1ae2c <net_buf_simple_tailroom>
   1a07a:	4284      	cmp	r4, r0
   1a07c:	d21a      	bcs.n	1a0b4 <att_chan_read+0xce>
   1a07e:	4630      	mov	r0, r6
   1a080:	f7ff fde0 	bl	19c44 <net_buf_frags_len>
   1a084:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1a088:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1a08a:	68a9      	ldr	r1, [r5, #8]
   1a08c:	89aa      	ldrh	r2, [r5, #12]
   1a08e:	f8db 7004 	ldr.w	r7, [fp, #4]
   1a092:	9803      	ldr	r0, [sp, #12]
   1a094:	f8cd 9000 	str.w	r9, [sp]
   1a098:	440a      	add	r2, r1
   1a09a:	b2a3      	uxth	r3, r4
   1a09c:	4659      	mov	r1, fp
   1a09e:	47b8      	blx	r7
		if (read < 0) {
   1a0a0:	1e07      	subs	r7, r0, #0
   1a0a2:	da0c      	bge.n	1a0be <att_chan_read+0xd8>
				return total;
   1a0a4:	f1ba 0f00 	cmp.w	sl, #0
   1a0a8:	bf18      	it	ne
   1a0aa:	4657      	movne	r7, sl
}
   1a0ac:	4638      	mov	r0, r7
   1a0ae:	b005      	add	sp, #20
   1a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0b4:	4638      	mov	r0, r7
   1a0b6:	f000 feb9 	bl	1ae2c <net_buf_simple_tailroom>
   1a0ba:	4604      	mov	r4, r0
   1a0bc:	e7e5      	b.n	1a08a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1a0be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a0c0:	b993      	cbnz	r3, 1a0e8 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1a0c2:	4639      	mov	r1, r7
   1a0c4:	f105 0008 	add.w	r0, r5, #8
   1a0c8:	f000 fe75 	bl	1adb6 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1a0cc:	4630      	mov	r0, r6
   1a0ce:	f7ff fdb9 	bl	19c44 <net_buf_frags_len>
   1a0d2:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   1a0d6:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1a0d8:	4283      	cmp	r3, r0
		total += read;
   1a0da:	44ba      	add	sl, r7
		offset += read;
   1a0dc:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1a0e0:	d9b5      	bls.n	1a04e <att_chan_read+0x68>
   1a0e2:	42a7      	cmp	r7, r4
   1a0e4:	d096      	beq.n	1a014 <att_chan_read+0x2e>
   1a0e6:	e7b2      	b.n	1a04e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1a0e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a0ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a0ec:	4639      	mov	r1, r7
   1a0ee:	4628      	mov	r0, r5
   1a0f0:	4798      	blx	r3
   1a0f2:	2800      	cmp	r0, #0
   1a0f4:	d1e5      	bne.n	1a0c2 <att_chan_read+0xdc>
   1a0f6:	e7aa      	b.n	1a04e <att_chan_read+0x68>
		return 0;
   1a0f8:	2700      	movs	r7, #0
   1a0fa:	e7d7      	b.n	1a0ac <att_chan_read+0xc6>

0001a0fc <chan_req_send>:
{
   1a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1a0fe:	688f      	ldr	r7, [r1, #8]
{
   1a100:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1a102:	4638      	mov	r0, r7
   1a104:	f7ff fd9e 	bl	19c44 <net_buf_frags_len>
   1a108:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   1a10c:	4283      	cmp	r3, r0
{
   1a10e:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1a110:	d30d      	bcc.n	1a12e <chan_req_send+0x32>
	req->buf = NULL;
   1a112:	2600      	movs	r6, #0
	chan->req = req;
   1a114:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1a118:	4632      	mov	r2, r6
	req->buf = NULL;
   1a11a:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1a11c:	4620      	mov	r0, r4
   1a11e:	4639      	mov	r1, r7
   1a120:	f7eb fcd6 	bl	5ad0 <chan_send>
	if (err) {
   1a124:	b110      	cbz	r0, 1a12c <chan_req_send+0x30>
		req->buf = buf;
   1a126:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   1a128:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   1a12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1a12e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1a132:	e7fb      	b.n	1a12c <chan_req_send+0x30>

0001a134 <process_queue>:
{
   1a134:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1a136:	2200      	movs	r2, #0
{
   1a138:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1a13a:	2300      	movs	r3, #0
   1a13c:	4608      	mov	r0, r1
{
   1a13e:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1a140:	f000 fddc 	bl	1acfc <net_buf_get>
	if (buf) {
   1a144:	4605      	mov	r5, r0
   1a146:	b160      	cbz	r0, 1a162 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1a148:	4601      	mov	r1, r0
   1a14a:	2200      	movs	r2, #0
   1a14c:	4620      	mov	r0, r4
   1a14e:	f7eb fcbf 	bl	5ad0 <chan_send>
		if (err) {
   1a152:	4604      	mov	r4, r0
   1a154:	b118      	cbz	r0, 1a15e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1a156:	4629      	mov	r1, r5
   1a158:	4630      	mov	r0, r6
   1a15a:	f001 fe3e 	bl	1bdda <k_queue_prepend>
}
   1a15e:	4620      	mov	r0, r4
   1a160:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1a162:	f06f 0401 	mvn.w	r4, #1
   1a166:	e7fa      	b.n	1a15e <process_queue+0x2a>

0001a168 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a168:	b510      	push	{r4, lr}
	return list->head;
   1a16a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a16c:	2200      	movs	r2, #0
   1a16e:	b153      	cbz	r3, 1a186 <sys_slist_find_and_remove.isra.0+0x1e>
   1a170:	428b      	cmp	r3, r1
   1a172:	d10e      	bne.n	1a192 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1a174:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1a176:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1a178:	b932      	cbnz	r2, 1a188 <sys_slist_find_and_remove.isra.0+0x20>
   1a17a:	42a1      	cmp	r1, r4
	list->head = node;
   1a17c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a17e:	d100      	bne.n	1a182 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1a180:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1a182:	2300      	movs	r3, #0
   1a184:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a186:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1a188:	42a1      	cmp	r1, r4
	parent->next = child;
   1a18a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1a18c:	bf08      	it	eq
   1a18e:	6042      	streq	r2, [r0, #4]
}
   1a190:	e7f7      	b.n	1a182 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1a192:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a194:	681b      	ldr	r3, [r3, #0]
   1a196:	e7ea      	b.n	1a16e <sys_slist_find_and_remove.isra.0+0x6>

0001a198 <att_exec_write_req>:
   1a198:	2006      	movs	r0, #6
   1a19a:	4770      	bx	lr

0001a19c <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a19c:	30f0      	adds	r0, #240	; 0xf0
   1a19e:	f3bf 8f5b 	dmb	ish
   1a1a2:	e850 3f00 	ldrex	r3, [r0]
   1a1a6:	f023 0301 	bic.w	r3, r3, #1
   1a1aa:	e840 3200 	strex	r2, r3, [r0]
   1a1ae:	2a00      	cmp	r2, #0
   1a1b0:	d1f7      	bne.n	1a1a2 <chan_rsp_sent+0x6>
   1a1b2:	f3bf 8f5b 	dmb	ish
}
   1a1b6:	4770      	bx	lr

0001a1b8 <chan_cfm_sent>:
   1a1b8:	30f0      	adds	r0, #240	; 0xf0
   1a1ba:	f3bf 8f5b 	dmb	ish
   1a1be:	e850 3f00 	ldrex	r3, [r0]
   1a1c2:	f023 0302 	bic.w	r3, r3, #2
   1a1c6:	e840 3200 	strex	r2, r3, [r0]
   1a1ca:	2a00      	cmp	r2, #0
   1a1cc:	d1f7      	bne.n	1a1be <chan_cfm_sent+0x6>
   1a1ce:	f3bf 8f5b 	dmb	ish
}
   1a1d2:	4770      	bx	lr

0001a1d4 <read_cb>:
{
   1a1d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1a1d8:	f8d2 8000 	ldr.w	r8, [r2]
{
   1a1dc:	4606      	mov	r6, r0
	data->err = 0x00;
   1a1de:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1a1e0:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1a1e4:	7317      	strb	r7, [r2, #12]
{
   1a1e6:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a1e8:	4631      	mov	r1, r6
   1a1ea:	2215      	movs	r2, #21
   1a1ec:	f000 fccc 	bl	1ab88 <bt_gatt_check_perm>
   1a1f0:	4604      	mov	r4, r0
   1a1f2:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1a1f4:	b9a0      	cbnz	r0, 1a220 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1a1f6:	e9cd 0000 	strd	r0, r0, [sp]
   1a1fa:	88ab      	ldrh	r3, [r5, #4]
   1a1fc:	68aa      	ldr	r2, [r5, #8]
   1a1fe:	4631      	mov	r1, r6
   1a200:	4640      	mov	r0, r8
   1a202:	f7ff fef0 	bl	19fe6 <att_chan_read>
	if (ret < 0) {
   1a206:	1e03      	subs	r3, r0, #0
   1a208:	da0c      	bge.n	1a224 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1a20a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1a20e:	bf26      	itte	cs
   1a210:	425b      	negcs	r3, r3
   1a212:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1a214:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1a216:	732b      	strb	r3, [r5, #12]
}
   1a218:	4620      	mov	r0, r4
   1a21a:	b002      	add	sp, #8
   1a21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1a220:	463c      	mov	r4, r7
   1a222:	e7f9      	b.n	1a218 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1a224:	2401      	movs	r4, #1
   1a226:	e7f7      	b.n	1a218 <read_cb+0x44>

0001a228 <bt_att_sent>:
{
   1a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1a22a:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1a22e:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1a232:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1a234:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1a238:	b10b      	cbz	r3, 1a23e <bt_att_sent+0x16>
		chan->sent(chan);
   1a23a:	4638      	mov	r0, r7
   1a23c:	4798      	blx	r3
   1a23e:	f3bf 8f5b 	dmb	ish
   1a242:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1a246:	e853 2f00 	ldrex	r2, [r3]
   1a24a:	f022 0210 	bic.w	r2, r2, #16
   1a24e:	e843 2100 	strex	r1, r2, [r3]
   1a252:	2900      	cmp	r1, #0
   1a254:	d1f7      	bne.n	1a246 <bt_att_sent+0x1e>
   1a256:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1a25a:	b30c      	cbz	r4, 1a2a0 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1a25c:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1a260:	b98b      	cbnz	r3, 1a286 <bt_att_sent+0x5e>
   1a262:	6863      	ldr	r3, [r4, #4]
   1a264:	b17b      	cbz	r3, 1a286 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1a266:	1d20      	adds	r0, r4, #4
   1a268:	f7ff fce2 	bl	19c30 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1a26c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1a26e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1a270:	4638      	mov	r0, r7
   1a272:	f7ff ff43 	bl	1a0fc <chan_req_send>
   1a276:	2800      	cmp	r0, #0
   1a278:	da12      	bge.n	1a2a0 <bt_att_sent+0x78>
	parent->next = child;
   1a27a:	6863      	ldr	r3, [r4, #4]
   1a27c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1a27e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1a280:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1a282:	b903      	cbnz	r3, 1a286 <bt_att_sent+0x5e>
	list->tail = node;
   1a284:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1a286:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1a28a:	4638      	mov	r0, r7
   1a28c:	f7ff ff52 	bl	1a134 <process_queue>
	if (!err) {
   1a290:	b130      	cbz	r0, 1a2a0 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1a292:	f104 010c 	add.w	r1, r4, #12
   1a296:	4638      	mov	r0, r7
}
   1a298:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1a29c:	f7ff bf4a 	b.w	1a134 <process_queue>
}
   1a2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a2a2 <att_req_send_process>:
{
   1a2a2:	b570      	push	{r4, r5, r6, lr}
   1a2a4:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   1a2a6:	3004      	adds	r0, #4
   1a2a8:	f7ff fcc2 	bl	19c30 <sys_slist_get>
	if (!node) {
   1a2ac:	4605      	mov	r5, r0
   1a2ae:	b1b8      	cbz	r0, 1a2e0 <att_req_send_process+0x3e>
	return list->head;
   1a2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a2b2:	b14b      	cbz	r3, 1a2c8 <att_req_send_process+0x26>
	return node->next;
   1a2b4:	681e      	ldr	r6, [r3, #0]
   1a2b6:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   1a2ba:	b10e      	cbz	r6, 1a2c0 <att_req_send_process+0x1e>
   1a2bc:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   1a2c0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1a2c4:	b13b      	cbz	r3, 1a2d6 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a2c6:	b966      	cbnz	r6, 1a2e2 <att_req_send_process+0x40>
	parent->next = child;
   1a2c8:	6863      	ldr	r3, [r4, #4]
   1a2ca:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1a2cc:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1a2ce:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1a2d0:	b933      	cbnz	r3, 1a2e0 <att_req_send_process+0x3e>
	list->tail = node;
   1a2d2:	60a5      	str	r5, [r4, #8]
}
   1a2d4:	e004      	b.n	1a2e0 <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   1a2d6:	4629      	mov	r1, r5
   1a2d8:	f7ff ff10 	bl	1a0fc <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1a2dc:	2800      	cmp	r0, #0
   1a2de:	dbf2      	blt.n	1a2c6 <att_req_send_process+0x24>
}
   1a2e0:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   1a2e2:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a2e6:	b10b      	cbz	r3, 1a2ec <att_req_send_process+0x4a>
   1a2e8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1a2ec:	4630      	mov	r0, r6
   1a2ee:	461e      	mov	r6, r3
   1a2f0:	e7e6      	b.n	1a2c0 <att_req_send_process+0x1e>

0001a2f2 <bt_att_status>:
{
   1a2f2:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a2f4:	f3bf 8f5b 	dmb	ish
   1a2f8:	680b      	ldr	r3, [r1, #0]
   1a2fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1a2fe:	07db      	lsls	r3, r3, #31
{
   1a300:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1a302:	d519      	bpl.n	1a338 <bt_att_status+0x46>
	if (!chan->att) {
   1a304:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1a308:	b1b0      	cbz	r0, 1a338 <bt_att_status+0x46>
	if (chan->req) {
   1a30a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1a30e:	b99b      	cbnz	r3, 1a338 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1a310:	3004      	adds	r0, #4
   1a312:	f7ff fc8d 	bl	19c30 <sys_slist_get>
	if (!node) {
   1a316:	4604      	mov	r4, r0
   1a318:	b170      	cbz	r0, 1a338 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1a31a:	4601      	mov	r1, r0
   1a31c:	f1a5 0008 	sub.w	r0, r5, #8
   1a320:	f7ff feec 	bl	1a0fc <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1a324:	2800      	cmp	r0, #0
   1a326:	da07      	bge.n	1a338 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1a328:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1a32c:	685a      	ldr	r2, [r3, #4]
   1a32e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1a330:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1a332:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1a334:	b902      	cbnz	r2, 1a338 <bt_att_status+0x46>
	list->tail = node;
   1a336:	609c      	str	r4, [r3, #8]
}
   1a338:	bd38      	pop	{r3, r4, r5, pc}

0001a33a <bt_att_chan_create_pdu>:
{
   1a33a:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a33c:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1a340:	3201      	adds	r2, #1
   1a342:	429a      	cmp	r2, r3
{
   1a344:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a346:	d81b      	bhi.n	1a380 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1a348:	4608      	mov	r0, r1
   1a34a:	f7ff fc9b 	bl	19c84 <att_op_get_type>
   1a34e:	2802      	cmp	r0, #2
   1a350:	d001      	beq.n	1a356 <bt_att_chan_create_pdu+0x1c>
   1a352:	2804      	cmp	r0, #4
   1a354:	d10f      	bne.n	1a376 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1a356:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1a35a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1a35c:	2100      	movs	r1, #0
   1a35e:	4608      	mov	r0, r1
   1a360:	f7ff fbe7 	bl	19b32 <bt_l2cap_create_pdu_timeout>
   1a364:	4604      	mov	r4, r0
	if (!buf) {
   1a366:	b120      	cbz	r0, 1a372 <bt_att_chan_create_pdu+0x38>
   1a368:	2101      	movs	r1, #1
   1a36a:	3008      	adds	r0, #8
   1a36c:	f000 fd23 	bl	1adb6 <net_buf_simple_add>
	hdr->code = op;
   1a370:	7005      	strb	r5, [r0, #0]
}
   1a372:	4620      	mov	r0, r4
   1a374:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1a376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a37a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a37e:	e7ed      	b.n	1a35c <bt_att_chan_create_pdu+0x22>
		return NULL;
   1a380:	2400      	movs	r4, #0
   1a382:	e7f6      	b.n	1a372 <bt_att_chan_create_pdu+0x38>

0001a384 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1a384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a388:	4688      	mov	r8, r1
   1a38a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1a38c:	2101      	movs	r1, #1
   1a38e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1a390:	4605      	mov	r5, r0
   1a392:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1a394:	f7ff ffd1 	bl	1a33a <bt_att_chan_create_pdu>
	if (!buf) {
   1a398:	4604      	mov	r4, r0
   1a39a:	b170      	cbz	r0, 1a3ba <send_err_rsp.part.0+0x36>
   1a39c:	2104      	movs	r1, #4
   1a39e:	3008      	adds	r0, #8
   1a3a0:	f000 fd09 	bl	1adb6 <net_buf_simple_add>
	rsp->request = req;
   1a3a4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1a3a8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1a3aa:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1a3ae:	4621      	mov	r1, r4
   1a3b0:	4628      	mov	r0, r5
}
   1a3b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1a3b6:	f7eb bbe9 	b.w	5b8c <bt_att_chan_send_rsp.constprop.0>
}
   1a3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a3be <att_write_req>:
{
   1a3be:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a3c0:	460c      	mov	r4, r1
   1a3c2:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1a3c4:	f101 0008 	add.w	r0, r1, #8
   1a3c8:	f000 fd24 	bl	1ae14 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1a3cc:	89a2      	ldrh	r2, [r4, #12]
   1a3ce:	9201      	str	r2, [sp, #4]
   1a3d0:	68a2      	ldr	r2, [r4, #8]
   1a3d2:	9200      	str	r2, [sp, #0]
   1a3d4:	4603      	mov	r3, r0
   1a3d6:	2213      	movs	r2, #19
   1a3d8:	2112      	movs	r1, #18
   1a3da:	4628      	mov	r0, r5
   1a3dc:	f7eb fce2 	bl	5da4 <att_write_rsp.constprop.0>
}
   1a3e0:	b003      	add	sp, #12
   1a3e2:	bd30      	pop	{r4, r5, pc}

0001a3e4 <att_write_cmd>:
{
   1a3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a3e6:	460c      	mov	r4, r1
   1a3e8:	4605      	mov	r5, r0
   1a3ea:	f101 0008 	add.w	r0, r1, #8
   1a3ee:	f000 fd11 	bl	1ae14 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1a3f2:	89a2      	ldrh	r2, [r4, #12]
   1a3f4:	9201      	str	r2, [sp, #4]
   1a3f6:	68a2      	ldr	r2, [r4, #8]
   1a3f8:	9200      	str	r2, [sp, #0]
   1a3fa:	2200      	movs	r2, #0
   1a3fc:	4603      	mov	r3, r0
   1a3fe:	4611      	mov	r1, r2
   1a400:	4628      	mov	r0, r5
   1a402:	f7eb fccf 	bl	5da4 <att_write_rsp.constprop.0>
}
   1a406:	b003      	add	sp, #12
   1a408:	bd30      	pop	{r4, r5, pc}

0001a40a <bt_att_create_pdu>:
{
   1a40a:	b570      	push	{r4, r5, r6, lr}
   1a40c:	460e      	mov	r6, r1
   1a40e:	4615      	mov	r5, r2
	att = att_get(conn);
   1a410:	f7ff fd96 	bl	19f40 <att_get>
	if (!att) {
   1a414:	b168      	cbz	r0, 1a432 <bt_att_create_pdu+0x28>
	return list->head;
   1a416:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a418:	b15b      	cbz	r3, 1a432 <bt_att_create_pdu+0x28>
   1a41a:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   1a41e:	681b      	ldr	r3, [r3, #0]
   1a420:	b10b      	cbz	r3, 1a426 <bt_att_create_pdu+0x1c>
   1a422:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a426:	1c6a      	adds	r2, r5, #1
   1a428:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1a42c:	428a      	cmp	r2, r1
   1a42e:	d902      	bls.n	1a436 <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a430:	b93b      	cbnz	r3, 1a442 <bt_att_create_pdu+0x38>
}
   1a432:	2000      	movs	r0, #0
   1a434:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1a436:	462a      	mov	r2, r5
   1a438:	4631      	mov	r1, r6
}
   1a43a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1a43e:	f7ff bf7c 	b.w	1a33a <bt_att_chan_create_pdu>
   1a442:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a446:	b10c      	cbz	r4, 1a44c <bt_att_create_pdu+0x42>
   1a448:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1a44c:	4618      	mov	r0, r3
   1a44e:	4623      	mov	r3, r4
   1a450:	e7ea      	b.n	1a428 <bt_att_create_pdu+0x1e>

0001a452 <att_read_blob_req>:
{
   1a452:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1a454:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1a456:	8813      	ldrh	r3, [r2, #0]
   1a458:	8852      	ldrh	r2, [r2, #2]
   1a45a:	9200      	str	r2, [sp, #0]
   1a45c:	210c      	movs	r1, #12
   1a45e:	220d      	movs	r2, #13
   1a460:	f7eb fdce 	bl	6000 <att_read_rsp>
}
   1a464:	b003      	add	sp, #12
   1a466:	f85d fb04 	ldr.w	pc, [sp], #4

0001a46a <att_read_req>:
{
   1a46a:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1a46c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1a46e:	2200      	movs	r2, #0
   1a470:	881b      	ldrh	r3, [r3, #0]
   1a472:	9200      	str	r2, [sp, #0]
   1a474:	210a      	movs	r1, #10
   1a476:	220b      	movs	r2, #11
   1a478:	f7eb fdc2 	bl	6000 <att_read_rsp>
}
   1a47c:	b003      	add	sp, #12
   1a47e:	f85d fb04 	ldr.w	pc, [sp], #4

0001a482 <att_mtu_req>:
{
   1a482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1a484:	6803      	ldr	r3, [r0, #0]
{
   1a486:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1a488:	6818      	ldr	r0, [r3, #0]
   1a48a:	f3bf 8f5b 	dmb	ish
   1a48e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1a492:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1a496:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1a49a:	071b      	lsls	r3, r3, #28
   1a49c:	d41d      	bmi.n	1a4da <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1a49e:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1a4a0:	881b      	ldrh	r3, [r3, #0]
   1a4a2:	2b16      	cmp	r3, #22
   1a4a4:	d91b      	bls.n	1a4de <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1a4a6:	2202      	movs	r2, #2
   1a4a8:	2103      	movs	r1, #3
   1a4aa:	f7ff ffae 	bl	1a40a <bt_att_create_pdu>
	if (!pdu) {
   1a4ae:	4606      	mov	r6, r0
   1a4b0:	b1b8      	cbz	r0, 1a4e2 <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   1a4b2:	2102      	movs	r1, #2
   1a4b4:	3008      	adds	r0, #8
   1a4b6:	f000 fc7e 	bl	1adb6 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1a4ba:	2717      	movs	r7, #23
   1a4bc:	7007      	strb	r7, [r0, #0]
   1a4be:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1a4c0:	4631      	mov	r1, r6
   1a4c2:	4620      	mov	r0, r4
   1a4c4:	f7eb fb62 	bl	5b8c <bt_att_chan_send_rsp.constprop.0>
	att_chan_mtu_updated(chan);
   1a4c8:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1a4ca:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1a4ce:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1a4d2:	f7ff fcef 	bl	19eb4 <att_chan_mtu_updated>
	return 0;
   1a4d6:	4628      	mov	r0, r5
}
   1a4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1a4da:	2006      	movs	r0, #6
   1a4dc:	e7fc      	b.n	1a4d8 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   1a4de:	2004      	movs	r0, #4
   1a4e0:	e7fa      	b.n	1a4d8 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   1a4e2:	200e      	movs	r0, #14
   1a4e4:	e7f8      	b.n	1a4d8 <att_mtu_req+0x56>

0001a4e6 <bt_att_init>:
	bt_gatt_init();
   1a4e6:	f7ec b833 	b.w	6550 <bt_gatt_init>

0001a4ea <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1a4ea:	898a      	ldrh	r2, [r1, #12]
   1a4ec:	6889      	ldr	r1, [r1, #8]
   1a4ee:	2300      	movs	r3, #0
   1a4f0:	f7eb bef8 	b.w	62e4 <att_handle_rsp>

0001a4f4 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   1a4f4:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   1a4f8:	f7eb bf26 	b.w	6348 <bt_att_disconnected>

0001a4fc <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1a4fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a500:	4607      	mov	r7, r0
   1a502:	460d      	mov	r5, r1
   1a504:	4616      	mov	r6, r2
   1a506:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1a508:	f7ff fd1a 	bl	19f40 <att_get>
	if (!att) {
   1a50c:	4604      	mov	r4, r0
   1a50e:	b938      	cbnz	r0, 1a520 <bt_att_send+0x24>
		net_buf_unref(buf);
   1a510:	4628      	mov	r0, r5
   1a512:	f7f9 ff25 	bl	14360 <net_buf_unref>
		return -ENOTCONN;
   1a516:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1a51a:	b002      	add	sp, #8
   1a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1a520:	b146      	cbz	r6, 1a534 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1a522:	f8cd 8000 	str.w	r8, [sp]
   1a526:	4633      	mov	r3, r6
   1a528:	462a      	mov	r2, r5
   1a52a:	2104      	movs	r1, #4
   1a52c:	4638      	mov	r0, r7
   1a52e:	f7ff fb03 	bl	19b38 <bt_l2cap_send_cb>
   1a532:	e7f2      	b.n	1a51a <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1a534:	f100 060c 	add.w	r6, r0, #12
   1a538:	4629      	mov	r1, r5
   1a53a:	4630      	mov	r0, r6
   1a53c:	f000 fbfc 	bl	1ad38 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1a540:	2200      	movs	r2, #0
   1a542:	2300      	movs	r3, #0
   1a544:	4630      	mov	r0, r6
   1a546:	f000 fbd9 	bl	1acfc <net_buf_get>
	if (!buf) {
   1a54a:	4605      	mov	r5, r0
   1a54c:	b908      	cbnz	r0, 1a552 <bt_att_send+0x56>
	return 0;
   1a54e:	2000      	movs	r0, #0
   1a550:	e7e3      	b.n	1a51a <bt_att_send+0x1e>
	return list->head;
   1a552:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a554:	b1a3      	cbz	r3, 1a580 <bt_att_send+0x84>
	return node->next;
   1a556:	681c      	ldr	r4, [r3, #0]
   1a558:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   1a55c:	b10c      	cbz	r4, 1a562 <bt_att_send+0x66>
   1a55e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1a562:	2200      	movs	r2, #0
   1a564:	4629      	mov	r1, r5
   1a566:	f7eb fab3 	bl	5ad0 <chan_send>
		if (err >= 0) {
   1a56a:	2800      	cmp	r0, #0
   1a56c:	daef      	bge.n	1a54e <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a56e:	b13c      	cbz	r4, 1a580 <bt_att_send+0x84>
   1a570:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1a574:	b10b      	cbz	r3, 1a57a <bt_att_send+0x7e>
   1a576:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1a57a:	4620      	mov	r0, r4
   1a57c:	461c      	mov	r4, r3
   1a57e:	e7f0      	b.n	1a562 <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1a580:	4629      	mov	r1, r5
   1a582:	4630      	mov	r0, r6
   1a584:	f001 fc29 	bl	1bdda <k_queue_prepend>
   1a588:	e7e1      	b.n	1a54e <bt_att_send+0x52>

0001a58a <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1a58a:	b510      	push	{r4, lr}
   1a58c:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1a58e:	f7ff fcd7 	bl	19f40 <att_get>
	if (!att) {
   1a592:	b160      	cbz	r0, 1a5ae <bt_att_req_send+0x24>
	parent->next = child;
   1a594:	2300      	movs	r3, #0
   1a596:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a598:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1a59a:	b92b      	cbnz	r3, 1a5a8 <bt_att_req_send+0x1e>
	list->head = node;
   1a59c:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1a5a0:	f7ff fe7f 	bl	1a2a2 <att_req_send_process>

	return 0;
   1a5a4:	2000      	movs	r0, #0
}
   1a5a6:	bd10      	pop	{r4, pc}
	parent->next = child;
   1a5a8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a5aa:	6084      	str	r4, [r0, #8]
}
   1a5ac:	e7f8      	b.n	1a5a0 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1a5ae:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a5b2:	e7f8      	b.n	1a5a6 <bt_att_req_send+0x1c>

0001a5b4 <gatt_ccc_changed>:
{
   1a5b4:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1a5b6:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1a5b8:	895a      	ldrh	r2, [r3, #10]
   1a5ba:	428a      	cmp	r2, r1
   1a5bc:	d003      	beq.n	1a5c6 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1a5be:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1a5c0:	68db      	ldr	r3, [r3, #12]
   1a5c2:	b103      	cbz	r3, 1a5c6 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1a5c4:	4718      	bx	r3
}
   1a5c6:	4770      	bx	lr

0001a5c8 <gatt_indicate_rsp>:
{
   1a5c8:	b510      	push	{r4, lr}
   1a5ca:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1a5cc:	68a3      	ldr	r3, [r4, #8]
{
   1a5ce:	460a      	mov	r2, r1
	if (params->func) {
   1a5d0:	b10b      	cbz	r3, 1a5d6 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1a5d2:	4621      	mov	r1, r4
   1a5d4:	4798      	blx	r3
	params->_ref--;
   1a5d6:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1a5d8:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1a5da:	3b01      	subs	r3, #1
   1a5dc:	b2db      	uxtb	r3, r3
   1a5de:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1a5e0:	b122      	cbz	r2, 1a5ec <gatt_indicate_rsp+0x24>
   1a5e2:	b91b      	cbnz	r3, 1a5ec <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1a5e4:	4620      	mov	r0, r4
}
   1a5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1a5ea:	4710      	bx	r2
}
   1a5ec:	bd10      	pop	{r4, pc}

0001a5ee <match_uuid>:
	data->attr = attr;
   1a5ee:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1a5f0:	8091      	strh	r1, [r2, #4]
}
   1a5f2:	2000      	movs	r0, #0
   1a5f4:	4770      	bx	lr

0001a5f6 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1a5f6:	2207      	movs	r2, #7
   1a5f8:	f7fe bc02 	b.w	18e00 <memcpy>

0001a5fc <write_name>:
{
   1a5fc:	b570      	push	{r4, r5, r6, lr}
   1a5fe:	b088      	sub	sp, #32
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1a600:	2100      	movs	r1, #0
{
   1a602:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1a606:	9101      	str	r1, [sp, #4]
{
   1a608:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1a60a:	a802      	add	r0, sp, #8
   1a60c:	2218      	movs	r2, #24
{
   1a60e:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1a610:	f7fe fc01 	bl	18e16 <memset>
	if (offset >= sizeof(value)) {
   1a614:	2d1b      	cmp	r5, #27
   1a616:	d80d      	bhi.n	1a634 <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   1a618:	4425      	add	r5, r4
   1a61a:	2d1b      	cmp	r5, #27
   1a61c:	dc0d      	bgt.n	1a63a <write_name+0x3e>
	memcpy(value, buf, len);
   1a61e:	4622      	mov	r2, r4
   1a620:	4631      	mov	r1, r6
   1a622:	a801      	add	r0, sp, #4
   1a624:	f7fe fbec 	bl	18e00 <memcpy>
	bt_set_name(value);
   1a628:	a801      	add	r0, sp, #4
   1a62a:	f7e9 ffb5 	bl	4598 <bt_set_name>
}
   1a62e:	4620      	mov	r0, r4
   1a630:	b008      	add	sp, #32
   1a632:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a634:	f06f 0406 	mvn.w	r4, #6
   1a638:	e7f9      	b.n	1a62e <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a63a:	f06f 040c 	mvn.w	r4, #12
   1a63e:	e7f6      	b.n	1a62e <write_name+0x32>

0001a640 <gen_hash_m>:
{
   1a640:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1a642:	6807      	ldr	r7, [r0, #0]
   1a644:	783d      	ldrb	r5, [r7, #0]
{
   1a646:	b089      	sub	sp, #36	; 0x24
   1a648:	4606      	mov	r6, r0
   1a64a:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1a64c:	b10d      	cbz	r5, 1a652 <gen_hash_m+0x12>
	switch (u16->val) {
   1a64e:	2501      	movs	r5, #1
   1a650:	e014      	b.n	1a67c <gen_hash_m+0x3c>
   1a652:	887b      	ldrh	r3, [r7, #2]
   1a654:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1a658:	d004      	beq.n	1a664 <gen_hash_m+0x24>
   1a65a:	d812      	bhi.n	1a682 <gen_hash_m+0x42>
   1a65c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1a660:	2b03      	cmp	r3, #3
   1a662:	d8f4      	bhi.n	1a64e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1a664:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a668:	2202      	movs	r2, #2
   1a66a:	f10d 010a 	add.w	r1, sp, #10
   1a66e:	4620      	mov	r0, r4
   1a670:	f7fe facc 	bl	18c0c <tc_cmac_update>
   1a674:	b9e0      	cbnz	r0, 1a6b0 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1a676:	f06f 0315 	mvn.w	r3, #21
   1a67a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1a67c:	4628      	mov	r0, r5
   1a67e:	b009      	add	sp, #36	; 0x24
   1a680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1a682:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1a686:	33ff      	adds	r3, #255	; 0xff
   1a688:	b29b      	uxth	r3, r3
   1a68a:	2b04      	cmp	r3, #4
   1a68c:	d8df      	bhi.n	1a64e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1a68e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a692:	2202      	movs	r2, #2
   1a694:	f10d 010a 	add.w	r1, sp, #10
   1a698:	4620      	mov	r0, r4
   1a69a:	f7fe fab7 	bl	18c0c <tc_cmac_update>
   1a69e:	2800      	cmp	r0, #0
   1a6a0:	d0e9      	beq.n	1a676 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1a6a2:	887b      	ldrh	r3, [r7, #2]
   1a6a4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a6a8:	2202      	movs	r2, #2
   1a6aa:	f10d 010a 	add.w	r1, sp, #10
   1a6ae:	e016      	b.n	1a6de <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   1a6b0:	887b      	ldrh	r3, [r7, #2]
   1a6b2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a6b6:	2202      	movs	r2, #2
   1a6b8:	f10d 010a 	add.w	r1, sp, #10
   1a6bc:	4620      	mov	r0, r4
   1a6be:	f7fe faa5 	bl	18c0c <tc_cmac_update>
   1a6c2:	2800      	cmp	r0, #0
   1a6c4:	d0d7      	beq.n	1a676 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1a6c6:	2000      	movs	r0, #0
   1a6c8:	aa03      	add	r2, sp, #12
   1a6ca:	6877      	ldr	r7, [r6, #4]
   1a6cc:	9000      	str	r0, [sp, #0]
   1a6ce:	2313      	movs	r3, #19
   1a6d0:	4631      	mov	r1, r6
   1a6d2:	47b8      	blx	r7
		if (len < 0) {
   1a6d4:	1e02      	subs	r2, r0, #0
   1a6d6:	da01      	bge.n	1a6dc <gen_hash_m+0x9c>
			state->err = len;
   1a6d8:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1a6da:	e7cf      	b.n	1a67c <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1a6dc:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1a6de:	4620      	mov	r0, r4
   1a6e0:	f7fe fa94 	bl	18c0c <tc_cmac_update>
   1a6e4:	2800      	cmp	r0, #0
   1a6e6:	d1b2      	bne.n	1a64e <gen_hash_m+0xe>
   1a6e8:	e7c5      	b.n	1a676 <gen_hash_m+0x36>

0001a6ea <clear_cf_cfg>:
{
   1a6ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a6ec:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a6ee:	2500      	movs	r5, #0
   1a6f0:	4669      	mov	r1, sp
   1a6f2:	3001      	adds	r0, #1
   1a6f4:	9500      	str	r5, [sp, #0]
   1a6f6:	f8cd 5003 	str.w	r5, [sp, #3]
   1a6fa:	f7ff ff7c 	bl	1a5f6 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1a6fe:	f104 0008 	add.w	r0, r4, #8
   1a702:	2201      	movs	r2, #1
   1a704:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a706:	340c      	adds	r4, #12
   1a708:	f7fe fb85 	bl	18e16 <memset>
   1a70c:	f3bf 8f5b 	dmb	ish
   1a710:	e854 3f00 	ldrex	r3, [r4]
   1a714:	e844 5200 	strex	r2, r5, [r4]
   1a718:	2a00      	cmp	r2, #0
   1a71a:	d1f9      	bne.n	1a710 <clear_cf_cfg+0x26>
   1a71c:	f3bf 8f5b 	dmb	ish
}
   1a720:	b003      	add	sp, #12
   1a722:	bd30      	pop	{r4, r5, pc}

0001a724 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1a724:	2301      	movs	r3, #1
   1a726:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a728:	f3bf 8f5b 	dmb	ish
   1a72c:	e850 2f00 	ldrex	r2, [r0]
   1a730:	431a      	orrs	r2, r3
   1a732:	e840 2100 	strex	r1, r2, [r0]
   1a736:	2900      	cmp	r1, #0
   1a738:	d1f8      	bne.n	1a72c <atomic_set_bit+0x8>
   1a73a:	f3bf 8f5b 	dmb	ish
}
   1a73e:	4770      	bx	lr

0001a740 <cf_write>:
{
   1a740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a744:	4698      	mov	r8, r3
   1a746:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1a74a:	2b01      	cmp	r3, #1
{
   1a74c:	4606      	mov	r6, r0
   1a74e:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1a750:	d830      	bhi.n	1a7b4 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   1a752:	4443      	add	r3, r8
   1a754:	2b01      	cmp	r3, #1
   1a756:	4645      	mov	r5, r8
   1a758:	dc2f      	bgt.n	1a7ba <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   1a75a:	f7eb fe4f 	bl	63fc <find_cf_cfg>
	if (!cfg) {
   1a75e:	4604      	mov	r4, r0
   1a760:	b918      	cbnz	r0, 1a76a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1a762:	f7eb fe4b 	bl	63fc <find_cf_cfg>
	if (!cfg) {
   1a766:	4604      	mov	r4, r0
   1a768:	b350      	cbz	r0, 1a7c0 <cf_write+0x80>
{
   1a76a:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a76c:	f1b8 0f00 	cmp.w	r8, #0
   1a770:	d10e      	bne.n	1a790 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a772:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a776:	1c60      	adds	r0, r4, #1
   1a778:	f7ff ff3d 	bl	1a5f6 <bt_addr_le_copy>
	cfg->id = conn->id;
   1a77c:	4620      	mov	r0, r4
   1a77e:	7a33      	ldrb	r3, [r6, #8]
   1a780:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1a784:	2100      	movs	r1, #0
   1a786:	f7ff ffcd 	bl	1a724 <atomic_set_bit>
}
   1a78a:	4628      	mov	r0, r5
   1a78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a790:	7a20      	ldrb	r0, [r4, #8]
   1a792:	fa20 f301 	lsr.w	r3, r0, r1
   1a796:	07da      	lsls	r2, r3, #31
   1a798:	d503      	bpl.n	1a7a2 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   1a79a:	783b      	ldrb	r3, [r7, #0]
   1a79c:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a79e:	07db      	lsls	r3, r3, #31
   1a7a0:	d511      	bpl.n	1a7c6 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a7a2:	3101      	adds	r1, #1
   1a7a4:	2903      	cmp	r1, #3
   1a7a6:	d1e1      	bne.n	1a76c <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1a7a8:	783b      	ldrb	r3, [r7, #0]
   1a7aa:	f003 0307 	and.w	r3, r3, #7
   1a7ae:	4318      	orrs	r0, r3
   1a7b0:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1a7b2:	e7de      	b.n	1a772 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a7b4:	f06f 0506 	mvn.w	r5, #6
   1a7b8:	e7e7      	b.n	1a78a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a7ba:	f06f 050c 	mvn.w	r5, #12
   1a7be:	e7e4      	b.n	1a78a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a7c0:	f06f 0510 	mvn.w	r5, #16
   1a7c4:	e7e1      	b.n	1a78a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1a7c6:	f06f 0512 	mvn.w	r5, #18
   1a7ca:	e7de      	b.n	1a78a <cf_write+0x4a>

0001a7cc <read_ppcp>:
{
   1a7cc:	b513      	push	{r0, r1, r4, lr}
   1a7ce:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1a7d0:	2218      	movs	r2, #24
{
   1a7d2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1a7d6:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1a7da:	2228      	movs	r2, #40	; 0x28
   1a7dc:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1a7e0:	2200      	movs	r2, #0
   1a7e2:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   1a7e6:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1a7e8:	f04f 022a 	mov.w	r2, #42	; 0x2a
   1a7ec:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1a7f0:	d80b      	bhi.n	1a80a <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   1a7f2:	f1c1 0408 	rsb	r4, r1, #8
   1a7f6:	429c      	cmp	r4, r3
   1a7f8:	bfa8      	it	ge
   1a7fa:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1a7fc:	4622      	mov	r2, r4
   1a7fe:	4469      	add	r1, sp
   1a800:	f7fe fafe 	bl	18e00 <memcpy>
}
   1a804:	4620      	mov	r0, r4
   1a806:	b002      	add	sp, #8
   1a808:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a80a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1a80e:	e7f9      	b.n	1a804 <read_ppcp+0x38>

0001a810 <read_appearance>:
{
   1a810:	b513      	push	{r0, r1, r4, lr}
   1a812:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1a816:	4610      	mov	r0, r2
	if (offset > value_len) {
   1a818:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1a81a:	f04f 0200 	mov.w	r2, #0
   1a81e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1a822:	d80d      	bhi.n	1a840 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1a824:	f1c1 0402 	rsb	r4, r1, #2
   1a828:	429c      	cmp	r4, r3
   1a82a:	bfa8      	it	ge
   1a82c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1a82e:	f10d 0306 	add.w	r3, sp, #6
   1a832:	4622      	mov	r2, r4
   1a834:	4419      	add	r1, r3
   1a836:	f7fe fae3 	bl	18e00 <memcpy>
}
   1a83a:	4620      	mov	r0, r4
   1a83c:	b002      	add	sp, #8
   1a83e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a840:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1a844:	e7f9      	b.n	1a83a <read_appearance+0x2a>

0001a846 <read_name>:
{
   1a846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a84a:	4698      	mov	r8, r3
   1a84c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1a850:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1a852:	f7e9 ff11 	bl	4678 <bt_get_name>
   1a856:	4607      	mov	r7, r0
				 strlen(name));
   1a858:	f7fe faa5 	bl	18da6 <strlen>
	if (offset > value_len) {
   1a85c:	b283      	uxth	r3, r0
   1a85e:	42b3      	cmp	r3, r6
   1a860:	d30c      	bcc.n	1a87c <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1a862:	1b9c      	subs	r4, r3, r6
   1a864:	4544      	cmp	r4, r8
   1a866:	bfa8      	it	ge
   1a868:	4644      	movge	r4, r8
   1a86a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1a86c:	4622      	mov	r2, r4
   1a86e:	19b9      	adds	r1, r7, r6
   1a870:	4628      	mov	r0, r5
   1a872:	f7fe fac5 	bl	18e00 <memcpy>
}
   1a876:	4620      	mov	r0, r4
   1a878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a87c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1a880:	e7f9      	b.n	1a876 <read_name+0x30>

0001a882 <cf_read>:
{
   1a882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a884:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1a886:	2300      	movs	r3, #0
{
   1a888:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1a88c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1a890:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1a892:	f7eb fdb3 	bl	63fc <find_cf_cfg>
	if (cfg) {
   1a896:	b128      	cbz	r0, 1a8a4 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1a898:	f100 0108 	add.w	r1, r0, #8
   1a89c:	2201      	movs	r2, #1
   1a89e:	a801      	add	r0, sp, #4
   1a8a0:	f7fe faae 	bl	18e00 <memcpy>
	if (offset > value_len) {
   1a8a4:	2e01      	cmp	r6, #1
   1a8a6:	d80d      	bhi.n	1a8c4 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1a8a8:	f1c6 0401 	rsb	r4, r6, #1
   1a8ac:	42bc      	cmp	r4, r7
   1a8ae:	bfa8      	it	ge
   1a8b0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1a8b2:	ab01      	add	r3, sp, #4
   1a8b4:	4622      	mov	r2, r4
   1a8b6:	1999      	adds	r1, r3, r6
   1a8b8:	4628      	mov	r0, r5
   1a8ba:	f7fe faa1 	bl	18e00 <memcpy>
}
   1a8be:	4620      	mov	r0, r4
   1a8c0:	b003      	add	sp, #12
   1a8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a8c4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1a8c8:	e7f9      	b.n	1a8be <cf_read+0x3c>

0001a8ca <bt_gatt_attr_read_service>:
{
   1a8ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1a8cc:	68c9      	ldr	r1, [r1, #12]
{
   1a8ce:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1a8d2:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1a8d4:	780b      	ldrb	r3, [r1, #0]
{
   1a8d6:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1a8d8:	b993      	cbnz	r3, 1a900 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1a8da:	884b      	ldrh	r3, [r1, #2]
   1a8dc:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1a8e0:	2d02      	cmp	r5, #2
   1a8e2:	d819      	bhi.n	1a918 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1a8e4:	f1c5 0202 	rsb	r2, r5, #2
   1a8e8:	4294      	cmp	r4, r2
   1a8ea:	bfa8      	it	ge
   1a8ec:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1a8ee:	f10d 0306 	add.w	r3, sp, #6
   1a8f2:	4622      	mov	r2, r4
   1a8f4:	1959      	adds	r1, r3, r5
   1a8f6:	f7fe fa83 	bl	18e00 <memcpy>
}
   1a8fa:	4620      	mov	r0, r4
   1a8fc:	b003      	add	sp, #12
   1a8fe:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1a900:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1a902:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1a906:	d807      	bhi.n	1a918 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1a908:	f1c5 0210 	rsb	r2, r5, #16
   1a90c:	4294      	cmp	r4, r2
   1a90e:	bfa8      	it	ge
   1a910:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1a912:	4622      	mov	r2, r4
   1a914:	4429      	add	r1, r5
   1a916:	e7ee      	b.n	1a8f6 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a918:	f06f 0406 	mvn.w	r4, #6
   1a91c:	e7ed      	b.n	1a8fa <bt_gatt_attr_read_service+0x30>

0001a91e <find_ccc_cfg>:
{
   1a91e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a920:	460c      	mov	r4, r1
						    &cfg->peer)) {
   1a922:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1a924:	b148      	cbz	r0, 1a93a <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1a926:	7809      	ldrb	r1, [r1, #0]
   1a928:	462a      	mov	r2, r5
   1a92a:	f7ff f845 	bl	199b8 <bt_conn_is_peer_addr_le>
	return NULL;
   1a92e:	2800      	cmp	r0, #0
   1a930:	bf08      	it	eq
   1a932:	2400      	moveq	r4, #0
}
   1a934:	4620      	mov	r0, r4
   1a936:	b003      	add	sp, #12
   1a938:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a93a:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   1a93c:	2207      	movs	r2, #7
   1a93e:	f8cd 0003 	str.w	r0, [sp, #3]
   1a942:	4669      	mov	r1, sp
   1a944:	4628      	mov	r0, r5
   1a946:	f7fe fa4a 	bl	18dde <memcmp>
	return NULL;
   1a94a:	2800      	cmp	r0, #0
   1a94c:	bf18      	it	ne
   1a94e:	2400      	movne	r4, #0
   1a950:	e7f0      	b.n	1a934 <find_ccc_cfg+0x16>

0001a952 <bt_gatt_attr_write_ccc>:
{
   1a952:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a956:	461f      	mov	r7, r3
   1a958:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1a95c:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1a960:	4606      	mov	r6, r0
   1a962:	4688      	mov	r8, r1
	if (offset) {
   1a964:	2b00      	cmp	r3, #0
   1a966:	d141      	bne.n	1a9ec <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   1a968:	1e7b      	subs	r3, r7, #1
   1a96a:	2b01      	cmp	r3, #1
   1a96c:	d841      	bhi.n	1a9f2 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   1a96e:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1a970:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1a972:	4649      	mov	r1, r9
   1a974:	bf14      	ite	ne
   1a976:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   1a978:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   1a97a:	f7ff ffd0 	bl	1a91e <find_ccc_cfg>
	if (!cfg) {
   1a97e:	4604      	mov	r4, r0
   1a980:	b980      	cbnz	r0, 1a9a4 <bt_gatt_attr_write_ccc+0x52>
		if (!value) {
   1a982:	b91d      	cbnz	r5, 1a98c <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1a984:	4638      	mov	r0, r7
}
   1a986:	b003      	add	sp, #12
   1a988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1a98c:	4649      	mov	r1, r9
   1a98e:	f7ff ffc6 	bl	1a91e <find_ccc_cfg>
		if (!cfg) {
   1a992:	4604      	mov	r4, r0
   1a994:	b380      	cbz	r0, 1a9f8 <bt_gatt_attr_write_ccc+0xa6>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a996:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1a99a:	3001      	adds	r0, #1
   1a99c:	f7ff fe2b 	bl	1a5f6 <bt_addr_le_copy>
		cfg->id = conn->id;
   1a9a0:	7a33      	ldrb	r3, [r6, #8]
   1a9a2:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1a9a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1a9a8:	b9a3      	cbnz	r3, 1a9d4 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   1a9aa:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1a9ae:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1a9b0:	42ab      	cmp	r3, r5
   1a9b2:	d003      	beq.n	1a9bc <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   1a9b4:	4649      	mov	r1, r9
   1a9b6:	4640      	mov	r0, r8
   1a9b8:	f7ff fdfc 	bl	1a5b4 <gatt_ccc_changed>
	if (!value) {
   1a9bc:	2d00      	cmp	r5, #0
   1a9be:	d1e1      	bne.n	1a984 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a9c0:	4669      	mov	r1, sp
   1a9c2:	1c60      	adds	r0, r4, #1
   1a9c4:	9500      	str	r5, [sp, #0]
   1a9c6:	f8cd 5003 	str.w	r5, [sp, #3]
   1a9ca:	f7ff fe14 	bl	1a5f6 <bt_addr_le_copy>
	cfg->id = 0U;
   1a9ce:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1a9d0:	8125      	strh	r5, [r4, #8]
}
   1a9d2:	e7d7      	b.n	1a984 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1a9d4:	462a      	mov	r2, r5
   1a9d6:	4641      	mov	r1, r8
   1a9d8:	4630      	mov	r0, r6
   1a9da:	4798      	blx	r3
		if (write < 0) {
   1a9dc:	2800      	cmp	r0, #0
   1a9de:	dbd2      	blt.n	1a986 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1a9e0:	3801      	subs	r0, #1
   1a9e2:	2801      	cmp	r0, #1
   1a9e4:	d9e1      	bls.n	1a9aa <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1a9e6:	f06f 000d 	mvn.w	r0, #13
   1a9ea:	e7cc      	b.n	1a986 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a9ec:	f06f 0006 	mvn.w	r0, #6
   1a9f0:	e7c9      	b.n	1a986 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a9f2:	f06f 000c 	mvn.w	r0, #12
   1a9f6:	e7c6      	b.n	1a986 <bt_gatt_attr_write_ccc+0x34>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a9f8:	f06f 0010 	mvn.w	r0, #16
   1a9fc:	e7c3      	b.n	1a986 <bt_gatt_attr_write_ccc+0x34>

0001a9fe <bt_gatt_attr_read_ccc>:
{
   1a9fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1aa00:	68c9      	ldr	r1, [r1, #12]
{
   1aa02:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1aa06:	4615      	mov	r5, r2
   1aa08:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1aa0a:	f7ff ff88 	bl	1a91e <find_ccc_cfg>
	if (cfg) {
   1aa0e:	b100      	cbz	r0, 1aa12 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1aa10:	8900      	ldrh	r0, [r0, #8]
   1aa12:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1aa16:	2e02      	cmp	r6, #2
   1aa18:	d80e      	bhi.n	1aa38 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1aa1a:	f1c6 0402 	rsb	r4, r6, #2
   1aa1e:	42bc      	cmp	r4, r7
   1aa20:	bfa8      	it	ge
   1aa22:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1aa24:	f10d 0306 	add.w	r3, sp, #6
   1aa28:	4622      	mov	r2, r4
   1aa2a:	1999      	adds	r1, r3, r6
   1aa2c:	4628      	mov	r0, r5
   1aa2e:	f7fe f9e7 	bl	18e00 <memcpy>
}
   1aa32:	4620      	mov	r0, r4
   1aa34:	b003      	add	sp, #12
   1aa36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1aa38:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1aa3c:	e7f9      	b.n	1aa32 <bt_gatt_attr_read_ccc+0x34>

0001aa3e <sc_save>:
{
   1aa3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1aa42:	4680      	mov	r8, r0
   1aa44:	460f      	mov	r7, r1
   1aa46:	4616      	mov	r6, r2
   1aa48:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1aa4a:	f7eb fcf5 	bl	6438 <find_sc_cfg>
	if (!cfg) {
   1aa4e:	4604      	mov	r4, r0
   1aa50:	b960      	cbnz	r0, 1aa6c <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1aa52:	4669      	mov	r1, sp
   1aa54:	9000      	str	r0, [sp, #0]
   1aa56:	f8cd 0003 	str.w	r0, [sp, #3]
   1aa5a:	f7eb fced 	bl	6438 <find_sc_cfg>
		if (!cfg) {
   1aa5e:	4604      	mov	r4, r0
   1aa60:	b178      	cbz	r0, 1aa82 <sc_save+0x44>
		cfg->id = id;
   1aa62:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1aa66:	4639      	mov	r1, r7
   1aa68:	f7ff fdc5 	bl	1a5f6 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1aa6c:	8922      	ldrh	r2, [r4, #8]
   1aa6e:	8963      	ldrh	r3, [r4, #10]
   1aa70:	b91a      	cbnz	r2, 1aa7a <sc_save+0x3c>
   1aa72:	b923      	cbnz	r3, 1aa7e <sc_save+0x40>
		cfg->data.start = start;
   1aa74:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1aa76:	8165      	strh	r5, [r4, #10]
   1aa78:	e003      	b.n	1aa82 <sc_save+0x44>
	if (new_start >= *start && new_end <= *end) {
   1aa7a:	4296      	cmp	r6, r2
   1aa7c:	d304      	bcc.n	1aa88 <sc_save+0x4a>
   1aa7e:	429d      	cmp	r5, r3
   1aa80:	d8f9      	bhi.n	1aa76 <sc_save+0x38>
}
   1aa82:	b002      	add	sp, #8
   1aa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*start = new_start;
   1aa88:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1aa8a:	e7f8      	b.n	1aa7e <sc_save+0x40>

0001aa8c <sc_clear>:
{
   1aa8c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aa8e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1aa92:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aa94:	4631      	mov	r1, r6
   1aa96:	7a00      	ldrb	r0, [r0, #8]
   1aa98:	f7fe fcf6 	bl	19488 <bt_addr_le_is_bonded>
   1aa9c:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1aa9e:	4631      	mov	r1, r6
   1aaa0:	f7eb fcca 	bl	6438 <find_sc_cfg>
	if (!cfg) {
   1aaa4:	b128      	cbz	r0, 1aab2 <sc_clear+0x26>
}
   1aaa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1aaaa:	220c      	movs	r2, #12
   1aaac:	2100      	movs	r1, #0
   1aaae:	f7fe b9b2 	b.w	18e16 <memset>
}
   1aab2:	bd70      	pop	{r4, r5, r6, pc}

0001aab4 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1aab4:	2a02      	cmp	r2, #2
{
   1aab6:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1aab8:	d108      	bne.n	1aacc <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1aaba:	2300      	movs	r3, #0
   1aabc:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1aac0:	461a      	mov	r2, r3
   1aac2:	7a00      	ldrb	r0, [r0, #8]
   1aac4:	f7ff ffbb 	bl	1aa3e <sc_save>
}
   1aac8:	2002      	movs	r0, #2
   1aaca:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1aacc:	f7ff ffde 	bl	1aa8c <sc_clear>
   1aad0:	e7fa      	b.n	1aac8 <sc_ccc_cfg_write+0x14>

0001aad2 <bt_gatt_attr_value_handle>:
{
   1aad2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1aad4:	4604      	mov	r4, r0
   1aad6:	b910      	cbnz	r0, 1aade <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1aad8:	2000      	movs	r0, #0
}
   1aada:	b002      	add	sp, #8
   1aadc:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1aade:	2300      	movs	r3, #0
   1aae0:	f88d 3004 	strb.w	r3, [sp, #4]
   1aae4:	6800      	ldr	r0, [r0, #0]
   1aae6:	f642 0303 	movw	r3, #10243	; 0x2803
   1aaea:	a901      	add	r1, sp, #4
   1aaec:	f8ad 3006 	strh.w	r3, [sp, #6]
   1aaf0:	f7fe f9ef 	bl	18ed2 <bt_uuid_cmp>
   1aaf4:	2800      	cmp	r0, #0
   1aaf6:	d1ef      	bne.n	1aad8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1aaf8:	68e3      	ldr	r3, [r4, #12]
   1aafa:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1aafc:	2800      	cmp	r0, #0
   1aafe:	d1ec      	bne.n	1aada <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1ab00:	4620      	mov	r0, r4
   1ab02:	f7eb fd7b 	bl	65fc <bt_gatt_attr_get_handle>
   1ab06:	3001      	adds	r0, #1
   1ab08:	b280      	uxth	r0, r0
	return handle;
   1ab0a:	e7e6      	b.n	1aada <bt_gatt_attr_value_handle+0x8>

0001ab0c <bt_gatt_attr_read_chrc>:
{
   1ab0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1ab0e:	68cf      	ldr	r7, [r1, #12]
{
   1ab10:	b087      	sub	sp, #28
   1ab12:	4608      	mov	r0, r1
   1ab14:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1ab16:	79bb      	ldrb	r3, [r7, #6]
   1ab18:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1ab1c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1ab20:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ab22:	f7ff ffd6 	bl	1aad2 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ab26:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ab28:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ab2c:	780b      	ldrb	r3, [r1, #0]
   1ab2e:	b99b      	cbnz	r3, 1ab58 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1ab30:	884b      	ldrh	r3, [r1, #2]
   1ab32:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1ab36:	2105      	movs	r1, #5
	if (offset > value_len) {
   1ab38:	42b1      	cmp	r1, r6
   1ab3a:	d315      	bcc.n	1ab68 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1ab3c:	1b89      	subs	r1, r1, r6
   1ab3e:	42a1      	cmp	r1, r4
   1ab40:	bfa8      	it	ge
   1ab42:	4621      	movge	r1, r4
   1ab44:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1ab46:	ab01      	add	r3, sp, #4
   1ab48:	4622      	mov	r2, r4
   1ab4a:	1999      	adds	r1, r3, r6
   1ab4c:	4628      	mov	r0, r5
   1ab4e:	f7fe f957 	bl	18e00 <memcpy>
}
   1ab52:	4620      	mov	r0, r4
   1ab54:	b007      	add	sp, #28
   1ab56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1ab58:	3101      	adds	r1, #1
   1ab5a:	2210      	movs	r2, #16
   1ab5c:	f10d 0007 	add.w	r0, sp, #7
   1ab60:	f7fe f94e 	bl	18e00 <memcpy>
		value_len += 16U;
   1ab64:	2113      	movs	r1, #19
   1ab66:	e7e7      	b.n	1ab38 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ab68:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1ab6c:	e7f1      	b.n	1ab52 <bt_gatt_attr_read_chrc+0x46>

0001ab6e <bt_gatt_foreach_attr>:
{
   1ab6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ab70:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ab74:	2300      	movs	r3, #0
   1ab76:	9300      	str	r3, [sp, #0]
   1ab78:	461a      	mov	r2, r3
   1ab7a:	f7eb fd6f 	bl	665c <bt_gatt_foreach_attr_type>
}
   1ab7e:	b005      	add	sp, #20
   1ab80:	f85d fb04 	ldr.w	pc, [sp], #4

0001ab84 <db_hash_process>:
	db_hash_gen(true);
   1ab84:	f7eb bdc4 	b.w	6710 <db_hash_gen.constprop.0>

0001ab88 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1ab88:	07d3      	lsls	r3, r2, #31
{
   1ab8a:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ab8c:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1ab8e:	d504      	bpl.n	1ab9a <bt_gatt_check_perm+0x12>
   1ab90:	f014 0f15 	tst.w	r4, #21
   1ab94:	d017      	beq.n	1abc6 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1ab96:	684b      	ldr	r3, [r1, #4]
   1ab98:	b1ab      	cbz	r3, 1abc6 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1ab9a:	0793      	lsls	r3, r2, #30
   1ab9c:	d504      	bpl.n	1aba8 <bt_gatt_check_perm+0x20>
   1ab9e:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1aba2:	d012      	beq.n	1abca <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1aba4:	688b      	ldr	r3, [r1, #8]
   1aba6:	b183      	cbz	r3, 1abca <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1aba8:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1abaa:	f014 0f30 	tst.w	r4, #48	; 0x30
   1abae:	d104      	bne.n	1abba <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1abb0:	f014 000c 	ands.w	r0, r4, #12
   1abb4:	bf18      	it	ne
   1abb6:	200f      	movne	r0, #15
}
   1abb8:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1abba:	f7fe fefb 	bl	199b4 <bt_conn_get_security>
   1abbe:	2802      	cmp	r0, #2
   1abc0:	d8f6      	bhi.n	1abb0 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1abc2:	2005      	movs	r0, #5
   1abc4:	e7f8      	b.n	1abb8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1abc6:	2002      	movs	r0, #2
   1abc8:	e7f6      	b.n	1abb8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1abca:	2003      	movs	r0, #3
   1abcc:	e7f4      	b.n	1abb8 <bt_gatt_check_perm+0x30>

0001abce <gatt_notify>:
{
   1abce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1abd2:	4614      	mov	r4, r2
   1abd4:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1abd6:	2214      	movs	r2, #20
   1abd8:	6861      	ldr	r1, [r4, #4]
{
   1abda:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1abdc:	f7ff ffd4 	bl	1ab88 <bt_gatt_check_perm>
   1abe0:	bb08      	cbnz	r0, 1ac26 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1abe2:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1abe4:	211b      	movs	r1, #27
   1abe6:	3202      	adds	r2, #2
   1abe8:	4638      	mov	r0, r7
   1abea:	f7ff fc0e 	bl	1a40a <bt_att_create_pdu>
	if (!buf) {
   1abee:	4605      	mov	r5, r0
   1abf0:	b1e8      	cbz	r0, 1ac2e <gatt_notify+0x60>
   1abf2:	f100 0908 	add.w	r9, r0, #8
   1abf6:	2102      	movs	r1, #2
   1abf8:	4648      	mov	r0, r9
   1abfa:	f000 f8dc 	bl	1adb6 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1abfe:	4606      	mov	r6, r0
   1ac00:	89a1      	ldrh	r1, [r4, #12]
   1ac02:	f826 8b02 	strh.w	r8, [r6], #2
   1ac06:	4648      	mov	r0, r9
   1ac08:	f000 f8d5 	bl	1adb6 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1ac0c:	89a2      	ldrh	r2, [r4, #12]
   1ac0e:	68a1      	ldr	r1, [r4, #8]
   1ac10:	4630      	mov	r0, r6
   1ac12:	f7fe f8f5 	bl	18e00 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1ac16:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1ac1a:	4629      	mov	r1, r5
   1ac1c:	4638      	mov	r0, r7
}
   1ac1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1ac22:	f7ff bc6b 	b.w	1a4fc <bt_att_send>
		return -EPERM;
   1ac26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1ac2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   1ac2e:	f06f 000b 	mvn.w	r0, #11
   1ac32:	e7fa      	b.n	1ac2a <gatt_notify+0x5c>

0001ac34 <bt_gatt_connected>:
}
   1ac34:	4770      	bx	lr

0001ac36 <bt_gatt_change_aware>:
{
   1ac36:	b510      	push	{r4, lr}
   1ac38:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1ac3a:	f7eb fbdf 	bl	63fc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ac3e:	4603      	mov	r3, r0
   1ac40:	b910      	cbnz	r0, 1ac48 <bt_gatt_change_aware+0x12>
		return true;
   1ac42:	2401      	movs	r4, #1
}
   1ac44:	4620      	mov	r0, r4
   1ac46:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1ac48:	7a02      	ldrb	r2, [r0, #8]
   1ac4a:	07d2      	lsls	r2, r2, #31
   1ac4c:	d5f9      	bpl.n	1ac42 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ac4e:	f3bf 8f5b 	dmb	ish
   1ac52:	68d9      	ldr	r1, [r3, #12]
   1ac54:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1ac58:	f011 0101 	ands.w	r1, r1, #1
   1ac5c:	f100 000c 	add.w	r0, r0, #12
   1ac60:	d1ef      	bne.n	1ac42 <bt_gatt_change_aware+0xc>
	if (!req) {
   1ac62:	2c00      	cmp	r4, #0
   1ac64:	d0ee      	beq.n	1ac44 <bt_gatt_change_aware+0xe>
   1ac66:	f3bf 8f5b 	dmb	ish
   1ac6a:	68db      	ldr	r3, [r3, #12]
   1ac6c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ac70:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1ac74:	079b      	lsls	r3, r3, #30
   1ac76:	d50e      	bpl.n	1ac96 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ac78:	f3bf 8f5b 	dmb	ish
   1ac7c:	e850 3f00 	ldrex	r3, [r0]
   1ac80:	f023 0302 	bic.w	r3, r3, #2
   1ac84:	e840 3200 	strex	r2, r3, [r0]
   1ac88:	2a00      	cmp	r2, #0
   1ac8a:	d1f7      	bne.n	1ac7c <bt_gatt_change_aware+0x46>
   1ac8c:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1ac90:	f7ff fd48 	bl	1a724 <atomic_set_bit>
	return false;
   1ac94:	e7d6      	b.n	1ac44 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1ac96:	2101      	movs	r1, #1
   1ac98:	e7fa      	b.n	1ac90 <bt_gatt_change_aware+0x5a>

0001ac9a <bt_smp_recv>:
{
   1ac9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1ac9c:	2100      	movs	r1, #0
   1ac9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1aca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   1aca6:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1aca8:	4608      	mov	r0, r1
   1acaa:	f7fe ff42 	bl	19b32 <bt_l2cap_create_pdu_timeout>
   1acae:	f100 0608 	add.w	r6, r0, #8
   1acb2:	4604      	mov	r4, r0
   1acb4:	2101      	movs	r1, #1
   1acb6:	4630      	mov	r0, r6
   1acb8:	f000 f87d 	bl	1adb6 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1acbc:	2505      	movs	r5, #5
   1acbe:	7005      	strb	r5, [r0, #0]
   1acc0:	2101      	movs	r1, #1
   1acc2:	4630      	mov	r0, r6
   1acc4:	f000 f877 	bl	1adb6 <net_buf_simple_add>
   1acc8:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1acca:	7005      	strb	r5, [r0, #0]
   1accc:	4622      	mov	r2, r4
   1acce:	9300      	str	r3, [sp, #0]
   1acd0:	2106      	movs	r1, #6
   1acd2:	4638      	mov	r0, r7
   1acd4:	f7fe ff30 	bl	19b38 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1acd8:	b110      	cbz	r0, 1ace0 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1acda:	4620      	mov	r0, r4
   1acdc:	f7f9 fb40 	bl	14360 <net_buf_unref>
}
   1ace0:	2000      	movs	r0, #0
   1ace2:	b003      	add	sp, #12
   1ace4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ace6 <bt_smp_sign>:
   1ace6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1acea:	4770      	bx	lr

0001acec <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1acec:	2000      	movs	r0, #0
   1acee:	4770      	bx	lr

0001acf0 <fixed_data_unref>:
}
   1acf0:	4770      	bx	lr

0001acf2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1acf2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1acf4:	6849      	ldr	r1, [r1, #4]
   1acf6:	6809      	ldr	r1, [r1, #0]
   1acf8:	f7f9 ba9e 	b.w	14238 <net_buf_alloc_len>

0001acfc <net_buf_get>:
{
   1acfc:	b570      	push	{r4, r5, r6, lr}
   1acfe:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1ad00:	f7fc fa84 	bl	1720c <z_impl_k_queue_get>
	if (!buf) {
   1ad04:	4605      	mov	r5, r0
   1ad06:	b128      	cbz	r0, 1ad14 <net_buf_get+0x18>
   1ad08:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ad0a:	7963      	ldrb	r3, [r4, #5]
   1ad0c:	f013 0301 	ands.w	r3, r3, #1
   1ad10:	d102      	bne.n	1ad18 <net_buf_get+0x1c>
	frag->frags = NULL;
   1ad12:	6023      	str	r3, [r4, #0]
}
   1ad14:	4628      	mov	r0, r5
   1ad16:	bd70      	pop	{r4, r5, r6, pc}
   1ad18:	2300      	movs	r3, #0
   1ad1a:	2200      	movs	r2, #0
   1ad1c:	4630      	mov	r0, r6
   1ad1e:	f7fc fa75 	bl	1720c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1ad22:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1ad24:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1ad26:	f023 0301 	bic.w	r3, r3, #1
   1ad2a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ad2c:	4604      	mov	r4, r0
   1ad2e:	e7ec      	b.n	1ad0a <net_buf_get+0xe>

0001ad30 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1ad30:	6883      	ldr	r3, [r0, #8]
   1ad32:	440b      	add	r3, r1
   1ad34:	6003      	str	r3, [r0, #0]
}
   1ad36:	4770      	bx	lr

0001ad38 <net_buf_put>:
{
   1ad38:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1ad3a:	460a      	mov	r2, r1
   1ad3c:	6814      	ldr	r4, [r2, #0]
   1ad3e:	b914      	cbnz	r4, 1ad46 <net_buf_put+0xe>
}
   1ad40:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1ad42:	f001 b854 	b.w	1bdee <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1ad46:	7953      	ldrb	r3, [r2, #5]
   1ad48:	f043 0301 	orr.w	r3, r3, #1
   1ad4c:	7153      	strb	r3, [r2, #5]
   1ad4e:	4622      	mov	r2, r4
   1ad50:	e7f4      	b.n	1ad3c <net_buf_put+0x4>

0001ad52 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1ad52:	7902      	ldrb	r2, [r0, #4]
   1ad54:	3201      	adds	r2, #1
   1ad56:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1ad58:	4770      	bx	lr

0001ad5a <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1ad5a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1ad5c:	4618      	mov	r0, r3
   1ad5e:	681b      	ldr	r3, [r3, #0]
   1ad60:	2b00      	cmp	r3, #0
   1ad62:	d1fb      	bne.n	1ad5c <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1ad64:	4770      	bx	lr

0001ad66 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1ad66:	6802      	ldr	r2, [r0, #0]
{
   1ad68:	b510      	push	{r4, lr}
	if (parent->frags) {
   1ad6a:	b12a      	cbz	r2, 1ad78 <net_buf_frag_insert+0x12>
   1ad6c:	460b      	mov	r3, r1
	while (buf->frags) {
   1ad6e:	461c      	mov	r4, r3
   1ad70:	681b      	ldr	r3, [r3, #0]
   1ad72:	2b00      	cmp	r3, #0
   1ad74:	d1fb      	bne.n	1ad6e <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1ad76:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1ad78:	6001      	str	r1, [r0, #0]
}
   1ad7a:	bd10      	pop	{r4, pc}

0001ad7c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1ad7c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1ad7e:	4604      	mov	r4, r0
   1ad80:	b920      	cbnz	r0, 1ad8c <net_buf_frag_add+0x10>
	buf->ref++;
   1ad82:	790b      	ldrb	r3, [r1, #4]
   1ad84:	3301      	adds	r3, #1
   1ad86:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1ad88:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1ad8a:	bd10      	pop	{r4, pc}
   1ad8c:	4603      	mov	r3, r0
	while (buf->frags) {
   1ad8e:	4618      	mov	r0, r3
   1ad90:	681b      	ldr	r3, [r3, #0]
   1ad92:	2b00      	cmp	r3, #0
   1ad94:	d1fb      	bne.n	1ad8e <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1ad96:	f7ff ffe6 	bl	1ad66 <net_buf_frag_insert>
   1ad9a:	4620      	mov	r0, r4
   1ad9c:	e7f5      	b.n	1ad8a <net_buf_frag_add+0xe>

0001ad9e <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1ad9e:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   1ada0:	b108      	cbz	r0, 1ada6 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   1ada2:	680b      	ldr	r3, [r1, #0]
   1ada4:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   1ada6:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1ada8:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1adaa:	4608      	mov	r0, r1
	frag->frags = NULL;
   1adac:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1adae:	f7f9 fad7 	bl	14360 <net_buf_unref>
#endif

	return next_frag;
}
   1adb2:	4620      	mov	r0, r4
   1adb4:	bd10      	pop	{r4, pc}

0001adb6 <net_buf_simple_add>:
	return buf->data + buf->len;
   1adb6:	8883      	ldrh	r3, [r0, #4]
   1adb8:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1adba:	4419      	add	r1, r3
   1adbc:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1adbe:	18d0      	adds	r0, r2, r3
   1adc0:	4770      	bx	lr

0001adc2 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1adc2:	b430      	push	{r4, r5}
   1adc4:	8884      	ldrh	r4, [r0, #4]
   1adc6:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1adc8:	18a3      	adds	r3, r4, r2
   1adca:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1adcc:	1928      	adds	r0, r5, r4
}
   1adce:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1add0:	f7fe b816 	b.w	18e00 <memcpy>

0001add4 <net_buf_simple_add_u8>:
   1add4:	8883      	ldrh	r3, [r0, #4]
   1add6:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1add8:	b510      	push	{r4, lr}
	buf->len += len;
   1adda:	1c5c      	adds	r4, r3, #1
   1addc:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1adde:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1ade0:	18d0      	adds	r0, r2, r3
   1ade2:	bd10      	pop	{r4, pc}

0001ade4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1ade4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1ade6:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1ade8:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1adea:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1adec:	4411      	add	r1, r2
	buf->data -= len;
   1adee:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1adf0:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1adf2:	4770      	bx	lr

0001adf4 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1adf4:	8882      	ldrh	r2, [r0, #4]
   1adf6:	1a52      	subs	r2, r2, r1
{
   1adf8:	4603      	mov	r3, r0
	buf->len -= len;
   1adfa:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1adfc:	6800      	ldr	r0, [r0, #0]
   1adfe:	4408      	add	r0, r1
   1ae00:	6018      	str	r0, [r3, #0]
}
   1ae02:	4770      	bx	lr

0001ae04 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1ae04:	4603      	mov	r3, r0
	void *data = buf->data;
   1ae06:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1ae08:	889a      	ldrh	r2, [r3, #4]
   1ae0a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1ae0c:	4401      	add	r1, r0
	buf->len -= len;
   1ae0e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1ae10:	6019      	str	r1, [r3, #0]

	return data;
}
   1ae12:	4770      	bx	lr

0001ae14 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1ae14:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1ae16:	6803      	ldr	r3, [r0, #0]
   1ae18:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1ae1a:	2102      	movs	r1, #2
   1ae1c:	f7ff ffea 	bl	1adf4 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1ae20:	4620      	mov	r0, r4
   1ae22:	bd10      	pop	{r4, pc}

0001ae24 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1ae24:	6802      	ldr	r2, [r0, #0]
   1ae26:	6880      	ldr	r0, [r0, #8]
}
   1ae28:	1a10      	subs	r0, r2, r0
   1ae2a:	4770      	bx	lr

0001ae2c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1ae2c:	8883      	ldrh	r3, [r0, #4]
   1ae2e:	88c2      	ldrh	r2, [r0, #6]
   1ae30:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1ae32:	6803      	ldr	r3, [r0, #0]
   1ae34:	6880      	ldr	r0, [r0, #8]
   1ae36:	1a18      	subs	r0, r3, r0
}
   1ae38:	1a10      	subs	r0, r2, r0
   1ae3a:	4770      	bx	lr

0001ae3c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1ae3c:	6903      	ldr	r3, [r0, #16]
   1ae3e:	b2c9      	uxtb	r1, r1
   1ae40:	220c      	movs	r2, #12
   1ae42:	fb01 3302 	mla	r3, r1, r2, r3
   1ae46:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1ae48:	f000 0007 	and.w	r0, r0, #7
   1ae4c:	4770      	bx	lr

0001ae4e <set_on_state>:
	__asm__ volatile(
   1ae4e:	f04f 0320 	mov.w	r3, #32
   1ae52:	f3ef 8211 	mrs	r2, BASEPRI
   1ae56:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae5a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1ae5e:	6803      	ldr	r3, [r0, #0]
   1ae60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ae64:	f043 0302 	orr.w	r3, r3, #2
   1ae68:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1ae6a:	f382 8811 	msr	BASEPRI, r2
   1ae6e:	f3bf 8f6f 	isb	sy
}
   1ae72:	4770      	bx	lr

0001ae74 <stop>:
{
   1ae74:	4603      	mov	r3, r0
   1ae76:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1ae78:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1ae7a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1ae7c:	f04f 0420 	mov.w	r4, #32
   1ae80:	f3ef 8611 	mrs	r6, BASEPRI
   1ae84:	f384 8812 	msr	BASEPRI_MAX, r4
   1ae88:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ae8c:	250c      	movs	r5, #12
   1ae8e:	fb05 0401 	mla	r4, r5, r1, r0
   1ae92:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1ae94:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1ae98:	d001      	beq.n	1ae9e <stop+0x2a>
   1ae9a:	42a2      	cmp	r2, r4
   1ae9c:	d110      	bne.n	1aec0 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1ae9e:	fb05 0001 	mla	r0, r5, r1, r0
   1aea2:	2201      	movs	r2, #1
   1aea4:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1aea6:	2000      	movs	r0, #0
	__asm__ volatile(
   1aea8:	f386 8811 	msr	BASEPRI, r6
   1aeac:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1aeb0:	b928      	cbnz	r0, 1aebe <stop+0x4a>
	get_sub_config(dev, type)->stop();
   1aeb2:	685b      	ldr	r3, [r3, #4]
   1aeb4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1aeb8:	684b      	ldr	r3, [r1, #4]
   1aeba:	4798      	blx	r3
	return 0;
   1aebc:	2000      	movs	r0, #0
}
   1aebe:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1aec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aec4:	e7f0      	b.n	1aea8 <stop+0x34>

0001aec6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1aec6:	2280      	movs	r2, #128	; 0x80
   1aec8:	f7ff bfd4 	b.w	1ae74 <stop>

0001aecc <async_start>:
{
   1aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aece:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1aed0:	6904      	ldr	r4, [r0, #16]
{
   1aed2:	4605      	mov	r5, r0
   1aed4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1aed6:	f04f 0020 	mov.w	r0, #32
   1aeda:	f3ef 8c11 	mrs	ip, BASEPRI
   1aede:	f380 8812 	msr	BASEPRI_MAX, r0
   1aee2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1aee6:	260c      	movs	r6, #12
   1aee8:	fb06 4601 	mla	r6, r6, r1, r4
   1aeec:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1aeee:	f000 0e07 	and.w	lr, r0, #7
   1aef2:	f1be 0f01 	cmp.w	lr, #1
   1aef6:	d111      	bne.n	1af1c <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1aef8:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1aefa:	2600      	movs	r6, #0
	__asm__ volatile(
   1aefc:	f38c 8811 	msr	BASEPRI, ip
   1af00:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1af04:	b946      	cbnz	r6, 1af18 <async_start+0x4c>
	subdata->cb = cb;
   1af06:	200c      	movs	r0, #12
   1af08:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   1af0c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1af10:	686b      	ldr	r3, [r5, #4]
   1af12:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1af16:	4798      	blx	r3
}
   1af18:	4630      	mov	r0, r6
   1af1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1af1c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1af20:	4287      	cmp	r7, r0
   1af22:	bf14      	ite	ne
   1af24:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   1af28:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   1af2c:	e7e6      	b.n	1aefc <async_start+0x30>

0001af2e <api_start>:
{
   1af2e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1af30:	2480      	movs	r4, #128	; 0x80
   1af32:	9400      	str	r4, [sp, #0]
   1af34:	f7ff ffca 	bl	1aecc <async_start>
}
   1af38:	b002      	add	sp, #8
   1af3a:	bd10      	pop	{r4, pc}

0001af3c <onoff_started_callback>:
	return &data->mgr[type];
   1af3c:	6900      	ldr	r0, [r0, #16]
{
   1af3e:	b410      	push	{r4}
	return &data->mgr[type];
   1af40:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1af42:	241c      	movs	r4, #28
   1af44:	fb03 0004 	mla	r0, r3, r4, r0
   1af48:	2100      	movs	r1, #0
}
   1af4a:	bc10      	pop	{r4}
	notify(mgr, 0);
   1af4c:	4710      	bx	r2

0001af4e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1af4e:	2000      	movs	r0, #0
   1af50:	f7fb b808 	b.w	15f64 <nrfx_clock_stop>

0001af54 <blocking_start_callback>:
{
   1af54:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1af56:	f7fc b98d 	b.w	17274 <z_impl_k_sem_give>

0001af5a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1af5a:	6843      	ldr	r3, [r0, #4]
   1af5c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1af5e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1af62:	600b      	str	r3, [r1, #0]
}
   1af64:	2000      	movs	r0, #0
   1af66:	4770      	bx	lr

0001af68 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1af68:	6843      	ldr	r3, [r0, #4]
   1af6a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1af6c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1af70:	4042      	eors	r2, r0
   1af72:	400a      	ands	r2, r1
   1af74:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1af76:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1af7a:	2000      	movs	r0, #0
   1af7c:	4770      	bx	lr

0001af7e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1af7e:	6843      	ldr	r3, [r0, #4]
   1af80:	685b      	ldr	r3, [r3, #4]
}
   1af82:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1af84:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1af88:	4770      	bx	lr

0001af8a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1af8a:	6843      	ldr	r3, [r0, #4]
   1af8c:	685b      	ldr	r3, [r3, #4]
}
   1af8e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1af90:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1af94:	4770      	bx	lr

0001af96 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1af96:	6843      	ldr	r3, [r0, #4]
   1af98:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1af9a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1af9e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1afa0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1afa4:	2000      	movs	r0, #0
   1afa6:	4770      	bx	lr

0001afa8 <gpio_nrfx_manage_callback>:
	return port->data;
   1afa8:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1afaa:	6858      	ldr	r0, [r3, #4]
{
   1afac:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1afae:	b158      	cbz	r0, 1afc8 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1afb0:	2400      	movs	r4, #0
   1afb2:	4281      	cmp	r1, r0
   1afb4:	d112      	bne.n	1afdc <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1afb6:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1afb8:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1afba:	b954      	cbnz	r4, 1afd2 <gpio_nrfx_manage_callback+0x2a>
   1afbc:	428d      	cmp	r5, r1
	list->head = node;
   1afbe:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1afc0:	d100      	bne.n	1afc4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1afc2:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1afc4:	2000      	movs	r0, #0
   1afc6:	6008      	str	r0, [r1, #0]
	if (set) {
   1afc8:	b96a      	cbnz	r2, 1afe6 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   1afca:	2000      	movs	r0, #0
}
   1afcc:	bd30      	pop	{r4, r5, pc}
   1afce:	4628      	mov	r0, r5
   1afd0:	e7ef      	b.n	1afb2 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   1afd2:	428d      	cmp	r5, r1
	parent->next = child;
   1afd4:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1afd6:	bf08      	it	eq
   1afd8:	609c      	streq	r4, [r3, #8]
}
   1afda:	e7f3      	b.n	1afc4 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1afdc:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1afde:	4604      	mov	r4, r0
   1afe0:	2d00      	cmp	r5, #0
   1afe2:	d1f4      	bne.n	1afce <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1afe4:	b13a      	cbz	r2, 1aff6 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1afe6:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1afe8:	685a      	ldr	r2, [r3, #4]
   1afea:	600a      	str	r2, [r1, #0]
	list->head = node;
   1afec:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1afee:	2800      	cmp	r0, #0
   1aff0:	d1eb      	bne.n	1afca <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1aff2:	6099      	str	r1, [r3, #8]
}
   1aff4:	e7ea      	b.n	1afcc <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1aff6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1affa:	e7e7      	b.n	1afcc <gpio_nrfx_manage_callback+0x24>

0001affc <pin_interrupt_configure>:
{
	int rc = 0;

	if (!IS_ENABLED(CONFIG_GPIO_SX1509B_INTERRUPT)
	    && (mode != GPIO_INT_MODE_DISABLED)) {
		return -ENOTSUP;
   1affc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000

	k_sem_give(&drv_data->lock);
#endif /* CONFIG_GPIO_SX1509B_INTERRUPT */

	return rc;
}
   1b000:	bf14      	ite	ne
   1b002:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   1b006:	2000      	moveq	r0, #0
   1b008:	4770      	bx	lr

0001b00a <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   1b00a:	f7fc b959 	b.w	172c0 <z_impl_k_sem_take>

0001b00e <i2c_write>:
{
   1b00e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1b010:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1b014:	2202      	movs	r2, #2
   1b016:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b01a:	6882      	ldr	r2, [r0, #8]
   1b01c:	a901      	add	r1, sp, #4
   1b01e:	6894      	ldr	r4, [r2, #8]
   1b020:	2201      	movs	r2, #1
   1b022:	47a0      	blx	r4
}
   1b024:	b004      	add	sp, #16
   1b026:	bd10      	pop	{r4, pc}

0001b028 <i2c_reg_write_word_be>:
{
   1b028:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   1b02a:	f88d 2004 	strb.w	r2, [sp, #4]
   1b02e:	0a1a      	lsrs	r2, r3, #8
   1b030:	f88d 2005 	strb.w	r2, [sp, #5]
   1b034:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
   1b038:	2203      	movs	r2, #3
   1b03a:	460b      	mov	r3, r1
   1b03c:	a901      	add	r1, sp, #4
   1b03e:	f7ff ffe6 	bl	1b00e <i2c_write>
}
   1b042:	b003      	add	sp, #12
   1b044:	f85d fb04 	ldr.w	pc, [sp], #4

0001b048 <port_write>:
{
   1b048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b04c:	4605      	mov	r5, r0
   1b04e:	4689      	mov	r9, r1
   1b050:	4614      	mov	r4, r2
   1b052:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
   1b054:	f000 fe28 	bl	1bca8 <k_is_in_isr>
   1b058:	bb08      	cbnz	r0, 1b09e <port_write+0x56>
	const struct sx1509b_config *cfg = dev->config;
   1b05a:	686f      	ldr	r7, [r5, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1b05c:	692d      	ldr	r5, [r5, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
   1b05e:	f105 0620 	add.w	r6, r5, #32
   1b062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b06a:	4630      	mov	r0, r6
   1b06c:	f7ff ffcd 	bl	1b00a <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
   1b070:	8b28      	ldrh	r0, [r5, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   1b072:	8939      	ldrh	r1, [r7, #8]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
   1b074:	4044      	eors	r4, r0
   1b076:	ea04 0409 	and.w	r4, r4, r9
   1b07a:	ea84 0408 	eor.w	r4, r4, r8
   1b07e:	4044      	eors	r4, r0
   1b080:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   1b082:	6868      	ldr	r0, [r5, #4]
   1b084:	4623      	mov	r3, r4
   1b086:	2210      	movs	r2, #16
   1b088:	f7ff ffce 	bl	1b028 <i2c_reg_write_word_be>
	if (rc == 0) {
   1b08c:	4607      	mov	r7, r0
   1b08e:	b900      	cbnz	r0, 1b092 <port_write+0x4a>
		*outp = out;
   1b090:	832c      	strh	r4, [r5, #24]
	z_impl_k_sem_give(sem);
   1b092:	4630      	mov	r0, r6
   1b094:	f7fc f8ee 	bl	17274 <z_impl_k_sem_give>
}
   1b098:	4638      	mov	r0, r7
   1b09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
   1b09e:	f06f 070a 	mvn.w	r7, #10
   1b0a2:	e7f9      	b.n	1b098 <port_write+0x50>

0001b0a4 <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
   1b0a4:	2200      	movs	r2, #0
{
   1b0a6:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
   1b0a8:	4611      	mov	r1, r2
   1b0aa:	f7ff bfcd 	b.w	1b048 <port_write>

0001b0ae <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
   1b0ae:	2300      	movs	r3, #0
   1b0b0:	461a      	mov	r2, r3
   1b0b2:	f7ff bfc9 	b.w	1b048 <port_write>

0001b0b6 <port_set_bits>:
{
   1b0b6:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
   1b0b8:	2300      	movs	r3, #0
   1b0ba:	f7ff bfc5 	b.w	1b048 <port_write>

0001b0be <port_set_masked>:
	return port_write(dev, mask, value, 0);
   1b0be:	2300      	movs	r3, #0
   1b0c0:	f7ff bfc2 	b.w	1b048 <port_write>

0001b0c4 <write_pin_state>:
{
   1b0c4:	b530      	push	{r4, r5, lr}
   1b0c6:	b087      	sub	sp, #28
   1b0c8:	460c      	mov	r4, r1
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
   1b0ca:	2100      	movs	r1, #0
   1b0cc:	f88d 1004 	strb.w	r1, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   1b0d0:	8811      	ldrh	r1, [r2, #0]
   1b0d2:	ba49      	rev16	r1, r1
   1b0d4:	f8ad 1005 	strh.w	r1, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
   1b0d8:	8851      	ldrh	r1, [r2, #2]
   1b0da:	ba49      	rev16	r1, r1
   1b0dc:	f8ad 1007 	strh.w	r1, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
   1b0e0:	8891      	ldrh	r1, [r2, #4]
   1b0e2:	ba49      	rev16	r1, r1
   1b0e4:	f8ad 1009 	strh.w	r1, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
   1b0e8:	88d1      	ldrh	r1, [r2, #6]
   1b0ea:	ba49      	rev16	r1, r1
   1b0ec:	f8ad 100b 	strh.w	r1, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
   1b0f0:	8911      	ldrh	r1, [r2, #8]
   1b0f2:	ba49      	rev16	r1, r1
   1b0f4:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
   1b0f8:	8951      	ldrh	r1, [r2, #10]
   1b0fa:	ba49      	rev16	r1, r1
   1b0fc:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
   1b100:	8991      	ldrh	r1, [r2, #12]
   1b102:	ba49      	rev16	r1, r1
   1b104:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   1b108:	89d1      	ldrh	r1, [r2, #14]
   1b10a:	8a12      	ldrh	r2, [r2, #16]
{
   1b10c:	4605      	mov	r5, r0
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   1b10e:	ba49      	rev16	r1, r1
   1b110:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   1b114:	ba51      	rev16	r1, r2
   1b116:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1b11a:	6860      	ldr	r0, [r4, #4]
   1b11c:	8929      	ldrh	r1, [r5, #8]
	if (data_first) {
   1b11e:	b163      	cbz	r3, 1b13a <write_pin_state+0x76>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1b120:	4613      	mov	r3, r2
   1b122:	2210      	movs	r2, #16
   1b124:	f7ff ff80 	bl	1b028 <i2c_reg_write_word_be>
		if (rc == 0) {
   1b128:	b928      	cbnz	r0, 1b136 <write_pin_state+0x72>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   1b12a:	892b      	ldrh	r3, [r5, #8]
   1b12c:	6860      	ldr	r0, [r4, #4]
   1b12e:	2211      	movs	r2, #17
   1b130:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   1b132:	f7ff ff6c 	bl	1b00e <i2c_write>
}
   1b136:	b007      	add	sp, #28
   1b138:	bd30      	pop	{r4, r5, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   1b13a:	460b      	mov	r3, r1
   1b13c:	2213      	movs	r2, #19
   1b13e:	a901      	add	r1, sp, #4
   1b140:	e7f7      	b.n	1b132 <write_pin_state+0x6e>

0001b142 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
   1b142:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct sx1509b_config *cfg = dev->config;
   1b146:	6846      	ldr	r6, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1b148:	6905      	ldr	r5, [r0, #16]
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
   1b14a:	6870      	ldr	r0, [r6, #4]
   1b14c:	f7fb fe38 	bl	16dc0 <z_impl_device_get_binding>
   1b150:	6068      	str	r0, [r5, #4]
	if (!drv_data->i2c_master) {
   1b152:	2800      	cmp	r0, #0
   1b154:	d061      	beq.n	1b21a <sx1509b_init+0xd8>
	drv_data->irq_state = (struct sx1509b_irq_state) {
		.interrupt_mask = ALL_PINS,
	};
#endif

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1b156:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   1b158:	f04f 087d 	mov.w	r8, #125	; 0x7d
   1b15c:	2712      	movs	r7, #18
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1b15e:	2202      	movs	r2, #2
   1b160:	a901      	add	r1, sp, #4
	uint8_t tx_buf[2] = {reg_addr, value};
   1b162:	f88d 8004 	strb.w	r8, [sp, #4]
   1b166:	f88d 7005 	strb.w	r7, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1b16a:	f7ff ff50 	bl	1b00e <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC0);
	if (rc != 0) {
   1b16e:	4604      	mov	r4, r0
   1b170:	2800      	cmp	r0, #0
   1b172:	d14a      	bne.n	1b20a <sx1509b_init+0xc8>
	uint8_t tx_buf[2] = {reg_addr, value};
   1b174:	2234      	movs	r2, #52	; 0x34
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
		goto out;
	}
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1b176:	6868      	ldr	r0, [r5, #4]
   1b178:	8933      	ldrh	r3, [r6, #8]
   1b17a:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1b17e:	a901      	add	r1, sp, #4
   1b180:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   1b182:	f88d 8004 	strb.w	r8, [sp, #4]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1b186:	f7ff ff42 	bl	1b00e <i2c_write>
				SX1509B_REG_RESET, SX1509B_REG_RESET_MAGIC1);
	if (rc != 0) {
   1b18a:	4604      	mov	r4, r0
   1b18c:	2800      	cmp	r0, #0
   1b18e:	d13c      	bne.n	1b20a <sx1509b_init+0xc8>
	return z_impl_k_sleep(timeout);
   1b190:	2100      	movs	r1, #0
   1b192:	2063      	movs	r0, #99	; 0x63
   1b194:	f7fc fd0a 	bl	17bac <z_impl_k_sleep>
	}

	k_sleep(K_MSEC(RESET_DELAY_MS));

	/* Reset state mediated by initial configuration */
	drv_data->pin_state = (struct sx1509b_pin_state) {
   1b198:	463a      	mov	r2, r7
   1b19a:	4621      	mov	r1, r4
   1b19c:	f105 0008 	add.w	r0, r5, #8
   1b1a0:	f7fd fe39 	bl	18e16 <memset>
   1b1a4:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
   1b1a8:	221e      	movs	r2, #30
   1b1aa:	832b      	strh	r3, [r5, #24]
			& ~(DT_INST_PROP(0, init_out_low)
			    | DT_INST_PROP(0, init_out_high))),
		.data = (ALL_PINS
			 & ~DT_INST_PROP(0, init_out_low)),
	};
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1b1ac:	83ac      	strh	r4, [r5, #28]
   1b1ae:	77ac      	strb	r4, [r5, #30]
		.debounce_config = CONFIG_GPIO_SX1509B_DEBOUNCE_TIME,
	};

	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   1b1b0:	6868      	ldr	r0, [r5, #4]
   1b1b2:	8933      	ldrh	r3, [r6, #8]
   1b1b4:	f88d 2004 	strb.w	r2, [sp, #4]
   1b1b8:	2240      	movs	r2, #64	; 0x40
   1b1ba:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1b1be:	a901      	add	r1, sp, #4
   1b1c0:	2202      	movs	r2, #2
   1b1c2:	f7ff ff24 	bl	1b00e <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   1b1c6:	4627      	mov	r7, r4
				SX1509B_REG_CLOCK,
				SX1509B_REG_CLOCK_FOSC_INT_2MHZ);
	if (rc == 0) {
   1b1c8:	4604      	mov	r4, r0
   1b1ca:	b9f0      	cbnz	r0, 1b20a <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1b1cc:	8b2b      	ldrh	r3, [r5, #24]
   1b1ce:	8931      	ldrh	r1, [r6, #8]
   1b1d0:	6868      	ldr	r0, [r5, #4]
   1b1d2:	2210      	movs	r2, #16
   1b1d4:	f7ff ff28 	bl	1b028 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DATA,
					   drv_data->pin_state.data);
	}
	if (rc == 0) {
   1b1d8:	4604      	mov	r4, r0
   1b1da:	b9b0      	cbnz	r0, 1b20a <sx1509b_init+0xc8>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1b1dc:	8aeb      	ldrh	r3, [r5, #22]
   1b1de:	8931      	ldrh	r1, [r6, #8]
   1b1e0:	6868      	ldr	r0, [r5, #4]
   1b1e2:	220e      	movs	r2, #14
   1b1e4:	f7ff ff20 	bl	1b028 <i2c_reg_write_word_be>
					   cfg->i2c_slave_addr,
					   SX1509B_REG_DIR,
					   drv_data->pin_state.dir);
	}
	if (rc == 0) {
   1b1e8:	4604      	mov	r4, r0
   1b1ea:	b970      	cbnz	r0, 1b20a <sx1509b_init+0xc8>
	uint8_t tx_buf[3] = { reg_addr, value };
   1b1ec:	221f      	movs	r2, #31
		rc = i2c_reg_write_byte_be(
   1b1ee:	6868      	ldr	r0, [r5, #4]
   1b1f0:	8933      	ldrh	r3, [r6, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
   1b1f2:	f88d 2004 	strb.w	r2, [sp, #4]
   1b1f6:	2298      	movs	r2, #152	; 0x98
   1b1f8:	f88d 2005 	strb.w	r2, [sp, #5]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1b1fc:	a901      	add	r1, sp, #4
   1b1fe:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
   1b200:	f88d 7006 	strb.w	r7, [sp, #6]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   1b204:	f7ff ff03 	bl	1b00e <i2c_write>
   1b208:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1b20a:	f105 0020 	add.w	r0, r5, #32
   1b20e:	f7fc f831 	bl	17274 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
   1b212:	4620      	mov	r0, r4
   1b214:	b002      	add	sp, #8
   1b216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = -EINVAL;
   1b21a:	f06f 0415 	mvn.w	r4, #21
   1b21e:	e7f4      	b.n	1b20a <sx1509b_init+0xc8>

0001b220 <sx1509b_config>:
{
   1b220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
   1b224:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1b228:	6904      	ldr	r4, [r0, #16]
{
   1b22a:	460d      	mov	r5, r1
   1b22c:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
   1b22e:	f000 fd3b 	bl	1bca8 <k_is_in_isr>
   1b232:	4683      	mov	fp, r0
   1b234:	2800      	cmp	r0, #0
   1b236:	f040 808c 	bne.w	1b352 <sx1509b_config+0x132>
	if ((flags & GPIO_DS_ALT) != 0) {
   1b23a:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
   1b23e:	f040 808b 	bne.w	1b358 <sx1509b_config+0x138>
	k_sem_take(&drv_data->lock, K_FOREVER);
   1b242:	f104 0920 	add.w	r9, r4, #32
   1b246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b24a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b24e:	4648      	mov	r0, r9
   1b250:	f7ff fedb 	bl	1b00a <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
   1b254:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
   1b256:	8b63      	ldrh	r3, [r4, #26]
		drv_data->led_drv_enable &= ~BIT(pin);
   1b258:	40ae      	lsls	r6, r5
   1b25a:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   1b25c:	fa23 f505 	lsr.w	r5, r3, r5
		drv_data->led_drv_enable &= ~BIT(pin);
   1b260:	ea6f 0806 	mvn.w	r8, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   1b264:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
   1b266:	fa1f f888 	uxth.w	r8, r8
	if (drv_data->led_drv_enable & BIT(pin)) {
   1b26a:	d44f      	bmi.n	1b30c <sx1509b_config+0xec>
	pins->open_drain &= ~BIT(pin);
   1b26c:	8a63      	ldrh	r3, [r4, #18]
   1b26e:	ea03 0208 	and.w	r2, r3, r8
   1b272:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
   1b274:	07ba      	lsls	r2, r7, #30
   1b276:	d45c      	bmi.n	1b332 <sx1509b_config+0x112>
		pins->pull_up |= BIT(pin);
   1b278:	89e3      	ldrh	r3, [r4, #14]
	if ((flags & GPIO_PULL_UP) != 0) {
   1b27a:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
   1b27c:	bf4c      	ite	mi
   1b27e:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
   1b280:	ea08 0303 	andpl.w	r3, r8, r3
   1b284:	81e3      	strh	r3, [r4, #14]
		pins->pull_down |= BIT(pin);
   1b286:	8a23      	ldrh	r3, [r4, #16]
	if ((flags & GPIO_PULL_DOWN) != 0) {
   1b288:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
   1b28a:	bf4c      	ite	mi
   1b28c:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
   1b28e:	ea08 0303 	andpl.w	r3, r8, r3
   1b292:	8223      	strh	r3, [r4, #16]
		pins->input_disable &= ~BIT(pin);
   1b294:	8923      	ldrh	r3, [r4, #8]
	if ((flags & GPIO_INPUT) != 0) {
   1b296:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
   1b298:	bf4c      	ite	mi
   1b29a:	ea08 0303 	andmi.w	r3, r8, r3
		pins->input_disable |= BIT(pin);
   1b29e:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
   1b2a0:	05bd      	lsls	r5, r7, #22
   1b2a2:	8123      	strh	r3, [r4, #8]
		pins->dir &= ~BIT(pin);
   1b2a4:	8ae3      	ldrh	r3, [r4, #22]
	if ((flags & GPIO_OUTPUT) != 0) {
   1b2a6:	d54e      	bpl.n	1b346 <sx1509b_config+0x126>
		pins->dir &= ~BIT(pin);
   1b2a8:	ea08 0303 	and.w	r3, r8, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1b2ac:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
   1b2ae:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1b2b0:	d544      	bpl.n	1b33c <sx1509b_config+0x11c>
			pins->data &= ~BIT(pin);
   1b2b2:	8b23      	ldrh	r3, [r4, #24]
   1b2b4:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
   1b2b8:	8323      	strh	r3, [r4, #24]
			data_first = true;
   1b2ba:	f04f 0b01 	mov.w	fp, #1
		debounce->debounce_enable |= BIT(pin);
   1b2be:	f8b4 301d 	ldrh.w	r3, [r4, #29]
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
   1b2c2:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
   1b2c4:	bf4c      	ite	mi
   1b2c6:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
   1b2c8:	ea08 0603 	andpl.w	r6, r8, r3
   1b2cc:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
   1b2d0:	465b      	mov	r3, fp
   1b2d2:	f104 0208 	add.w	r2, r4, #8
   1b2d6:	4621      	mov	r1, r4
   1b2d8:	4650      	mov	r0, sl
   1b2da:	f7ff fef3 	bl	1b0c4 <write_pin_state>
	if (rc == 0) {
   1b2de:	4605      	mov	r5, r0
   1b2e0:	bb00      	cbnz	r0, 1b324 <sx1509b_config+0x104>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
   1b2e2:	2322      	movs	r3, #34	; 0x22
   1b2e4:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
   1b2e8:	7f23      	ldrb	r3, [r4, #28]
   1b2ea:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
   1b2ee:	f8b4 301d 	ldrh.w	r3, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
   1b2f2:	6860      	ldr	r0, [r4, #4]
			= sys_cpu_to_be16(debounce->debounce_enable);
   1b2f4:	ba5b      	rev16	r3, r3
		rc = i2c_write(drv_data->i2c_master,
   1b2f6:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
   1b2f8:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
   1b2fc:	eb0d 0102 	add.w	r1, sp, r2
   1b300:	f8ba 3008 	ldrh.w	r3, [sl, #8]
   1b304:	f7ff fe83 	bl	1b00e <i2c_write>
   1b308:	4605      	mov	r5, r0
   1b30a:	e00b      	b.n	1b324 <sx1509b_config+0x104>
		drv_data->led_drv_enable &= ~BIT(pin);
   1b30c:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1b310:	f8ba 1008 	ldrh.w	r1, [sl, #8]
   1b314:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
   1b316:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   1b318:	2220      	movs	r2, #32
   1b31a:	f7ff fe85 	bl	1b028 <i2c_reg_write_word_be>
		if (rc) {
   1b31e:	4605      	mov	r5, r0
   1b320:	2800      	cmp	r0, #0
   1b322:	d0a3      	beq.n	1b26c <sx1509b_config+0x4c>
   1b324:	4648      	mov	r0, r9
   1b326:	f7fb ffa5 	bl	17274 <z_impl_k_sem_give>
}
   1b32a:	4628      	mov	r0, r5
   1b32c:	b003      	add	sp, #12
   1b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
   1b332:	077d      	lsls	r5, r7, #29
   1b334:	d50a      	bpl.n	1b34c <sx1509b_config+0x12c>
			pins->open_drain |= BIT(pin);
   1b336:	4333      	orrs	r3, r6
   1b338:	8263      	strh	r3, [r4, #18]
   1b33a:	e79d      	b.n	1b278 <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1b33c:	0539      	lsls	r1, r7, #20
   1b33e:	d5be      	bpl.n	1b2be <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
   1b340:	8b23      	ldrh	r3, [r4, #24]
   1b342:	4333      	orrs	r3, r6
   1b344:	e7b8      	b.n	1b2b8 <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
   1b346:	4333      	orrs	r3, r6
   1b348:	82e3      	strh	r3, [r4, #22]
   1b34a:	e7b8      	b.n	1b2be <sx1509b_config+0x9e>
			rc = -ENOTSUP;
   1b34c:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1b350:	e7e8      	b.n	1b324 <sx1509b_config+0x104>
		return -EWOULDBLOCK;
   1b352:	f06f 050a 	mvn.w	r5, #10
   1b356:	e7e8      	b.n	1b32a <sx1509b_config+0x10a>
		return -ENOTSUP;
   1b358:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1b35c:	e7e5      	b.n	1b32a <sx1509b_config+0x10a>

0001b35e <port_get>:
{
   1b35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b362:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
   1b364:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   1b368:	6907      	ldr	r7, [r0, #16]
{
   1b36a:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
   1b36c:	f000 fc9c 	bl	1bca8 <k_is_in_isr>
   1b370:	4604      	mov	r4, r0
   1b372:	bb78      	cbnz	r0, 1b3d4 <port_get+0x76>
	k_sem_take(&drv_data->lock, K_FOREVER);
   1b374:	f107 0620 	add.w	r6, r7, #32
   1b378:	4630      	mov	r0, r6
   1b37a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b37e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b382:	f7ff fe42 	bl	1b00a <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
   1b386:	f10d 0205 	add.w	r2, sp, #5
   1b38a:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   1b38c:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   1b38e:	6878      	ldr	r0, [r7, #4]
   1b390:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
   1b392:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
   1b394:	f10d 0206 	add.w	r2, sp, #6
   1b398:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b39c:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   1b39e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
   1b3a2:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   1b3a4:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   1b3a6:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
   1b3aa:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b3ac:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b3b0:	6881      	ldr	r1, [r0, #8]
   1b3b2:	688c      	ldr	r4, [r1, #8]
   1b3b4:	a902      	add	r1, sp, #8
   1b3b6:	47a0      	blx	r4
	if (rc != 0) {
   1b3b8:	4604      	mov	r4, r0
   1b3ba:	b920      	cbnz	r0, 1b3c6 <port_get+0x68>
	*value = sys_be16_to_cpu(pin_data);
   1b3bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b3c0:	ba5b      	rev16	r3, r3
   1b3c2:	b29b      	uxth	r3, r3
   1b3c4:	602b      	str	r3, [r5, #0]
   1b3c6:	4630      	mov	r0, r6
   1b3c8:	f7fb ff54 	bl	17274 <z_impl_k_sem_give>
}
   1b3cc:	4620      	mov	r0, r4
   1b3ce:	b008      	add	sp, #32
   1b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
   1b3d4:	f06f 040a 	mvn.w	r4, #10
   1b3d8:	e7f8      	b.n	1b3cc <port_get+0x6e>

0001b3da <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1b3da:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twim_config *config = dev->config;
   1b3dc:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twim_data *data = dev->data;
   1b3de:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
   1b3e0:	d405      	bmi.n	1b3ee <i2c_nrfx_twim_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
   1b3e2:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1b3e6:	2a01      	cmp	r2, #1
   1b3e8:	d004      	beq.n	1b3f4 <i2c_nrfx_twim_configure+0x1a>
   1b3ea:	2a02      	cmp	r2, #2
   1b3ec:	d00a      	beq.n	1b404 <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
   1b3ee:	f06f 0015 	mvn.w	r0, #21
}
   1b3f2:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1b3f4:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   1b3f6:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1b3fa:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
   1b3fe:	6341      	str	r1, [r0, #52]	; 0x34
	return 0;
   1b400:	2000      	movs	r0, #0
   1b402:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   1b404:	681b      	ldr	r3, [r3, #0]
   1b406:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   1b40a:	e7f6      	b.n	1b3fa <i2c_nrfx_twim_configure+0x20>

0001b40c <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
   1b40c:	b510      	push	{r4, lr}
   1b40e:	b086      	sub	sp, #24
	msg[1].len = num_read;
   1b410:	e9cd 2303 	strd	r2, r3, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
   1b414:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
   1b416:	2101      	movs	r1, #1
   1b418:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b41a:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   1b41c:	2100      	movs	r1, #0
   1b41e:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b422:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b426:	6883      	ldr	r3, [r0, #8]
   1b428:	2202      	movs	r2, #2
   1b42a:	689c      	ldr	r4, [r3, #8]
   1b42c:	4669      	mov	r1, sp
   1b42e:	235a      	movs	r3, #90	; 0x5a
   1b430:	47a0      	blx	r4
}
   1b432:	b006      	add	sp, #24
   1b434:	bd10      	pop	{r4, pc}

0001b436 <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1b436:	2301      	movs	r3, #1
   1b438:	fa03 f101 	lsl.w	r1, r3, r1
   1b43c:	6903      	ldr	r3, [r0, #16]
   1b43e:	681b      	ldr	r3, [r3, #0]
   1b440:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1b442:	bf18      	it	ne
   1b444:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1b448:	b112      	cbz	r2, 1b450 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   1b44a:	6883      	ldr	r3, [r0, #8]
   1b44c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1b44e:	4718      	bx	r3
   1b450:	6883      	ldr	r3, [r0, #8]
   1b452:	691b      	ldr	r3, [r3, #16]
   1b454:	e7fb      	b.n	1b44e <gpio_pin_set.isra.0+0x18>

0001b456 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   1b456:	4601      	mov	r1, r0
   1b458:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b45c:	b508      	push	{r3, lr}
   1b45e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b462:	2300      	movs	r3, #0
   1b464:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   1b468:	1449      	asrs	r1, r1, #17
   1b46a:	f7e5 fa07 	bl	87c <__aeabi_uldivmod>
}
   1b46e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   1b472:	f7fc bb9b 	b.w	17bac <z_impl_k_sleep>

0001b476 <i2c_write.constprop.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
   1b476:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   1b478:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1b47c:	2202      	movs	r2, #2
   1b47e:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b482:	6883      	ldr	r3, [r0, #8]
   1b484:	2201      	movs	r2, #1
   1b486:	689c      	ldr	r4, [r3, #8]
   1b488:	a901      	add	r1, sp, #4
   1b48a:	235a      	movs	r3, #90	; 0x5a
   1b48c:	47a0      	blx	r4
}
   1b48e:	b004      	add	sp, #16
   1b490:	bd10      	pop	{r4, pc}

0001b492 <fetch_status>:
{
   1b492:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b494:	2300      	movs	r3, #0
   1b496:	f88d 3007 	strb.w	r3, [sp, #7]
	return i2c_write_read(dev, dev_addr,
   1b49a:	f10d 0205 	add.w	r2, sp, #5
   1b49e:	2301      	movs	r3, #1
   1b4a0:	f10d 0107 	add.w	r1, sp, #7
   1b4a4:	4605      	mov	r5, r0
   1b4a6:	f7ff ffb1 	bl	1b40c <i2c_write_read.constprop.0>
	if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
   1b4aa:	2800      	cmp	r0, #0
   1b4ac:	db10      	blt.n	1b4d0 <fetch_status+0x3e>
	rv = status;
   1b4ae:	f89d 4005 	ldrb.w	r4, [sp, #5]
	if (status & CCS811_STATUS_ERROR) {
   1b4b2:	07e3      	lsls	r3, r4, #31
   1b4b4:	d513      	bpl.n	1b4de <fetch_status+0x4c>
		if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
   1b4b6:	23e0      	movs	r3, #224	; 0xe0
   1b4b8:	f88d 3007 	strb.w	r3, [sp, #7]
   1b4bc:	f10d 0206 	add.w	r2, sp, #6
   1b4c0:	2301      	movs	r3, #1
   1b4c2:	f10d 0107 	add.w	r1, sp, #7
   1b4c6:	4628      	mov	r0, r5
   1b4c8:	f7ff ffa0 	bl	1b40c <i2c_write_read.constprop.0>
   1b4cc:	2800      	cmp	r0, #0
   1b4ce:	da02      	bge.n	1b4d6 <fetch_status+0x44>
		return -EIO;
   1b4d0:	f06f 0404 	mvn.w	r4, #4
   1b4d4:	e003      	b.n	1b4de <fetch_status+0x4c>
		rv |= (error_id << 8);
   1b4d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b4da:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
}
   1b4de:	4620      	mov	r0, r4
   1b4e0:	b003      	add	sp, #12
   1b4e2:	bd30      	pop	{r4, r5, pc}

0001b4e4 <set_wake.isra.0>:
static void set_wake(struct ccs811_data *drv_data, bool enable)
   1b4e4:	b510      	push	{r4, lr}
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
   1b4e6:	460a      	mov	r2, r1
static void set_wake(struct ccs811_data *drv_data, bool enable)
   1b4e8:	460c      	mov	r4, r1
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
   1b4ea:	210c      	movs	r1, #12
   1b4ec:	f7ff ffa3 	bl	1b436 <gpio_pin_set.isra.0>
	if (enable) {
   1b4f0:	b124      	cbz	r4, 1b4fc <set_wake.isra.0+0x18>
	z_impl_k_busy_wait(usec_to_wait);
   1b4f2:	2032      	movs	r0, #50	; 0x32
}
   1b4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b4f8:	f000 bed9 	b.w	1c2ae <z_impl_k_busy_wait>
   1b4fc:	2014      	movs	r0, #20
   1b4fe:	e7f9      	b.n	1b4f4 <set_wake.isra.0+0x10>

0001b500 <ccs811_sample_fetch>:
{
   1b500:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
   1b502:	6905      	ldr	r5, [r0, #16]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   1b504:	2302      	movs	r3, #2
	uint16_t buf[4] = { 0 };
   1b506:	2400      	movs	r4, #0
	set_wake(drv_data, true);
   1b508:	68e8      	ldr	r0, [r5, #12]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   1b50a:	f88d 3007 	strb.w	r3, [sp, #7]
	set_wake(drv_data, true);
   1b50e:	2101      	movs	r1, #1
	uint16_t buf[4] = { 0 };
   1b510:	e9cd 4402 	strd	r4, r4, [sp, #8]
	set_wake(drv_data, true);
   1b514:	f7ff ffe6 	bl	1b4e4 <set_wake.isra.0>
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1b518:	2308      	movs	r3, #8
   1b51a:	eb0d 0203 	add.w	r2, sp, r3
   1b51e:	f10d 0107 	add.w	r1, sp, #7
   1b522:	6828      	ldr	r0, [r5, #0]
   1b524:	f7ff ff72 	bl	1b40c <i2c_write_read.constprop.0>
	set_wake(drv_data, false);
   1b528:	4621      	mov	r1, r4
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1b52a:	4606      	mov	r6, r0
	set_wake(drv_data, false);
   1b52c:	68e8      	ldr	r0, [r5, #12]
   1b52e:	f7ff ffd9 	bl	1b4e4 <set_wake.isra.0>
	if (rc < 0) {
   1b532:	42a6      	cmp	r6, r4
   1b534:	db1b      	blt.n	1b56e <ccs811_sample_fetch+0x6e>
	rp->co2 = sys_be16_to_cpu(buf[0]);
   1b536:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	status = sys_le16_to_cpu(buf[2]); /* sic */
   1b53a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	rp->status = status;
   1b53e:	82ea      	strh	r2, [r5, #22]
   1b540:	ba5b      	rev16	r3, r3
   1b542:	b299      	uxth	r1, r3
	rp->co2 = sys_be16_to_cpu(buf[0]);
   1b544:	822b      	strh	r3, [r5, #16]
	rp->voc = sys_be16_to_cpu(buf[1]);
   1b546:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1b54a:	ba5b      	rev16	r3, r3
   1b54c:	826b      	strh	r3, [r5, #18]
	rp->raw = sys_be16_to_cpu(buf[3]);
   1b54e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1b552:	ba5b      	rev16	r3, r3
   1b554:	82ab      	strh	r3, [r5, #20]
	if ((drv_data->app_fw_ver <= 0x11)
   1b556:	7e6b      	ldrb	r3, [r5, #25]
   1b558:	2b11      	cmp	r3, #17
   1b55a:	d800      	bhi.n	1b55e <ccs811_sample_fetch+0x5e>
	    && (rp->co2 != 0)) {
   1b55c:	b951      	cbnz	r1, 1b574 <ccs811_sample_fetch+0x74>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   1b55e:	f012 0f08 	tst.w	r2, #8
   1b562:	bf14      	ite	ne
   1b564:	2000      	movne	r0, #0
   1b566:	f06f 000a 	mvneq.w	r0, #10
}
   1b56a:	b004      	add	sp, #16
   1b56c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1b56e:	f06f 0004 	mvn.w	r0, #4
   1b572:	e7fa      	b.n	1b56a <ccs811_sample_fetch+0x6a>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   1b574:	4620      	mov	r0, r4
   1b576:	e7f8      	b.n	1b56a <ccs811_sample_fetch+0x6a>

0001b578 <ccs811_result>:
	return &drv_data->result;
   1b578:	6900      	ldr	r0, [r0, #16]
}
   1b57a:	3010      	adds	r0, #16
   1b57c:	4770      	bx	lr

0001b57e <ccs811_configver_fetch>:
{
   1b57e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
   1b580:	6906      	ldr	r6, [r0, #16]
	if (!ptr) {
   1b582:	460d      	mov	r5, r1
   1b584:	2900      	cmp	r1, #0
   1b586:	d037      	beq.n	1b5f8 <ccs811_configver_fetch+0x7a>
	set_wake(drv_data, true);
   1b588:	68f0      	ldr	r0, [r6, #12]
   1b58a:	2101      	movs	r1, #1
   1b58c:	f7ff ffaa 	bl	1b4e4 <set_wake.isra.0>
	cmd = CCS811_REG_HW_VERSION;
   1b590:	2321      	movs	r3, #33	; 0x21
   1b592:	f88d 3007 	strb.w	r3, [sp, #7]
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1b596:	6830      	ldr	r0, [r6, #0]
   1b598:	2301      	movs	r3, #1
   1b59a:	1d2a      	adds	r2, r5, #4
   1b59c:	f10d 0107 	add.w	r1, sp, #7
   1b5a0:	f7ff ff34 	bl	1b40c <i2c_write_read.constprop.0>
	if (rc == 0) {
   1b5a4:	4604      	mov	r4, r0
   1b5a6:	b9e0      	cbnz	r0, 1b5e2 <ccs811_configver_fetch+0x64>
		cmd = CCS811_REG_FW_BOOT_VERSION;
   1b5a8:	2323      	movs	r3, #35	; 0x23
   1b5aa:	f88d 3007 	strb.w	r3, [sp, #7]
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1b5ae:	6830      	ldr	r0, [r6, #0]
   1b5b0:	2302      	movs	r3, #2
   1b5b2:	462a      	mov	r2, r5
   1b5b4:	f10d 0107 	add.w	r1, sp, #7
   1b5b8:	f7ff ff28 	bl	1b40c <i2c_write_read.constprop.0>
		ptr->fw_boot_version = sys_be16_to_cpu(ptr->fw_boot_version);
   1b5bc:	882b      	ldrh	r3, [r5, #0]
   1b5be:	ba5b      	rev16	r3, r3
   1b5c0:	802b      	strh	r3, [r5, #0]
	if (rc == 0) {
   1b5c2:	4604      	mov	r4, r0
   1b5c4:	b968      	cbnz	r0, 1b5e2 <ccs811_configver_fetch+0x64>
		cmd = CCS811_REG_FW_APP_VERSION;
   1b5c6:	2324      	movs	r3, #36	; 0x24
   1b5c8:	f88d 3007 	strb.w	r3, [sp, #7]
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1b5cc:	2302      	movs	r3, #2
   1b5ce:	18ea      	adds	r2, r5, r3
   1b5d0:	6830      	ldr	r0, [r6, #0]
   1b5d2:	f10d 0107 	add.w	r1, sp, #7
   1b5d6:	f7ff ff19 	bl	1b40c <i2c_write_read.constprop.0>
		ptr->fw_app_version = sys_be16_to_cpu(ptr->fw_app_version);
   1b5da:	886b      	ldrh	r3, [r5, #2]
   1b5dc:	ba5b      	rev16	r3, r3
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1b5de:	4604      	mov	r4, r0
		ptr->fw_app_version = sys_be16_to_cpu(ptr->fw_app_version);
   1b5e0:	806b      	strh	r3, [r5, #2]
	set_wake(drv_data, false);
   1b5e2:	68f0      	ldr	r0, [r6, #12]
   1b5e4:	2100      	movs	r1, #0
   1b5e6:	f7ff ff7d 	bl	1b4e4 <set_wake.isra.0>
	ptr->mode = drv_data->mode & CCS811_MODE_MSK;
   1b5ea:	7e33      	ldrb	r3, [r6, #24]
   1b5ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   1b5f0:	716b      	strb	r3, [r5, #5]
}
   1b5f2:	4620      	mov	r0, r4
   1b5f4:	b002      	add	sp, #8
   1b5f6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1b5f8:	f06f 0415 	mvn.w	r4, #21
   1b5fc:	e7f9      	b.n	1b5f2 <ccs811_configver_fetch+0x74>

0001b5fe <ccs811_baseline_fetch>:
{
   1b5fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct ccs811_data *drv_data = dev->data;
   1b600:	6905      	ldr	r5, [r0, #16]
	const uint8_t cmd = CCS811_REG_BASELINE;
   1b602:	2311      	movs	r3, #17
	set_wake(drv_data, true);
   1b604:	68e8      	ldr	r0, [r5, #12]
	const uint8_t cmd = CCS811_REG_BASELINE;
   1b606:	f88d 3005 	strb.w	r3, [sp, #5]
	set_wake(drv_data, true);
   1b60a:	2101      	movs	r1, #1
   1b60c:	f7ff ff6a 	bl	1b4e4 <set_wake.isra.0>
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1b610:	2302      	movs	r3, #2
   1b612:	f10d 0206 	add.w	r2, sp, #6
   1b616:	f10d 0105 	add.w	r1, sp, #5
   1b61a:	6828      	ldr	r0, [r5, #0]
   1b61c:	f7ff fef6 	bl	1b40c <i2c_write_read.constprop.0>
	set_wake(drv_data, false);
   1b620:	2100      	movs	r1, #0
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   1b622:	4604      	mov	r4, r0
	set_wake(drv_data, false);
   1b624:	68e8      	ldr	r0, [r5, #12]
   1b626:	f7ff ff5d 	bl	1b4e4 <set_wake.isra.0>
	if (rc <= 0) {
   1b62a:	2c00      	cmp	r4, #0
		rc = baseline;
   1b62c:	bfd8      	it	le
   1b62e:	f8bd 4006 	ldrhle.w	r4, [sp, #6]
}
   1b632:	4620      	mov	r0, r4
   1b634:	b003      	add	sp, #12
   1b636:	bd30      	pop	{r4, r5, pc}

0001b638 <hts221_sample_fetch>:
{
   1b638:	b513      	push	{r0, r1, r4, lr}
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1b63a:	2304      	movs	r3, #4
	struct hts221_data *data = dev->data;
   1b63c:	6904      	ldr	r4, [r0, #16]
	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   1b63e:	6840      	ldr	r0, [r0, #4]
   1b640:	eb0d 0203 	add.w	r2, sp, r3
   1b644:	21a8      	movs	r1, #168	; 0xa8
   1b646:	f7fd f901 	bl	1884c <hts221_read_reg>
	if (status < 0) {
   1b64a:	2800      	cmp	r0, #0
   1b64c:	db06      	blt.n	1b65c <hts221_sample_fetch+0x24>
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
   1b64e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1b652:	8023      	strh	r3, [r4, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
   1b654:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1b658:	8063      	strh	r3, [r4, #2]
	return 0;
   1b65a:	2000      	movs	r0, #0
}
   1b65c:	b002      	add	sp, #8
   1b65e:	bd10      	pop	{r4, pc}

0001b660 <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   1b660:	b530      	push	{r4, r5, lr}
   1b662:	b089      	sub	sp, #36	; 0x24
   1b664:	4604      	mov	r4, r0
   1b666:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   1b66a:	f10d 0107 	add.w	r1, sp, #7
   1b66e:	461d      	mov	r5, r3
   1b670:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1b672:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   1b674:	e9cd 2505 	strd	r2, r5, [sp, #20]
   1b678:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b67a:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1b67c:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
   1b67e:	6800      	ldr	r0, [r0, #0]
   1b680:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1b682:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1b686:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b68a:	6882      	ldr	r2, [r0, #8]
   1b68c:	a902      	add	r1, sp, #8
   1b68e:	6894      	ldr	r4, [r2, #8]
   1b690:	2202      	movs	r2, #2
   1b692:	47a0      	blx	r4
}
   1b694:	b009      	add	sp, #36	; 0x24
   1b696:	bd30      	pop	{r4, r5, pc}

0001b698 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   1b698:	b530      	push	{r4, r5, lr}
   1b69a:	b089      	sub	sp, #36	; 0x24
   1b69c:	4604      	mov	r4, r0
   1b69e:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   1b6a2:	f10d 0107 	add.w	r1, sp, #7
   1b6a6:	461d      	mov	r5, r3
   1b6a8:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   1b6aa:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   1b6ac:	e9cd 2505 	strd	r2, r5, [sp, #20]
   1b6b0:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1b6b2:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   1b6b4:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   1b6b6:	6800      	ldr	r0, [r0, #0]
   1b6b8:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   1b6ba:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1b6be:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   1b6c2:	6881      	ldr	r1, [r0, #8]
   1b6c4:	688c      	ldr	r4, [r1, #8]
   1b6c6:	a902      	add	r1, sp, #8
   1b6c8:	47a0      	blx	r4
}
   1b6ca:	b009      	add	sp, #36	; 0x24
   1b6cc:	bd30      	pop	{r4, r5, pc}

0001b6ce <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
   1b6ce:	4603      	mov	r3, r0
   1b6d0:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   1b6d2:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1b6d4:	7919      	ldrb	r1, [r3, #4]
   1b6d6:	2301      	movs	r3, #1
   1b6d8:	fa03 f101 	lsl.w	r1, r3, r1
   1b6dc:	6903      	ldr	r3, [r0, #16]
   1b6de:	681b      	ldr	r3, [r3, #0]
   1b6e0:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1b6e2:	bf18      	it	ne
   1b6e4:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1b6e8:	b112      	cbz	r2, 1b6f0 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   1b6ea:	6883      	ldr	r3, [r0, #8]
   1b6ec:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1b6ee:	4718      	bx	r3
   1b6f0:	6883      	ldr	r3, [r0, #8]
   1b6f2:	691b      	ldr	r3, [r3, #16]
   1b6f4:	e7fb      	b.n	1b6ee <gpio_pin_set_dt+0x20>

0001b6f6 <disable_sync>:

	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
}

static int disable_sync(const struct device *dev)
{
   1b6f6:	b530      	push	{r4, r5, lr}
	struct driver_data_sync *data = dev->data;
	const struct driver_config *cfg = dev->config;
	k_spinlock_key_t key;
	int rc = onoff_sync_lock(&data->srv, &key);
   1b6f8:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1b6fa:	6845      	ldr	r5, [r0, #4]
{
   1b6fc:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
   1b6fe:	a903      	add	r1, sp, #12
   1b700:	4620      	mov	r0, r4
   1b702:	f7fc fe1b 	bl	1833c <onoff_sync_lock>

	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1b706:	7d29      	ldrb	r1, [r5, #20]
   1b708:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
   1b70c:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1b70e:	d114      	bne.n	1b73a <disable_sync+0x44>
		rc = 0;
	} else if (rc == 1) {
   1b710:	2801      	cmp	r0, #1
   1b712:	d10c      	bne.n	1b72e <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1b714:	f105 000c 	add.w	r0, r5, #12
   1b718:	f7ff ffd9 	bl	1b6ce <gpio_pin_set_dt>
   1b71c:	4603      	mov	r3, r0
	} else if (rc == 0) {
		rc = -EINVAL;
	} /* else rc > 0, leave it on */

	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   1b71e:	2200      	movs	r2, #0
   1b720:	9903      	ldr	r1, [sp, #12]
   1b722:	9200      	str	r2, [sp, #0]
   1b724:	4620      	mov	r0, r4
   1b726:	f7fc fe14 	bl	18352 <onoff_sync_finalize>
}
   1b72a:	b005      	add	sp, #20
   1b72c:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
   1b72e:	2800      	cmp	r0, #0
   1b730:	bf14      	ite	ne
   1b732:	4603      	movne	r3, r0
   1b734:	f06f 0315 	mvneq.w	r3, #21
   1b738:	e7f1      	b.n	1b71e <disable_sync+0x28>
		rc = 0;
   1b73a:	2300      	movs	r3, #0
   1b73c:	e7ef      	b.n	1b71e <disable_sync+0x28>

0001b73e <enable_sync>:
{
   1b73e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   1b740:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
   1b742:	6846      	ldr	r6, [r0, #4]
{
   1b744:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
   1b746:	4628      	mov	r0, r5
   1b748:	a903      	add	r1, sp, #12
   1b74a:	f7fc fdf7 	bl	1833c <onoff_sync_lock>
	if ((rc == 0)
   1b74e:	4603      	mov	r3, r0
   1b750:	b940      	cbnz	r0, 1b764 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   1b752:	7d32      	ldrb	r2, [r6, #20]
   1b754:	07d2      	lsls	r2, r2, #31
   1b756:	d405      	bmi.n	1b764 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1b758:	2101      	movs	r1, #1
   1b75a:	f106 000c 	add.w	r0, r6, #12
   1b75e:	f7ff ffb6 	bl	1b6ce <gpio_pin_set_dt>
   1b762:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   1b764:	2201      	movs	r2, #1
   1b766:	9200      	str	r2, [sp, #0]
   1b768:	9903      	ldr	r1, [sp, #12]
   1b76a:	4622      	mov	r2, r4
   1b76c:	4628      	mov	r0, r5
   1b76e:	f7fc fdf0 	bl	18352 <onoff_sync_finalize>
}
   1b772:	b004      	add	sp, #16
   1b774:	bd70      	pop	{r4, r5, r6, pc}

0001b776 <disable_onoff>:
	return onoff_release(&data->mgr);
   1b776:	6900      	ldr	r0, [r0, #16]
   1b778:	3004      	adds	r0, #4
   1b77a:	f7fc bdba 	b.w	182f2 <onoff_release>

0001b77e <enable_onoff>:
	return onoff_request(&data->mgr, cli);
   1b77e:	6900      	ldr	r0, [r0, #16]
   1b780:	3004      	adds	r0, #4
   1b782:	f7fc bd6d 	b.w	18260 <onoff_request>

0001b786 <common_init.isra.0>:
static int common_init(const struct device *dev)
   1b786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b788:	4605      	mov	r5, r0
	if (!device_is_ready(cfg->enable.port)) {
   1b78a:	68c0      	ldr	r0, [r0, #12]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1b78c:	f000 f9cc 	bl	1bb28 <z_device_is_ready>
   1b790:	b340      	cbz	r0, 1b7e4 <common_init.isra.0+0x5e>
	if (on) {
   1b792:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
   1b794:	7c6b      	ldrb	r3, [r5, #17]
	return gpio_pin_configure(spec->port,
   1b796:	68e8      	ldr	r0, [r5, #12]
   1b798:	7c29      	ldrb	r1, [r5, #16]
   1b79a:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
   1b79e:	bf16      	itet	ne
   1b7a0:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
		flags = GPIO_OUTPUT_INACTIVE;
   1b7a4:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		delay_us = cfg->startup_delay_us;
   1b7a8:	686c      	ldrne	r4, [r5, #4]
   1b7aa:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
   1b7ac:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
   1b7ae:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1b7b2:	683d      	ldr	r5, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1b7b4:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1b7b6:	bf48      	it	mi
   1b7b8:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1b7bc:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1b7be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1b7c2:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1b7c4:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1b7c6:	bf4c      	ite	mi
   1b7c8:	4335      	orrmi	r5, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1b7ca:	43b5      	bicpl	r5, r6
   1b7cc:	603d      	str	r5, [r7, #0]
	return api->pin_configure(port, pin, flags);
   1b7ce:	f8dc 3000 	ldr.w	r3, [ip]
   1b7d2:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
   1b7d4:	4605      	mov	r5, r0
   1b7d6:	b918      	cbnz	r0, 1b7e0 <common_init.isra.0+0x5a>
   1b7d8:	b114      	cbz	r4, 1b7e0 <common_init.isra.0+0x5a>
   1b7da:	4620      	mov	r0, r4
   1b7dc:	f000 fd67 	bl	1c2ae <z_impl_k_busy_wait>
}
   1b7e0:	4628      	mov	r0, r5
   1b7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   1b7e4:	f06f 0512 	mvn.w	r5, #18
   1b7e8:	e7fa      	b.n	1b7e0 <common_init.isra.0+0x5a>

0001b7ea <regulator_fixed_init_sync>:
};

static int regulator_fixed_init_sync(const struct device *dev)
{
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
   1b7ea:	6840      	ldr	r0, [r0, #4]
   1b7ec:	f7ff bfcb 	b.w	1b786 <common_init.isra.0>

0001b7f0 <onoff_worker>:
{
   1b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
   1b7f4:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
   1b7f8:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
   1b7fc:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
   1b7fe:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
   1b800:	2901      	cmp	r1, #1
{
   1b802:	4604      	mov	r4, r0
	struct driver_data_onoff *data
   1b804:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
   1b808:	d10f      	bne.n	1b82a <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1b80a:	f105 000c 	add.w	r0, r5, #12
   1b80e:	f7ff ff5e 	bl	1b6ce <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
   1b812:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
   1b814:	4603      	mov	r3, r0
	data->notify = NULL;
   1b816:	2100      	movs	r1, #0
   1b818:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
   1b81a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
   1b81e:	4630      	mov	r0, r6
   1b820:	4639      	mov	r1, r7
}
   1b822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1b826:	f7f9 bbf5 	b.w	15014 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
   1b82a:	2902      	cmp	r1, #2
   1b82c:	d107      	bne.n	1b83e <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1b82e:	2100      	movs	r1, #0
   1b830:	f105 000c 	add.w	r0, r5, #12
   1b834:	f7ff ff4b 	bl	1b6ce <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
   1b838:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
   1b83a:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
   1b83c:	e7eb      	b.n	1b816 <onoff_worker+0x26>
	int rc = 0;
   1b83e:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
   1b840:	461a      	mov	r2, r3
   1b842:	e7e8      	b.n	1b816 <onoff_worker+0x26>

0001b844 <stop>:
{
   1b844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   1b848:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1b84c:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   1b84e:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
   1b850:	6858      	ldr	r0, [r3, #4]
{
   1b852:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1b854:	7d01      	ldrb	r1, [r0, #20]
   1b856:	f011 0101 	ands.w	r1, r1, #1
   1b85a:	d113      	bne.n	1b884 <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
   1b85c:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
   1b85e:	300c      	adds	r0, #12
   1b860:	f7ff ff35 	bl	1b6ce <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   1b864:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
   1b868:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   1b86a:	d10d      	bne.n	1b888 <stop+0x44>
		data->task = WORK_TASK_DISABLE;
   1b86c:	2302      	movs	r3, #2
   1b86e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   1b872:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1b874:	f104 001c 	add.w	r0, r4, #28
   1b878:	2200      	movs	r2, #0
}
   1b87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1b87e:	2300      	movs	r3, #0
   1b880:	f7fb becc 	b.w	1761c <k_work_schedule>
	int rc = 0;
   1b884:	2300      	movs	r3, #0
		delay_us = 0;
   1b886:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
   1b888:	463a      	mov	r2, r7
   1b88a:	4629      	mov	r1, r5
   1b88c:	4630      	mov	r0, r6
}
   1b88e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1b892:	f7f9 bbbf 	b.w	15014 <finalize_transition>

0001b896 <start>:
{
   1b896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   1b89a:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   1b89e:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   1b8a0:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
   1b8a2:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1b8a4:	7d03      	ldrb	r3, [r0, #20]
   1b8a6:	07db      	lsls	r3, r3, #31
{
   1b8a8:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   1b8aa:	d414      	bmi.n	1b8d6 <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
   1b8ac:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
   1b8ae:	2101      	movs	r1, #1
   1b8b0:	300c      	adds	r0, #12
   1b8b2:	f7ff ff0c 	bl	1b6ce <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   1b8b6:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
   1b8ba:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   1b8bc:	d10d      	bne.n	1b8da <start+0x44>
		data->task = WORK_TASK_ENABLE;
   1b8be:	2301      	movs	r3, #1
   1b8c0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   1b8c4:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1b8c6:	f104 001c 	add.w	r0, r4, #28
   1b8ca:	2200      	movs	r2, #0
}
   1b8cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   1b8d0:	2300      	movs	r3, #0
   1b8d2:	f7fb bea3 	b.w	1761c <k_work_schedule>
	int rc = 0;
   1b8d6:	2300      	movs	r3, #0
		delay_us = 0;
   1b8d8:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
   1b8da:	4632      	mov	r2, r6
   1b8dc:	4629      	mov	r1, r5
   1b8de:	4638      	mov	r0, r7
}
   1b8e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   1b8e4:	f7f9 bb96 	b.w	15014 <finalize_transition>

0001b8e8 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   1b8e8:	6902      	ldr	r2, [r0, #16]
{
   1b8ea:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   1b8ec:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1b8f0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1b8f4:	2000      	movs	r0, #0
   1b8f6:	4770      	bx	lr

0001b8f8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1b8f8:	6843      	ldr	r3, [r0, #4]
   1b8fa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b8fc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1b900:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1b904:	4770      	bx	lr

0001b906 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1b906:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   1b908:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1b90a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b90c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b910:	b148      	cbz	r0, 1b926 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1b912:	7c52      	ldrb	r2, [r2, #17]
   1b914:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b916:	2000      	movs	r0, #0
   1b918:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1b91c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b920:	2201      	movs	r2, #1
   1b922:	601a      	str	r2, [r3, #0]
	return 0;
   1b924:	4770      	bx	lr
		return -1;
   1b926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b92a:	4770      	bx	lr

0001b92c <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1b92c:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1b92e:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b930:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b934:	b940      	cbnz	r0, 1b948 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1b936:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b938:	079b      	lsls	r3, r3, #30
   1b93a:	d406      	bmi.n	1b94a <is_tx_ready.isra.0+0x1e>
   1b93c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1b940:	3800      	subs	r0, #0
   1b942:	bf18      	it	ne
   1b944:	2001      	movne	r0, #1
   1b946:	4770      	bx	lr
   1b948:	2001      	movs	r0, #1
}
   1b94a:	4770      	bx	lr

0001b94c <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   1b94c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1b94e:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1b950:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1b954:	05c9      	lsls	r1, r1, #23
   1b956:	d518      	bpl.n	1b98a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b958:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   1b95c:	b1a9      	cbz	r1, 1b98a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1b95e:	f04f 0020 	mov.w	r0, #32
   1b962:	f3ef 8111 	mrs	r1, BASEPRI
   1b966:	f380 8812 	msr	BASEPRI_MAX, r0
   1b96a:	f3bf 8f6f 	isb	sy
   1b96e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1b972:	b130      	cbz	r0, 1b982 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b974:	2000      	movs	r0, #0
   1b976:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   1b97a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b97e:	2001      	movs	r0, #1
   1b980:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   1b982:	f381 8811 	msr	BASEPRI, r1
   1b986:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1b98a:	6852      	ldr	r2, [r2, #4]
   1b98c:	06d2      	lsls	r2, r2, #27
   1b98e:	d515      	bpl.n	1b9bc <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   1b990:	f04f 0120 	mov.w	r1, #32
   1b994:	f3ef 8211 	mrs	r2, BASEPRI
   1b998:	f381 8812 	msr	BASEPRI_MAX, r1
   1b99c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b9a0:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1b9a4:	b111      	cbz	r1, 1b9ac <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1b9a6:	2100      	movs	r1, #0
   1b9a8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1b9ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1b9b0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1b9b4:	f382 8811 	msr	BASEPRI, r2
   1b9b8:	f3bf 8f6f 	isb	sy
}
   1b9bc:	4770      	bx	lr

0001b9be <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1b9be:	4770      	bx	lr

0001b9c0 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1b9c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b9c4:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   1b9c8:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1b9ca:	bf04      	itt	eq
   1b9cc:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   1b9d0:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   1b9d4:	1f83      	subs	r3, r0, #6
   1b9d6:	4258      	negs	r0, r3
   1b9d8:	4158      	adcs	r0, r3
   1b9da:	4770      	bx	lr

0001b9dc <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1b9dc:	4700      	bx	r0

0001b9de <nrfx_busy_wait>:
   1b9de:	f000 bc66 	b.w	1c2ae <z_impl_k_busy_wait>

0001b9e2 <nrfx_clock_enable>:
{
   1b9e2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1b9e4:	2000      	movs	r0, #0
   1b9e6:	f7e7 fb6f 	bl	30c8 <arch_irq_is_enabled>
   1b9ea:	b918      	cbnz	r0, 1b9f4 <nrfx_clock_enable+0x12>
}
   1b9ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1b9f0:	f7e7 bb46 	b.w	3080 <arch_irq_enable>
   1b9f4:	bd08      	pop	{r3, pc}

0001b9f6 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1b9f6:	f000 001f 	and.w	r0, r0, #31
   1b9fa:	0080      	lsls	r0, r0, #2
   1b9fc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1ba00:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   1ba04:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1ba08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1ba0c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   1ba10:	4770      	bx	lr

0001ba12 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   1ba12:	7b0a      	ldrb	r2, [r1, #12]
{
   1ba14:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   1ba16:	2a03      	cmp	r2, #3
   1ba18:	d829      	bhi.n	1ba6e <xfer_completeness_check+0x5c>
   1ba1a:	e8df f002 	tbb	[pc, r2]
   1ba1e:	2521      	.short	0x2521
   1ba20:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1ba22:	688a      	ldr	r2, [r1, #8]
   1ba24:	0350      	lsls	r0, r2, #13
   1ba26:	d504      	bpl.n	1ba32 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   1ba28:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   1ba2c:	6908      	ldr	r0, [r1, #16]
   1ba2e:	4290      	cmp	r0, r2
   1ba30:	d107      	bne.n	1ba42 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   1ba32:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   1ba34:	0352      	lsls	r2, r2, #13
   1ba36:	d41a      	bmi.n	1ba6e <xfer_completeness_check+0x5c>
   1ba38:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1ba3c:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1ba3e:	4291      	cmp	r1, r2
   1ba40:	d015      	beq.n	1ba6e <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1ba42:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1ba44:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   1ba46:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   1ba4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1ba4e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   1ba50:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   1ba54:	6908      	ldr	r0, [r1, #16]
   1ba56:	4290      	cmp	r0, r2
   1ba58:	d1f3      	bne.n	1ba42 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   1ba5a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1ba5e:	e7ed      	b.n	1ba3c <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   1ba60:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   1ba64:	6909      	ldr	r1, [r1, #16]
   1ba66:	e7ea      	b.n	1ba3e <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   1ba68:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   1ba6c:	e7fa      	b.n	1ba64 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   1ba6e:	2001      	movs	r0, #1
}
   1ba70:	4770      	bx	lr

0001ba72 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1ba72:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1ba74:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1ba76:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1ba78:	bf9c      	itt	ls
   1ba7a:	6880      	ldrls	r0, [r0, #8]
   1ba7c:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1ba7e:	3b01      	subs	r3, #1
   1ba80:	1a98      	subs	r0, r3, r2
}
   1ba82:	4770      	bx	lr

0001ba84 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1ba84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1ba88:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1ba8c:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1ba8e:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ba92:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1ba94:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ba96:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1ba98:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1ba9a:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1ba9c:	d906      	bls.n	1baac <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1ba9e:	f7fd f9af 	bl	18e00 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   1baa2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
   1baa6:	60ec      	str	r4, [r5, #12]
}
   1baa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1baac:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1baae:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   1bab2:	f7fd f9a5 	bl	18e00 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   1bab6:	6868      	ldr	r0, [r5, #4]
   1bab8:	4622      	mov	r2, r4
   1baba:	eb07 0108 	add.w	r1, r7, r8
   1babe:	e7ee      	b.n	1ba9e <_WriteNoCheck+0x1a>

0001bac0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1bac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   1bac4:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1bac6:	4606      	mov	r6, r0
   1bac8:	4689      	mov	r9, r1
   1baca:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1bacc:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1bad0:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1bad2:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1bad4:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   1bad6:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1bad8:	bf28      	it	cs
   1bada:	18e4      	addcs	r4, r4, r3
   1badc:	3c01      	subs	r4, #1
   1bade:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1bae0:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1bae2:	42bc      	cmp	r4, r7
   1bae4:	bf28      	it	cs
   1bae6:	463c      	movcs	r4, r7
   1bae8:	4294      	cmp	r4, r2
   1baea:	bf28      	it	cs
   1baec:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   1baee:	4649      	mov	r1, r9
   1baf0:	4622      	mov	r2, r4
   1baf2:	4428      	add	r0, r5
   1baf4:	f7fd f984 	bl	18e00 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1baf8:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1bafa:	4425      	add	r5, r4
    NumBytesWritten += NumBytesToWrite;
   1bafc:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1bafe:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
   1bb00:	1b3f      	subs	r7, r7, r4
      WrOff = 0u;
   1bb02:	42ab      	cmp	r3, r5
   1bb04:	bf08      	it	eq
   1bb06:	2500      	moveq	r5, #0
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
   1bb08:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
   1bb0c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1bb0e:	2f00      	cmp	r7, #0
   1bb10:	d1de      	bne.n	1bad0 <_WriteBlocking+0x10>
}
   1bb12:	4640      	mov	r0, r8
   1bb14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001bb18 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1bb18:	f7fb b8cc 	b.w	16cb4 <_DoInit>

0001bb1c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1bb1c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1bb1e:	f7ff fffb 	bl	1bb18 <SEGGER_RTT_Init>

	return 0;
}
   1bb22:	2000      	movs	r0, #0
   1bb24:	bd08      	pop	{r3, pc}

0001bb26 <z_device_state_init>:
}
   1bb26:	4770      	bx	lr

0001bb28 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1bb28:	b138      	cbz	r0, 1bb3a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1bb2a:	68c3      	ldr	r3, [r0, #12]
   1bb2c:	8818      	ldrh	r0, [r3, #0]
   1bb2e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1bb32:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1bb36:	4258      	negs	r0, r3
   1bb38:	4158      	adcs	r0, r3
}
   1bb3a:	4770      	bx	lr

0001bb3c <arch_system_halt>:
	__asm__ volatile(
   1bb3c:	f04f 0220 	mov.w	r2, #32
   1bb40:	f3ef 8311 	mrs	r3, BASEPRI
   1bb44:	f382 8812 	msr	BASEPRI_MAX, r2
   1bb48:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   1bb4c:	e7fe      	b.n	1bb4c <arch_system_halt+0x10>

0001bb4e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1bb4e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   1bb50:	f7ff fff4 	bl	1bb3c <arch_system_halt>

0001bb54 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb56:	4605      	mov	r5, r0
   1bb58:	460e      	mov	r6, r1
   1bb5a:	f04f 0320 	mov.w	r3, #32
   1bb5e:	f3ef 8711 	mrs	r7, BASEPRI
   1bb62:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb66:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1bb6a:	f7fc f839 	bl	17be0 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1bb6e:	4631      	mov	r1, r6
   1bb70:	4604      	mov	r4, r0
   1bb72:	4628      	mov	r0, r5
   1bb74:	f7ff ffeb 	bl	1bb4e <k_sys_fatal_error_handler>
	__asm__ volatile(
   1bb78:	f387 8811 	msr	BASEPRI, r7
   1bb7c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1bb80:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1bb82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1bb86:	f7e7 bce3 	b.w	3550 <z_impl_k_thread_abort>

0001bb8a <k_heap_init>:
{
   1bb8a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1bb8c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1bb90:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1bb94:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1bb96:	f7fc bd94 	b.w	186c2 <sys_heap_init>

0001bb9a <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1bb9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb9e:	b085      	sub	sp, #20
   1bba0:	4606      	mov	r6, r0
   1bba2:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1bba4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   1bba8:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1bbaa:	f000 fb84 	bl	1c2b6 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1bbae:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1bbb2:	4605      	mov	r5, r0
   1bbb4:	460f      	mov	r7, r1
	__asm__ volatile(
   1bbb6:	f04f 0320 	mov.w	r3, #32
   1bbba:	f3ef 8411 	mrs	r4, BASEPRI
   1bbbe:	f383 8812 	msr	BASEPRI_MAX, r3
   1bbc2:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1bbc6:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1bbca:	464a      	mov	r2, r9
   1bbcc:	4641      	mov	r1, r8
   1bbce:	4630      	mov	r0, r6
   1bbd0:	f7fc fd0f 	bl	185f2 <sys_heap_aligned_alloc>
   1bbd4:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   1bbd6:	f7fc f9b9 	bl	17f4c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1bbda:	9b03      	ldr	r3, [sp, #12]
   1bbdc:	b13b      	cbz	r3, 1bbee <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   1bbde:	f384 8811 	msr	BASEPRI, r4
   1bbe2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1bbe6:	4618      	mov	r0, r3
   1bbe8:	b005      	add	sp, #20
   1bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   1bbee:	1a28      	subs	r0, r5, r0
   1bbf0:	eb67 0101 	sbc.w	r1, r7, r1
   1bbf4:	2801      	cmp	r0, #1
   1bbf6:	f171 0200 	sbcs.w	r2, r1, #0
   1bbfa:	dbf0      	blt.n	1bbde <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1bbfc:	e9cd 0100 	strd	r0, r1, [sp]
   1bc00:	465a      	mov	r2, fp
   1bc02:	4621      	mov	r1, r4
   1bc04:	4650      	mov	r0, sl
   1bc06:	f7fb fedb 	bl	179c0 <z_pend_curr>
	__asm__ volatile(
   1bc0a:	f04f 0320 	mov.w	r3, #32
   1bc0e:	f3ef 8411 	mrs	r4, BASEPRI
   1bc12:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc16:	f3bf 8f6f 	isb	sy
   1bc1a:	e7d6      	b.n	1bbca <k_heap_aligned_alloc+0x30>

0001bc1c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1bc1c:	b538      	push	{r3, r4, r5, lr}
   1bc1e:	4604      	mov	r4, r0
   1bc20:	f04f 0320 	mov.w	r3, #32
   1bc24:	f3ef 8511 	mrs	r5, BASEPRI
   1bc28:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc2c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1bc30:	f7fc fca7 	bl	18582 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1bc34:	f104 000c 	add.w	r0, r4, #12
   1bc38:	f000 fac6 	bl	1c1c8 <z_unpend_all>
   1bc3c:	b130      	cbz	r0, 1bc4c <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1bc3e:	4629      	mov	r1, r5
   1bc40:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1bc44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1bc48:	f7fb bd68 	b.w	1771c <z_reschedule>
	__asm__ volatile(
   1bc4c:	f385 8811 	msr	BASEPRI, r5
   1bc50:	f3bf 8f6f 	isb	sy
}
   1bc54:	bd38      	pop	{r3, r4, r5, pc}

0001bc56 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1bc56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc58:	4604      	mov	r4, r0
   1bc5a:	460d      	mov	r5, r1
	__asm__ volatile(
   1bc5c:	f04f 0320 	mov.w	r3, #32
   1bc60:	f3ef 8611 	mrs	r6, BASEPRI
   1bc64:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc68:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1bc6c:	6947      	ldr	r7, [r0, #20]
   1bc6e:	b977      	cbnz	r7, 1bc8e <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1bc70:	f000 fa92 	bl	1c198 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1bc74:	b158      	cbz	r0, 1bc8e <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1bc76:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1bc78:	6142      	str	r2, [r0, #20]
   1bc7a:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   1bc7c:	f000 fa30 	bl	1c0e0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1bc80:	4631      	mov	r1, r6
   1bc82:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1bc86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   1bc8a:	f7fb bd47 	b.w	1771c <z_reschedule>
	**(char ***) mem = slab->free_list;
   1bc8e:	682b      	ldr	r3, [r5, #0]
   1bc90:	6962      	ldr	r2, [r4, #20]
   1bc92:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1bc94:	682b      	ldr	r3, [r5, #0]
   1bc96:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1bc98:	69a3      	ldr	r3, [r4, #24]
   1bc9a:	3b01      	subs	r3, #1
   1bc9c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1bc9e:	f386 8811 	msr	BASEPRI, r6
   1bca2:	f3bf 8f6f 	isb	sy
}
   1bca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001bca8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bca8:	f3ef 8005 	mrs	r0, IPSR
}
   1bcac:	3800      	subs	r0, #0
   1bcae:	bf18      	it	ne
   1bcb0:	2001      	movne	r0, #1
   1bcb2:	4770      	bx	lr

0001bcb4 <z_impl_k_thread_name_set>:
}
   1bcb4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   1bcb8:	4770      	bx	lr

0001bcba <z_impl_k_thread_start>:
	z_sched_start(thread);
   1bcba:	f7fb be25 	b.w	17908 <z_sched_start>

0001bcbe <z_pm_save_idle_exit>:
{
   1bcbe:	b508      	push	{r3, lr}
	pm_system_resume();
   1bcc0:	f7e7 f846 	bl	2d50 <pm_system_resume>
}
   1bcc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   1bcc8:	f7ff be79 	b.w	1b9be <sys_clock_idle_exit>

0001bccc <queue_insert>:
{
   1bccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bcd0:	4699      	mov	r9, r3
   1bcd2:	4604      	mov	r4, r0
   1bcd4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1bcd8:	460d      	mov	r5, r1
   1bcda:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1bcdc:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1bce0:	f04f 0220 	mov.w	r2, #32
   1bce4:	f3ef 8711 	mrs	r7, BASEPRI
   1bce8:	f382 8812 	msr	BASEPRI_MAX, r2
   1bcec:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1bcf0:	b103      	cbz	r3, 1bcf4 <queue_insert+0x28>
	return list->tail;
   1bcf2:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1bcf4:	4630      	mov	r0, r6
   1bcf6:	f000 fa4f 	bl	1c198 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1bcfa:	b158      	cbz	r0, 1bd14 <queue_insert+0x48>
   1bcfc:	2400      	movs	r4, #0
   1bcfe:	67c4      	str	r4, [r0, #124]	; 0x7c
   1bd00:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1bd04:	f000 f9ec 	bl	1c0e0 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1bd08:	4630      	mov	r0, r6
   1bd0a:	4639      	mov	r1, r7
   1bd0c:	f7fb fd06 	bl	1771c <z_reschedule>
	return 0;
   1bd10:	2000      	movs	r0, #0
   1bd12:	e00c      	b.n	1bd2e <queue_insert+0x62>
	if (alloc) {
   1bd14:	f1b9 0f00 	cmp.w	r9, #0
   1bd18:	d01b      	beq.n	1bd52 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   1bd1a:	2108      	movs	r1, #8
   1bd1c:	f7fc f9b2 	bl	18084 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1bd20:	b938      	cbnz	r0, 1bd32 <queue_insert+0x66>
	__asm__ volatile(
   1bd22:	f387 8811 	msr	BASEPRI, r7
   1bd26:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1bd2a:	f06f 000b 	mvn.w	r0, #11
}
   1bd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1bd32:	2301      	movs	r3, #1
		anode->data = data;
   1bd34:	f8c0 8004 	str.w	r8, [r0, #4]
   1bd38:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1bd3a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1bd3c:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   1bd40:	b95d      	cbnz	r5, 1bd5a <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1bd42:	6823      	ldr	r3, [r4, #0]
   1bd44:	4313      	orrs	r3, r2
   1bd46:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1bd48:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1bd4a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1bd4c:	b973      	cbnz	r3, 1bd6c <queue_insert+0xa0>
	list->tail = node;
   1bd4e:	6060      	str	r0, [r4, #4]
}
   1bd50:	e00c      	b.n	1bd6c <queue_insert+0xa0>
	node->next_and_flags = flags;
   1bd52:	f8c8 9000 	str.w	r9, [r8]
}
   1bd56:	4640      	mov	r0, r8
   1bd58:	e7ef      	b.n	1bd3a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1bd5a:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1bd5c:	f033 0303 	bics.w	r3, r3, #3
   1bd60:	d110      	bne.n	1bd84 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1bd62:	6002      	str	r2, [r0, #0]
	return list->tail;
   1bd64:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1bd66:	b93a      	cbnz	r2, 1bd78 <queue_insert+0xac>
	list->head = node;
   1bd68:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1bd6c:	2104      	movs	r1, #4
   1bd6e:	f104 0010 	add.w	r0, r4, #16
   1bd72:	f000 fc09 	bl	1c588 <z_handle_obj_poll_events>
   1bd76:	e7c7      	b.n	1bd08 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1bd78:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1bd7a:	f003 0303 	and.w	r3, r3, #3
   1bd7e:	4303      	orrs	r3, r0
   1bd80:	6013      	str	r3, [r2, #0]
   1bd82:	e7e4      	b.n	1bd4e <queue_insert+0x82>
   1bd84:	4313      	orrs	r3, r2
   1bd86:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1bd88:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1bd8a:	f003 0303 	and.w	r3, r3, #3
   1bd8e:	4303      	orrs	r3, r0
   1bd90:	602b      	str	r3, [r5, #0]
}
   1bd92:	e7eb      	b.n	1bd6c <queue_insert+0xa0>

0001bd94 <z_queue_node_peek>:
{
   1bd94:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1bd96:	4604      	mov	r4, r0
   1bd98:	b130      	cbz	r0, 1bda8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1bd9a:	6802      	ldr	r2, [r0, #0]
   1bd9c:	0793      	lsls	r3, r2, #30
   1bd9e:	d003      	beq.n	1bda8 <z_queue_node_peek+0x14>
		ret = anode->data;
   1bda0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1bda2:	b109      	cbz	r1, 1bda8 <z_queue_node_peek+0x14>
			k_free(anode);
   1bda4:	f000 fbfe 	bl	1c5a4 <k_free>
}
   1bda8:	4620      	mov	r0, r4
   1bdaa:	bd10      	pop	{r4, pc}

0001bdac <z_impl_k_queue_init>:
	list->head = NULL;
   1bdac:	2300      	movs	r3, #0
	list->tail = NULL;
   1bdae:	e9c0 3300 	strd	r3, r3, [r0]
   1bdb2:	f100 0308 	add.w	r3, r0, #8
   1bdb6:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1bdba:	f100 0310 	add.w	r3, r0, #16
   1bdbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1bdc2:	4770      	bx	lr

0001bdc4 <k_queue_append>:
{
   1bdc4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1bdc6:	2301      	movs	r3, #1
   1bdc8:	9300      	str	r3, [sp, #0]
   1bdca:	2300      	movs	r3, #0
{
   1bdcc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1bdce:	4619      	mov	r1, r3
   1bdd0:	f7ff ff7c 	bl	1bccc <queue_insert>
}
   1bdd4:	b003      	add	sp, #12
   1bdd6:	f85d fb04 	ldr.w	pc, [sp], #4

0001bdda <k_queue_prepend>:
{
   1bdda:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   1bddc:	2300      	movs	r3, #0
{
   1bdde:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1bde0:	9300      	str	r3, [sp, #0]
   1bde2:	4619      	mov	r1, r3
   1bde4:	f7ff ff72 	bl	1bccc <queue_insert>
}
   1bde8:	b003      	add	sp, #12
   1bdea:	f85d fb04 	ldr.w	pc, [sp], #4

0001bdee <k_queue_append_list>:
{
   1bdee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bdf2:	4605      	mov	r5, r0
   1bdf4:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1bdf6:	460c      	mov	r4, r1
   1bdf8:	b391      	cbz	r1, 1be60 <k_queue_append_list+0x72>
   1bdfa:	b38a      	cbz	r2, 1be60 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1bdfc:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1be00:	f04f 0320 	mov.w	r3, #32
   1be04:	f3ef 8811 	mrs	r8, BASEPRI
   1be08:	f383 8812 	msr	BASEPRI_MAX, r3
   1be0c:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1be10:	4638      	mov	r0, r7
   1be12:	f000 f9c1 	bl	1c198 <z_unpend_first_thread>
   1be16:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1be1a:	b920      	cbnz	r0, 1be26 <k_queue_append_list+0x38>
	return list->tail;
   1be1c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1be1e:	b9ca      	cbnz	r2, 1be54 <k_queue_append_list+0x66>
	list->head = node;
   1be20:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1be22:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1be24:	e00a      	b.n	1be3c <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   1be26:	6144      	str	r4, [r0, #20]
   1be28:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1be2c:	f000 f958 	bl	1c0e0 <z_ready_thread>
		head = *(void **)head;
   1be30:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1be32:	4638      	mov	r0, r7
   1be34:	f000 f9b0 	bl	1c198 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1be38:	2c00      	cmp	r4, #0
   1be3a:	d1ee      	bne.n	1be1a <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1be3c:	2104      	movs	r1, #4
   1be3e:	f105 0010 	add.w	r0, r5, #16
   1be42:	f000 fba1 	bl	1c588 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1be46:	4638      	mov	r0, r7
   1be48:	4641      	mov	r1, r8
   1be4a:	f7fb fc67 	bl	1771c <z_reschedule>
	return 0;
   1be4e:	2000      	movs	r0, #0
}
   1be50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1be54:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1be56:	f003 0303 	and.w	r3, r3, #3
   1be5a:	431c      	orrs	r4, r3
   1be5c:	6014      	str	r4, [r2, #0]
}
   1be5e:	e7e0      	b.n	1be22 <k_queue_append_list+0x34>
		return -EINVAL;
   1be60:	f06f 0015 	mvn.w	r0, #21
   1be64:	e7f4      	b.n	1be50 <k_queue_append_list+0x62>

0001be66 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1be66:	b15a      	cbz	r2, 1be80 <z_impl_k_sem_init+0x1a>
   1be68:	428a      	cmp	r2, r1
   1be6a:	d309      	bcc.n	1be80 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1be6c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1be70:	e9c0 1202 	strd	r1, r2, [r0, #8]
   1be74:	e9c0 0000 	strd	r0, r0, [r0]
   1be78:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1be7c:	2000      	movs	r0, #0
   1be7e:	4770      	bx	lr
		return -EINVAL;
   1be80:	f06f 0015 	mvn.w	r0, #21
}
   1be84:	4770      	bx	lr

0001be86 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   1be86:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   1be88:	2301      	movs	r3, #1
   1be8a:	408b      	lsls	r3, r1
   1be8c:	ea22 0303 	bic.w	r3, r2, r3
   1be90:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   1be92:	fa22 f001 	lsr.w	r0, r2, r1
}
   1be96:	f000 0001 	and.w	r0, r0, #1
   1be9a:	4770      	bx	lr

0001be9c <unschedule_locked>:
{
   1be9c:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1be9e:	2103      	movs	r1, #3
{
   1bea0:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1bea2:	300c      	adds	r0, #12
   1bea4:	f7ff ffef 	bl	1be86 <flag_test_and_clear>
   1bea8:	4604      	mov	r4, r0
   1beaa:	b118      	cbz	r0, 1beb4 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   1beac:	f105 0010 	add.w	r0, r5, #16
   1beb0:	f000 f9b7 	bl	1c222 <z_abort_timeout>
}
   1beb4:	4620      	mov	r0, r4
   1beb6:	bd38      	pop	{r3, r4, r5, pc}

0001beb8 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   1beb8:	b120      	cbz	r0, 1bec4 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1beba:	2200      	movs	r2, #0
   1bebc:	4611      	mov	r1, r2
   1bebe:	3088      	adds	r0, #136	; 0x88
   1bec0:	f000 b992 	b.w	1c1e8 <z_sched_wake>
}
   1bec4:	4770      	bx	lr

0001bec6 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1bec6:	68c3      	ldr	r3, [r0, #12]
{
   1bec8:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1beca:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1bece:	079b      	lsls	r3, r3, #30
{
   1bed0:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1bed2:	d416      	bmi.n	1bf02 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   1bed4:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1bed6:	2102      	movs	r1, #2
   1bed8:	300c      	adds	r0, #12
   1beda:	f7ff ffd4 	bl	1be86 <flag_test_and_clear>
   1bede:	b180      	cbz	r0, 1bf02 <cancel_async_locked+0x3c>
	return list->head;
   1bee0:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bee4:	b16a      	cbz	r2, 1bf02 <cancel_async_locked+0x3c>
   1bee6:	4294      	cmp	r4, r2
   1bee8:	d11b      	bne.n	1bf22 <cancel_async_locked+0x5c>
	return node->next;
   1beea:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   1beec:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   1bef0:	b98d      	cbnz	r5, 1bf16 <cancel_async_locked+0x50>
   1bef2:	428c      	cmp	r4, r1
	list->head = node;
   1bef4:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   1bef8:	d101      	bne.n	1befe <cancel_async_locked+0x38>
	list->tail = node;
   1befa:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   1befe:	2300      	movs	r3, #0
   1bf00:	6023      	str	r3, [r4, #0]
	return *flagp;
   1bf02:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   1bf04:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   1bf08:	bf1e      	ittt	ne
   1bf0a:	f043 0302 	orrne.w	r3, r3, #2
   1bf0e:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1bf10:	f003 000f 	andne.w	r0, r3, #15
}
   1bf14:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   1bf16:	428c      	cmp	r4, r1
	parent->next = child;
   1bf18:	602a      	str	r2, [r5, #0]
	list->tail = node;
   1bf1a:	bf08      	it	eq
   1bf1c:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   1bf20:	e7ed      	b.n	1befe <cancel_async_locked+0x38>
	return node->next;
   1bf22:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1bf24:	6812      	ldr	r2, [r2, #0]
   1bf26:	e7dd      	b.n	1bee4 <cancel_async_locked+0x1e>

0001bf28 <work_timeout>:
{
   1bf28:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bf2a:	4604      	mov	r4, r0
   1bf2c:	f04f 0320 	mov.w	r3, #32
   1bf30:	f3ef 8511 	mrs	r5, BASEPRI
   1bf34:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf38:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1bf3c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1bf3e:	f1a0 0610 	sub.w	r6, r0, #16
   1bf42:	2103      	movs	r1, #3
   1bf44:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   1bf46:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1bf48:	f7ff ff9d 	bl	1be86 <flag_test_and_clear>
   1bf4c:	b128      	cbz	r0, 1bf5a <work_timeout+0x32>
		queue = dw->queue;
   1bf4e:	69a3      	ldr	r3, [r4, #24]
   1bf50:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1bf52:	a901      	add	r1, sp, #4
   1bf54:	4630      	mov	r0, r6
   1bf56:	f7fb faa9 	bl	174ac <submit_to_queue_locked>
	__asm__ volatile(
   1bf5a:	f385 8811 	msr	BASEPRI, r5
   1bf5e:	f3bf 8f6f 	isb	sy
}
   1bf62:	b002      	add	sp, #8
   1bf64:	bd70      	pop	{r4, r5, r6, pc}

0001bf66 <k_work_init>:
{
   1bf66:	b538      	push	{r3, r4, r5, lr}
   1bf68:	4604      	mov	r4, r0
   1bf6a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1bf6c:	2210      	movs	r2, #16
   1bf6e:	2100      	movs	r1, #0
   1bf70:	f7fc ff51 	bl	18e16 <memset>
   1bf74:	6065      	str	r5, [r4, #4]
}
   1bf76:	bd38      	pop	{r3, r4, r5, pc}

0001bf78 <k_work_submit_to_queue>:
{
   1bf78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bf7a:	9001      	str	r0, [sp, #4]
   1bf7c:	4608      	mov	r0, r1
	__asm__ volatile(
   1bf7e:	f04f 0320 	mov.w	r3, #32
   1bf82:	f3ef 8511 	mrs	r5, BASEPRI
   1bf86:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf8a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1bf8e:	a901      	add	r1, sp, #4
   1bf90:	f7fb fa8c 	bl	174ac <submit_to_queue_locked>
   1bf94:	4604      	mov	r4, r0
	__asm__ volatile(
   1bf96:	f385 8811 	msr	BASEPRI, r5
   1bf9a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1bf9e:	2800      	cmp	r0, #0
   1bfa0:	dd04      	ble.n	1bfac <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   1bfa2:	f7fb fe23 	bl	17bec <z_impl_k_is_preempt_thread>
   1bfa6:	b108      	cbz	r0, 1bfac <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   1bfa8:	f7fb fd78 	bl	17a9c <z_impl_k_yield>
}
   1bfac:	4620      	mov	r0, r4
   1bfae:	b003      	add	sp, #12
   1bfb0:	bd30      	pop	{r4, r5, pc}

0001bfb2 <k_work_init_delayable>:
{
   1bfb2:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   1bfb4:	2230      	movs	r2, #48	; 0x30
{
   1bfb6:	4604      	mov	r4, r0
   1bfb8:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1bfba:	2100      	movs	r1, #0
   1bfbc:	f7fc ff2b 	bl	18e16 <memset>
   1bfc0:	f44f 7380 	mov.w	r3, #256	; 0x100
   1bfc4:	6065      	str	r5, [r4, #4]
   1bfc6:	60e3      	str	r3, [r4, #12]
}
   1bfc8:	bd38      	pop	{r3, r4, r5, pc}

0001bfca <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1bfca:	b538      	push	{r3, r4, r5, lr}
   1bfcc:	4604      	mov	r4, r0
	__asm__ volatile(
   1bfce:	f04f 0320 	mov.w	r3, #32
   1bfd2:	f3ef 8511 	mrs	r5, BASEPRI
   1bfd6:	f383 8812 	msr	BASEPRI_MAX, r3
   1bfda:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   1bfde:	f7ff ff5d 	bl	1be9c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1bfe2:	4620      	mov	r0, r4
   1bfe4:	f7ff ff6f 	bl	1bec6 <cancel_async_locked>
	__asm__ volatile(
   1bfe8:	f385 8811 	msr	BASEPRI, r5
   1bfec:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1bff0:	bd38      	pop	{r3, r4, r5, pc}

0001bff2 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   1bff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bff4:	4604      	mov	r4, r0
   1bff6:	460d      	mov	r5, r1
	__asm__ volatile(
   1bff8:	f04f 0320 	mov.w	r3, #32
   1bffc:	f3ef 8711 	mrs	r7, BASEPRI
   1c000:	f383 8812 	msr	BASEPRI_MAX, r3
   1c004:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   1c008:	68c3      	ldr	r3, [r0, #12]
   1c00a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   1c00e:	2b00      	cmp	r3, #0
   1c010:	bf14      	ite	ne
   1c012:	2601      	movne	r6, #1
   1c014:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   1c016:	d009      	beq.n	1c02c <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   1c018:	f7ff ff40 	bl	1be9c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   1c01c:	4620      	mov	r0, r4
   1c01e:	f7ff ff52 	bl	1bec6 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   1c022:	4629      	mov	r1, r5
   1c024:	4620      	mov	r0, r4
   1c026:	f7fb fa23 	bl	17470 <cancel_sync_locked>
   1c02a:	4603      	mov	r3, r0
	__asm__ volatile(
   1c02c:	f387 8811 	msr	BASEPRI, r7
   1c030:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   1c034:	b13b      	cbz	r3, 1c046 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   1c036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c03a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c03e:	f105 0008 	add.w	r0, r5, #8
   1c042:	f7fb f93d 	bl	172c0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   1c046:	4630      	mov	r0, r6
   1c048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c04a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   1c04a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1c04e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c050:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c052:	2300      	movs	r3, #0
	node->prev = NULL;
   1c054:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c058:	4770      	bx	lr

0001c05a <unpend_thread_no_timeout>:
{
   1c05a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   1c05c:	f7ff fff5 	bl	1c04a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c060:	7b43      	ldrb	r3, [r0, #13]
   1c062:	f023 0302 	bic.w	r3, r3, #2
   1c066:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   1c068:	2300      	movs	r3, #0
   1c06a:	6083      	str	r3, [r0, #8]
}
   1c06c:	bd08      	pop	{r3, pc}

0001c06e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1c06e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1c072:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1c076:	4283      	cmp	r3, r0
		return b2 - b1;
   1c078:	bf14      	ite	ne
   1c07a:	1ac0      	subne	r0, r0, r3
	return 0;
   1c07c:	2000      	moveq	r0, #0
}
   1c07e:	4770      	bx	lr

0001c080 <z_unpend_thread>:
{
   1c080:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c082:	f04f 0320 	mov.w	r3, #32
   1c086:	f3ef 8411 	mrs	r4, BASEPRI
   1c08a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c08e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1c092:	f7ff ffe2 	bl	1c05a <unpend_thread_no_timeout>
	__asm__ volatile(
   1c096:	f384 8811 	msr	BASEPRI, r4
   1c09a:	f3bf 8f6f 	isb	sy
}
   1c09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c0a2:	3018      	adds	r0, #24
   1c0a4:	f000 b8bd 	b.w	1c222 <z_abort_timeout>

0001c0a8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1c0a8:	4603      	mov	r3, r0
   1c0aa:	b920      	cbnz	r0, 1c0b6 <z_reschedule_irqlock+0xe>
   1c0ac:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   1c0b0:	b90a      	cbnz	r2, 1c0b6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   1c0b2:	f7e7 b865 	b.w	3180 <arch_swap>
   1c0b6:	f383 8811 	msr	BASEPRI, r3
   1c0ba:	f3bf 8f6f 	isb	sy
}
   1c0be:	4770      	bx	lr

0001c0c0 <z_reschedule_unlocked>:
	__asm__ volatile(
   1c0c0:	f04f 0320 	mov.w	r3, #32
   1c0c4:	f3ef 8011 	mrs	r0, BASEPRI
   1c0c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0cc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1c0d0:	f7ff bfea 	b.w	1c0a8 <z_reschedule_irqlock>

0001c0d4 <z_priq_dumb_best>:
{
   1c0d4:	4603      	mov	r3, r0
	return list->head == list;
   1c0d6:	6800      	ldr	r0, [r0, #0]
}
   1c0d8:	4283      	cmp	r3, r0
   1c0da:	bf08      	it	eq
   1c0dc:	2000      	moveq	r0, #0
   1c0de:	4770      	bx	lr

0001c0e0 <z_ready_thread>:
{
   1c0e0:	b510      	push	{r4, lr}
   1c0e2:	f04f 0320 	mov.w	r3, #32
   1c0e6:	f3ef 8411 	mrs	r4, BASEPRI
   1c0ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0ee:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   1c0f2:	f7fb fbd3 	bl	1789c <ready_thread>
	__asm__ volatile(
   1c0f6:	f384 8811 	msr	BASEPRI, r4
   1c0fa:	f3bf 8f6f 	isb	sy
}
   1c0fe:	bd10      	pop	{r4, pc}

0001c100 <z_thread_timeout>:
{
   1c100:	b510      	push	{r4, lr}
   1c102:	4601      	mov	r1, r0
	__asm__ volatile(
   1c104:	f04f 0320 	mov.w	r3, #32
   1c108:	f3ef 8411 	mrs	r4, BASEPRI
   1c10c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c110:	f3bf 8f6f 	isb	sy
		if (!killed) {
   1c114:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   1c118:	f013 0f28 	tst.w	r3, #40	; 0x28
   1c11c:	d10d      	bne.n	1c13a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   1c11e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1c122:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   1c124:	b10b      	cbz	r3, 1c12a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   1c126:	f7ff ff98 	bl	1c05a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1c12a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   1c12e:	f023 0314 	bic.w	r3, r3, #20
   1c132:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   1c136:	f7fb fbb1 	bl	1789c <ready_thread>
	__asm__ volatile(
   1c13a:	f384 8811 	msr	BASEPRI, r4
   1c13e:	f3bf 8f6f 	isb	sy
}
   1c142:	bd10      	pop	{r4, pc}

0001c144 <add_to_waitq_locked>:
{
   1c144:	b538      	push	{r3, r4, r5, lr}
   1c146:	4604      	mov	r4, r0
   1c148:	460d      	mov	r5, r1
	unready_thread(thread);
   1c14a:	f7fb fbfb 	bl	17944 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1c14e:	7b63      	ldrb	r3, [r4, #13]
   1c150:	f043 0302 	orr.w	r3, r3, #2
   1c154:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1c156:	b195      	cbz	r5, 1c17e <add_to_waitq_locked+0x3a>
   1c158:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1c15a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c15c:	429d      	cmp	r5, r3
   1c15e:	d015      	beq.n	1c18c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c160:	b1a3      	cbz	r3, 1c18c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   1c162:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1c166:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1c16a:	4291      	cmp	r1, r2
   1c16c:	d008      	beq.n	1c180 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   1c16e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c170:	2a00      	cmp	r2, #0
   1c172:	dd05      	ble.n	1c180 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   1c174:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c176:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1c17a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1c17c:	605c      	str	r4, [r3, #4]
}
   1c17e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1c180:	686a      	ldr	r2, [r5, #4]
   1c182:	4293      	cmp	r3, r2
   1c184:	d002      	beq.n	1c18c <add_to_waitq_locked+0x48>
   1c186:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c188:	2b00      	cmp	r3, #0
   1c18a:	d1ec      	bne.n	1c166 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   1c18c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1c18e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   1c192:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c194:	606c      	str	r4, [r5, #4]
}
   1c196:	e7f2      	b.n	1c17e <add_to_waitq_locked+0x3a>

0001c198 <z_unpend_first_thread>:
{
   1c198:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1c19a:	f04f 0320 	mov.w	r3, #32
   1c19e:	f3ef 8511 	mrs	r5, BASEPRI
   1c1a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c1a6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1c1aa:	f7ff ff93 	bl	1c0d4 <z_priq_dumb_best>
		if (thread != NULL) {
   1c1ae:	4604      	mov	r4, r0
   1c1b0:	b120      	cbz	r0, 1c1bc <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   1c1b2:	f7ff ff52 	bl	1c05a <unpend_thread_no_timeout>
   1c1b6:	3018      	adds	r0, #24
   1c1b8:	f000 f833 	bl	1c222 <z_abort_timeout>
	__asm__ volatile(
   1c1bc:	f385 8811 	msr	BASEPRI, r5
   1c1c0:	f3bf 8f6f 	isb	sy
}
   1c1c4:	4620      	mov	r0, r4
   1c1c6:	bd38      	pop	{r3, r4, r5, pc}

0001c1c8 <z_unpend_all>:
{
   1c1c8:	b538      	push	{r3, r4, r5, lr}
   1c1ca:	4605      	mov	r5, r0
	int need_sched = 0;
   1c1cc:	2000      	movs	r0, #0
	return list->head == list;
   1c1ce:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c1d0:	42a5      	cmp	r5, r4
   1c1d2:	d000      	beq.n	1c1d6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c1d4:	b904      	cbnz	r4, 1c1d8 <z_unpend_all+0x10>
}
   1c1d6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1c1d8:	4620      	mov	r0, r4
   1c1da:	f7ff ff51 	bl	1c080 <z_unpend_thread>
		z_ready_thread(thread);
   1c1de:	4620      	mov	r0, r4
   1c1e0:	f7ff ff7e 	bl	1c0e0 <z_ready_thread>
		need_sched = 1;
   1c1e4:	2001      	movs	r0, #1
   1c1e6:	e7f2      	b.n	1c1ce <z_unpend_all+0x6>

0001c1e8 <z_sched_wake>:
{
   1c1e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1c1ea:	f04f 0320 	mov.w	r3, #32
   1c1ee:	f3ef 8511 	mrs	r5, BASEPRI
   1c1f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c1f6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   1c1fa:	f7ff ff6b 	bl	1c0d4 <z_priq_dumb_best>
		if (thread != NULL) {
   1c1fe:	4604      	mov	r4, r0
   1c200:	b150      	cbz	r0, 1c218 <z_sched_wake+0x30>
   1c202:	67c1      	str	r1, [r0, #124]	; 0x7c
   1c204:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   1c206:	f7ff ff28 	bl	1c05a <unpend_thread_no_timeout>
   1c20a:	3018      	adds	r0, #24
   1c20c:	f000 f809 	bl	1c222 <z_abort_timeout>
			ready_thread(thread);
   1c210:	4620      	mov	r0, r4
   1c212:	f7fb fb43 	bl	1789c <ready_thread>
			ret = true;
   1c216:	2001      	movs	r0, #1
	__asm__ volatile(
   1c218:	f385 8811 	msr	BASEPRI, r5
   1c21c:	f3bf 8f6f 	isb	sy
}
   1c220:	bd38      	pop	{r3, r4, r5, pc}

0001c222 <z_abort_timeout>:
{
   1c222:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c224:	f04f 0220 	mov.w	r2, #32
   1c228:	f3ef 8411 	mrs	r4, BASEPRI
   1c22c:	f382 8812 	msr	BASEPRI_MAX, r2
   1c230:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1c234:	6803      	ldr	r3, [r0, #0]
   1c236:	b13b      	cbz	r3, 1c248 <z_abort_timeout+0x26>
			remove_timeout(to);
   1c238:	f7fb fd98 	bl	17d6c <remove_timeout>
			ret = 0;
   1c23c:	2000      	movs	r0, #0
	__asm__ volatile(
   1c23e:	f384 8811 	msr	BASEPRI, r4
   1c242:	f3bf 8f6f 	isb	sy
}
   1c246:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1c248:	f06f 0015 	mvn.w	r0, #21
   1c24c:	e7f7      	b.n	1c23e <z_abort_timeout+0x1c>

0001c24e <z_get_next_timeout_expiry>:
{
   1c24e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c250:	f04f 0320 	mov.w	r3, #32
   1c254:	f3ef 8411 	mrs	r4, BASEPRI
   1c258:	f383 8812 	msr	BASEPRI_MAX, r3
   1c25c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1c260:	f7fb fd5c 	bl	17d1c <next_timeout>
	__asm__ volatile(
   1c264:	f384 8811 	msr	BASEPRI, r4
   1c268:	f3bf 8f6f 	isb	sy
}
   1c26c:	bd10      	pop	{r4, pc}

0001c26e <z_set_timeout_expiry>:
{
   1c26e:	b570      	push	{r4, r5, r6, lr}
   1c270:	4604      	mov	r4, r0
   1c272:	460d      	mov	r5, r1
	__asm__ volatile(
   1c274:	f04f 0320 	mov.w	r3, #32
   1c278:	f3ef 8611 	mrs	r6, BASEPRI
   1c27c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c280:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1c284:	f7fb fd4a 	bl	17d1c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1c288:	2801      	cmp	r0, #1
   1c28a:	dd05      	ble.n	1c298 <z_set_timeout_expiry+0x2a>
   1c28c:	42a0      	cmp	r0, r4
   1c28e:	db03      	blt.n	1c298 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1c290:	4629      	mov	r1, r5
   1c292:	4620      	mov	r0, r4
   1c294:	f7f9 fc2a 	bl	15aec <sys_clock_set_timeout>
	__asm__ volatile(
   1c298:	f386 8811 	msr	BASEPRI, r6
   1c29c:	f3bf 8f6f 	isb	sy
}
   1c2a0:	bd70      	pop	{r4, r5, r6, pc}

0001c2a2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1c2a2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1c2a4:	f7fb fe52 	bl	17f4c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1c2a8:	bd08      	pop	{r3, pc}

0001c2aa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   1c2aa:	f7fb be4f 	b.w	17f4c <sys_clock_tick_get>

0001c2ae <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1c2ae:	b108      	cbz	r0, 1c2b4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1c2b0:	f7e7 ba40 	b.w	3734 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1c2b4:	4770      	bx	lr

0001c2b6 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c2b6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1c2ba:	bf08      	it	eq
   1c2bc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1c2c0:	b538      	push	{r3, r4, r5, lr}
   1c2c2:	4605      	mov	r5, r0
   1c2c4:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c2c6:	d01d      	beq.n	1c304 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c2c8:	ea51 0300 	orrs.w	r3, r1, r0
   1c2cc:	d103      	bne.n	1c2d6 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1c2ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   1c2d2:	f7fb be3b 	b.w	17f4c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1c2d6:	f06f 0301 	mvn.w	r3, #1
   1c2da:	1a18      	subs	r0, r3, r0
   1c2dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c2e0:	eb63 0101 	sbc.w	r1, r3, r1
   1c2e4:	2900      	cmp	r1, #0
   1c2e6:	da0c      	bge.n	1c302 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   1c2e8:	f7fb fe30 	bl	17f4c <sys_clock_tick_get>
   1c2ec:	2d01      	cmp	r5, #1
   1c2ee:	4622      	mov	r2, r4
   1c2f0:	f174 0400 	sbcs.w	r4, r4, #0
   1c2f4:	462b      	mov	r3, r5
   1c2f6:	bfbc      	itt	lt
   1c2f8:	2301      	movlt	r3, #1
   1c2fa:	2200      	movlt	r2, #0
   1c2fc:	1818      	adds	r0, r3, r0
   1c2fe:	eb41 0102 	adc.w	r1, r1, r2
}
   1c302:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1c304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c308:	4601      	mov	r1, r0
   1c30a:	e7fa      	b.n	1c302 <sys_clock_timeout_end_calc+0x4c>

0001c30c <add_event>:
{
   1c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c30e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c310:	e9d0 1300 	ldrd	r1, r3, [r0]
   1c314:	4288      	cmp	r0, r1
   1c316:	4604      	mov	r4, r0
   1c318:	d00d      	beq.n	1c336 <add_event+0x2a>
	if ((pending == NULL) ||
   1c31a:	b163      	cbz	r3, 1c336 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c31c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1c31e:	b100      	cbz	r0, 1c322 <add_event+0x16>
   1c320:	3860      	subs	r0, #96	; 0x60
   1c322:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c326:	4639      	mov	r1, r7
   1c328:	f7ff fea1 	bl	1c06e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c32c:	2800      	cmp	r0, #0
   1c32e:	dc02      	bgt.n	1c336 <add_event+0x2a>
	return list->head == list;
   1c330:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c332:	42b4      	cmp	r4, r6
   1c334:	d109      	bne.n	1c34a <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   1c336:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   1c338:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   1c33c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1c33e:	6065      	str	r5, [r4, #4]
}
   1c340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1c342:	6863      	ldr	r3, [r4, #4]
   1c344:	42b3      	cmp	r3, r6
   1c346:	d0f6      	beq.n	1c336 <add_event+0x2a>
   1c348:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c34a:	2e00      	cmp	r6, #0
   1c34c:	d0f3      	beq.n	1c336 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c34e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1c350:	b101      	cbz	r1, 1c354 <add_event+0x48>
   1c352:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   1c354:	4638      	mov	r0, r7
   1c356:	f7ff fe8a 	bl	1c06e <z_sched_prio_cmp>
   1c35a:	2800      	cmp	r0, #0
   1c35c:	ddf1      	ble.n	1c342 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   1c35e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1c360:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   1c364:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1c366:	6075      	str	r5, [r6, #4]
			return;
   1c368:	e7ea      	b.n	1c340 <add_event+0x34>

0001c36a <register_events>:
{
   1c36a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1c36e:	2500      	movs	r5, #0
{
   1c370:	468b      	mov	fp, r1
   1c372:	4614      	mov	r4, r2
   1c374:	461f      	mov	r7, r3
   1c376:	4682      	mov	sl, r0
	int events_registered = 0;
   1c378:	462e      	mov	r6, r5
	event->poller = NULL;
   1c37a:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   1c37c:	455d      	cmp	r5, fp
   1c37e:	db02      	blt.n	1c386 <register_events+0x1c>
}
   1c380:	4630      	mov	r0, r6
   1c382:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1c386:	f04f 0320 	mov.w	r3, #32
   1c38a:	f3ef 8911 	mrs	r9, BASEPRI
   1c38e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c392:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1c396:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1c39a:	f003 031f 	and.w	r3, r3, #31
   1c39e:	3b01      	subs	r3, #1
   1c3a0:	2b07      	cmp	r3, #7
   1c3a2:	d80f      	bhi.n	1c3c4 <register_events+0x5a>
   1c3a4:	e8df f003 	tbb	[pc, r3]
   1c3a8:	0a0e041e 	.word	0x0a0e041e
   1c3ac:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   1c3b0:	f8da 3010 	ldr.w	r3, [sl, #16]
   1c3b4:	689b      	ldr	r3, [r3, #8]
   1c3b6:	b12b      	cbz	r3, 1c3c4 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1c3b8:	2302      	movs	r3, #2
   1c3ba:	e020      	b.n	1c3fe <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1c3bc:	f8da 3010 	ldr.w	r3, [sl, #16]
   1c3c0:	681b      	ldr	r3, [r3, #0]
   1c3c2:	bb8b      	cbnz	r3, 1c428 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   1c3c4:	bb47      	cbnz	r7, 1c418 <register_events+0xae>
   1c3c6:	7823      	ldrb	r3, [r4, #0]
   1c3c8:	b333      	cbz	r3, 1c418 <register_events+0xae>
	switch (event->type) {
   1c3ca:	f89a 300d 	ldrb.w	r3, [sl, #13]
   1c3ce:	f003 031f 	and.w	r3, r3, #31
   1c3d2:	3b01      	subs	r3, #1
   1c3d4:	2b07      	cmp	r3, #7
   1c3d6:	d830      	bhi.n	1c43a <register_events+0xd0>
   1c3d8:	e8df f003 	tbb	[pc, r3]
   1c3dc:	282f2833 	.word	0x282f2833
   1c3e0:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   1c3e4:	f8da 3010 	ldr.w	r3, [sl, #16]
   1c3e8:	689b      	ldr	r3, [r3, #8]
   1c3ea:	2b00      	cmp	r3, #0
   1c3ec:	d0ea      	beq.n	1c3c4 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   1c3ee:	2301      	movs	r3, #1
   1c3f0:	e005      	b.n	1c3fe <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   1c3f2:	f8da 3010 	ldr.w	r3, [sl, #16]
   1c3f6:	6a1b      	ldr	r3, [r3, #32]
   1c3f8:	2b00      	cmp	r3, #0
   1c3fa:	d0e3      	beq.n	1c3c4 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1c3fc:	2310      	movs	r3, #16
	event->state |= state;
   1c3fe:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   1c402:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   1c406:	f3c2 3145 	ubfx	r1, r2, #13, #6
   1c40a:	430b      	orrs	r3, r1
   1c40c:	f363 3252 	bfi	r2, r3, #13, #6
   1c410:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   1c414:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1c418:	f389 8811 	msr	BASEPRI, r9
   1c41c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c420:	3501      	adds	r5, #1
   1c422:	f10a 0a14 	add.w	sl, sl, #20
   1c426:	e7a9      	b.n	1c37c <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1c428:	2304      	movs	r3, #4
   1c42a:	e7e8      	b.n	1c3fe <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   1c42c:	f8da 0010 	ldr.w	r0, [sl, #16]
   1c430:	4622      	mov	r2, r4
   1c432:	4651      	mov	r1, sl
   1c434:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   1c436:	f7ff ff69 	bl	1c30c <add_event>
	event->poller = poller;
   1c43a:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   1c43e:	3601      	adds	r6, #1
   1c440:	e7ea      	b.n	1c418 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   1c442:	f8da 0010 	ldr.w	r0, [sl, #16]
   1c446:	4622      	mov	r2, r4
   1c448:	4651      	mov	r1, sl
   1c44a:	e7f4      	b.n	1c436 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   1c44c:	f8da 0010 	ldr.w	r0, [sl, #16]
   1c450:	4622      	mov	r2, r4
   1c452:	4651      	mov	r1, sl
   1c454:	3024      	adds	r0, #36	; 0x24
   1c456:	e7ee      	b.n	1c436 <register_events+0xcc>

0001c458 <signal_poll_event>:
{
   1c458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1c45c:	6884      	ldr	r4, [r0, #8]
{
   1c45e:	4605      	mov	r5, r0
   1c460:	460e      	mov	r6, r1
	if (poller != NULL) {
   1c462:	b144      	cbz	r4, 1c476 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1c464:	7863      	ldrb	r3, [r4, #1]
   1c466:	2b01      	cmp	r3, #1
   1c468:	d136      	bne.n	1c4d8 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   1c46a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1c46e:	f013 0302 	ands.w	r3, r3, #2
   1c472:	d10a      	bne.n	1c48a <signal_poll_event+0x32>
		poller->is_polling = false;
   1c474:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   1c476:	68eb      	ldr	r3, [r5, #12]
   1c478:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1c47c:	430e      	orrs	r6, r1
	event->poller = NULL;
   1c47e:	2000      	movs	r0, #0
	event->state |= state;
   1c480:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   1c484:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1c486:	60eb      	str	r3, [r5, #12]
	return retcode;
   1c488:	e00b      	b.n	1c4a2 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   1c48a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   1c48e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c492:	bf08      	it	eq
   1c494:	f112 0f02 	cmneq.w	r2, #2
   1c498:	d105      	bne.n	1c4a6 <signal_poll_event+0x4e>
		poller->is_polling = false;
   1c49a:	2300      	movs	r3, #0
   1c49c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   1c49e:	f06f 000a 	mvn.w	r0, #10
}
   1c4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1c4a6:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   1c4aa:	4640      	mov	r0, r8
   1c4ac:	f7ff fde8 	bl	1c080 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1c4b0:	2e08      	cmp	r6, #8
   1c4b2:	bf0c      	ite	eq
   1c4b4:	f06f 0303 	mvneq.w	r3, #3
   1c4b8:	2300      	movne	r3, #0
   1c4ba:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c4bc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   1c4c0:	06db      	lsls	r3, r3, #27
   1c4c2:	d102      	bne.n	1c4ca <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   1c4c4:	f854 7c48 	ldr.w	r7, [r4, #-72]
   1c4c8:	b10f      	cbz	r7, 1c4ce <signal_poll_event+0x76>
		poller->is_polling = false;
   1c4ca:	2300      	movs	r3, #0
   1c4cc:	e7d2      	b.n	1c474 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1c4ce:	4640      	mov	r0, r8
   1c4d0:	f7ff fe06 	bl	1c0e0 <z_ready_thread>
		poller->is_polling = false;
   1c4d4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1c4d6:	e7ce      	b.n	1c476 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1c4d8:	2b02      	cmp	r3, #2
   1c4da:	d1f6      	bne.n	1c4ca <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1c4dc:	7823      	ldrb	r3, [r4, #0]
   1c4de:	2b00      	cmp	r3, #0
   1c4e0:	d0c9      	beq.n	1c476 <signal_poll_event+0x1e>
   1c4e2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1c4e6:	2f00      	cmp	r7, #0
   1c4e8:	d0f4      	beq.n	1c4d4 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1c4ea:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1c4ee:	f1a4 0914 	sub.w	r9, r4, #20
   1c4f2:	f104 0014 	add.w	r0, r4, #20
   1c4f6:	f7ff fe94 	bl	1c222 <z_abort_timeout>
		twork->poll_result = 0;
   1c4fa:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1c4fe:	4649      	mov	r1, r9
   1c500:	4638      	mov	r0, r7
   1c502:	f7ff fd39 	bl	1bf78 <k_work_submit_to_queue>
		poller->is_polling = false;
   1c506:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1c50a:	e7b4      	b.n	1c476 <signal_poll_event+0x1e>

0001c50c <clear_event_registrations>:
	while (num_events--) {
   1c50c:	2314      	movs	r3, #20
{
   1c50e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c510:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   1c514:	2400      	movs	r4, #0
   1c516:	2601      	movs	r6, #1
	while (num_events--) {
   1c518:	b901      	cbnz	r1, 1c51c <clear_event_registrations+0x10>
}
   1c51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   1c51c:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   1c520:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   1c524:	f003 031f 	and.w	r3, r3, #31
   1c528:	2b08      	cmp	r3, #8
   1c52a:	f1a0 0714 	sub.w	r7, r0, #20
   1c52e:	d80d      	bhi.n	1c54c <clear_event_registrations+0x40>
   1c530:	fa06 f303 	lsl.w	r3, r6, r3
   1c534:	f413 7f8b 	tst.w	r3, #278	; 0x116
   1c538:	d008      	beq.n	1c54c <clear_event_registrations+0x40>
	return node->next != NULL;
   1c53a:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c53e:	b12b      	cbz	r3, 1c54c <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   1c540:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   1c544:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   1c546:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1c548:	e940 4405 	strd	r4, r4, [r0, #-20]
   1c54c:	f382 8811 	msr	BASEPRI, r2
   1c550:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c554:	f04f 0320 	mov.w	r3, #32
   1c558:	f3ef 8211 	mrs	r2, BASEPRI
   1c55c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c560:	f3bf 8f6f 	isb	sy
   1c564:	3901      	subs	r1, #1
   1c566:	4638      	mov	r0, r7
   1c568:	e7d6      	b.n	1c518 <clear_event_registrations+0xc>

0001c56a <k_poll_event_init>:
{
   1c56a:	b510      	push	{r4, lr}
	event->type = type;
   1c56c:	04d2      	lsls	r2, r2, #19
   1c56e:	0209      	lsls	r1, r1, #8
   1c570:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   1c574:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   1c578:	430a      	orrs	r2, r1
   1c57a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1c57c:	2400      	movs	r4, #0
	event->type = type;
   1c57e:	430a      	orrs	r2, r1
	event->obj = obj;
   1c580:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1c584:	6084      	str	r4, [r0, #8]
}
   1c586:	bd10      	pop	{r4, pc}

0001c588 <z_handle_obj_poll_events>:
{
   1c588:	4603      	mov	r3, r0
	return list->head == list;
   1c58a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1c58c:	4283      	cmp	r3, r0
   1c58e:	d008      	beq.n	1c5a2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   1c590:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1c594:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c596:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c598:	2300      	movs	r3, #0
	node->prev = NULL;
   1c59a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1c59e:	f7ff bf5b 	b.w	1c458 <signal_poll_event>
}
   1c5a2:	4770      	bx	lr

0001c5a4 <k_free>:
	if (ptr != NULL) {
   1c5a4:	b120      	cbz	r0, 1c5b0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   1c5a6:	1f01      	subs	r1, r0, #4
   1c5a8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1c5ac:	f7ff bb36 	b.w	1bc1c <k_heap_free>
}
   1c5b0:	4770      	bx	lr
	...

0001c5b4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1c5b4:	f7f9 baf2 	b.w	15b9c <SystemInit>
